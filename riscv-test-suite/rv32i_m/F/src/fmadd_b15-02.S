
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:17:59 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_128:
// fs1 == 0 and fe1 == 0xf5 and fm1 == 0x3530a7 and fs2 == 1 and fe2 == 0x88 and fm2 == 0x34d948 and fs3 == 1 and fe3 == 0xd4 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ab530a7; op2val:0xc434d948;
op3val:0xea00000f; valaddr_reg:x3; val_offset:384*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 384*0 + 3*1*FLEN/8, x4, x1, x2)

inst_129:
// fs1 == 0 and fe1 == 0xf5 and fm1 == 0x3530a7 and fs2 == 1 and fe2 == 0x88 and fm2 == 0x34d948 and fs3 == 1 and fe3 == 0xd4 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ab530a7; op2val:0xc434d948;
op3val:0xea00001f; valaddr_reg:x3; val_offset:387*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 387*0 + 3*1*FLEN/8, x4, x1, x2)

inst_130:
// fs1 == 0 and fe1 == 0xf5 and fm1 == 0x3530a7 and fs2 == 1 and fe2 == 0x88 and fm2 == 0x34d948 and fs3 == 1 and fe3 == 0xd4 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ab530a7; op2val:0xc434d948;
op3val:0xea00003f; valaddr_reg:x3; val_offset:390*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 390*0 + 3*1*FLEN/8, x4, x1, x2)

inst_131:
// fs1 == 0 and fe1 == 0xf5 and fm1 == 0x3530a7 and fs2 == 1 and fe2 == 0x88 and fm2 == 0x34d948 and fs3 == 1 and fe3 == 0xd4 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ab530a7; op2val:0xc434d948;
op3val:0xea00007f; valaddr_reg:x3; val_offset:393*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 393*0 + 3*1*FLEN/8, x4, x1, x2)

inst_132:
// fs1 == 0 and fe1 == 0xf5 and fm1 == 0x3530a7 and fs2 == 1 and fe2 == 0x88 and fm2 == 0x34d948 and fs3 == 1 and fe3 == 0xd4 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ab530a7; op2val:0xc434d948;
op3val:0xea0000ff; valaddr_reg:x3; val_offset:396*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 396*0 + 3*1*FLEN/8, x4, x1, x2)

inst_133:
// fs1 == 0 and fe1 == 0xf5 and fm1 == 0x3530a7 and fs2 == 1 and fe2 == 0x88 and fm2 == 0x34d948 and fs3 == 1 and fe3 == 0xd4 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ab530a7; op2val:0xc434d948;
op3val:0xea0001ff; valaddr_reg:x3; val_offset:399*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 399*0 + 3*1*FLEN/8, x4, x1, x2)

inst_134:
// fs1 == 0 and fe1 == 0xf5 and fm1 == 0x3530a7 and fs2 == 1 and fe2 == 0x88 and fm2 == 0x34d948 and fs3 == 1 and fe3 == 0xd4 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ab530a7; op2val:0xc434d948;
op3val:0xea0003ff; valaddr_reg:x3; val_offset:402*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 402*0 + 3*1*FLEN/8, x4, x1, x2)

inst_135:
// fs1 == 0 and fe1 == 0xf5 and fm1 == 0x3530a7 and fs2 == 1 and fe2 == 0x88 and fm2 == 0x34d948 and fs3 == 1 and fe3 == 0xd4 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ab530a7; op2val:0xc434d948;
op3val:0xea0007ff; valaddr_reg:x3; val_offset:405*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 405*0 + 3*1*FLEN/8, x4, x1, x2)

inst_136:
// fs1 == 0 and fe1 == 0xf5 and fm1 == 0x3530a7 and fs2 == 1 and fe2 == 0x88 and fm2 == 0x34d948 and fs3 == 1 and fe3 == 0xd4 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ab530a7; op2val:0xc434d948;
op3val:0xea000fff; valaddr_reg:x3; val_offset:408*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 408*0 + 3*1*FLEN/8, x4, x1, x2)

inst_137:
// fs1 == 0 and fe1 == 0xf5 and fm1 == 0x3530a7 and fs2 == 1 and fe2 == 0x88 and fm2 == 0x34d948 and fs3 == 1 and fe3 == 0xd4 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ab530a7; op2val:0xc434d948;
op3val:0xea001fff; valaddr_reg:x3; val_offset:411*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 411*0 + 3*1*FLEN/8, x4, x1, x2)

inst_138:
// fs1 == 0 and fe1 == 0xf5 and fm1 == 0x3530a7 and fs2 == 1 and fe2 == 0x88 and fm2 == 0x34d948 and fs3 == 1 and fe3 == 0xd4 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ab530a7; op2val:0xc434d948;
op3val:0xea003fff; valaddr_reg:x3; val_offset:414*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 414*0 + 3*1*FLEN/8, x4, x1, x2)

inst_139:
// fs1 == 0 and fe1 == 0xf5 and fm1 == 0x3530a7 and fs2 == 1 and fe2 == 0x88 and fm2 == 0x34d948 and fs3 == 1 and fe3 == 0xd4 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ab530a7; op2val:0xc434d948;
op3val:0xea007fff; valaddr_reg:x3; val_offset:417*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 417*0 + 3*1*FLEN/8, x4, x1, x2)

inst_140:
// fs1 == 0 and fe1 == 0xf5 and fm1 == 0x3530a7 and fs2 == 1 and fe2 == 0x88 and fm2 == 0x34d948 and fs3 == 1 and fe3 == 0xd4 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ab530a7; op2val:0xc434d948;
op3val:0xea00ffff; valaddr_reg:x3; val_offset:420*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 420*0 + 3*1*FLEN/8, x4, x1, x2)

inst_141:
// fs1 == 0 and fe1 == 0xf5 and fm1 == 0x3530a7 and fs2 == 1 and fe2 == 0x88 and fm2 == 0x34d948 and fs3 == 1 and fe3 == 0xd4 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ab530a7; op2val:0xc434d948;
op3val:0xea01ffff; valaddr_reg:x3; val_offset:423*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 423*0 + 3*1*FLEN/8, x4, x1, x2)

inst_142:
// fs1 == 0 and fe1 == 0xf5 and fm1 == 0x3530a7 and fs2 == 1 and fe2 == 0x88 and fm2 == 0x34d948 and fs3 == 1 and fe3 == 0xd4 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ab530a7; op2val:0xc434d948;
op3val:0xea03ffff; valaddr_reg:x3; val_offset:426*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 426*0 + 3*1*FLEN/8, x4, x1, x2)

inst_143:
// fs1 == 0 and fe1 == 0xf5 and fm1 == 0x3530a7 and fs2 == 1 and fe2 == 0x88 and fm2 == 0x34d948 and fs3 == 1 and fe3 == 0xd4 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ab530a7; op2val:0xc434d948;
op3val:0xea07ffff; valaddr_reg:x3; val_offset:429*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 429*0 + 3*1*FLEN/8, x4, x1, x2)

inst_144:
// fs1 == 0 and fe1 == 0xf5 and fm1 == 0x3530a7 and fs2 == 1 and fe2 == 0x88 and fm2 == 0x34d948 and fs3 == 1 and fe3 == 0xd4 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ab530a7; op2val:0xc434d948;
op3val:0xea0fffff; valaddr_reg:x3; val_offset:432*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 432*0 + 3*1*FLEN/8, x4, x1, x2)

inst_145:
// fs1 == 0 and fe1 == 0xf5 and fm1 == 0x3530a7 and fs2 == 1 and fe2 == 0x88 and fm2 == 0x34d948 and fs3 == 1 and fe3 == 0xd4 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ab530a7; op2val:0xc434d948;
op3val:0xea1fffff; valaddr_reg:x3; val_offset:435*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 435*0 + 3*1*FLEN/8, x4, x1, x2)

inst_146:
// fs1 == 0 and fe1 == 0xf5 and fm1 == 0x3530a7 and fs2 == 1 and fe2 == 0x88 and fm2 == 0x34d948 and fs3 == 1 and fe3 == 0xd4 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ab530a7; op2val:0xc434d948;
op3val:0xea3fffff; valaddr_reg:x3; val_offset:438*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 438*0 + 3*1*FLEN/8, x4, x1, x2)

inst_147:
// fs1 == 0 and fe1 == 0xf5 and fm1 == 0x3530a7 and fs2 == 1 and fe2 == 0x88 and fm2 == 0x34d948 and fs3 == 1 and fe3 == 0xd4 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ab530a7; op2val:0xc434d948;
op3val:0xea400000; valaddr_reg:x3; val_offset:441*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 441*0 + 3*1*FLEN/8, x4, x1, x2)

inst_148:
// fs1 == 0 and fe1 == 0xf5 and fm1 == 0x3530a7 and fs2 == 1 and fe2 == 0x88 and fm2 == 0x34d948 and fs3 == 1 and fe3 == 0xd4 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ab530a7; op2val:0xc434d948;
op3val:0xea600000; valaddr_reg:x3; val_offset:444*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 444*0 + 3*1*FLEN/8, x4, x1, x2)

inst_149:
// fs1 == 0 and fe1 == 0xf5 and fm1 == 0x3530a7 and fs2 == 1 and fe2 == 0x88 and fm2 == 0x34d948 and fs3 == 1 and fe3 == 0xd4 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ab530a7; op2val:0xc434d948;
op3val:0xea700000; valaddr_reg:x3; val_offset:447*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 447*0 + 3*1*FLEN/8, x4, x1, x2)

inst_150:
// fs1 == 0 and fe1 == 0xf5 and fm1 == 0x3530a7 and fs2 == 1 and fe2 == 0x88 and fm2 == 0x34d948 and fs3 == 1 and fe3 == 0xd4 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ab530a7; op2val:0xc434d948;
op3val:0xea780000; valaddr_reg:x3; val_offset:450*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 450*0 + 3*1*FLEN/8, x4, x1, x2)

inst_151:
// fs1 == 0 and fe1 == 0xf5 and fm1 == 0x3530a7 and fs2 == 1 and fe2 == 0x88 and fm2 == 0x34d948 and fs3 == 1 and fe3 == 0xd4 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ab530a7; op2val:0xc434d948;
op3val:0xea7c0000; valaddr_reg:x3; val_offset:453*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 453*0 + 3*1*FLEN/8, x4, x1, x2)

inst_152:
// fs1 == 0 and fe1 == 0xf5 and fm1 == 0x3530a7 and fs2 == 1 and fe2 == 0x88 and fm2 == 0x34d948 and fs3 == 1 and fe3 == 0xd4 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ab530a7; op2val:0xc434d948;
op3val:0xea7e0000; valaddr_reg:x3; val_offset:456*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 456*0 + 3*1*FLEN/8, x4, x1, x2)

inst_153:
// fs1 == 0 and fe1 == 0xf5 and fm1 == 0x3530a7 and fs2 == 1 and fe2 == 0x88 and fm2 == 0x34d948 and fs3 == 1 and fe3 == 0xd4 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ab530a7; op2val:0xc434d948;
op3val:0xea7f0000; valaddr_reg:x3; val_offset:459*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 459*0 + 3*1*FLEN/8, x4, x1, x2)

inst_154:
// fs1 == 0 and fe1 == 0xf5 and fm1 == 0x3530a7 and fs2 == 1 and fe2 == 0x88 and fm2 == 0x34d948 and fs3 == 1 and fe3 == 0xd4 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ab530a7; op2val:0xc434d948;
op3val:0xea7f8000; valaddr_reg:x3; val_offset:462*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 462*0 + 3*1*FLEN/8, x4, x1, x2)

inst_155:
// fs1 == 0 and fe1 == 0xf5 and fm1 == 0x3530a7 and fs2 == 1 and fe2 == 0x88 and fm2 == 0x34d948 and fs3 == 1 and fe3 == 0xd4 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ab530a7; op2val:0xc434d948;
op3val:0xea7fc000; valaddr_reg:x3; val_offset:465*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 465*0 + 3*1*FLEN/8, x4, x1, x2)

inst_156:
// fs1 == 0 and fe1 == 0xf5 and fm1 == 0x3530a7 and fs2 == 1 and fe2 == 0x88 and fm2 == 0x34d948 and fs3 == 1 and fe3 == 0xd4 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ab530a7; op2val:0xc434d948;
op3val:0xea7fe000; valaddr_reg:x3; val_offset:468*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 468*0 + 3*1*FLEN/8, x4, x1, x2)

inst_157:
// fs1 == 0 and fe1 == 0xf5 and fm1 == 0x3530a7 and fs2 == 1 and fe2 == 0x88 and fm2 == 0x34d948 and fs3 == 1 and fe3 == 0xd4 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ab530a7; op2val:0xc434d948;
op3val:0xea7ff000; valaddr_reg:x3; val_offset:471*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 471*0 + 3*1*FLEN/8, x4, x1, x2)

inst_158:
// fs1 == 0 and fe1 == 0xf5 and fm1 == 0x3530a7 and fs2 == 1 and fe2 == 0x88 and fm2 == 0x34d948 and fs3 == 1 and fe3 == 0xd4 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ab530a7; op2val:0xc434d948;
op3val:0xea7ff800; valaddr_reg:x3; val_offset:474*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 474*0 + 3*1*FLEN/8, x4, x1, x2)

inst_159:
// fs1 == 0 and fe1 == 0xf5 and fm1 == 0x3530a7 and fs2 == 1 and fe2 == 0x88 and fm2 == 0x34d948 and fs3 == 1 and fe3 == 0xd4 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ab530a7; op2val:0xc434d948;
op3val:0xea7ffc00; valaddr_reg:x3; val_offset:477*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 477*0 + 3*1*FLEN/8, x4, x1, x2)

inst_160:
// fs1 == 0 and fe1 == 0xf5 and fm1 == 0x3530a7 and fs2 == 1 and fe2 == 0x88 and fm2 == 0x34d948 and fs3 == 1 and fe3 == 0xd4 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ab530a7; op2val:0xc434d948;
op3val:0xea7ffe00; valaddr_reg:x3; val_offset:480*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 480*0 + 3*1*FLEN/8, x4, x1, x2)

inst_161:
// fs1 == 0 and fe1 == 0xf5 and fm1 == 0x3530a7 and fs2 == 1 and fe2 == 0x88 and fm2 == 0x34d948 and fs3 == 1 and fe3 == 0xd4 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ab530a7; op2val:0xc434d948;
op3val:0xea7fff00; valaddr_reg:x3; val_offset:483*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 483*0 + 3*1*FLEN/8, x4, x1, x2)

inst_162:
// fs1 == 0 and fe1 == 0xf5 and fm1 == 0x3530a7 and fs2 == 1 and fe2 == 0x88 and fm2 == 0x34d948 and fs3 == 1 and fe3 == 0xd4 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ab530a7; op2val:0xc434d948;
op3val:0xea7fff80; valaddr_reg:x3; val_offset:486*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 486*0 + 3*1*FLEN/8, x4, x1, x2)

inst_163:
// fs1 == 0 and fe1 == 0xf5 and fm1 == 0x3530a7 and fs2 == 1 and fe2 == 0x88 and fm2 == 0x34d948 and fs3 == 1 and fe3 == 0xd4 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ab530a7; op2val:0xc434d948;
op3val:0xea7fffc0; valaddr_reg:x3; val_offset:489*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 489*0 + 3*1*FLEN/8, x4, x1, x2)

inst_164:
// fs1 == 0 and fe1 == 0xf5 and fm1 == 0x3530a7 and fs2 == 1 and fe2 == 0x88 and fm2 == 0x34d948 and fs3 == 1 and fe3 == 0xd4 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ab530a7; op2val:0xc434d948;
op3val:0xea7fffe0; valaddr_reg:x3; val_offset:492*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 492*0 + 3*1*FLEN/8, x4, x1, x2)

inst_165:
// fs1 == 0 and fe1 == 0xf5 and fm1 == 0x3530a7 and fs2 == 1 and fe2 == 0x88 and fm2 == 0x34d948 and fs3 == 1 and fe3 == 0xd4 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ab530a7; op2val:0xc434d948;
op3val:0xea7ffff0; valaddr_reg:x3; val_offset:495*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 495*0 + 3*1*FLEN/8, x4, x1, x2)

inst_166:
// fs1 == 0 and fe1 == 0xf5 and fm1 == 0x3530a7 and fs2 == 1 and fe2 == 0x88 and fm2 == 0x34d948 and fs3 == 1 and fe3 == 0xd4 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ab530a7; op2val:0xc434d948;
op3val:0xea7ffff8; valaddr_reg:x3; val_offset:498*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 498*0 + 3*1*FLEN/8, x4, x1, x2)

inst_167:
// fs1 == 0 and fe1 == 0xf5 and fm1 == 0x3530a7 and fs2 == 1 and fe2 == 0x88 and fm2 == 0x34d948 and fs3 == 1 and fe3 == 0xd4 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ab530a7; op2val:0xc434d948;
op3val:0xea7ffffc; valaddr_reg:x3; val_offset:501*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 501*0 + 3*1*FLEN/8, x4, x1, x2)

inst_168:
// fs1 == 0 and fe1 == 0xf5 and fm1 == 0x3530a7 and fs2 == 1 and fe2 == 0x88 and fm2 == 0x34d948 and fs3 == 1 and fe3 == 0xd4 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ab530a7; op2val:0xc434d948;
op3val:0xea7ffffe; valaddr_reg:x3; val_offset:504*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 504*0 + 3*1*FLEN/8, x4, x1, x2)

inst_169:
// fs1 == 0 and fe1 == 0xf5 and fm1 == 0x3530a7 and fs2 == 1 and fe2 == 0x88 and fm2 == 0x34d948 and fs3 == 1 and fe3 == 0xd4 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ab530a7; op2val:0xc434d948;
op3val:0xea7fffff; valaddr_reg:x3; val_offset:507*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 507*0 + 3*1*FLEN/8, x4, x1, x2)

inst_170:
// fs1 == 0 and fe1 == 0xf5 and fm1 == 0x3530a7 and fs2 == 1 and fe2 == 0x88 and fm2 == 0x34d948 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ab530a7; op2val:0xc434d948;
op3val:0xff000001; valaddr_reg:x3; val_offset:510*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 510*0 + 3*1*FLEN/8, x4, x1, x2)

inst_171:
// fs1 == 0 and fe1 == 0xf5 and fm1 == 0x3530a7 and fs2 == 1 and fe2 == 0x88 and fm2 == 0x34d948 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ab530a7; op2val:0xc434d948;
op3val:0xff000003; valaddr_reg:x3; val_offset:513*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 513*0 + 3*1*FLEN/8, x4, x1, x2)

inst_172:
// fs1 == 0 and fe1 == 0xf5 and fm1 == 0x3530a7 and fs2 == 1 and fe2 == 0x88 and fm2 == 0x34d948 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ab530a7; op2val:0xc434d948;
op3val:0xff000007; valaddr_reg:x3; val_offset:516*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 516*0 + 3*1*FLEN/8, x4, x1, x2)

inst_173:
// fs1 == 0 and fe1 == 0xf5 and fm1 == 0x3530a7 and fs2 == 1 and fe2 == 0x88 and fm2 == 0x34d948 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ab530a7; op2val:0xc434d948;
op3val:0xff199999; valaddr_reg:x3; val_offset:519*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 519*0 + 3*1*FLEN/8, x4, x1, x2)

inst_174:
// fs1 == 0 and fe1 == 0xf5 and fm1 == 0x3530a7 and fs2 == 1 and fe2 == 0x88 and fm2 == 0x34d948 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ab530a7; op2val:0xc434d948;
op3val:0xff249249; valaddr_reg:x3; val_offset:522*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 522*0 + 3*1*FLEN/8, x4, x1, x2)

inst_175:
// fs1 == 0 and fe1 == 0xf5 and fm1 == 0x3530a7 and fs2 == 1 and fe2 == 0x88 and fm2 == 0x34d948 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ab530a7; op2val:0xc434d948;
op3val:0xff333333; valaddr_reg:x3; val_offset:525*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 525*0 + 3*1*FLEN/8, x4, x1, x2)

inst_176:
// fs1 == 0 and fe1 == 0xf5 and fm1 == 0x3530a7 and fs2 == 1 and fe2 == 0x88 and fm2 == 0x34d948 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ab530a7; op2val:0xc434d948;
op3val:0xff36db6d; valaddr_reg:x3; val_offset:528*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 528*0 + 3*1*FLEN/8, x4, x1, x2)

inst_177:
// fs1 == 0 and fe1 == 0xf5 and fm1 == 0x3530a7 and fs2 == 1 and fe2 == 0x88 and fm2 == 0x34d948 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ab530a7; op2val:0xc434d948;
op3val:0xff3bbbbb; valaddr_reg:x3; val_offset:531*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 531*0 + 3*1*FLEN/8, x4, x1, x2)

inst_178:
// fs1 == 0 and fe1 == 0xf5 and fm1 == 0x3530a7 and fs2 == 1 and fe2 == 0x88 and fm2 == 0x34d948 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ab530a7; op2val:0xc434d948;
op3val:0xff444444; valaddr_reg:x3; val_offset:534*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 534*0 + 3*1*FLEN/8, x4, x1, x2)

inst_179:
// fs1 == 0 and fe1 == 0xf5 and fm1 == 0x3530a7 and fs2 == 1 and fe2 == 0x88 and fm2 == 0x34d948 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ab530a7; op2val:0xc434d948;
op3val:0xff4ccccc; valaddr_reg:x3; val_offset:537*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 537*0 + 3*1*FLEN/8, x4, x1, x2)

inst_180:
// fs1 == 0 and fe1 == 0xf5 and fm1 == 0x3530a7 and fs2 == 1 and fe2 == 0x88 and fm2 == 0x34d948 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ab530a7; op2val:0xc434d948;
op3val:0xff5b6db6; valaddr_reg:x3; val_offset:540*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 540*0 + 3*1*FLEN/8, x4, x1, x2)

inst_181:
// fs1 == 0 and fe1 == 0xf5 and fm1 == 0x3530a7 and fs2 == 1 and fe2 == 0x88 and fm2 == 0x34d948 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ab530a7; op2val:0xc434d948;
op3val:0xff666666; valaddr_reg:x3; val_offset:543*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 543*0 + 3*1*FLEN/8, x4, x1, x2)

inst_182:
// fs1 == 0 and fe1 == 0xf5 and fm1 == 0x3530a7 and fs2 == 1 and fe2 == 0x88 and fm2 == 0x34d948 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ab530a7; op2val:0xc434d948;
op3val:0xff6db6db; valaddr_reg:x3; val_offset:546*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 546*0 + 3*1*FLEN/8, x4, x1, x2)

inst_183:
// fs1 == 0 and fe1 == 0xf5 and fm1 == 0x3530a7 and fs2 == 1 and fe2 == 0x88 and fm2 == 0x34d948 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ab530a7; op2val:0xc434d948;
op3val:0xff7ffff8; valaddr_reg:x3; val_offset:549*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 549*0 + 3*1*FLEN/8, x4, x1, x2)

inst_184:
// fs1 == 0 and fe1 == 0xf5 and fm1 == 0x3530a7 and fs2 == 1 and fe2 == 0x88 and fm2 == 0x34d948 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ab530a7; op2val:0xc434d948;
op3val:0xff7ffffc; valaddr_reg:x3; val_offset:552*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 552*0 + 3*1*FLEN/8, x4, x1, x2)

inst_185:
// fs1 == 0 and fe1 == 0xf5 and fm1 == 0x3530a7 and fs2 == 1 and fe2 == 0x88 and fm2 == 0x34d948 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ab530a7; op2val:0xc434d948;
op3val:0xff7ffffe; valaddr_reg:x3; val_offset:555*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 555*0 + 3*1*FLEN/8, x4, x1, x2)

inst_186:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x1edd3c and fs2 == 0 and fe2 == 0x87 and fm2 == 0x4e43a2 and fs3 == 0 and fe3 == 0xcd and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b1edd3c; op2val:0x43ce43a2;
op3val:0x66800000; valaddr_reg:x3; val_offset:558*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 558*0 + 3*1*FLEN/8, x4, x1, x2)

inst_187:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x1edd3c and fs2 == 0 and fe2 == 0x87 and fm2 == 0x4e43a2 and fs3 == 0 and fe3 == 0xcd and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b1edd3c; op2val:0x43ce43a2;
op3val:0x66800001; valaddr_reg:x3; val_offset:561*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 561*0 + 3*1*FLEN/8, x4, x1, x2)

inst_188:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x1edd3c and fs2 == 0 and fe2 == 0x87 and fm2 == 0x4e43a2 and fs3 == 0 and fe3 == 0xcd and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b1edd3c; op2val:0x43ce43a2;
op3val:0x66800003; valaddr_reg:x3; val_offset:564*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 564*0 + 3*1*FLEN/8, x4, x1, x2)

inst_189:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x1edd3c and fs2 == 0 and fe2 == 0x87 and fm2 == 0x4e43a2 and fs3 == 0 and fe3 == 0xcd and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b1edd3c; op2val:0x43ce43a2;
op3val:0x66800007; valaddr_reg:x3; val_offset:567*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 567*0 + 3*1*FLEN/8, x4, x1, x2)

inst_190:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x1edd3c and fs2 == 0 and fe2 == 0x87 and fm2 == 0x4e43a2 and fs3 == 0 and fe3 == 0xcd and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b1edd3c; op2val:0x43ce43a2;
op3val:0x6680000f; valaddr_reg:x3; val_offset:570*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 570*0 + 3*1*FLEN/8, x4, x1, x2)

inst_191:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x1edd3c and fs2 == 0 and fe2 == 0x87 and fm2 == 0x4e43a2 and fs3 == 0 and fe3 == 0xcd and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b1edd3c; op2val:0x43ce43a2;
op3val:0x6680001f; valaddr_reg:x3; val_offset:573*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 573*0 + 3*1*FLEN/8, x4, x1, x2)

inst_192:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x1edd3c and fs2 == 0 and fe2 == 0x87 and fm2 == 0x4e43a2 and fs3 == 0 and fe3 == 0xcd and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b1edd3c; op2val:0x43ce43a2;
op3val:0x6680003f; valaddr_reg:x3; val_offset:576*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 576*0 + 3*1*FLEN/8, x4, x1, x2)

inst_193:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x1edd3c and fs2 == 0 and fe2 == 0x87 and fm2 == 0x4e43a2 and fs3 == 0 and fe3 == 0xcd and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b1edd3c; op2val:0x43ce43a2;
op3val:0x6680007f; valaddr_reg:x3; val_offset:579*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 579*0 + 3*1*FLEN/8, x4, x1, x2)

inst_194:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x1edd3c and fs2 == 0 and fe2 == 0x87 and fm2 == 0x4e43a2 and fs3 == 0 and fe3 == 0xcd and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b1edd3c; op2val:0x43ce43a2;
op3val:0x668000ff; valaddr_reg:x3; val_offset:582*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 582*0 + 3*1*FLEN/8, x4, x1, x2)

inst_195:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x1edd3c and fs2 == 0 and fe2 == 0x87 and fm2 == 0x4e43a2 and fs3 == 0 and fe3 == 0xcd and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b1edd3c; op2val:0x43ce43a2;
op3val:0x668001ff; valaddr_reg:x3; val_offset:585*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 585*0 + 3*1*FLEN/8, x4, x1, x2)

inst_196:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x1edd3c and fs2 == 0 and fe2 == 0x87 and fm2 == 0x4e43a2 and fs3 == 0 and fe3 == 0xcd and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b1edd3c; op2val:0x43ce43a2;
op3val:0x668003ff; valaddr_reg:x3; val_offset:588*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 588*0 + 3*1*FLEN/8, x4, x1, x2)

inst_197:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x1edd3c and fs2 == 0 and fe2 == 0x87 and fm2 == 0x4e43a2 and fs3 == 0 and fe3 == 0xcd and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b1edd3c; op2val:0x43ce43a2;
op3val:0x668007ff; valaddr_reg:x3; val_offset:591*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 591*0 + 3*1*FLEN/8, x4, x1, x2)

inst_198:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x1edd3c and fs2 == 0 and fe2 == 0x87 and fm2 == 0x4e43a2 and fs3 == 0 and fe3 == 0xcd and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b1edd3c; op2val:0x43ce43a2;
op3val:0x66800fff; valaddr_reg:x3; val_offset:594*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 594*0 + 3*1*FLEN/8, x4, x1, x2)

inst_199:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x1edd3c and fs2 == 0 and fe2 == 0x87 and fm2 == 0x4e43a2 and fs3 == 0 and fe3 == 0xcd and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b1edd3c; op2val:0x43ce43a2;
op3val:0x66801fff; valaddr_reg:x3; val_offset:597*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 597*0 + 3*1*FLEN/8, x4, x1, x2)

inst_200:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x1edd3c and fs2 == 0 and fe2 == 0x87 and fm2 == 0x4e43a2 and fs3 == 0 and fe3 == 0xcd and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b1edd3c; op2val:0x43ce43a2;
op3val:0x66803fff; valaddr_reg:x3; val_offset:600*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 600*0 + 3*1*FLEN/8, x4, x1, x2)

inst_201:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x1edd3c and fs2 == 0 and fe2 == 0x87 and fm2 == 0x4e43a2 and fs3 == 0 and fe3 == 0xcd and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b1edd3c; op2val:0x43ce43a2;
op3val:0x66807fff; valaddr_reg:x3; val_offset:603*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 603*0 + 3*1*FLEN/8, x4, x1, x2)

inst_202:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x1edd3c and fs2 == 0 and fe2 == 0x87 and fm2 == 0x4e43a2 and fs3 == 0 and fe3 == 0xcd and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b1edd3c; op2val:0x43ce43a2;
op3val:0x6680ffff; valaddr_reg:x3; val_offset:606*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 606*0 + 3*1*FLEN/8, x4, x1, x2)

inst_203:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x1edd3c and fs2 == 0 and fe2 == 0x87 and fm2 == 0x4e43a2 and fs3 == 0 and fe3 == 0xcd and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b1edd3c; op2val:0x43ce43a2;
op3val:0x6681ffff; valaddr_reg:x3; val_offset:609*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 609*0 + 3*1*FLEN/8, x4, x1, x2)

inst_204:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x1edd3c and fs2 == 0 and fe2 == 0x87 and fm2 == 0x4e43a2 and fs3 == 0 and fe3 == 0xcd and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b1edd3c; op2val:0x43ce43a2;
op3val:0x6683ffff; valaddr_reg:x3; val_offset:612*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 612*0 + 3*1*FLEN/8, x4, x1, x2)

inst_205:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x1edd3c and fs2 == 0 and fe2 == 0x87 and fm2 == 0x4e43a2 and fs3 == 0 and fe3 == 0xcd and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b1edd3c; op2val:0x43ce43a2;
op3val:0x6687ffff; valaddr_reg:x3; val_offset:615*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 615*0 + 3*1*FLEN/8, x4, x1, x2)

inst_206:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x1edd3c and fs2 == 0 and fe2 == 0x87 and fm2 == 0x4e43a2 and fs3 == 0 and fe3 == 0xcd and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b1edd3c; op2val:0x43ce43a2;
op3val:0x668fffff; valaddr_reg:x3; val_offset:618*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 618*0 + 3*1*FLEN/8, x4, x1, x2)

inst_207:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x1edd3c and fs2 == 0 and fe2 == 0x87 and fm2 == 0x4e43a2 and fs3 == 0 and fe3 == 0xcd and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b1edd3c; op2val:0x43ce43a2;
op3val:0x669fffff; valaddr_reg:x3; val_offset:621*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 621*0 + 3*1*FLEN/8, x4, x1, x2)

inst_208:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x1edd3c and fs2 == 0 and fe2 == 0x87 and fm2 == 0x4e43a2 and fs3 == 0 and fe3 == 0xcd and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b1edd3c; op2val:0x43ce43a2;
op3val:0x66bfffff; valaddr_reg:x3; val_offset:624*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 624*0 + 3*1*FLEN/8, x4, x1, x2)

inst_209:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x1edd3c and fs2 == 0 and fe2 == 0x87 and fm2 == 0x4e43a2 and fs3 == 0 and fe3 == 0xcd and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b1edd3c; op2val:0x43ce43a2;
op3val:0x66c00000; valaddr_reg:x3; val_offset:627*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 627*0 + 3*1*FLEN/8, x4, x1, x2)

inst_210:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x1edd3c and fs2 == 0 and fe2 == 0x87 and fm2 == 0x4e43a2 and fs3 == 0 and fe3 == 0xcd and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b1edd3c; op2val:0x43ce43a2;
op3val:0x66e00000; valaddr_reg:x3; val_offset:630*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 630*0 + 3*1*FLEN/8, x4, x1, x2)

inst_211:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x1edd3c and fs2 == 0 and fe2 == 0x87 and fm2 == 0x4e43a2 and fs3 == 0 and fe3 == 0xcd and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b1edd3c; op2val:0x43ce43a2;
op3val:0x66f00000; valaddr_reg:x3; val_offset:633*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 633*0 + 3*1*FLEN/8, x4, x1, x2)

inst_212:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x1edd3c and fs2 == 0 and fe2 == 0x87 and fm2 == 0x4e43a2 and fs3 == 0 and fe3 == 0xcd and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b1edd3c; op2val:0x43ce43a2;
op3val:0x66f80000; valaddr_reg:x3; val_offset:636*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 636*0 + 3*1*FLEN/8, x4, x1, x2)

inst_213:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x1edd3c and fs2 == 0 and fe2 == 0x87 and fm2 == 0x4e43a2 and fs3 == 0 and fe3 == 0xcd and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b1edd3c; op2val:0x43ce43a2;
op3val:0x66fc0000; valaddr_reg:x3; val_offset:639*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 639*0 + 3*1*FLEN/8, x4, x1, x2)

inst_214:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x1edd3c and fs2 == 0 and fe2 == 0x87 and fm2 == 0x4e43a2 and fs3 == 0 and fe3 == 0xcd and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b1edd3c; op2val:0x43ce43a2;
op3val:0x66fe0000; valaddr_reg:x3; val_offset:642*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 642*0 + 3*1*FLEN/8, x4, x1, x2)

inst_215:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x1edd3c and fs2 == 0 and fe2 == 0x87 and fm2 == 0x4e43a2 and fs3 == 0 and fe3 == 0xcd and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b1edd3c; op2val:0x43ce43a2;
op3val:0x66ff0000; valaddr_reg:x3; val_offset:645*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 645*0 + 3*1*FLEN/8, x4, x1, x2)

inst_216:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x1edd3c and fs2 == 0 and fe2 == 0x87 and fm2 == 0x4e43a2 and fs3 == 0 and fe3 == 0xcd and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b1edd3c; op2val:0x43ce43a2;
op3val:0x66ff8000; valaddr_reg:x3; val_offset:648*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 648*0 + 3*1*FLEN/8, x4, x1, x2)

inst_217:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x1edd3c and fs2 == 0 and fe2 == 0x87 and fm2 == 0x4e43a2 and fs3 == 0 and fe3 == 0xcd and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b1edd3c; op2val:0x43ce43a2;
op3val:0x66ffc000; valaddr_reg:x3; val_offset:651*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 651*0 + 3*1*FLEN/8, x4, x1, x2)

inst_218:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x1edd3c and fs2 == 0 and fe2 == 0x87 and fm2 == 0x4e43a2 and fs3 == 0 and fe3 == 0xcd and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b1edd3c; op2val:0x43ce43a2;
op3val:0x66ffe000; valaddr_reg:x3; val_offset:654*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 654*0 + 3*1*FLEN/8, x4, x1, x2)

inst_219:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x1edd3c and fs2 == 0 and fe2 == 0x87 and fm2 == 0x4e43a2 and fs3 == 0 and fe3 == 0xcd and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b1edd3c; op2val:0x43ce43a2;
op3val:0x66fff000; valaddr_reg:x3; val_offset:657*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 657*0 + 3*1*FLEN/8, x4, x1, x2)

inst_220:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x1edd3c and fs2 == 0 and fe2 == 0x87 and fm2 == 0x4e43a2 and fs3 == 0 and fe3 == 0xcd and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b1edd3c; op2val:0x43ce43a2;
op3val:0x66fff800; valaddr_reg:x3; val_offset:660*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 660*0 + 3*1*FLEN/8, x4, x1, x2)

inst_221:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x1edd3c and fs2 == 0 and fe2 == 0x87 and fm2 == 0x4e43a2 and fs3 == 0 and fe3 == 0xcd and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b1edd3c; op2val:0x43ce43a2;
op3val:0x66fffc00; valaddr_reg:x3; val_offset:663*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 663*0 + 3*1*FLEN/8, x4, x1, x2)

inst_222:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x1edd3c and fs2 == 0 and fe2 == 0x87 and fm2 == 0x4e43a2 and fs3 == 0 and fe3 == 0xcd and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b1edd3c; op2val:0x43ce43a2;
op3val:0x66fffe00; valaddr_reg:x3; val_offset:666*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 666*0 + 3*1*FLEN/8, x4, x1, x2)

inst_223:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x1edd3c and fs2 == 0 and fe2 == 0x87 and fm2 == 0x4e43a2 and fs3 == 0 and fe3 == 0xcd and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b1edd3c; op2val:0x43ce43a2;
op3val:0x66ffff00; valaddr_reg:x3; val_offset:669*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 669*0 + 3*1*FLEN/8, x4, x1, x2)

inst_224:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x1edd3c and fs2 == 0 and fe2 == 0x87 and fm2 == 0x4e43a2 and fs3 == 0 and fe3 == 0xcd and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b1edd3c; op2val:0x43ce43a2;
op3val:0x66ffff80; valaddr_reg:x3; val_offset:672*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 672*0 + 3*1*FLEN/8, x4, x1, x2)

inst_225:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x1edd3c and fs2 == 0 and fe2 == 0x87 and fm2 == 0x4e43a2 and fs3 == 0 and fe3 == 0xcd and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b1edd3c; op2val:0x43ce43a2;
op3val:0x66ffffc0; valaddr_reg:x3; val_offset:675*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 675*0 + 3*1*FLEN/8, x4, x1, x2)

inst_226:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x1edd3c and fs2 == 0 and fe2 == 0x87 and fm2 == 0x4e43a2 and fs3 == 0 and fe3 == 0xcd and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b1edd3c; op2val:0x43ce43a2;
op3val:0x66ffffe0; valaddr_reg:x3; val_offset:678*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 678*0 + 3*1*FLEN/8, x4, x1, x2)

inst_227:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x1edd3c and fs2 == 0 and fe2 == 0x87 and fm2 == 0x4e43a2 and fs3 == 0 and fe3 == 0xcd and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b1edd3c; op2val:0x43ce43a2;
op3val:0x66fffff0; valaddr_reg:x3; val_offset:681*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 681*0 + 3*1*FLEN/8, x4, x1, x2)

inst_228:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x1edd3c and fs2 == 0 and fe2 == 0x87 and fm2 == 0x4e43a2 and fs3 == 0 and fe3 == 0xcd and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b1edd3c; op2val:0x43ce43a2;
op3val:0x66fffff8; valaddr_reg:x3; val_offset:684*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 684*0 + 3*1*FLEN/8, x4, x1, x2)

inst_229:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x1edd3c and fs2 == 0 and fe2 == 0x87 and fm2 == 0x4e43a2 and fs3 == 0 and fe3 == 0xcd and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b1edd3c; op2val:0x43ce43a2;
op3val:0x66fffffc; valaddr_reg:x3; val_offset:687*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 687*0 + 3*1*FLEN/8, x4, x1, x2)

inst_230:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x1edd3c and fs2 == 0 and fe2 == 0x87 and fm2 == 0x4e43a2 and fs3 == 0 and fe3 == 0xcd and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b1edd3c; op2val:0x43ce43a2;
op3val:0x66fffffe; valaddr_reg:x3; val_offset:690*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 690*0 + 3*1*FLEN/8, x4, x1, x2)

inst_231:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x1edd3c and fs2 == 0 and fe2 == 0x87 and fm2 == 0x4e43a2 and fs3 == 0 and fe3 == 0xcd and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b1edd3c; op2val:0x43ce43a2;
op3val:0x66ffffff; valaddr_reg:x3; val_offset:693*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 693*0 + 3*1*FLEN/8, x4, x1, x2)

inst_232:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x1edd3c and fs2 == 0 and fe2 == 0x87 and fm2 == 0x4e43a2 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b1edd3c; op2val:0x43ce43a2;
op3val:0x7f000001; valaddr_reg:x3; val_offset:696*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 696*0 + 3*1*FLEN/8, x4, x1, x2)

inst_233:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x1edd3c and fs2 == 0 and fe2 == 0x87 and fm2 == 0x4e43a2 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b1edd3c; op2val:0x43ce43a2;
op3val:0x7f000003; valaddr_reg:x3; val_offset:699*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 699*0 + 3*1*FLEN/8, x4, x1, x2)

inst_234:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x1edd3c and fs2 == 0 and fe2 == 0x87 and fm2 == 0x4e43a2 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b1edd3c; op2val:0x43ce43a2;
op3val:0x7f000007; valaddr_reg:x3; val_offset:702*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 702*0 + 3*1*FLEN/8, x4, x1, x2)

inst_235:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x1edd3c and fs2 == 0 and fe2 == 0x87 and fm2 == 0x4e43a2 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b1edd3c; op2val:0x43ce43a2;
op3val:0x7f199999; valaddr_reg:x3; val_offset:705*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 705*0 + 3*1*FLEN/8, x4, x1, x2)

inst_236:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x1edd3c and fs2 == 0 and fe2 == 0x87 and fm2 == 0x4e43a2 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b1edd3c; op2val:0x43ce43a2;
op3val:0x7f249249; valaddr_reg:x3; val_offset:708*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 708*0 + 3*1*FLEN/8, x4, x1, x2)

inst_237:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x1edd3c and fs2 == 0 and fe2 == 0x87 and fm2 == 0x4e43a2 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b1edd3c; op2val:0x43ce43a2;
op3val:0x7f333333; valaddr_reg:x3; val_offset:711*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 711*0 + 3*1*FLEN/8, x4, x1, x2)

inst_238:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x1edd3c and fs2 == 0 and fe2 == 0x87 and fm2 == 0x4e43a2 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b1edd3c; op2val:0x43ce43a2;
op3val:0x7f36db6d; valaddr_reg:x3; val_offset:714*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 714*0 + 3*1*FLEN/8, x4, x1, x2)

inst_239:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x1edd3c and fs2 == 0 and fe2 == 0x87 and fm2 == 0x4e43a2 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b1edd3c; op2val:0x43ce43a2;
op3val:0x7f3bbbbb; valaddr_reg:x3; val_offset:717*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 717*0 + 3*1*FLEN/8, x4, x1, x2)

inst_240:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x1edd3c and fs2 == 0 and fe2 == 0x87 and fm2 == 0x4e43a2 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b1edd3c; op2val:0x43ce43a2;
op3val:0x7f444444; valaddr_reg:x3; val_offset:720*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 720*0 + 3*1*FLEN/8, x4, x1, x2)

inst_241:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x1edd3c and fs2 == 0 and fe2 == 0x87 and fm2 == 0x4e43a2 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b1edd3c; op2val:0x43ce43a2;
op3val:0x7f4ccccc; valaddr_reg:x3; val_offset:723*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 723*0 + 3*1*FLEN/8, x4, x1, x2)

inst_242:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x1edd3c and fs2 == 0 and fe2 == 0x87 and fm2 == 0x4e43a2 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b1edd3c; op2val:0x43ce43a2;
op3val:0x7f5b6db6; valaddr_reg:x3; val_offset:726*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 726*0 + 3*1*FLEN/8, x4, x1, x2)

inst_243:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x1edd3c and fs2 == 0 and fe2 == 0x87 and fm2 == 0x4e43a2 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b1edd3c; op2val:0x43ce43a2;
op3val:0x7f666666; valaddr_reg:x3; val_offset:729*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 729*0 + 3*1*FLEN/8, x4, x1, x2)

inst_244:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x1edd3c and fs2 == 0 and fe2 == 0x87 and fm2 == 0x4e43a2 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b1edd3c; op2val:0x43ce43a2;
op3val:0x7f6db6db; valaddr_reg:x3; val_offset:732*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 732*0 + 3*1*FLEN/8, x4, x1, x2)

inst_245:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x1edd3c and fs2 == 0 and fe2 == 0x87 and fm2 == 0x4e43a2 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b1edd3c; op2val:0x43ce43a2;
op3val:0x7f7ffff8; valaddr_reg:x3; val_offset:735*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 735*0 + 3*1*FLEN/8, x4, x1, x2)

inst_246:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x1edd3c and fs2 == 0 and fe2 == 0x87 and fm2 == 0x4e43a2 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b1edd3c; op2val:0x43ce43a2;
op3val:0x7f7ffffc; valaddr_reg:x3; val_offset:738*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 738*0 + 3*1*FLEN/8, x4, x1, x2)

inst_247:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x1edd3c and fs2 == 0 and fe2 == 0x87 and fm2 == 0x4e43a2 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b1edd3c; op2val:0x43ce43a2;
op3val:0x7f7ffffe; valaddr_reg:x3; val_offset:741*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 741*0 + 3*1*FLEN/8, x4, x1, x2)

inst_248:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x26c36c and fs2 == 1 and fe2 == 0x07 and fm2 == 0x447e75 and fs3 == 1 and fe3 == 0x6d and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b26c36c; op2val:0x83c47e75;
op3val:0xb6800000; valaddr_reg:x3; val_offset:744*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 744*0 + 3*1*FLEN/8, x4, x1, x2)

inst_249:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x26c36c and fs2 == 1 and fe2 == 0x07 and fm2 == 0x447e75 and fs3 == 1 and fe3 == 0x6d and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b26c36c; op2val:0x83c47e75;
op3val:0xb6800001; valaddr_reg:x3; val_offset:747*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 747*0 + 3*1*FLEN/8, x4, x1, x2)

inst_250:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x26c36c and fs2 == 1 and fe2 == 0x07 and fm2 == 0x447e75 and fs3 == 1 and fe3 == 0x6d and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b26c36c; op2val:0x83c47e75;
op3val:0xb6800003; valaddr_reg:x3; val_offset:750*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 750*0 + 3*1*FLEN/8, x4, x1, x2)

inst_251:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x26c36c and fs2 == 1 and fe2 == 0x07 and fm2 == 0x447e75 and fs3 == 1 and fe3 == 0x6d and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b26c36c; op2val:0x83c47e75;
op3val:0xb6800007; valaddr_reg:x3; val_offset:753*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 753*0 + 3*1*FLEN/8, x4, x1, x2)

inst_252:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x26c36c and fs2 == 1 and fe2 == 0x07 and fm2 == 0x447e75 and fs3 == 1 and fe3 == 0x6d and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b26c36c; op2val:0x83c47e75;
op3val:0xb680000f; valaddr_reg:x3; val_offset:756*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 756*0 + 3*1*FLEN/8, x4, x1, x2)

inst_253:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x26c36c and fs2 == 1 and fe2 == 0x07 and fm2 == 0x447e75 and fs3 == 1 and fe3 == 0x6d and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b26c36c; op2val:0x83c47e75;
op3val:0xb680001f; valaddr_reg:x3; val_offset:759*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 759*0 + 3*1*FLEN/8, x4, x1, x2)

inst_254:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x26c36c and fs2 == 1 and fe2 == 0x07 and fm2 == 0x447e75 and fs3 == 1 and fe3 == 0x6d and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b26c36c; op2val:0x83c47e75;
op3val:0xb680003f; valaddr_reg:x3; val_offset:762*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 762*0 + 3*1*FLEN/8, x4, x1, x2)

inst_255:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x26c36c and fs2 == 1 and fe2 == 0x07 and fm2 == 0x447e75 and fs3 == 1 and fe3 == 0x6d and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b26c36c; op2val:0x83c47e75;
op3val:0xb680007f; valaddr_reg:x3; val_offset:765*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 765*0 + 3*1*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2058694823,32,FLEN)
NAN_BOXED(3291797832,32,FLEN)
NAN_BOXED(3925868559,32,FLEN)
NAN_BOXED(2058694823,32,FLEN)
NAN_BOXED(3291797832,32,FLEN)
NAN_BOXED(3925868575,32,FLEN)
NAN_BOXED(2058694823,32,FLEN)
NAN_BOXED(3291797832,32,FLEN)
NAN_BOXED(3925868607,32,FLEN)
NAN_BOXED(2058694823,32,FLEN)
NAN_BOXED(3291797832,32,FLEN)
NAN_BOXED(3925868671,32,FLEN)
NAN_BOXED(2058694823,32,FLEN)
NAN_BOXED(3291797832,32,FLEN)
NAN_BOXED(3925868799,32,FLEN)
NAN_BOXED(2058694823,32,FLEN)
NAN_BOXED(3291797832,32,FLEN)
NAN_BOXED(3925869055,32,FLEN)
NAN_BOXED(2058694823,32,FLEN)
NAN_BOXED(3291797832,32,FLEN)
NAN_BOXED(3925869567,32,FLEN)
NAN_BOXED(2058694823,32,FLEN)
NAN_BOXED(3291797832,32,FLEN)
NAN_BOXED(3925870591,32,FLEN)
NAN_BOXED(2058694823,32,FLEN)
NAN_BOXED(3291797832,32,FLEN)
NAN_BOXED(3925872639,32,FLEN)
NAN_BOXED(2058694823,32,FLEN)
NAN_BOXED(3291797832,32,FLEN)
NAN_BOXED(3925876735,32,FLEN)
NAN_BOXED(2058694823,32,FLEN)
NAN_BOXED(3291797832,32,FLEN)
NAN_BOXED(3925884927,32,FLEN)
NAN_BOXED(2058694823,32,FLEN)
NAN_BOXED(3291797832,32,FLEN)
NAN_BOXED(3925901311,32,FLEN)
NAN_BOXED(2058694823,32,FLEN)
NAN_BOXED(3291797832,32,FLEN)
NAN_BOXED(3925934079,32,FLEN)
NAN_BOXED(2058694823,32,FLEN)
NAN_BOXED(3291797832,32,FLEN)
NAN_BOXED(3925999615,32,FLEN)
NAN_BOXED(2058694823,32,FLEN)
NAN_BOXED(3291797832,32,FLEN)
NAN_BOXED(3926130687,32,FLEN)
NAN_BOXED(2058694823,32,FLEN)
NAN_BOXED(3291797832,32,FLEN)
NAN_BOXED(3926392831,32,FLEN)
NAN_BOXED(2058694823,32,FLEN)
NAN_BOXED(3291797832,32,FLEN)
NAN_BOXED(3926917119,32,FLEN)
NAN_BOXED(2058694823,32,FLEN)
NAN_BOXED(3291797832,32,FLEN)
NAN_BOXED(3927965695,32,FLEN)
NAN_BOXED(2058694823,32,FLEN)
NAN_BOXED(3291797832,32,FLEN)
NAN_BOXED(3930062847,32,FLEN)
NAN_BOXED(2058694823,32,FLEN)
NAN_BOXED(3291797832,32,FLEN)
NAN_BOXED(3930062848,32,FLEN)
NAN_BOXED(2058694823,32,FLEN)
NAN_BOXED(3291797832,32,FLEN)
NAN_BOXED(3932160000,32,FLEN)
NAN_BOXED(2058694823,32,FLEN)
NAN_BOXED(3291797832,32,FLEN)
NAN_BOXED(3933208576,32,FLEN)
NAN_BOXED(2058694823,32,FLEN)
NAN_BOXED(3291797832,32,FLEN)
NAN_BOXED(3933732864,32,FLEN)
NAN_BOXED(2058694823,32,FLEN)
NAN_BOXED(3291797832,32,FLEN)
NAN_BOXED(3933995008,32,FLEN)
NAN_BOXED(2058694823,32,FLEN)
NAN_BOXED(3291797832,32,FLEN)
NAN_BOXED(3934126080,32,FLEN)
NAN_BOXED(2058694823,32,FLEN)
NAN_BOXED(3291797832,32,FLEN)
NAN_BOXED(3934191616,32,FLEN)
NAN_BOXED(2058694823,32,FLEN)
NAN_BOXED(3291797832,32,FLEN)
NAN_BOXED(3934224384,32,FLEN)
NAN_BOXED(2058694823,32,FLEN)
NAN_BOXED(3291797832,32,FLEN)
NAN_BOXED(3934240768,32,FLEN)
NAN_BOXED(2058694823,32,FLEN)
NAN_BOXED(3291797832,32,FLEN)
NAN_BOXED(3934248960,32,FLEN)
NAN_BOXED(2058694823,32,FLEN)
NAN_BOXED(3291797832,32,FLEN)
NAN_BOXED(3934253056,32,FLEN)
NAN_BOXED(2058694823,32,FLEN)
NAN_BOXED(3291797832,32,FLEN)
NAN_BOXED(3934255104,32,FLEN)
NAN_BOXED(2058694823,32,FLEN)
NAN_BOXED(3291797832,32,FLEN)
NAN_BOXED(3934256128,32,FLEN)
NAN_BOXED(2058694823,32,FLEN)
NAN_BOXED(3291797832,32,FLEN)
NAN_BOXED(3934256640,32,FLEN)
NAN_BOXED(2058694823,32,FLEN)
NAN_BOXED(3291797832,32,FLEN)
NAN_BOXED(3934256896,32,FLEN)
NAN_BOXED(2058694823,32,FLEN)
NAN_BOXED(3291797832,32,FLEN)
NAN_BOXED(3934257024,32,FLEN)
NAN_BOXED(2058694823,32,FLEN)
NAN_BOXED(3291797832,32,FLEN)
NAN_BOXED(3934257088,32,FLEN)
NAN_BOXED(2058694823,32,FLEN)
NAN_BOXED(3291797832,32,FLEN)
NAN_BOXED(3934257120,32,FLEN)
NAN_BOXED(2058694823,32,FLEN)
NAN_BOXED(3291797832,32,FLEN)
NAN_BOXED(3934257136,32,FLEN)
NAN_BOXED(2058694823,32,FLEN)
NAN_BOXED(3291797832,32,FLEN)
NAN_BOXED(3934257144,32,FLEN)
NAN_BOXED(2058694823,32,FLEN)
NAN_BOXED(3291797832,32,FLEN)
NAN_BOXED(3934257148,32,FLEN)
NAN_BOXED(2058694823,32,FLEN)
NAN_BOXED(3291797832,32,FLEN)
NAN_BOXED(3934257150,32,FLEN)
NAN_BOXED(2058694823,32,FLEN)
NAN_BOXED(3291797832,32,FLEN)
NAN_BOXED(3934257151,32,FLEN)
NAN_BOXED(2058694823,32,FLEN)
NAN_BOXED(3291797832,32,FLEN)
NAN_BOXED(4278190081,32,FLEN)
NAN_BOXED(2058694823,32,FLEN)
NAN_BOXED(3291797832,32,FLEN)
NAN_BOXED(4278190083,32,FLEN)
NAN_BOXED(2058694823,32,FLEN)
NAN_BOXED(3291797832,32,FLEN)
NAN_BOXED(4278190087,32,FLEN)
NAN_BOXED(2058694823,32,FLEN)
NAN_BOXED(3291797832,32,FLEN)
NAN_BOXED(4279867801,32,FLEN)
NAN_BOXED(2058694823,32,FLEN)
NAN_BOXED(3291797832,32,FLEN)
NAN_BOXED(4280586825,32,FLEN)
NAN_BOXED(2058694823,32,FLEN)
NAN_BOXED(3291797832,32,FLEN)
NAN_BOXED(4281545523,32,FLEN)
NAN_BOXED(2058694823,32,FLEN)
NAN_BOXED(3291797832,32,FLEN)
NAN_BOXED(4281785197,32,FLEN)
NAN_BOXED(2058694823,32,FLEN)
NAN_BOXED(3291797832,32,FLEN)
NAN_BOXED(4282104763,32,FLEN)
NAN_BOXED(2058694823,32,FLEN)
NAN_BOXED(3291797832,32,FLEN)
NAN_BOXED(4282664004,32,FLEN)
NAN_BOXED(2058694823,32,FLEN)
NAN_BOXED(3291797832,32,FLEN)
NAN_BOXED(4283223244,32,FLEN)
NAN_BOXED(2058694823,32,FLEN)
NAN_BOXED(3291797832,32,FLEN)
NAN_BOXED(4284181942,32,FLEN)
NAN_BOXED(2058694823,32,FLEN)
NAN_BOXED(3291797832,32,FLEN)
NAN_BOXED(4284900966,32,FLEN)
NAN_BOXED(2058694823,32,FLEN)
NAN_BOXED(3291797832,32,FLEN)
NAN_BOXED(4285380315,32,FLEN)
NAN_BOXED(2058694823,32,FLEN)
NAN_BOXED(3291797832,32,FLEN)
NAN_BOXED(4286578680,32,FLEN)
NAN_BOXED(2058694823,32,FLEN)
NAN_BOXED(3291797832,32,FLEN)
NAN_BOXED(4286578684,32,FLEN)
NAN_BOXED(2058694823,32,FLEN)
NAN_BOXED(3291797832,32,FLEN)
NAN_BOXED(4286578686,32,FLEN)
NAN_BOXED(2065620284,32,FLEN)
NAN_BOXED(1137591202,32,FLEN)
NAN_BOXED(1719664640,32,FLEN)
NAN_BOXED(2065620284,32,FLEN)
NAN_BOXED(1137591202,32,FLEN)
NAN_BOXED(1719664641,32,FLEN)
NAN_BOXED(2065620284,32,FLEN)
NAN_BOXED(1137591202,32,FLEN)
NAN_BOXED(1719664643,32,FLEN)
NAN_BOXED(2065620284,32,FLEN)
NAN_BOXED(1137591202,32,FLEN)
NAN_BOXED(1719664647,32,FLEN)
NAN_BOXED(2065620284,32,FLEN)
NAN_BOXED(1137591202,32,FLEN)
NAN_BOXED(1719664655,32,FLEN)
NAN_BOXED(2065620284,32,FLEN)
NAN_BOXED(1137591202,32,FLEN)
NAN_BOXED(1719664671,32,FLEN)
NAN_BOXED(2065620284,32,FLEN)
NAN_BOXED(1137591202,32,FLEN)
NAN_BOXED(1719664703,32,FLEN)
NAN_BOXED(2065620284,32,FLEN)
NAN_BOXED(1137591202,32,FLEN)
NAN_BOXED(1719664767,32,FLEN)
NAN_BOXED(2065620284,32,FLEN)
NAN_BOXED(1137591202,32,FLEN)
NAN_BOXED(1719664895,32,FLEN)
NAN_BOXED(2065620284,32,FLEN)
NAN_BOXED(1137591202,32,FLEN)
NAN_BOXED(1719665151,32,FLEN)
NAN_BOXED(2065620284,32,FLEN)
NAN_BOXED(1137591202,32,FLEN)
NAN_BOXED(1719665663,32,FLEN)
NAN_BOXED(2065620284,32,FLEN)
NAN_BOXED(1137591202,32,FLEN)
NAN_BOXED(1719666687,32,FLEN)
NAN_BOXED(2065620284,32,FLEN)
NAN_BOXED(1137591202,32,FLEN)
NAN_BOXED(1719668735,32,FLEN)
NAN_BOXED(2065620284,32,FLEN)
NAN_BOXED(1137591202,32,FLEN)
NAN_BOXED(1719672831,32,FLEN)
NAN_BOXED(2065620284,32,FLEN)
NAN_BOXED(1137591202,32,FLEN)
NAN_BOXED(1719681023,32,FLEN)
NAN_BOXED(2065620284,32,FLEN)
NAN_BOXED(1137591202,32,FLEN)
NAN_BOXED(1719697407,32,FLEN)
NAN_BOXED(2065620284,32,FLEN)
NAN_BOXED(1137591202,32,FLEN)
NAN_BOXED(1719730175,32,FLEN)
NAN_BOXED(2065620284,32,FLEN)
NAN_BOXED(1137591202,32,FLEN)
NAN_BOXED(1719795711,32,FLEN)
NAN_BOXED(2065620284,32,FLEN)
NAN_BOXED(1137591202,32,FLEN)
NAN_BOXED(1719926783,32,FLEN)
NAN_BOXED(2065620284,32,FLEN)
NAN_BOXED(1137591202,32,FLEN)
NAN_BOXED(1720188927,32,FLEN)
NAN_BOXED(2065620284,32,FLEN)
NAN_BOXED(1137591202,32,FLEN)
NAN_BOXED(1720713215,32,FLEN)
NAN_BOXED(2065620284,32,FLEN)
NAN_BOXED(1137591202,32,FLEN)
NAN_BOXED(1721761791,32,FLEN)
NAN_BOXED(2065620284,32,FLEN)
NAN_BOXED(1137591202,32,FLEN)
NAN_BOXED(1723858943,32,FLEN)
NAN_BOXED(2065620284,32,FLEN)
NAN_BOXED(1137591202,32,FLEN)
NAN_BOXED(1723858944,32,FLEN)
NAN_BOXED(2065620284,32,FLEN)
NAN_BOXED(1137591202,32,FLEN)
NAN_BOXED(1725956096,32,FLEN)
NAN_BOXED(2065620284,32,FLEN)
NAN_BOXED(1137591202,32,FLEN)
NAN_BOXED(1727004672,32,FLEN)
NAN_BOXED(2065620284,32,FLEN)
NAN_BOXED(1137591202,32,FLEN)
NAN_BOXED(1727528960,32,FLEN)
NAN_BOXED(2065620284,32,FLEN)
NAN_BOXED(1137591202,32,FLEN)
NAN_BOXED(1727791104,32,FLEN)
NAN_BOXED(2065620284,32,FLEN)
NAN_BOXED(1137591202,32,FLEN)
NAN_BOXED(1727922176,32,FLEN)
NAN_BOXED(2065620284,32,FLEN)
NAN_BOXED(1137591202,32,FLEN)
NAN_BOXED(1727987712,32,FLEN)
NAN_BOXED(2065620284,32,FLEN)
NAN_BOXED(1137591202,32,FLEN)
NAN_BOXED(1728020480,32,FLEN)
NAN_BOXED(2065620284,32,FLEN)
NAN_BOXED(1137591202,32,FLEN)
NAN_BOXED(1728036864,32,FLEN)
NAN_BOXED(2065620284,32,FLEN)
NAN_BOXED(1137591202,32,FLEN)
NAN_BOXED(1728045056,32,FLEN)
NAN_BOXED(2065620284,32,FLEN)
NAN_BOXED(1137591202,32,FLEN)
NAN_BOXED(1728049152,32,FLEN)
NAN_BOXED(2065620284,32,FLEN)
NAN_BOXED(1137591202,32,FLEN)
NAN_BOXED(1728051200,32,FLEN)
NAN_BOXED(2065620284,32,FLEN)
NAN_BOXED(1137591202,32,FLEN)
NAN_BOXED(1728052224,32,FLEN)
NAN_BOXED(2065620284,32,FLEN)
NAN_BOXED(1137591202,32,FLEN)
NAN_BOXED(1728052736,32,FLEN)
NAN_BOXED(2065620284,32,FLEN)
NAN_BOXED(1137591202,32,FLEN)
NAN_BOXED(1728052992,32,FLEN)
NAN_BOXED(2065620284,32,FLEN)
NAN_BOXED(1137591202,32,FLEN)
NAN_BOXED(1728053120,32,FLEN)
NAN_BOXED(2065620284,32,FLEN)
NAN_BOXED(1137591202,32,FLEN)
NAN_BOXED(1728053184,32,FLEN)
NAN_BOXED(2065620284,32,FLEN)
NAN_BOXED(1137591202,32,FLEN)
NAN_BOXED(1728053216,32,FLEN)
NAN_BOXED(2065620284,32,FLEN)
NAN_BOXED(1137591202,32,FLEN)
NAN_BOXED(1728053232,32,FLEN)
NAN_BOXED(2065620284,32,FLEN)
NAN_BOXED(1137591202,32,FLEN)
NAN_BOXED(1728053240,32,FLEN)
NAN_BOXED(2065620284,32,FLEN)
NAN_BOXED(1137591202,32,FLEN)
NAN_BOXED(1728053244,32,FLEN)
NAN_BOXED(2065620284,32,FLEN)
NAN_BOXED(1137591202,32,FLEN)
NAN_BOXED(1728053246,32,FLEN)
NAN_BOXED(2065620284,32,FLEN)
NAN_BOXED(1137591202,32,FLEN)
NAN_BOXED(1728053247,32,FLEN)
NAN_BOXED(2065620284,32,FLEN)
NAN_BOXED(1137591202,32,FLEN)
NAN_BOXED(2130706433,32,FLEN)
NAN_BOXED(2065620284,32,FLEN)
NAN_BOXED(1137591202,32,FLEN)
NAN_BOXED(2130706435,32,FLEN)
NAN_BOXED(2065620284,32,FLEN)
NAN_BOXED(1137591202,32,FLEN)
NAN_BOXED(2130706439,32,FLEN)
NAN_BOXED(2065620284,32,FLEN)
NAN_BOXED(1137591202,32,FLEN)
NAN_BOXED(2132384153,32,FLEN)
NAN_BOXED(2065620284,32,FLEN)
NAN_BOXED(1137591202,32,FLEN)
NAN_BOXED(2133103177,32,FLEN)
NAN_BOXED(2065620284,32,FLEN)
NAN_BOXED(1137591202,32,FLEN)
NAN_BOXED(2134061875,32,FLEN)
NAN_BOXED(2065620284,32,FLEN)
NAN_BOXED(1137591202,32,FLEN)
NAN_BOXED(2134301549,32,FLEN)
NAN_BOXED(2065620284,32,FLEN)
NAN_BOXED(1137591202,32,FLEN)
NAN_BOXED(2134621115,32,FLEN)
NAN_BOXED(2065620284,32,FLEN)
NAN_BOXED(1137591202,32,FLEN)
NAN_BOXED(2135180356,32,FLEN)
NAN_BOXED(2065620284,32,FLEN)
NAN_BOXED(1137591202,32,FLEN)
NAN_BOXED(2135739596,32,FLEN)
NAN_BOXED(2065620284,32,FLEN)
NAN_BOXED(1137591202,32,FLEN)
NAN_BOXED(2136698294,32,FLEN)
NAN_BOXED(2065620284,32,FLEN)
NAN_BOXED(1137591202,32,FLEN)
NAN_BOXED(2137417318,32,FLEN)
NAN_BOXED(2065620284,32,FLEN)
NAN_BOXED(1137591202,32,FLEN)
NAN_BOXED(2137896667,32,FLEN)
NAN_BOXED(2065620284,32,FLEN)
NAN_BOXED(1137591202,32,FLEN)
NAN_BOXED(2139095032,32,FLEN)
NAN_BOXED(2065620284,32,FLEN)
NAN_BOXED(1137591202,32,FLEN)
NAN_BOXED(2139095036,32,FLEN)
NAN_BOXED(2065620284,32,FLEN)
NAN_BOXED(1137591202,32,FLEN)
NAN_BOXED(2139095038,32,FLEN)
NAN_BOXED(2066137964,32,FLEN)
NAN_BOXED(2210692725,32,FLEN)
NAN_BOXED(3061841920,32,FLEN)
NAN_BOXED(2066137964,32,FLEN)
NAN_BOXED(2210692725,32,FLEN)
NAN_BOXED(3061841921,32,FLEN)
NAN_BOXED(2066137964,32,FLEN)
NAN_BOXED(2210692725,32,FLEN)
NAN_BOXED(3061841923,32,FLEN)
NAN_BOXED(2066137964,32,FLEN)
NAN_BOXED(2210692725,32,FLEN)
NAN_BOXED(3061841927,32,FLEN)
NAN_BOXED(2066137964,32,FLEN)
NAN_BOXED(2210692725,32,FLEN)
NAN_BOXED(3061841935,32,FLEN)
NAN_BOXED(2066137964,32,FLEN)
NAN_BOXED(2210692725,32,FLEN)
NAN_BOXED(3061841951,32,FLEN)
NAN_BOXED(2066137964,32,FLEN)
NAN_BOXED(2210692725,32,FLEN)
NAN_BOXED(3061841983,32,FLEN)
NAN_BOXED(2066137964,32,FLEN)
NAN_BOXED(2210692725,32,FLEN)
NAN_BOXED(3061842047,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
