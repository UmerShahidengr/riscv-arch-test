
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:17:59 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_512:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x34fe53 and fs2 == 1 and fe2 == 0x05 and fm2 == 0x350b92 and fs3 == 1 and fe3 == 0x6a and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c34fe53; op2val:0x82b50b92;
op3val:0xb500ffff; valaddr_reg:x3; val_offset:1536*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1536*0 + 3*4*FLEN/8, x4, x1, x2)

inst_513:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x34fe53 and fs2 == 1 and fe2 == 0x05 and fm2 == 0x350b92 and fs3 == 1 and fe3 == 0x6a and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c34fe53; op2val:0x82b50b92;
op3val:0xb501ffff; valaddr_reg:x3; val_offset:1539*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1539*0 + 3*4*FLEN/8, x4, x1, x2)

inst_514:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x34fe53 and fs2 == 1 and fe2 == 0x05 and fm2 == 0x350b92 and fs3 == 1 and fe3 == 0x6a and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c34fe53; op2val:0x82b50b92;
op3val:0xb503ffff; valaddr_reg:x3; val_offset:1542*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1542*0 + 3*4*FLEN/8, x4, x1, x2)

inst_515:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x34fe53 and fs2 == 1 and fe2 == 0x05 and fm2 == 0x350b92 and fs3 == 1 and fe3 == 0x6a and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c34fe53; op2val:0x82b50b92;
op3val:0xb507ffff; valaddr_reg:x3; val_offset:1545*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1545*0 + 3*4*FLEN/8, x4, x1, x2)

inst_516:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x34fe53 and fs2 == 1 and fe2 == 0x05 and fm2 == 0x350b92 and fs3 == 1 and fe3 == 0x6a and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c34fe53; op2val:0x82b50b92;
op3val:0xb50fffff; valaddr_reg:x3; val_offset:1548*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1548*0 + 3*4*FLEN/8, x4, x1, x2)

inst_517:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x34fe53 and fs2 == 1 and fe2 == 0x05 and fm2 == 0x350b92 and fs3 == 1 and fe3 == 0x6a and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c34fe53; op2val:0x82b50b92;
op3val:0xb51fffff; valaddr_reg:x3; val_offset:1551*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1551*0 + 3*4*FLEN/8, x4, x1, x2)

inst_518:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x34fe53 and fs2 == 1 and fe2 == 0x05 and fm2 == 0x350b92 and fs3 == 1 and fe3 == 0x6a and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c34fe53; op2val:0x82b50b92;
op3val:0xb53fffff; valaddr_reg:x3; val_offset:1554*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1554*0 + 3*4*FLEN/8, x4, x1, x2)

inst_519:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x34fe53 and fs2 == 1 and fe2 == 0x05 and fm2 == 0x350b92 and fs3 == 1 and fe3 == 0x6a and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c34fe53; op2val:0x82b50b92;
op3val:0xb5400000; valaddr_reg:x3; val_offset:1557*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1557*0 + 3*4*FLEN/8, x4, x1, x2)

inst_520:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x34fe53 and fs2 == 1 and fe2 == 0x05 and fm2 == 0x350b92 and fs3 == 1 and fe3 == 0x6a and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c34fe53; op2val:0x82b50b92;
op3val:0xb5600000; valaddr_reg:x3; val_offset:1560*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1560*0 + 3*4*FLEN/8, x4, x1, x2)

inst_521:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x34fe53 and fs2 == 1 and fe2 == 0x05 and fm2 == 0x350b92 and fs3 == 1 and fe3 == 0x6a and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c34fe53; op2val:0x82b50b92;
op3val:0xb5700000; valaddr_reg:x3; val_offset:1563*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1563*0 + 3*4*FLEN/8, x4, x1, x2)

inst_522:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x34fe53 and fs2 == 1 and fe2 == 0x05 and fm2 == 0x350b92 and fs3 == 1 and fe3 == 0x6a and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c34fe53; op2val:0x82b50b92;
op3val:0xb5780000; valaddr_reg:x3; val_offset:1566*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1566*0 + 3*4*FLEN/8, x4, x1, x2)

inst_523:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x34fe53 and fs2 == 1 and fe2 == 0x05 and fm2 == 0x350b92 and fs3 == 1 and fe3 == 0x6a and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c34fe53; op2val:0x82b50b92;
op3val:0xb57c0000; valaddr_reg:x3; val_offset:1569*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1569*0 + 3*4*FLEN/8, x4, x1, x2)

inst_524:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x34fe53 and fs2 == 1 and fe2 == 0x05 and fm2 == 0x350b92 and fs3 == 1 and fe3 == 0x6a and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c34fe53; op2val:0x82b50b92;
op3val:0xb57e0000; valaddr_reg:x3; val_offset:1572*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1572*0 + 3*4*FLEN/8, x4, x1, x2)

inst_525:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x34fe53 and fs2 == 1 and fe2 == 0x05 and fm2 == 0x350b92 and fs3 == 1 and fe3 == 0x6a and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c34fe53; op2val:0x82b50b92;
op3val:0xb57f0000; valaddr_reg:x3; val_offset:1575*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1575*0 + 3*4*FLEN/8, x4, x1, x2)

inst_526:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x34fe53 and fs2 == 1 and fe2 == 0x05 and fm2 == 0x350b92 and fs3 == 1 and fe3 == 0x6a and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c34fe53; op2val:0x82b50b92;
op3val:0xb57f8000; valaddr_reg:x3; val_offset:1578*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1578*0 + 3*4*FLEN/8, x4, x1, x2)

inst_527:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x34fe53 and fs2 == 1 and fe2 == 0x05 and fm2 == 0x350b92 and fs3 == 1 and fe3 == 0x6a and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c34fe53; op2val:0x82b50b92;
op3val:0xb57fc000; valaddr_reg:x3; val_offset:1581*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1581*0 + 3*4*FLEN/8, x4, x1, x2)

inst_528:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x34fe53 and fs2 == 1 and fe2 == 0x05 and fm2 == 0x350b92 and fs3 == 1 and fe3 == 0x6a and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c34fe53; op2val:0x82b50b92;
op3val:0xb57fe000; valaddr_reg:x3; val_offset:1584*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1584*0 + 3*4*FLEN/8, x4, x1, x2)

inst_529:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x34fe53 and fs2 == 1 and fe2 == 0x05 and fm2 == 0x350b92 and fs3 == 1 and fe3 == 0x6a and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c34fe53; op2val:0x82b50b92;
op3val:0xb57ff000; valaddr_reg:x3; val_offset:1587*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1587*0 + 3*4*FLEN/8, x4, x1, x2)

inst_530:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x34fe53 and fs2 == 1 and fe2 == 0x05 and fm2 == 0x350b92 and fs3 == 1 and fe3 == 0x6a and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c34fe53; op2val:0x82b50b92;
op3val:0xb57ff800; valaddr_reg:x3; val_offset:1590*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1590*0 + 3*4*FLEN/8, x4, x1, x2)

inst_531:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x34fe53 and fs2 == 1 and fe2 == 0x05 and fm2 == 0x350b92 and fs3 == 1 and fe3 == 0x6a and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c34fe53; op2val:0x82b50b92;
op3val:0xb57ffc00; valaddr_reg:x3; val_offset:1593*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1593*0 + 3*4*FLEN/8, x4, x1, x2)

inst_532:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x34fe53 and fs2 == 1 and fe2 == 0x05 and fm2 == 0x350b92 and fs3 == 1 and fe3 == 0x6a and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c34fe53; op2val:0x82b50b92;
op3val:0xb57ffe00; valaddr_reg:x3; val_offset:1596*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1596*0 + 3*4*FLEN/8, x4, x1, x2)

inst_533:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x34fe53 and fs2 == 1 and fe2 == 0x05 and fm2 == 0x350b92 and fs3 == 1 and fe3 == 0x6a and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c34fe53; op2val:0x82b50b92;
op3val:0xb57fff00; valaddr_reg:x3; val_offset:1599*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1599*0 + 3*4*FLEN/8, x4, x1, x2)

inst_534:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x34fe53 and fs2 == 1 and fe2 == 0x05 and fm2 == 0x350b92 and fs3 == 1 and fe3 == 0x6a and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c34fe53; op2val:0x82b50b92;
op3val:0xb57fff80; valaddr_reg:x3; val_offset:1602*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1602*0 + 3*4*FLEN/8, x4, x1, x2)

inst_535:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x34fe53 and fs2 == 1 and fe2 == 0x05 and fm2 == 0x350b92 and fs3 == 1 and fe3 == 0x6a and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c34fe53; op2val:0x82b50b92;
op3val:0xb57fffc0; valaddr_reg:x3; val_offset:1605*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1605*0 + 3*4*FLEN/8, x4, x1, x2)

inst_536:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x34fe53 and fs2 == 1 and fe2 == 0x05 and fm2 == 0x350b92 and fs3 == 1 and fe3 == 0x6a and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c34fe53; op2val:0x82b50b92;
op3val:0xb57fffe0; valaddr_reg:x3; val_offset:1608*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1608*0 + 3*4*FLEN/8, x4, x1, x2)

inst_537:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x34fe53 and fs2 == 1 and fe2 == 0x05 and fm2 == 0x350b92 and fs3 == 1 and fe3 == 0x6a and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c34fe53; op2val:0x82b50b92;
op3val:0xb57ffff0; valaddr_reg:x3; val_offset:1611*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1611*0 + 3*4*FLEN/8, x4, x1, x2)

inst_538:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x34fe53 and fs2 == 1 and fe2 == 0x05 and fm2 == 0x350b92 and fs3 == 1 and fe3 == 0x6a and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c34fe53; op2val:0x82b50b92;
op3val:0xb57ffff8; valaddr_reg:x3; val_offset:1614*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1614*0 + 3*4*FLEN/8, x4, x1, x2)

inst_539:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x34fe53 and fs2 == 1 and fe2 == 0x05 and fm2 == 0x350b92 and fs3 == 1 and fe3 == 0x6a and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c34fe53; op2val:0x82b50b92;
op3val:0xb57ffffc; valaddr_reg:x3; val_offset:1617*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1617*0 + 3*4*FLEN/8, x4, x1, x2)

inst_540:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x34fe53 and fs2 == 1 and fe2 == 0x05 and fm2 == 0x350b92 and fs3 == 1 and fe3 == 0x6a and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c34fe53; op2val:0x82b50b92;
op3val:0xb57ffffe; valaddr_reg:x3; val_offset:1620*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1620*0 + 3*4*FLEN/8, x4, x1, x2)

inst_541:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x34fe53 and fs2 == 1 and fe2 == 0x05 and fm2 == 0x350b92 and fs3 == 1 and fe3 == 0x6a and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c34fe53; op2val:0x82b50b92;
op3val:0xb57fffff; valaddr_reg:x3; val_offset:1623*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1623*0 + 3*4*FLEN/8, x4, x1, x2)

inst_542:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x34fe53 and fs2 == 1 and fe2 == 0x05 and fm2 == 0x350b92 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c34fe53; op2val:0x82b50b92;
op3val:0xbf800001; valaddr_reg:x3; val_offset:1626*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1626*0 + 3*4*FLEN/8, x4, x1, x2)

inst_543:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x34fe53 and fs2 == 1 and fe2 == 0x05 and fm2 == 0x350b92 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c34fe53; op2val:0x82b50b92;
op3val:0xbf800003; valaddr_reg:x3; val_offset:1629*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1629*0 + 3*4*FLEN/8, x4, x1, x2)

inst_544:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x34fe53 and fs2 == 1 and fe2 == 0x05 and fm2 == 0x350b92 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c34fe53; op2val:0x82b50b92;
op3val:0xbf800007; valaddr_reg:x3; val_offset:1632*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1632*0 + 3*4*FLEN/8, x4, x1, x2)

inst_545:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x34fe53 and fs2 == 1 and fe2 == 0x05 and fm2 == 0x350b92 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c34fe53; op2val:0x82b50b92;
op3val:0xbf999999; valaddr_reg:x3; val_offset:1635*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1635*0 + 3*4*FLEN/8, x4, x1, x2)

inst_546:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x34fe53 and fs2 == 1 and fe2 == 0x05 and fm2 == 0x350b92 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c34fe53; op2val:0x82b50b92;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:1638*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1638*0 + 3*4*FLEN/8, x4, x1, x2)

inst_547:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x34fe53 and fs2 == 1 and fe2 == 0x05 and fm2 == 0x350b92 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c34fe53; op2val:0x82b50b92;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:1641*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1641*0 + 3*4*FLEN/8, x4, x1, x2)

inst_548:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x34fe53 and fs2 == 1 and fe2 == 0x05 and fm2 == 0x350b92 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c34fe53; op2val:0x82b50b92;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:1644*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1644*0 + 3*4*FLEN/8, x4, x1, x2)

inst_549:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x34fe53 and fs2 == 1 and fe2 == 0x05 and fm2 == 0x350b92 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c34fe53; op2val:0x82b50b92;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:1647*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1647*0 + 3*4*FLEN/8, x4, x1, x2)

inst_550:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x34fe53 and fs2 == 1 and fe2 == 0x05 and fm2 == 0x350b92 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c34fe53; op2val:0x82b50b92;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:1650*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1650*0 + 3*4*FLEN/8, x4, x1, x2)

inst_551:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x34fe53 and fs2 == 1 and fe2 == 0x05 and fm2 == 0x350b92 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c34fe53; op2val:0x82b50b92;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:1653*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1653*0 + 3*4*FLEN/8, x4, x1, x2)

inst_552:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x34fe53 and fs2 == 1 and fe2 == 0x05 and fm2 == 0x350b92 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c34fe53; op2val:0x82b50b92;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:1656*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1656*0 + 3*4*FLEN/8, x4, x1, x2)

inst_553:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x34fe53 and fs2 == 1 and fe2 == 0x05 and fm2 == 0x350b92 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c34fe53; op2val:0x82b50b92;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:1659*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1659*0 + 3*4*FLEN/8, x4, x1, x2)

inst_554:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x34fe53 and fs2 == 1 and fe2 == 0x05 and fm2 == 0x350b92 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c34fe53; op2val:0x82b50b92;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:1662*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1662*0 + 3*4*FLEN/8, x4, x1, x2)

inst_555:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x34fe53 and fs2 == 1 and fe2 == 0x05 and fm2 == 0x350b92 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c34fe53; op2val:0x82b50b92;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:1665*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1665*0 + 3*4*FLEN/8, x4, x1, x2)

inst_556:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x34fe53 and fs2 == 1 and fe2 == 0x05 and fm2 == 0x350b92 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c34fe53; op2val:0x82b50b92;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:1668*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1668*0 + 3*4*FLEN/8, x4, x1, x2)

inst_557:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x34fe53 and fs2 == 1 and fe2 == 0x05 and fm2 == 0x350b92 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c34fe53; op2val:0x82b50b92;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:1671*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1671*0 + 3*4*FLEN/8, x4, x1, x2)

inst_558:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x3bd2e4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c3bd2e4; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:1674*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1674*0 + 3*4*FLEN/8, x4, x1, x2)

inst_559:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x3bd2e4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c3bd2e4; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:1677*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1677*0 + 3*4*FLEN/8, x4, x1, x2)

inst_560:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x3bd2e4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c3bd2e4; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:1680*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1680*0 + 3*4*FLEN/8, x4, x1, x2)

inst_561:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x3bd2e4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c3bd2e4; op2val:0x0;
op3val:0x199999; valaddr_reg:x3; val_offset:1683*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1683*0 + 3*4*FLEN/8, x4, x1, x2)

inst_562:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x3bd2e4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c3bd2e4; op2val:0x0;
op3val:0x249249; valaddr_reg:x3; val_offset:1686*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1686*0 + 3*4*FLEN/8, x4, x1, x2)

inst_563:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x3bd2e4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c3bd2e4; op2val:0x0;
op3val:0x333333; valaddr_reg:x3; val_offset:1689*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1689*0 + 3*4*FLEN/8, x4, x1, x2)

inst_564:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x3bd2e4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c3bd2e4; op2val:0x0;
op3val:0x36db6d; valaddr_reg:x3; val_offset:1692*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1692*0 + 3*4*FLEN/8, x4, x1, x2)

inst_565:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x3bd2e4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c3bd2e4; op2val:0x0;
op3val:0x3bbbbb; valaddr_reg:x3; val_offset:1695*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1695*0 + 3*4*FLEN/8, x4, x1, x2)

inst_566:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x3bd2e4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c3bd2e4; op2val:0x0;
op3val:0x444444; valaddr_reg:x3; val_offset:1698*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1698*0 + 3*4*FLEN/8, x4, x1, x2)

inst_567:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x3bd2e4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c3bd2e4; op2val:0x0;
op3val:0x4ccccc; valaddr_reg:x3; val_offset:1701*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1701*0 + 3*4*FLEN/8, x4, x1, x2)

inst_568:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x3bd2e4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c3bd2e4; op2val:0x0;
op3val:0x5b6db6; valaddr_reg:x3; val_offset:1704*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1704*0 + 3*4*FLEN/8, x4, x1, x2)

inst_569:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x3bd2e4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c3bd2e4; op2val:0x0;
op3val:0x666666; valaddr_reg:x3; val_offset:1707*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1707*0 + 3*4*FLEN/8, x4, x1, x2)

inst_570:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x3bd2e4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c3bd2e4; op2val:0x0;
op3val:0x6db6db; valaddr_reg:x3; val_offset:1710*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1710*0 + 3*4*FLEN/8, x4, x1, x2)

inst_571:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x3bd2e4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c3bd2e4; op2val:0x0;
op3val:0x7ffff8; valaddr_reg:x3; val_offset:1713*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1713*0 + 3*4*FLEN/8, x4, x1, x2)

inst_572:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x3bd2e4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c3bd2e4; op2val:0x0;
op3val:0x7ffffc; valaddr_reg:x3; val_offset:1716*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1716*0 + 3*4*FLEN/8, x4, x1, x2)

inst_573:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x3bd2e4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c3bd2e4; op2val:0x0;
op3val:0x7ffffe; valaddr_reg:x3; val_offset:1719*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1719*0 + 3*4*FLEN/8, x4, x1, x2)

inst_574:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x3bd2e4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c3bd2e4; op2val:0x0;
op3val:0xd800000; valaddr_reg:x3; val_offset:1722*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1722*0 + 3*4*FLEN/8, x4, x1, x2)

inst_575:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x3bd2e4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c3bd2e4; op2val:0x0;
op3val:0xd800001; valaddr_reg:x3; val_offset:1725*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1725*0 + 3*4*FLEN/8, x4, x1, x2)

inst_576:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x3bd2e4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c3bd2e4; op2val:0x0;
op3val:0xd800003; valaddr_reg:x3; val_offset:1728*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1728*0 + 3*4*FLEN/8, x4, x1, x2)

inst_577:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x3bd2e4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c3bd2e4; op2val:0x0;
op3val:0xd800007; valaddr_reg:x3; val_offset:1731*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1731*0 + 3*4*FLEN/8, x4, x1, x2)

inst_578:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x3bd2e4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c3bd2e4; op2val:0x0;
op3val:0xd80000f; valaddr_reg:x3; val_offset:1734*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1734*0 + 3*4*FLEN/8, x4, x1, x2)

inst_579:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x3bd2e4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c3bd2e4; op2val:0x0;
op3val:0xd80001f; valaddr_reg:x3; val_offset:1737*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1737*0 + 3*4*FLEN/8, x4, x1, x2)

inst_580:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x3bd2e4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c3bd2e4; op2val:0x0;
op3val:0xd80003f; valaddr_reg:x3; val_offset:1740*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1740*0 + 3*4*FLEN/8, x4, x1, x2)

inst_581:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x3bd2e4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c3bd2e4; op2val:0x0;
op3val:0xd80007f; valaddr_reg:x3; val_offset:1743*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1743*0 + 3*4*FLEN/8, x4, x1, x2)

inst_582:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x3bd2e4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c3bd2e4; op2val:0x0;
op3val:0xd8000ff; valaddr_reg:x3; val_offset:1746*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1746*0 + 3*4*FLEN/8, x4, x1, x2)

inst_583:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x3bd2e4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c3bd2e4; op2val:0x0;
op3val:0xd8001ff; valaddr_reg:x3; val_offset:1749*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1749*0 + 3*4*FLEN/8, x4, x1, x2)

inst_584:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x3bd2e4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c3bd2e4; op2val:0x0;
op3val:0xd8003ff; valaddr_reg:x3; val_offset:1752*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1752*0 + 3*4*FLEN/8, x4, x1, x2)

inst_585:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x3bd2e4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c3bd2e4; op2val:0x0;
op3val:0xd8007ff; valaddr_reg:x3; val_offset:1755*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1755*0 + 3*4*FLEN/8, x4, x1, x2)

inst_586:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x3bd2e4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c3bd2e4; op2val:0x0;
op3val:0xd800fff; valaddr_reg:x3; val_offset:1758*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1758*0 + 3*4*FLEN/8, x4, x1, x2)

inst_587:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x3bd2e4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c3bd2e4; op2val:0x0;
op3val:0xd801fff; valaddr_reg:x3; val_offset:1761*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1761*0 + 3*4*FLEN/8, x4, x1, x2)

inst_588:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x3bd2e4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c3bd2e4; op2val:0x0;
op3val:0xd803fff; valaddr_reg:x3; val_offset:1764*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1764*0 + 3*4*FLEN/8, x4, x1, x2)

inst_589:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x3bd2e4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c3bd2e4; op2val:0x0;
op3val:0xd807fff; valaddr_reg:x3; val_offset:1767*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1767*0 + 3*4*FLEN/8, x4, x1, x2)

inst_590:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x3bd2e4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c3bd2e4; op2val:0x0;
op3val:0xd80ffff; valaddr_reg:x3; val_offset:1770*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1770*0 + 3*4*FLEN/8, x4, x1, x2)

inst_591:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x3bd2e4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c3bd2e4; op2val:0x0;
op3val:0xd81ffff; valaddr_reg:x3; val_offset:1773*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1773*0 + 3*4*FLEN/8, x4, x1, x2)

inst_592:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x3bd2e4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c3bd2e4; op2val:0x0;
op3val:0xd83ffff; valaddr_reg:x3; val_offset:1776*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1776*0 + 3*4*FLEN/8, x4, x1, x2)

inst_593:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x3bd2e4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c3bd2e4; op2val:0x0;
op3val:0xd87ffff; valaddr_reg:x3; val_offset:1779*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1779*0 + 3*4*FLEN/8, x4, x1, x2)

inst_594:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x3bd2e4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c3bd2e4; op2val:0x0;
op3val:0xd8fffff; valaddr_reg:x3; val_offset:1782*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1782*0 + 3*4*FLEN/8, x4, x1, x2)

inst_595:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x3bd2e4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c3bd2e4; op2val:0x0;
op3val:0xd9fffff; valaddr_reg:x3; val_offset:1785*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1785*0 + 3*4*FLEN/8, x4, x1, x2)

inst_596:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x3bd2e4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c3bd2e4; op2val:0x0;
op3val:0xdbfffff; valaddr_reg:x3; val_offset:1788*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1788*0 + 3*4*FLEN/8, x4, x1, x2)

inst_597:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x3bd2e4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c3bd2e4; op2val:0x0;
op3val:0xdc00000; valaddr_reg:x3; val_offset:1791*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1791*0 + 3*4*FLEN/8, x4, x1, x2)

inst_598:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x3bd2e4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c3bd2e4; op2val:0x0;
op3val:0xde00000; valaddr_reg:x3; val_offset:1794*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1794*0 + 3*4*FLEN/8, x4, x1, x2)

inst_599:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x3bd2e4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c3bd2e4; op2val:0x0;
op3val:0xdf00000; valaddr_reg:x3; val_offset:1797*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1797*0 + 3*4*FLEN/8, x4, x1, x2)

inst_600:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x3bd2e4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c3bd2e4; op2val:0x0;
op3val:0xdf80000; valaddr_reg:x3; val_offset:1800*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1800*0 + 3*4*FLEN/8, x4, x1, x2)

inst_601:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x3bd2e4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c3bd2e4; op2val:0x0;
op3val:0xdfc0000; valaddr_reg:x3; val_offset:1803*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1803*0 + 3*4*FLEN/8, x4, x1, x2)

inst_602:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x3bd2e4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c3bd2e4; op2val:0x0;
op3val:0xdfe0000; valaddr_reg:x3; val_offset:1806*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1806*0 + 3*4*FLEN/8, x4, x1, x2)

inst_603:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x3bd2e4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c3bd2e4; op2val:0x0;
op3val:0xdff0000; valaddr_reg:x3; val_offset:1809*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1809*0 + 3*4*FLEN/8, x4, x1, x2)

inst_604:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x3bd2e4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c3bd2e4; op2val:0x0;
op3val:0xdff8000; valaddr_reg:x3; val_offset:1812*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1812*0 + 3*4*FLEN/8, x4, x1, x2)

inst_605:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x3bd2e4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c3bd2e4; op2val:0x0;
op3val:0xdffc000; valaddr_reg:x3; val_offset:1815*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1815*0 + 3*4*FLEN/8, x4, x1, x2)

inst_606:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x3bd2e4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c3bd2e4; op2val:0x0;
op3val:0xdffe000; valaddr_reg:x3; val_offset:1818*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1818*0 + 3*4*FLEN/8, x4, x1, x2)

inst_607:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x3bd2e4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c3bd2e4; op2val:0x0;
op3val:0xdfff000; valaddr_reg:x3; val_offset:1821*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1821*0 + 3*4*FLEN/8, x4, x1, x2)

inst_608:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x3bd2e4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c3bd2e4; op2val:0x0;
op3val:0xdfff800; valaddr_reg:x3; val_offset:1824*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1824*0 + 3*4*FLEN/8, x4, x1, x2)

inst_609:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x3bd2e4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c3bd2e4; op2val:0x0;
op3val:0xdfffc00; valaddr_reg:x3; val_offset:1827*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1827*0 + 3*4*FLEN/8, x4, x1, x2)

inst_610:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x3bd2e4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c3bd2e4; op2val:0x0;
op3val:0xdfffe00; valaddr_reg:x3; val_offset:1830*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1830*0 + 3*4*FLEN/8, x4, x1, x2)

inst_611:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x3bd2e4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c3bd2e4; op2val:0x0;
op3val:0xdffff00; valaddr_reg:x3; val_offset:1833*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1833*0 + 3*4*FLEN/8, x4, x1, x2)

inst_612:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x3bd2e4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c3bd2e4; op2val:0x0;
op3val:0xdffff80; valaddr_reg:x3; val_offset:1836*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1836*0 + 3*4*FLEN/8, x4, x1, x2)

inst_613:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x3bd2e4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c3bd2e4; op2val:0x0;
op3val:0xdffffc0; valaddr_reg:x3; val_offset:1839*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1839*0 + 3*4*FLEN/8, x4, x1, x2)

inst_614:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x3bd2e4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c3bd2e4; op2val:0x0;
op3val:0xdffffe0; valaddr_reg:x3; val_offset:1842*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1842*0 + 3*4*FLEN/8, x4, x1, x2)

inst_615:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x3bd2e4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c3bd2e4; op2val:0x0;
op3val:0xdfffff0; valaddr_reg:x3; val_offset:1845*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1845*0 + 3*4*FLEN/8, x4, x1, x2)

inst_616:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x3bd2e4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c3bd2e4; op2val:0x0;
op3val:0xdfffff8; valaddr_reg:x3; val_offset:1848*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1848*0 + 3*4*FLEN/8, x4, x1, x2)

inst_617:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x3bd2e4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c3bd2e4; op2val:0x0;
op3val:0xdfffffc; valaddr_reg:x3; val_offset:1851*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1851*0 + 3*4*FLEN/8, x4, x1, x2)

inst_618:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x3bd2e4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c3bd2e4; op2val:0x0;
op3val:0xdfffffe; valaddr_reg:x3; val_offset:1854*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1854*0 + 3*4*FLEN/8, x4, x1, x2)

inst_619:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x3bd2e4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c3bd2e4; op2val:0x0;
op3val:0xdffffff; valaddr_reg:x3; val_offset:1857*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1857*0 + 3*4*FLEN/8, x4, x1, x2)

inst_620:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x472d2f and fs2 == 0 and fe2 == 0x05 and fm2 == 0x248473 and fs3 == 0 and fe3 == 0x5a and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c472d2f; op2val:0x2a48473;
op3val:0x2d000000; valaddr_reg:x3; val_offset:1860*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1860*0 + 3*4*FLEN/8, x4, x1, x2)

inst_621:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x472d2f and fs2 == 0 and fe2 == 0x05 and fm2 == 0x248473 and fs3 == 0 and fe3 == 0x5a and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c472d2f; op2val:0x2a48473;
op3val:0x2d000001; valaddr_reg:x3; val_offset:1863*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1863*0 + 3*4*FLEN/8, x4, x1, x2)

inst_622:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x472d2f and fs2 == 0 and fe2 == 0x05 and fm2 == 0x248473 and fs3 == 0 and fe3 == 0x5a and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c472d2f; op2val:0x2a48473;
op3val:0x2d000003; valaddr_reg:x3; val_offset:1866*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1866*0 + 3*4*FLEN/8, x4, x1, x2)

inst_623:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x472d2f and fs2 == 0 and fe2 == 0x05 and fm2 == 0x248473 and fs3 == 0 and fe3 == 0x5a and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c472d2f; op2val:0x2a48473;
op3val:0x2d000007; valaddr_reg:x3; val_offset:1869*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1869*0 + 3*4*FLEN/8, x4, x1, x2)

inst_624:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x472d2f and fs2 == 0 and fe2 == 0x05 and fm2 == 0x248473 and fs3 == 0 and fe3 == 0x5a and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c472d2f; op2val:0x2a48473;
op3val:0x2d00000f; valaddr_reg:x3; val_offset:1872*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1872*0 + 3*4*FLEN/8, x4, x1, x2)

inst_625:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x472d2f and fs2 == 0 and fe2 == 0x05 and fm2 == 0x248473 and fs3 == 0 and fe3 == 0x5a and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c472d2f; op2val:0x2a48473;
op3val:0x2d00001f; valaddr_reg:x3; val_offset:1875*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1875*0 + 3*4*FLEN/8, x4, x1, x2)

inst_626:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x472d2f and fs2 == 0 and fe2 == 0x05 and fm2 == 0x248473 and fs3 == 0 and fe3 == 0x5a and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c472d2f; op2val:0x2a48473;
op3val:0x2d00003f; valaddr_reg:x3; val_offset:1878*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1878*0 + 3*4*FLEN/8, x4, x1, x2)

inst_627:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x472d2f and fs2 == 0 and fe2 == 0x05 and fm2 == 0x248473 and fs3 == 0 and fe3 == 0x5a and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c472d2f; op2val:0x2a48473;
op3val:0x2d00007f; valaddr_reg:x3; val_offset:1881*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1881*0 + 3*4*FLEN/8, x4, x1, x2)

inst_628:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x472d2f and fs2 == 0 and fe2 == 0x05 and fm2 == 0x248473 and fs3 == 0 and fe3 == 0x5a and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c472d2f; op2val:0x2a48473;
op3val:0x2d0000ff; valaddr_reg:x3; val_offset:1884*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1884*0 + 3*4*FLEN/8, x4, x1, x2)

inst_629:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x472d2f and fs2 == 0 and fe2 == 0x05 and fm2 == 0x248473 and fs3 == 0 and fe3 == 0x5a and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c472d2f; op2val:0x2a48473;
op3val:0x2d0001ff; valaddr_reg:x3; val_offset:1887*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1887*0 + 3*4*FLEN/8, x4, x1, x2)

inst_630:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x472d2f and fs2 == 0 and fe2 == 0x05 and fm2 == 0x248473 and fs3 == 0 and fe3 == 0x5a and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c472d2f; op2val:0x2a48473;
op3val:0x2d0003ff; valaddr_reg:x3; val_offset:1890*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1890*0 + 3*4*FLEN/8, x4, x1, x2)

inst_631:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x472d2f and fs2 == 0 and fe2 == 0x05 and fm2 == 0x248473 and fs3 == 0 and fe3 == 0x5a and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c472d2f; op2val:0x2a48473;
op3val:0x2d0007ff; valaddr_reg:x3; val_offset:1893*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1893*0 + 3*4*FLEN/8, x4, x1, x2)

inst_632:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x472d2f and fs2 == 0 and fe2 == 0x05 and fm2 == 0x248473 and fs3 == 0 and fe3 == 0x5a and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c472d2f; op2val:0x2a48473;
op3val:0x2d000fff; valaddr_reg:x3; val_offset:1896*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1896*0 + 3*4*FLEN/8, x4, x1, x2)

inst_633:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x472d2f and fs2 == 0 and fe2 == 0x05 and fm2 == 0x248473 and fs3 == 0 and fe3 == 0x5a and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c472d2f; op2val:0x2a48473;
op3val:0x2d001fff; valaddr_reg:x3; val_offset:1899*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1899*0 + 3*4*FLEN/8, x4, x1, x2)

inst_634:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x472d2f and fs2 == 0 and fe2 == 0x05 and fm2 == 0x248473 and fs3 == 0 and fe3 == 0x5a and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c472d2f; op2val:0x2a48473;
op3val:0x2d003fff; valaddr_reg:x3; val_offset:1902*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1902*0 + 3*4*FLEN/8, x4, x1, x2)

inst_635:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x472d2f and fs2 == 0 and fe2 == 0x05 and fm2 == 0x248473 and fs3 == 0 and fe3 == 0x5a and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c472d2f; op2val:0x2a48473;
op3val:0x2d007fff; valaddr_reg:x3; val_offset:1905*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1905*0 + 3*4*FLEN/8, x4, x1, x2)

inst_636:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x472d2f and fs2 == 0 and fe2 == 0x05 and fm2 == 0x248473 and fs3 == 0 and fe3 == 0x5a and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c472d2f; op2val:0x2a48473;
op3val:0x2d00ffff; valaddr_reg:x3; val_offset:1908*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1908*0 + 3*4*FLEN/8, x4, x1, x2)

inst_637:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x472d2f and fs2 == 0 and fe2 == 0x05 and fm2 == 0x248473 and fs3 == 0 and fe3 == 0x5a and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c472d2f; op2val:0x2a48473;
op3val:0x2d01ffff; valaddr_reg:x3; val_offset:1911*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1911*0 + 3*4*FLEN/8, x4, x1, x2)

inst_638:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x472d2f and fs2 == 0 and fe2 == 0x05 and fm2 == 0x248473 and fs3 == 0 and fe3 == 0x5a and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c472d2f; op2val:0x2a48473;
op3val:0x2d03ffff; valaddr_reg:x3; val_offset:1914*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1914*0 + 3*4*FLEN/8, x4, x1, x2)

inst_639:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x472d2f and fs2 == 0 and fe2 == 0x05 and fm2 == 0x248473 and fs3 == 0 and fe3 == 0x5a and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c472d2f; op2val:0x2a48473;
op3val:0x2d07ffff; valaddr_reg:x3; val_offset:1917*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1917*0 + 3*4*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2083847763,32,FLEN)
NAN_BOXED(2192903058,32,FLEN)
NAN_BOXED(3036741631,32,FLEN)
NAN_BOXED(2083847763,32,FLEN)
NAN_BOXED(2192903058,32,FLEN)
NAN_BOXED(3036807167,32,FLEN)
NAN_BOXED(2083847763,32,FLEN)
NAN_BOXED(2192903058,32,FLEN)
NAN_BOXED(3036938239,32,FLEN)
NAN_BOXED(2083847763,32,FLEN)
NAN_BOXED(2192903058,32,FLEN)
NAN_BOXED(3037200383,32,FLEN)
NAN_BOXED(2083847763,32,FLEN)
NAN_BOXED(2192903058,32,FLEN)
NAN_BOXED(3037724671,32,FLEN)
NAN_BOXED(2083847763,32,FLEN)
NAN_BOXED(2192903058,32,FLEN)
NAN_BOXED(3038773247,32,FLEN)
NAN_BOXED(2083847763,32,FLEN)
NAN_BOXED(2192903058,32,FLEN)
NAN_BOXED(3040870399,32,FLEN)
NAN_BOXED(2083847763,32,FLEN)
NAN_BOXED(2192903058,32,FLEN)
NAN_BOXED(3040870400,32,FLEN)
NAN_BOXED(2083847763,32,FLEN)
NAN_BOXED(2192903058,32,FLEN)
NAN_BOXED(3042967552,32,FLEN)
NAN_BOXED(2083847763,32,FLEN)
NAN_BOXED(2192903058,32,FLEN)
NAN_BOXED(3044016128,32,FLEN)
NAN_BOXED(2083847763,32,FLEN)
NAN_BOXED(2192903058,32,FLEN)
NAN_BOXED(3044540416,32,FLEN)
NAN_BOXED(2083847763,32,FLEN)
NAN_BOXED(2192903058,32,FLEN)
NAN_BOXED(3044802560,32,FLEN)
NAN_BOXED(2083847763,32,FLEN)
NAN_BOXED(2192903058,32,FLEN)
NAN_BOXED(3044933632,32,FLEN)
NAN_BOXED(2083847763,32,FLEN)
NAN_BOXED(2192903058,32,FLEN)
NAN_BOXED(3044999168,32,FLEN)
NAN_BOXED(2083847763,32,FLEN)
NAN_BOXED(2192903058,32,FLEN)
NAN_BOXED(3045031936,32,FLEN)
NAN_BOXED(2083847763,32,FLEN)
NAN_BOXED(2192903058,32,FLEN)
NAN_BOXED(3045048320,32,FLEN)
NAN_BOXED(2083847763,32,FLEN)
NAN_BOXED(2192903058,32,FLEN)
NAN_BOXED(3045056512,32,FLEN)
NAN_BOXED(2083847763,32,FLEN)
NAN_BOXED(2192903058,32,FLEN)
NAN_BOXED(3045060608,32,FLEN)
NAN_BOXED(2083847763,32,FLEN)
NAN_BOXED(2192903058,32,FLEN)
NAN_BOXED(3045062656,32,FLEN)
NAN_BOXED(2083847763,32,FLEN)
NAN_BOXED(2192903058,32,FLEN)
NAN_BOXED(3045063680,32,FLEN)
NAN_BOXED(2083847763,32,FLEN)
NAN_BOXED(2192903058,32,FLEN)
NAN_BOXED(3045064192,32,FLEN)
NAN_BOXED(2083847763,32,FLEN)
NAN_BOXED(2192903058,32,FLEN)
NAN_BOXED(3045064448,32,FLEN)
NAN_BOXED(2083847763,32,FLEN)
NAN_BOXED(2192903058,32,FLEN)
NAN_BOXED(3045064576,32,FLEN)
NAN_BOXED(2083847763,32,FLEN)
NAN_BOXED(2192903058,32,FLEN)
NAN_BOXED(3045064640,32,FLEN)
NAN_BOXED(2083847763,32,FLEN)
NAN_BOXED(2192903058,32,FLEN)
NAN_BOXED(3045064672,32,FLEN)
NAN_BOXED(2083847763,32,FLEN)
NAN_BOXED(2192903058,32,FLEN)
NAN_BOXED(3045064688,32,FLEN)
NAN_BOXED(2083847763,32,FLEN)
NAN_BOXED(2192903058,32,FLEN)
NAN_BOXED(3045064696,32,FLEN)
NAN_BOXED(2083847763,32,FLEN)
NAN_BOXED(2192903058,32,FLEN)
NAN_BOXED(3045064700,32,FLEN)
NAN_BOXED(2083847763,32,FLEN)
NAN_BOXED(2192903058,32,FLEN)
NAN_BOXED(3045064702,32,FLEN)
NAN_BOXED(2083847763,32,FLEN)
NAN_BOXED(2192903058,32,FLEN)
NAN_BOXED(3045064703,32,FLEN)
NAN_BOXED(2083847763,32,FLEN)
NAN_BOXED(2192903058,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2083847763,32,FLEN)
NAN_BOXED(2192903058,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2083847763,32,FLEN)
NAN_BOXED(2192903058,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
NAN_BOXED(2083847763,32,FLEN)
NAN_BOXED(2192903058,32,FLEN)
NAN_BOXED(3214514585,32,FLEN)
NAN_BOXED(2083847763,32,FLEN)
NAN_BOXED(2192903058,32,FLEN)
NAN_BOXED(3215233609,32,FLEN)
NAN_BOXED(2083847763,32,FLEN)
NAN_BOXED(2192903058,32,FLEN)
NAN_BOXED(3216192307,32,FLEN)
NAN_BOXED(2083847763,32,FLEN)
NAN_BOXED(2192903058,32,FLEN)
NAN_BOXED(3216431981,32,FLEN)
NAN_BOXED(2083847763,32,FLEN)
NAN_BOXED(2192903058,32,FLEN)
NAN_BOXED(3216751547,32,FLEN)
NAN_BOXED(2083847763,32,FLEN)
NAN_BOXED(2192903058,32,FLEN)
NAN_BOXED(3217310788,32,FLEN)
NAN_BOXED(2083847763,32,FLEN)
NAN_BOXED(2192903058,32,FLEN)
NAN_BOXED(3217870028,32,FLEN)
NAN_BOXED(2083847763,32,FLEN)
NAN_BOXED(2192903058,32,FLEN)
NAN_BOXED(3218828726,32,FLEN)
NAN_BOXED(2083847763,32,FLEN)
NAN_BOXED(2192903058,32,FLEN)
NAN_BOXED(3219547750,32,FLEN)
NAN_BOXED(2083847763,32,FLEN)
NAN_BOXED(2192903058,32,FLEN)
NAN_BOXED(3220027099,32,FLEN)
NAN_BOXED(2083847763,32,FLEN)
NAN_BOXED(2192903058,32,FLEN)
NAN_BOXED(3221225464,32,FLEN)
NAN_BOXED(2083847763,32,FLEN)
NAN_BOXED(2192903058,32,FLEN)
NAN_BOXED(3221225468,32,FLEN)
NAN_BOXED(2083847763,32,FLEN)
NAN_BOXED(2192903058,32,FLEN)
NAN_BOXED(3221225470,32,FLEN)
NAN_BOXED(2084295396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2084295396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3,32,FLEN)
NAN_BOXED(2084295396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7,32,FLEN)
NAN_BOXED(2084295396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1677721,32,FLEN)
NAN_BOXED(2084295396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2396745,32,FLEN)
NAN_BOXED(2084295396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3355443,32,FLEN)
NAN_BOXED(2084295396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3595117,32,FLEN)
NAN_BOXED(2084295396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3914683,32,FLEN)
NAN_BOXED(2084295396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4473924,32,FLEN)
NAN_BOXED(2084295396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5033164,32,FLEN)
NAN_BOXED(2084295396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5991862,32,FLEN)
NAN_BOXED(2084295396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(6710886,32,FLEN)
NAN_BOXED(2084295396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7190235,32,FLEN)
NAN_BOXED(2084295396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388600,32,FLEN)
NAN_BOXED(2084295396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388604,32,FLEN)
NAN_BOXED(2084295396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388606,32,FLEN)
NAN_BOXED(2084295396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226492416,32,FLEN)
NAN_BOXED(2084295396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226492417,32,FLEN)
NAN_BOXED(2084295396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226492419,32,FLEN)
NAN_BOXED(2084295396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226492423,32,FLEN)
NAN_BOXED(2084295396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226492431,32,FLEN)
NAN_BOXED(2084295396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226492447,32,FLEN)
NAN_BOXED(2084295396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226492479,32,FLEN)
NAN_BOXED(2084295396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226492543,32,FLEN)
NAN_BOXED(2084295396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226492671,32,FLEN)
NAN_BOXED(2084295396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226492927,32,FLEN)
NAN_BOXED(2084295396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226493439,32,FLEN)
NAN_BOXED(2084295396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226494463,32,FLEN)
NAN_BOXED(2084295396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226496511,32,FLEN)
NAN_BOXED(2084295396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226500607,32,FLEN)
NAN_BOXED(2084295396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226508799,32,FLEN)
NAN_BOXED(2084295396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226525183,32,FLEN)
NAN_BOXED(2084295396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226557951,32,FLEN)
NAN_BOXED(2084295396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226623487,32,FLEN)
NAN_BOXED(2084295396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226754559,32,FLEN)
NAN_BOXED(2084295396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(227016703,32,FLEN)
NAN_BOXED(2084295396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(227540991,32,FLEN)
NAN_BOXED(2084295396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(228589567,32,FLEN)
NAN_BOXED(2084295396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(230686719,32,FLEN)
NAN_BOXED(2084295396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(230686720,32,FLEN)
NAN_BOXED(2084295396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(232783872,32,FLEN)
NAN_BOXED(2084295396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(233832448,32,FLEN)
NAN_BOXED(2084295396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234356736,32,FLEN)
NAN_BOXED(2084295396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234618880,32,FLEN)
NAN_BOXED(2084295396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234749952,32,FLEN)
NAN_BOXED(2084295396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234815488,32,FLEN)
NAN_BOXED(2084295396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234848256,32,FLEN)
NAN_BOXED(2084295396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234864640,32,FLEN)
NAN_BOXED(2084295396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234872832,32,FLEN)
NAN_BOXED(2084295396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234876928,32,FLEN)
NAN_BOXED(2084295396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234878976,32,FLEN)
NAN_BOXED(2084295396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234880000,32,FLEN)
NAN_BOXED(2084295396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234880512,32,FLEN)
NAN_BOXED(2084295396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234880768,32,FLEN)
NAN_BOXED(2084295396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234880896,32,FLEN)
NAN_BOXED(2084295396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234880960,32,FLEN)
NAN_BOXED(2084295396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234880992,32,FLEN)
NAN_BOXED(2084295396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234881008,32,FLEN)
NAN_BOXED(2084295396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234881016,32,FLEN)
NAN_BOXED(2084295396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234881020,32,FLEN)
NAN_BOXED(2084295396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234881022,32,FLEN)
NAN_BOXED(2084295396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234881023,32,FLEN)
NAN_BOXED(2085039407,32,FLEN)
NAN_BOXED(44336243,32,FLEN)
NAN_BOXED(754974720,32,FLEN)
NAN_BOXED(2085039407,32,FLEN)
NAN_BOXED(44336243,32,FLEN)
NAN_BOXED(754974721,32,FLEN)
NAN_BOXED(2085039407,32,FLEN)
NAN_BOXED(44336243,32,FLEN)
NAN_BOXED(754974723,32,FLEN)
NAN_BOXED(2085039407,32,FLEN)
NAN_BOXED(44336243,32,FLEN)
NAN_BOXED(754974727,32,FLEN)
NAN_BOXED(2085039407,32,FLEN)
NAN_BOXED(44336243,32,FLEN)
NAN_BOXED(754974735,32,FLEN)
NAN_BOXED(2085039407,32,FLEN)
NAN_BOXED(44336243,32,FLEN)
NAN_BOXED(754974751,32,FLEN)
NAN_BOXED(2085039407,32,FLEN)
NAN_BOXED(44336243,32,FLEN)
NAN_BOXED(754974783,32,FLEN)
NAN_BOXED(2085039407,32,FLEN)
NAN_BOXED(44336243,32,FLEN)
NAN_BOXED(754974847,32,FLEN)
NAN_BOXED(2085039407,32,FLEN)
NAN_BOXED(44336243,32,FLEN)
NAN_BOXED(754974975,32,FLEN)
NAN_BOXED(2085039407,32,FLEN)
NAN_BOXED(44336243,32,FLEN)
NAN_BOXED(754975231,32,FLEN)
NAN_BOXED(2085039407,32,FLEN)
NAN_BOXED(44336243,32,FLEN)
NAN_BOXED(754975743,32,FLEN)
NAN_BOXED(2085039407,32,FLEN)
NAN_BOXED(44336243,32,FLEN)
NAN_BOXED(754976767,32,FLEN)
NAN_BOXED(2085039407,32,FLEN)
NAN_BOXED(44336243,32,FLEN)
NAN_BOXED(754978815,32,FLEN)
NAN_BOXED(2085039407,32,FLEN)
NAN_BOXED(44336243,32,FLEN)
NAN_BOXED(754982911,32,FLEN)
NAN_BOXED(2085039407,32,FLEN)
NAN_BOXED(44336243,32,FLEN)
NAN_BOXED(754991103,32,FLEN)
NAN_BOXED(2085039407,32,FLEN)
NAN_BOXED(44336243,32,FLEN)
NAN_BOXED(755007487,32,FLEN)
NAN_BOXED(2085039407,32,FLEN)
NAN_BOXED(44336243,32,FLEN)
NAN_BOXED(755040255,32,FLEN)
NAN_BOXED(2085039407,32,FLEN)
NAN_BOXED(44336243,32,FLEN)
NAN_BOXED(755105791,32,FLEN)
NAN_BOXED(2085039407,32,FLEN)
NAN_BOXED(44336243,32,FLEN)
NAN_BOXED(755236863,32,FLEN)
NAN_BOXED(2085039407,32,FLEN)
NAN_BOXED(44336243,32,FLEN)
NAN_BOXED(755499007,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
