
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:17:59 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_640:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x472d2f and fs2 == 0 and fe2 == 0x05 and fm2 == 0x248473 and fs3 == 0 and fe3 == 0x5a and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c472d2f; op2val:0x2a48473;
op3val:0x2d0fffff; valaddr_reg:x3; val_offset:1920*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1920*0 + 3*5*FLEN/8, x4, x1, x2)

inst_641:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x472d2f and fs2 == 0 and fe2 == 0x05 and fm2 == 0x248473 and fs3 == 0 and fe3 == 0x5a and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c472d2f; op2val:0x2a48473;
op3val:0x2d1fffff; valaddr_reg:x3; val_offset:1923*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1923*0 + 3*5*FLEN/8, x4, x1, x2)

inst_642:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x472d2f and fs2 == 0 and fe2 == 0x05 and fm2 == 0x248473 and fs3 == 0 and fe3 == 0x5a and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c472d2f; op2val:0x2a48473;
op3val:0x2d3fffff; valaddr_reg:x3; val_offset:1926*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1926*0 + 3*5*FLEN/8, x4, x1, x2)

inst_643:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x472d2f and fs2 == 0 and fe2 == 0x05 and fm2 == 0x248473 and fs3 == 0 and fe3 == 0x5a and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c472d2f; op2val:0x2a48473;
op3val:0x2d400000; valaddr_reg:x3; val_offset:1929*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1929*0 + 3*5*FLEN/8, x4, x1, x2)

inst_644:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x472d2f and fs2 == 0 and fe2 == 0x05 and fm2 == 0x248473 and fs3 == 0 and fe3 == 0x5a and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c472d2f; op2val:0x2a48473;
op3val:0x2d600000; valaddr_reg:x3; val_offset:1932*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1932*0 + 3*5*FLEN/8, x4, x1, x2)

inst_645:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x472d2f and fs2 == 0 and fe2 == 0x05 and fm2 == 0x248473 and fs3 == 0 and fe3 == 0x5a and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c472d2f; op2val:0x2a48473;
op3val:0x2d700000; valaddr_reg:x3; val_offset:1935*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1935*0 + 3*5*FLEN/8, x4, x1, x2)

inst_646:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x472d2f and fs2 == 0 and fe2 == 0x05 and fm2 == 0x248473 and fs3 == 0 and fe3 == 0x5a and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c472d2f; op2val:0x2a48473;
op3val:0x2d780000; valaddr_reg:x3; val_offset:1938*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1938*0 + 3*5*FLEN/8, x4, x1, x2)

inst_647:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x472d2f and fs2 == 0 and fe2 == 0x05 and fm2 == 0x248473 and fs3 == 0 and fe3 == 0x5a and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c472d2f; op2val:0x2a48473;
op3val:0x2d7c0000; valaddr_reg:x3; val_offset:1941*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1941*0 + 3*5*FLEN/8, x4, x1, x2)

inst_648:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x472d2f and fs2 == 0 and fe2 == 0x05 and fm2 == 0x248473 and fs3 == 0 and fe3 == 0x5a and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c472d2f; op2val:0x2a48473;
op3val:0x2d7e0000; valaddr_reg:x3; val_offset:1944*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1944*0 + 3*5*FLEN/8, x4, x1, x2)

inst_649:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x472d2f and fs2 == 0 and fe2 == 0x05 and fm2 == 0x248473 and fs3 == 0 and fe3 == 0x5a and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c472d2f; op2val:0x2a48473;
op3val:0x2d7f0000; valaddr_reg:x3; val_offset:1947*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1947*0 + 3*5*FLEN/8, x4, x1, x2)

inst_650:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x472d2f and fs2 == 0 and fe2 == 0x05 and fm2 == 0x248473 and fs3 == 0 and fe3 == 0x5a and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c472d2f; op2val:0x2a48473;
op3val:0x2d7f8000; valaddr_reg:x3; val_offset:1950*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1950*0 + 3*5*FLEN/8, x4, x1, x2)

inst_651:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x472d2f and fs2 == 0 and fe2 == 0x05 and fm2 == 0x248473 and fs3 == 0 and fe3 == 0x5a and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c472d2f; op2val:0x2a48473;
op3val:0x2d7fc000; valaddr_reg:x3; val_offset:1953*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1953*0 + 3*5*FLEN/8, x4, x1, x2)

inst_652:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x472d2f and fs2 == 0 and fe2 == 0x05 and fm2 == 0x248473 and fs3 == 0 and fe3 == 0x5a and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c472d2f; op2val:0x2a48473;
op3val:0x2d7fe000; valaddr_reg:x3; val_offset:1956*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1956*0 + 3*5*FLEN/8, x4, x1, x2)

inst_653:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x472d2f and fs2 == 0 and fe2 == 0x05 and fm2 == 0x248473 and fs3 == 0 and fe3 == 0x5a and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c472d2f; op2val:0x2a48473;
op3val:0x2d7ff000; valaddr_reg:x3; val_offset:1959*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1959*0 + 3*5*FLEN/8, x4, x1, x2)

inst_654:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x472d2f and fs2 == 0 and fe2 == 0x05 and fm2 == 0x248473 and fs3 == 0 and fe3 == 0x5a and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c472d2f; op2val:0x2a48473;
op3val:0x2d7ff800; valaddr_reg:x3; val_offset:1962*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1962*0 + 3*5*FLEN/8, x4, x1, x2)

inst_655:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x472d2f and fs2 == 0 and fe2 == 0x05 and fm2 == 0x248473 and fs3 == 0 and fe3 == 0x5a and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c472d2f; op2val:0x2a48473;
op3val:0x2d7ffc00; valaddr_reg:x3; val_offset:1965*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1965*0 + 3*5*FLEN/8, x4, x1, x2)

inst_656:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x472d2f and fs2 == 0 and fe2 == 0x05 and fm2 == 0x248473 and fs3 == 0 and fe3 == 0x5a and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c472d2f; op2val:0x2a48473;
op3val:0x2d7ffe00; valaddr_reg:x3; val_offset:1968*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1968*0 + 3*5*FLEN/8, x4, x1, x2)

inst_657:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x472d2f and fs2 == 0 and fe2 == 0x05 and fm2 == 0x248473 and fs3 == 0 and fe3 == 0x5a and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c472d2f; op2val:0x2a48473;
op3val:0x2d7fff00; valaddr_reg:x3; val_offset:1971*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1971*0 + 3*5*FLEN/8, x4, x1, x2)

inst_658:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x472d2f and fs2 == 0 and fe2 == 0x05 and fm2 == 0x248473 and fs3 == 0 and fe3 == 0x5a and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c472d2f; op2val:0x2a48473;
op3val:0x2d7fff80; valaddr_reg:x3; val_offset:1974*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1974*0 + 3*5*FLEN/8, x4, x1, x2)

inst_659:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x472d2f and fs2 == 0 and fe2 == 0x05 and fm2 == 0x248473 and fs3 == 0 and fe3 == 0x5a and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c472d2f; op2val:0x2a48473;
op3val:0x2d7fffc0; valaddr_reg:x3; val_offset:1977*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1977*0 + 3*5*FLEN/8, x4, x1, x2)

inst_660:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x472d2f and fs2 == 0 and fe2 == 0x05 and fm2 == 0x248473 and fs3 == 0 and fe3 == 0x5a and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c472d2f; op2val:0x2a48473;
op3val:0x2d7fffe0; valaddr_reg:x3; val_offset:1980*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1980*0 + 3*5*FLEN/8, x4, x1, x2)

inst_661:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x472d2f and fs2 == 0 and fe2 == 0x05 and fm2 == 0x248473 and fs3 == 0 and fe3 == 0x5a and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c472d2f; op2val:0x2a48473;
op3val:0x2d7ffff0; valaddr_reg:x3; val_offset:1983*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1983*0 + 3*5*FLEN/8, x4, x1, x2)

inst_662:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x472d2f and fs2 == 0 and fe2 == 0x05 and fm2 == 0x248473 and fs3 == 0 and fe3 == 0x5a and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c472d2f; op2val:0x2a48473;
op3val:0x2d7ffff8; valaddr_reg:x3; val_offset:1986*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1986*0 + 3*5*FLEN/8, x4, x1, x2)

inst_663:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x472d2f and fs2 == 0 and fe2 == 0x05 and fm2 == 0x248473 and fs3 == 0 and fe3 == 0x5a and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c472d2f; op2val:0x2a48473;
op3val:0x2d7ffffc; valaddr_reg:x3; val_offset:1989*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1989*0 + 3*5*FLEN/8, x4, x1, x2)

inst_664:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x472d2f and fs2 == 0 and fe2 == 0x05 and fm2 == 0x248473 and fs3 == 0 and fe3 == 0x5a and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c472d2f; op2val:0x2a48473;
op3val:0x2d7ffffe; valaddr_reg:x3; val_offset:1992*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1992*0 + 3*5*FLEN/8, x4, x1, x2)

inst_665:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x472d2f and fs2 == 0 and fe2 == 0x05 and fm2 == 0x248473 and fs3 == 0 and fe3 == 0x5a and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c472d2f; op2val:0x2a48473;
op3val:0x2d7fffff; valaddr_reg:x3; val_offset:1995*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1995*0 + 3*5*FLEN/8, x4, x1, x2)

inst_666:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x472d2f and fs2 == 0 and fe2 == 0x05 and fm2 == 0x248473 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c472d2f; op2val:0x2a48473;
op3val:0x3f800001; valaddr_reg:x3; val_offset:1998*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1998*0 + 3*5*FLEN/8, x4, x1, x2)

inst_667:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x472d2f and fs2 == 0 and fe2 == 0x05 and fm2 == 0x248473 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c472d2f; op2val:0x2a48473;
op3val:0x3f800003; valaddr_reg:x3; val_offset:2001*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2001*0 + 3*5*FLEN/8, x4, x1, x2)

inst_668:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x472d2f and fs2 == 0 and fe2 == 0x05 and fm2 == 0x248473 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c472d2f; op2val:0x2a48473;
op3val:0x3f800007; valaddr_reg:x3; val_offset:2004*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2004*0 + 3*5*FLEN/8, x4, x1, x2)

inst_669:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x472d2f and fs2 == 0 and fe2 == 0x05 and fm2 == 0x248473 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c472d2f; op2val:0x2a48473;
op3val:0x3f999999; valaddr_reg:x3; val_offset:2007*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2007*0 + 3*5*FLEN/8, x4, x1, x2)

inst_670:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x472d2f and fs2 == 0 and fe2 == 0x05 and fm2 == 0x248473 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c472d2f; op2val:0x2a48473;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:2010*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2010*0 + 3*5*FLEN/8, x4, x1, x2)

inst_671:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x472d2f and fs2 == 0 and fe2 == 0x05 and fm2 == 0x248473 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c472d2f; op2val:0x2a48473;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:2013*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2013*0 + 3*5*FLEN/8, x4, x1, x2)

inst_672:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x472d2f and fs2 == 0 and fe2 == 0x05 and fm2 == 0x248473 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c472d2f; op2val:0x2a48473;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:2016*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2016*0 + 3*5*FLEN/8, x4, x1, x2)

inst_673:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x472d2f and fs2 == 0 and fe2 == 0x05 and fm2 == 0x248473 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c472d2f; op2val:0x2a48473;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:2019*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2019*0 + 3*5*FLEN/8, x4, x1, x2)

inst_674:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x472d2f and fs2 == 0 and fe2 == 0x05 and fm2 == 0x248473 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c472d2f; op2val:0x2a48473;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:2022*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2022*0 + 3*5*FLEN/8, x4, x1, x2)

inst_675:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x472d2f and fs2 == 0 and fe2 == 0x05 and fm2 == 0x248473 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c472d2f; op2val:0x2a48473;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:2025*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2025*0 + 3*5*FLEN/8, x4, x1, x2)

inst_676:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x472d2f and fs2 == 0 and fe2 == 0x05 and fm2 == 0x248473 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c472d2f; op2val:0x2a48473;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:2028*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2028*0 + 3*5*FLEN/8, x4, x1, x2)

inst_677:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x472d2f and fs2 == 0 and fe2 == 0x05 and fm2 == 0x248473 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c472d2f; op2val:0x2a48473;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:2031*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2031*0 + 3*5*FLEN/8, x4, x1, x2)

inst_678:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x472d2f and fs2 == 0 and fe2 == 0x05 and fm2 == 0x248473 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c472d2f; op2val:0x2a48473;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:2034*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2034*0 + 3*5*FLEN/8, x4, x1, x2)

inst_679:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x472d2f and fs2 == 0 and fe2 == 0x05 and fm2 == 0x248473 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c472d2f; op2val:0x2a48473;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:2037*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2037*0 + 3*5*FLEN/8, x4, x1, x2)

inst_680:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x472d2f and fs2 == 0 and fe2 == 0x05 and fm2 == 0x248473 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c472d2f; op2val:0x2a48473;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:2040*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2040*0 + 3*5*FLEN/8, x4, x1, x2)

inst_681:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x472d2f and fs2 == 0 and fe2 == 0x05 and fm2 == 0x248473 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c472d2f; op2val:0x2a48473;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:2043*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2043*0 + 3*5*FLEN/8, x4, x1, x2)

inst_682:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x7bae1f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c7bae1f; op2val:0x80000000;
op3val:0x80000001; valaddr_reg:x3; val_offset:2046*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2046*0 + 3*5*FLEN/8, x4, x1, x2)

inst_683:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x7bae1f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c7bae1f; op2val:0x80000000;
op3val:0x80000003; valaddr_reg:x3; val_offset:2049*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2049*0 + 3*5*FLEN/8, x4, x1, x2)

inst_684:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x7bae1f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c7bae1f; op2val:0x80000000;
op3val:0x80000007; valaddr_reg:x3; val_offset:2052*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2052*0 + 3*5*FLEN/8, x4, x1, x2)

inst_685:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x7bae1f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c7bae1f; op2val:0x80000000;
op3val:0x80199999; valaddr_reg:x3; val_offset:2055*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2055*0 + 3*5*FLEN/8, x4, x1, x2)

inst_686:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x7bae1f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c7bae1f; op2val:0x80000000;
op3val:0x80249249; valaddr_reg:x3; val_offset:2058*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2058*0 + 3*5*FLEN/8, x4, x1, x2)

inst_687:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x7bae1f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c7bae1f; op2val:0x80000000;
op3val:0x80333333; valaddr_reg:x3; val_offset:2061*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2061*0 + 3*5*FLEN/8, x4, x1, x2)

inst_688:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x7bae1f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c7bae1f; op2val:0x80000000;
op3val:0x8036db6d; valaddr_reg:x3; val_offset:2064*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2064*0 + 3*5*FLEN/8, x4, x1, x2)

inst_689:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x7bae1f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c7bae1f; op2val:0x80000000;
op3val:0x803bbbbb; valaddr_reg:x3; val_offset:2067*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2067*0 + 3*5*FLEN/8, x4, x1, x2)

inst_690:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x7bae1f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c7bae1f; op2val:0x80000000;
op3val:0x80444444; valaddr_reg:x3; val_offset:2070*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2070*0 + 3*5*FLEN/8, x4, x1, x2)

inst_691:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x7bae1f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c7bae1f; op2val:0x80000000;
op3val:0x804ccccc; valaddr_reg:x3; val_offset:2073*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2073*0 + 3*5*FLEN/8, x4, x1, x2)

inst_692:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x7bae1f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c7bae1f; op2val:0x80000000;
op3val:0x805b6db6; valaddr_reg:x3; val_offset:2076*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2076*0 + 3*5*FLEN/8, x4, x1, x2)

inst_693:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x7bae1f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c7bae1f; op2val:0x80000000;
op3val:0x80666666; valaddr_reg:x3; val_offset:2079*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2079*0 + 3*5*FLEN/8, x4, x1, x2)

inst_694:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x7bae1f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c7bae1f; op2val:0x80000000;
op3val:0x806db6db; valaddr_reg:x3; val_offset:2082*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2082*0 + 3*5*FLEN/8, x4, x1, x2)

inst_695:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x7bae1f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c7bae1f; op2val:0x80000000;
op3val:0x807ffff8; valaddr_reg:x3; val_offset:2085*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2085*0 + 3*5*FLEN/8, x4, x1, x2)

inst_696:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x7bae1f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c7bae1f; op2val:0x80000000;
op3val:0x807ffffc; valaddr_reg:x3; val_offset:2088*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2088*0 + 3*5*FLEN/8, x4, x1, x2)

inst_697:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x7bae1f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c7bae1f; op2val:0x80000000;
op3val:0x807ffffe; valaddr_reg:x3; val_offset:2091*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2091*0 + 3*5*FLEN/8, x4, x1, x2)

inst_698:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x7bae1f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c7bae1f; op2val:0x80000000;
op3val:0x89000000; valaddr_reg:x3; val_offset:2094*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2094*0 + 3*5*FLEN/8, x4, x1, x2)

inst_699:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x7bae1f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c7bae1f; op2val:0x80000000;
op3val:0x89000001; valaddr_reg:x3; val_offset:2097*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2097*0 + 3*5*FLEN/8, x4, x1, x2)

inst_700:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x7bae1f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c7bae1f; op2val:0x80000000;
op3val:0x89000003; valaddr_reg:x3; val_offset:2100*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2100*0 + 3*5*FLEN/8, x4, x1, x2)

inst_701:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x7bae1f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c7bae1f; op2val:0x80000000;
op3val:0x89000007; valaddr_reg:x3; val_offset:2103*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2103*0 + 3*5*FLEN/8, x4, x1, x2)

inst_702:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x7bae1f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c7bae1f; op2val:0x80000000;
op3val:0x8900000f; valaddr_reg:x3; val_offset:2106*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2106*0 + 3*5*FLEN/8, x4, x1, x2)

inst_703:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x7bae1f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c7bae1f; op2val:0x80000000;
op3val:0x8900001f; valaddr_reg:x3; val_offset:2109*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2109*0 + 3*5*FLEN/8, x4, x1, x2)

inst_704:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x7bae1f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c7bae1f; op2val:0x80000000;
op3val:0x8900003f; valaddr_reg:x3; val_offset:2112*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2112*0 + 3*5*FLEN/8, x4, x1, x2)

inst_705:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x7bae1f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c7bae1f; op2val:0x80000000;
op3val:0x8900007f; valaddr_reg:x3; val_offset:2115*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2115*0 + 3*5*FLEN/8, x4, x1, x2)

inst_706:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x7bae1f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c7bae1f; op2val:0x80000000;
op3val:0x890000ff; valaddr_reg:x3; val_offset:2118*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2118*0 + 3*5*FLEN/8, x4, x1, x2)

inst_707:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x7bae1f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c7bae1f; op2val:0x80000000;
op3val:0x890001ff; valaddr_reg:x3; val_offset:2121*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2121*0 + 3*5*FLEN/8, x4, x1, x2)

inst_708:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x7bae1f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c7bae1f; op2val:0x80000000;
op3val:0x890003ff; valaddr_reg:x3; val_offset:2124*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2124*0 + 3*5*FLEN/8, x4, x1, x2)

inst_709:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x7bae1f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c7bae1f; op2val:0x80000000;
op3val:0x890007ff; valaddr_reg:x3; val_offset:2127*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2127*0 + 3*5*FLEN/8, x4, x1, x2)

inst_710:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x7bae1f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c7bae1f; op2val:0x80000000;
op3val:0x89000fff; valaddr_reg:x3; val_offset:2130*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2130*0 + 3*5*FLEN/8, x4, x1, x2)

inst_711:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x7bae1f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c7bae1f; op2val:0x80000000;
op3val:0x89001fff; valaddr_reg:x3; val_offset:2133*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2133*0 + 3*5*FLEN/8, x4, x1, x2)

inst_712:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x7bae1f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c7bae1f; op2val:0x80000000;
op3val:0x89003fff; valaddr_reg:x3; val_offset:2136*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2136*0 + 3*5*FLEN/8, x4, x1, x2)

inst_713:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x7bae1f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c7bae1f; op2val:0x80000000;
op3val:0x89007fff; valaddr_reg:x3; val_offset:2139*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2139*0 + 3*5*FLEN/8, x4, x1, x2)

inst_714:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x7bae1f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c7bae1f; op2val:0x80000000;
op3val:0x8900ffff; valaddr_reg:x3; val_offset:2142*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2142*0 + 3*5*FLEN/8, x4, x1, x2)

inst_715:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x7bae1f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c7bae1f; op2val:0x80000000;
op3val:0x8901ffff; valaddr_reg:x3; val_offset:2145*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2145*0 + 3*5*FLEN/8, x4, x1, x2)

inst_716:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x7bae1f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c7bae1f; op2val:0x80000000;
op3val:0x8903ffff; valaddr_reg:x3; val_offset:2148*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2148*0 + 3*5*FLEN/8, x4, x1, x2)

inst_717:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x7bae1f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c7bae1f; op2val:0x80000000;
op3val:0x8907ffff; valaddr_reg:x3; val_offset:2151*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2151*0 + 3*5*FLEN/8, x4, x1, x2)

inst_718:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x7bae1f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c7bae1f; op2val:0x80000000;
op3val:0x890fffff; valaddr_reg:x3; val_offset:2154*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2154*0 + 3*5*FLEN/8, x4, x1, x2)

inst_719:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x7bae1f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c7bae1f; op2val:0x80000000;
op3val:0x891fffff; valaddr_reg:x3; val_offset:2157*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2157*0 + 3*5*FLEN/8, x4, x1, x2)

inst_720:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x7bae1f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c7bae1f; op2val:0x80000000;
op3val:0x893fffff; valaddr_reg:x3; val_offset:2160*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2160*0 + 3*5*FLEN/8, x4, x1, x2)

inst_721:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x7bae1f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c7bae1f; op2val:0x80000000;
op3val:0x89400000; valaddr_reg:x3; val_offset:2163*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2163*0 + 3*5*FLEN/8, x4, x1, x2)

inst_722:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x7bae1f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c7bae1f; op2val:0x80000000;
op3val:0x89600000; valaddr_reg:x3; val_offset:2166*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2166*0 + 3*5*FLEN/8, x4, x1, x2)

inst_723:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x7bae1f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c7bae1f; op2val:0x80000000;
op3val:0x89700000; valaddr_reg:x3; val_offset:2169*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2169*0 + 3*5*FLEN/8, x4, x1, x2)

inst_724:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x7bae1f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c7bae1f; op2val:0x80000000;
op3val:0x89780000; valaddr_reg:x3; val_offset:2172*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2172*0 + 3*5*FLEN/8, x4, x1, x2)

inst_725:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x7bae1f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c7bae1f; op2val:0x80000000;
op3val:0x897c0000; valaddr_reg:x3; val_offset:2175*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2175*0 + 3*5*FLEN/8, x4, x1, x2)

inst_726:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x7bae1f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c7bae1f; op2val:0x80000000;
op3val:0x897e0000; valaddr_reg:x3; val_offset:2178*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2178*0 + 3*5*FLEN/8, x4, x1, x2)

inst_727:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x7bae1f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c7bae1f; op2val:0x80000000;
op3val:0x897f0000; valaddr_reg:x3; val_offset:2181*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2181*0 + 3*5*FLEN/8, x4, x1, x2)

inst_728:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x7bae1f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c7bae1f; op2val:0x80000000;
op3val:0x897f8000; valaddr_reg:x3; val_offset:2184*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2184*0 + 3*5*FLEN/8, x4, x1, x2)

inst_729:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x7bae1f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c7bae1f; op2val:0x80000000;
op3val:0x897fc000; valaddr_reg:x3; val_offset:2187*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2187*0 + 3*5*FLEN/8, x4, x1, x2)

inst_730:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x7bae1f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c7bae1f; op2val:0x80000000;
op3val:0x897fe000; valaddr_reg:x3; val_offset:2190*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2190*0 + 3*5*FLEN/8, x4, x1, x2)

inst_731:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x7bae1f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c7bae1f; op2val:0x80000000;
op3val:0x897ff000; valaddr_reg:x3; val_offset:2193*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2193*0 + 3*5*FLEN/8, x4, x1, x2)

inst_732:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x7bae1f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c7bae1f; op2val:0x80000000;
op3val:0x897ff800; valaddr_reg:x3; val_offset:2196*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2196*0 + 3*5*FLEN/8, x4, x1, x2)

inst_733:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x7bae1f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c7bae1f; op2val:0x80000000;
op3val:0x897ffc00; valaddr_reg:x3; val_offset:2199*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2199*0 + 3*5*FLEN/8, x4, x1, x2)

inst_734:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x7bae1f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c7bae1f; op2val:0x80000000;
op3val:0x897ffe00; valaddr_reg:x3; val_offset:2202*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2202*0 + 3*5*FLEN/8, x4, x1, x2)

inst_735:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x7bae1f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c7bae1f; op2val:0x80000000;
op3val:0x897fff00; valaddr_reg:x3; val_offset:2205*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2205*0 + 3*5*FLEN/8, x4, x1, x2)

inst_736:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x7bae1f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c7bae1f; op2val:0x80000000;
op3val:0x897fff80; valaddr_reg:x3; val_offset:2208*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2208*0 + 3*5*FLEN/8, x4, x1, x2)

inst_737:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x7bae1f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c7bae1f; op2val:0x80000000;
op3val:0x897fffc0; valaddr_reg:x3; val_offset:2211*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2211*0 + 3*5*FLEN/8, x4, x1, x2)

inst_738:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x7bae1f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c7bae1f; op2val:0x80000000;
op3val:0x897fffe0; valaddr_reg:x3; val_offset:2214*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2214*0 + 3*5*FLEN/8, x4, x1, x2)

inst_739:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x7bae1f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c7bae1f; op2val:0x80000000;
op3val:0x897ffff0; valaddr_reg:x3; val_offset:2217*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2217*0 + 3*5*FLEN/8, x4, x1, x2)

inst_740:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x7bae1f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c7bae1f; op2val:0x80000000;
op3val:0x897ffff8; valaddr_reg:x3; val_offset:2220*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2220*0 + 3*5*FLEN/8, x4, x1, x2)

inst_741:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x7bae1f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c7bae1f; op2val:0x80000000;
op3val:0x897ffffc; valaddr_reg:x3; val_offset:2223*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2223*0 + 3*5*FLEN/8, x4, x1, x2)

inst_742:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x7bae1f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c7bae1f; op2val:0x80000000;
op3val:0x897ffffe; valaddr_reg:x3; val_offset:2226*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2226*0 + 3*5*FLEN/8, x4, x1, x2)

inst_743:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x7bae1f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c7bae1f; op2val:0x80000000;
op3val:0x897fffff; valaddr_reg:x3; val_offset:2229*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2229*0 + 3*5*FLEN/8, x4, x1, x2)

inst_744:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x0637ff and fs2 == 1 and fe2 == 0x04 and fm2 == 0x742387 and fs3 == 1 and fe3 == 0x7c and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c8637ff; op2val:0x82742387;
op3val:0xbe000000; valaddr_reg:x3; val_offset:2232*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2232*0 + 3*5*FLEN/8, x4, x1, x2)

inst_745:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x0637ff and fs2 == 1 and fe2 == 0x04 and fm2 == 0x742387 and fs3 == 1 and fe3 == 0x7c and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c8637ff; op2val:0x82742387;
op3val:0xbe000001; valaddr_reg:x3; val_offset:2235*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2235*0 + 3*5*FLEN/8, x4, x1, x2)

inst_746:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x0637ff and fs2 == 1 and fe2 == 0x04 and fm2 == 0x742387 and fs3 == 1 and fe3 == 0x7c and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c8637ff; op2val:0x82742387;
op3val:0xbe000003; valaddr_reg:x3; val_offset:2238*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2238*0 + 3*5*FLEN/8, x4, x1, x2)

inst_747:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x0637ff and fs2 == 1 and fe2 == 0x04 and fm2 == 0x742387 and fs3 == 1 and fe3 == 0x7c and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c8637ff; op2val:0x82742387;
op3val:0xbe000007; valaddr_reg:x3; val_offset:2241*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2241*0 + 3*5*FLEN/8, x4, x1, x2)

inst_748:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x0637ff and fs2 == 1 and fe2 == 0x04 and fm2 == 0x742387 and fs3 == 1 and fe3 == 0x7c and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c8637ff; op2val:0x82742387;
op3val:0xbe00000f; valaddr_reg:x3; val_offset:2244*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2244*0 + 3*5*FLEN/8, x4, x1, x2)

inst_749:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x0637ff and fs2 == 1 and fe2 == 0x04 and fm2 == 0x742387 and fs3 == 1 and fe3 == 0x7c and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c8637ff; op2val:0x82742387;
op3val:0xbe00001f; valaddr_reg:x3; val_offset:2247*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2247*0 + 3*5*FLEN/8, x4, x1, x2)

inst_750:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x0637ff and fs2 == 1 and fe2 == 0x04 and fm2 == 0x742387 and fs3 == 1 and fe3 == 0x7c and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c8637ff; op2val:0x82742387;
op3val:0xbe00003f; valaddr_reg:x3; val_offset:2250*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2250*0 + 3*5*FLEN/8, x4, x1, x2)

inst_751:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x0637ff and fs2 == 1 and fe2 == 0x04 and fm2 == 0x742387 and fs3 == 1 and fe3 == 0x7c and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c8637ff; op2val:0x82742387;
op3val:0xbe00007f; valaddr_reg:x3; val_offset:2253*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2253*0 + 3*5*FLEN/8, x4, x1, x2)

inst_752:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x0637ff and fs2 == 1 and fe2 == 0x04 and fm2 == 0x742387 and fs3 == 1 and fe3 == 0x7c and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c8637ff; op2val:0x82742387;
op3val:0xbe0000ff; valaddr_reg:x3; val_offset:2256*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2256*0 + 3*5*FLEN/8, x4, x1, x2)

inst_753:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x0637ff and fs2 == 1 and fe2 == 0x04 and fm2 == 0x742387 and fs3 == 1 and fe3 == 0x7c and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c8637ff; op2val:0x82742387;
op3val:0xbe0001ff; valaddr_reg:x3; val_offset:2259*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2259*0 + 3*5*FLEN/8, x4, x1, x2)

inst_754:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x0637ff and fs2 == 1 and fe2 == 0x04 and fm2 == 0x742387 and fs3 == 1 and fe3 == 0x7c and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c8637ff; op2val:0x82742387;
op3val:0xbe0003ff; valaddr_reg:x3; val_offset:2262*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2262*0 + 3*5*FLEN/8, x4, x1, x2)

inst_755:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x0637ff and fs2 == 1 and fe2 == 0x04 and fm2 == 0x742387 and fs3 == 1 and fe3 == 0x7c and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c8637ff; op2val:0x82742387;
op3val:0xbe0007ff; valaddr_reg:x3; val_offset:2265*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2265*0 + 3*5*FLEN/8, x4, x1, x2)

inst_756:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x0637ff and fs2 == 1 and fe2 == 0x04 and fm2 == 0x742387 and fs3 == 1 and fe3 == 0x7c and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c8637ff; op2val:0x82742387;
op3val:0xbe000fff; valaddr_reg:x3; val_offset:2268*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2268*0 + 3*5*FLEN/8, x4, x1, x2)

inst_757:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x0637ff and fs2 == 1 and fe2 == 0x04 and fm2 == 0x742387 and fs3 == 1 and fe3 == 0x7c and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c8637ff; op2val:0x82742387;
op3val:0xbe001fff; valaddr_reg:x3; val_offset:2271*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2271*0 + 3*5*FLEN/8, x4, x1, x2)

inst_758:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x0637ff and fs2 == 1 and fe2 == 0x04 and fm2 == 0x742387 and fs3 == 1 and fe3 == 0x7c and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c8637ff; op2val:0x82742387;
op3val:0xbe003fff; valaddr_reg:x3; val_offset:2274*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2274*0 + 3*5*FLEN/8, x4, x1, x2)

inst_759:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x0637ff and fs2 == 1 and fe2 == 0x04 and fm2 == 0x742387 and fs3 == 1 and fe3 == 0x7c and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c8637ff; op2val:0x82742387;
op3val:0xbe007fff; valaddr_reg:x3; val_offset:2277*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2277*0 + 3*5*FLEN/8, x4, x1, x2)

inst_760:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x0637ff and fs2 == 1 and fe2 == 0x04 and fm2 == 0x742387 and fs3 == 1 and fe3 == 0x7c and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c8637ff; op2val:0x82742387;
op3val:0xbe00ffff; valaddr_reg:x3; val_offset:2280*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2280*0 + 3*5*FLEN/8, x4, x1, x2)

inst_761:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x0637ff and fs2 == 1 and fe2 == 0x04 and fm2 == 0x742387 and fs3 == 1 and fe3 == 0x7c and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c8637ff; op2val:0x82742387;
op3val:0xbe01ffff; valaddr_reg:x3; val_offset:2283*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2283*0 + 3*5*FLEN/8, x4, x1, x2)

inst_762:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x0637ff and fs2 == 1 and fe2 == 0x04 and fm2 == 0x742387 and fs3 == 1 and fe3 == 0x7c and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c8637ff; op2val:0x82742387;
op3val:0xbe03ffff; valaddr_reg:x3; val_offset:2286*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2286*0 + 3*5*FLEN/8, x4, x1, x2)

inst_763:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x0637ff and fs2 == 1 and fe2 == 0x04 and fm2 == 0x742387 and fs3 == 1 and fe3 == 0x7c and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c8637ff; op2val:0x82742387;
op3val:0xbe07ffff; valaddr_reg:x3; val_offset:2289*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2289*0 + 3*5*FLEN/8, x4, x1, x2)

inst_764:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x0637ff and fs2 == 1 and fe2 == 0x04 and fm2 == 0x742387 and fs3 == 1 and fe3 == 0x7c and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c8637ff; op2val:0x82742387;
op3val:0xbe0fffff; valaddr_reg:x3; val_offset:2292*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2292*0 + 3*5*FLEN/8, x4, x1, x2)

inst_765:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x0637ff and fs2 == 1 and fe2 == 0x04 and fm2 == 0x742387 and fs3 == 1 and fe3 == 0x7c and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c8637ff; op2val:0x82742387;
op3val:0xbe1fffff; valaddr_reg:x3; val_offset:2295*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2295*0 + 3*5*FLEN/8, x4, x1, x2)

inst_766:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x0637ff and fs2 == 1 and fe2 == 0x04 and fm2 == 0x742387 and fs3 == 1 and fe3 == 0x7c and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c8637ff; op2val:0x82742387;
op3val:0xbe3fffff; valaddr_reg:x3; val_offset:2298*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2298*0 + 3*5*FLEN/8, x4, x1, x2)

inst_767:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x0637ff and fs2 == 1 and fe2 == 0x04 and fm2 == 0x742387 and fs3 == 1 and fe3 == 0x7c and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c8637ff; op2val:0x82742387;
op3val:0xbe400000; valaddr_reg:x3; val_offset:2301*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2301*0 + 3*5*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2085039407,32,FLEN)
NAN_BOXED(44336243,32,FLEN)
NAN_BOXED(756023295,32,FLEN)
NAN_BOXED(2085039407,32,FLEN)
NAN_BOXED(44336243,32,FLEN)
NAN_BOXED(757071871,32,FLEN)
NAN_BOXED(2085039407,32,FLEN)
NAN_BOXED(44336243,32,FLEN)
NAN_BOXED(759169023,32,FLEN)
NAN_BOXED(2085039407,32,FLEN)
NAN_BOXED(44336243,32,FLEN)
NAN_BOXED(759169024,32,FLEN)
NAN_BOXED(2085039407,32,FLEN)
NAN_BOXED(44336243,32,FLEN)
NAN_BOXED(761266176,32,FLEN)
NAN_BOXED(2085039407,32,FLEN)
NAN_BOXED(44336243,32,FLEN)
NAN_BOXED(762314752,32,FLEN)
NAN_BOXED(2085039407,32,FLEN)
NAN_BOXED(44336243,32,FLEN)
NAN_BOXED(762839040,32,FLEN)
NAN_BOXED(2085039407,32,FLEN)
NAN_BOXED(44336243,32,FLEN)
NAN_BOXED(763101184,32,FLEN)
NAN_BOXED(2085039407,32,FLEN)
NAN_BOXED(44336243,32,FLEN)
NAN_BOXED(763232256,32,FLEN)
NAN_BOXED(2085039407,32,FLEN)
NAN_BOXED(44336243,32,FLEN)
NAN_BOXED(763297792,32,FLEN)
NAN_BOXED(2085039407,32,FLEN)
NAN_BOXED(44336243,32,FLEN)
NAN_BOXED(763330560,32,FLEN)
NAN_BOXED(2085039407,32,FLEN)
NAN_BOXED(44336243,32,FLEN)
NAN_BOXED(763346944,32,FLEN)
NAN_BOXED(2085039407,32,FLEN)
NAN_BOXED(44336243,32,FLEN)
NAN_BOXED(763355136,32,FLEN)
NAN_BOXED(2085039407,32,FLEN)
NAN_BOXED(44336243,32,FLEN)
NAN_BOXED(763359232,32,FLEN)
NAN_BOXED(2085039407,32,FLEN)
NAN_BOXED(44336243,32,FLEN)
NAN_BOXED(763361280,32,FLEN)
NAN_BOXED(2085039407,32,FLEN)
NAN_BOXED(44336243,32,FLEN)
NAN_BOXED(763362304,32,FLEN)
NAN_BOXED(2085039407,32,FLEN)
NAN_BOXED(44336243,32,FLEN)
NAN_BOXED(763362816,32,FLEN)
NAN_BOXED(2085039407,32,FLEN)
NAN_BOXED(44336243,32,FLEN)
NAN_BOXED(763363072,32,FLEN)
NAN_BOXED(2085039407,32,FLEN)
NAN_BOXED(44336243,32,FLEN)
NAN_BOXED(763363200,32,FLEN)
NAN_BOXED(2085039407,32,FLEN)
NAN_BOXED(44336243,32,FLEN)
NAN_BOXED(763363264,32,FLEN)
NAN_BOXED(2085039407,32,FLEN)
NAN_BOXED(44336243,32,FLEN)
NAN_BOXED(763363296,32,FLEN)
NAN_BOXED(2085039407,32,FLEN)
NAN_BOXED(44336243,32,FLEN)
NAN_BOXED(763363312,32,FLEN)
NAN_BOXED(2085039407,32,FLEN)
NAN_BOXED(44336243,32,FLEN)
NAN_BOXED(763363320,32,FLEN)
NAN_BOXED(2085039407,32,FLEN)
NAN_BOXED(44336243,32,FLEN)
NAN_BOXED(763363324,32,FLEN)
NAN_BOXED(2085039407,32,FLEN)
NAN_BOXED(44336243,32,FLEN)
NAN_BOXED(763363326,32,FLEN)
NAN_BOXED(2085039407,32,FLEN)
NAN_BOXED(44336243,32,FLEN)
NAN_BOXED(763363327,32,FLEN)
NAN_BOXED(2085039407,32,FLEN)
NAN_BOXED(44336243,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2085039407,32,FLEN)
NAN_BOXED(44336243,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2085039407,32,FLEN)
NAN_BOXED(44336243,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2085039407,32,FLEN)
NAN_BOXED(44336243,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2085039407,32,FLEN)
NAN_BOXED(44336243,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2085039407,32,FLEN)
NAN_BOXED(44336243,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2085039407,32,FLEN)
NAN_BOXED(44336243,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2085039407,32,FLEN)
NAN_BOXED(44336243,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2085039407,32,FLEN)
NAN_BOXED(44336243,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2085039407,32,FLEN)
NAN_BOXED(44336243,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2085039407,32,FLEN)
NAN_BOXED(44336243,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2085039407,32,FLEN)
NAN_BOXED(44336243,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2085039407,32,FLEN)
NAN_BOXED(44336243,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2085039407,32,FLEN)
NAN_BOXED(44336243,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2085039407,32,FLEN)
NAN_BOXED(44336243,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2085039407,32,FLEN)
NAN_BOXED(44336243,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2088480287,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2088480287,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483651,32,FLEN)
NAN_BOXED(2088480287,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483655,32,FLEN)
NAN_BOXED(2088480287,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149161369,32,FLEN)
NAN_BOXED(2088480287,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149880393,32,FLEN)
NAN_BOXED(2088480287,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2150839091,32,FLEN)
NAN_BOXED(2088480287,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151078765,32,FLEN)
NAN_BOXED(2088480287,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151398331,32,FLEN)
NAN_BOXED(2088480287,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151957572,32,FLEN)
NAN_BOXED(2088480287,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2152516812,32,FLEN)
NAN_BOXED(2088480287,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2153475510,32,FLEN)
NAN_BOXED(2088480287,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154194534,32,FLEN)
NAN_BOXED(2088480287,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154673883,32,FLEN)
NAN_BOXED(2088480287,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872248,32,FLEN)
NAN_BOXED(2088480287,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872252,32,FLEN)
NAN_BOXED(2088480287,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2088480287,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298478592,32,FLEN)
NAN_BOXED(2088480287,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298478593,32,FLEN)
NAN_BOXED(2088480287,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298478595,32,FLEN)
NAN_BOXED(2088480287,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298478599,32,FLEN)
NAN_BOXED(2088480287,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298478607,32,FLEN)
NAN_BOXED(2088480287,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298478623,32,FLEN)
NAN_BOXED(2088480287,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298478655,32,FLEN)
NAN_BOXED(2088480287,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298478719,32,FLEN)
NAN_BOXED(2088480287,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298478847,32,FLEN)
NAN_BOXED(2088480287,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298479103,32,FLEN)
NAN_BOXED(2088480287,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298479615,32,FLEN)
NAN_BOXED(2088480287,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298480639,32,FLEN)
NAN_BOXED(2088480287,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298482687,32,FLEN)
NAN_BOXED(2088480287,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298486783,32,FLEN)
NAN_BOXED(2088480287,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298494975,32,FLEN)
NAN_BOXED(2088480287,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298511359,32,FLEN)
NAN_BOXED(2088480287,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298544127,32,FLEN)
NAN_BOXED(2088480287,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298609663,32,FLEN)
NAN_BOXED(2088480287,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298740735,32,FLEN)
NAN_BOXED(2088480287,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2299002879,32,FLEN)
NAN_BOXED(2088480287,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2299527167,32,FLEN)
NAN_BOXED(2088480287,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2300575743,32,FLEN)
NAN_BOXED(2088480287,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2302672895,32,FLEN)
NAN_BOXED(2088480287,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2302672896,32,FLEN)
NAN_BOXED(2088480287,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2304770048,32,FLEN)
NAN_BOXED(2088480287,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2305818624,32,FLEN)
NAN_BOXED(2088480287,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306342912,32,FLEN)
NAN_BOXED(2088480287,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306605056,32,FLEN)
NAN_BOXED(2088480287,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306736128,32,FLEN)
NAN_BOXED(2088480287,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306801664,32,FLEN)
NAN_BOXED(2088480287,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306834432,32,FLEN)
NAN_BOXED(2088480287,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306850816,32,FLEN)
NAN_BOXED(2088480287,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306859008,32,FLEN)
NAN_BOXED(2088480287,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306863104,32,FLEN)
NAN_BOXED(2088480287,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306865152,32,FLEN)
NAN_BOXED(2088480287,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306866176,32,FLEN)
NAN_BOXED(2088480287,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306866688,32,FLEN)
NAN_BOXED(2088480287,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306866944,32,FLEN)
NAN_BOXED(2088480287,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306867072,32,FLEN)
NAN_BOXED(2088480287,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306867136,32,FLEN)
NAN_BOXED(2088480287,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306867168,32,FLEN)
NAN_BOXED(2088480287,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306867184,32,FLEN)
NAN_BOXED(2088480287,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306867192,32,FLEN)
NAN_BOXED(2088480287,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306867196,32,FLEN)
NAN_BOXED(2088480287,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306867198,32,FLEN)
NAN_BOXED(2088480287,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306867199,32,FLEN)
NAN_BOXED(2089170943,32,FLEN)
NAN_BOXED(2188649351,32,FLEN)
NAN_BOXED(3187671040,32,FLEN)
NAN_BOXED(2089170943,32,FLEN)
NAN_BOXED(2188649351,32,FLEN)
NAN_BOXED(3187671041,32,FLEN)
NAN_BOXED(2089170943,32,FLEN)
NAN_BOXED(2188649351,32,FLEN)
NAN_BOXED(3187671043,32,FLEN)
NAN_BOXED(2089170943,32,FLEN)
NAN_BOXED(2188649351,32,FLEN)
NAN_BOXED(3187671047,32,FLEN)
NAN_BOXED(2089170943,32,FLEN)
NAN_BOXED(2188649351,32,FLEN)
NAN_BOXED(3187671055,32,FLEN)
NAN_BOXED(2089170943,32,FLEN)
NAN_BOXED(2188649351,32,FLEN)
NAN_BOXED(3187671071,32,FLEN)
NAN_BOXED(2089170943,32,FLEN)
NAN_BOXED(2188649351,32,FLEN)
NAN_BOXED(3187671103,32,FLEN)
NAN_BOXED(2089170943,32,FLEN)
NAN_BOXED(2188649351,32,FLEN)
NAN_BOXED(3187671167,32,FLEN)
NAN_BOXED(2089170943,32,FLEN)
NAN_BOXED(2188649351,32,FLEN)
NAN_BOXED(3187671295,32,FLEN)
NAN_BOXED(2089170943,32,FLEN)
NAN_BOXED(2188649351,32,FLEN)
NAN_BOXED(3187671551,32,FLEN)
NAN_BOXED(2089170943,32,FLEN)
NAN_BOXED(2188649351,32,FLEN)
NAN_BOXED(3187672063,32,FLEN)
NAN_BOXED(2089170943,32,FLEN)
NAN_BOXED(2188649351,32,FLEN)
NAN_BOXED(3187673087,32,FLEN)
NAN_BOXED(2089170943,32,FLEN)
NAN_BOXED(2188649351,32,FLEN)
NAN_BOXED(3187675135,32,FLEN)
NAN_BOXED(2089170943,32,FLEN)
NAN_BOXED(2188649351,32,FLEN)
NAN_BOXED(3187679231,32,FLEN)
NAN_BOXED(2089170943,32,FLEN)
NAN_BOXED(2188649351,32,FLEN)
NAN_BOXED(3187687423,32,FLEN)
NAN_BOXED(2089170943,32,FLEN)
NAN_BOXED(2188649351,32,FLEN)
NAN_BOXED(3187703807,32,FLEN)
NAN_BOXED(2089170943,32,FLEN)
NAN_BOXED(2188649351,32,FLEN)
NAN_BOXED(3187736575,32,FLEN)
NAN_BOXED(2089170943,32,FLEN)
NAN_BOXED(2188649351,32,FLEN)
NAN_BOXED(3187802111,32,FLEN)
NAN_BOXED(2089170943,32,FLEN)
NAN_BOXED(2188649351,32,FLEN)
NAN_BOXED(3187933183,32,FLEN)
NAN_BOXED(2089170943,32,FLEN)
NAN_BOXED(2188649351,32,FLEN)
NAN_BOXED(3188195327,32,FLEN)
NAN_BOXED(2089170943,32,FLEN)
NAN_BOXED(2188649351,32,FLEN)
NAN_BOXED(3188719615,32,FLEN)
NAN_BOXED(2089170943,32,FLEN)
NAN_BOXED(2188649351,32,FLEN)
NAN_BOXED(3189768191,32,FLEN)
NAN_BOXED(2089170943,32,FLEN)
NAN_BOXED(2188649351,32,FLEN)
NAN_BOXED(3191865343,32,FLEN)
NAN_BOXED(2089170943,32,FLEN)
NAN_BOXED(2188649351,32,FLEN)
NAN_BOXED(3191865344,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
