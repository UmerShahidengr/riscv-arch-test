
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:17:59 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_768:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x0637ff and fs2 == 1 and fe2 == 0x04 and fm2 == 0x742387 and fs3 == 1 and fe3 == 0x7c and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c8637ff; op2val:0x82742387;
op3val:0xbe600000; valaddr_reg:x3; val_offset:2304*0 + 3*6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2304*0 + 3*6*FLEN/8, x4, x1, x2)

inst_769:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x0637ff and fs2 == 1 and fe2 == 0x04 and fm2 == 0x742387 and fs3 == 1 and fe3 == 0x7c and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c8637ff; op2val:0x82742387;
op3val:0xbe700000; valaddr_reg:x3; val_offset:2307*0 + 3*6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2307*0 + 3*6*FLEN/8, x4, x1, x2)

inst_770:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x0637ff and fs2 == 1 and fe2 == 0x04 and fm2 == 0x742387 and fs3 == 1 and fe3 == 0x7c and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c8637ff; op2val:0x82742387;
op3val:0xbe780000; valaddr_reg:x3; val_offset:2310*0 + 3*6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2310*0 + 3*6*FLEN/8, x4, x1, x2)

inst_771:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x0637ff and fs2 == 1 and fe2 == 0x04 and fm2 == 0x742387 and fs3 == 1 and fe3 == 0x7c and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c8637ff; op2val:0x82742387;
op3val:0xbe7c0000; valaddr_reg:x3; val_offset:2313*0 + 3*6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2313*0 + 3*6*FLEN/8, x4, x1, x2)

inst_772:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x0637ff and fs2 == 1 and fe2 == 0x04 and fm2 == 0x742387 and fs3 == 1 and fe3 == 0x7c and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c8637ff; op2val:0x82742387;
op3val:0xbe7e0000; valaddr_reg:x3; val_offset:2316*0 + 3*6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2316*0 + 3*6*FLEN/8, x4, x1, x2)

inst_773:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x0637ff and fs2 == 1 and fe2 == 0x04 and fm2 == 0x742387 and fs3 == 1 and fe3 == 0x7c and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c8637ff; op2val:0x82742387;
op3val:0xbe7f0000; valaddr_reg:x3; val_offset:2319*0 + 3*6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2319*0 + 3*6*FLEN/8, x4, x1, x2)

inst_774:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x0637ff and fs2 == 1 and fe2 == 0x04 and fm2 == 0x742387 and fs3 == 1 and fe3 == 0x7c and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c8637ff; op2val:0x82742387;
op3val:0xbe7f8000; valaddr_reg:x3; val_offset:2322*0 + 3*6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2322*0 + 3*6*FLEN/8, x4, x1, x2)

inst_775:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x0637ff and fs2 == 1 and fe2 == 0x04 and fm2 == 0x742387 and fs3 == 1 and fe3 == 0x7c and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c8637ff; op2val:0x82742387;
op3val:0xbe7fc000; valaddr_reg:x3; val_offset:2325*0 + 3*6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2325*0 + 3*6*FLEN/8, x4, x1, x2)

inst_776:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x0637ff and fs2 == 1 and fe2 == 0x04 and fm2 == 0x742387 and fs3 == 1 and fe3 == 0x7c and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c8637ff; op2val:0x82742387;
op3val:0xbe7fe000; valaddr_reg:x3; val_offset:2328*0 + 3*6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2328*0 + 3*6*FLEN/8, x4, x1, x2)

inst_777:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x0637ff and fs2 == 1 and fe2 == 0x04 and fm2 == 0x742387 and fs3 == 1 and fe3 == 0x7c and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c8637ff; op2val:0x82742387;
op3val:0xbe7ff000; valaddr_reg:x3; val_offset:2331*0 + 3*6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2331*0 + 3*6*FLEN/8, x4, x1, x2)

inst_778:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x0637ff and fs2 == 1 and fe2 == 0x04 and fm2 == 0x742387 and fs3 == 1 and fe3 == 0x7c and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c8637ff; op2val:0x82742387;
op3val:0xbe7ff800; valaddr_reg:x3; val_offset:2334*0 + 3*6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2334*0 + 3*6*FLEN/8, x4, x1, x2)

inst_779:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x0637ff and fs2 == 1 and fe2 == 0x04 and fm2 == 0x742387 and fs3 == 1 and fe3 == 0x7c and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c8637ff; op2val:0x82742387;
op3val:0xbe7ffc00; valaddr_reg:x3; val_offset:2337*0 + 3*6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2337*0 + 3*6*FLEN/8, x4, x1, x2)

inst_780:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x0637ff and fs2 == 1 and fe2 == 0x04 and fm2 == 0x742387 and fs3 == 1 and fe3 == 0x7c and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c8637ff; op2val:0x82742387;
op3val:0xbe7ffe00; valaddr_reg:x3; val_offset:2340*0 + 3*6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2340*0 + 3*6*FLEN/8, x4, x1, x2)

inst_781:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x0637ff and fs2 == 1 and fe2 == 0x04 and fm2 == 0x742387 and fs3 == 1 and fe3 == 0x7c and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c8637ff; op2val:0x82742387;
op3val:0xbe7fff00; valaddr_reg:x3; val_offset:2343*0 + 3*6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2343*0 + 3*6*FLEN/8, x4, x1, x2)

inst_782:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x0637ff and fs2 == 1 and fe2 == 0x04 and fm2 == 0x742387 and fs3 == 1 and fe3 == 0x7c and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c8637ff; op2val:0x82742387;
op3val:0xbe7fff80; valaddr_reg:x3; val_offset:2346*0 + 3*6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2346*0 + 3*6*FLEN/8, x4, x1, x2)

inst_783:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x0637ff and fs2 == 1 and fe2 == 0x04 and fm2 == 0x742387 and fs3 == 1 and fe3 == 0x7c and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c8637ff; op2val:0x82742387;
op3val:0xbe7fffc0; valaddr_reg:x3; val_offset:2349*0 + 3*6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2349*0 + 3*6*FLEN/8, x4, x1, x2)

inst_784:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x0637ff and fs2 == 1 and fe2 == 0x04 and fm2 == 0x742387 and fs3 == 1 and fe3 == 0x7c and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c8637ff; op2val:0x82742387;
op3val:0xbe7fffe0; valaddr_reg:x3; val_offset:2352*0 + 3*6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2352*0 + 3*6*FLEN/8, x4, x1, x2)

inst_785:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x0637ff and fs2 == 1 and fe2 == 0x04 and fm2 == 0x742387 and fs3 == 1 and fe3 == 0x7c and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c8637ff; op2val:0x82742387;
op3val:0xbe7ffff0; valaddr_reg:x3; val_offset:2355*0 + 3*6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2355*0 + 3*6*FLEN/8, x4, x1, x2)

inst_786:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x0637ff and fs2 == 1 and fe2 == 0x04 and fm2 == 0x742387 and fs3 == 1 and fe3 == 0x7c and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c8637ff; op2val:0x82742387;
op3val:0xbe7ffff8; valaddr_reg:x3; val_offset:2358*0 + 3*6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2358*0 + 3*6*FLEN/8, x4, x1, x2)

inst_787:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x0637ff and fs2 == 1 and fe2 == 0x04 and fm2 == 0x742387 and fs3 == 1 and fe3 == 0x7c and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c8637ff; op2val:0x82742387;
op3val:0xbe7ffffc; valaddr_reg:x3; val_offset:2361*0 + 3*6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2361*0 + 3*6*FLEN/8, x4, x1, x2)

inst_788:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x0637ff and fs2 == 1 and fe2 == 0x04 and fm2 == 0x742387 and fs3 == 1 and fe3 == 0x7c and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c8637ff; op2val:0x82742387;
op3val:0xbe7ffffe; valaddr_reg:x3; val_offset:2364*0 + 3*6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2364*0 + 3*6*FLEN/8, x4, x1, x2)

inst_789:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x0637ff and fs2 == 1 and fe2 == 0x04 and fm2 == 0x742387 and fs3 == 1 and fe3 == 0x7c and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c8637ff; op2val:0x82742387;
op3val:0xbe7fffff; valaddr_reg:x3; val_offset:2367*0 + 3*6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2367*0 + 3*6*FLEN/8, x4, x1, x2)

inst_790:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x0637ff and fs2 == 1 and fe2 == 0x04 and fm2 == 0x742387 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c8637ff; op2val:0x82742387;
op3val:0xbf800001; valaddr_reg:x3; val_offset:2370*0 + 3*6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2370*0 + 3*6*FLEN/8, x4, x1, x2)

inst_791:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x0637ff and fs2 == 1 and fe2 == 0x04 and fm2 == 0x742387 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c8637ff; op2val:0x82742387;
op3val:0xbf800003; valaddr_reg:x3; val_offset:2373*0 + 3*6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2373*0 + 3*6*FLEN/8, x4, x1, x2)

inst_792:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x0637ff and fs2 == 1 and fe2 == 0x04 and fm2 == 0x742387 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c8637ff; op2val:0x82742387;
op3val:0xbf800007; valaddr_reg:x3; val_offset:2376*0 + 3*6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2376*0 + 3*6*FLEN/8, x4, x1, x2)

inst_793:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x0637ff and fs2 == 1 and fe2 == 0x04 and fm2 == 0x742387 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c8637ff; op2val:0x82742387;
op3val:0xbf999999; valaddr_reg:x3; val_offset:2379*0 + 3*6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2379*0 + 3*6*FLEN/8, x4, x1, x2)

inst_794:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x0637ff and fs2 == 1 and fe2 == 0x04 and fm2 == 0x742387 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c8637ff; op2val:0x82742387;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:2382*0 + 3*6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2382*0 + 3*6*FLEN/8, x4, x1, x2)

inst_795:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x0637ff and fs2 == 1 and fe2 == 0x04 and fm2 == 0x742387 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c8637ff; op2val:0x82742387;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:2385*0 + 3*6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2385*0 + 3*6*FLEN/8, x4, x1, x2)

inst_796:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x0637ff and fs2 == 1 and fe2 == 0x04 and fm2 == 0x742387 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c8637ff; op2val:0x82742387;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:2388*0 + 3*6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2388*0 + 3*6*FLEN/8, x4, x1, x2)

inst_797:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x0637ff and fs2 == 1 and fe2 == 0x04 and fm2 == 0x742387 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c8637ff; op2val:0x82742387;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:2391*0 + 3*6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2391*0 + 3*6*FLEN/8, x4, x1, x2)

inst_798:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x0637ff and fs2 == 1 and fe2 == 0x04 and fm2 == 0x742387 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c8637ff; op2val:0x82742387;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:2394*0 + 3*6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2394*0 + 3*6*FLEN/8, x4, x1, x2)

inst_799:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x0637ff and fs2 == 1 and fe2 == 0x04 and fm2 == 0x742387 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c8637ff; op2val:0x82742387;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:2397*0 + 3*6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2397*0 + 3*6*FLEN/8, x4, x1, x2)

inst_800:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x0637ff and fs2 == 1 and fe2 == 0x04 and fm2 == 0x742387 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c8637ff; op2val:0x82742387;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:2400*0 + 3*6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2400*0 + 3*6*FLEN/8, x4, x1, x2)

inst_801:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x0637ff and fs2 == 1 and fe2 == 0x04 and fm2 == 0x742387 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c8637ff; op2val:0x82742387;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:2403*0 + 3*6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2403*0 + 3*6*FLEN/8, x4, x1, x2)

inst_802:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x0637ff and fs2 == 1 and fe2 == 0x04 and fm2 == 0x742387 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c8637ff; op2val:0x82742387;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:2406*0 + 3*6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2406*0 + 3*6*FLEN/8, x4, x1, x2)

inst_803:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x0637ff and fs2 == 1 and fe2 == 0x04 and fm2 == 0x742387 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c8637ff; op2val:0x82742387;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:2409*0 + 3*6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2409*0 + 3*6*FLEN/8, x4, x1, x2)

inst_804:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x0637ff and fs2 == 1 and fe2 == 0x04 and fm2 == 0x742387 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c8637ff; op2val:0x82742387;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:2412*0 + 3*6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2412*0 + 3*6*FLEN/8, x4, x1, x2)

inst_805:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x0637ff and fs2 == 1 and fe2 == 0x04 and fm2 == 0x742387 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c8637ff; op2val:0x82742387;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:2415*0 + 3*6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2415*0 + 3*6*FLEN/8, x4, x1, x2)

inst_806:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x29b0da and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ca9b0da; op2val:0x80000000;
op3val:0x80000001; valaddr_reg:x3; val_offset:2418*0 + 3*6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2418*0 + 3*6*FLEN/8, x4, x1, x2)

inst_807:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x29b0da and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ca9b0da; op2val:0x80000000;
op3val:0x80000003; valaddr_reg:x3; val_offset:2421*0 + 3*6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2421*0 + 3*6*FLEN/8, x4, x1, x2)

inst_808:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x29b0da and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ca9b0da; op2val:0x80000000;
op3val:0x80000007; valaddr_reg:x3; val_offset:2424*0 + 3*6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2424*0 + 3*6*FLEN/8, x4, x1, x2)

inst_809:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x29b0da and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ca9b0da; op2val:0x80000000;
op3val:0x80199999; valaddr_reg:x3; val_offset:2427*0 + 3*6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2427*0 + 3*6*FLEN/8, x4, x1, x2)

inst_810:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x29b0da and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ca9b0da; op2val:0x80000000;
op3val:0x80249249; valaddr_reg:x3; val_offset:2430*0 + 3*6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2430*0 + 3*6*FLEN/8, x4, x1, x2)

inst_811:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x29b0da and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ca9b0da; op2val:0x80000000;
op3val:0x80333333; valaddr_reg:x3; val_offset:2433*0 + 3*6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2433*0 + 3*6*FLEN/8, x4, x1, x2)

inst_812:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x29b0da and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ca9b0da; op2val:0x80000000;
op3val:0x8036db6d; valaddr_reg:x3; val_offset:2436*0 + 3*6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2436*0 + 3*6*FLEN/8, x4, x1, x2)

inst_813:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x29b0da and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ca9b0da; op2val:0x80000000;
op3val:0x803bbbbb; valaddr_reg:x3; val_offset:2439*0 + 3*6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2439*0 + 3*6*FLEN/8, x4, x1, x2)

inst_814:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x29b0da and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ca9b0da; op2val:0x80000000;
op3val:0x80444444; valaddr_reg:x3; val_offset:2442*0 + 3*6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2442*0 + 3*6*FLEN/8, x4, x1, x2)

inst_815:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x29b0da and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ca9b0da; op2val:0x80000000;
op3val:0x804ccccc; valaddr_reg:x3; val_offset:2445*0 + 3*6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2445*0 + 3*6*FLEN/8, x4, x1, x2)

inst_816:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x29b0da and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ca9b0da; op2val:0x80000000;
op3val:0x805b6db6; valaddr_reg:x3; val_offset:2448*0 + 3*6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2448*0 + 3*6*FLEN/8, x4, x1, x2)

inst_817:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x29b0da and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ca9b0da; op2val:0x80000000;
op3val:0x80666666; valaddr_reg:x3; val_offset:2451*0 + 3*6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2451*0 + 3*6*FLEN/8, x4, x1, x2)

inst_818:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x29b0da and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ca9b0da; op2val:0x80000000;
op3val:0x806db6db; valaddr_reg:x3; val_offset:2454*0 + 3*6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2454*0 + 3*6*FLEN/8, x4, x1, x2)

inst_819:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x29b0da and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ca9b0da; op2val:0x80000000;
op3val:0x807ffff8; valaddr_reg:x3; val_offset:2457*0 + 3*6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2457*0 + 3*6*FLEN/8, x4, x1, x2)

inst_820:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x29b0da and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ca9b0da; op2val:0x80000000;
op3val:0x807ffffc; valaddr_reg:x3; val_offset:2460*0 + 3*6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2460*0 + 3*6*FLEN/8, x4, x1, x2)

inst_821:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x29b0da and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ca9b0da; op2val:0x80000000;
op3val:0x807ffffe; valaddr_reg:x3; val_offset:2463*0 + 3*6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2463*0 + 3*6*FLEN/8, x4, x1, x2)

inst_822:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x29b0da and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ca9b0da; op2val:0x80000000;
op3val:0x87800000; valaddr_reg:x3; val_offset:2466*0 + 3*6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2466*0 + 3*6*FLEN/8, x4, x1, x2)

inst_823:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x29b0da and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ca9b0da; op2val:0x80000000;
op3val:0x87800001; valaddr_reg:x3; val_offset:2469*0 + 3*6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2469*0 + 3*6*FLEN/8, x4, x1, x2)

inst_824:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x29b0da and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ca9b0da; op2val:0x80000000;
op3val:0x87800003; valaddr_reg:x3; val_offset:2472*0 + 3*6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2472*0 + 3*6*FLEN/8, x4, x1, x2)

inst_825:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x29b0da and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ca9b0da; op2val:0x80000000;
op3val:0x87800007; valaddr_reg:x3; val_offset:2475*0 + 3*6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2475*0 + 3*6*FLEN/8, x4, x1, x2)

inst_826:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x29b0da and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ca9b0da; op2val:0x80000000;
op3val:0x8780000f; valaddr_reg:x3; val_offset:2478*0 + 3*6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2478*0 + 3*6*FLEN/8, x4, x1, x2)

inst_827:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x29b0da and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ca9b0da; op2val:0x80000000;
op3val:0x8780001f; valaddr_reg:x3; val_offset:2481*0 + 3*6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2481*0 + 3*6*FLEN/8, x4, x1, x2)

inst_828:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x29b0da and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ca9b0da; op2val:0x80000000;
op3val:0x8780003f; valaddr_reg:x3; val_offset:2484*0 + 3*6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2484*0 + 3*6*FLEN/8, x4, x1, x2)

inst_829:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x29b0da and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ca9b0da; op2val:0x80000000;
op3val:0x8780007f; valaddr_reg:x3; val_offset:2487*0 + 3*6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2487*0 + 3*6*FLEN/8, x4, x1, x2)

inst_830:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x29b0da and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ca9b0da; op2val:0x80000000;
op3val:0x878000ff; valaddr_reg:x3; val_offset:2490*0 + 3*6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2490*0 + 3*6*FLEN/8, x4, x1, x2)

inst_831:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x29b0da and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ca9b0da; op2val:0x80000000;
op3val:0x878001ff; valaddr_reg:x3; val_offset:2493*0 + 3*6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2493*0 + 3*6*FLEN/8, x4, x1, x2)

inst_832:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x29b0da and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ca9b0da; op2val:0x80000000;
op3val:0x878003ff; valaddr_reg:x3; val_offset:2496*0 + 3*6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2496*0 + 3*6*FLEN/8, x4, x1, x2)

inst_833:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x29b0da and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ca9b0da; op2val:0x80000000;
op3val:0x878007ff; valaddr_reg:x3; val_offset:2499*0 + 3*6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2499*0 + 3*6*FLEN/8, x4, x1, x2)

inst_834:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x29b0da and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ca9b0da; op2val:0x80000000;
op3val:0x87800fff; valaddr_reg:x3; val_offset:2502*0 + 3*6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2502*0 + 3*6*FLEN/8, x4, x1, x2)

inst_835:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x29b0da and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ca9b0da; op2val:0x80000000;
op3val:0x87801fff; valaddr_reg:x3; val_offset:2505*0 + 3*6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2505*0 + 3*6*FLEN/8, x4, x1, x2)

inst_836:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x29b0da and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ca9b0da; op2val:0x80000000;
op3val:0x87803fff; valaddr_reg:x3; val_offset:2508*0 + 3*6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2508*0 + 3*6*FLEN/8, x4, x1, x2)

inst_837:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x29b0da and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ca9b0da; op2val:0x80000000;
op3val:0x87807fff; valaddr_reg:x3; val_offset:2511*0 + 3*6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2511*0 + 3*6*FLEN/8, x4, x1, x2)

inst_838:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x29b0da and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ca9b0da; op2val:0x80000000;
op3val:0x8780ffff; valaddr_reg:x3; val_offset:2514*0 + 3*6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2514*0 + 3*6*FLEN/8, x4, x1, x2)

inst_839:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x29b0da and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ca9b0da; op2val:0x80000000;
op3val:0x8781ffff; valaddr_reg:x3; val_offset:2517*0 + 3*6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2517*0 + 3*6*FLEN/8, x4, x1, x2)

inst_840:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x29b0da and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ca9b0da; op2val:0x80000000;
op3val:0x8783ffff; valaddr_reg:x3; val_offset:2520*0 + 3*6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2520*0 + 3*6*FLEN/8, x4, x1, x2)

inst_841:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x29b0da and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ca9b0da; op2val:0x80000000;
op3val:0x8787ffff; valaddr_reg:x3; val_offset:2523*0 + 3*6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2523*0 + 3*6*FLEN/8, x4, x1, x2)

inst_842:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x29b0da and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ca9b0da; op2val:0x80000000;
op3val:0x878fffff; valaddr_reg:x3; val_offset:2526*0 + 3*6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2526*0 + 3*6*FLEN/8, x4, x1, x2)

inst_843:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x29b0da and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ca9b0da; op2val:0x80000000;
op3val:0x879fffff; valaddr_reg:x3; val_offset:2529*0 + 3*6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2529*0 + 3*6*FLEN/8, x4, x1, x2)

inst_844:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x29b0da and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ca9b0da; op2val:0x80000000;
op3val:0x87bfffff; valaddr_reg:x3; val_offset:2532*0 + 3*6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2532*0 + 3*6*FLEN/8, x4, x1, x2)

inst_845:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x29b0da and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ca9b0da; op2val:0x80000000;
op3val:0x87c00000; valaddr_reg:x3; val_offset:2535*0 + 3*6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2535*0 + 3*6*FLEN/8, x4, x1, x2)

inst_846:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x29b0da and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ca9b0da; op2val:0x80000000;
op3val:0x87e00000; valaddr_reg:x3; val_offset:2538*0 + 3*6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2538*0 + 3*6*FLEN/8, x4, x1, x2)

inst_847:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x29b0da and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ca9b0da; op2val:0x80000000;
op3val:0x87f00000; valaddr_reg:x3; val_offset:2541*0 + 3*6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2541*0 + 3*6*FLEN/8, x4, x1, x2)

inst_848:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x29b0da and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ca9b0da; op2val:0x80000000;
op3val:0x87f80000; valaddr_reg:x3; val_offset:2544*0 + 3*6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2544*0 + 3*6*FLEN/8, x4, x1, x2)

inst_849:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x29b0da and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ca9b0da; op2val:0x80000000;
op3val:0x87fc0000; valaddr_reg:x3; val_offset:2547*0 + 3*6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2547*0 + 3*6*FLEN/8, x4, x1, x2)

inst_850:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x29b0da and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ca9b0da; op2val:0x80000000;
op3val:0x87fe0000; valaddr_reg:x3; val_offset:2550*0 + 3*6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2550*0 + 3*6*FLEN/8, x4, x1, x2)

inst_851:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x29b0da and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ca9b0da; op2val:0x80000000;
op3val:0x87ff0000; valaddr_reg:x3; val_offset:2553*0 + 3*6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2553*0 + 3*6*FLEN/8, x4, x1, x2)

inst_852:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x29b0da and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ca9b0da; op2val:0x80000000;
op3val:0x87ff8000; valaddr_reg:x3; val_offset:2556*0 + 3*6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2556*0 + 3*6*FLEN/8, x4, x1, x2)

inst_853:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x29b0da and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ca9b0da; op2val:0x80000000;
op3val:0x87ffc000; valaddr_reg:x3; val_offset:2559*0 + 3*6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2559*0 + 3*6*FLEN/8, x4, x1, x2)

inst_854:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x29b0da and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ca9b0da; op2val:0x80000000;
op3val:0x87ffe000; valaddr_reg:x3; val_offset:2562*0 + 3*6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2562*0 + 3*6*FLEN/8, x4, x1, x2)

inst_855:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x29b0da and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ca9b0da; op2val:0x80000000;
op3val:0x87fff000; valaddr_reg:x3; val_offset:2565*0 + 3*6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2565*0 + 3*6*FLEN/8, x4, x1, x2)

inst_856:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x29b0da and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ca9b0da; op2val:0x80000000;
op3val:0x87fff800; valaddr_reg:x3; val_offset:2568*0 + 3*6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2568*0 + 3*6*FLEN/8, x4, x1, x2)

inst_857:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x29b0da and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ca9b0da; op2val:0x80000000;
op3val:0x87fffc00; valaddr_reg:x3; val_offset:2571*0 + 3*6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2571*0 + 3*6*FLEN/8, x4, x1, x2)

inst_858:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x29b0da and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ca9b0da; op2val:0x80000000;
op3val:0x87fffe00; valaddr_reg:x3; val_offset:2574*0 + 3*6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2574*0 + 3*6*FLEN/8, x4, x1, x2)

inst_859:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x29b0da and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ca9b0da; op2val:0x80000000;
op3val:0x87ffff00; valaddr_reg:x3; val_offset:2577*0 + 3*6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2577*0 + 3*6*FLEN/8, x4, x1, x2)

inst_860:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x29b0da and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ca9b0da; op2val:0x80000000;
op3val:0x87ffff80; valaddr_reg:x3; val_offset:2580*0 + 3*6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2580*0 + 3*6*FLEN/8, x4, x1, x2)

inst_861:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x29b0da and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ca9b0da; op2val:0x80000000;
op3val:0x87ffffc0; valaddr_reg:x3; val_offset:2583*0 + 3*6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2583*0 + 3*6*FLEN/8, x4, x1, x2)

inst_862:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x29b0da and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ca9b0da; op2val:0x80000000;
op3val:0x87ffffe0; valaddr_reg:x3; val_offset:2586*0 + 3*6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2586*0 + 3*6*FLEN/8, x4, x1, x2)

inst_863:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x29b0da and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ca9b0da; op2val:0x80000000;
op3val:0x87fffff0; valaddr_reg:x3; val_offset:2589*0 + 3*6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2589*0 + 3*6*FLEN/8, x4, x1, x2)

inst_864:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x29b0da and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ca9b0da; op2val:0x80000000;
op3val:0x87fffff8; valaddr_reg:x3; val_offset:2592*0 + 3*6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2592*0 + 3*6*FLEN/8, x4, x1, x2)

inst_865:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x29b0da and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ca9b0da; op2val:0x80000000;
op3val:0x87fffffc; valaddr_reg:x3; val_offset:2595*0 + 3*6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2595*0 + 3*6*FLEN/8, x4, x1, x2)

inst_866:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x29b0da and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ca9b0da; op2val:0x80000000;
op3val:0x87fffffe; valaddr_reg:x3; val_offset:2598*0 + 3*6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2598*0 + 3*6*FLEN/8, x4, x1, x2)

inst_867:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x29b0da and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ca9b0da; op2val:0x80000000;
op3val:0x87ffffff; valaddr_reg:x3; val_offset:2601*0 + 3*6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2601*0 + 3*6*FLEN/8, x4, x1, x2)

inst_868:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x2ba3e8 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x3ee930 and fs3 == 0 and fe3 == 0xdb and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7caba3e8; op2val:0x423ee930;
op3val:0x6d800000; valaddr_reg:x3; val_offset:2604*0 + 3*6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2604*0 + 3*6*FLEN/8, x4, x1, x2)

inst_869:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x2ba3e8 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x3ee930 and fs3 == 0 and fe3 == 0xdb and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7caba3e8; op2val:0x423ee930;
op3val:0x6d800001; valaddr_reg:x3; val_offset:2607*0 + 3*6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2607*0 + 3*6*FLEN/8, x4, x1, x2)

inst_870:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x2ba3e8 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x3ee930 and fs3 == 0 and fe3 == 0xdb and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7caba3e8; op2val:0x423ee930;
op3val:0x6d800003; valaddr_reg:x3; val_offset:2610*0 + 3*6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2610*0 + 3*6*FLEN/8, x4, x1, x2)

inst_871:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x2ba3e8 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x3ee930 and fs3 == 0 and fe3 == 0xdb and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7caba3e8; op2val:0x423ee930;
op3val:0x6d800007; valaddr_reg:x3; val_offset:2613*0 + 3*6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2613*0 + 3*6*FLEN/8, x4, x1, x2)

inst_872:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x2ba3e8 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x3ee930 and fs3 == 0 and fe3 == 0xdb and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7caba3e8; op2val:0x423ee930;
op3val:0x6d80000f; valaddr_reg:x3; val_offset:2616*0 + 3*6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2616*0 + 3*6*FLEN/8, x4, x1, x2)

inst_873:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x2ba3e8 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x3ee930 and fs3 == 0 and fe3 == 0xdb and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7caba3e8; op2val:0x423ee930;
op3val:0x6d80001f; valaddr_reg:x3; val_offset:2619*0 + 3*6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2619*0 + 3*6*FLEN/8, x4, x1, x2)

inst_874:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x2ba3e8 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x3ee930 and fs3 == 0 and fe3 == 0xdb and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7caba3e8; op2val:0x423ee930;
op3val:0x6d80003f; valaddr_reg:x3; val_offset:2622*0 + 3*6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2622*0 + 3*6*FLEN/8, x4, x1, x2)

inst_875:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x2ba3e8 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x3ee930 and fs3 == 0 and fe3 == 0xdb and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7caba3e8; op2val:0x423ee930;
op3val:0x6d80007f; valaddr_reg:x3; val_offset:2625*0 + 3*6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2625*0 + 3*6*FLEN/8, x4, x1, x2)

inst_876:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x2ba3e8 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x3ee930 and fs3 == 0 and fe3 == 0xdb and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7caba3e8; op2val:0x423ee930;
op3val:0x6d8000ff; valaddr_reg:x3; val_offset:2628*0 + 3*6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2628*0 + 3*6*FLEN/8, x4, x1, x2)

inst_877:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x2ba3e8 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x3ee930 and fs3 == 0 and fe3 == 0xdb and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7caba3e8; op2val:0x423ee930;
op3val:0x6d8001ff; valaddr_reg:x3; val_offset:2631*0 + 3*6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2631*0 + 3*6*FLEN/8, x4, x1, x2)

inst_878:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x2ba3e8 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x3ee930 and fs3 == 0 and fe3 == 0xdb and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7caba3e8; op2val:0x423ee930;
op3val:0x6d8003ff; valaddr_reg:x3; val_offset:2634*0 + 3*6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2634*0 + 3*6*FLEN/8, x4, x1, x2)

inst_879:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x2ba3e8 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x3ee930 and fs3 == 0 and fe3 == 0xdb and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7caba3e8; op2val:0x423ee930;
op3val:0x6d8007ff; valaddr_reg:x3; val_offset:2637*0 + 3*6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2637*0 + 3*6*FLEN/8, x4, x1, x2)

inst_880:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x2ba3e8 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x3ee930 and fs3 == 0 and fe3 == 0xdb and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7caba3e8; op2val:0x423ee930;
op3val:0x6d800fff; valaddr_reg:x3; val_offset:2640*0 + 3*6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2640*0 + 3*6*FLEN/8, x4, x1, x2)

inst_881:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x2ba3e8 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x3ee930 and fs3 == 0 and fe3 == 0xdb and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7caba3e8; op2val:0x423ee930;
op3val:0x6d801fff; valaddr_reg:x3; val_offset:2643*0 + 3*6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2643*0 + 3*6*FLEN/8, x4, x1, x2)

inst_882:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x2ba3e8 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x3ee930 and fs3 == 0 and fe3 == 0xdb and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7caba3e8; op2val:0x423ee930;
op3val:0x6d803fff; valaddr_reg:x3; val_offset:2646*0 + 3*6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2646*0 + 3*6*FLEN/8, x4, x1, x2)

inst_883:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x2ba3e8 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x3ee930 and fs3 == 0 and fe3 == 0xdb and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7caba3e8; op2val:0x423ee930;
op3val:0x6d807fff; valaddr_reg:x3; val_offset:2649*0 + 3*6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2649*0 + 3*6*FLEN/8, x4, x1, x2)

inst_884:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x2ba3e8 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x3ee930 and fs3 == 0 and fe3 == 0xdb and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7caba3e8; op2val:0x423ee930;
op3val:0x6d80ffff; valaddr_reg:x3; val_offset:2652*0 + 3*6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2652*0 + 3*6*FLEN/8, x4, x1, x2)

inst_885:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x2ba3e8 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x3ee930 and fs3 == 0 and fe3 == 0xdb and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7caba3e8; op2val:0x423ee930;
op3val:0x6d81ffff; valaddr_reg:x3; val_offset:2655*0 + 3*6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2655*0 + 3*6*FLEN/8, x4, x1, x2)

inst_886:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x2ba3e8 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x3ee930 and fs3 == 0 and fe3 == 0xdb and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7caba3e8; op2val:0x423ee930;
op3val:0x6d83ffff; valaddr_reg:x3; val_offset:2658*0 + 3*6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2658*0 + 3*6*FLEN/8, x4, x1, x2)

inst_887:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x2ba3e8 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x3ee930 and fs3 == 0 and fe3 == 0xdb and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7caba3e8; op2val:0x423ee930;
op3val:0x6d87ffff; valaddr_reg:x3; val_offset:2661*0 + 3*6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2661*0 + 3*6*FLEN/8, x4, x1, x2)

inst_888:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x2ba3e8 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x3ee930 and fs3 == 0 and fe3 == 0xdb and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7caba3e8; op2val:0x423ee930;
op3val:0x6d8fffff; valaddr_reg:x3; val_offset:2664*0 + 3*6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2664*0 + 3*6*FLEN/8, x4, x1, x2)

inst_889:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x2ba3e8 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x3ee930 and fs3 == 0 and fe3 == 0xdb and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7caba3e8; op2val:0x423ee930;
op3val:0x6d9fffff; valaddr_reg:x3; val_offset:2667*0 + 3*6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2667*0 + 3*6*FLEN/8, x4, x1, x2)

inst_890:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x2ba3e8 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x3ee930 and fs3 == 0 and fe3 == 0xdb and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7caba3e8; op2val:0x423ee930;
op3val:0x6dbfffff; valaddr_reg:x3; val_offset:2670*0 + 3*6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2670*0 + 3*6*FLEN/8, x4, x1, x2)

inst_891:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x2ba3e8 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x3ee930 and fs3 == 0 and fe3 == 0xdb and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7caba3e8; op2val:0x423ee930;
op3val:0x6dc00000; valaddr_reg:x3; val_offset:2673*0 + 3*6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2673*0 + 3*6*FLEN/8, x4, x1, x2)

inst_892:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x2ba3e8 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x3ee930 and fs3 == 0 and fe3 == 0xdb and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7caba3e8; op2val:0x423ee930;
op3val:0x6de00000; valaddr_reg:x3; val_offset:2676*0 + 3*6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2676*0 + 3*6*FLEN/8, x4, x1, x2)

inst_893:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x2ba3e8 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x3ee930 and fs3 == 0 and fe3 == 0xdb and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7caba3e8; op2val:0x423ee930;
op3val:0x6df00000; valaddr_reg:x3; val_offset:2679*0 + 3*6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2679*0 + 3*6*FLEN/8, x4, x1, x2)

inst_894:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x2ba3e8 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x3ee930 and fs3 == 0 and fe3 == 0xdb and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7caba3e8; op2val:0x423ee930;
op3val:0x6df80000; valaddr_reg:x3; val_offset:2682*0 + 3*6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2682*0 + 3*6*FLEN/8, x4, x1, x2)

inst_895:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x2ba3e8 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x3ee930 and fs3 == 0 and fe3 == 0xdb and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7caba3e8; op2val:0x423ee930;
op3val:0x6dfc0000; valaddr_reg:x3; val_offset:2685*0 + 3*6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2685*0 + 3*6*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2089170943,32,FLEN)
NAN_BOXED(2188649351,32,FLEN)
NAN_BOXED(3193962496,32,FLEN)
NAN_BOXED(2089170943,32,FLEN)
NAN_BOXED(2188649351,32,FLEN)
NAN_BOXED(3195011072,32,FLEN)
NAN_BOXED(2089170943,32,FLEN)
NAN_BOXED(2188649351,32,FLEN)
NAN_BOXED(3195535360,32,FLEN)
NAN_BOXED(2089170943,32,FLEN)
NAN_BOXED(2188649351,32,FLEN)
NAN_BOXED(3195797504,32,FLEN)
NAN_BOXED(2089170943,32,FLEN)
NAN_BOXED(2188649351,32,FLEN)
NAN_BOXED(3195928576,32,FLEN)
NAN_BOXED(2089170943,32,FLEN)
NAN_BOXED(2188649351,32,FLEN)
NAN_BOXED(3195994112,32,FLEN)
NAN_BOXED(2089170943,32,FLEN)
NAN_BOXED(2188649351,32,FLEN)
NAN_BOXED(3196026880,32,FLEN)
NAN_BOXED(2089170943,32,FLEN)
NAN_BOXED(2188649351,32,FLEN)
NAN_BOXED(3196043264,32,FLEN)
NAN_BOXED(2089170943,32,FLEN)
NAN_BOXED(2188649351,32,FLEN)
NAN_BOXED(3196051456,32,FLEN)
NAN_BOXED(2089170943,32,FLEN)
NAN_BOXED(2188649351,32,FLEN)
NAN_BOXED(3196055552,32,FLEN)
NAN_BOXED(2089170943,32,FLEN)
NAN_BOXED(2188649351,32,FLEN)
NAN_BOXED(3196057600,32,FLEN)
NAN_BOXED(2089170943,32,FLEN)
NAN_BOXED(2188649351,32,FLEN)
NAN_BOXED(3196058624,32,FLEN)
NAN_BOXED(2089170943,32,FLEN)
NAN_BOXED(2188649351,32,FLEN)
NAN_BOXED(3196059136,32,FLEN)
NAN_BOXED(2089170943,32,FLEN)
NAN_BOXED(2188649351,32,FLEN)
NAN_BOXED(3196059392,32,FLEN)
NAN_BOXED(2089170943,32,FLEN)
NAN_BOXED(2188649351,32,FLEN)
NAN_BOXED(3196059520,32,FLEN)
NAN_BOXED(2089170943,32,FLEN)
NAN_BOXED(2188649351,32,FLEN)
NAN_BOXED(3196059584,32,FLEN)
NAN_BOXED(2089170943,32,FLEN)
NAN_BOXED(2188649351,32,FLEN)
NAN_BOXED(3196059616,32,FLEN)
NAN_BOXED(2089170943,32,FLEN)
NAN_BOXED(2188649351,32,FLEN)
NAN_BOXED(3196059632,32,FLEN)
NAN_BOXED(2089170943,32,FLEN)
NAN_BOXED(2188649351,32,FLEN)
NAN_BOXED(3196059640,32,FLEN)
NAN_BOXED(2089170943,32,FLEN)
NAN_BOXED(2188649351,32,FLEN)
NAN_BOXED(3196059644,32,FLEN)
NAN_BOXED(2089170943,32,FLEN)
NAN_BOXED(2188649351,32,FLEN)
NAN_BOXED(3196059646,32,FLEN)
NAN_BOXED(2089170943,32,FLEN)
NAN_BOXED(2188649351,32,FLEN)
NAN_BOXED(3196059647,32,FLEN)
NAN_BOXED(2089170943,32,FLEN)
NAN_BOXED(2188649351,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2089170943,32,FLEN)
NAN_BOXED(2188649351,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2089170943,32,FLEN)
NAN_BOXED(2188649351,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
NAN_BOXED(2089170943,32,FLEN)
NAN_BOXED(2188649351,32,FLEN)
NAN_BOXED(3214514585,32,FLEN)
NAN_BOXED(2089170943,32,FLEN)
NAN_BOXED(2188649351,32,FLEN)
NAN_BOXED(3215233609,32,FLEN)
NAN_BOXED(2089170943,32,FLEN)
NAN_BOXED(2188649351,32,FLEN)
NAN_BOXED(3216192307,32,FLEN)
NAN_BOXED(2089170943,32,FLEN)
NAN_BOXED(2188649351,32,FLEN)
NAN_BOXED(3216431981,32,FLEN)
NAN_BOXED(2089170943,32,FLEN)
NAN_BOXED(2188649351,32,FLEN)
NAN_BOXED(3216751547,32,FLEN)
NAN_BOXED(2089170943,32,FLEN)
NAN_BOXED(2188649351,32,FLEN)
NAN_BOXED(3217310788,32,FLEN)
NAN_BOXED(2089170943,32,FLEN)
NAN_BOXED(2188649351,32,FLEN)
NAN_BOXED(3217870028,32,FLEN)
NAN_BOXED(2089170943,32,FLEN)
NAN_BOXED(2188649351,32,FLEN)
NAN_BOXED(3218828726,32,FLEN)
NAN_BOXED(2089170943,32,FLEN)
NAN_BOXED(2188649351,32,FLEN)
NAN_BOXED(3219547750,32,FLEN)
NAN_BOXED(2089170943,32,FLEN)
NAN_BOXED(2188649351,32,FLEN)
NAN_BOXED(3220027099,32,FLEN)
NAN_BOXED(2089170943,32,FLEN)
NAN_BOXED(2188649351,32,FLEN)
NAN_BOXED(3221225464,32,FLEN)
NAN_BOXED(2089170943,32,FLEN)
NAN_BOXED(2188649351,32,FLEN)
NAN_BOXED(3221225468,32,FLEN)
NAN_BOXED(2089170943,32,FLEN)
NAN_BOXED(2188649351,32,FLEN)
NAN_BOXED(3221225470,32,FLEN)
NAN_BOXED(2091495642,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2091495642,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483651,32,FLEN)
NAN_BOXED(2091495642,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483655,32,FLEN)
NAN_BOXED(2091495642,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149161369,32,FLEN)
NAN_BOXED(2091495642,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149880393,32,FLEN)
NAN_BOXED(2091495642,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2150839091,32,FLEN)
NAN_BOXED(2091495642,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151078765,32,FLEN)
NAN_BOXED(2091495642,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151398331,32,FLEN)
NAN_BOXED(2091495642,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151957572,32,FLEN)
NAN_BOXED(2091495642,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2152516812,32,FLEN)
NAN_BOXED(2091495642,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2153475510,32,FLEN)
NAN_BOXED(2091495642,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154194534,32,FLEN)
NAN_BOXED(2091495642,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154673883,32,FLEN)
NAN_BOXED(2091495642,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872248,32,FLEN)
NAN_BOXED(2091495642,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872252,32,FLEN)
NAN_BOXED(2091495642,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2091495642,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2273312768,32,FLEN)
NAN_BOXED(2091495642,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2273312769,32,FLEN)
NAN_BOXED(2091495642,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2273312771,32,FLEN)
NAN_BOXED(2091495642,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2273312775,32,FLEN)
NAN_BOXED(2091495642,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2273312783,32,FLEN)
NAN_BOXED(2091495642,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2273312799,32,FLEN)
NAN_BOXED(2091495642,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2273312831,32,FLEN)
NAN_BOXED(2091495642,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2273312895,32,FLEN)
NAN_BOXED(2091495642,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2273313023,32,FLEN)
NAN_BOXED(2091495642,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2273313279,32,FLEN)
NAN_BOXED(2091495642,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2273313791,32,FLEN)
NAN_BOXED(2091495642,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2273314815,32,FLEN)
NAN_BOXED(2091495642,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2273316863,32,FLEN)
NAN_BOXED(2091495642,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2273320959,32,FLEN)
NAN_BOXED(2091495642,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2273329151,32,FLEN)
NAN_BOXED(2091495642,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2273345535,32,FLEN)
NAN_BOXED(2091495642,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2273378303,32,FLEN)
NAN_BOXED(2091495642,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2273443839,32,FLEN)
NAN_BOXED(2091495642,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2273574911,32,FLEN)
NAN_BOXED(2091495642,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2273837055,32,FLEN)
NAN_BOXED(2091495642,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2274361343,32,FLEN)
NAN_BOXED(2091495642,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2275409919,32,FLEN)
NAN_BOXED(2091495642,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2277507071,32,FLEN)
NAN_BOXED(2091495642,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2277507072,32,FLEN)
NAN_BOXED(2091495642,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2279604224,32,FLEN)
NAN_BOXED(2091495642,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2280652800,32,FLEN)
NAN_BOXED(2091495642,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281177088,32,FLEN)
NAN_BOXED(2091495642,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281439232,32,FLEN)
NAN_BOXED(2091495642,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281570304,32,FLEN)
NAN_BOXED(2091495642,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281635840,32,FLEN)
NAN_BOXED(2091495642,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281668608,32,FLEN)
NAN_BOXED(2091495642,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281684992,32,FLEN)
NAN_BOXED(2091495642,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281693184,32,FLEN)
NAN_BOXED(2091495642,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281697280,32,FLEN)
NAN_BOXED(2091495642,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281699328,32,FLEN)
NAN_BOXED(2091495642,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281700352,32,FLEN)
NAN_BOXED(2091495642,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281700864,32,FLEN)
NAN_BOXED(2091495642,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701120,32,FLEN)
NAN_BOXED(2091495642,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701248,32,FLEN)
NAN_BOXED(2091495642,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701312,32,FLEN)
NAN_BOXED(2091495642,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701344,32,FLEN)
NAN_BOXED(2091495642,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701360,32,FLEN)
NAN_BOXED(2091495642,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701368,32,FLEN)
NAN_BOXED(2091495642,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701372,32,FLEN)
NAN_BOXED(2091495642,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701374,32,FLEN)
NAN_BOXED(2091495642,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701375,32,FLEN)
NAN_BOXED(2091623400,32,FLEN)
NAN_BOXED(1111419184,32,FLEN)
NAN_BOXED(1837105152,32,FLEN)
NAN_BOXED(2091623400,32,FLEN)
NAN_BOXED(1111419184,32,FLEN)
NAN_BOXED(1837105153,32,FLEN)
NAN_BOXED(2091623400,32,FLEN)
NAN_BOXED(1111419184,32,FLEN)
NAN_BOXED(1837105155,32,FLEN)
NAN_BOXED(2091623400,32,FLEN)
NAN_BOXED(1111419184,32,FLEN)
NAN_BOXED(1837105159,32,FLEN)
NAN_BOXED(2091623400,32,FLEN)
NAN_BOXED(1111419184,32,FLEN)
NAN_BOXED(1837105167,32,FLEN)
NAN_BOXED(2091623400,32,FLEN)
NAN_BOXED(1111419184,32,FLEN)
NAN_BOXED(1837105183,32,FLEN)
NAN_BOXED(2091623400,32,FLEN)
NAN_BOXED(1111419184,32,FLEN)
NAN_BOXED(1837105215,32,FLEN)
NAN_BOXED(2091623400,32,FLEN)
NAN_BOXED(1111419184,32,FLEN)
NAN_BOXED(1837105279,32,FLEN)
NAN_BOXED(2091623400,32,FLEN)
NAN_BOXED(1111419184,32,FLEN)
NAN_BOXED(1837105407,32,FLEN)
NAN_BOXED(2091623400,32,FLEN)
NAN_BOXED(1111419184,32,FLEN)
NAN_BOXED(1837105663,32,FLEN)
NAN_BOXED(2091623400,32,FLEN)
NAN_BOXED(1111419184,32,FLEN)
NAN_BOXED(1837106175,32,FLEN)
NAN_BOXED(2091623400,32,FLEN)
NAN_BOXED(1111419184,32,FLEN)
NAN_BOXED(1837107199,32,FLEN)
NAN_BOXED(2091623400,32,FLEN)
NAN_BOXED(1111419184,32,FLEN)
NAN_BOXED(1837109247,32,FLEN)
NAN_BOXED(2091623400,32,FLEN)
NAN_BOXED(1111419184,32,FLEN)
NAN_BOXED(1837113343,32,FLEN)
NAN_BOXED(2091623400,32,FLEN)
NAN_BOXED(1111419184,32,FLEN)
NAN_BOXED(1837121535,32,FLEN)
NAN_BOXED(2091623400,32,FLEN)
NAN_BOXED(1111419184,32,FLEN)
NAN_BOXED(1837137919,32,FLEN)
NAN_BOXED(2091623400,32,FLEN)
NAN_BOXED(1111419184,32,FLEN)
NAN_BOXED(1837170687,32,FLEN)
NAN_BOXED(2091623400,32,FLEN)
NAN_BOXED(1111419184,32,FLEN)
NAN_BOXED(1837236223,32,FLEN)
NAN_BOXED(2091623400,32,FLEN)
NAN_BOXED(1111419184,32,FLEN)
NAN_BOXED(1837367295,32,FLEN)
NAN_BOXED(2091623400,32,FLEN)
NAN_BOXED(1111419184,32,FLEN)
NAN_BOXED(1837629439,32,FLEN)
NAN_BOXED(2091623400,32,FLEN)
NAN_BOXED(1111419184,32,FLEN)
NAN_BOXED(1838153727,32,FLEN)
NAN_BOXED(2091623400,32,FLEN)
NAN_BOXED(1111419184,32,FLEN)
NAN_BOXED(1839202303,32,FLEN)
NAN_BOXED(2091623400,32,FLEN)
NAN_BOXED(1111419184,32,FLEN)
NAN_BOXED(1841299455,32,FLEN)
NAN_BOXED(2091623400,32,FLEN)
NAN_BOXED(1111419184,32,FLEN)
NAN_BOXED(1841299456,32,FLEN)
NAN_BOXED(2091623400,32,FLEN)
NAN_BOXED(1111419184,32,FLEN)
NAN_BOXED(1843396608,32,FLEN)
NAN_BOXED(2091623400,32,FLEN)
NAN_BOXED(1111419184,32,FLEN)
NAN_BOXED(1844445184,32,FLEN)
NAN_BOXED(2091623400,32,FLEN)
NAN_BOXED(1111419184,32,FLEN)
NAN_BOXED(1844969472,32,FLEN)
NAN_BOXED(2091623400,32,FLEN)
NAN_BOXED(1111419184,32,FLEN)
NAN_BOXED(1845231616,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
