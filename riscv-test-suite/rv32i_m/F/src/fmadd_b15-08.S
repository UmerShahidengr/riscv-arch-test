
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:17:59 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_896:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x2ba3e8 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x3ee930 and fs3 == 0 and fe3 == 0xdb and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7caba3e8; op2val:0x423ee930;
op3val:0x6dfe0000; valaddr_reg:x3; val_offset:2688*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2688*0 + 3*7*FLEN/8, x4, x1, x2)

inst_897:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x2ba3e8 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x3ee930 and fs3 == 0 and fe3 == 0xdb and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7caba3e8; op2val:0x423ee930;
op3val:0x6dff0000; valaddr_reg:x3; val_offset:2691*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2691*0 + 3*7*FLEN/8, x4, x1, x2)

inst_898:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x2ba3e8 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x3ee930 and fs3 == 0 and fe3 == 0xdb and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7caba3e8; op2val:0x423ee930;
op3val:0x6dff8000; valaddr_reg:x3; val_offset:2694*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2694*0 + 3*7*FLEN/8, x4, x1, x2)

inst_899:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x2ba3e8 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x3ee930 and fs3 == 0 and fe3 == 0xdb and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7caba3e8; op2val:0x423ee930;
op3val:0x6dffc000; valaddr_reg:x3; val_offset:2697*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2697*0 + 3*7*FLEN/8, x4, x1, x2)

inst_900:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x2ba3e8 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x3ee930 and fs3 == 0 and fe3 == 0xdb and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7caba3e8; op2val:0x423ee930;
op3val:0x6dffe000; valaddr_reg:x3; val_offset:2700*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2700*0 + 3*7*FLEN/8, x4, x1, x2)

inst_901:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x2ba3e8 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x3ee930 and fs3 == 0 and fe3 == 0xdb and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7caba3e8; op2val:0x423ee930;
op3val:0x6dfff000; valaddr_reg:x3; val_offset:2703*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2703*0 + 3*7*FLEN/8, x4, x1, x2)

inst_902:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x2ba3e8 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x3ee930 and fs3 == 0 and fe3 == 0xdb and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7caba3e8; op2val:0x423ee930;
op3val:0x6dfff800; valaddr_reg:x3; val_offset:2706*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2706*0 + 3*7*FLEN/8, x4, x1, x2)

inst_903:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x2ba3e8 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x3ee930 and fs3 == 0 and fe3 == 0xdb and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7caba3e8; op2val:0x423ee930;
op3val:0x6dfffc00; valaddr_reg:x3; val_offset:2709*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2709*0 + 3*7*FLEN/8, x4, x1, x2)

inst_904:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x2ba3e8 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x3ee930 and fs3 == 0 and fe3 == 0xdb and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7caba3e8; op2val:0x423ee930;
op3val:0x6dfffe00; valaddr_reg:x3; val_offset:2712*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2712*0 + 3*7*FLEN/8, x4, x1, x2)

inst_905:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x2ba3e8 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x3ee930 and fs3 == 0 and fe3 == 0xdb and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7caba3e8; op2val:0x423ee930;
op3val:0x6dffff00; valaddr_reg:x3; val_offset:2715*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2715*0 + 3*7*FLEN/8, x4, x1, x2)

inst_906:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x2ba3e8 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x3ee930 and fs3 == 0 and fe3 == 0xdb and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7caba3e8; op2val:0x423ee930;
op3val:0x6dffff80; valaddr_reg:x3; val_offset:2718*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2718*0 + 3*7*FLEN/8, x4, x1, x2)

inst_907:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x2ba3e8 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x3ee930 and fs3 == 0 and fe3 == 0xdb and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7caba3e8; op2val:0x423ee930;
op3val:0x6dffffc0; valaddr_reg:x3; val_offset:2721*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2721*0 + 3*7*FLEN/8, x4, x1, x2)

inst_908:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x2ba3e8 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x3ee930 and fs3 == 0 and fe3 == 0xdb and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7caba3e8; op2val:0x423ee930;
op3val:0x6dffffe0; valaddr_reg:x3; val_offset:2724*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2724*0 + 3*7*FLEN/8, x4, x1, x2)

inst_909:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x2ba3e8 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x3ee930 and fs3 == 0 and fe3 == 0xdb and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7caba3e8; op2val:0x423ee930;
op3val:0x6dfffff0; valaddr_reg:x3; val_offset:2727*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2727*0 + 3*7*FLEN/8, x4, x1, x2)

inst_910:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x2ba3e8 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x3ee930 and fs3 == 0 and fe3 == 0xdb and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7caba3e8; op2val:0x423ee930;
op3val:0x6dfffff8; valaddr_reg:x3; val_offset:2730*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2730*0 + 3*7*FLEN/8, x4, x1, x2)

inst_911:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x2ba3e8 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x3ee930 and fs3 == 0 and fe3 == 0xdb and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7caba3e8; op2val:0x423ee930;
op3val:0x6dfffffc; valaddr_reg:x3; val_offset:2733*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2733*0 + 3*7*FLEN/8, x4, x1, x2)

inst_912:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x2ba3e8 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x3ee930 and fs3 == 0 and fe3 == 0xdb and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7caba3e8; op2val:0x423ee930;
op3val:0x6dfffffe; valaddr_reg:x3; val_offset:2736*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2736*0 + 3*7*FLEN/8, x4, x1, x2)

inst_913:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x2ba3e8 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x3ee930 and fs3 == 0 and fe3 == 0xdb and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7caba3e8; op2val:0x423ee930;
op3val:0x6dffffff; valaddr_reg:x3; val_offset:2739*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2739*0 + 3*7*FLEN/8, x4, x1, x2)

inst_914:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x2ba3e8 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x3ee930 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7caba3e8; op2val:0x423ee930;
op3val:0x7f000001; valaddr_reg:x3; val_offset:2742*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2742*0 + 3*7*FLEN/8, x4, x1, x2)

inst_915:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x2ba3e8 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x3ee930 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7caba3e8; op2val:0x423ee930;
op3val:0x7f000003; valaddr_reg:x3; val_offset:2745*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2745*0 + 3*7*FLEN/8, x4, x1, x2)

inst_916:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x2ba3e8 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x3ee930 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7caba3e8; op2val:0x423ee930;
op3val:0x7f000007; valaddr_reg:x3; val_offset:2748*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2748*0 + 3*7*FLEN/8, x4, x1, x2)

inst_917:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x2ba3e8 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x3ee930 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7caba3e8; op2val:0x423ee930;
op3val:0x7f199999; valaddr_reg:x3; val_offset:2751*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2751*0 + 3*7*FLEN/8, x4, x1, x2)

inst_918:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x2ba3e8 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x3ee930 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7caba3e8; op2val:0x423ee930;
op3val:0x7f249249; valaddr_reg:x3; val_offset:2754*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2754*0 + 3*7*FLEN/8, x4, x1, x2)

inst_919:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x2ba3e8 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x3ee930 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7caba3e8; op2val:0x423ee930;
op3val:0x7f333333; valaddr_reg:x3; val_offset:2757*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2757*0 + 3*7*FLEN/8, x4, x1, x2)

inst_920:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x2ba3e8 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x3ee930 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7caba3e8; op2val:0x423ee930;
op3val:0x7f36db6d; valaddr_reg:x3; val_offset:2760*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2760*0 + 3*7*FLEN/8, x4, x1, x2)

inst_921:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x2ba3e8 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x3ee930 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7caba3e8; op2val:0x423ee930;
op3val:0x7f3bbbbb; valaddr_reg:x3; val_offset:2763*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2763*0 + 3*7*FLEN/8, x4, x1, x2)

inst_922:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x2ba3e8 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x3ee930 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7caba3e8; op2val:0x423ee930;
op3val:0x7f444444; valaddr_reg:x3; val_offset:2766*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2766*0 + 3*7*FLEN/8, x4, x1, x2)

inst_923:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x2ba3e8 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x3ee930 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7caba3e8; op2val:0x423ee930;
op3val:0x7f4ccccc; valaddr_reg:x3; val_offset:2769*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2769*0 + 3*7*FLEN/8, x4, x1, x2)

inst_924:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x2ba3e8 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x3ee930 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7caba3e8; op2val:0x423ee930;
op3val:0x7f5b6db6; valaddr_reg:x3; val_offset:2772*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2772*0 + 3*7*FLEN/8, x4, x1, x2)

inst_925:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x2ba3e8 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x3ee930 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7caba3e8; op2val:0x423ee930;
op3val:0x7f666666; valaddr_reg:x3; val_offset:2775*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2775*0 + 3*7*FLEN/8, x4, x1, x2)

inst_926:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x2ba3e8 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x3ee930 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7caba3e8; op2val:0x423ee930;
op3val:0x7f6db6db; valaddr_reg:x3; val_offset:2778*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2778*0 + 3*7*FLEN/8, x4, x1, x2)

inst_927:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x2ba3e8 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x3ee930 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7caba3e8; op2val:0x423ee930;
op3val:0x7f7ffff8; valaddr_reg:x3; val_offset:2781*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2781*0 + 3*7*FLEN/8, x4, x1, x2)

inst_928:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x2ba3e8 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x3ee930 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7caba3e8; op2val:0x423ee930;
op3val:0x7f7ffffc; valaddr_reg:x3; val_offset:2784*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2784*0 + 3*7*FLEN/8, x4, x1, x2)

inst_929:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x2ba3e8 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x3ee930 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7caba3e8; op2val:0x423ee930;
op3val:0x7f7ffffe; valaddr_reg:x3; val_offset:2787*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2787*0 + 3*7*FLEN/8, x4, x1, x2)

inst_930:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x41d0be and fs2 == 1 and fe2 == 0x04 and fm2 == 0x29116d and fs3 == 1 and fe3 == 0x51 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc1d0be; op2val:0x8229116d;
op3val:0xa8800000; valaddr_reg:x3; val_offset:2790*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2790*0 + 3*7*FLEN/8, x4, x1, x2)

inst_931:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x41d0be and fs2 == 1 and fe2 == 0x04 and fm2 == 0x29116d and fs3 == 1 and fe3 == 0x51 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc1d0be; op2val:0x8229116d;
op3val:0xa8800001; valaddr_reg:x3; val_offset:2793*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2793*0 + 3*7*FLEN/8, x4, x1, x2)

inst_932:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x41d0be and fs2 == 1 and fe2 == 0x04 and fm2 == 0x29116d and fs3 == 1 and fe3 == 0x51 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc1d0be; op2val:0x8229116d;
op3val:0xa8800003; valaddr_reg:x3; val_offset:2796*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2796*0 + 3*7*FLEN/8, x4, x1, x2)

inst_933:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x41d0be and fs2 == 1 and fe2 == 0x04 and fm2 == 0x29116d and fs3 == 1 and fe3 == 0x51 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc1d0be; op2val:0x8229116d;
op3val:0xa8800007; valaddr_reg:x3; val_offset:2799*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2799*0 + 3*7*FLEN/8, x4, x1, x2)

inst_934:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x41d0be and fs2 == 1 and fe2 == 0x04 and fm2 == 0x29116d and fs3 == 1 and fe3 == 0x51 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc1d0be; op2val:0x8229116d;
op3val:0xa880000f; valaddr_reg:x3; val_offset:2802*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2802*0 + 3*7*FLEN/8, x4, x1, x2)

inst_935:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x41d0be and fs2 == 1 and fe2 == 0x04 and fm2 == 0x29116d and fs3 == 1 and fe3 == 0x51 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc1d0be; op2val:0x8229116d;
op3val:0xa880001f; valaddr_reg:x3; val_offset:2805*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2805*0 + 3*7*FLEN/8, x4, x1, x2)

inst_936:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x41d0be and fs2 == 1 and fe2 == 0x04 and fm2 == 0x29116d and fs3 == 1 and fe3 == 0x51 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc1d0be; op2val:0x8229116d;
op3val:0xa880003f; valaddr_reg:x3; val_offset:2808*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2808*0 + 3*7*FLEN/8, x4, x1, x2)

inst_937:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x41d0be and fs2 == 1 and fe2 == 0x04 and fm2 == 0x29116d and fs3 == 1 and fe3 == 0x51 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc1d0be; op2val:0x8229116d;
op3val:0xa880007f; valaddr_reg:x3; val_offset:2811*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2811*0 + 3*7*FLEN/8, x4, x1, x2)

inst_938:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x41d0be and fs2 == 1 and fe2 == 0x04 and fm2 == 0x29116d and fs3 == 1 and fe3 == 0x51 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc1d0be; op2val:0x8229116d;
op3val:0xa88000ff; valaddr_reg:x3; val_offset:2814*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2814*0 + 3*7*FLEN/8, x4, x1, x2)

inst_939:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x41d0be and fs2 == 1 and fe2 == 0x04 and fm2 == 0x29116d and fs3 == 1 and fe3 == 0x51 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc1d0be; op2val:0x8229116d;
op3val:0xa88001ff; valaddr_reg:x3; val_offset:2817*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2817*0 + 3*7*FLEN/8, x4, x1, x2)

inst_940:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x41d0be and fs2 == 1 and fe2 == 0x04 and fm2 == 0x29116d and fs3 == 1 and fe3 == 0x51 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc1d0be; op2val:0x8229116d;
op3val:0xa88003ff; valaddr_reg:x3; val_offset:2820*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2820*0 + 3*7*FLEN/8, x4, x1, x2)

inst_941:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x41d0be and fs2 == 1 and fe2 == 0x04 and fm2 == 0x29116d and fs3 == 1 and fe3 == 0x51 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc1d0be; op2val:0x8229116d;
op3val:0xa88007ff; valaddr_reg:x3; val_offset:2823*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2823*0 + 3*7*FLEN/8, x4, x1, x2)

inst_942:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x41d0be and fs2 == 1 and fe2 == 0x04 and fm2 == 0x29116d and fs3 == 1 and fe3 == 0x51 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc1d0be; op2val:0x8229116d;
op3val:0xa8800fff; valaddr_reg:x3; val_offset:2826*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2826*0 + 3*7*FLEN/8, x4, x1, x2)

inst_943:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x41d0be and fs2 == 1 and fe2 == 0x04 and fm2 == 0x29116d and fs3 == 1 and fe3 == 0x51 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc1d0be; op2val:0x8229116d;
op3val:0xa8801fff; valaddr_reg:x3; val_offset:2829*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2829*0 + 3*7*FLEN/8, x4, x1, x2)

inst_944:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x41d0be and fs2 == 1 and fe2 == 0x04 and fm2 == 0x29116d and fs3 == 1 and fe3 == 0x51 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc1d0be; op2val:0x8229116d;
op3val:0xa8803fff; valaddr_reg:x3; val_offset:2832*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2832*0 + 3*7*FLEN/8, x4, x1, x2)

inst_945:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x41d0be and fs2 == 1 and fe2 == 0x04 and fm2 == 0x29116d and fs3 == 1 and fe3 == 0x51 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc1d0be; op2val:0x8229116d;
op3val:0xa8807fff; valaddr_reg:x3; val_offset:2835*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2835*0 + 3*7*FLEN/8, x4, x1, x2)

inst_946:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x41d0be and fs2 == 1 and fe2 == 0x04 and fm2 == 0x29116d and fs3 == 1 and fe3 == 0x51 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc1d0be; op2val:0x8229116d;
op3val:0xa880ffff; valaddr_reg:x3; val_offset:2838*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2838*0 + 3*7*FLEN/8, x4, x1, x2)

inst_947:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x41d0be and fs2 == 1 and fe2 == 0x04 and fm2 == 0x29116d and fs3 == 1 and fe3 == 0x51 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc1d0be; op2val:0x8229116d;
op3val:0xa881ffff; valaddr_reg:x3; val_offset:2841*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2841*0 + 3*7*FLEN/8, x4, x1, x2)

inst_948:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x41d0be and fs2 == 1 and fe2 == 0x04 and fm2 == 0x29116d and fs3 == 1 and fe3 == 0x51 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc1d0be; op2val:0x8229116d;
op3val:0xa883ffff; valaddr_reg:x3; val_offset:2844*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2844*0 + 3*7*FLEN/8, x4, x1, x2)

inst_949:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x41d0be and fs2 == 1 and fe2 == 0x04 and fm2 == 0x29116d and fs3 == 1 and fe3 == 0x51 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc1d0be; op2val:0x8229116d;
op3val:0xa887ffff; valaddr_reg:x3; val_offset:2847*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2847*0 + 3*7*FLEN/8, x4, x1, x2)

inst_950:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x41d0be and fs2 == 1 and fe2 == 0x04 and fm2 == 0x29116d and fs3 == 1 and fe3 == 0x51 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc1d0be; op2val:0x8229116d;
op3val:0xa88fffff; valaddr_reg:x3; val_offset:2850*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2850*0 + 3*7*FLEN/8, x4, x1, x2)

inst_951:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x41d0be and fs2 == 1 and fe2 == 0x04 and fm2 == 0x29116d and fs3 == 1 and fe3 == 0x51 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc1d0be; op2val:0x8229116d;
op3val:0xa89fffff; valaddr_reg:x3; val_offset:2853*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2853*0 + 3*7*FLEN/8, x4, x1, x2)

inst_952:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x41d0be and fs2 == 1 and fe2 == 0x04 and fm2 == 0x29116d and fs3 == 1 and fe3 == 0x51 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc1d0be; op2val:0x8229116d;
op3val:0xa8bfffff; valaddr_reg:x3; val_offset:2856*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2856*0 + 3*7*FLEN/8, x4, x1, x2)

inst_953:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x41d0be and fs2 == 1 and fe2 == 0x04 and fm2 == 0x29116d and fs3 == 1 and fe3 == 0x51 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc1d0be; op2val:0x8229116d;
op3val:0xa8c00000; valaddr_reg:x3; val_offset:2859*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2859*0 + 3*7*FLEN/8, x4, x1, x2)

inst_954:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x41d0be and fs2 == 1 and fe2 == 0x04 and fm2 == 0x29116d and fs3 == 1 and fe3 == 0x51 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc1d0be; op2val:0x8229116d;
op3val:0xa8e00000; valaddr_reg:x3; val_offset:2862*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2862*0 + 3*7*FLEN/8, x4, x1, x2)

inst_955:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x41d0be and fs2 == 1 and fe2 == 0x04 and fm2 == 0x29116d and fs3 == 1 and fe3 == 0x51 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc1d0be; op2val:0x8229116d;
op3val:0xa8f00000; valaddr_reg:x3; val_offset:2865*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2865*0 + 3*7*FLEN/8, x4, x1, x2)

inst_956:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x41d0be and fs2 == 1 and fe2 == 0x04 and fm2 == 0x29116d and fs3 == 1 and fe3 == 0x51 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc1d0be; op2val:0x8229116d;
op3val:0xa8f80000; valaddr_reg:x3; val_offset:2868*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2868*0 + 3*7*FLEN/8, x4, x1, x2)

inst_957:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x41d0be and fs2 == 1 and fe2 == 0x04 and fm2 == 0x29116d and fs3 == 1 and fe3 == 0x51 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc1d0be; op2val:0x8229116d;
op3val:0xa8fc0000; valaddr_reg:x3; val_offset:2871*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2871*0 + 3*7*FLEN/8, x4, x1, x2)

inst_958:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x41d0be and fs2 == 1 and fe2 == 0x04 and fm2 == 0x29116d and fs3 == 1 and fe3 == 0x51 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc1d0be; op2val:0x8229116d;
op3val:0xa8fe0000; valaddr_reg:x3; val_offset:2874*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2874*0 + 3*7*FLEN/8, x4, x1, x2)

inst_959:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x41d0be and fs2 == 1 and fe2 == 0x04 and fm2 == 0x29116d and fs3 == 1 and fe3 == 0x51 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc1d0be; op2val:0x8229116d;
op3val:0xa8ff0000; valaddr_reg:x3; val_offset:2877*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2877*0 + 3*7*FLEN/8, x4, x1, x2)

inst_960:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x41d0be and fs2 == 1 and fe2 == 0x04 and fm2 == 0x29116d and fs3 == 1 and fe3 == 0x51 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc1d0be; op2val:0x8229116d;
op3val:0xa8ff8000; valaddr_reg:x3; val_offset:2880*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2880*0 + 3*7*FLEN/8, x4, x1, x2)

inst_961:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x41d0be and fs2 == 1 and fe2 == 0x04 and fm2 == 0x29116d and fs3 == 1 and fe3 == 0x51 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc1d0be; op2val:0x8229116d;
op3val:0xa8ffc000; valaddr_reg:x3; val_offset:2883*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2883*0 + 3*7*FLEN/8, x4, x1, x2)

inst_962:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x41d0be and fs2 == 1 and fe2 == 0x04 and fm2 == 0x29116d and fs3 == 1 and fe3 == 0x51 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc1d0be; op2val:0x8229116d;
op3val:0xa8ffe000; valaddr_reg:x3; val_offset:2886*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2886*0 + 3*7*FLEN/8, x4, x1, x2)

inst_963:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x41d0be and fs2 == 1 and fe2 == 0x04 and fm2 == 0x29116d and fs3 == 1 and fe3 == 0x51 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc1d0be; op2val:0x8229116d;
op3val:0xa8fff000; valaddr_reg:x3; val_offset:2889*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2889*0 + 3*7*FLEN/8, x4, x1, x2)

inst_964:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x41d0be and fs2 == 1 and fe2 == 0x04 and fm2 == 0x29116d and fs3 == 1 and fe3 == 0x51 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc1d0be; op2val:0x8229116d;
op3val:0xa8fff800; valaddr_reg:x3; val_offset:2892*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2892*0 + 3*7*FLEN/8, x4, x1, x2)

inst_965:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x41d0be and fs2 == 1 and fe2 == 0x04 and fm2 == 0x29116d and fs3 == 1 and fe3 == 0x51 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc1d0be; op2val:0x8229116d;
op3val:0xa8fffc00; valaddr_reg:x3; val_offset:2895*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2895*0 + 3*7*FLEN/8, x4, x1, x2)

inst_966:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x41d0be and fs2 == 1 and fe2 == 0x04 and fm2 == 0x29116d and fs3 == 1 and fe3 == 0x51 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc1d0be; op2val:0x8229116d;
op3val:0xa8fffe00; valaddr_reg:x3; val_offset:2898*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2898*0 + 3*7*FLEN/8, x4, x1, x2)

inst_967:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x41d0be and fs2 == 1 and fe2 == 0x04 and fm2 == 0x29116d and fs3 == 1 and fe3 == 0x51 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc1d0be; op2val:0x8229116d;
op3val:0xa8ffff00; valaddr_reg:x3; val_offset:2901*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2901*0 + 3*7*FLEN/8, x4, x1, x2)

inst_968:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x41d0be and fs2 == 1 and fe2 == 0x04 and fm2 == 0x29116d and fs3 == 1 and fe3 == 0x51 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc1d0be; op2val:0x8229116d;
op3val:0xa8ffff80; valaddr_reg:x3; val_offset:2904*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2904*0 + 3*7*FLEN/8, x4, x1, x2)

inst_969:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x41d0be and fs2 == 1 and fe2 == 0x04 and fm2 == 0x29116d and fs3 == 1 and fe3 == 0x51 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc1d0be; op2val:0x8229116d;
op3val:0xa8ffffc0; valaddr_reg:x3; val_offset:2907*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2907*0 + 3*7*FLEN/8, x4, x1, x2)

inst_970:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x41d0be and fs2 == 1 and fe2 == 0x04 and fm2 == 0x29116d and fs3 == 1 and fe3 == 0x51 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc1d0be; op2val:0x8229116d;
op3val:0xa8ffffe0; valaddr_reg:x3; val_offset:2910*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2910*0 + 3*7*FLEN/8, x4, x1, x2)

inst_971:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x41d0be and fs2 == 1 and fe2 == 0x04 and fm2 == 0x29116d and fs3 == 1 and fe3 == 0x51 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc1d0be; op2val:0x8229116d;
op3val:0xa8fffff0; valaddr_reg:x3; val_offset:2913*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2913*0 + 3*7*FLEN/8, x4, x1, x2)

inst_972:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x41d0be and fs2 == 1 and fe2 == 0x04 and fm2 == 0x29116d and fs3 == 1 and fe3 == 0x51 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc1d0be; op2val:0x8229116d;
op3val:0xa8fffff8; valaddr_reg:x3; val_offset:2916*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2916*0 + 3*7*FLEN/8, x4, x1, x2)

inst_973:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x41d0be and fs2 == 1 and fe2 == 0x04 and fm2 == 0x29116d and fs3 == 1 and fe3 == 0x51 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc1d0be; op2val:0x8229116d;
op3val:0xa8fffffc; valaddr_reg:x3; val_offset:2919*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2919*0 + 3*7*FLEN/8, x4, x1, x2)

inst_974:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x41d0be and fs2 == 1 and fe2 == 0x04 and fm2 == 0x29116d and fs3 == 1 and fe3 == 0x51 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc1d0be; op2val:0x8229116d;
op3val:0xa8fffffe; valaddr_reg:x3; val_offset:2922*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2922*0 + 3*7*FLEN/8, x4, x1, x2)

inst_975:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x41d0be and fs2 == 1 and fe2 == 0x04 and fm2 == 0x29116d and fs3 == 1 and fe3 == 0x51 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc1d0be; op2val:0x8229116d;
op3val:0xa8ffffff; valaddr_reg:x3; val_offset:2925*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2925*0 + 3*7*FLEN/8, x4, x1, x2)

inst_976:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x41d0be and fs2 == 1 and fe2 == 0x04 and fm2 == 0x29116d and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc1d0be; op2val:0x8229116d;
op3val:0xbf800001; valaddr_reg:x3; val_offset:2928*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2928*0 + 3*7*FLEN/8, x4, x1, x2)

inst_977:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x41d0be and fs2 == 1 and fe2 == 0x04 and fm2 == 0x29116d and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc1d0be; op2val:0x8229116d;
op3val:0xbf800003; valaddr_reg:x3; val_offset:2931*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2931*0 + 3*7*FLEN/8, x4, x1, x2)

inst_978:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x41d0be and fs2 == 1 and fe2 == 0x04 and fm2 == 0x29116d and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc1d0be; op2val:0x8229116d;
op3val:0xbf800007; valaddr_reg:x3; val_offset:2934*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2934*0 + 3*7*FLEN/8, x4, x1, x2)

inst_979:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x41d0be and fs2 == 1 and fe2 == 0x04 and fm2 == 0x29116d and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc1d0be; op2val:0x8229116d;
op3val:0xbf999999; valaddr_reg:x3; val_offset:2937*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2937*0 + 3*7*FLEN/8, x4, x1, x2)

inst_980:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x41d0be and fs2 == 1 and fe2 == 0x04 and fm2 == 0x29116d and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc1d0be; op2val:0x8229116d;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:2940*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2940*0 + 3*7*FLEN/8, x4, x1, x2)

inst_981:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x41d0be and fs2 == 1 and fe2 == 0x04 and fm2 == 0x29116d and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc1d0be; op2val:0x8229116d;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:2943*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2943*0 + 3*7*FLEN/8, x4, x1, x2)

inst_982:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x41d0be and fs2 == 1 and fe2 == 0x04 and fm2 == 0x29116d and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc1d0be; op2val:0x8229116d;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:2946*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2946*0 + 3*7*FLEN/8, x4, x1, x2)

inst_983:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x41d0be and fs2 == 1 and fe2 == 0x04 and fm2 == 0x29116d and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc1d0be; op2val:0x8229116d;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:2949*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2949*0 + 3*7*FLEN/8, x4, x1, x2)

inst_984:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x41d0be and fs2 == 1 and fe2 == 0x04 and fm2 == 0x29116d and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc1d0be; op2val:0x8229116d;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:2952*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2952*0 + 3*7*FLEN/8, x4, x1, x2)

inst_985:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x41d0be and fs2 == 1 and fe2 == 0x04 and fm2 == 0x29116d and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc1d0be; op2val:0x8229116d;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:2955*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2955*0 + 3*7*FLEN/8, x4, x1, x2)

inst_986:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x41d0be and fs2 == 1 and fe2 == 0x04 and fm2 == 0x29116d and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc1d0be; op2val:0x8229116d;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:2958*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2958*0 + 3*7*FLEN/8, x4, x1, x2)

inst_987:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x41d0be and fs2 == 1 and fe2 == 0x04 and fm2 == 0x29116d and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc1d0be; op2val:0x8229116d;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:2961*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2961*0 + 3*7*FLEN/8, x4, x1, x2)

inst_988:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x41d0be and fs2 == 1 and fe2 == 0x04 and fm2 == 0x29116d and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc1d0be; op2val:0x8229116d;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:2964*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2964*0 + 3*7*FLEN/8, x4, x1, x2)

inst_989:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x41d0be and fs2 == 1 and fe2 == 0x04 and fm2 == 0x29116d and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc1d0be; op2val:0x8229116d;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:2967*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2967*0 + 3*7*FLEN/8, x4, x1, x2)

inst_990:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x41d0be and fs2 == 1 and fe2 == 0x04 and fm2 == 0x29116d and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc1d0be; op2val:0x8229116d;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:2970*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2970*0 + 3*7*FLEN/8, x4, x1, x2)

inst_991:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x41d0be and fs2 == 1 and fe2 == 0x04 and fm2 == 0x29116d and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc1d0be; op2val:0x8229116d;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:2973*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2973*0 + 3*7*FLEN/8, x4, x1, x2)

inst_992:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x4777c1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc777c1; op2val:0x0;
op3val:0x800001; valaddr_reg:x3; val_offset:2976*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2976*0 + 3*7*FLEN/8, x4, x1, x2)

inst_993:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x4777c1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc777c1; op2val:0x0;
op3val:0x800003; valaddr_reg:x3; val_offset:2979*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2979*0 + 3*7*FLEN/8, x4, x1, x2)

inst_994:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x4777c1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc777c1; op2val:0x0;
op3val:0x800007; valaddr_reg:x3; val_offset:2982*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2982*0 + 3*7*FLEN/8, x4, x1, x2)

inst_995:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x4777c1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc777c1; op2val:0x0;
op3val:0x999999; valaddr_reg:x3; val_offset:2985*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2985*0 + 3*7*FLEN/8, x4, x1, x2)

inst_996:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x4777c1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc777c1; op2val:0x0;
op3val:0xa49249; valaddr_reg:x3; val_offset:2988*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2988*0 + 3*7*FLEN/8, x4, x1, x2)

inst_997:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x4777c1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc777c1; op2val:0x0;
op3val:0xb33333; valaddr_reg:x3; val_offset:2991*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2991*0 + 3*7*FLEN/8, x4, x1, x2)

inst_998:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x4777c1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc777c1; op2val:0x0;
op3val:0xb6db6d; valaddr_reg:x3; val_offset:2994*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2994*0 + 3*7*FLEN/8, x4, x1, x2)

inst_999:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x4777c1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc777c1; op2val:0x0;
op3val:0xbbbbbb; valaddr_reg:x3; val_offset:2997*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2997*0 + 3*7*FLEN/8, x4, x1, x2)

inst_1000:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x4777c1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc777c1; op2val:0x0;
op3val:0xc44444; valaddr_reg:x3; val_offset:3000*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3000*0 + 3*7*FLEN/8, x4, x1, x2)

inst_1001:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x4777c1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc777c1; op2val:0x0;
op3val:0xcccccc; valaddr_reg:x3; val_offset:3003*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3003*0 + 3*7*FLEN/8, x4, x1, x2)

inst_1002:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x4777c1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc777c1; op2val:0x0;
op3val:0xdb6db6; valaddr_reg:x3; val_offset:3006*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3006*0 + 3*7*FLEN/8, x4, x1, x2)

inst_1003:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x4777c1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc777c1; op2val:0x0;
op3val:0xe66666; valaddr_reg:x3; val_offset:3009*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3009*0 + 3*7*FLEN/8, x4, x1, x2)

inst_1004:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x4777c1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc777c1; op2val:0x0;
op3val:0xedb6db; valaddr_reg:x3; val_offset:3012*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3012*0 + 3*7*FLEN/8, x4, x1, x2)

inst_1005:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x4777c1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc777c1; op2val:0x0;
op3val:0xfffff8; valaddr_reg:x3; val_offset:3015*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3015*0 + 3*7*FLEN/8, x4, x1, x2)

inst_1006:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x4777c1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc777c1; op2val:0x0;
op3val:0xfffffc; valaddr_reg:x3; val_offset:3018*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3018*0 + 3*7*FLEN/8, x4, x1, x2)

inst_1007:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x4777c1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc777c1; op2val:0x0;
op3val:0xfffffe; valaddr_reg:x3; val_offset:3021*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3021*0 + 3*7*FLEN/8, x4, x1, x2)

inst_1008:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x4777c1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc777c1; op2val:0x0;
op3val:0x7000000; valaddr_reg:x3; val_offset:3024*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3024*0 + 3*7*FLEN/8, x4, x1, x2)

inst_1009:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x4777c1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc777c1; op2val:0x0;
op3val:0x7000001; valaddr_reg:x3; val_offset:3027*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3027*0 + 3*7*FLEN/8, x4, x1, x2)

inst_1010:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x4777c1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc777c1; op2val:0x0;
op3val:0x7000003; valaddr_reg:x3; val_offset:3030*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3030*0 + 3*7*FLEN/8, x4, x1, x2)

inst_1011:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x4777c1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc777c1; op2val:0x0;
op3val:0x7000007; valaddr_reg:x3; val_offset:3033*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3033*0 + 3*7*FLEN/8, x4, x1, x2)

inst_1012:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x4777c1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc777c1; op2val:0x0;
op3val:0x700000f; valaddr_reg:x3; val_offset:3036*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3036*0 + 3*7*FLEN/8, x4, x1, x2)

inst_1013:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x4777c1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc777c1; op2val:0x0;
op3val:0x700001f; valaddr_reg:x3; val_offset:3039*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3039*0 + 3*7*FLEN/8, x4, x1, x2)

inst_1014:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x4777c1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc777c1; op2val:0x0;
op3val:0x700003f; valaddr_reg:x3; val_offset:3042*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3042*0 + 3*7*FLEN/8, x4, x1, x2)

inst_1015:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x4777c1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc777c1; op2val:0x0;
op3val:0x700007f; valaddr_reg:x3; val_offset:3045*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3045*0 + 3*7*FLEN/8, x4, x1, x2)

inst_1016:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x4777c1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc777c1; op2val:0x0;
op3val:0x70000ff; valaddr_reg:x3; val_offset:3048*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3048*0 + 3*7*FLEN/8, x4, x1, x2)

inst_1017:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x4777c1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc777c1; op2val:0x0;
op3val:0x70001ff; valaddr_reg:x3; val_offset:3051*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3051*0 + 3*7*FLEN/8, x4, x1, x2)

inst_1018:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x4777c1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc777c1; op2val:0x0;
op3val:0x70003ff; valaddr_reg:x3; val_offset:3054*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3054*0 + 3*7*FLEN/8, x4, x1, x2)

inst_1019:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x4777c1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc777c1; op2val:0x0;
op3val:0x70007ff; valaddr_reg:x3; val_offset:3057*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3057*0 + 3*7*FLEN/8, x4, x1, x2)

inst_1020:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x4777c1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc777c1; op2val:0x0;
op3val:0x7000fff; valaddr_reg:x3; val_offset:3060*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3060*0 + 3*7*FLEN/8, x4, x1, x2)

inst_1021:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x4777c1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc777c1; op2val:0x0;
op3val:0x7001fff; valaddr_reg:x3; val_offset:3063*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3063*0 + 3*7*FLEN/8, x4, x1, x2)

inst_1022:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x4777c1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc777c1; op2val:0x0;
op3val:0x7003fff; valaddr_reg:x3; val_offset:3066*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3066*0 + 3*7*FLEN/8, x4, x1, x2)

inst_1023:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x4777c1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc777c1; op2val:0x0;
op3val:0x7007fff; valaddr_reg:x3; val_offset:3069*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3069*0 + 3*7*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2091623400,32,FLEN)
NAN_BOXED(1111419184,32,FLEN)
NAN_BOXED(1845362688,32,FLEN)
NAN_BOXED(2091623400,32,FLEN)
NAN_BOXED(1111419184,32,FLEN)
NAN_BOXED(1845428224,32,FLEN)
NAN_BOXED(2091623400,32,FLEN)
NAN_BOXED(1111419184,32,FLEN)
NAN_BOXED(1845460992,32,FLEN)
NAN_BOXED(2091623400,32,FLEN)
NAN_BOXED(1111419184,32,FLEN)
NAN_BOXED(1845477376,32,FLEN)
NAN_BOXED(2091623400,32,FLEN)
NAN_BOXED(1111419184,32,FLEN)
NAN_BOXED(1845485568,32,FLEN)
NAN_BOXED(2091623400,32,FLEN)
NAN_BOXED(1111419184,32,FLEN)
NAN_BOXED(1845489664,32,FLEN)
NAN_BOXED(2091623400,32,FLEN)
NAN_BOXED(1111419184,32,FLEN)
NAN_BOXED(1845491712,32,FLEN)
NAN_BOXED(2091623400,32,FLEN)
NAN_BOXED(1111419184,32,FLEN)
NAN_BOXED(1845492736,32,FLEN)
NAN_BOXED(2091623400,32,FLEN)
NAN_BOXED(1111419184,32,FLEN)
NAN_BOXED(1845493248,32,FLEN)
NAN_BOXED(2091623400,32,FLEN)
NAN_BOXED(1111419184,32,FLEN)
NAN_BOXED(1845493504,32,FLEN)
NAN_BOXED(2091623400,32,FLEN)
NAN_BOXED(1111419184,32,FLEN)
NAN_BOXED(1845493632,32,FLEN)
NAN_BOXED(2091623400,32,FLEN)
NAN_BOXED(1111419184,32,FLEN)
NAN_BOXED(1845493696,32,FLEN)
NAN_BOXED(2091623400,32,FLEN)
NAN_BOXED(1111419184,32,FLEN)
NAN_BOXED(1845493728,32,FLEN)
NAN_BOXED(2091623400,32,FLEN)
NAN_BOXED(1111419184,32,FLEN)
NAN_BOXED(1845493744,32,FLEN)
NAN_BOXED(2091623400,32,FLEN)
NAN_BOXED(1111419184,32,FLEN)
NAN_BOXED(1845493752,32,FLEN)
NAN_BOXED(2091623400,32,FLEN)
NAN_BOXED(1111419184,32,FLEN)
NAN_BOXED(1845493756,32,FLEN)
NAN_BOXED(2091623400,32,FLEN)
NAN_BOXED(1111419184,32,FLEN)
NAN_BOXED(1845493758,32,FLEN)
NAN_BOXED(2091623400,32,FLEN)
NAN_BOXED(1111419184,32,FLEN)
NAN_BOXED(1845493759,32,FLEN)
NAN_BOXED(2091623400,32,FLEN)
NAN_BOXED(1111419184,32,FLEN)
NAN_BOXED(2130706433,32,FLEN)
NAN_BOXED(2091623400,32,FLEN)
NAN_BOXED(1111419184,32,FLEN)
NAN_BOXED(2130706435,32,FLEN)
NAN_BOXED(2091623400,32,FLEN)
NAN_BOXED(1111419184,32,FLEN)
NAN_BOXED(2130706439,32,FLEN)
NAN_BOXED(2091623400,32,FLEN)
NAN_BOXED(1111419184,32,FLEN)
NAN_BOXED(2132384153,32,FLEN)
NAN_BOXED(2091623400,32,FLEN)
NAN_BOXED(1111419184,32,FLEN)
NAN_BOXED(2133103177,32,FLEN)
NAN_BOXED(2091623400,32,FLEN)
NAN_BOXED(1111419184,32,FLEN)
NAN_BOXED(2134061875,32,FLEN)
NAN_BOXED(2091623400,32,FLEN)
NAN_BOXED(1111419184,32,FLEN)
NAN_BOXED(2134301549,32,FLEN)
NAN_BOXED(2091623400,32,FLEN)
NAN_BOXED(1111419184,32,FLEN)
NAN_BOXED(2134621115,32,FLEN)
NAN_BOXED(2091623400,32,FLEN)
NAN_BOXED(1111419184,32,FLEN)
NAN_BOXED(2135180356,32,FLEN)
NAN_BOXED(2091623400,32,FLEN)
NAN_BOXED(1111419184,32,FLEN)
NAN_BOXED(2135739596,32,FLEN)
NAN_BOXED(2091623400,32,FLEN)
NAN_BOXED(1111419184,32,FLEN)
NAN_BOXED(2136698294,32,FLEN)
NAN_BOXED(2091623400,32,FLEN)
NAN_BOXED(1111419184,32,FLEN)
NAN_BOXED(2137417318,32,FLEN)
NAN_BOXED(2091623400,32,FLEN)
NAN_BOXED(1111419184,32,FLEN)
NAN_BOXED(2137896667,32,FLEN)
NAN_BOXED(2091623400,32,FLEN)
NAN_BOXED(1111419184,32,FLEN)
NAN_BOXED(2139095032,32,FLEN)
NAN_BOXED(2091623400,32,FLEN)
NAN_BOXED(1111419184,32,FLEN)
NAN_BOXED(2139095036,32,FLEN)
NAN_BOXED(2091623400,32,FLEN)
NAN_BOXED(1111419184,32,FLEN)
NAN_BOXED(2139095038,32,FLEN)
NAN_BOXED(2093076670,32,FLEN)
NAN_BOXED(2183729517,32,FLEN)
NAN_BOXED(2826960896,32,FLEN)
NAN_BOXED(2093076670,32,FLEN)
NAN_BOXED(2183729517,32,FLEN)
NAN_BOXED(2826960897,32,FLEN)
NAN_BOXED(2093076670,32,FLEN)
NAN_BOXED(2183729517,32,FLEN)
NAN_BOXED(2826960899,32,FLEN)
NAN_BOXED(2093076670,32,FLEN)
NAN_BOXED(2183729517,32,FLEN)
NAN_BOXED(2826960903,32,FLEN)
NAN_BOXED(2093076670,32,FLEN)
NAN_BOXED(2183729517,32,FLEN)
NAN_BOXED(2826960911,32,FLEN)
NAN_BOXED(2093076670,32,FLEN)
NAN_BOXED(2183729517,32,FLEN)
NAN_BOXED(2826960927,32,FLEN)
NAN_BOXED(2093076670,32,FLEN)
NAN_BOXED(2183729517,32,FLEN)
NAN_BOXED(2826960959,32,FLEN)
NAN_BOXED(2093076670,32,FLEN)
NAN_BOXED(2183729517,32,FLEN)
NAN_BOXED(2826961023,32,FLEN)
NAN_BOXED(2093076670,32,FLEN)
NAN_BOXED(2183729517,32,FLEN)
NAN_BOXED(2826961151,32,FLEN)
NAN_BOXED(2093076670,32,FLEN)
NAN_BOXED(2183729517,32,FLEN)
NAN_BOXED(2826961407,32,FLEN)
NAN_BOXED(2093076670,32,FLEN)
NAN_BOXED(2183729517,32,FLEN)
NAN_BOXED(2826961919,32,FLEN)
NAN_BOXED(2093076670,32,FLEN)
NAN_BOXED(2183729517,32,FLEN)
NAN_BOXED(2826962943,32,FLEN)
NAN_BOXED(2093076670,32,FLEN)
NAN_BOXED(2183729517,32,FLEN)
NAN_BOXED(2826964991,32,FLEN)
NAN_BOXED(2093076670,32,FLEN)
NAN_BOXED(2183729517,32,FLEN)
NAN_BOXED(2826969087,32,FLEN)
NAN_BOXED(2093076670,32,FLEN)
NAN_BOXED(2183729517,32,FLEN)
NAN_BOXED(2826977279,32,FLEN)
NAN_BOXED(2093076670,32,FLEN)
NAN_BOXED(2183729517,32,FLEN)
NAN_BOXED(2826993663,32,FLEN)
NAN_BOXED(2093076670,32,FLEN)
NAN_BOXED(2183729517,32,FLEN)
NAN_BOXED(2827026431,32,FLEN)
NAN_BOXED(2093076670,32,FLEN)
NAN_BOXED(2183729517,32,FLEN)
NAN_BOXED(2827091967,32,FLEN)
NAN_BOXED(2093076670,32,FLEN)
NAN_BOXED(2183729517,32,FLEN)
NAN_BOXED(2827223039,32,FLEN)
NAN_BOXED(2093076670,32,FLEN)
NAN_BOXED(2183729517,32,FLEN)
NAN_BOXED(2827485183,32,FLEN)
NAN_BOXED(2093076670,32,FLEN)
NAN_BOXED(2183729517,32,FLEN)
NAN_BOXED(2828009471,32,FLEN)
NAN_BOXED(2093076670,32,FLEN)
NAN_BOXED(2183729517,32,FLEN)
NAN_BOXED(2829058047,32,FLEN)
NAN_BOXED(2093076670,32,FLEN)
NAN_BOXED(2183729517,32,FLEN)
NAN_BOXED(2831155199,32,FLEN)
NAN_BOXED(2093076670,32,FLEN)
NAN_BOXED(2183729517,32,FLEN)
NAN_BOXED(2831155200,32,FLEN)
NAN_BOXED(2093076670,32,FLEN)
NAN_BOXED(2183729517,32,FLEN)
NAN_BOXED(2833252352,32,FLEN)
NAN_BOXED(2093076670,32,FLEN)
NAN_BOXED(2183729517,32,FLEN)
NAN_BOXED(2834300928,32,FLEN)
NAN_BOXED(2093076670,32,FLEN)
NAN_BOXED(2183729517,32,FLEN)
NAN_BOXED(2834825216,32,FLEN)
NAN_BOXED(2093076670,32,FLEN)
NAN_BOXED(2183729517,32,FLEN)
NAN_BOXED(2835087360,32,FLEN)
NAN_BOXED(2093076670,32,FLEN)
NAN_BOXED(2183729517,32,FLEN)
NAN_BOXED(2835218432,32,FLEN)
NAN_BOXED(2093076670,32,FLEN)
NAN_BOXED(2183729517,32,FLEN)
NAN_BOXED(2835283968,32,FLEN)
NAN_BOXED(2093076670,32,FLEN)
NAN_BOXED(2183729517,32,FLEN)
NAN_BOXED(2835316736,32,FLEN)
NAN_BOXED(2093076670,32,FLEN)
NAN_BOXED(2183729517,32,FLEN)
NAN_BOXED(2835333120,32,FLEN)
NAN_BOXED(2093076670,32,FLEN)
NAN_BOXED(2183729517,32,FLEN)
NAN_BOXED(2835341312,32,FLEN)
NAN_BOXED(2093076670,32,FLEN)
NAN_BOXED(2183729517,32,FLEN)
NAN_BOXED(2835345408,32,FLEN)
NAN_BOXED(2093076670,32,FLEN)
NAN_BOXED(2183729517,32,FLEN)
NAN_BOXED(2835347456,32,FLEN)
NAN_BOXED(2093076670,32,FLEN)
NAN_BOXED(2183729517,32,FLEN)
NAN_BOXED(2835348480,32,FLEN)
NAN_BOXED(2093076670,32,FLEN)
NAN_BOXED(2183729517,32,FLEN)
NAN_BOXED(2835348992,32,FLEN)
NAN_BOXED(2093076670,32,FLEN)
NAN_BOXED(2183729517,32,FLEN)
NAN_BOXED(2835349248,32,FLEN)
NAN_BOXED(2093076670,32,FLEN)
NAN_BOXED(2183729517,32,FLEN)
NAN_BOXED(2835349376,32,FLEN)
NAN_BOXED(2093076670,32,FLEN)
NAN_BOXED(2183729517,32,FLEN)
NAN_BOXED(2835349440,32,FLEN)
NAN_BOXED(2093076670,32,FLEN)
NAN_BOXED(2183729517,32,FLEN)
NAN_BOXED(2835349472,32,FLEN)
NAN_BOXED(2093076670,32,FLEN)
NAN_BOXED(2183729517,32,FLEN)
NAN_BOXED(2835349488,32,FLEN)
NAN_BOXED(2093076670,32,FLEN)
NAN_BOXED(2183729517,32,FLEN)
NAN_BOXED(2835349496,32,FLEN)
NAN_BOXED(2093076670,32,FLEN)
NAN_BOXED(2183729517,32,FLEN)
NAN_BOXED(2835349500,32,FLEN)
NAN_BOXED(2093076670,32,FLEN)
NAN_BOXED(2183729517,32,FLEN)
NAN_BOXED(2835349502,32,FLEN)
NAN_BOXED(2093076670,32,FLEN)
NAN_BOXED(2183729517,32,FLEN)
NAN_BOXED(2835349503,32,FLEN)
NAN_BOXED(2093076670,32,FLEN)
NAN_BOXED(2183729517,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2093076670,32,FLEN)
NAN_BOXED(2183729517,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2093076670,32,FLEN)
NAN_BOXED(2183729517,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
NAN_BOXED(2093076670,32,FLEN)
NAN_BOXED(2183729517,32,FLEN)
NAN_BOXED(3214514585,32,FLEN)
NAN_BOXED(2093076670,32,FLEN)
NAN_BOXED(2183729517,32,FLEN)
NAN_BOXED(3215233609,32,FLEN)
NAN_BOXED(2093076670,32,FLEN)
NAN_BOXED(2183729517,32,FLEN)
NAN_BOXED(3216192307,32,FLEN)
NAN_BOXED(2093076670,32,FLEN)
NAN_BOXED(2183729517,32,FLEN)
NAN_BOXED(3216431981,32,FLEN)
NAN_BOXED(2093076670,32,FLEN)
NAN_BOXED(2183729517,32,FLEN)
NAN_BOXED(3216751547,32,FLEN)
NAN_BOXED(2093076670,32,FLEN)
NAN_BOXED(2183729517,32,FLEN)
NAN_BOXED(3217310788,32,FLEN)
NAN_BOXED(2093076670,32,FLEN)
NAN_BOXED(2183729517,32,FLEN)
NAN_BOXED(3217870028,32,FLEN)
NAN_BOXED(2093076670,32,FLEN)
NAN_BOXED(2183729517,32,FLEN)
NAN_BOXED(3218828726,32,FLEN)
NAN_BOXED(2093076670,32,FLEN)
NAN_BOXED(2183729517,32,FLEN)
NAN_BOXED(3219547750,32,FLEN)
NAN_BOXED(2093076670,32,FLEN)
NAN_BOXED(2183729517,32,FLEN)
NAN_BOXED(3220027099,32,FLEN)
NAN_BOXED(2093076670,32,FLEN)
NAN_BOXED(2183729517,32,FLEN)
NAN_BOXED(3221225464,32,FLEN)
NAN_BOXED(2093076670,32,FLEN)
NAN_BOXED(2183729517,32,FLEN)
NAN_BOXED(3221225468,32,FLEN)
NAN_BOXED(2093076670,32,FLEN)
NAN_BOXED(2183729517,32,FLEN)
NAN_BOXED(3221225470,32,FLEN)
NAN_BOXED(2093447105,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(2093447105,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388611,32,FLEN)
NAN_BOXED(2093447105,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388615,32,FLEN)
NAN_BOXED(2093447105,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(10066329,32,FLEN)
NAN_BOXED(2093447105,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(10785353,32,FLEN)
NAN_BOXED(2093447105,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(11744051,32,FLEN)
NAN_BOXED(2093447105,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(11983725,32,FLEN)
NAN_BOXED(2093447105,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(12303291,32,FLEN)
NAN_BOXED(2093447105,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(12862532,32,FLEN)
NAN_BOXED(2093447105,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(13421772,32,FLEN)
NAN_BOXED(2093447105,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(14380470,32,FLEN)
NAN_BOXED(2093447105,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(15099494,32,FLEN)
NAN_BOXED(2093447105,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(15578843,32,FLEN)
NAN_BOXED(2093447105,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777208,32,FLEN)
NAN_BOXED(2093447105,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777212,32,FLEN)
NAN_BOXED(2093447105,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777214,32,FLEN)
NAN_BOXED(2093447105,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117440512,32,FLEN)
NAN_BOXED(2093447105,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117440513,32,FLEN)
NAN_BOXED(2093447105,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117440515,32,FLEN)
NAN_BOXED(2093447105,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117440519,32,FLEN)
NAN_BOXED(2093447105,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117440527,32,FLEN)
NAN_BOXED(2093447105,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117440543,32,FLEN)
NAN_BOXED(2093447105,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117440575,32,FLEN)
NAN_BOXED(2093447105,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117440639,32,FLEN)
NAN_BOXED(2093447105,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117440767,32,FLEN)
NAN_BOXED(2093447105,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117441023,32,FLEN)
NAN_BOXED(2093447105,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117441535,32,FLEN)
NAN_BOXED(2093447105,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117442559,32,FLEN)
NAN_BOXED(2093447105,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117444607,32,FLEN)
NAN_BOXED(2093447105,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117448703,32,FLEN)
NAN_BOXED(2093447105,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117456895,32,FLEN)
NAN_BOXED(2093447105,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117473279,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
