
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:17:59 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_12672:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x76467b and fs2 == 1 and fe2 == 0x81 and fm2 == 0x050de8 and fs3 == 1 and fe3 == 0xbe and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e76467b; op2val:0xc0850de8;
op3val:0xdf00000f; valaddr_reg:x3; val_offset:38016*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38016*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12673:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x76467b and fs2 == 1 and fe2 == 0x81 and fm2 == 0x050de8 and fs3 == 1 and fe3 == 0xbe and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e76467b; op2val:0xc0850de8;
op3val:0xdf00001f; valaddr_reg:x3; val_offset:38019*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38019*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12674:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x76467b and fs2 == 1 and fe2 == 0x81 and fm2 == 0x050de8 and fs3 == 1 and fe3 == 0xbe and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e76467b; op2val:0xc0850de8;
op3val:0xdf00003f; valaddr_reg:x3; val_offset:38022*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38022*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12675:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x76467b and fs2 == 1 and fe2 == 0x81 and fm2 == 0x050de8 and fs3 == 1 and fe3 == 0xbe and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e76467b; op2val:0xc0850de8;
op3val:0xdf00007f; valaddr_reg:x3; val_offset:38025*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38025*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12676:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x76467b and fs2 == 1 and fe2 == 0x81 and fm2 == 0x050de8 and fs3 == 1 and fe3 == 0xbe and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e76467b; op2val:0xc0850de8;
op3val:0xdf0000ff; valaddr_reg:x3; val_offset:38028*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38028*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12677:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x76467b and fs2 == 1 and fe2 == 0x81 and fm2 == 0x050de8 and fs3 == 1 and fe3 == 0xbe and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e76467b; op2val:0xc0850de8;
op3val:0xdf0001ff; valaddr_reg:x3; val_offset:38031*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38031*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12678:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x76467b and fs2 == 1 and fe2 == 0x81 and fm2 == 0x050de8 and fs3 == 1 and fe3 == 0xbe and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e76467b; op2val:0xc0850de8;
op3val:0xdf0003ff; valaddr_reg:x3; val_offset:38034*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38034*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12679:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x76467b and fs2 == 1 and fe2 == 0x81 and fm2 == 0x050de8 and fs3 == 1 and fe3 == 0xbe and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e76467b; op2val:0xc0850de8;
op3val:0xdf0007ff; valaddr_reg:x3; val_offset:38037*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38037*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12680:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x76467b and fs2 == 1 and fe2 == 0x81 and fm2 == 0x050de8 and fs3 == 1 and fe3 == 0xbe and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e76467b; op2val:0xc0850de8;
op3val:0xdf000fff; valaddr_reg:x3; val_offset:38040*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38040*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12681:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x76467b and fs2 == 1 and fe2 == 0x81 and fm2 == 0x050de8 and fs3 == 1 and fe3 == 0xbe and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e76467b; op2val:0xc0850de8;
op3val:0xdf001fff; valaddr_reg:x3; val_offset:38043*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38043*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12682:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x76467b and fs2 == 1 and fe2 == 0x81 and fm2 == 0x050de8 and fs3 == 1 and fe3 == 0xbe and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e76467b; op2val:0xc0850de8;
op3val:0xdf003fff; valaddr_reg:x3; val_offset:38046*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38046*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12683:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x76467b and fs2 == 1 and fe2 == 0x81 and fm2 == 0x050de8 and fs3 == 1 and fe3 == 0xbe and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e76467b; op2val:0xc0850de8;
op3val:0xdf007fff; valaddr_reg:x3; val_offset:38049*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38049*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12684:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x76467b and fs2 == 1 and fe2 == 0x81 and fm2 == 0x050de8 and fs3 == 1 and fe3 == 0xbe and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e76467b; op2val:0xc0850de8;
op3val:0xdf00ffff; valaddr_reg:x3; val_offset:38052*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38052*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12685:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x76467b and fs2 == 1 and fe2 == 0x81 and fm2 == 0x050de8 and fs3 == 1 and fe3 == 0xbe and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e76467b; op2val:0xc0850de8;
op3val:0xdf01ffff; valaddr_reg:x3; val_offset:38055*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38055*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12686:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x76467b and fs2 == 1 and fe2 == 0x81 and fm2 == 0x050de8 and fs3 == 1 and fe3 == 0xbe and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e76467b; op2val:0xc0850de8;
op3val:0xdf03ffff; valaddr_reg:x3; val_offset:38058*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38058*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12687:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x76467b and fs2 == 1 and fe2 == 0x81 and fm2 == 0x050de8 and fs3 == 1 and fe3 == 0xbe and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e76467b; op2val:0xc0850de8;
op3val:0xdf07ffff; valaddr_reg:x3; val_offset:38061*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38061*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12688:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x76467b and fs2 == 1 and fe2 == 0x81 and fm2 == 0x050de8 and fs3 == 1 and fe3 == 0xbe and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e76467b; op2val:0xc0850de8;
op3val:0xdf0fffff; valaddr_reg:x3; val_offset:38064*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38064*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12689:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x76467b and fs2 == 1 and fe2 == 0x81 and fm2 == 0x050de8 and fs3 == 1 and fe3 == 0xbe and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e76467b; op2val:0xc0850de8;
op3val:0xdf1fffff; valaddr_reg:x3; val_offset:38067*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38067*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12690:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x76467b and fs2 == 1 and fe2 == 0x81 and fm2 == 0x050de8 and fs3 == 1 and fe3 == 0xbe and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e76467b; op2val:0xc0850de8;
op3val:0xdf3fffff; valaddr_reg:x3; val_offset:38070*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38070*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12691:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x76467b and fs2 == 1 and fe2 == 0x81 and fm2 == 0x050de8 and fs3 == 1 and fe3 == 0xbe and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e76467b; op2val:0xc0850de8;
op3val:0xdf400000; valaddr_reg:x3; val_offset:38073*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38073*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12692:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x76467b and fs2 == 1 and fe2 == 0x81 and fm2 == 0x050de8 and fs3 == 1 and fe3 == 0xbe and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e76467b; op2val:0xc0850de8;
op3val:0xdf600000; valaddr_reg:x3; val_offset:38076*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38076*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12693:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x76467b and fs2 == 1 and fe2 == 0x81 and fm2 == 0x050de8 and fs3 == 1 and fe3 == 0xbe and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e76467b; op2val:0xc0850de8;
op3val:0xdf700000; valaddr_reg:x3; val_offset:38079*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38079*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12694:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x76467b and fs2 == 1 and fe2 == 0x81 and fm2 == 0x050de8 and fs3 == 1 and fe3 == 0xbe and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e76467b; op2val:0xc0850de8;
op3val:0xdf780000; valaddr_reg:x3; val_offset:38082*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38082*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12695:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x76467b and fs2 == 1 and fe2 == 0x81 and fm2 == 0x050de8 and fs3 == 1 and fe3 == 0xbe and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e76467b; op2val:0xc0850de8;
op3val:0xdf7c0000; valaddr_reg:x3; val_offset:38085*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38085*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12696:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x76467b and fs2 == 1 and fe2 == 0x81 and fm2 == 0x050de8 and fs3 == 1 and fe3 == 0xbe and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e76467b; op2val:0xc0850de8;
op3val:0xdf7e0000; valaddr_reg:x3; val_offset:38088*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38088*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12697:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x76467b and fs2 == 1 and fe2 == 0x81 and fm2 == 0x050de8 and fs3 == 1 and fe3 == 0xbe and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e76467b; op2val:0xc0850de8;
op3val:0xdf7f0000; valaddr_reg:x3; val_offset:38091*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38091*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12698:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x76467b and fs2 == 1 and fe2 == 0x81 and fm2 == 0x050de8 and fs3 == 1 and fe3 == 0xbe and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e76467b; op2val:0xc0850de8;
op3val:0xdf7f8000; valaddr_reg:x3; val_offset:38094*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38094*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12699:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x76467b and fs2 == 1 and fe2 == 0x81 and fm2 == 0x050de8 and fs3 == 1 and fe3 == 0xbe and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e76467b; op2val:0xc0850de8;
op3val:0xdf7fc000; valaddr_reg:x3; val_offset:38097*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38097*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12700:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x76467b and fs2 == 1 and fe2 == 0x81 and fm2 == 0x050de8 and fs3 == 1 and fe3 == 0xbe and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e76467b; op2val:0xc0850de8;
op3val:0xdf7fe000; valaddr_reg:x3; val_offset:38100*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38100*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12701:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x76467b and fs2 == 1 and fe2 == 0x81 and fm2 == 0x050de8 and fs3 == 1 and fe3 == 0xbe and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e76467b; op2val:0xc0850de8;
op3val:0xdf7ff000; valaddr_reg:x3; val_offset:38103*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38103*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12702:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x76467b and fs2 == 1 and fe2 == 0x81 and fm2 == 0x050de8 and fs3 == 1 and fe3 == 0xbe and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e76467b; op2val:0xc0850de8;
op3val:0xdf7ff800; valaddr_reg:x3; val_offset:38106*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38106*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12703:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x76467b and fs2 == 1 and fe2 == 0x81 and fm2 == 0x050de8 and fs3 == 1 and fe3 == 0xbe and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e76467b; op2val:0xc0850de8;
op3val:0xdf7ffc00; valaddr_reg:x3; val_offset:38109*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38109*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12704:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x76467b and fs2 == 1 and fe2 == 0x81 and fm2 == 0x050de8 and fs3 == 1 and fe3 == 0xbe and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e76467b; op2val:0xc0850de8;
op3val:0xdf7ffe00; valaddr_reg:x3; val_offset:38112*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38112*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12705:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x76467b and fs2 == 1 and fe2 == 0x81 and fm2 == 0x050de8 and fs3 == 1 and fe3 == 0xbe and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e76467b; op2val:0xc0850de8;
op3val:0xdf7fff00; valaddr_reg:x3; val_offset:38115*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38115*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12706:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x76467b and fs2 == 1 and fe2 == 0x81 and fm2 == 0x050de8 and fs3 == 1 and fe3 == 0xbe and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e76467b; op2val:0xc0850de8;
op3val:0xdf7fff80; valaddr_reg:x3; val_offset:38118*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38118*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12707:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x76467b and fs2 == 1 and fe2 == 0x81 and fm2 == 0x050de8 and fs3 == 1 and fe3 == 0xbe and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e76467b; op2val:0xc0850de8;
op3val:0xdf7fffc0; valaddr_reg:x3; val_offset:38121*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38121*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12708:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x76467b and fs2 == 1 and fe2 == 0x81 and fm2 == 0x050de8 and fs3 == 1 and fe3 == 0xbe and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e76467b; op2val:0xc0850de8;
op3val:0xdf7fffe0; valaddr_reg:x3; val_offset:38124*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38124*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12709:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x76467b and fs2 == 1 and fe2 == 0x81 and fm2 == 0x050de8 and fs3 == 1 and fe3 == 0xbe and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e76467b; op2val:0xc0850de8;
op3val:0xdf7ffff0; valaddr_reg:x3; val_offset:38127*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38127*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12710:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x76467b and fs2 == 1 and fe2 == 0x81 and fm2 == 0x050de8 and fs3 == 1 and fe3 == 0xbe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e76467b; op2val:0xc0850de8;
op3val:0xdf7ffff8; valaddr_reg:x3; val_offset:38130*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38130*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12711:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x76467b and fs2 == 1 and fe2 == 0x81 and fm2 == 0x050de8 and fs3 == 1 and fe3 == 0xbe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e76467b; op2val:0xc0850de8;
op3val:0xdf7ffffc; valaddr_reg:x3; val_offset:38133*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38133*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12712:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x76467b and fs2 == 1 and fe2 == 0x81 and fm2 == 0x050de8 and fs3 == 1 and fe3 == 0xbe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e76467b; op2val:0xc0850de8;
op3val:0xdf7ffffe; valaddr_reg:x3; val_offset:38136*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38136*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12713:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x76467b and fs2 == 1 and fe2 == 0x81 and fm2 == 0x050de8 and fs3 == 1 and fe3 == 0xbe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e76467b; op2val:0xc0850de8;
op3val:0xdf7fffff; valaddr_reg:x3; val_offset:38139*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38139*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12714:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x76467b and fs2 == 1 and fe2 == 0x81 and fm2 == 0x050de8 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e76467b; op2val:0xc0850de8;
op3val:0xff000001; valaddr_reg:x3; val_offset:38142*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38142*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12715:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x76467b and fs2 == 1 and fe2 == 0x81 and fm2 == 0x050de8 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e76467b; op2val:0xc0850de8;
op3val:0xff000003; valaddr_reg:x3; val_offset:38145*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38145*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12716:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x76467b and fs2 == 1 and fe2 == 0x81 and fm2 == 0x050de8 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e76467b; op2val:0xc0850de8;
op3val:0xff000007; valaddr_reg:x3; val_offset:38148*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38148*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12717:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x76467b and fs2 == 1 and fe2 == 0x81 and fm2 == 0x050de8 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e76467b; op2val:0xc0850de8;
op3val:0xff199999; valaddr_reg:x3; val_offset:38151*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38151*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12718:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x76467b and fs2 == 1 and fe2 == 0x81 and fm2 == 0x050de8 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e76467b; op2val:0xc0850de8;
op3val:0xff249249; valaddr_reg:x3; val_offset:38154*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38154*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12719:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x76467b and fs2 == 1 and fe2 == 0x81 and fm2 == 0x050de8 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e76467b; op2val:0xc0850de8;
op3val:0xff333333; valaddr_reg:x3; val_offset:38157*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38157*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12720:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x76467b and fs2 == 1 and fe2 == 0x81 and fm2 == 0x050de8 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e76467b; op2val:0xc0850de8;
op3val:0xff36db6d; valaddr_reg:x3; val_offset:38160*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38160*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12721:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x76467b and fs2 == 1 and fe2 == 0x81 and fm2 == 0x050de8 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e76467b; op2val:0xc0850de8;
op3val:0xff3bbbbb; valaddr_reg:x3; val_offset:38163*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38163*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12722:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x76467b and fs2 == 1 and fe2 == 0x81 and fm2 == 0x050de8 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e76467b; op2val:0xc0850de8;
op3val:0xff444444; valaddr_reg:x3; val_offset:38166*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38166*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12723:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x76467b and fs2 == 1 and fe2 == 0x81 and fm2 == 0x050de8 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e76467b; op2val:0xc0850de8;
op3val:0xff4ccccc; valaddr_reg:x3; val_offset:38169*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38169*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12724:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x76467b and fs2 == 1 and fe2 == 0x81 and fm2 == 0x050de8 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e76467b; op2val:0xc0850de8;
op3val:0xff5b6db6; valaddr_reg:x3; val_offset:38172*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38172*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12725:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x76467b and fs2 == 1 and fe2 == 0x81 and fm2 == 0x050de8 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e76467b; op2val:0xc0850de8;
op3val:0xff666666; valaddr_reg:x3; val_offset:38175*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38175*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12726:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x76467b and fs2 == 1 and fe2 == 0x81 and fm2 == 0x050de8 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e76467b; op2val:0xc0850de8;
op3val:0xff6db6db; valaddr_reg:x3; val_offset:38178*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38178*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12727:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x76467b and fs2 == 1 and fe2 == 0x81 and fm2 == 0x050de8 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e76467b; op2val:0xc0850de8;
op3val:0xff7ffff8; valaddr_reg:x3; val_offset:38181*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38181*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12728:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x76467b and fs2 == 1 and fe2 == 0x81 and fm2 == 0x050de8 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e76467b; op2val:0xc0850de8;
op3val:0xff7ffffc; valaddr_reg:x3; val_offset:38184*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38184*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12729:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x76467b and fs2 == 1 and fe2 == 0x81 and fm2 == 0x050de8 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e76467b; op2val:0xc0850de8;
op3val:0xff7ffffe; valaddr_reg:x3; val_offset:38187*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38187*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12730:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x77a646 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e77a646; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:38190*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38190*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12731:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x77a646 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e77a646; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:38193*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38193*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12732:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x77a646 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e77a646; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:38196*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38196*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12733:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x77a646 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e77a646; op2val:0x0;
op3val:0x199999; valaddr_reg:x3; val_offset:38199*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38199*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12734:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x77a646 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e77a646; op2val:0x0;
op3val:0x249249; valaddr_reg:x3; val_offset:38202*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38202*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12735:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x77a646 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e77a646; op2val:0x0;
op3val:0x333333; valaddr_reg:x3; val_offset:38205*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38205*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12736:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x77a646 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e77a646; op2val:0x0;
op3val:0x36db6d; valaddr_reg:x3; val_offset:38208*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38208*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12737:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x77a646 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e77a646; op2val:0x0;
op3val:0x3bbbbb; valaddr_reg:x3; val_offset:38211*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38211*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12738:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x77a646 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e77a646; op2val:0x0;
op3val:0x444444; valaddr_reg:x3; val_offset:38214*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38214*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12739:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x77a646 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e77a646; op2val:0x0;
op3val:0x4ccccc; valaddr_reg:x3; val_offset:38217*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38217*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12740:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x77a646 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e77a646; op2val:0x0;
op3val:0x5b6db6; valaddr_reg:x3; val_offset:38220*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38220*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12741:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x77a646 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e77a646; op2val:0x0;
op3val:0x666666; valaddr_reg:x3; val_offset:38223*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38223*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12742:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x77a646 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e77a646; op2val:0x0;
op3val:0x6db6db; valaddr_reg:x3; val_offset:38226*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38226*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12743:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x77a646 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e77a646; op2val:0x0;
op3val:0x7ffff8; valaddr_reg:x3; val_offset:38229*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38229*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12744:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x77a646 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e77a646; op2val:0x0;
op3val:0x7ffffc; valaddr_reg:x3; val_offset:38232*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38232*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12745:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x77a646 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e77a646; op2val:0x0;
op3val:0x7ffffe; valaddr_reg:x3; val_offset:38235*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38235*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12746:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x77a646 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e77a646; op2val:0x0;
op3val:0x1000000; valaddr_reg:x3; val_offset:38238*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38238*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12747:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x77a646 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e77a646; op2val:0x0;
op3val:0x1000001; valaddr_reg:x3; val_offset:38241*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38241*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12748:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x77a646 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e77a646; op2val:0x0;
op3val:0x1000003; valaddr_reg:x3; val_offset:38244*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38244*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12749:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x77a646 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e77a646; op2val:0x0;
op3val:0x1000007; valaddr_reg:x3; val_offset:38247*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38247*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12750:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x77a646 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e77a646; op2val:0x0;
op3val:0x100000f; valaddr_reg:x3; val_offset:38250*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38250*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12751:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x77a646 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e77a646; op2val:0x0;
op3val:0x100001f; valaddr_reg:x3; val_offset:38253*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38253*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12752:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x77a646 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e77a646; op2val:0x0;
op3val:0x100003f; valaddr_reg:x3; val_offset:38256*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38256*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12753:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x77a646 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e77a646; op2val:0x0;
op3val:0x100007f; valaddr_reg:x3; val_offset:38259*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38259*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12754:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x77a646 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e77a646; op2val:0x0;
op3val:0x10000ff; valaddr_reg:x3; val_offset:38262*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38262*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12755:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x77a646 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e77a646; op2val:0x0;
op3val:0x10001ff; valaddr_reg:x3; val_offset:38265*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38265*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12756:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x77a646 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e77a646; op2val:0x0;
op3val:0x10003ff; valaddr_reg:x3; val_offset:38268*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38268*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12757:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x77a646 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e77a646; op2val:0x0;
op3val:0x10007ff; valaddr_reg:x3; val_offset:38271*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38271*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12758:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x77a646 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e77a646; op2val:0x0;
op3val:0x1000fff; valaddr_reg:x3; val_offset:38274*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38274*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12759:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x77a646 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e77a646; op2val:0x0;
op3val:0x1001fff; valaddr_reg:x3; val_offset:38277*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38277*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12760:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x77a646 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e77a646; op2val:0x0;
op3val:0x1003fff; valaddr_reg:x3; val_offset:38280*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38280*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12761:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x77a646 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e77a646; op2val:0x0;
op3val:0x1007fff; valaddr_reg:x3; val_offset:38283*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38283*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12762:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x77a646 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e77a646; op2val:0x0;
op3val:0x100ffff; valaddr_reg:x3; val_offset:38286*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38286*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12763:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x77a646 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e77a646; op2val:0x0;
op3val:0x101ffff; valaddr_reg:x3; val_offset:38289*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38289*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12764:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x77a646 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e77a646; op2val:0x0;
op3val:0x103ffff; valaddr_reg:x3; val_offset:38292*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38292*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12765:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x77a646 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e77a646; op2val:0x0;
op3val:0x107ffff; valaddr_reg:x3; val_offset:38295*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38295*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12766:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x77a646 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e77a646; op2val:0x0;
op3val:0x10fffff; valaddr_reg:x3; val_offset:38298*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38298*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12767:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x77a646 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e77a646; op2val:0x0;
op3val:0x11fffff; valaddr_reg:x3; val_offset:38301*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38301*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12768:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x77a646 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e77a646; op2val:0x0;
op3val:0x13fffff; valaddr_reg:x3; val_offset:38304*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38304*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12769:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x77a646 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e77a646; op2val:0x0;
op3val:0x1400000; valaddr_reg:x3; val_offset:38307*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38307*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12770:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x77a646 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e77a646; op2val:0x0;
op3val:0x1600000; valaddr_reg:x3; val_offset:38310*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38310*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12771:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x77a646 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e77a646; op2val:0x0;
op3val:0x1700000; valaddr_reg:x3; val_offset:38313*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38313*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12772:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x77a646 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e77a646; op2val:0x0;
op3val:0x1780000; valaddr_reg:x3; val_offset:38316*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38316*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12773:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x77a646 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e77a646; op2val:0x0;
op3val:0x17c0000; valaddr_reg:x3; val_offset:38319*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38319*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12774:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x77a646 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e77a646; op2val:0x0;
op3val:0x17e0000; valaddr_reg:x3; val_offset:38322*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38322*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12775:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x77a646 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e77a646; op2val:0x0;
op3val:0x17f0000; valaddr_reg:x3; val_offset:38325*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38325*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12776:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x77a646 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e77a646; op2val:0x0;
op3val:0x17f8000; valaddr_reg:x3; val_offset:38328*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38328*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12777:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x77a646 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e77a646; op2val:0x0;
op3val:0x17fc000; valaddr_reg:x3; val_offset:38331*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38331*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12778:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x77a646 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e77a646; op2val:0x0;
op3val:0x17fe000; valaddr_reg:x3; val_offset:38334*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38334*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12779:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x77a646 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e77a646; op2val:0x0;
op3val:0x17ff000; valaddr_reg:x3; val_offset:38337*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38337*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12780:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x77a646 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e77a646; op2val:0x0;
op3val:0x17ff800; valaddr_reg:x3; val_offset:38340*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38340*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12781:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x77a646 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e77a646; op2val:0x0;
op3val:0x17ffc00; valaddr_reg:x3; val_offset:38343*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38343*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12782:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x77a646 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e77a646; op2val:0x0;
op3val:0x17ffe00; valaddr_reg:x3; val_offset:38346*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38346*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12783:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x77a646 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e77a646; op2val:0x0;
op3val:0x17fff00; valaddr_reg:x3; val_offset:38349*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38349*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12784:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x77a646 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e77a646; op2val:0x0;
op3val:0x17fff80; valaddr_reg:x3; val_offset:38352*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38352*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12785:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x77a646 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e77a646; op2val:0x0;
op3val:0x17fffc0; valaddr_reg:x3; val_offset:38355*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38355*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12786:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x77a646 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e77a646; op2val:0x0;
op3val:0x17fffe0; valaddr_reg:x3; val_offset:38358*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38358*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12787:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x77a646 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e77a646; op2val:0x0;
op3val:0x17ffff0; valaddr_reg:x3; val_offset:38361*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38361*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12788:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x77a646 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e77a646; op2val:0x0;
op3val:0x17ffff8; valaddr_reg:x3; val_offset:38364*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38364*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12789:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x77a646 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e77a646; op2val:0x0;
op3val:0x17ffffc; valaddr_reg:x3; val_offset:38367*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38367*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12790:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x77a646 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e77a646; op2val:0x0;
op3val:0x17ffffe; valaddr_reg:x3; val_offset:38370*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38370*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12791:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x77a646 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e77a646; op2val:0x0;
op3val:0x17fffff; valaddr_reg:x3; val_offset:38373*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38373*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12792:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7914db and fs2 == 0 and fe2 == 0x01 and fm2 == 0x038e2b and fs3 == 0 and fe3 == 0x55 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7914db; op2val:0x838e2b;
op3val:0x2a800000; valaddr_reg:x3; val_offset:38376*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38376*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12793:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7914db and fs2 == 0 and fe2 == 0x01 and fm2 == 0x038e2b and fs3 == 0 and fe3 == 0x55 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7914db; op2val:0x838e2b;
op3val:0x2a800001; valaddr_reg:x3; val_offset:38379*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38379*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12794:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7914db and fs2 == 0 and fe2 == 0x01 and fm2 == 0x038e2b and fs3 == 0 and fe3 == 0x55 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7914db; op2val:0x838e2b;
op3val:0x2a800003; valaddr_reg:x3; val_offset:38382*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38382*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12795:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7914db and fs2 == 0 and fe2 == 0x01 and fm2 == 0x038e2b and fs3 == 0 and fe3 == 0x55 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7914db; op2val:0x838e2b;
op3val:0x2a800007; valaddr_reg:x3; val_offset:38385*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38385*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12796:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7914db and fs2 == 0 and fe2 == 0x01 and fm2 == 0x038e2b and fs3 == 0 and fe3 == 0x55 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7914db; op2val:0x838e2b;
op3val:0x2a80000f; valaddr_reg:x3; val_offset:38388*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38388*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12797:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7914db and fs2 == 0 and fe2 == 0x01 and fm2 == 0x038e2b and fs3 == 0 and fe3 == 0x55 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7914db; op2val:0x838e2b;
op3val:0x2a80001f; valaddr_reg:x3; val_offset:38391*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38391*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12798:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7914db and fs2 == 0 and fe2 == 0x01 and fm2 == 0x038e2b and fs3 == 0 and fe3 == 0x55 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7914db; op2val:0x838e2b;
op3val:0x2a80003f; valaddr_reg:x3; val_offset:38394*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38394*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12799:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7914db and fs2 == 0 and fe2 == 0x01 and fm2 == 0x038e2b and fs3 == 0 and fe3 == 0x55 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7914db; op2val:0x838e2b;
op3val:0x2a80007f; valaddr_reg:x3; val_offset:38397*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38397*0 + 3*99*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2121680507,32,FLEN)
NAN_BOXED(3229945320,32,FLEN)
NAN_BOXED(3741319183,32,FLEN)
NAN_BOXED(2121680507,32,FLEN)
NAN_BOXED(3229945320,32,FLEN)
NAN_BOXED(3741319199,32,FLEN)
NAN_BOXED(2121680507,32,FLEN)
NAN_BOXED(3229945320,32,FLEN)
NAN_BOXED(3741319231,32,FLEN)
NAN_BOXED(2121680507,32,FLEN)
NAN_BOXED(3229945320,32,FLEN)
NAN_BOXED(3741319295,32,FLEN)
NAN_BOXED(2121680507,32,FLEN)
NAN_BOXED(3229945320,32,FLEN)
NAN_BOXED(3741319423,32,FLEN)
NAN_BOXED(2121680507,32,FLEN)
NAN_BOXED(3229945320,32,FLEN)
NAN_BOXED(3741319679,32,FLEN)
NAN_BOXED(2121680507,32,FLEN)
NAN_BOXED(3229945320,32,FLEN)
NAN_BOXED(3741320191,32,FLEN)
NAN_BOXED(2121680507,32,FLEN)
NAN_BOXED(3229945320,32,FLEN)
NAN_BOXED(3741321215,32,FLEN)
NAN_BOXED(2121680507,32,FLEN)
NAN_BOXED(3229945320,32,FLEN)
NAN_BOXED(3741323263,32,FLEN)
NAN_BOXED(2121680507,32,FLEN)
NAN_BOXED(3229945320,32,FLEN)
NAN_BOXED(3741327359,32,FLEN)
NAN_BOXED(2121680507,32,FLEN)
NAN_BOXED(3229945320,32,FLEN)
NAN_BOXED(3741335551,32,FLEN)
NAN_BOXED(2121680507,32,FLEN)
NAN_BOXED(3229945320,32,FLEN)
NAN_BOXED(3741351935,32,FLEN)
NAN_BOXED(2121680507,32,FLEN)
NAN_BOXED(3229945320,32,FLEN)
NAN_BOXED(3741384703,32,FLEN)
NAN_BOXED(2121680507,32,FLEN)
NAN_BOXED(3229945320,32,FLEN)
NAN_BOXED(3741450239,32,FLEN)
NAN_BOXED(2121680507,32,FLEN)
NAN_BOXED(3229945320,32,FLEN)
NAN_BOXED(3741581311,32,FLEN)
NAN_BOXED(2121680507,32,FLEN)
NAN_BOXED(3229945320,32,FLEN)
NAN_BOXED(3741843455,32,FLEN)
NAN_BOXED(2121680507,32,FLEN)
NAN_BOXED(3229945320,32,FLEN)
NAN_BOXED(3742367743,32,FLEN)
NAN_BOXED(2121680507,32,FLEN)
NAN_BOXED(3229945320,32,FLEN)
NAN_BOXED(3743416319,32,FLEN)
NAN_BOXED(2121680507,32,FLEN)
NAN_BOXED(3229945320,32,FLEN)
NAN_BOXED(3745513471,32,FLEN)
NAN_BOXED(2121680507,32,FLEN)
NAN_BOXED(3229945320,32,FLEN)
NAN_BOXED(3745513472,32,FLEN)
NAN_BOXED(2121680507,32,FLEN)
NAN_BOXED(3229945320,32,FLEN)
NAN_BOXED(3747610624,32,FLEN)
NAN_BOXED(2121680507,32,FLEN)
NAN_BOXED(3229945320,32,FLEN)
NAN_BOXED(3748659200,32,FLEN)
NAN_BOXED(2121680507,32,FLEN)
NAN_BOXED(3229945320,32,FLEN)
NAN_BOXED(3749183488,32,FLEN)
NAN_BOXED(2121680507,32,FLEN)
NAN_BOXED(3229945320,32,FLEN)
NAN_BOXED(3749445632,32,FLEN)
NAN_BOXED(2121680507,32,FLEN)
NAN_BOXED(3229945320,32,FLEN)
NAN_BOXED(3749576704,32,FLEN)
NAN_BOXED(2121680507,32,FLEN)
NAN_BOXED(3229945320,32,FLEN)
NAN_BOXED(3749642240,32,FLEN)
NAN_BOXED(2121680507,32,FLEN)
NAN_BOXED(3229945320,32,FLEN)
NAN_BOXED(3749675008,32,FLEN)
NAN_BOXED(2121680507,32,FLEN)
NAN_BOXED(3229945320,32,FLEN)
NAN_BOXED(3749691392,32,FLEN)
NAN_BOXED(2121680507,32,FLEN)
NAN_BOXED(3229945320,32,FLEN)
NAN_BOXED(3749699584,32,FLEN)
NAN_BOXED(2121680507,32,FLEN)
NAN_BOXED(3229945320,32,FLEN)
NAN_BOXED(3749703680,32,FLEN)
NAN_BOXED(2121680507,32,FLEN)
NAN_BOXED(3229945320,32,FLEN)
NAN_BOXED(3749705728,32,FLEN)
NAN_BOXED(2121680507,32,FLEN)
NAN_BOXED(3229945320,32,FLEN)
NAN_BOXED(3749706752,32,FLEN)
NAN_BOXED(2121680507,32,FLEN)
NAN_BOXED(3229945320,32,FLEN)
NAN_BOXED(3749707264,32,FLEN)
NAN_BOXED(2121680507,32,FLEN)
NAN_BOXED(3229945320,32,FLEN)
NAN_BOXED(3749707520,32,FLEN)
NAN_BOXED(2121680507,32,FLEN)
NAN_BOXED(3229945320,32,FLEN)
NAN_BOXED(3749707648,32,FLEN)
NAN_BOXED(2121680507,32,FLEN)
NAN_BOXED(3229945320,32,FLEN)
NAN_BOXED(3749707712,32,FLEN)
NAN_BOXED(2121680507,32,FLEN)
NAN_BOXED(3229945320,32,FLEN)
NAN_BOXED(3749707744,32,FLEN)
NAN_BOXED(2121680507,32,FLEN)
NAN_BOXED(3229945320,32,FLEN)
NAN_BOXED(3749707760,32,FLEN)
NAN_BOXED(2121680507,32,FLEN)
NAN_BOXED(3229945320,32,FLEN)
NAN_BOXED(3749707768,32,FLEN)
NAN_BOXED(2121680507,32,FLEN)
NAN_BOXED(3229945320,32,FLEN)
NAN_BOXED(3749707772,32,FLEN)
NAN_BOXED(2121680507,32,FLEN)
NAN_BOXED(3229945320,32,FLEN)
NAN_BOXED(3749707774,32,FLEN)
NAN_BOXED(2121680507,32,FLEN)
NAN_BOXED(3229945320,32,FLEN)
NAN_BOXED(3749707775,32,FLEN)
NAN_BOXED(2121680507,32,FLEN)
NAN_BOXED(3229945320,32,FLEN)
NAN_BOXED(4278190081,32,FLEN)
NAN_BOXED(2121680507,32,FLEN)
NAN_BOXED(3229945320,32,FLEN)
NAN_BOXED(4278190083,32,FLEN)
NAN_BOXED(2121680507,32,FLEN)
NAN_BOXED(3229945320,32,FLEN)
NAN_BOXED(4278190087,32,FLEN)
NAN_BOXED(2121680507,32,FLEN)
NAN_BOXED(3229945320,32,FLEN)
NAN_BOXED(4279867801,32,FLEN)
NAN_BOXED(2121680507,32,FLEN)
NAN_BOXED(3229945320,32,FLEN)
NAN_BOXED(4280586825,32,FLEN)
NAN_BOXED(2121680507,32,FLEN)
NAN_BOXED(3229945320,32,FLEN)
NAN_BOXED(4281545523,32,FLEN)
NAN_BOXED(2121680507,32,FLEN)
NAN_BOXED(3229945320,32,FLEN)
NAN_BOXED(4281785197,32,FLEN)
NAN_BOXED(2121680507,32,FLEN)
NAN_BOXED(3229945320,32,FLEN)
NAN_BOXED(4282104763,32,FLEN)
NAN_BOXED(2121680507,32,FLEN)
NAN_BOXED(3229945320,32,FLEN)
NAN_BOXED(4282664004,32,FLEN)
NAN_BOXED(2121680507,32,FLEN)
NAN_BOXED(3229945320,32,FLEN)
NAN_BOXED(4283223244,32,FLEN)
NAN_BOXED(2121680507,32,FLEN)
NAN_BOXED(3229945320,32,FLEN)
NAN_BOXED(4284181942,32,FLEN)
NAN_BOXED(2121680507,32,FLEN)
NAN_BOXED(3229945320,32,FLEN)
NAN_BOXED(4284900966,32,FLEN)
NAN_BOXED(2121680507,32,FLEN)
NAN_BOXED(3229945320,32,FLEN)
NAN_BOXED(4285380315,32,FLEN)
NAN_BOXED(2121680507,32,FLEN)
NAN_BOXED(3229945320,32,FLEN)
NAN_BOXED(4286578680,32,FLEN)
NAN_BOXED(2121680507,32,FLEN)
NAN_BOXED(3229945320,32,FLEN)
NAN_BOXED(4286578684,32,FLEN)
NAN_BOXED(2121680507,32,FLEN)
NAN_BOXED(3229945320,32,FLEN)
NAN_BOXED(4286578686,32,FLEN)
NAN_BOXED(2121770566,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2121770566,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3,32,FLEN)
NAN_BOXED(2121770566,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7,32,FLEN)
NAN_BOXED(2121770566,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1677721,32,FLEN)
NAN_BOXED(2121770566,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2396745,32,FLEN)
NAN_BOXED(2121770566,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3355443,32,FLEN)
NAN_BOXED(2121770566,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3595117,32,FLEN)
NAN_BOXED(2121770566,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3914683,32,FLEN)
NAN_BOXED(2121770566,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4473924,32,FLEN)
NAN_BOXED(2121770566,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5033164,32,FLEN)
NAN_BOXED(2121770566,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5991862,32,FLEN)
NAN_BOXED(2121770566,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(6710886,32,FLEN)
NAN_BOXED(2121770566,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7190235,32,FLEN)
NAN_BOXED(2121770566,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388600,32,FLEN)
NAN_BOXED(2121770566,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388604,32,FLEN)
NAN_BOXED(2121770566,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388606,32,FLEN)
NAN_BOXED(2121770566,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777216,32,FLEN)
NAN_BOXED(2121770566,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777217,32,FLEN)
NAN_BOXED(2121770566,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777219,32,FLEN)
NAN_BOXED(2121770566,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777223,32,FLEN)
NAN_BOXED(2121770566,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777231,32,FLEN)
NAN_BOXED(2121770566,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777247,32,FLEN)
NAN_BOXED(2121770566,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777279,32,FLEN)
NAN_BOXED(2121770566,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777343,32,FLEN)
NAN_BOXED(2121770566,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777471,32,FLEN)
NAN_BOXED(2121770566,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777727,32,FLEN)
NAN_BOXED(2121770566,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16778239,32,FLEN)
NAN_BOXED(2121770566,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16779263,32,FLEN)
NAN_BOXED(2121770566,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16781311,32,FLEN)
NAN_BOXED(2121770566,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16785407,32,FLEN)
NAN_BOXED(2121770566,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16793599,32,FLEN)
NAN_BOXED(2121770566,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16809983,32,FLEN)
NAN_BOXED(2121770566,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16842751,32,FLEN)
NAN_BOXED(2121770566,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16908287,32,FLEN)
NAN_BOXED(2121770566,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(17039359,32,FLEN)
NAN_BOXED(2121770566,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(17301503,32,FLEN)
NAN_BOXED(2121770566,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(17825791,32,FLEN)
NAN_BOXED(2121770566,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(18874367,32,FLEN)
NAN_BOXED(2121770566,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(20971519,32,FLEN)
NAN_BOXED(2121770566,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(20971520,32,FLEN)
NAN_BOXED(2121770566,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(23068672,32,FLEN)
NAN_BOXED(2121770566,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(24117248,32,FLEN)
NAN_BOXED(2121770566,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(24641536,32,FLEN)
NAN_BOXED(2121770566,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(24903680,32,FLEN)
NAN_BOXED(2121770566,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25034752,32,FLEN)
NAN_BOXED(2121770566,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25100288,32,FLEN)
NAN_BOXED(2121770566,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25133056,32,FLEN)
NAN_BOXED(2121770566,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25149440,32,FLEN)
NAN_BOXED(2121770566,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25157632,32,FLEN)
NAN_BOXED(2121770566,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25161728,32,FLEN)
NAN_BOXED(2121770566,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25163776,32,FLEN)
NAN_BOXED(2121770566,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25164800,32,FLEN)
NAN_BOXED(2121770566,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25165312,32,FLEN)
NAN_BOXED(2121770566,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25165568,32,FLEN)
NAN_BOXED(2121770566,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25165696,32,FLEN)
NAN_BOXED(2121770566,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25165760,32,FLEN)
NAN_BOXED(2121770566,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25165792,32,FLEN)
NAN_BOXED(2121770566,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25165808,32,FLEN)
NAN_BOXED(2121770566,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25165816,32,FLEN)
NAN_BOXED(2121770566,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25165820,32,FLEN)
NAN_BOXED(2121770566,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25165822,32,FLEN)
NAN_BOXED(2121770566,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25165823,32,FLEN)
NAN_BOXED(2121864411,32,FLEN)
NAN_BOXED(8621611,32,FLEN)
NAN_BOXED(713031680,32,FLEN)
NAN_BOXED(2121864411,32,FLEN)
NAN_BOXED(8621611,32,FLEN)
NAN_BOXED(713031681,32,FLEN)
NAN_BOXED(2121864411,32,FLEN)
NAN_BOXED(8621611,32,FLEN)
NAN_BOXED(713031683,32,FLEN)
NAN_BOXED(2121864411,32,FLEN)
NAN_BOXED(8621611,32,FLEN)
NAN_BOXED(713031687,32,FLEN)
NAN_BOXED(2121864411,32,FLEN)
NAN_BOXED(8621611,32,FLEN)
NAN_BOXED(713031695,32,FLEN)
NAN_BOXED(2121864411,32,FLEN)
NAN_BOXED(8621611,32,FLEN)
NAN_BOXED(713031711,32,FLEN)
NAN_BOXED(2121864411,32,FLEN)
NAN_BOXED(8621611,32,FLEN)
NAN_BOXED(713031743,32,FLEN)
NAN_BOXED(2121864411,32,FLEN)
NAN_BOXED(8621611,32,FLEN)
NAN_BOXED(713031807,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
