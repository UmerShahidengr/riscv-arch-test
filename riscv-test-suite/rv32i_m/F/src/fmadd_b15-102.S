
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:17:59 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_12928:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x79c1c6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e79c1c6; op2val:0x80000000;
op3val:0x806db6db; valaddr_reg:x3; val_offset:38784*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38784*0 + 3*101*FLEN/8, x4, x1, x2)

inst_12929:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x79c1c6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e79c1c6; op2val:0x80000000;
op3val:0x807ffff8; valaddr_reg:x3; val_offset:38787*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38787*0 + 3*101*FLEN/8, x4, x1, x2)

inst_12930:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x79c1c6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e79c1c6; op2val:0x80000000;
op3val:0x807ffffc; valaddr_reg:x3; val_offset:38790*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38790*0 + 3*101*FLEN/8, x4, x1, x2)

inst_12931:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x79c1c6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e79c1c6; op2val:0x80000000;
op3val:0x807ffffe; valaddr_reg:x3; val_offset:38793*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38793*0 + 3*101*FLEN/8, x4, x1, x2)

inst_12932:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x79c1c6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e79c1c6; op2val:0x80000000;
op3val:0x83000000; valaddr_reg:x3; val_offset:38796*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38796*0 + 3*101*FLEN/8, x4, x1, x2)

inst_12933:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x79c1c6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e79c1c6; op2val:0x80000000;
op3val:0x83000001; valaddr_reg:x3; val_offset:38799*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38799*0 + 3*101*FLEN/8, x4, x1, x2)

inst_12934:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x79c1c6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e79c1c6; op2val:0x80000000;
op3val:0x83000003; valaddr_reg:x3; val_offset:38802*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38802*0 + 3*101*FLEN/8, x4, x1, x2)

inst_12935:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x79c1c6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e79c1c6; op2val:0x80000000;
op3val:0x83000007; valaddr_reg:x3; val_offset:38805*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38805*0 + 3*101*FLEN/8, x4, x1, x2)

inst_12936:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x79c1c6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e79c1c6; op2val:0x80000000;
op3val:0x8300000f; valaddr_reg:x3; val_offset:38808*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38808*0 + 3*101*FLEN/8, x4, x1, x2)

inst_12937:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x79c1c6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e79c1c6; op2val:0x80000000;
op3val:0x8300001f; valaddr_reg:x3; val_offset:38811*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38811*0 + 3*101*FLEN/8, x4, x1, x2)

inst_12938:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x79c1c6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e79c1c6; op2val:0x80000000;
op3val:0x8300003f; valaddr_reg:x3; val_offset:38814*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38814*0 + 3*101*FLEN/8, x4, x1, x2)

inst_12939:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x79c1c6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e79c1c6; op2val:0x80000000;
op3val:0x8300007f; valaddr_reg:x3; val_offset:38817*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38817*0 + 3*101*FLEN/8, x4, x1, x2)

inst_12940:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x79c1c6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e79c1c6; op2val:0x80000000;
op3val:0x830000ff; valaddr_reg:x3; val_offset:38820*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38820*0 + 3*101*FLEN/8, x4, x1, x2)

inst_12941:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x79c1c6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e79c1c6; op2val:0x80000000;
op3val:0x830001ff; valaddr_reg:x3; val_offset:38823*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38823*0 + 3*101*FLEN/8, x4, x1, x2)

inst_12942:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x79c1c6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e79c1c6; op2val:0x80000000;
op3val:0x830003ff; valaddr_reg:x3; val_offset:38826*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38826*0 + 3*101*FLEN/8, x4, x1, x2)

inst_12943:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x79c1c6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e79c1c6; op2val:0x80000000;
op3val:0x830007ff; valaddr_reg:x3; val_offset:38829*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38829*0 + 3*101*FLEN/8, x4, x1, x2)

inst_12944:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x79c1c6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e79c1c6; op2val:0x80000000;
op3val:0x83000fff; valaddr_reg:x3; val_offset:38832*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38832*0 + 3*101*FLEN/8, x4, x1, x2)

inst_12945:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x79c1c6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e79c1c6; op2val:0x80000000;
op3val:0x83001fff; valaddr_reg:x3; val_offset:38835*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38835*0 + 3*101*FLEN/8, x4, x1, x2)

inst_12946:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x79c1c6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e79c1c6; op2val:0x80000000;
op3val:0x83003fff; valaddr_reg:x3; val_offset:38838*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38838*0 + 3*101*FLEN/8, x4, x1, x2)

inst_12947:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x79c1c6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e79c1c6; op2val:0x80000000;
op3val:0x83007fff; valaddr_reg:x3; val_offset:38841*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38841*0 + 3*101*FLEN/8, x4, x1, x2)

inst_12948:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x79c1c6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e79c1c6; op2val:0x80000000;
op3val:0x8300ffff; valaddr_reg:x3; val_offset:38844*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38844*0 + 3*101*FLEN/8, x4, x1, x2)

inst_12949:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x79c1c6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e79c1c6; op2val:0x80000000;
op3val:0x8301ffff; valaddr_reg:x3; val_offset:38847*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38847*0 + 3*101*FLEN/8, x4, x1, x2)

inst_12950:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x79c1c6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e79c1c6; op2val:0x80000000;
op3val:0x8303ffff; valaddr_reg:x3; val_offset:38850*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38850*0 + 3*101*FLEN/8, x4, x1, x2)

inst_12951:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x79c1c6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e79c1c6; op2val:0x80000000;
op3val:0x8307ffff; valaddr_reg:x3; val_offset:38853*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38853*0 + 3*101*FLEN/8, x4, x1, x2)

inst_12952:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x79c1c6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e79c1c6; op2val:0x80000000;
op3val:0x830fffff; valaddr_reg:x3; val_offset:38856*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38856*0 + 3*101*FLEN/8, x4, x1, x2)

inst_12953:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x79c1c6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e79c1c6; op2val:0x80000000;
op3val:0x831fffff; valaddr_reg:x3; val_offset:38859*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38859*0 + 3*101*FLEN/8, x4, x1, x2)

inst_12954:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x79c1c6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e79c1c6; op2val:0x80000000;
op3val:0x833fffff; valaddr_reg:x3; val_offset:38862*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38862*0 + 3*101*FLEN/8, x4, x1, x2)

inst_12955:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x79c1c6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e79c1c6; op2val:0x80000000;
op3val:0x83400000; valaddr_reg:x3; val_offset:38865*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38865*0 + 3*101*FLEN/8, x4, x1, x2)

inst_12956:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x79c1c6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e79c1c6; op2val:0x80000000;
op3val:0x83600000; valaddr_reg:x3; val_offset:38868*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38868*0 + 3*101*FLEN/8, x4, x1, x2)

inst_12957:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x79c1c6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e79c1c6; op2val:0x80000000;
op3val:0x83700000; valaddr_reg:x3; val_offset:38871*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38871*0 + 3*101*FLEN/8, x4, x1, x2)

inst_12958:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x79c1c6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e79c1c6; op2val:0x80000000;
op3val:0x83780000; valaddr_reg:x3; val_offset:38874*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38874*0 + 3*101*FLEN/8, x4, x1, x2)

inst_12959:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x79c1c6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e79c1c6; op2val:0x80000000;
op3val:0x837c0000; valaddr_reg:x3; val_offset:38877*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38877*0 + 3*101*FLEN/8, x4, x1, x2)

inst_12960:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x79c1c6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e79c1c6; op2val:0x80000000;
op3val:0x837e0000; valaddr_reg:x3; val_offset:38880*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38880*0 + 3*101*FLEN/8, x4, x1, x2)

inst_12961:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x79c1c6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e79c1c6; op2val:0x80000000;
op3val:0x837f0000; valaddr_reg:x3; val_offset:38883*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38883*0 + 3*101*FLEN/8, x4, x1, x2)

inst_12962:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x79c1c6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e79c1c6; op2val:0x80000000;
op3val:0x837f8000; valaddr_reg:x3; val_offset:38886*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38886*0 + 3*101*FLEN/8, x4, x1, x2)

inst_12963:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x79c1c6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e79c1c6; op2val:0x80000000;
op3val:0x837fc000; valaddr_reg:x3; val_offset:38889*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38889*0 + 3*101*FLEN/8, x4, x1, x2)

inst_12964:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x79c1c6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e79c1c6; op2val:0x80000000;
op3val:0x837fe000; valaddr_reg:x3; val_offset:38892*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38892*0 + 3*101*FLEN/8, x4, x1, x2)

inst_12965:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x79c1c6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e79c1c6; op2val:0x80000000;
op3val:0x837ff000; valaddr_reg:x3; val_offset:38895*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38895*0 + 3*101*FLEN/8, x4, x1, x2)

inst_12966:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x79c1c6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e79c1c6; op2val:0x80000000;
op3val:0x837ff800; valaddr_reg:x3; val_offset:38898*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38898*0 + 3*101*FLEN/8, x4, x1, x2)

inst_12967:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x79c1c6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e79c1c6; op2val:0x80000000;
op3val:0x837ffc00; valaddr_reg:x3; val_offset:38901*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38901*0 + 3*101*FLEN/8, x4, x1, x2)

inst_12968:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x79c1c6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e79c1c6; op2val:0x80000000;
op3val:0x837ffe00; valaddr_reg:x3; val_offset:38904*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38904*0 + 3*101*FLEN/8, x4, x1, x2)

inst_12969:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x79c1c6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e79c1c6; op2val:0x80000000;
op3val:0x837fff00; valaddr_reg:x3; val_offset:38907*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38907*0 + 3*101*FLEN/8, x4, x1, x2)

inst_12970:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x79c1c6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e79c1c6; op2val:0x80000000;
op3val:0x837fff80; valaddr_reg:x3; val_offset:38910*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38910*0 + 3*101*FLEN/8, x4, x1, x2)

inst_12971:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x79c1c6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e79c1c6; op2val:0x80000000;
op3val:0x837fffc0; valaddr_reg:x3; val_offset:38913*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38913*0 + 3*101*FLEN/8, x4, x1, x2)

inst_12972:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x79c1c6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e79c1c6; op2val:0x80000000;
op3val:0x837fffe0; valaddr_reg:x3; val_offset:38916*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38916*0 + 3*101*FLEN/8, x4, x1, x2)

inst_12973:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x79c1c6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e79c1c6; op2val:0x80000000;
op3val:0x837ffff0; valaddr_reg:x3; val_offset:38919*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38919*0 + 3*101*FLEN/8, x4, x1, x2)

inst_12974:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x79c1c6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e79c1c6; op2val:0x80000000;
op3val:0x837ffff8; valaddr_reg:x3; val_offset:38922*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38922*0 + 3*101*FLEN/8, x4, x1, x2)

inst_12975:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x79c1c6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e79c1c6; op2val:0x80000000;
op3val:0x837ffffc; valaddr_reg:x3; val_offset:38925*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38925*0 + 3*101*FLEN/8, x4, x1, x2)

inst_12976:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x79c1c6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e79c1c6; op2val:0x80000000;
op3val:0x837ffffe; valaddr_reg:x3; val_offset:38928*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38928*0 + 3*101*FLEN/8, x4, x1, x2)

inst_12977:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x79c1c6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e79c1c6; op2val:0x80000000;
op3val:0x837fffff; valaddr_reg:x3; val_offset:38931*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38931*0 + 3*101*FLEN/8, x4, x1, x2)

inst_12978:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7a532d and fs2 == 1 and fe2 == 0x01 and fm2 == 0x02e6e1 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7a532d; op2val:0x8082e6e1;
op3val:0xaf800000; valaddr_reg:x3; val_offset:38934*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38934*0 + 3*101*FLEN/8, x4, x1, x2)

inst_12979:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7a532d and fs2 == 1 and fe2 == 0x01 and fm2 == 0x02e6e1 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7a532d; op2val:0x8082e6e1;
op3val:0xaf800001; valaddr_reg:x3; val_offset:38937*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38937*0 + 3*101*FLEN/8, x4, x1, x2)

inst_12980:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7a532d and fs2 == 1 and fe2 == 0x01 and fm2 == 0x02e6e1 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7a532d; op2val:0x8082e6e1;
op3val:0xaf800003; valaddr_reg:x3; val_offset:38940*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38940*0 + 3*101*FLEN/8, x4, x1, x2)

inst_12981:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7a532d and fs2 == 1 and fe2 == 0x01 and fm2 == 0x02e6e1 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7a532d; op2val:0x8082e6e1;
op3val:0xaf800007; valaddr_reg:x3; val_offset:38943*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38943*0 + 3*101*FLEN/8, x4, x1, x2)

inst_12982:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7a532d and fs2 == 1 and fe2 == 0x01 and fm2 == 0x02e6e1 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7a532d; op2val:0x8082e6e1;
op3val:0xaf80000f; valaddr_reg:x3; val_offset:38946*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38946*0 + 3*101*FLEN/8, x4, x1, x2)

inst_12983:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7a532d and fs2 == 1 and fe2 == 0x01 and fm2 == 0x02e6e1 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7a532d; op2val:0x8082e6e1;
op3val:0xaf80001f; valaddr_reg:x3; val_offset:38949*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38949*0 + 3*101*FLEN/8, x4, x1, x2)

inst_12984:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7a532d and fs2 == 1 and fe2 == 0x01 and fm2 == 0x02e6e1 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7a532d; op2val:0x8082e6e1;
op3val:0xaf80003f; valaddr_reg:x3; val_offset:38952*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38952*0 + 3*101*FLEN/8, x4, x1, x2)

inst_12985:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7a532d and fs2 == 1 and fe2 == 0x01 and fm2 == 0x02e6e1 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7a532d; op2val:0x8082e6e1;
op3val:0xaf80007f; valaddr_reg:x3; val_offset:38955*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38955*0 + 3*101*FLEN/8, x4, x1, x2)

inst_12986:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7a532d and fs2 == 1 and fe2 == 0x01 and fm2 == 0x02e6e1 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7a532d; op2val:0x8082e6e1;
op3val:0xaf8000ff; valaddr_reg:x3; val_offset:38958*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38958*0 + 3*101*FLEN/8, x4, x1, x2)

inst_12987:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7a532d and fs2 == 1 and fe2 == 0x01 and fm2 == 0x02e6e1 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7a532d; op2val:0x8082e6e1;
op3val:0xaf8001ff; valaddr_reg:x3; val_offset:38961*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38961*0 + 3*101*FLEN/8, x4, x1, x2)

inst_12988:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7a532d and fs2 == 1 and fe2 == 0x01 and fm2 == 0x02e6e1 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7a532d; op2val:0x8082e6e1;
op3val:0xaf8003ff; valaddr_reg:x3; val_offset:38964*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38964*0 + 3*101*FLEN/8, x4, x1, x2)

inst_12989:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7a532d and fs2 == 1 and fe2 == 0x01 and fm2 == 0x02e6e1 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7a532d; op2val:0x8082e6e1;
op3val:0xaf8007ff; valaddr_reg:x3; val_offset:38967*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38967*0 + 3*101*FLEN/8, x4, x1, x2)

inst_12990:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7a532d and fs2 == 1 and fe2 == 0x01 and fm2 == 0x02e6e1 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7a532d; op2val:0x8082e6e1;
op3val:0xaf800fff; valaddr_reg:x3; val_offset:38970*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38970*0 + 3*101*FLEN/8, x4, x1, x2)

inst_12991:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7a532d and fs2 == 1 and fe2 == 0x01 and fm2 == 0x02e6e1 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7a532d; op2val:0x8082e6e1;
op3val:0xaf801fff; valaddr_reg:x3; val_offset:38973*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38973*0 + 3*101*FLEN/8, x4, x1, x2)

inst_12992:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7a532d and fs2 == 1 and fe2 == 0x01 and fm2 == 0x02e6e1 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7a532d; op2val:0x8082e6e1;
op3val:0xaf803fff; valaddr_reg:x3; val_offset:38976*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38976*0 + 3*101*FLEN/8, x4, x1, x2)

inst_12993:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7a532d and fs2 == 1 and fe2 == 0x01 and fm2 == 0x02e6e1 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7a532d; op2val:0x8082e6e1;
op3val:0xaf807fff; valaddr_reg:x3; val_offset:38979*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38979*0 + 3*101*FLEN/8, x4, x1, x2)

inst_12994:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7a532d and fs2 == 1 and fe2 == 0x01 and fm2 == 0x02e6e1 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7a532d; op2val:0x8082e6e1;
op3val:0xaf80ffff; valaddr_reg:x3; val_offset:38982*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38982*0 + 3*101*FLEN/8, x4, x1, x2)

inst_12995:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7a532d and fs2 == 1 and fe2 == 0x01 and fm2 == 0x02e6e1 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7a532d; op2val:0x8082e6e1;
op3val:0xaf81ffff; valaddr_reg:x3; val_offset:38985*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38985*0 + 3*101*FLEN/8, x4, x1, x2)

inst_12996:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7a532d and fs2 == 1 and fe2 == 0x01 and fm2 == 0x02e6e1 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7a532d; op2val:0x8082e6e1;
op3val:0xaf83ffff; valaddr_reg:x3; val_offset:38988*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38988*0 + 3*101*FLEN/8, x4, x1, x2)

inst_12997:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7a532d and fs2 == 1 and fe2 == 0x01 and fm2 == 0x02e6e1 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7a532d; op2val:0x8082e6e1;
op3val:0xaf87ffff; valaddr_reg:x3; val_offset:38991*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38991*0 + 3*101*FLEN/8, x4, x1, x2)

inst_12998:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7a532d and fs2 == 1 and fe2 == 0x01 and fm2 == 0x02e6e1 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7a532d; op2val:0x8082e6e1;
op3val:0xaf8fffff; valaddr_reg:x3; val_offset:38994*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38994*0 + 3*101*FLEN/8, x4, x1, x2)

inst_12999:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7a532d and fs2 == 1 and fe2 == 0x01 and fm2 == 0x02e6e1 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7a532d; op2val:0x8082e6e1;
op3val:0xaf9fffff; valaddr_reg:x3; val_offset:38997*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38997*0 + 3*101*FLEN/8, x4, x1, x2)

inst_13000:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7a532d and fs2 == 1 and fe2 == 0x01 and fm2 == 0x02e6e1 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7a532d; op2val:0x8082e6e1;
op3val:0xafbfffff; valaddr_reg:x3; val_offset:39000*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39000*0 + 3*101*FLEN/8, x4, x1, x2)

inst_13001:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7a532d and fs2 == 1 and fe2 == 0x01 and fm2 == 0x02e6e1 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7a532d; op2val:0x8082e6e1;
op3val:0xafc00000; valaddr_reg:x3; val_offset:39003*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39003*0 + 3*101*FLEN/8, x4, x1, x2)

inst_13002:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7a532d and fs2 == 1 and fe2 == 0x01 and fm2 == 0x02e6e1 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7a532d; op2val:0x8082e6e1;
op3val:0xafe00000; valaddr_reg:x3; val_offset:39006*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39006*0 + 3*101*FLEN/8, x4, x1, x2)

inst_13003:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7a532d and fs2 == 1 and fe2 == 0x01 and fm2 == 0x02e6e1 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7a532d; op2val:0x8082e6e1;
op3val:0xaff00000; valaddr_reg:x3; val_offset:39009*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39009*0 + 3*101*FLEN/8, x4, x1, x2)

inst_13004:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7a532d and fs2 == 1 and fe2 == 0x01 and fm2 == 0x02e6e1 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7a532d; op2val:0x8082e6e1;
op3val:0xaff80000; valaddr_reg:x3; val_offset:39012*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39012*0 + 3*101*FLEN/8, x4, x1, x2)

inst_13005:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7a532d and fs2 == 1 and fe2 == 0x01 and fm2 == 0x02e6e1 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7a532d; op2val:0x8082e6e1;
op3val:0xaffc0000; valaddr_reg:x3; val_offset:39015*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39015*0 + 3*101*FLEN/8, x4, x1, x2)

inst_13006:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7a532d and fs2 == 1 and fe2 == 0x01 and fm2 == 0x02e6e1 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7a532d; op2val:0x8082e6e1;
op3val:0xaffe0000; valaddr_reg:x3; val_offset:39018*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39018*0 + 3*101*FLEN/8, x4, x1, x2)

inst_13007:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7a532d and fs2 == 1 and fe2 == 0x01 and fm2 == 0x02e6e1 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7a532d; op2val:0x8082e6e1;
op3val:0xafff0000; valaddr_reg:x3; val_offset:39021*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39021*0 + 3*101*FLEN/8, x4, x1, x2)

inst_13008:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7a532d and fs2 == 1 and fe2 == 0x01 and fm2 == 0x02e6e1 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7a532d; op2val:0x8082e6e1;
op3val:0xafff8000; valaddr_reg:x3; val_offset:39024*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39024*0 + 3*101*FLEN/8, x4, x1, x2)

inst_13009:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7a532d and fs2 == 1 and fe2 == 0x01 and fm2 == 0x02e6e1 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7a532d; op2val:0x8082e6e1;
op3val:0xafffc000; valaddr_reg:x3; val_offset:39027*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39027*0 + 3*101*FLEN/8, x4, x1, x2)

inst_13010:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7a532d and fs2 == 1 and fe2 == 0x01 and fm2 == 0x02e6e1 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7a532d; op2val:0x8082e6e1;
op3val:0xafffe000; valaddr_reg:x3; val_offset:39030*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39030*0 + 3*101*FLEN/8, x4, x1, x2)

inst_13011:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7a532d and fs2 == 1 and fe2 == 0x01 and fm2 == 0x02e6e1 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7a532d; op2val:0x8082e6e1;
op3val:0xaffff000; valaddr_reg:x3; val_offset:39033*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39033*0 + 3*101*FLEN/8, x4, x1, x2)

inst_13012:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7a532d and fs2 == 1 and fe2 == 0x01 and fm2 == 0x02e6e1 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7a532d; op2val:0x8082e6e1;
op3val:0xaffff800; valaddr_reg:x3; val_offset:39036*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39036*0 + 3*101*FLEN/8, x4, x1, x2)

inst_13013:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7a532d and fs2 == 1 and fe2 == 0x01 and fm2 == 0x02e6e1 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7a532d; op2val:0x8082e6e1;
op3val:0xaffffc00; valaddr_reg:x3; val_offset:39039*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39039*0 + 3*101*FLEN/8, x4, x1, x2)

inst_13014:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7a532d and fs2 == 1 and fe2 == 0x01 and fm2 == 0x02e6e1 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7a532d; op2val:0x8082e6e1;
op3val:0xaffffe00; valaddr_reg:x3; val_offset:39042*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39042*0 + 3*101*FLEN/8, x4, x1, x2)

inst_13015:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7a532d and fs2 == 1 and fe2 == 0x01 and fm2 == 0x02e6e1 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7a532d; op2val:0x8082e6e1;
op3val:0xafffff00; valaddr_reg:x3; val_offset:39045*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39045*0 + 3*101*FLEN/8, x4, x1, x2)

inst_13016:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7a532d and fs2 == 1 and fe2 == 0x01 and fm2 == 0x02e6e1 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7a532d; op2val:0x8082e6e1;
op3val:0xafffff80; valaddr_reg:x3; val_offset:39048*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39048*0 + 3*101*FLEN/8, x4, x1, x2)

inst_13017:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7a532d and fs2 == 1 and fe2 == 0x01 and fm2 == 0x02e6e1 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7a532d; op2val:0x8082e6e1;
op3val:0xafffffc0; valaddr_reg:x3; val_offset:39051*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39051*0 + 3*101*FLEN/8, x4, x1, x2)

inst_13018:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7a532d and fs2 == 1 and fe2 == 0x01 and fm2 == 0x02e6e1 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7a532d; op2val:0x8082e6e1;
op3val:0xafffffe0; valaddr_reg:x3; val_offset:39054*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39054*0 + 3*101*FLEN/8, x4, x1, x2)

inst_13019:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7a532d and fs2 == 1 and fe2 == 0x01 and fm2 == 0x02e6e1 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7a532d; op2val:0x8082e6e1;
op3val:0xaffffff0; valaddr_reg:x3; val_offset:39057*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39057*0 + 3*101*FLEN/8, x4, x1, x2)

inst_13020:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7a532d and fs2 == 1 and fe2 == 0x01 and fm2 == 0x02e6e1 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7a532d; op2val:0x8082e6e1;
op3val:0xaffffff8; valaddr_reg:x3; val_offset:39060*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39060*0 + 3*101*FLEN/8, x4, x1, x2)

inst_13021:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7a532d and fs2 == 1 and fe2 == 0x01 and fm2 == 0x02e6e1 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7a532d; op2val:0x8082e6e1;
op3val:0xaffffffc; valaddr_reg:x3; val_offset:39063*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39063*0 + 3*101*FLEN/8, x4, x1, x2)

inst_13022:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7a532d and fs2 == 1 and fe2 == 0x01 and fm2 == 0x02e6e1 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7a532d; op2val:0x8082e6e1;
op3val:0xaffffffe; valaddr_reg:x3; val_offset:39066*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39066*0 + 3*101*FLEN/8, x4, x1, x2)

inst_13023:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7a532d and fs2 == 1 and fe2 == 0x01 and fm2 == 0x02e6e1 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7a532d; op2val:0x8082e6e1;
op3val:0xafffffff; valaddr_reg:x3; val_offset:39069*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39069*0 + 3*101*FLEN/8, x4, x1, x2)

inst_13024:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7a532d and fs2 == 1 and fe2 == 0x01 and fm2 == 0x02e6e1 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7a532d; op2val:0x8082e6e1;
op3val:0xbf800001; valaddr_reg:x3; val_offset:39072*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39072*0 + 3*101*FLEN/8, x4, x1, x2)

inst_13025:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7a532d and fs2 == 1 and fe2 == 0x01 and fm2 == 0x02e6e1 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7a532d; op2val:0x8082e6e1;
op3val:0xbf800003; valaddr_reg:x3; val_offset:39075*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39075*0 + 3*101*FLEN/8, x4, x1, x2)

inst_13026:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7a532d and fs2 == 1 and fe2 == 0x01 and fm2 == 0x02e6e1 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7a532d; op2val:0x8082e6e1;
op3val:0xbf800007; valaddr_reg:x3; val_offset:39078*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39078*0 + 3*101*FLEN/8, x4, x1, x2)

inst_13027:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7a532d and fs2 == 1 and fe2 == 0x01 and fm2 == 0x02e6e1 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7a532d; op2val:0x8082e6e1;
op3val:0xbf999999; valaddr_reg:x3; val_offset:39081*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39081*0 + 3*101*FLEN/8, x4, x1, x2)

inst_13028:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7a532d and fs2 == 1 and fe2 == 0x01 and fm2 == 0x02e6e1 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7a532d; op2val:0x8082e6e1;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:39084*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39084*0 + 3*101*FLEN/8, x4, x1, x2)

inst_13029:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7a532d and fs2 == 1 and fe2 == 0x01 and fm2 == 0x02e6e1 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7a532d; op2val:0x8082e6e1;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:39087*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39087*0 + 3*101*FLEN/8, x4, x1, x2)

inst_13030:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7a532d and fs2 == 1 and fe2 == 0x01 and fm2 == 0x02e6e1 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7a532d; op2val:0x8082e6e1;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:39090*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39090*0 + 3*101*FLEN/8, x4, x1, x2)

inst_13031:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7a532d and fs2 == 1 and fe2 == 0x01 and fm2 == 0x02e6e1 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7a532d; op2val:0x8082e6e1;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:39093*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39093*0 + 3*101*FLEN/8, x4, x1, x2)

inst_13032:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7a532d and fs2 == 1 and fe2 == 0x01 and fm2 == 0x02e6e1 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7a532d; op2val:0x8082e6e1;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:39096*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39096*0 + 3*101*FLEN/8, x4, x1, x2)

inst_13033:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7a532d and fs2 == 1 and fe2 == 0x01 and fm2 == 0x02e6e1 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7a532d; op2val:0x8082e6e1;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:39099*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39099*0 + 3*101*FLEN/8, x4, x1, x2)

inst_13034:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7a532d and fs2 == 1 and fe2 == 0x01 and fm2 == 0x02e6e1 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7a532d; op2val:0x8082e6e1;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:39102*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39102*0 + 3*101*FLEN/8, x4, x1, x2)

inst_13035:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7a532d and fs2 == 1 and fe2 == 0x01 and fm2 == 0x02e6e1 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7a532d; op2val:0x8082e6e1;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:39105*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39105*0 + 3*101*FLEN/8, x4, x1, x2)

inst_13036:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7a532d and fs2 == 1 and fe2 == 0x01 and fm2 == 0x02e6e1 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7a532d; op2val:0x8082e6e1;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:39108*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39108*0 + 3*101*FLEN/8, x4, x1, x2)

inst_13037:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7a532d and fs2 == 1 and fe2 == 0x01 and fm2 == 0x02e6e1 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7a532d; op2val:0x8082e6e1;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:39111*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39111*0 + 3*101*FLEN/8, x4, x1, x2)

inst_13038:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7a532d and fs2 == 1 and fe2 == 0x01 and fm2 == 0x02e6e1 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7a532d; op2val:0x8082e6e1;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:39114*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39114*0 + 3*101*FLEN/8, x4, x1, x2)

inst_13039:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7a532d and fs2 == 1 and fe2 == 0x01 and fm2 == 0x02e6e1 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7a532d; op2val:0x8082e6e1;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:39117*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39117*0 + 3*101*FLEN/8, x4, x1, x2)

inst_13040:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7b1fb1 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x027c45 and fs3 == 0 and fe3 == 0xe2 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7b1fb1; op2val:0x40827c45;
op3val:0x71000000; valaddr_reg:x3; val_offset:39120*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39120*0 + 3*101*FLEN/8, x4, x1, x2)

inst_13041:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7b1fb1 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x027c45 and fs3 == 0 and fe3 == 0xe2 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7b1fb1; op2val:0x40827c45;
op3val:0x71000001; valaddr_reg:x3; val_offset:39123*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39123*0 + 3*101*FLEN/8, x4, x1, x2)

inst_13042:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7b1fb1 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x027c45 and fs3 == 0 and fe3 == 0xe2 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7b1fb1; op2val:0x40827c45;
op3val:0x71000003; valaddr_reg:x3; val_offset:39126*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39126*0 + 3*101*FLEN/8, x4, x1, x2)

inst_13043:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7b1fb1 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x027c45 and fs3 == 0 and fe3 == 0xe2 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7b1fb1; op2val:0x40827c45;
op3val:0x71000007; valaddr_reg:x3; val_offset:39129*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39129*0 + 3*101*FLEN/8, x4, x1, x2)

inst_13044:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7b1fb1 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x027c45 and fs3 == 0 and fe3 == 0xe2 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7b1fb1; op2val:0x40827c45;
op3val:0x7100000f; valaddr_reg:x3; val_offset:39132*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39132*0 + 3*101*FLEN/8, x4, x1, x2)

inst_13045:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7b1fb1 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x027c45 and fs3 == 0 and fe3 == 0xe2 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7b1fb1; op2val:0x40827c45;
op3val:0x7100001f; valaddr_reg:x3; val_offset:39135*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39135*0 + 3*101*FLEN/8, x4, x1, x2)

inst_13046:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7b1fb1 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x027c45 and fs3 == 0 and fe3 == 0xe2 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7b1fb1; op2val:0x40827c45;
op3val:0x7100003f; valaddr_reg:x3; val_offset:39138*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39138*0 + 3*101*FLEN/8, x4, x1, x2)

inst_13047:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7b1fb1 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x027c45 and fs3 == 0 and fe3 == 0xe2 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7b1fb1; op2val:0x40827c45;
op3val:0x7100007f; valaddr_reg:x3; val_offset:39141*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39141*0 + 3*101*FLEN/8, x4, x1, x2)

inst_13048:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7b1fb1 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x027c45 and fs3 == 0 and fe3 == 0xe2 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7b1fb1; op2val:0x40827c45;
op3val:0x710000ff; valaddr_reg:x3; val_offset:39144*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39144*0 + 3*101*FLEN/8, x4, x1, x2)

inst_13049:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7b1fb1 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x027c45 and fs3 == 0 and fe3 == 0xe2 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7b1fb1; op2val:0x40827c45;
op3val:0x710001ff; valaddr_reg:x3; val_offset:39147*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39147*0 + 3*101*FLEN/8, x4, x1, x2)

inst_13050:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7b1fb1 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x027c45 and fs3 == 0 and fe3 == 0xe2 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7b1fb1; op2val:0x40827c45;
op3val:0x710003ff; valaddr_reg:x3; val_offset:39150*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39150*0 + 3*101*FLEN/8, x4, x1, x2)

inst_13051:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7b1fb1 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x027c45 and fs3 == 0 and fe3 == 0xe2 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7b1fb1; op2val:0x40827c45;
op3val:0x710007ff; valaddr_reg:x3; val_offset:39153*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39153*0 + 3*101*FLEN/8, x4, x1, x2)

inst_13052:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7b1fb1 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x027c45 and fs3 == 0 and fe3 == 0xe2 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7b1fb1; op2val:0x40827c45;
op3val:0x71000fff; valaddr_reg:x3; val_offset:39156*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39156*0 + 3*101*FLEN/8, x4, x1, x2)

inst_13053:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7b1fb1 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x027c45 and fs3 == 0 and fe3 == 0xe2 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7b1fb1; op2val:0x40827c45;
op3val:0x71001fff; valaddr_reg:x3; val_offset:39159*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39159*0 + 3*101*FLEN/8, x4, x1, x2)

inst_13054:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7b1fb1 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x027c45 and fs3 == 0 and fe3 == 0xe2 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7b1fb1; op2val:0x40827c45;
op3val:0x71003fff; valaddr_reg:x3; val_offset:39162*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39162*0 + 3*101*FLEN/8, x4, x1, x2)

inst_13055:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7b1fb1 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x027c45 and fs3 == 0 and fe3 == 0xe2 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7b1fb1; op2val:0x40827c45;
op3val:0x71007fff; valaddr_reg:x3; val_offset:39165*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39165*0 + 3*101*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2121908678,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154673883,32,FLEN)
NAN_BOXED(2121908678,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872248,32,FLEN)
NAN_BOXED(2121908678,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872252,32,FLEN)
NAN_BOXED(2121908678,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2121908678,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197815296,32,FLEN)
NAN_BOXED(2121908678,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197815297,32,FLEN)
NAN_BOXED(2121908678,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197815299,32,FLEN)
NAN_BOXED(2121908678,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197815303,32,FLEN)
NAN_BOXED(2121908678,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197815311,32,FLEN)
NAN_BOXED(2121908678,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197815327,32,FLEN)
NAN_BOXED(2121908678,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197815359,32,FLEN)
NAN_BOXED(2121908678,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197815423,32,FLEN)
NAN_BOXED(2121908678,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197815551,32,FLEN)
NAN_BOXED(2121908678,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197815807,32,FLEN)
NAN_BOXED(2121908678,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197816319,32,FLEN)
NAN_BOXED(2121908678,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197817343,32,FLEN)
NAN_BOXED(2121908678,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197819391,32,FLEN)
NAN_BOXED(2121908678,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197823487,32,FLEN)
NAN_BOXED(2121908678,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197831679,32,FLEN)
NAN_BOXED(2121908678,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197848063,32,FLEN)
NAN_BOXED(2121908678,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197880831,32,FLEN)
NAN_BOXED(2121908678,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197946367,32,FLEN)
NAN_BOXED(2121908678,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2198077439,32,FLEN)
NAN_BOXED(2121908678,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2198339583,32,FLEN)
NAN_BOXED(2121908678,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2198863871,32,FLEN)
NAN_BOXED(2121908678,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2199912447,32,FLEN)
NAN_BOXED(2121908678,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2202009599,32,FLEN)
NAN_BOXED(2121908678,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2202009600,32,FLEN)
NAN_BOXED(2121908678,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2204106752,32,FLEN)
NAN_BOXED(2121908678,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2205155328,32,FLEN)
NAN_BOXED(2121908678,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2205679616,32,FLEN)
NAN_BOXED(2121908678,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2205941760,32,FLEN)
NAN_BOXED(2121908678,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206072832,32,FLEN)
NAN_BOXED(2121908678,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206138368,32,FLEN)
NAN_BOXED(2121908678,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206171136,32,FLEN)
NAN_BOXED(2121908678,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206187520,32,FLEN)
NAN_BOXED(2121908678,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206195712,32,FLEN)
NAN_BOXED(2121908678,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206199808,32,FLEN)
NAN_BOXED(2121908678,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206201856,32,FLEN)
NAN_BOXED(2121908678,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206202880,32,FLEN)
NAN_BOXED(2121908678,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206203392,32,FLEN)
NAN_BOXED(2121908678,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206203648,32,FLEN)
NAN_BOXED(2121908678,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206203776,32,FLEN)
NAN_BOXED(2121908678,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206203840,32,FLEN)
NAN_BOXED(2121908678,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206203872,32,FLEN)
NAN_BOXED(2121908678,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206203888,32,FLEN)
NAN_BOXED(2121908678,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206203896,32,FLEN)
NAN_BOXED(2121908678,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206203900,32,FLEN)
NAN_BOXED(2121908678,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206203902,32,FLEN)
NAN_BOXED(2121908678,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206203903,32,FLEN)
NAN_BOXED(2121945901,32,FLEN)
NAN_BOXED(2156062433,32,FLEN)
NAN_BOXED(2944401408,32,FLEN)
NAN_BOXED(2121945901,32,FLEN)
NAN_BOXED(2156062433,32,FLEN)
NAN_BOXED(2944401409,32,FLEN)
NAN_BOXED(2121945901,32,FLEN)
NAN_BOXED(2156062433,32,FLEN)
NAN_BOXED(2944401411,32,FLEN)
NAN_BOXED(2121945901,32,FLEN)
NAN_BOXED(2156062433,32,FLEN)
NAN_BOXED(2944401415,32,FLEN)
NAN_BOXED(2121945901,32,FLEN)
NAN_BOXED(2156062433,32,FLEN)
NAN_BOXED(2944401423,32,FLEN)
NAN_BOXED(2121945901,32,FLEN)
NAN_BOXED(2156062433,32,FLEN)
NAN_BOXED(2944401439,32,FLEN)
NAN_BOXED(2121945901,32,FLEN)
NAN_BOXED(2156062433,32,FLEN)
NAN_BOXED(2944401471,32,FLEN)
NAN_BOXED(2121945901,32,FLEN)
NAN_BOXED(2156062433,32,FLEN)
NAN_BOXED(2944401535,32,FLEN)
NAN_BOXED(2121945901,32,FLEN)
NAN_BOXED(2156062433,32,FLEN)
NAN_BOXED(2944401663,32,FLEN)
NAN_BOXED(2121945901,32,FLEN)
NAN_BOXED(2156062433,32,FLEN)
NAN_BOXED(2944401919,32,FLEN)
NAN_BOXED(2121945901,32,FLEN)
NAN_BOXED(2156062433,32,FLEN)
NAN_BOXED(2944402431,32,FLEN)
NAN_BOXED(2121945901,32,FLEN)
NAN_BOXED(2156062433,32,FLEN)
NAN_BOXED(2944403455,32,FLEN)
NAN_BOXED(2121945901,32,FLEN)
NAN_BOXED(2156062433,32,FLEN)
NAN_BOXED(2944405503,32,FLEN)
NAN_BOXED(2121945901,32,FLEN)
NAN_BOXED(2156062433,32,FLEN)
NAN_BOXED(2944409599,32,FLEN)
NAN_BOXED(2121945901,32,FLEN)
NAN_BOXED(2156062433,32,FLEN)
NAN_BOXED(2944417791,32,FLEN)
NAN_BOXED(2121945901,32,FLEN)
NAN_BOXED(2156062433,32,FLEN)
NAN_BOXED(2944434175,32,FLEN)
NAN_BOXED(2121945901,32,FLEN)
NAN_BOXED(2156062433,32,FLEN)
NAN_BOXED(2944466943,32,FLEN)
NAN_BOXED(2121945901,32,FLEN)
NAN_BOXED(2156062433,32,FLEN)
NAN_BOXED(2944532479,32,FLEN)
NAN_BOXED(2121945901,32,FLEN)
NAN_BOXED(2156062433,32,FLEN)
NAN_BOXED(2944663551,32,FLEN)
NAN_BOXED(2121945901,32,FLEN)
NAN_BOXED(2156062433,32,FLEN)
NAN_BOXED(2944925695,32,FLEN)
NAN_BOXED(2121945901,32,FLEN)
NAN_BOXED(2156062433,32,FLEN)
NAN_BOXED(2945449983,32,FLEN)
NAN_BOXED(2121945901,32,FLEN)
NAN_BOXED(2156062433,32,FLEN)
NAN_BOXED(2946498559,32,FLEN)
NAN_BOXED(2121945901,32,FLEN)
NAN_BOXED(2156062433,32,FLEN)
NAN_BOXED(2948595711,32,FLEN)
NAN_BOXED(2121945901,32,FLEN)
NAN_BOXED(2156062433,32,FLEN)
NAN_BOXED(2948595712,32,FLEN)
NAN_BOXED(2121945901,32,FLEN)
NAN_BOXED(2156062433,32,FLEN)
NAN_BOXED(2950692864,32,FLEN)
NAN_BOXED(2121945901,32,FLEN)
NAN_BOXED(2156062433,32,FLEN)
NAN_BOXED(2951741440,32,FLEN)
NAN_BOXED(2121945901,32,FLEN)
NAN_BOXED(2156062433,32,FLEN)
NAN_BOXED(2952265728,32,FLEN)
NAN_BOXED(2121945901,32,FLEN)
NAN_BOXED(2156062433,32,FLEN)
NAN_BOXED(2952527872,32,FLEN)
NAN_BOXED(2121945901,32,FLEN)
NAN_BOXED(2156062433,32,FLEN)
NAN_BOXED(2952658944,32,FLEN)
NAN_BOXED(2121945901,32,FLEN)
NAN_BOXED(2156062433,32,FLEN)
NAN_BOXED(2952724480,32,FLEN)
NAN_BOXED(2121945901,32,FLEN)
NAN_BOXED(2156062433,32,FLEN)
NAN_BOXED(2952757248,32,FLEN)
NAN_BOXED(2121945901,32,FLEN)
NAN_BOXED(2156062433,32,FLEN)
NAN_BOXED(2952773632,32,FLEN)
NAN_BOXED(2121945901,32,FLEN)
NAN_BOXED(2156062433,32,FLEN)
NAN_BOXED(2952781824,32,FLEN)
NAN_BOXED(2121945901,32,FLEN)
NAN_BOXED(2156062433,32,FLEN)
NAN_BOXED(2952785920,32,FLEN)
NAN_BOXED(2121945901,32,FLEN)
NAN_BOXED(2156062433,32,FLEN)
NAN_BOXED(2952787968,32,FLEN)
NAN_BOXED(2121945901,32,FLEN)
NAN_BOXED(2156062433,32,FLEN)
NAN_BOXED(2952788992,32,FLEN)
NAN_BOXED(2121945901,32,FLEN)
NAN_BOXED(2156062433,32,FLEN)
NAN_BOXED(2952789504,32,FLEN)
NAN_BOXED(2121945901,32,FLEN)
NAN_BOXED(2156062433,32,FLEN)
NAN_BOXED(2952789760,32,FLEN)
NAN_BOXED(2121945901,32,FLEN)
NAN_BOXED(2156062433,32,FLEN)
NAN_BOXED(2952789888,32,FLEN)
NAN_BOXED(2121945901,32,FLEN)
NAN_BOXED(2156062433,32,FLEN)
NAN_BOXED(2952789952,32,FLEN)
NAN_BOXED(2121945901,32,FLEN)
NAN_BOXED(2156062433,32,FLEN)
NAN_BOXED(2952789984,32,FLEN)
NAN_BOXED(2121945901,32,FLEN)
NAN_BOXED(2156062433,32,FLEN)
NAN_BOXED(2952790000,32,FLEN)
NAN_BOXED(2121945901,32,FLEN)
NAN_BOXED(2156062433,32,FLEN)
NAN_BOXED(2952790008,32,FLEN)
NAN_BOXED(2121945901,32,FLEN)
NAN_BOXED(2156062433,32,FLEN)
NAN_BOXED(2952790012,32,FLEN)
NAN_BOXED(2121945901,32,FLEN)
NAN_BOXED(2156062433,32,FLEN)
NAN_BOXED(2952790014,32,FLEN)
NAN_BOXED(2121945901,32,FLEN)
NAN_BOXED(2156062433,32,FLEN)
NAN_BOXED(2952790015,32,FLEN)
NAN_BOXED(2121945901,32,FLEN)
NAN_BOXED(2156062433,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2121945901,32,FLEN)
NAN_BOXED(2156062433,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2121945901,32,FLEN)
NAN_BOXED(2156062433,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
NAN_BOXED(2121945901,32,FLEN)
NAN_BOXED(2156062433,32,FLEN)
NAN_BOXED(3214514585,32,FLEN)
NAN_BOXED(2121945901,32,FLEN)
NAN_BOXED(2156062433,32,FLEN)
NAN_BOXED(3215233609,32,FLEN)
NAN_BOXED(2121945901,32,FLEN)
NAN_BOXED(2156062433,32,FLEN)
NAN_BOXED(3216192307,32,FLEN)
NAN_BOXED(2121945901,32,FLEN)
NAN_BOXED(2156062433,32,FLEN)
NAN_BOXED(3216431981,32,FLEN)
NAN_BOXED(2121945901,32,FLEN)
NAN_BOXED(2156062433,32,FLEN)
NAN_BOXED(3216751547,32,FLEN)
NAN_BOXED(2121945901,32,FLEN)
NAN_BOXED(2156062433,32,FLEN)
NAN_BOXED(3217310788,32,FLEN)
NAN_BOXED(2121945901,32,FLEN)
NAN_BOXED(2156062433,32,FLEN)
NAN_BOXED(3217870028,32,FLEN)
NAN_BOXED(2121945901,32,FLEN)
NAN_BOXED(2156062433,32,FLEN)
NAN_BOXED(3218828726,32,FLEN)
NAN_BOXED(2121945901,32,FLEN)
NAN_BOXED(2156062433,32,FLEN)
NAN_BOXED(3219547750,32,FLEN)
NAN_BOXED(2121945901,32,FLEN)
NAN_BOXED(2156062433,32,FLEN)
NAN_BOXED(3220027099,32,FLEN)
NAN_BOXED(2121945901,32,FLEN)
NAN_BOXED(2156062433,32,FLEN)
NAN_BOXED(3221225464,32,FLEN)
NAN_BOXED(2121945901,32,FLEN)
NAN_BOXED(2156062433,32,FLEN)
NAN_BOXED(3221225468,32,FLEN)
NAN_BOXED(2121945901,32,FLEN)
NAN_BOXED(2156062433,32,FLEN)
NAN_BOXED(3221225470,32,FLEN)
NAN_BOXED(2121998257,32,FLEN)
NAN_BOXED(1082293317,32,FLEN)
NAN_BOXED(1895825408,32,FLEN)
NAN_BOXED(2121998257,32,FLEN)
NAN_BOXED(1082293317,32,FLEN)
NAN_BOXED(1895825409,32,FLEN)
NAN_BOXED(2121998257,32,FLEN)
NAN_BOXED(1082293317,32,FLEN)
NAN_BOXED(1895825411,32,FLEN)
NAN_BOXED(2121998257,32,FLEN)
NAN_BOXED(1082293317,32,FLEN)
NAN_BOXED(1895825415,32,FLEN)
NAN_BOXED(2121998257,32,FLEN)
NAN_BOXED(1082293317,32,FLEN)
NAN_BOXED(1895825423,32,FLEN)
NAN_BOXED(2121998257,32,FLEN)
NAN_BOXED(1082293317,32,FLEN)
NAN_BOXED(1895825439,32,FLEN)
NAN_BOXED(2121998257,32,FLEN)
NAN_BOXED(1082293317,32,FLEN)
NAN_BOXED(1895825471,32,FLEN)
NAN_BOXED(2121998257,32,FLEN)
NAN_BOXED(1082293317,32,FLEN)
NAN_BOXED(1895825535,32,FLEN)
NAN_BOXED(2121998257,32,FLEN)
NAN_BOXED(1082293317,32,FLEN)
NAN_BOXED(1895825663,32,FLEN)
NAN_BOXED(2121998257,32,FLEN)
NAN_BOXED(1082293317,32,FLEN)
NAN_BOXED(1895825919,32,FLEN)
NAN_BOXED(2121998257,32,FLEN)
NAN_BOXED(1082293317,32,FLEN)
NAN_BOXED(1895826431,32,FLEN)
NAN_BOXED(2121998257,32,FLEN)
NAN_BOXED(1082293317,32,FLEN)
NAN_BOXED(1895827455,32,FLEN)
NAN_BOXED(2121998257,32,FLEN)
NAN_BOXED(1082293317,32,FLEN)
NAN_BOXED(1895829503,32,FLEN)
NAN_BOXED(2121998257,32,FLEN)
NAN_BOXED(1082293317,32,FLEN)
NAN_BOXED(1895833599,32,FLEN)
NAN_BOXED(2121998257,32,FLEN)
NAN_BOXED(1082293317,32,FLEN)
NAN_BOXED(1895841791,32,FLEN)
NAN_BOXED(2121998257,32,FLEN)
NAN_BOXED(1082293317,32,FLEN)
NAN_BOXED(1895858175,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
