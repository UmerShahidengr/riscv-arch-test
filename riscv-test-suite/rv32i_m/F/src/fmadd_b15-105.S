
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:17:59 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_13312:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7f80b0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7f80b0; op2val:0x80000000;
op3val:0x8b8000ff; valaddr_reg:x3; val_offset:39936*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39936*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13313:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7f80b0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7f80b0; op2val:0x80000000;
op3val:0x8b8001ff; valaddr_reg:x3; val_offset:39939*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39939*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13314:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7f80b0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7f80b0; op2val:0x80000000;
op3val:0x8b8003ff; valaddr_reg:x3; val_offset:39942*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39942*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13315:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7f80b0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7f80b0; op2val:0x80000000;
op3val:0x8b8007ff; valaddr_reg:x3; val_offset:39945*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39945*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13316:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7f80b0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7f80b0; op2val:0x80000000;
op3val:0x8b800fff; valaddr_reg:x3; val_offset:39948*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39948*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13317:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7f80b0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7f80b0; op2val:0x80000000;
op3val:0x8b801fff; valaddr_reg:x3; val_offset:39951*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39951*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13318:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7f80b0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7f80b0; op2val:0x80000000;
op3val:0x8b803fff; valaddr_reg:x3; val_offset:39954*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39954*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13319:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7f80b0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7f80b0; op2val:0x80000000;
op3val:0x8b807fff; valaddr_reg:x3; val_offset:39957*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39957*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13320:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7f80b0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7f80b0; op2val:0x80000000;
op3val:0x8b80ffff; valaddr_reg:x3; val_offset:39960*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39960*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13321:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7f80b0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7f80b0; op2val:0x80000000;
op3val:0x8b81ffff; valaddr_reg:x3; val_offset:39963*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39963*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13322:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7f80b0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7f80b0; op2val:0x80000000;
op3val:0x8b83ffff; valaddr_reg:x3; val_offset:39966*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39966*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13323:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7f80b0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7f80b0; op2val:0x80000000;
op3val:0x8b87ffff; valaddr_reg:x3; val_offset:39969*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39969*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13324:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7f80b0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7f80b0; op2val:0x80000000;
op3val:0x8b8fffff; valaddr_reg:x3; val_offset:39972*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39972*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13325:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7f80b0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7f80b0; op2val:0x80000000;
op3val:0x8b9fffff; valaddr_reg:x3; val_offset:39975*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39975*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13326:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7f80b0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7f80b0; op2val:0x80000000;
op3val:0x8bbfffff; valaddr_reg:x3; val_offset:39978*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39978*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13327:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7f80b0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7f80b0; op2val:0x80000000;
op3val:0x8bc00000; valaddr_reg:x3; val_offset:39981*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39981*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13328:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7f80b0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7f80b0; op2val:0x80000000;
op3val:0x8be00000; valaddr_reg:x3; val_offset:39984*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39984*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13329:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7f80b0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7f80b0; op2val:0x80000000;
op3val:0x8bf00000; valaddr_reg:x3; val_offset:39987*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39987*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13330:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7f80b0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7f80b0; op2val:0x80000000;
op3val:0x8bf80000; valaddr_reg:x3; val_offset:39990*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39990*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13331:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7f80b0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7f80b0; op2val:0x80000000;
op3val:0x8bfc0000; valaddr_reg:x3; val_offset:39993*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39993*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13332:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7f80b0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7f80b0; op2val:0x80000000;
op3val:0x8bfe0000; valaddr_reg:x3; val_offset:39996*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39996*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13333:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7f80b0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7f80b0; op2val:0x80000000;
op3val:0x8bff0000; valaddr_reg:x3; val_offset:39999*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39999*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13334:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7f80b0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7f80b0; op2val:0x80000000;
op3val:0x8bff8000; valaddr_reg:x3; val_offset:40002*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40002*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13335:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7f80b0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7f80b0; op2val:0x80000000;
op3val:0x8bffc000; valaddr_reg:x3; val_offset:40005*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40005*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13336:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7f80b0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7f80b0; op2val:0x80000000;
op3val:0x8bffe000; valaddr_reg:x3; val_offset:40008*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40008*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13337:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7f80b0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7f80b0; op2val:0x80000000;
op3val:0x8bfff000; valaddr_reg:x3; val_offset:40011*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40011*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13338:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7f80b0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7f80b0; op2val:0x80000000;
op3val:0x8bfff800; valaddr_reg:x3; val_offset:40014*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40014*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13339:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7f80b0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7f80b0; op2val:0x80000000;
op3val:0x8bfffc00; valaddr_reg:x3; val_offset:40017*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40017*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13340:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7f80b0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7f80b0; op2val:0x80000000;
op3val:0x8bfffe00; valaddr_reg:x3; val_offset:40020*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40020*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13341:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7f80b0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7f80b0; op2val:0x80000000;
op3val:0x8bffff00; valaddr_reg:x3; val_offset:40023*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40023*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13342:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7f80b0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7f80b0; op2val:0x80000000;
op3val:0x8bffff80; valaddr_reg:x3; val_offset:40026*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40026*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13343:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7f80b0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7f80b0; op2val:0x80000000;
op3val:0x8bffffc0; valaddr_reg:x3; val_offset:40029*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40029*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13344:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7f80b0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7f80b0; op2val:0x80000000;
op3val:0x8bffffe0; valaddr_reg:x3; val_offset:40032*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40032*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13345:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7f80b0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7f80b0; op2val:0x80000000;
op3val:0x8bfffff0; valaddr_reg:x3; val_offset:40035*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40035*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13346:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7f80b0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7f80b0; op2val:0x80000000;
op3val:0x8bfffff8; valaddr_reg:x3; val_offset:40038*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40038*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13347:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7f80b0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7f80b0; op2val:0x80000000;
op3val:0x8bfffffc; valaddr_reg:x3; val_offset:40041*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40041*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13348:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7f80b0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7f80b0; op2val:0x80000000;
op3val:0x8bfffffe; valaddr_reg:x3; val_offset:40044*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40044*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13349:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7f80b0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7f80b0; op2val:0x80000000;
op3val:0x8bffffff; valaddr_reg:x3; val_offset:40047*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40047*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13350:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x00a521 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x7eb763 and fs3 == 0 and fe3 == 0xdd and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e80a521; op2val:0x407eb763;
op3val:0x6e800000; valaddr_reg:x3; val_offset:40050*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40050*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13351:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x00a521 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x7eb763 and fs3 == 0 and fe3 == 0xdd and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e80a521; op2val:0x407eb763;
op3val:0x6e800001; valaddr_reg:x3; val_offset:40053*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40053*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13352:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x00a521 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x7eb763 and fs3 == 0 and fe3 == 0xdd and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e80a521; op2val:0x407eb763;
op3val:0x6e800003; valaddr_reg:x3; val_offset:40056*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40056*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13353:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x00a521 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x7eb763 and fs3 == 0 and fe3 == 0xdd and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e80a521; op2val:0x407eb763;
op3val:0x6e800007; valaddr_reg:x3; val_offset:40059*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40059*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13354:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x00a521 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x7eb763 and fs3 == 0 and fe3 == 0xdd and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e80a521; op2val:0x407eb763;
op3val:0x6e80000f; valaddr_reg:x3; val_offset:40062*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40062*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13355:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x00a521 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x7eb763 and fs3 == 0 and fe3 == 0xdd and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e80a521; op2val:0x407eb763;
op3val:0x6e80001f; valaddr_reg:x3; val_offset:40065*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40065*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13356:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x00a521 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x7eb763 and fs3 == 0 and fe3 == 0xdd and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e80a521; op2val:0x407eb763;
op3val:0x6e80003f; valaddr_reg:x3; val_offset:40068*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40068*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13357:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x00a521 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x7eb763 and fs3 == 0 and fe3 == 0xdd and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e80a521; op2val:0x407eb763;
op3val:0x6e80007f; valaddr_reg:x3; val_offset:40071*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40071*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13358:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x00a521 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x7eb763 and fs3 == 0 and fe3 == 0xdd and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e80a521; op2val:0x407eb763;
op3val:0x6e8000ff; valaddr_reg:x3; val_offset:40074*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40074*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13359:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x00a521 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x7eb763 and fs3 == 0 and fe3 == 0xdd and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e80a521; op2val:0x407eb763;
op3val:0x6e8001ff; valaddr_reg:x3; val_offset:40077*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40077*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13360:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x00a521 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x7eb763 and fs3 == 0 and fe3 == 0xdd and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e80a521; op2val:0x407eb763;
op3val:0x6e8003ff; valaddr_reg:x3; val_offset:40080*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40080*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13361:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x00a521 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x7eb763 and fs3 == 0 and fe3 == 0xdd and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e80a521; op2val:0x407eb763;
op3val:0x6e8007ff; valaddr_reg:x3; val_offset:40083*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40083*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13362:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x00a521 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x7eb763 and fs3 == 0 and fe3 == 0xdd and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e80a521; op2val:0x407eb763;
op3val:0x6e800fff; valaddr_reg:x3; val_offset:40086*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40086*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13363:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x00a521 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x7eb763 and fs3 == 0 and fe3 == 0xdd and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e80a521; op2val:0x407eb763;
op3val:0x6e801fff; valaddr_reg:x3; val_offset:40089*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40089*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13364:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x00a521 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x7eb763 and fs3 == 0 and fe3 == 0xdd and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e80a521; op2val:0x407eb763;
op3val:0x6e803fff; valaddr_reg:x3; val_offset:40092*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40092*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13365:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x00a521 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x7eb763 and fs3 == 0 and fe3 == 0xdd and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e80a521; op2val:0x407eb763;
op3val:0x6e807fff; valaddr_reg:x3; val_offset:40095*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40095*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13366:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x00a521 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x7eb763 and fs3 == 0 and fe3 == 0xdd and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e80a521; op2val:0x407eb763;
op3val:0x6e80ffff; valaddr_reg:x3; val_offset:40098*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40098*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13367:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x00a521 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x7eb763 and fs3 == 0 and fe3 == 0xdd and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e80a521; op2val:0x407eb763;
op3val:0x6e81ffff; valaddr_reg:x3; val_offset:40101*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40101*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13368:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x00a521 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x7eb763 and fs3 == 0 and fe3 == 0xdd and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e80a521; op2val:0x407eb763;
op3val:0x6e83ffff; valaddr_reg:x3; val_offset:40104*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40104*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13369:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x00a521 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x7eb763 and fs3 == 0 and fe3 == 0xdd and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e80a521; op2val:0x407eb763;
op3val:0x6e87ffff; valaddr_reg:x3; val_offset:40107*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40107*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13370:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x00a521 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x7eb763 and fs3 == 0 and fe3 == 0xdd and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e80a521; op2val:0x407eb763;
op3val:0x6e8fffff; valaddr_reg:x3; val_offset:40110*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40110*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13371:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x00a521 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x7eb763 and fs3 == 0 and fe3 == 0xdd and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e80a521; op2val:0x407eb763;
op3val:0x6e9fffff; valaddr_reg:x3; val_offset:40113*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40113*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13372:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x00a521 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x7eb763 and fs3 == 0 and fe3 == 0xdd and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e80a521; op2val:0x407eb763;
op3val:0x6ebfffff; valaddr_reg:x3; val_offset:40116*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40116*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13373:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x00a521 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x7eb763 and fs3 == 0 and fe3 == 0xdd and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e80a521; op2val:0x407eb763;
op3val:0x6ec00000; valaddr_reg:x3; val_offset:40119*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40119*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13374:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x00a521 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x7eb763 and fs3 == 0 and fe3 == 0xdd and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e80a521; op2val:0x407eb763;
op3val:0x6ee00000; valaddr_reg:x3; val_offset:40122*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40122*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13375:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x00a521 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x7eb763 and fs3 == 0 and fe3 == 0xdd and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e80a521; op2val:0x407eb763;
op3val:0x6ef00000; valaddr_reg:x3; val_offset:40125*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40125*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13376:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x00a521 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x7eb763 and fs3 == 0 and fe3 == 0xdd and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e80a521; op2val:0x407eb763;
op3val:0x6ef80000; valaddr_reg:x3; val_offset:40128*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40128*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13377:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x00a521 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x7eb763 and fs3 == 0 and fe3 == 0xdd and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e80a521; op2val:0x407eb763;
op3val:0x6efc0000; valaddr_reg:x3; val_offset:40131*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40131*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13378:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x00a521 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x7eb763 and fs3 == 0 and fe3 == 0xdd and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e80a521; op2val:0x407eb763;
op3val:0x6efe0000; valaddr_reg:x3; val_offset:40134*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40134*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13379:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x00a521 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x7eb763 and fs3 == 0 and fe3 == 0xdd and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e80a521; op2val:0x407eb763;
op3val:0x6eff0000; valaddr_reg:x3; val_offset:40137*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40137*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13380:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x00a521 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x7eb763 and fs3 == 0 and fe3 == 0xdd and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e80a521; op2val:0x407eb763;
op3val:0x6eff8000; valaddr_reg:x3; val_offset:40140*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40140*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13381:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x00a521 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x7eb763 and fs3 == 0 and fe3 == 0xdd and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e80a521; op2val:0x407eb763;
op3val:0x6effc000; valaddr_reg:x3; val_offset:40143*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40143*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13382:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x00a521 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x7eb763 and fs3 == 0 and fe3 == 0xdd and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e80a521; op2val:0x407eb763;
op3val:0x6effe000; valaddr_reg:x3; val_offset:40146*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40146*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13383:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x00a521 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x7eb763 and fs3 == 0 and fe3 == 0xdd and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e80a521; op2val:0x407eb763;
op3val:0x6efff000; valaddr_reg:x3; val_offset:40149*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40149*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13384:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x00a521 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x7eb763 and fs3 == 0 and fe3 == 0xdd and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e80a521; op2val:0x407eb763;
op3val:0x6efff800; valaddr_reg:x3; val_offset:40152*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40152*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13385:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x00a521 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x7eb763 and fs3 == 0 and fe3 == 0xdd and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e80a521; op2val:0x407eb763;
op3val:0x6efffc00; valaddr_reg:x3; val_offset:40155*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40155*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13386:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x00a521 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x7eb763 and fs3 == 0 and fe3 == 0xdd and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e80a521; op2val:0x407eb763;
op3val:0x6efffe00; valaddr_reg:x3; val_offset:40158*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40158*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13387:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x00a521 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x7eb763 and fs3 == 0 and fe3 == 0xdd and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e80a521; op2val:0x407eb763;
op3val:0x6effff00; valaddr_reg:x3; val_offset:40161*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40161*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13388:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x00a521 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x7eb763 and fs3 == 0 and fe3 == 0xdd and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e80a521; op2val:0x407eb763;
op3val:0x6effff80; valaddr_reg:x3; val_offset:40164*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40164*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13389:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x00a521 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x7eb763 and fs3 == 0 and fe3 == 0xdd and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e80a521; op2val:0x407eb763;
op3val:0x6effffc0; valaddr_reg:x3; val_offset:40167*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40167*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13390:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x00a521 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x7eb763 and fs3 == 0 and fe3 == 0xdd and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e80a521; op2val:0x407eb763;
op3val:0x6effffe0; valaddr_reg:x3; val_offset:40170*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40170*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13391:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x00a521 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x7eb763 and fs3 == 0 and fe3 == 0xdd and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e80a521; op2val:0x407eb763;
op3val:0x6efffff0; valaddr_reg:x3; val_offset:40173*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40173*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13392:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x00a521 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x7eb763 and fs3 == 0 and fe3 == 0xdd and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e80a521; op2val:0x407eb763;
op3val:0x6efffff8; valaddr_reg:x3; val_offset:40176*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40176*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13393:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x00a521 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x7eb763 and fs3 == 0 and fe3 == 0xdd and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e80a521; op2val:0x407eb763;
op3val:0x6efffffc; valaddr_reg:x3; val_offset:40179*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40179*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13394:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x00a521 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x7eb763 and fs3 == 0 and fe3 == 0xdd and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e80a521; op2val:0x407eb763;
op3val:0x6efffffe; valaddr_reg:x3; val_offset:40182*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40182*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13395:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x00a521 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x7eb763 and fs3 == 0 and fe3 == 0xdd and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e80a521; op2val:0x407eb763;
op3val:0x6effffff; valaddr_reg:x3; val_offset:40185*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40185*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13396:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x00a521 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x7eb763 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e80a521; op2val:0x407eb763;
op3val:0x7f000001; valaddr_reg:x3; val_offset:40188*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40188*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13397:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x00a521 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x7eb763 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e80a521; op2val:0x407eb763;
op3val:0x7f000003; valaddr_reg:x3; val_offset:40191*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40191*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13398:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x00a521 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x7eb763 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e80a521; op2val:0x407eb763;
op3val:0x7f000007; valaddr_reg:x3; val_offset:40194*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40194*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13399:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x00a521 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x7eb763 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e80a521; op2val:0x407eb763;
op3val:0x7f199999; valaddr_reg:x3; val_offset:40197*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40197*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13400:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x00a521 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x7eb763 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e80a521; op2val:0x407eb763;
op3val:0x7f249249; valaddr_reg:x3; val_offset:40200*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40200*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13401:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x00a521 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x7eb763 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e80a521; op2val:0x407eb763;
op3val:0x7f333333; valaddr_reg:x3; val_offset:40203*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40203*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13402:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x00a521 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x7eb763 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e80a521; op2val:0x407eb763;
op3val:0x7f36db6d; valaddr_reg:x3; val_offset:40206*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40206*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13403:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x00a521 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x7eb763 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e80a521; op2val:0x407eb763;
op3val:0x7f3bbbbb; valaddr_reg:x3; val_offset:40209*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40209*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13404:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x00a521 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x7eb763 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e80a521; op2val:0x407eb763;
op3val:0x7f444444; valaddr_reg:x3; val_offset:40212*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40212*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13405:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x00a521 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x7eb763 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e80a521; op2val:0x407eb763;
op3val:0x7f4ccccc; valaddr_reg:x3; val_offset:40215*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40215*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13406:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x00a521 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x7eb763 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e80a521; op2val:0x407eb763;
op3val:0x7f5b6db6; valaddr_reg:x3; val_offset:40218*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40218*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13407:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x00a521 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x7eb763 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e80a521; op2val:0x407eb763;
op3val:0x7f666666; valaddr_reg:x3; val_offset:40221*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40221*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13408:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x00a521 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x7eb763 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e80a521; op2val:0x407eb763;
op3val:0x7f6db6db; valaddr_reg:x3; val_offset:40224*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40224*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13409:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x00a521 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x7eb763 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e80a521; op2val:0x407eb763;
op3val:0x7f7ffff8; valaddr_reg:x3; val_offset:40227*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40227*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13410:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x00a521 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x7eb763 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e80a521; op2val:0x407eb763;
op3val:0x7f7ffffc; valaddr_reg:x3; val_offset:40230*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40230*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13411:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x00a521 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x7eb763 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e80a521; op2val:0x407eb763;
op3val:0x7f7ffffe; valaddr_reg:x3; val_offset:40233*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40233*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13412:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x00be6d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7f42ac and fs3 == 0 and fe3 == 0x58 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e80be6d; op2val:0x7f42ac;
op3val:0x2c000000; valaddr_reg:x3; val_offset:40236*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40236*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13413:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x00be6d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7f42ac and fs3 == 0 and fe3 == 0x58 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e80be6d; op2val:0x7f42ac;
op3val:0x2c000001; valaddr_reg:x3; val_offset:40239*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40239*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13414:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x00be6d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7f42ac and fs3 == 0 and fe3 == 0x58 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e80be6d; op2val:0x7f42ac;
op3val:0x2c000003; valaddr_reg:x3; val_offset:40242*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40242*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13415:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x00be6d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7f42ac and fs3 == 0 and fe3 == 0x58 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e80be6d; op2val:0x7f42ac;
op3val:0x2c000007; valaddr_reg:x3; val_offset:40245*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40245*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13416:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x00be6d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7f42ac and fs3 == 0 and fe3 == 0x58 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e80be6d; op2val:0x7f42ac;
op3val:0x2c00000f; valaddr_reg:x3; val_offset:40248*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40248*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13417:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x00be6d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7f42ac and fs3 == 0 and fe3 == 0x58 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e80be6d; op2val:0x7f42ac;
op3val:0x2c00001f; valaddr_reg:x3; val_offset:40251*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40251*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13418:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x00be6d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7f42ac and fs3 == 0 and fe3 == 0x58 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e80be6d; op2val:0x7f42ac;
op3val:0x2c00003f; valaddr_reg:x3; val_offset:40254*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40254*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13419:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x00be6d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7f42ac and fs3 == 0 and fe3 == 0x58 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e80be6d; op2val:0x7f42ac;
op3val:0x2c00007f; valaddr_reg:x3; val_offset:40257*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40257*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13420:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x00be6d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7f42ac and fs3 == 0 and fe3 == 0x58 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e80be6d; op2val:0x7f42ac;
op3val:0x2c0000ff; valaddr_reg:x3; val_offset:40260*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40260*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13421:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x00be6d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7f42ac and fs3 == 0 and fe3 == 0x58 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e80be6d; op2val:0x7f42ac;
op3val:0x2c0001ff; valaddr_reg:x3; val_offset:40263*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40263*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13422:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x00be6d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7f42ac and fs3 == 0 and fe3 == 0x58 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e80be6d; op2val:0x7f42ac;
op3val:0x2c0003ff; valaddr_reg:x3; val_offset:40266*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40266*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13423:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x00be6d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7f42ac and fs3 == 0 and fe3 == 0x58 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e80be6d; op2val:0x7f42ac;
op3val:0x2c0007ff; valaddr_reg:x3; val_offset:40269*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40269*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13424:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x00be6d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7f42ac and fs3 == 0 and fe3 == 0x58 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e80be6d; op2val:0x7f42ac;
op3val:0x2c000fff; valaddr_reg:x3; val_offset:40272*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40272*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13425:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x00be6d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7f42ac and fs3 == 0 and fe3 == 0x58 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e80be6d; op2val:0x7f42ac;
op3val:0x2c001fff; valaddr_reg:x3; val_offset:40275*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40275*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13426:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x00be6d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7f42ac and fs3 == 0 and fe3 == 0x58 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e80be6d; op2val:0x7f42ac;
op3val:0x2c003fff; valaddr_reg:x3; val_offset:40278*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40278*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13427:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x00be6d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7f42ac and fs3 == 0 and fe3 == 0x58 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e80be6d; op2val:0x7f42ac;
op3val:0x2c007fff; valaddr_reg:x3; val_offset:40281*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40281*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13428:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x00be6d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7f42ac and fs3 == 0 and fe3 == 0x58 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e80be6d; op2val:0x7f42ac;
op3val:0x2c00ffff; valaddr_reg:x3; val_offset:40284*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40284*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13429:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x00be6d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7f42ac and fs3 == 0 and fe3 == 0x58 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e80be6d; op2val:0x7f42ac;
op3val:0x2c01ffff; valaddr_reg:x3; val_offset:40287*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40287*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13430:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x00be6d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7f42ac and fs3 == 0 and fe3 == 0x58 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e80be6d; op2val:0x7f42ac;
op3val:0x2c03ffff; valaddr_reg:x3; val_offset:40290*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40290*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13431:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x00be6d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7f42ac and fs3 == 0 and fe3 == 0x58 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e80be6d; op2val:0x7f42ac;
op3val:0x2c07ffff; valaddr_reg:x3; val_offset:40293*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40293*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13432:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x00be6d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7f42ac and fs3 == 0 and fe3 == 0x58 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e80be6d; op2val:0x7f42ac;
op3val:0x2c0fffff; valaddr_reg:x3; val_offset:40296*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40296*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13433:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x00be6d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7f42ac and fs3 == 0 and fe3 == 0x58 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e80be6d; op2val:0x7f42ac;
op3val:0x2c1fffff; valaddr_reg:x3; val_offset:40299*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40299*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13434:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x00be6d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7f42ac and fs3 == 0 and fe3 == 0x58 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e80be6d; op2val:0x7f42ac;
op3val:0x2c3fffff; valaddr_reg:x3; val_offset:40302*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40302*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13435:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x00be6d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7f42ac and fs3 == 0 and fe3 == 0x58 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e80be6d; op2val:0x7f42ac;
op3val:0x2c400000; valaddr_reg:x3; val_offset:40305*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40305*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13436:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x00be6d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7f42ac and fs3 == 0 and fe3 == 0x58 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e80be6d; op2val:0x7f42ac;
op3val:0x2c600000; valaddr_reg:x3; val_offset:40308*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40308*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13437:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x00be6d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7f42ac and fs3 == 0 and fe3 == 0x58 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e80be6d; op2val:0x7f42ac;
op3val:0x2c700000; valaddr_reg:x3; val_offset:40311*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40311*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13438:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x00be6d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7f42ac and fs3 == 0 and fe3 == 0x58 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e80be6d; op2val:0x7f42ac;
op3val:0x2c780000; valaddr_reg:x3; val_offset:40314*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40314*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13439:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x00be6d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7f42ac and fs3 == 0 and fe3 == 0x58 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e80be6d; op2val:0x7f42ac;
op3val:0x2c7c0000; valaddr_reg:x3; val_offset:40317*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40317*0 + 3*104*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2122285232,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340421887,32,FLEN)
NAN_BOXED(2122285232,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340422143,32,FLEN)
NAN_BOXED(2122285232,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340422655,32,FLEN)
NAN_BOXED(2122285232,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340423679,32,FLEN)
NAN_BOXED(2122285232,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340425727,32,FLEN)
NAN_BOXED(2122285232,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340429823,32,FLEN)
NAN_BOXED(2122285232,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340438015,32,FLEN)
NAN_BOXED(2122285232,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340454399,32,FLEN)
NAN_BOXED(2122285232,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340487167,32,FLEN)
NAN_BOXED(2122285232,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340552703,32,FLEN)
NAN_BOXED(2122285232,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340683775,32,FLEN)
NAN_BOXED(2122285232,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340945919,32,FLEN)
NAN_BOXED(2122285232,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2341470207,32,FLEN)
NAN_BOXED(2122285232,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2342518783,32,FLEN)
NAN_BOXED(2122285232,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2344615935,32,FLEN)
NAN_BOXED(2122285232,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2344615936,32,FLEN)
NAN_BOXED(2122285232,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2346713088,32,FLEN)
NAN_BOXED(2122285232,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2347761664,32,FLEN)
NAN_BOXED(2122285232,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348285952,32,FLEN)
NAN_BOXED(2122285232,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348548096,32,FLEN)
NAN_BOXED(2122285232,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348679168,32,FLEN)
NAN_BOXED(2122285232,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348744704,32,FLEN)
NAN_BOXED(2122285232,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348777472,32,FLEN)
NAN_BOXED(2122285232,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348793856,32,FLEN)
NAN_BOXED(2122285232,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348802048,32,FLEN)
NAN_BOXED(2122285232,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348806144,32,FLEN)
NAN_BOXED(2122285232,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348808192,32,FLEN)
NAN_BOXED(2122285232,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348809216,32,FLEN)
NAN_BOXED(2122285232,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348809728,32,FLEN)
NAN_BOXED(2122285232,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348809984,32,FLEN)
NAN_BOXED(2122285232,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348810112,32,FLEN)
NAN_BOXED(2122285232,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348810176,32,FLEN)
NAN_BOXED(2122285232,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348810208,32,FLEN)
NAN_BOXED(2122285232,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348810224,32,FLEN)
NAN_BOXED(2122285232,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348810232,32,FLEN)
NAN_BOXED(2122285232,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348810236,32,FLEN)
NAN_BOXED(2122285232,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348810238,32,FLEN)
NAN_BOXED(2122285232,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348810239,32,FLEN)
NAN_BOXED(2122360097,32,FLEN)
NAN_BOXED(1082046307,32,FLEN)
NAN_BOXED(1853882368,32,FLEN)
NAN_BOXED(2122360097,32,FLEN)
NAN_BOXED(1082046307,32,FLEN)
NAN_BOXED(1853882369,32,FLEN)
NAN_BOXED(2122360097,32,FLEN)
NAN_BOXED(1082046307,32,FLEN)
NAN_BOXED(1853882371,32,FLEN)
NAN_BOXED(2122360097,32,FLEN)
NAN_BOXED(1082046307,32,FLEN)
NAN_BOXED(1853882375,32,FLEN)
NAN_BOXED(2122360097,32,FLEN)
NAN_BOXED(1082046307,32,FLEN)
NAN_BOXED(1853882383,32,FLEN)
NAN_BOXED(2122360097,32,FLEN)
NAN_BOXED(1082046307,32,FLEN)
NAN_BOXED(1853882399,32,FLEN)
NAN_BOXED(2122360097,32,FLEN)
NAN_BOXED(1082046307,32,FLEN)
NAN_BOXED(1853882431,32,FLEN)
NAN_BOXED(2122360097,32,FLEN)
NAN_BOXED(1082046307,32,FLEN)
NAN_BOXED(1853882495,32,FLEN)
NAN_BOXED(2122360097,32,FLEN)
NAN_BOXED(1082046307,32,FLEN)
NAN_BOXED(1853882623,32,FLEN)
NAN_BOXED(2122360097,32,FLEN)
NAN_BOXED(1082046307,32,FLEN)
NAN_BOXED(1853882879,32,FLEN)
NAN_BOXED(2122360097,32,FLEN)
NAN_BOXED(1082046307,32,FLEN)
NAN_BOXED(1853883391,32,FLEN)
NAN_BOXED(2122360097,32,FLEN)
NAN_BOXED(1082046307,32,FLEN)
NAN_BOXED(1853884415,32,FLEN)
NAN_BOXED(2122360097,32,FLEN)
NAN_BOXED(1082046307,32,FLEN)
NAN_BOXED(1853886463,32,FLEN)
NAN_BOXED(2122360097,32,FLEN)
NAN_BOXED(1082046307,32,FLEN)
NAN_BOXED(1853890559,32,FLEN)
NAN_BOXED(2122360097,32,FLEN)
NAN_BOXED(1082046307,32,FLEN)
NAN_BOXED(1853898751,32,FLEN)
NAN_BOXED(2122360097,32,FLEN)
NAN_BOXED(1082046307,32,FLEN)
NAN_BOXED(1853915135,32,FLEN)
NAN_BOXED(2122360097,32,FLEN)
NAN_BOXED(1082046307,32,FLEN)
NAN_BOXED(1853947903,32,FLEN)
NAN_BOXED(2122360097,32,FLEN)
NAN_BOXED(1082046307,32,FLEN)
NAN_BOXED(1854013439,32,FLEN)
NAN_BOXED(2122360097,32,FLEN)
NAN_BOXED(1082046307,32,FLEN)
NAN_BOXED(1854144511,32,FLEN)
NAN_BOXED(2122360097,32,FLEN)
NAN_BOXED(1082046307,32,FLEN)
NAN_BOXED(1854406655,32,FLEN)
NAN_BOXED(2122360097,32,FLEN)
NAN_BOXED(1082046307,32,FLEN)
NAN_BOXED(1854930943,32,FLEN)
NAN_BOXED(2122360097,32,FLEN)
NAN_BOXED(1082046307,32,FLEN)
NAN_BOXED(1855979519,32,FLEN)
NAN_BOXED(2122360097,32,FLEN)
NAN_BOXED(1082046307,32,FLEN)
NAN_BOXED(1858076671,32,FLEN)
NAN_BOXED(2122360097,32,FLEN)
NAN_BOXED(1082046307,32,FLEN)
NAN_BOXED(1858076672,32,FLEN)
NAN_BOXED(2122360097,32,FLEN)
NAN_BOXED(1082046307,32,FLEN)
NAN_BOXED(1860173824,32,FLEN)
NAN_BOXED(2122360097,32,FLEN)
NAN_BOXED(1082046307,32,FLEN)
NAN_BOXED(1861222400,32,FLEN)
NAN_BOXED(2122360097,32,FLEN)
NAN_BOXED(1082046307,32,FLEN)
NAN_BOXED(1861746688,32,FLEN)
NAN_BOXED(2122360097,32,FLEN)
NAN_BOXED(1082046307,32,FLEN)
NAN_BOXED(1862008832,32,FLEN)
NAN_BOXED(2122360097,32,FLEN)
NAN_BOXED(1082046307,32,FLEN)
NAN_BOXED(1862139904,32,FLEN)
NAN_BOXED(2122360097,32,FLEN)
NAN_BOXED(1082046307,32,FLEN)
NAN_BOXED(1862205440,32,FLEN)
NAN_BOXED(2122360097,32,FLEN)
NAN_BOXED(1082046307,32,FLEN)
NAN_BOXED(1862238208,32,FLEN)
NAN_BOXED(2122360097,32,FLEN)
NAN_BOXED(1082046307,32,FLEN)
NAN_BOXED(1862254592,32,FLEN)
NAN_BOXED(2122360097,32,FLEN)
NAN_BOXED(1082046307,32,FLEN)
NAN_BOXED(1862262784,32,FLEN)
NAN_BOXED(2122360097,32,FLEN)
NAN_BOXED(1082046307,32,FLEN)
NAN_BOXED(1862266880,32,FLEN)
NAN_BOXED(2122360097,32,FLEN)
NAN_BOXED(1082046307,32,FLEN)
NAN_BOXED(1862268928,32,FLEN)
NAN_BOXED(2122360097,32,FLEN)
NAN_BOXED(1082046307,32,FLEN)
NAN_BOXED(1862269952,32,FLEN)
NAN_BOXED(2122360097,32,FLEN)
NAN_BOXED(1082046307,32,FLEN)
NAN_BOXED(1862270464,32,FLEN)
NAN_BOXED(2122360097,32,FLEN)
NAN_BOXED(1082046307,32,FLEN)
NAN_BOXED(1862270720,32,FLEN)
NAN_BOXED(2122360097,32,FLEN)
NAN_BOXED(1082046307,32,FLEN)
NAN_BOXED(1862270848,32,FLEN)
NAN_BOXED(2122360097,32,FLEN)
NAN_BOXED(1082046307,32,FLEN)
NAN_BOXED(1862270912,32,FLEN)
NAN_BOXED(2122360097,32,FLEN)
NAN_BOXED(1082046307,32,FLEN)
NAN_BOXED(1862270944,32,FLEN)
NAN_BOXED(2122360097,32,FLEN)
NAN_BOXED(1082046307,32,FLEN)
NAN_BOXED(1862270960,32,FLEN)
NAN_BOXED(2122360097,32,FLEN)
NAN_BOXED(1082046307,32,FLEN)
NAN_BOXED(1862270968,32,FLEN)
NAN_BOXED(2122360097,32,FLEN)
NAN_BOXED(1082046307,32,FLEN)
NAN_BOXED(1862270972,32,FLEN)
NAN_BOXED(2122360097,32,FLEN)
NAN_BOXED(1082046307,32,FLEN)
NAN_BOXED(1862270974,32,FLEN)
NAN_BOXED(2122360097,32,FLEN)
NAN_BOXED(1082046307,32,FLEN)
NAN_BOXED(1862270975,32,FLEN)
NAN_BOXED(2122360097,32,FLEN)
NAN_BOXED(1082046307,32,FLEN)
NAN_BOXED(2130706433,32,FLEN)
NAN_BOXED(2122360097,32,FLEN)
NAN_BOXED(1082046307,32,FLEN)
NAN_BOXED(2130706435,32,FLEN)
NAN_BOXED(2122360097,32,FLEN)
NAN_BOXED(1082046307,32,FLEN)
NAN_BOXED(2130706439,32,FLEN)
NAN_BOXED(2122360097,32,FLEN)
NAN_BOXED(1082046307,32,FLEN)
NAN_BOXED(2132384153,32,FLEN)
NAN_BOXED(2122360097,32,FLEN)
NAN_BOXED(1082046307,32,FLEN)
NAN_BOXED(2133103177,32,FLEN)
NAN_BOXED(2122360097,32,FLEN)
NAN_BOXED(1082046307,32,FLEN)
NAN_BOXED(2134061875,32,FLEN)
NAN_BOXED(2122360097,32,FLEN)
NAN_BOXED(1082046307,32,FLEN)
NAN_BOXED(2134301549,32,FLEN)
NAN_BOXED(2122360097,32,FLEN)
NAN_BOXED(1082046307,32,FLEN)
NAN_BOXED(2134621115,32,FLEN)
NAN_BOXED(2122360097,32,FLEN)
NAN_BOXED(1082046307,32,FLEN)
NAN_BOXED(2135180356,32,FLEN)
NAN_BOXED(2122360097,32,FLEN)
NAN_BOXED(1082046307,32,FLEN)
NAN_BOXED(2135739596,32,FLEN)
NAN_BOXED(2122360097,32,FLEN)
NAN_BOXED(1082046307,32,FLEN)
NAN_BOXED(2136698294,32,FLEN)
NAN_BOXED(2122360097,32,FLEN)
NAN_BOXED(1082046307,32,FLEN)
NAN_BOXED(2137417318,32,FLEN)
NAN_BOXED(2122360097,32,FLEN)
NAN_BOXED(1082046307,32,FLEN)
NAN_BOXED(2137896667,32,FLEN)
NAN_BOXED(2122360097,32,FLEN)
NAN_BOXED(1082046307,32,FLEN)
NAN_BOXED(2139095032,32,FLEN)
NAN_BOXED(2122360097,32,FLEN)
NAN_BOXED(1082046307,32,FLEN)
NAN_BOXED(2139095036,32,FLEN)
NAN_BOXED(2122360097,32,FLEN)
NAN_BOXED(1082046307,32,FLEN)
NAN_BOXED(2139095038,32,FLEN)
NAN_BOXED(2122366573,32,FLEN)
NAN_BOXED(8340140,32,FLEN)
NAN_BOXED(738197504,32,FLEN)
NAN_BOXED(2122366573,32,FLEN)
NAN_BOXED(8340140,32,FLEN)
NAN_BOXED(738197505,32,FLEN)
NAN_BOXED(2122366573,32,FLEN)
NAN_BOXED(8340140,32,FLEN)
NAN_BOXED(738197507,32,FLEN)
NAN_BOXED(2122366573,32,FLEN)
NAN_BOXED(8340140,32,FLEN)
NAN_BOXED(738197511,32,FLEN)
NAN_BOXED(2122366573,32,FLEN)
NAN_BOXED(8340140,32,FLEN)
NAN_BOXED(738197519,32,FLEN)
NAN_BOXED(2122366573,32,FLEN)
NAN_BOXED(8340140,32,FLEN)
NAN_BOXED(738197535,32,FLEN)
NAN_BOXED(2122366573,32,FLEN)
NAN_BOXED(8340140,32,FLEN)
NAN_BOXED(738197567,32,FLEN)
NAN_BOXED(2122366573,32,FLEN)
NAN_BOXED(8340140,32,FLEN)
NAN_BOXED(738197631,32,FLEN)
NAN_BOXED(2122366573,32,FLEN)
NAN_BOXED(8340140,32,FLEN)
NAN_BOXED(738197759,32,FLEN)
NAN_BOXED(2122366573,32,FLEN)
NAN_BOXED(8340140,32,FLEN)
NAN_BOXED(738198015,32,FLEN)
NAN_BOXED(2122366573,32,FLEN)
NAN_BOXED(8340140,32,FLEN)
NAN_BOXED(738198527,32,FLEN)
NAN_BOXED(2122366573,32,FLEN)
NAN_BOXED(8340140,32,FLEN)
NAN_BOXED(738199551,32,FLEN)
NAN_BOXED(2122366573,32,FLEN)
NAN_BOXED(8340140,32,FLEN)
NAN_BOXED(738201599,32,FLEN)
NAN_BOXED(2122366573,32,FLEN)
NAN_BOXED(8340140,32,FLEN)
NAN_BOXED(738205695,32,FLEN)
NAN_BOXED(2122366573,32,FLEN)
NAN_BOXED(8340140,32,FLEN)
NAN_BOXED(738213887,32,FLEN)
NAN_BOXED(2122366573,32,FLEN)
NAN_BOXED(8340140,32,FLEN)
NAN_BOXED(738230271,32,FLEN)
NAN_BOXED(2122366573,32,FLEN)
NAN_BOXED(8340140,32,FLEN)
NAN_BOXED(738263039,32,FLEN)
NAN_BOXED(2122366573,32,FLEN)
NAN_BOXED(8340140,32,FLEN)
NAN_BOXED(738328575,32,FLEN)
NAN_BOXED(2122366573,32,FLEN)
NAN_BOXED(8340140,32,FLEN)
NAN_BOXED(738459647,32,FLEN)
NAN_BOXED(2122366573,32,FLEN)
NAN_BOXED(8340140,32,FLEN)
NAN_BOXED(738721791,32,FLEN)
NAN_BOXED(2122366573,32,FLEN)
NAN_BOXED(8340140,32,FLEN)
NAN_BOXED(739246079,32,FLEN)
NAN_BOXED(2122366573,32,FLEN)
NAN_BOXED(8340140,32,FLEN)
NAN_BOXED(740294655,32,FLEN)
NAN_BOXED(2122366573,32,FLEN)
NAN_BOXED(8340140,32,FLEN)
NAN_BOXED(742391807,32,FLEN)
NAN_BOXED(2122366573,32,FLEN)
NAN_BOXED(8340140,32,FLEN)
NAN_BOXED(742391808,32,FLEN)
NAN_BOXED(2122366573,32,FLEN)
NAN_BOXED(8340140,32,FLEN)
NAN_BOXED(744488960,32,FLEN)
NAN_BOXED(2122366573,32,FLEN)
NAN_BOXED(8340140,32,FLEN)
NAN_BOXED(745537536,32,FLEN)
NAN_BOXED(2122366573,32,FLEN)
NAN_BOXED(8340140,32,FLEN)
NAN_BOXED(746061824,32,FLEN)
NAN_BOXED(2122366573,32,FLEN)
NAN_BOXED(8340140,32,FLEN)
NAN_BOXED(746323968,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
