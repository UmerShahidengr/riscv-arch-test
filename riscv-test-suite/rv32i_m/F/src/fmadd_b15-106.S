
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:17:59 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_13440:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x00be6d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7f42ac and fs3 == 0 and fe3 == 0x58 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e80be6d; op2val:0x7f42ac;
op3val:0x2c7e0000; valaddr_reg:x3; val_offset:40320*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40320*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13441:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x00be6d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7f42ac and fs3 == 0 and fe3 == 0x58 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e80be6d; op2val:0x7f42ac;
op3val:0x2c7f0000; valaddr_reg:x3; val_offset:40323*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40323*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13442:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x00be6d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7f42ac and fs3 == 0 and fe3 == 0x58 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e80be6d; op2val:0x7f42ac;
op3val:0x2c7f8000; valaddr_reg:x3; val_offset:40326*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40326*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13443:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x00be6d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7f42ac and fs3 == 0 and fe3 == 0x58 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e80be6d; op2val:0x7f42ac;
op3val:0x2c7fc000; valaddr_reg:x3; val_offset:40329*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40329*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13444:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x00be6d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7f42ac and fs3 == 0 and fe3 == 0x58 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e80be6d; op2val:0x7f42ac;
op3val:0x2c7fe000; valaddr_reg:x3; val_offset:40332*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40332*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13445:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x00be6d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7f42ac and fs3 == 0 and fe3 == 0x58 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e80be6d; op2val:0x7f42ac;
op3val:0x2c7ff000; valaddr_reg:x3; val_offset:40335*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40335*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13446:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x00be6d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7f42ac and fs3 == 0 and fe3 == 0x58 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e80be6d; op2val:0x7f42ac;
op3val:0x2c7ff800; valaddr_reg:x3; val_offset:40338*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40338*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13447:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x00be6d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7f42ac and fs3 == 0 and fe3 == 0x58 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e80be6d; op2val:0x7f42ac;
op3val:0x2c7ffc00; valaddr_reg:x3; val_offset:40341*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40341*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13448:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x00be6d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7f42ac and fs3 == 0 and fe3 == 0x58 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e80be6d; op2val:0x7f42ac;
op3val:0x2c7ffe00; valaddr_reg:x3; val_offset:40344*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40344*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13449:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x00be6d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7f42ac and fs3 == 0 and fe3 == 0x58 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e80be6d; op2val:0x7f42ac;
op3val:0x2c7fff00; valaddr_reg:x3; val_offset:40347*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40347*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13450:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x00be6d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7f42ac and fs3 == 0 and fe3 == 0x58 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e80be6d; op2val:0x7f42ac;
op3val:0x2c7fff80; valaddr_reg:x3; val_offset:40350*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40350*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13451:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x00be6d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7f42ac and fs3 == 0 and fe3 == 0x58 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e80be6d; op2val:0x7f42ac;
op3val:0x2c7fffc0; valaddr_reg:x3; val_offset:40353*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40353*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13452:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x00be6d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7f42ac and fs3 == 0 and fe3 == 0x58 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e80be6d; op2val:0x7f42ac;
op3val:0x2c7fffe0; valaddr_reg:x3; val_offset:40356*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40356*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13453:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x00be6d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7f42ac and fs3 == 0 and fe3 == 0x58 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e80be6d; op2val:0x7f42ac;
op3val:0x2c7ffff0; valaddr_reg:x3; val_offset:40359*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40359*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13454:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x00be6d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7f42ac and fs3 == 0 and fe3 == 0x58 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e80be6d; op2val:0x7f42ac;
op3val:0x2c7ffff8; valaddr_reg:x3; val_offset:40362*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40362*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13455:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x00be6d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7f42ac and fs3 == 0 and fe3 == 0x58 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e80be6d; op2val:0x7f42ac;
op3val:0x2c7ffffc; valaddr_reg:x3; val_offset:40365*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40365*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13456:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x00be6d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7f42ac and fs3 == 0 and fe3 == 0x58 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e80be6d; op2val:0x7f42ac;
op3val:0x2c7ffffe; valaddr_reg:x3; val_offset:40368*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40368*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13457:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x00be6d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7f42ac and fs3 == 0 and fe3 == 0x58 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e80be6d; op2val:0x7f42ac;
op3val:0x2c7fffff; valaddr_reg:x3; val_offset:40371*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40371*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13458:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x00be6d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7f42ac and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e80be6d; op2val:0x7f42ac;
op3val:0x3f800001; valaddr_reg:x3; val_offset:40374*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40374*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13459:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x00be6d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7f42ac and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e80be6d; op2val:0x7f42ac;
op3val:0x3f800003; valaddr_reg:x3; val_offset:40377*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40377*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13460:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x00be6d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7f42ac and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e80be6d; op2val:0x7f42ac;
op3val:0x3f800007; valaddr_reg:x3; val_offset:40380*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40380*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13461:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x00be6d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7f42ac and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e80be6d; op2val:0x7f42ac;
op3val:0x3f999999; valaddr_reg:x3; val_offset:40383*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40383*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13462:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x00be6d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7f42ac and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e80be6d; op2val:0x7f42ac;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:40386*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40386*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13463:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x00be6d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7f42ac and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e80be6d; op2val:0x7f42ac;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:40389*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40389*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13464:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x00be6d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7f42ac and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e80be6d; op2val:0x7f42ac;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:40392*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40392*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13465:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x00be6d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7f42ac and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e80be6d; op2val:0x7f42ac;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:40395*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40395*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13466:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x00be6d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7f42ac and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e80be6d; op2val:0x7f42ac;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:40398*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40398*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13467:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x00be6d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7f42ac and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e80be6d; op2val:0x7f42ac;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:40401*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40401*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13468:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x00be6d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7f42ac and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e80be6d; op2val:0x7f42ac;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:40404*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40404*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13469:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x00be6d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7f42ac and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e80be6d; op2val:0x7f42ac;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:40407*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40407*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13470:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x00be6d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7f42ac and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e80be6d; op2val:0x7f42ac;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:40410*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40410*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13471:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x00be6d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7f42ac and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e80be6d; op2val:0x7f42ac;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:40413*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40413*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13472:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x00be6d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7f42ac and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e80be6d; op2val:0x7f42ac;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:40416*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40416*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13473:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x00be6d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7f42ac and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e80be6d; op2val:0x7f42ac;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:40419*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40419*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13474:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x019aaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7e6a65 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e819aaf; op2val:0x807e6a65;
op3val:0xbf800001; valaddr_reg:x3; val_offset:40422*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40422*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13475:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x019aaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7e6a65 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e819aaf; op2val:0x807e6a65;
op3val:0xbf800003; valaddr_reg:x3; val_offset:40425*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40425*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13476:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x019aaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7e6a65 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e819aaf; op2val:0x807e6a65;
op3val:0xbf800007; valaddr_reg:x3; val_offset:40428*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40428*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13477:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x019aaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7e6a65 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e819aaf; op2val:0x807e6a65;
op3val:0xbf999999; valaddr_reg:x3; val_offset:40431*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40431*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13478:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x019aaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7e6a65 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e819aaf; op2val:0x807e6a65;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:40434*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40434*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13479:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x019aaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7e6a65 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e819aaf; op2val:0x807e6a65;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:40437*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40437*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13480:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x019aaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7e6a65 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e819aaf; op2val:0x807e6a65;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:40440*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40440*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13481:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x019aaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7e6a65 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e819aaf; op2val:0x807e6a65;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:40443*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40443*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13482:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x019aaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7e6a65 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e819aaf; op2val:0x807e6a65;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:40446*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40446*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13483:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x019aaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7e6a65 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e819aaf; op2val:0x807e6a65;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:40449*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40449*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13484:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x019aaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7e6a65 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e819aaf; op2val:0x807e6a65;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:40452*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40452*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13485:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x019aaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7e6a65 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e819aaf; op2val:0x807e6a65;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:40455*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40455*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13486:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x019aaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7e6a65 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e819aaf; op2val:0x807e6a65;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:40458*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40458*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13487:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x019aaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7e6a65 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e819aaf; op2val:0x807e6a65;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:40461*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40461*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13488:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x019aaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7e6a65 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e819aaf; op2val:0x807e6a65;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:40464*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40464*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13489:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x019aaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7e6a65 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e819aaf; op2val:0x807e6a65;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:40467*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40467*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13490:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x019aaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7e6a65 and fs3 == 1 and fe3 == 0x9b and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e819aaf; op2val:0x807e6a65;
op3val:0xcd800000; valaddr_reg:x3; val_offset:40470*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40470*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13491:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x019aaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7e6a65 and fs3 == 1 and fe3 == 0x9b and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e819aaf; op2val:0x807e6a65;
op3val:0xcd800001; valaddr_reg:x3; val_offset:40473*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40473*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13492:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x019aaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7e6a65 and fs3 == 1 and fe3 == 0x9b and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e819aaf; op2val:0x807e6a65;
op3val:0xcd800003; valaddr_reg:x3; val_offset:40476*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40476*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13493:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x019aaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7e6a65 and fs3 == 1 and fe3 == 0x9b and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e819aaf; op2val:0x807e6a65;
op3val:0xcd800007; valaddr_reg:x3; val_offset:40479*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40479*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13494:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x019aaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7e6a65 and fs3 == 1 and fe3 == 0x9b and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e819aaf; op2val:0x807e6a65;
op3val:0xcd80000f; valaddr_reg:x3; val_offset:40482*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40482*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13495:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x019aaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7e6a65 and fs3 == 1 and fe3 == 0x9b and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e819aaf; op2val:0x807e6a65;
op3val:0xcd80001f; valaddr_reg:x3; val_offset:40485*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40485*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13496:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x019aaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7e6a65 and fs3 == 1 and fe3 == 0x9b and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e819aaf; op2val:0x807e6a65;
op3val:0xcd80003f; valaddr_reg:x3; val_offset:40488*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40488*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13497:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x019aaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7e6a65 and fs3 == 1 and fe3 == 0x9b and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e819aaf; op2val:0x807e6a65;
op3val:0xcd80007f; valaddr_reg:x3; val_offset:40491*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40491*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13498:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x019aaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7e6a65 and fs3 == 1 and fe3 == 0x9b and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e819aaf; op2val:0x807e6a65;
op3val:0xcd8000ff; valaddr_reg:x3; val_offset:40494*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40494*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13499:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x019aaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7e6a65 and fs3 == 1 and fe3 == 0x9b and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e819aaf; op2val:0x807e6a65;
op3val:0xcd8001ff; valaddr_reg:x3; val_offset:40497*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40497*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13500:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x019aaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7e6a65 and fs3 == 1 and fe3 == 0x9b and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e819aaf; op2val:0x807e6a65;
op3val:0xcd8003ff; valaddr_reg:x3; val_offset:40500*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40500*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13501:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x019aaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7e6a65 and fs3 == 1 and fe3 == 0x9b and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e819aaf; op2val:0x807e6a65;
op3val:0xcd8007ff; valaddr_reg:x3; val_offset:40503*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40503*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13502:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x019aaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7e6a65 and fs3 == 1 and fe3 == 0x9b and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e819aaf; op2val:0x807e6a65;
op3val:0xcd800fff; valaddr_reg:x3; val_offset:40506*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40506*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13503:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x019aaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7e6a65 and fs3 == 1 and fe3 == 0x9b and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e819aaf; op2val:0x807e6a65;
op3val:0xcd801fff; valaddr_reg:x3; val_offset:40509*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40509*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13504:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x019aaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7e6a65 and fs3 == 1 and fe3 == 0x9b and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e819aaf; op2val:0x807e6a65;
op3val:0xcd803fff; valaddr_reg:x3; val_offset:40512*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40512*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13505:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x019aaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7e6a65 and fs3 == 1 and fe3 == 0x9b and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e819aaf; op2val:0x807e6a65;
op3val:0xcd807fff; valaddr_reg:x3; val_offset:40515*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40515*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13506:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x019aaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7e6a65 and fs3 == 1 and fe3 == 0x9b and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e819aaf; op2val:0x807e6a65;
op3val:0xcd80ffff; valaddr_reg:x3; val_offset:40518*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40518*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13507:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x019aaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7e6a65 and fs3 == 1 and fe3 == 0x9b and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e819aaf; op2val:0x807e6a65;
op3val:0xcd81ffff; valaddr_reg:x3; val_offset:40521*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40521*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13508:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x019aaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7e6a65 and fs3 == 1 and fe3 == 0x9b and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e819aaf; op2val:0x807e6a65;
op3val:0xcd83ffff; valaddr_reg:x3; val_offset:40524*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40524*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13509:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x019aaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7e6a65 and fs3 == 1 and fe3 == 0x9b and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e819aaf; op2val:0x807e6a65;
op3val:0xcd87ffff; valaddr_reg:x3; val_offset:40527*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40527*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13510:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x019aaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7e6a65 and fs3 == 1 and fe3 == 0x9b and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e819aaf; op2val:0x807e6a65;
op3val:0xcd8fffff; valaddr_reg:x3; val_offset:40530*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40530*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13511:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x019aaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7e6a65 and fs3 == 1 and fe3 == 0x9b and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e819aaf; op2val:0x807e6a65;
op3val:0xcd9fffff; valaddr_reg:x3; val_offset:40533*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40533*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13512:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x019aaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7e6a65 and fs3 == 1 and fe3 == 0x9b and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e819aaf; op2val:0x807e6a65;
op3val:0xcdbfffff; valaddr_reg:x3; val_offset:40536*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40536*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13513:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x019aaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7e6a65 and fs3 == 1 and fe3 == 0x9b and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e819aaf; op2val:0x807e6a65;
op3val:0xcdc00000; valaddr_reg:x3; val_offset:40539*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40539*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13514:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x019aaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7e6a65 and fs3 == 1 and fe3 == 0x9b and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e819aaf; op2val:0x807e6a65;
op3val:0xcde00000; valaddr_reg:x3; val_offset:40542*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40542*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13515:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x019aaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7e6a65 and fs3 == 1 and fe3 == 0x9b and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e819aaf; op2val:0x807e6a65;
op3val:0xcdf00000; valaddr_reg:x3; val_offset:40545*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40545*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13516:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x019aaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7e6a65 and fs3 == 1 and fe3 == 0x9b and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e819aaf; op2val:0x807e6a65;
op3val:0xcdf80000; valaddr_reg:x3; val_offset:40548*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40548*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13517:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x019aaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7e6a65 and fs3 == 1 and fe3 == 0x9b and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e819aaf; op2val:0x807e6a65;
op3val:0xcdfc0000; valaddr_reg:x3; val_offset:40551*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40551*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13518:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x019aaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7e6a65 and fs3 == 1 and fe3 == 0x9b and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e819aaf; op2val:0x807e6a65;
op3val:0xcdfe0000; valaddr_reg:x3; val_offset:40554*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40554*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13519:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x019aaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7e6a65 and fs3 == 1 and fe3 == 0x9b and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e819aaf; op2val:0x807e6a65;
op3val:0xcdff0000; valaddr_reg:x3; val_offset:40557*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40557*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13520:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x019aaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7e6a65 and fs3 == 1 and fe3 == 0x9b and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e819aaf; op2val:0x807e6a65;
op3val:0xcdff8000; valaddr_reg:x3; val_offset:40560*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40560*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13521:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x019aaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7e6a65 and fs3 == 1 and fe3 == 0x9b and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e819aaf; op2val:0x807e6a65;
op3val:0xcdffc000; valaddr_reg:x3; val_offset:40563*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40563*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13522:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x019aaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7e6a65 and fs3 == 1 and fe3 == 0x9b and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e819aaf; op2val:0x807e6a65;
op3val:0xcdffe000; valaddr_reg:x3; val_offset:40566*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40566*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13523:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x019aaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7e6a65 and fs3 == 1 and fe3 == 0x9b and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e819aaf; op2val:0x807e6a65;
op3val:0xcdfff000; valaddr_reg:x3; val_offset:40569*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40569*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13524:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x019aaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7e6a65 and fs3 == 1 and fe3 == 0x9b and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e819aaf; op2val:0x807e6a65;
op3val:0xcdfff800; valaddr_reg:x3; val_offset:40572*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40572*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13525:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x019aaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7e6a65 and fs3 == 1 and fe3 == 0x9b and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e819aaf; op2val:0x807e6a65;
op3val:0xcdfffc00; valaddr_reg:x3; val_offset:40575*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40575*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13526:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x019aaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7e6a65 and fs3 == 1 and fe3 == 0x9b and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e819aaf; op2val:0x807e6a65;
op3val:0xcdfffe00; valaddr_reg:x3; val_offset:40578*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40578*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13527:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x019aaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7e6a65 and fs3 == 1 and fe3 == 0x9b and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e819aaf; op2val:0x807e6a65;
op3val:0xcdffff00; valaddr_reg:x3; val_offset:40581*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40581*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13528:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x019aaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7e6a65 and fs3 == 1 and fe3 == 0x9b and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e819aaf; op2val:0x807e6a65;
op3val:0xcdffff80; valaddr_reg:x3; val_offset:40584*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40584*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13529:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x019aaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7e6a65 and fs3 == 1 and fe3 == 0x9b and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e819aaf; op2val:0x807e6a65;
op3val:0xcdffffc0; valaddr_reg:x3; val_offset:40587*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40587*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13530:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x019aaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7e6a65 and fs3 == 1 and fe3 == 0x9b and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e819aaf; op2val:0x807e6a65;
op3val:0xcdffffe0; valaddr_reg:x3; val_offset:40590*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40590*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13531:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x019aaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7e6a65 and fs3 == 1 and fe3 == 0x9b and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e819aaf; op2val:0x807e6a65;
op3val:0xcdfffff0; valaddr_reg:x3; val_offset:40593*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40593*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13532:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x019aaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7e6a65 and fs3 == 1 and fe3 == 0x9b and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e819aaf; op2val:0x807e6a65;
op3val:0xcdfffff8; valaddr_reg:x3; val_offset:40596*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40596*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13533:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x019aaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7e6a65 and fs3 == 1 and fe3 == 0x9b and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e819aaf; op2val:0x807e6a65;
op3val:0xcdfffffc; valaddr_reg:x3; val_offset:40599*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40599*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13534:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x019aaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7e6a65 and fs3 == 1 and fe3 == 0x9b and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e819aaf; op2val:0x807e6a65;
op3val:0xcdfffffe; valaddr_reg:x3; val_offset:40602*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40602*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13535:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x019aaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7e6a65 and fs3 == 1 and fe3 == 0x9b and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e819aaf; op2val:0x807e6a65;
op3val:0xcdffffff; valaddr_reg:x3; val_offset:40605*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40605*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13536:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x01bd84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e81bd84; op2val:0x0;
op3val:0x800001; valaddr_reg:x3; val_offset:40608*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40608*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13537:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x01bd84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e81bd84; op2val:0x0;
op3val:0x800003; valaddr_reg:x3; val_offset:40611*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40611*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13538:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x01bd84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e81bd84; op2val:0x0;
op3val:0x800007; valaddr_reg:x3; val_offset:40614*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40614*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13539:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x01bd84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e81bd84; op2val:0x0;
op3val:0x999999; valaddr_reg:x3; val_offset:40617*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40617*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13540:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x01bd84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e81bd84; op2val:0x0;
op3val:0xa49249; valaddr_reg:x3; val_offset:40620*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40620*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13541:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x01bd84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e81bd84; op2val:0x0;
op3val:0xb33333; valaddr_reg:x3; val_offset:40623*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40623*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13542:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x01bd84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e81bd84; op2val:0x0;
op3val:0xb6db6d; valaddr_reg:x3; val_offset:40626*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40626*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13543:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x01bd84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e81bd84; op2val:0x0;
op3val:0xbbbbbb; valaddr_reg:x3; val_offset:40629*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40629*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13544:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x01bd84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e81bd84; op2val:0x0;
op3val:0xc44444; valaddr_reg:x3; val_offset:40632*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40632*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13545:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x01bd84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e81bd84; op2val:0x0;
op3val:0xcccccc; valaddr_reg:x3; val_offset:40635*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40635*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13546:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x01bd84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e81bd84; op2val:0x0;
op3val:0xdb6db6; valaddr_reg:x3; val_offset:40638*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40638*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13547:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x01bd84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e81bd84; op2val:0x0;
op3val:0xe66666; valaddr_reg:x3; val_offset:40641*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40641*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13548:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x01bd84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e81bd84; op2val:0x0;
op3val:0xedb6db; valaddr_reg:x3; val_offset:40644*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40644*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13549:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x01bd84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e81bd84; op2val:0x0;
op3val:0xfffff8; valaddr_reg:x3; val_offset:40647*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40647*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13550:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x01bd84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e81bd84; op2val:0x0;
op3val:0xfffffc; valaddr_reg:x3; val_offset:40650*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40650*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13551:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x01bd84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e81bd84; op2val:0x0;
op3val:0xfffffe; valaddr_reg:x3; val_offset:40653*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40653*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13552:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x01bd84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e81bd84; op2val:0x0;
op3val:0xd800000; valaddr_reg:x3; val_offset:40656*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40656*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13553:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x01bd84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e81bd84; op2val:0x0;
op3val:0xd800001; valaddr_reg:x3; val_offset:40659*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40659*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13554:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x01bd84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e81bd84; op2val:0x0;
op3val:0xd800003; valaddr_reg:x3; val_offset:40662*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40662*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13555:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x01bd84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e81bd84; op2val:0x0;
op3val:0xd800007; valaddr_reg:x3; val_offset:40665*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40665*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13556:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x01bd84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e81bd84; op2val:0x0;
op3val:0xd80000f; valaddr_reg:x3; val_offset:40668*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40668*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13557:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x01bd84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e81bd84; op2val:0x0;
op3val:0xd80001f; valaddr_reg:x3; val_offset:40671*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40671*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13558:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x01bd84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e81bd84; op2val:0x0;
op3val:0xd80003f; valaddr_reg:x3; val_offset:40674*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40674*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13559:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x01bd84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e81bd84; op2val:0x0;
op3val:0xd80007f; valaddr_reg:x3; val_offset:40677*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40677*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13560:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x01bd84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e81bd84; op2val:0x0;
op3val:0xd8000ff; valaddr_reg:x3; val_offset:40680*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40680*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13561:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x01bd84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e81bd84; op2val:0x0;
op3val:0xd8001ff; valaddr_reg:x3; val_offset:40683*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40683*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13562:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x01bd84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e81bd84; op2val:0x0;
op3val:0xd8003ff; valaddr_reg:x3; val_offset:40686*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40686*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13563:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x01bd84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e81bd84; op2val:0x0;
op3val:0xd8007ff; valaddr_reg:x3; val_offset:40689*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40689*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13564:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x01bd84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e81bd84; op2val:0x0;
op3val:0xd800fff; valaddr_reg:x3; val_offset:40692*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40692*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13565:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x01bd84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e81bd84; op2val:0x0;
op3val:0xd801fff; valaddr_reg:x3; val_offset:40695*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40695*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13566:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x01bd84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e81bd84; op2val:0x0;
op3val:0xd803fff; valaddr_reg:x3; val_offset:40698*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40698*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13567:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x01bd84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e81bd84; op2val:0x0;
op3val:0xd807fff; valaddr_reg:x3; val_offset:40701*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40701*0 + 3*105*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2122366573,32,FLEN)
NAN_BOXED(8340140,32,FLEN)
NAN_BOXED(746455040,32,FLEN)
NAN_BOXED(2122366573,32,FLEN)
NAN_BOXED(8340140,32,FLEN)
NAN_BOXED(746520576,32,FLEN)
NAN_BOXED(2122366573,32,FLEN)
NAN_BOXED(8340140,32,FLEN)
NAN_BOXED(746553344,32,FLEN)
NAN_BOXED(2122366573,32,FLEN)
NAN_BOXED(8340140,32,FLEN)
NAN_BOXED(746569728,32,FLEN)
NAN_BOXED(2122366573,32,FLEN)
NAN_BOXED(8340140,32,FLEN)
NAN_BOXED(746577920,32,FLEN)
NAN_BOXED(2122366573,32,FLEN)
NAN_BOXED(8340140,32,FLEN)
NAN_BOXED(746582016,32,FLEN)
NAN_BOXED(2122366573,32,FLEN)
NAN_BOXED(8340140,32,FLEN)
NAN_BOXED(746584064,32,FLEN)
NAN_BOXED(2122366573,32,FLEN)
NAN_BOXED(8340140,32,FLEN)
NAN_BOXED(746585088,32,FLEN)
NAN_BOXED(2122366573,32,FLEN)
NAN_BOXED(8340140,32,FLEN)
NAN_BOXED(746585600,32,FLEN)
NAN_BOXED(2122366573,32,FLEN)
NAN_BOXED(8340140,32,FLEN)
NAN_BOXED(746585856,32,FLEN)
NAN_BOXED(2122366573,32,FLEN)
NAN_BOXED(8340140,32,FLEN)
NAN_BOXED(746585984,32,FLEN)
NAN_BOXED(2122366573,32,FLEN)
NAN_BOXED(8340140,32,FLEN)
NAN_BOXED(746586048,32,FLEN)
NAN_BOXED(2122366573,32,FLEN)
NAN_BOXED(8340140,32,FLEN)
NAN_BOXED(746586080,32,FLEN)
NAN_BOXED(2122366573,32,FLEN)
NAN_BOXED(8340140,32,FLEN)
NAN_BOXED(746586096,32,FLEN)
NAN_BOXED(2122366573,32,FLEN)
NAN_BOXED(8340140,32,FLEN)
NAN_BOXED(746586104,32,FLEN)
NAN_BOXED(2122366573,32,FLEN)
NAN_BOXED(8340140,32,FLEN)
NAN_BOXED(746586108,32,FLEN)
NAN_BOXED(2122366573,32,FLEN)
NAN_BOXED(8340140,32,FLEN)
NAN_BOXED(746586110,32,FLEN)
NAN_BOXED(2122366573,32,FLEN)
NAN_BOXED(8340140,32,FLEN)
NAN_BOXED(746586111,32,FLEN)
NAN_BOXED(2122366573,32,FLEN)
NAN_BOXED(8340140,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2122366573,32,FLEN)
NAN_BOXED(8340140,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2122366573,32,FLEN)
NAN_BOXED(8340140,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2122366573,32,FLEN)
NAN_BOXED(8340140,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2122366573,32,FLEN)
NAN_BOXED(8340140,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2122366573,32,FLEN)
NAN_BOXED(8340140,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2122366573,32,FLEN)
NAN_BOXED(8340140,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2122366573,32,FLEN)
NAN_BOXED(8340140,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2122366573,32,FLEN)
NAN_BOXED(8340140,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2122366573,32,FLEN)
NAN_BOXED(8340140,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2122366573,32,FLEN)
NAN_BOXED(8340140,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2122366573,32,FLEN)
NAN_BOXED(8340140,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2122366573,32,FLEN)
NAN_BOXED(8340140,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2122366573,32,FLEN)
NAN_BOXED(8340140,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2122366573,32,FLEN)
NAN_BOXED(8340140,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2122366573,32,FLEN)
NAN_BOXED(8340140,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2122422959,32,FLEN)
NAN_BOXED(2155768421,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2122422959,32,FLEN)
NAN_BOXED(2155768421,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2122422959,32,FLEN)
NAN_BOXED(2155768421,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
NAN_BOXED(2122422959,32,FLEN)
NAN_BOXED(2155768421,32,FLEN)
NAN_BOXED(3214514585,32,FLEN)
NAN_BOXED(2122422959,32,FLEN)
NAN_BOXED(2155768421,32,FLEN)
NAN_BOXED(3215233609,32,FLEN)
NAN_BOXED(2122422959,32,FLEN)
NAN_BOXED(2155768421,32,FLEN)
NAN_BOXED(3216192307,32,FLEN)
NAN_BOXED(2122422959,32,FLEN)
NAN_BOXED(2155768421,32,FLEN)
NAN_BOXED(3216431981,32,FLEN)
NAN_BOXED(2122422959,32,FLEN)
NAN_BOXED(2155768421,32,FLEN)
NAN_BOXED(3216751547,32,FLEN)
NAN_BOXED(2122422959,32,FLEN)
NAN_BOXED(2155768421,32,FLEN)
NAN_BOXED(3217310788,32,FLEN)
NAN_BOXED(2122422959,32,FLEN)
NAN_BOXED(2155768421,32,FLEN)
NAN_BOXED(3217870028,32,FLEN)
NAN_BOXED(2122422959,32,FLEN)
NAN_BOXED(2155768421,32,FLEN)
NAN_BOXED(3218828726,32,FLEN)
NAN_BOXED(2122422959,32,FLEN)
NAN_BOXED(2155768421,32,FLEN)
NAN_BOXED(3219547750,32,FLEN)
NAN_BOXED(2122422959,32,FLEN)
NAN_BOXED(2155768421,32,FLEN)
NAN_BOXED(3220027099,32,FLEN)
NAN_BOXED(2122422959,32,FLEN)
NAN_BOXED(2155768421,32,FLEN)
NAN_BOXED(3221225464,32,FLEN)
NAN_BOXED(2122422959,32,FLEN)
NAN_BOXED(2155768421,32,FLEN)
NAN_BOXED(3221225468,32,FLEN)
NAN_BOXED(2122422959,32,FLEN)
NAN_BOXED(2155768421,32,FLEN)
NAN_BOXED(3221225470,32,FLEN)
NAN_BOXED(2122422959,32,FLEN)
NAN_BOXED(2155768421,32,FLEN)
NAN_BOXED(3447717888,32,FLEN)
NAN_BOXED(2122422959,32,FLEN)
NAN_BOXED(2155768421,32,FLEN)
NAN_BOXED(3447717889,32,FLEN)
NAN_BOXED(2122422959,32,FLEN)
NAN_BOXED(2155768421,32,FLEN)
NAN_BOXED(3447717891,32,FLEN)
NAN_BOXED(2122422959,32,FLEN)
NAN_BOXED(2155768421,32,FLEN)
NAN_BOXED(3447717895,32,FLEN)
NAN_BOXED(2122422959,32,FLEN)
NAN_BOXED(2155768421,32,FLEN)
NAN_BOXED(3447717903,32,FLEN)
NAN_BOXED(2122422959,32,FLEN)
NAN_BOXED(2155768421,32,FLEN)
NAN_BOXED(3447717919,32,FLEN)
NAN_BOXED(2122422959,32,FLEN)
NAN_BOXED(2155768421,32,FLEN)
NAN_BOXED(3447717951,32,FLEN)
NAN_BOXED(2122422959,32,FLEN)
NAN_BOXED(2155768421,32,FLEN)
NAN_BOXED(3447718015,32,FLEN)
NAN_BOXED(2122422959,32,FLEN)
NAN_BOXED(2155768421,32,FLEN)
NAN_BOXED(3447718143,32,FLEN)
NAN_BOXED(2122422959,32,FLEN)
NAN_BOXED(2155768421,32,FLEN)
NAN_BOXED(3447718399,32,FLEN)
NAN_BOXED(2122422959,32,FLEN)
NAN_BOXED(2155768421,32,FLEN)
NAN_BOXED(3447718911,32,FLEN)
NAN_BOXED(2122422959,32,FLEN)
NAN_BOXED(2155768421,32,FLEN)
NAN_BOXED(3447719935,32,FLEN)
NAN_BOXED(2122422959,32,FLEN)
NAN_BOXED(2155768421,32,FLEN)
NAN_BOXED(3447721983,32,FLEN)
NAN_BOXED(2122422959,32,FLEN)
NAN_BOXED(2155768421,32,FLEN)
NAN_BOXED(3447726079,32,FLEN)
NAN_BOXED(2122422959,32,FLEN)
NAN_BOXED(2155768421,32,FLEN)
NAN_BOXED(3447734271,32,FLEN)
NAN_BOXED(2122422959,32,FLEN)
NAN_BOXED(2155768421,32,FLEN)
NAN_BOXED(3447750655,32,FLEN)
NAN_BOXED(2122422959,32,FLEN)
NAN_BOXED(2155768421,32,FLEN)
NAN_BOXED(3447783423,32,FLEN)
NAN_BOXED(2122422959,32,FLEN)
NAN_BOXED(2155768421,32,FLEN)
NAN_BOXED(3447848959,32,FLEN)
NAN_BOXED(2122422959,32,FLEN)
NAN_BOXED(2155768421,32,FLEN)
NAN_BOXED(3447980031,32,FLEN)
NAN_BOXED(2122422959,32,FLEN)
NAN_BOXED(2155768421,32,FLEN)
NAN_BOXED(3448242175,32,FLEN)
NAN_BOXED(2122422959,32,FLEN)
NAN_BOXED(2155768421,32,FLEN)
NAN_BOXED(3448766463,32,FLEN)
NAN_BOXED(2122422959,32,FLEN)
NAN_BOXED(2155768421,32,FLEN)
NAN_BOXED(3449815039,32,FLEN)
NAN_BOXED(2122422959,32,FLEN)
NAN_BOXED(2155768421,32,FLEN)
NAN_BOXED(3451912191,32,FLEN)
NAN_BOXED(2122422959,32,FLEN)
NAN_BOXED(2155768421,32,FLEN)
NAN_BOXED(3451912192,32,FLEN)
NAN_BOXED(2122422959,32,FLEN)
NAN_BOXED(2155768421,32,FLEN)
NAN_BOXED(3454009344,32,FLEN)
NAN_BOXED(2122422959,32,FLEN)
NAN_BOXED(2155768421,32,FLEN)
NAN_BOXED(3455057920,32,FLEN)
NAN_BOXED(2122422959,32,FLEN)
NAN_BOXED(2155768421,32,FLEN)
NAN_BOXED(3455582208,32,FLEN)
NAN_BOXED(2122422959,32,FLEN)
NAN_BOXED(2155768421,32,FLEN)
NAN_BOXED(3455844352,32,FLEN)
NAN_BOXED(2122422959,32,FLEN)
NAN_BOXED(2155768421,32,FLEN)
NAN_BOXED(3455975424,32,FLEN)
NAN_BOXED(2122422959,32,FLEN)
NAN_BOXED(2155768421,32,FLEN)
NAN_BOXED(3456040960,32,FLEN)
NAN_BOXED(2122422959,32,FLEN)
NAN_BOXED(2155768421,32,FLEN)
NAN_BOXED(3456073728,32,FLEN)
NAN_BOXED(2122422959,32,FLEN)
NAN_BOXED(2155768421,32,FLEN)
NAN_BOXED(3456090112,32,FLEN)
NAN_BOXED(2122422959,32,FLEN)
NAN_BOXED(2155768421,32,FLEN)
NAN_BOXED(3456098304,32,FLEN)
NAN_BOXED(2122422959,32,FLEN)
NAN_BOXED(2155768421,32,FLEN)
NAN_BOXED(3456102400,32,FLEN)
NAN_BOXED(2122422959,32,FLEN)
NAN_BOXED(2155768421,32,FLEN)
NAN_BOXED(3456104448,32,FLEN)
NAN_BOXED(2122422959,32,FLEN)
NAN_BOXED(2155768421,32,FLEN)
NAN_BOXED(3456105472,32,FLEN)
NAN_BOXED(2122422959,32,FLEN)
NAN_BOXED(2155768421,32,FLEN)
NAN_BOXED(3456105984,32,FLEN)
NAN_BOXED(2122422959,32,FLEN)
NAN_BOXED(2155768421,32,FLEN)
NAN_BOXED(3456106240,32,FLEN)
NAN_BOXED(2122422959,32,FLEN)
NAN_BOXED(2155768421,32,FLEN)
NAN_BOXED(3456106368,32,FLEN)
NAN_BOXED(2122422959,32,FLEN)
NAN_BOXED(2155768421,32,FLEN)
NAN_BOXED(3456106432,32,FLEN)
NAN_BOXED(2122422959,32,FLEN)
NAN_BOXED(2155768421,32,FLEN)
NAN_BOXED(3456106464,32,FLEN)
NAN_BOXED(2122422959,32,FLEN)
NAN_BOXED(2155768421,32,FLEN)
NAN_BOXED(3456106480,32,FLEN)
NAN_BOXED(2122422959,32,FLEN)
NAN_BOXED(2155768421,32,FLEN)
NAN_BOXED(3456106488,32,FLEN)
NAN_BOXED(2122422959,32,FLEN)
NAN_BOXED(2155768421,32,FLEN)
NAN_BOXED(3456106492,32,FLEN)
NAN_BOXED(2122422959,32,FLEN)
NAN_BOXED(2155768421,32,FLEN)
NAN_BOXED(3456106494,32,FLEN)
NAN_BOXED(2122422959,32,FLEN)
NAN_BOXED(2155768421,32,FLEN)
NAN_BOXED(3456106495,32,FLEN)
NAN_BOXED(2122431876,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(2122431876,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388611,32,FLEN)
NAN_BOXED(2122431876,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388615,32,FLEN)
NAN_BOXED(2122431876,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(10066329,32,FLEN)
NAN_BOXED(2122431876,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(10785353,32,FLEN)
NAN_BOXED(2122431876,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(11744051,32,FLEN)
NAN_BOXED(2122431876,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(11983725,32,FLEN)
NAN_BOXED(2122431876,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(12303291,32,FLEN)
NAN_BOXED(2122431876,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(12862532,32,FLEN)
NAN_BOXED(2122431876,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(13421772,32,FLEN)
NAN_BOXED(2122431876,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(14380470,32,FLEN)
NAN_BOXED(2122431876,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(15099494,32,FLEN)
NAN_BOXED(2122431876,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(15578843,32,FLEN)
NAN_BOXED(2122431876,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777208,32,FLEN)
NAN_BOXED(2122431876,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777212,32,FLEN)
NAN_BOXED(2122431876,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777214,32,FLEN)
NAN_BOXED(2122431876,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226492416,32,FLEN)
NAN_BOXED(2122431876,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226492417,32,FLEN)
NAN_BOXED(2122431876,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226492419,32,FLEN)
NAN_BOXED(2122431876,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226492423,32,FLEN)
NAN_BOXED(2122431876,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226492431,32,FLEN)
NAN_BOXED(2122431876,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226492447,32,FLEN)
NAN_BOXED(2122431876,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226492479,32,FLEN)
NAN_BOXED(2122431876,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226492543,32,FLEN)
NAN_BOXED(2122431876,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226492671,32,FLEN)
NAN_BOXED(2122431876,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226492927,32,FLEN)
NAN_BOXED(2122431876,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226493439,32,FLEN)
NAN_BOXED(2122431876,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226494463,32,FLEN)
NAN_BOXED(2122431876,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226496511,32,FLEN)
NAN_BOXED(2122431876,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226500607,32,FLEN)
NAN_BOXED(2122431876,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226508799,32,FLEN)
NAN_BOXED(2122431876,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226525183,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
