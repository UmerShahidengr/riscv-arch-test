
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:17:59 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_13696:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x02a504 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e82a504; op2val:0x0;
op3val:0x48fffff; valaddr_reg:x3; val_offset:41088*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41088*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13697:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x02a504 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e82a504; op2val:0x0;
op3val:0x49fffff; valaddr_reg:x3; val_offset:41091*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41091*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13698:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x02a504 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e82a504; op2val:0x0;
op3val:0x4bfffff; valaddr_reg:x3; val_offset:41094*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41094*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13699:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x02a504 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e82a504; op2val:0x0;
op3val:0x4c00000; valaddr_reg:x3; val_offset:41097*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41097*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13700:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x02a504 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e82a504; op2val:0x0;
op3val:0x4e00000; valaddr_reg:x3; val_offset:41100*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41100*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13701:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x02a504 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e82a504; op2val:0x0;
op3val:0x4f00000; valaddr_reg:x3; val_offset:41103*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41103*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13702:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x02a504 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e82a504; op2val:0x0;
op3val:0x4f80000; valaddr_reg:x3; val_offset:41106*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41106*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13703:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x02a504 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e82a504; op2val:0x0;
op3val:0x4fc0000; valaddr_reg:x3; val_offset:41109*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41109*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13704:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x02a504 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e82a504; op2val:0x0;
op3val:0x4fe0000; valaddr_reg:x3; val_offset:41112*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41112*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13705:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x02a504 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e82a504; op2val:0x0;
op3val:0x4ff0000; valaddr_reg:x3; val_offset:41115*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41115*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13706:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x02a504 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e82a504; op2val:0x0;
op3val:0x4ff8000; valaddr_reg:x3; val_offset:41118*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41118*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13707:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x02a504 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e82a504; op2val:0x0;
op3val:0x4ffc000; valaddr_reg:x3; val_offset:41121*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41121*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13708:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x02a504 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e82a504; op2val:0x0;
op3val:0x4ffe000; valaddr_reg:x3; val_offset:41124*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41124*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13709:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x02a504 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e82a504; op2val:0x0;
op3val:0x4fff000; valaddr_reg:x3; val_offset:41127*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41127*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13710:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x02a504 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e82a504; op2val:0x0;
op3val:0x4fff800; valaddr_reg:x3; val_offset:41130*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41130*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13711:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x02a504 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e82a504; op2val:0x0;
op3val:0x4fffc00; valaddr_reg:x3; val_offset:41133*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41133*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13712:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x02a504 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e82a504; op2val:0x0;
op3val:0x4fffe00; valaddr_reg:x3; val_offset:41136*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41136*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13713:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x02a504 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e82a504; op2val:0x0;
op3val:0x4ffff00; valaddr_reg:x3; val_offset:41139*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41139*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13714:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x02a504 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e82a504; op2val:0x0;
op3val:0x4ffff80; valaddr_reg:x3; val_offset:41142*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41142*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13715:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x02a504 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e82a504; op2val:0x0;
op3val:0x4ffffc0; valaddr_reg:x3; val_offset:41145*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41145*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13716:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x02a504 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e82a504; op2val:0x0;
op3val:0x4ffffe0; valaddr_reg:x3; val_offset:41148*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41148*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13717:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x02a504 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e82a504; op2val:0x0;
op3val:0x4fffff0; valaddr_reg:x3; val_offset:41151*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41151*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13718:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x02a504 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e82a504; op2val:0x0;
op3val:0x4fffff8; valaddr_reg:x3; val_offset:41154*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41154*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13719:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x02a504 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e82a504; op2val:0x0;
op3val:0x4fffffc; valaddr_reg:x3; val_offset:41157*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41157*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13720:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x02a504 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e82a504; op2val:0x0;
op3val:0x4fffffe; valaddr_reg:x3; val_offset:41160*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41160*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13721:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x02a504 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e82a504; op2val:0x0;
op3val:0x4ffffff; valaddr_reg:x3; val_offset:41163*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41163*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13722:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x03f653 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e83f653; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:41166*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41166*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13723:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x03f653 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e83f653; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:41169*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41169*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13724:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x03f653 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e83f653; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:41172*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41172*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13725:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x03f653 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e83f653; op2val:0x0;
op3val:0x199999; valaddr_reg:x3; val_offset:41175*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41175*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13726:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x03f653 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e83f653; op2val:0x0;
op3val:0x249249; valaddr_reg:x3; val_offset:41178*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41178*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13727:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x03f653 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e83f653; op2val:0x0;
op3val:0x333333; valaddr_reg:x3; val_offset:41181*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41181*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13728:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x03f653 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e83f653; op2val:0x0;
op3val:0x36db6d; valaddr_reg:x3; val_offset:41184*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41184*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13729:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x03f653 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e83f653; op2val:0x0;
op3val:0x3bbbbb; valaddr_reg:x3; val_offset:41187*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41187*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13730:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x03f653 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e83f653; op2val:0x0;
op3val:0x444444; valaddr_reg:x3; val_offset:41190*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41190*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13731:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x03f653 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e83f653; op2val:0x0;
op3val:0x4ccccc; valaddr_reg:x3; val_offset:41193*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41193*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13732:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x03f653 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e83f653; op2val:0x0;
op3val:0x5b6db6; valaddr_reg:x3; val_offset:41196*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41196*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13733:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x03f653 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e83f653; op2val:0x0;
op3val:0x666666; valaddr_reg:x3; val_offset:41199*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41199*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13734:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x03f653 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e83f653; op2val:0x0;
op3val:0x6db6db; valaddr_reg:x3; val_offset:41202*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41202*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13735:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x03f653 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e83f653; op2val:0x0;
op3val:0x7ffff8; valaddr_reg:x3; val_offset:41205*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41205*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13736:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x03f653 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e83f653; op2val:0x0;
op3val:0x7ffffc; valaddr_reg:x3; val_offset:41208*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41208*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13737:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x03f653 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e83f653; op2val:0x0;
op3val:0x7ffffe; valaddr_reg:x3; val_offset:41211*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41211*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13738:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x03f653 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e83f653; op2val:0x0;
op3val:0x9000000; valaddr_reg:x3; val_offset:41214*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41214*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13739:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x03f653 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e83f653; op2val:0x0;
op3val:0x9000001; valaddr_reg:x3; val_offset:41217*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41217*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13740:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x03f653 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e83f653; op2val:0x0;
op3val:0x9000003; valaddr_reg:x3; val_offset:41220*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41220*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13741:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x03f653 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e83f653; op2val:0x0;
op3val:0x9000007; valaddr_reg:x3; val_offset:41223*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41223*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13742:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x03f653 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e83f653; op2val:0x0;
op3val:0x900000f; valaddr_reg:x3; val_offset:41226*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41226*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13743:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x03f653 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e83f653; op2val:0x0;
op3val:0x900001f; valaddr_reg:x3; val_offset:41229*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41229*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13744:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x03f653 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e83f653; op2val:0x0;
op3val:0x900003f; valaddr_reg:x3; val_offset:41232*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41232*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13745:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x03f653 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e83f653; op2val:0x0;
op3val:0x900007f; valaddr_reg:x3; val_offset:41235*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41235*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13746:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x03f653 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e83f653; op2val:0x0;
op3val:0x90000ff; valaddr_reg:x3; val_offset:41238*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41238*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13747:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x03f653 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e83f653; op2val:0x0;
op3val:0x90001ff; valaddr_reg:x3; val_offset:41241*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41241*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13748:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x03f653 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e83f653; op2val:0x0;
op3val:0x90003ff; valaddr_reg:x3; val_offset:41244*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41244*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13749:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x03f653 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e83f653; op2val:0x0;
op3val:0x90007ff; valaddr_reg:x3; val_offset:41247*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41247*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13750:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x03f653 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e83f653; op2val:0x0;
op3val:0x9000fff; valaddr_reg:x3; val_offset:41250*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41250*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13751:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x03f653 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e83f653; op2val:0x0;
op3val:0x9001fff; valaddr_reg:x3; val_offset:41253*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41253*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13752:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x03f653 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e83f653; op2val:0x0;
op3val:0x9003fff; valaddr_reg:x3; val_offset:41256*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41256*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13753:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x03f653 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e83f653; op2val:0x0;
op3val:0x9007fff; valaddr_reg:x3; val_offset:41259*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41259*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13754:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x03f653 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e83f653; op2val:0x0;
op3val:0x900ffff; valaddr_reg:x3; val_offset:41262*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41262*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13755:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x03f653 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e83f653; op2val:0x0;
op3val:0x901ffff; valaddr_reg:x3; val_offset:41265*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41265*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13756:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x03f653 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e83f653; op2val:0x0;
op3val:0x903ffff; valaddr_reg:x3; val_offset:41268*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41268*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13757:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x03f653 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e83f653; op2val:0x0;
op3val:0x907ffff; valaddr_reg:x3; val_offset:41271*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41271*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13758:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x03f653 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e83f653; op2val:0x0;
op3val:0x90fffff; valaddr_reg:x3; val_offset:41274*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41274*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13759:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x03f653 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e83f653; op2val:0x0;
op3val:0x91fffff; valaddr_reg:x3; val_offset:41277*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41277*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13760:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x03f653 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e83f653; op2val:0x0;
op3val:0x93fffff; valaddr_reg:x3; val_offset:41280*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41280*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13761:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x03f653 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e83f653; op2val:0x0;
op3val:0x9400000; valaddr_reg:x3; val_offset:41283*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41283*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13762:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x03f653 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e83f653; op2val:0x0;
op3val:0x9600000; valaddr_reg:x3; val_offset:41286*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41286*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13763:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x03f653 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e83f653; op2val:0x0;
op3val:0x9700000; valaddr_reg:x3; val_offset:41289*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41289*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13764:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x03f653 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e83f653; op2val:0x0;
op3val:0x9780000; valaddr_reg:x3; val_offset:41292*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41292*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13765:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x03f653 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e83f653; op2val:0x0;
op3val:0x97c0000; valaddr_reg:x3; val_offset:41295*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41295*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13766:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x03f653 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e83f653; op2val:0x0;
op3val:0x97e0000; valaddr_reg:x3; val_offset:41298*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41298*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13767:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x03f653 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e83f653; op2val:0x0;
op3val:0x97f0000; valaddr_reg:x3; val_offset:41301*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41301*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13768:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x03f653 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e83f653; op2val:0x0;
op3val:0x97f8000; valaddr_reg:x3; val_offset:41304*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41304*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13769:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x03f653 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e83f653; op2val:0x0;
op3val:0x97fc000; valaddr_reg:x3; val_offset:41307*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41307*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13770:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x03f653 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e83f653; op2val:0x0;
op3val:0x97fe000; valaddr_reg:x3; val_offset:41310*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41310*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13771:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x03f653 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e83f653; op2val:0x0;
op3val:0x97ff000; valaddr_reg:x3; val_offset:41313*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41313*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13772:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x03f653 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e83f653; op2val:0x0;
op3val:0x97ff800; valaddr_reg:x3; val_offset:41316*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41316*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13773:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x03f653 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e83f653; op2val:0x0;
op3val:0x97ffc00; valaddr_reg:x3; val_offset:41319*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41319*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13774:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x03f653 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e83f653; op2val:0x0;
op3val:0x97ffe00; valaddr_reg:x3; val_offset:41322*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41322*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13775:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x03f653 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e83f653; op2val:0x0;
op3val:0x97fff00; valaddr_reg:x3; val_offset:41325*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41325*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13776:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x03f653 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e83f653; op2val:0x0;
op3val:0x97fff80; valaddr_reg:x3; val_offset:41328*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41328*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13777:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x03f653 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e83f653; op2val:0x0;
op3val:0x97fffc0; valaddr_reg:x3; val_offset:41331*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41331*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13778:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x03f653 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e83f653; op2val:0x0;
op3val:0x97fffe0; valaddr_reg:x3; val_offset:41334*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41334*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13779:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x03f653 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e83f653; op2val:0x0;
op3val:0x97ffff0; valaddr_reg:x3; val_offset:41337*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41337*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13780:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x03f653 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e83f653; op2val:0x0;
op3val:0x97ffff8; valaddr_reg:x3; val_offset:41340*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41340*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13781:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x03f653 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e83f653; op2val:0x0;
op3val:0x97ffffc; valaddr_reg:x3; val_offset:41343*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41343*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13782:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x03f653 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e83f653; op2val:0x0;
op3val:0x97ffffe; valaddr_reg:x3; val_offset:41346*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41346*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13783:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x03f653 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e83f653; op2val:0x0;
op3val:0x97fffff; valaddr_reg:x3; val_offset:41349*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41349*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13784:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x04a6a2 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x770637 and fs3 == 0 and fe3 == 0xc6 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e84a6a2; op2val:0x40770637;
op3val:0x63000000; valaddr_reg:x3; val_offset:41352*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41352*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13785:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x04a6a2 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x770637 and fs3 == 0 and fe3 == 0xc6 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e84a6a2; op2val:0x40770637;
op3val:0x63000001; valaddr_reg:x3; val_offset:41355*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41355*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13786:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x04a6a2 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x770637 and fs3 == 0 and fe3 == 0xc6 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e84a6a2; op2val:0x40770637;
op3val:0x63000003; valaddr_reg:x3; val_offset:41358*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41358*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13787:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x04a6a2 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x770637 and fs3 == 0 and fe3 == 0xc6 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e84a6a2; op2val:0x40770637;
op3val:0x63000007; valaddr_reg:x3; val_offset:41361*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41361*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13788:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x04a6a2 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x770637 and fs3 == 0 and fe3 == 0xc6 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e84a6a2; op2val:0x40770637;
op3val:0x6300000f; valaddr_reg:x3; val_offset:41364*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41364*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13789:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x04a6a2 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x770637 and fs3 == 0 and fe3 == 0xc6 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e84a6a2; op2val:0x40770637;
op3val:0x6300001f; valaddr_reg:x3; val_offset:41367*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41367*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13790:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x04a6a2 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x770637 and fs3 == 0 and fe3 == 0xc6 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e84a6a2; op2val:0x40770637;
op3val:0x6300003f; valaddr_reg:x3; val_offset:41370*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41370*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13791:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x04a6a2 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x770637 and fs3 == 0 and fe3 == 0xc6 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e84a6a2; op2val:0x40770637;
op3val:0x6300007f; valaddr_reg:x3; val_offset:41373*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41373*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13792:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x04a6a2 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x770637 and fs3 == 0 and fe3 == 0xc6 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e84a6a2; op2val:0x40770637;
op3val:0x630000ff; valaddr_reg:x3; val_offset:41376*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41376*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13793:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x04a6a2 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x770637 and fs3 == 0 and fe3 == 0xc6 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e84a6a2; op2val:0x40770637;
op3val:0x630001ff; valaddr_reg:x3; val_offset:41379*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41379*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13794:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x04a6a2 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x770637 and fs3 == 0 and fe3 == 0xc6 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e84a6a2; op2val:0x40770637;
op3val:0x630003ff; valaddr_reg:x3; val_offset:41382*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41382*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13795:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x04a6a2 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x770637 and fs3 == 0 and fe3 == 0xc6 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e84a6a2; op2val:0x40770637;
op3val:0x630007ff; valaddr_reg:x3; val_offset:41385*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41385*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13796:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x04a6a2 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x770637 and fs3 == 0 and fe3 == 0xc6 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e84a6a2; op2val:0x40770637;
op3val:0x63000fff; valaddr_reg:x3; val_offset:41388*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41388*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13797:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x04a6a2 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x770637 and fs3 == 0 and fe3 == 0xc6 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e84a6a2; op2val:0x40770637;
op3val:0x63001fff; valaddr_reg:x3; val_offset:41391*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41391*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13798:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x04a6a2 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x770637 and fs3 == 0 and fe3 == 0xc6 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e84a6a2; op2val:0x40770637;
op3val:0x63003fff; valaddr_reg:x3; val_offset:41394*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41394*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13799:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x04a6a2 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x770637 and fs3 == 0 and fe3 == 0xc6 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e84a6a2; op2val:0x40770637;
op3val:0x63007fff; valaddr_reg:x3; val_offset:41397*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41397*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13800:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x04a6a2 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x770637 and fs3 == 0 and fe3 == 0xc6 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e84a6a2; op2val:0x40770637;
op3val:0x6300ffff; valaddr_reg:x3; val_offset:41400*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41400*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13801:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x04a6a2 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x770637 and fs3 == 0 and fe3 == 0xc6 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e84a6a2; op2val:0x40770637;
op3val:0x6301ffff; valaddr_reg:x3; val_offset:41403*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41403*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13802:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x04a6a2 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x770637 and fs3 == 0 and fe3 == 0xc6 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e84a6a2; op2val:0x40770637;
op3val:0x6303ffff; valaddr_reg:x3; val_offset:41406*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41406*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13803:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x04a6a2 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x770637 and fs3 == 0 and fe3 == 0xc6 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e84a6a2; op2val:0x40770637;
op3val:0x6307ffff; valaddr_reg:x3; val_offset:41409*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41409*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13804:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x04a6a2 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x770637 and fs3 == 0 and fe3 == 0xc6 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e84a6a2; op2val:0x40770637;
op3val:0x630fffff; valaddr_reg:x3; val_offset:41412*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41412*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13805:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x04a6a2 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x770637 and fs3 == 0 and fe3 == 0xc6 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e84a6a2; op2val:0x40770637;
op3val:0x631fffff; valaddr_reg:x3; val_offset:41415*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41415*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13806:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x04a6a2 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x770637 and fs3 == 0 and fe3 == 0xc6 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e84a6a2; op2val:0x40770637;
op3val:0x633fffff; valaddr_reg:x3; val_offset:41418*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41418*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13807:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x04a6a2 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x770637 and fs3 == 0 and fe3 == 0xc6 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e84a6a2; op2val:0x40770637;
op3val:0x63400000; valaddr_reg:x3; val_offset:41421*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41421*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13808:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x04a6a2 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x770637 and fs3 == 0 and fe3 == 0xc6 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e84a6a2; op2val:0x40770637;
op3val:0x63600000; valaddr_reg:x3; val_offset:41424*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41424*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13809:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x04a6a2 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x770637 and fs3 == 0 and fe3 == 0xc6 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e84a6a2; op2val:0x40770637;
op3val:0x63700000; valaddr_reg:x3; val_offset:41427*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41427*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13810:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x04a6a2 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x770637 and fs3 == 0 and fe3 == 0xc6 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e84a6a2; op2val:0x40770637;
op3val:0x63780000; valaddr_reg:x3; val_offset:41430*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41430*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13811:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x04a6a2 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x770637 and fs3 == 0 and fe3 == 0xc6 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e84a6a2; op2val:0x40770637;
op3val:0x637c0000; valaddr_reg:x3; val_offset:41433*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41433*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13812:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x04a6a2 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x770637 and fs3 == 0 and fe3 == 0xc6 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e84a6a2; op2val:0x40770637;
op3val:0x637e0000; valaddr_reg:x3; val_offset:41436*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41436*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13813:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x04a6a2 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x770637 and fs3 == 0 and fe3 == 0xc6 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e84a6a2; op2val:0x40770637;
op3val:0x637f0000; valaddr_reg:x3; val_offset:41439*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41439*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13814:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x04a6a2 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x770637 and fs3 == 0 and fe3 == 0xc6 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e84a6a2; op2val:0x40770637;
op3val:0x637f8000; valaddr_reg:x3; val_offset:41442*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41442*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13815:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x04a6a2 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x770637 and fs3 == 0 and fe3 == 0xc6 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e84a6a2; op2val:0x40770637;
op3val:0x637fc000; valaddr_reg:x3; val_offset:41445*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41445*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13816:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x04a6a2 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x770637 and fs3 == 0 and fe3 == 0xc6 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e84a6a2; op2val:0x40770637;
op3val:0x637fe000; valaddr_reg:x3; val_offset:41448*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41448*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13817:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x04a6a2 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x770637 and fs3 == 0 and fe3 == 0xc6 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e84a6a2; op2val:0x40770637;
op3val:0x637ff000; valaddr_reg:x3; val_offset:41451*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41451*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13818:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x04a6a2 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x770637 and fs3 == 0 and fe3 == 0xc6 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e84a6a2; op2val:0x40770637;
op3val:0x637ff800; valaddr_reg:x3; val_offset:41454*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41454*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13819:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x04a6a2 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x770637 and fs3 == 0 and fe3 == 0xc6 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e84a6a2; op2val:0x40770637;
op3val:0x637ffc00; valaddr_reg:x3; val_offset:41457*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41457*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13820:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x04a6a2 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x770637 and fs3 == 0 and fe3 == 0xc6 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e84a6a2; op2val:0x40770637;
op3val:0x637ffe00; valaddr_reg:x3; val_offset:41460*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41460*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13821:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x04a6a2 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x770637 and fs3 == 0 and fe3 == 0xc6 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e84a6a2; op2val:0x40770637;
op3val:0x637fff00; valaddr_reg:x3; val_offset:41463*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41463*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13822:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x04a6a2 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x770637 and fs3 == 0 and fe3 == 0xc6 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e84a6a2; op2val:0x40770637;
op3val:0x637fff80; valaddr_reg:x3; val_offset:41466*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41466*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13823:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x04a6a2 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x770637 and fs3 == 0 and fe3 == 0xc6 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e84a6a2; op2val:0x40770637;
op3val:0x637fffc0; valaddr_reg:x3; val_offset:41469*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41469*0 + 3*107*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2122491140,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(76546047,32,FLEN)
NAN_BOXED(2122491140,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(77594623,32,FLEN)
NAN_BOXED(2122491140,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(79691775,32,FLEN)
NAN_BOXED(2122491140,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(79691776,32,FLEN)
NAN_BOXED(2122491140,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(81788928,32,FLEN)
NAN_BOXED(2122491140,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(82837504,32,FLEN)
NAN_BOXED(2122491140,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83361792,32,FLEN)
NAN_BOXED(2122491140,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83623936,32,FLEN)
NAN_BOXED(2122491140,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83755008,32,FLEN)
NAN_BOXED(2122491140,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83820544,32,FLEN)
NAN_BOXED(2122491140,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83853312,32,FLEN)
NAN_BOXED(2122491140,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83869696,32,FLEN)
NAN_BOXED(2122491140,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83877888,32,FLEN)
NAN_BOXED(2122491140,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83881984,32,FLEN)
NAN_BOXED(2122491140,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83884032,32,FLEN)
NAN_BOXED(2122491140,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83885056,32,FLEN)
NAN_BOXED(2122491140,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83885568,32,FLEN)
NAN_BOXED(2122491140,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83885824,32,FLEN)
NAN_BOXED(2122491140,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83885952,32,FLEN)
NAN_BOXED(2122491140,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83886016,32,FLEN)
NAN_BOXED(2122491140,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83886048,32,FLEN)
NAN_BOXED(2122491140,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83886064,32,FLEN)
NAN_BOXED(2122491140,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83886072,32,FLEN)
NAN_BOXED(2122491140,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83886076,32,FLEN)
NAN_BOXED(2122491140,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83886078,32,FLEN)
NAN_BOXED(2122491140,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83886079,32,FLEN)
NAN_BOXED(2122577491,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2122577491,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3,32,FLEN)
NAN_BOXED(2122577491,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7,32,FLEN)
NAN_BOXED(2122577491,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1677721,32,FLEN)
NAN_BOXED(2122577491,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2396745,32,FLEN)
NAN_BOXED(2122577491,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3355443,32,FLEN)
NAN_BOXED(2122577491,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3595117,32,FLEN)
NAN_BOXED(2122577491,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3914683,32,FLEN)
NAN_BOXED(2122577491,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4473924,32,FLEN)
NAN_BOXED(2122577491,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5033164,32,FLEN)
NAN_BOXED(2122577491,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5991862,32,FLEN)
NAN_BOXED(2122577491,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(6710886,32,FLEN)
NAN_BOXED(2122577491,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7190235,32,FLEN)
NAN_BOXED(2122577491,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388600,32,FLEN)
NAN_BOXED(2122577491,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388604,32,FLEN)
NAN_BOXED(2122577491,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388606,32,FLEN)
NAN_BOXED(2122577491,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(150994944,32,FLEN)
NAN_BOXED(2122577491,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(150994945,32,FLEN)
NAN_BOXED(2122577491,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(150994947,32,FLEN)
NAN_BOXED(2122577491,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(150994951,32,FLEN)
NAN_BOXED(2122577491,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(150994959,32,FLEN)
NAN_BOXED(2122577491,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(150994975,32,FLEN)
NAN_BOXED(2122577491,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(150995007,32,FLEN)
NAN_BOXED(2122577491,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(150995071,32,FLEN)
NAN_BOXED(2122577491,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(150995199,32,FLEN)
NAN_BOXED(2122577491,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(150995455,32,FLEN)
NAN_BOXED(2122577491,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(150995967,32,FLEN)
NAN_BOXED(2122577491,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(150996991,32,FLEN)
NAN_BOXED(2122577491,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(150999039,32,FLEN)
NAN_BOXED(2122577491,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(151003135,32,FLEN)
NAN_BOXED(2122577491,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(151011327,32,FLEN)
NAN_BOXED(2122577491,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(151027711,32,FLEN)
NAN_BOXED(2122577491,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(151060479,32,FLEN)
NAN_BOXED(2122577491,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(151126015,32,FLEN)
NAN_BOXED(2122577491,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(151257087,32,FLEN)
NAN_BOXED(2122577491,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(151519231,32,FLEN)
NAN_BOXED(2122577491,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(152043519,32,FLEN)
NAN_BOXED(2122577491,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(153092095,32,FLEN)
NAN_BOXED(2122577491,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(155189247,32,FLEN)
NAN_BOXED(2122577491,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(155189248,32,FLEN)
NAN_BOXED(2122577491,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(157286400,32,FLEN)
NAN_BOXED(2122577491,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(158334976,32,FLEN)
NAN_BOXED(2122577491,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(158859264,32,FLEN)
NAN_BOXED(2122577491,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159121408,32,FLEN)
NAN_BOXED(2122577491,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159252480,32,FLEN)
NAN_BOXED(2122577491,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159318016,32,FLEN)
NAN_BOXED(2122577491,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159350784,32,FLEN)
NAN_BOXED(2122577491,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159367168,32,FLEN)
NAN_BOXED(2122577491,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159375360,32,FLEN)
NAN_BOXED(2122577491,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159379456,32,FLEN)
NAN_BOXED(2122577491,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159381504,32,FLEN)
NAN_BOXED(2122577491,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159382528,32,FLEN)
NAN_BOXED(2122577491,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159383040,32,FLEN)
NAN_BOXED(2122577491,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159383296,32,FLEN)
NAN_BOXED(2122577491,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159383424,32,FLEN)
NAN_BOXED(2122577491,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159383488,32,FLEN)
NAN_BOXED(2122577491,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159383520,32,FLEN)
NAN_BOXED(2122577491,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159383536,32,FLEN)
NAN_BOXED(2122577491,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159383544,32,FLEN)
NAN_BOXED(2122577491,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159383548,32,FLEN)
NAN_BOXED(2122577491,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159383550,32,FLEN)
NAN_BOXED(2122577491,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159383551,32,FLEN)
NAN_BOXED(2122622626,32,FLEN)
NAN_BOXED(1081542199,32,FLEN)
NAN_BOXED(1660944384,32,FLEN)
NAN_BOXED(2122622626,32,FLEN)
NAN_BOXED(1081542199,32,FLEN)
NAN_BOXED(1660944385,32,FLEN)
NAN_BOXED(2122622626,32,FLEN)
NAN_BOXED(1081542199,32,FLEN)
NAN_BOXED(1660944387,32,FLEN)
NAN_BOXED(2122622626,32,FLEN)
NAN_BOXED(1081542199,32,FLEN)
NAN_BOXED(1660944391,32,FLEN)
NAN_BOXED(2122622626,32,FLEN)
NAN_BOXED(1081542199,32,FLEN)
NAN_BOXED(1660944399,32,FLEN)
NAN_BOXED(2122622626,32,FLEN)
NAN_BOXED(1081542199,32,FLEN)
NAN_BOXED(1660944415,32,FLEN)
NAN_BOXED(2122622626,32,FLEN)
NAN_BOXED(1081542199,32,FLEN)
NAN_BOXED(1660944447,32,FLEN)
NAN_BOXED(2122622626,32,FLEN)
NAN_BOXED(1081542199,32,FLEN)
NAN_BOXED(1660944511,32,FLEN)
NAN_BOXED(2122622626,32,FLEN)
NAN_BOXED(1081542199,32,FLEN)
NAN_BOXED(1660944639,32,FLEN)
NAN_BOXED(2122622626,32,FLEN)
NAN_BOXED(1081542199,32,FLEN)
NAN_BOXED(1660944895,32,FLEN)
NAN_BOXED(2122622626,32,FLEN)
NAN_BOXED(1081542199,32,FLEN)
NAN_BOXED(1660945407,32,FLEN)
NAN_BOXED(2122622626,32,FLEN)
NAN_BOXED(1081542199,32,FLEN)
NAN_BOXED(1660946431,32,FLEN)
NAN_BOXED(2122622626,32,FLEN)
NAN_BOXED(1081542199,32,FLEN)
NAN_BOXED(1660948479,32,FLEN)
NAN_BOXED(2122622626,32,FLEN)
NAN_BOXED(1081542199,32,FLEN)
NAN_BOXED(1660952575,32,FLEN)
NAN_BOXED(2122622626,32,FLEN)
NAN_BOXED(1081542199,32,FLEN)
NAN_BOXED(1660960767,32,FLEN)
NAN_BOXED(2122622626,32,FLEN)
NAN_BOXED(1081542199,32,FLEN)
NAN_BOXED(1660977151,32,FLEN)
NAN_BOXED(2122622626,32,FLEN)
NAN_BOXED(1081542199,32,FLEN)
NAN_BOXED(1661009919,32,FLEN)
NAN_BOXED(2122622626,32,FLEN)
NAN_BOXED(1081542199,32,FLEN)
NAN_BOXED(1661075455,32,FLEN)
NAN_BOXED(2122622626,32,FLEN)
NAN_BOXED(1081542199,32,FLEN)
NAN_BOXED(1661206527,32,FLEN)
NAN_BOXED(2122622626,32,FLEN)
NAN_BOXED(1081542199,32,FLEN)
NAN_BOXED(1661468671,32,FLEN)
NAN_BOXED(2122622626,32,FLEN)
NAN_BOXED(1081542199,32,FLEN)
NAN_BOXED(1661992959,32,FLEN)
NAN_BOXED(2122622626,32,FLEN)
NAN_BOXED(1081542199,32,FLEN)
NAN_BOXED(1663041535,32,FLEN)
NAN_BOXED(2122622626,32,FLEN)
NAN_BOXED(1081542199,32,FLEN)
NAN_BOXED(1665138687,32,FLEN)
NAN_BOXED(2122622626,32,FLEN)
NAN_BOXED(1081542199,32,FLEN)
NAN_BOXED(1665138688,32,FLEN)
NAN_BOXED(2122622626,32,FLEN)
NAN_BOXED(1081542199,32,FLEN)
NAN_BOXED(1667235840,32,FLEN)
NAN_BOXED(2122622626,32,FLEN)
NAN_BOXED(1081542199,32,FLEN)
NAN_BOXED(1668284416,32,FLEN)
NAN_BOXED(2122622626,32,FLEN)
NAN_BOXED(1081542199,32,FLEN)
NAN_BOXED(1668808704,32,FLEN)
NAN_BOXED(2122622626,32,FLEN)
NAN_BOXED(1081542199,32,FLEN)
NAN_BOXED(1669070848,32,FLEN)
NAN_BOXED(2122622626,32,FLEN)
NAN_BOXED(1081542199,32,FLEN)
NAN_BOXED(1669201920,32,FLEN)
NAN_BOXED(2122622626,32,FLEN)
NAN_BOXED(1081542199,32,FLEN)
NAN_BOXED(1669267456,32,FLEN)
NAN_BOXED(2122622626,32,FLEN)
NAN_BOXED(1081542199,32,FLEN)
NAN_BOXED(1669300224,32,FLEN)
NAN_BOXED(2122622626,32,FLEN)
NAN_BOXED(1081542199,32,FLEN)
NAN_BOXED(1669316608,32,FLEN)
NAN_BOXED(2122622626,32,FLEN)
NAN_BOXED(1081542199,32,FLEN)
NAN_BOXED(1669324800,32,FLEN)
NAN_BOXED(2122622626,32,FLEN)
NAN_BOXED(1081542199,32,FLEN)
NAN_BOXED(1669328896,32,FLEN)
NAN_BOXED(2122622626,32,FLEN)
NAN_BOXED(1081542199,32,FLEN)
NAN_BOXED(1669330944,32,FLEN)
NAN_BOXED(2122622626,32,FLEN)
NAN_BOXED(1081542199,32,FLEN)
NAN_BOXED(1669331968,32,FLEN)
NAN_BOXED(2122622626,32,FLEN)
NAN_BOXED(1081542199,32,FLEN)
NAN_BOXED(1669332480,32,FLEN)
NAN_BOXED(2122622626,32,FLEN)
NAN_BOXED(1081542199,32,FLEN)
NAN_BOXED(1669332736,32,FLEN)
NAN_BOXED(2122622626,32,FLEN)
NAN_BOXED(1081542199,32,FLEN)
NAN_BOXED(1669332864,32,FLEN)
NAN_BOXED(2122622626,32,FLEN)
NAN_BOXED(1081542199,32,FLEN)
NAN_BOXED(1669332928,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
