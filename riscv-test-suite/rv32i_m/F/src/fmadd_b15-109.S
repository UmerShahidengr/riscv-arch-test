
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:17:59 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_13824:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x04a6a2 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x770637 and fs3 == 0 and fe3 == 0xc6 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e84a6a2; op2val:0x40770637;
op3val:0x637fffe0; valaddr_reg:x3; val_offset:41472*0 + 3*108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41472*0 + 3*108*FLEN/8, x4, x1, x2)

inst_13825:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x04a6a2 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x770637 and fs3 == 0 and fe3 == 0xc6 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e84a6a2; op2val:0x40770637;
op3val:0x637ffff0; valaddr_reg:x3; val_offset:41475*0 + 3*108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41475*0 + 3*108*FLEN/8, x4, x1, x2)

inst_13826:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x04a6a2 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x770637 and fs3 == 0 and fe3 == 0xc6 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e84a6a2; op2val:0x40770637;
op3val:0x637ffff8; valaddr_reg:x3; val_offset:41478*0 + 3*108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41478*0 + 3*108*FLEN/8, x4, x1, x2)

inst_13827:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x04a6a2 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x770637 and fs3 == 0 and fe3 == 0xc6 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e84a6a2; op2val:0x40770637;
op3val:0x637ffffc; valaddr_reg:x3; val_offset:41481*0 + 3*108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41481*0 + 3*108*FLEN/8, x4, x1, x2)

inst_13828:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x04a6a2 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x770637 and fs3 == 0 and fe3 == 0xc6 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e84a6a2; op2val:0x40770637;
op3val:0x637ffffe; valaddr_reg:x3; val_offset:41484*0 + 3*108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41484*0 + 3*108*FLEN/8, x4, x1, x2)

inst_13829:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x04a6a2 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x770637 and fs3 == 0 and fe3 == 0xc6 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e84a6a2; op2val:0x40770637;
op3val:0x637fffff; valaddr_reg:x3; val_offset:41487*0 + 3*108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41487*0 + 3*108*FLEN/8, x4, x1, x2)

inst_13830:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x04a6a2 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x770637 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e84a6a2; op2val:0x40770637;
op3val:0x7f000001; valaddr_reg:x3; val_offset:41490*0 + 3*108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41490*0 + 3*108*FLEN/8, x4, x1, x2)

inst_13831:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x04a6a2 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x770637 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e84a6a2; op2val:0x40770637;
op3val:0x7f000003; valaddr_reg:x3; val_offset:41493*0 + 3*108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41493*0 + 3*108*FLEN/8, x4, x1, x2)

inst_13832:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x04a6a2 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x770637 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e84a6a2; op2val:0x40770637;
op3val:0x7f000007; valaddr_reg:x3; val_offset:41496*0 + 3*108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41496*0 + 3*108*FLEN/8, x4, x1, x2)

inst_13833:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x04a6a2 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x770637 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e84a6a2; op2val:0x40770637;
op3val:0x7f199999; valaddr_reg:x3; val_offset:41499*0 + 3*108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41499*0 + 3*108*FLEN/8, x4, x1, x2)

inst_13834:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x04a6a2 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x770637 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e84a6a2; op2val:0x40770637;
op3val:0x7f249249; valaddr_reg:x3; val_offset:41502*0 + 3*108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41502*0 + 3*108*FLEN/8, x4, x1, x2)

inst_13835:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x04a6a2 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x770637 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e84a6a2; op2val:0x40770637;
op3val:0x7f333333; valaddr_reg:x3; val_offset:41505*0 + 3*108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41505*0 + 3*108*FLEN/8, x4, x1, x2)

inst_13836:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x04a6a2 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x770637 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e84a6a2; op2val:0x40770637;
op3val:0x7f36db6d; valaddr_reg:x3; val_offset:41508*0 + 3*108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41508*0 + 3*108*FLEN/8, x4, x1, x2)

inst_13837:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x04a6a2 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x770637 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e84a6a2; op2val:0x40770637;
op3val:0x7f3bbbbb; valaddr_reg:x3; val_offset:41511*0 + 3*108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41511*0 + 3*108*FLEN/8, x4, x1, x2)

inst_13838:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x04a6a2 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x770637 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e84a6a2; op2val:0x40770637;
op3val:0x7f444444; valaddr_reg:x3; val_offset:41514*0 + 3*108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41514*0 + 3*108*FLEN/8, x4, x1, x2)

inst_13839:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x04a6a2 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x770637 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e84a6a2; op2val:0x40770637;
op3val:0x7f4ccccc; valaddr_reg:x3; val_offset:41517*0 + 3*108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41517*0 + 3*108*FLEN/8, x4, x1, x2)

inst_13840:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x04a6a2 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x770637 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e84a6a2; op2val:0x40770637;
op3val:0x7f5b6db6; valaddr_reg:x3; val_offset:41520*0 + 3*108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41520*0 + 3*108*FLEN/8, x4, x1, x2)

inst_13841:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x04a6a2 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x770637 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e84a6a2; op2val:0x40770637;
op3val:0x7f666666; valaddr_reg:x3; val_offset:41523*0 + 3*108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41523*0 + 3*108*FLEN/8, x4, x1, x2)

inst_13842:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x04a6a2 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x770637 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e84a6a2; op2val:0x40770637;
op3val:0x7f6db6db; valaddr_reg:x3; val_offset:41526*0 + 3*108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41526*0 + 3*108*FLEN/8, x4, x1, x2)

inst_13843:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x04a6a2 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x770637 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e84a6a2; op2val:0x40770637;
op3val:0x7f7ffff8; valaddr_reg:x3; val_offset:41529*0 + 3*108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41529*0 + 3*108*FLEN/8, x4, x1, x2)

inst_13844:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x04a6a2 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x770637 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e84a6a2; op2val:0x40770637;
op3val:0x7f7ffffc; valaddr_reg:x3; val_offset:41532*0 + 3*108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41532*0 + 3*108*FLEN/8, x4, x1, x2)

inst_13845:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x04a6a2 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x770637 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e84a6a2; op2val:0x40770637;
op3val:0x7f7ffffe; valaddr_reg:x3; val_offset:41535*0 + 3*108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41535*0 + 3*108*FLEN/8, x4, x1, x2)

inst_13846:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x051ed8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e851ed8; op2val:0x0;
op3val:0x800001; valaddr_reg:x3; val_offset:41538*0 + 3*108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41538*0 + 3*108*FLEN/8, x4, x1, x2)

inst_13847:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x051ed8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e851ed8; op2val:0x0;
op3val:0x800003; valaddr_reg:x3; val_offset:41541*0 + 3*108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41541*0 + 3*108*FLEN/8, x4, x1, x2)

inst_13848:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x051ed8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e851ed8; op2val:0x0;
op3val:0x800007; valaddr_reg:x3; val_offset:41544*0 + 3*108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41544*0 + 3*108*FLEN/8, x4, x1, x2)

inst_13849:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x051ed8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e851ed8; op2val:0x0;
op3val:0x999999; valaddr_reg:x3; val_offset:41547*0 + 3*108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41547*0 + 3*108*FLEN/8, x4, x1, x2)

inst_13850:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x051ed8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e851ed8; op2val:0x0;
op3val:0xa49249; valaddr_reg:x3; val_offset:41550*0 + 3*108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41550*0 + 3*108*FLEN/8, x4, x1, x2)

inst_13851:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x051ed8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e851ed8; op2val:0x0;
op3val:0xb33333; valaddr_reg:x3; val_offset:41553*0 + 3*108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41553*0 + 3*108*FLEN/8, x4, x1, x2)

inst_13852:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x051ed8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e851ed8; op2val:0x0;
op3val:0xb6db6d; valaddr_reg:x3; val_offset:41556*0 + 3*108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41556*0 + 3*108*FLEN/8, x4, x1, x2)

inst_13853:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x051ed8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e851ed8; op2val:0x0;
op3val:0xbbbbbb; valaddr_reg:x3; val_offset:41559*0 + 3*108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41559*0 + 3*108*FLEN/8, x4, x1, x2)

inst_13854:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x051ed8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e851ed8; op2val:0x0;
op3val:0xc44444; valaddr_reg:x3; val_offset:41562*0 + 3*108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41562*0 + 3*108*FLEN/8, x4, x1, x2)

inst_13855:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x051ed8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e851ed8; op2val:0x0;
op3val:0xcccccc; valaddr_reg:x3; val_offset:41565*0 + 3*108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41565*0 + 3*108*FLEN/8, x4, x1, x2)

inst_13856:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x051ed8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e851ed8; op2val:0x0;
op3val:0xdb6db6; valaddr_reg:x3; val_offset:41568*0 + 3*108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41568*0 + 3*108*FLEN/8, x4, x1, x2)

inst_13857:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x051ed8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e851ed8; op2val:0x0;
op3val:0xe66666; valaddr_reg:x3; val_offset:41571*0 + 3*108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41571*0 + 3*108*FLEN/8, x4, x1, x2)

inst_13858:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x051ed8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e851ed8; op2val:0x0;
op3val:0xedb6db; valaddr_reg:x3; val_offset:41574*0 + 3*108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41574*0 + 3*108*FLEN/8, x4, x1, x2)

inst_13859:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x051ed8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e851ed8; op2val:0x0;
op3val:0xfffff8; valaddr_reg:x3; val_offset:41577*0 + 3*108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41577*0 + 3*108*FLEN/8, x4, x1, x2)

inst_13860:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x051ed8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e851ed8; op2val:0x0;
op3val:0xfffffc; valaddr_reg:x3; val_offset:41580*0 + 3*108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41580*0 + 3*108*FLEN/8, x4, x1, x2)

inst_13861:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x051ed8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e851ed8; op2val:0x0;
op3val:0xfffffe; valaddr_reg:x3; val_offset:41583*0 + 3*108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41583*0 + 3*108*FLEN/8, x4, x1, x2)

inst_13862:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x051ed8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e851ed8; op2val:0x0;
op3val:0x9800000; valaddr_reg:x3; val_offset:41586*0 + 3*108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41586*0 + 3*108*FLEN/8, x4, x1, x2)

inst_13863:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x051ed8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e851ed8; op2val:0x0;
op3val:0x9800001; valaddr_reg:x3; val_offset:41589*0 + 3*108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41589*0 + 3*108*FLEN/8, x4, x1, x2)

inst_13864:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x051ed8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e851ed8; op2val:0x0;
op3val:0x9800003; valaddr_reg:x3; val_offset:41592*0 + 3*108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41592*0 + 3*108*FLEN/8, x4, x1, x2)

inst_13865:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x051ed8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e851ed8; op2val:0x0;
op3val:0x9800007; valaddr_reg:x3; val_offset:41595*0 + 3*108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41595*0 + 3*108*FLEN/8, x4, x1, x2)

inst_13866:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x051ed8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e851ed8; op2val:0x0;
op3val:0x980000f; valaddr_reg:x3; val_offset:41598*0 + 3*108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41598*0 + 3*108*FLEN/8, x4, x1, x2)

inst_13867:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x051ed8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e851ed8; op2val:0x0;
op3val:0x980001f; valaddr_reg:x3; val_offset:41601*0 + 3*108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41601*0 + 3*108*FLEN/8, x4, x1, x2)

inst_13868:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x051ed8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e851ed8; op2val:0x0;
op3val:0x980003f; valaddr_reg:x3; val_offset:41604*0 + 3*108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41604*0 + 3*108*FLEN/8, x4, x1, x2)

inst_13869:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x051ed8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e851ed8; op2val:0x0;
op3val:0x980007f; valaddr_reg:x3; val_offset:41607*0 + 3*108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41607*0 + 3*108*FLEN/8, x4, x1, x2)

inst_13870:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x051ed8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e851ed8; op2val:0x0;
op3val:0x98000ff; valaddr_reg:x3; val_offset:41610*0 + 3*108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41610*0 + 3*108*FLEN/8, x4, x1, x2)

inst_13871:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x051ed8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e851ed8; op2val:0x0;
op3val:0x98001ff; valaddr_reg:x3; val_offset:41613*0 + 3*108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41613*0 + 3*108*FLEN/8, x4, x1, x2)

inst_13872:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x051ed8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e851ed8; op2val:0x0;
op3val:0x98003ff; valaddr_reg:x3; val_offset:41616*0 + 3*108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41616*0 + 3*108*FLEN/8, x4, x1, x2)

inst_13873:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x051ed8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e851ed8; op2val:0x0;
op3val:0x98007ff; valaddr_reg:x3; val_offset:41619*0 + 3*108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41619*0 + 3*108*FLEN/8, x4, x1, x2)

inst_13874:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x051ed8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e851ed8; op2val:0x0;
op3val:0x9800fff; valaddr_reg:x3; val_offset:41622*0 + 3*108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41622*0 + 3*108*FLEN/8, x4, x1, x2)

inst_13875:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x051ed8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e851ed8; op2val:0x0;
op3val:0x9801fff; valaddr_reg:x3; val_offset:41625*0 + 3*108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41625*0 + 3*108*FLEN/8, x4, x1, x2)

inst_13876:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x051ed8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e851ed8; op2val:0x0;
op3val:0x9803fff; valaddr_reg:x3; val_offset:41628*0 + 3*108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41628*0 + 3*108*FLEN/8, x4, x1, x2)

inst_13877:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x051ed8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e851ed8; op2val:0x0;
op3val:0x9807fff; valaddr_reg:x3; val_offset:41631*0 + 3*108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41631*0 + 3*108*FLEN/8, x4, x1, x2)

inst_13878:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x051ed8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e851ed8; op2val:0x0;
op3val:0x980ffff; valaddr_reg:x3; val_offset:41634*0 + 3*108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41634*0 + 3*108*FLEN/8, x4, x1, x2)

inst_13879:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x051ed8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e851ed8; op2val:0x0;
op3val:0x981ffff; valaddr_reg:x3; val_offset:41637*0 + 3*108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41637*0 + 3*108*FLEN/8, x4, x1, x2)

inst_13880:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x051ed8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e851ed8; op2val:0x0;
op3val:0x983ffff; valaddr_reg:x3; val_offset:41640*0 + 3*108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41640*0 + 3*108*FLEN/8, x4, x1, x2)

inst_13881:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x051ed8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e851ed8; op2val:0x0;
op3val:0x987ffff; valaddr_reg:x3; val_offset:41643*0 + 3*108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41643*0 + 3*108*FLEN/8, x4, x1, x2)

inst_13882:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x051ed8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e851ed8; op2val:0x0;
op3val:0x98fffff; valaddr_reg:x3; val_offset:41646*0 + 3*108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41646*0 + 3*108*FLEN/8, x4, x1, x2)

inst_13883:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x051ed8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e851ed8; op2val:0x0;
op3val:0x99fffff; valaddr_reg:x3; val_offset:41649*0 + 3*108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41649*0 + 3*108*FLEN/8, x4, x1, x2)

inst_13884:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x051ed8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e851ed8; op2val:0x0;
op3val:0x9bfffff; valaddr_reg:x3; val_offset:41652*0 + 3*108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41652*0 + 3*108*FLEN/8, x4, x1, x2)

inst_13885:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x051ed8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e851ed8; op2val:0x0;
op3val:0x9c00000; valaddr_reg:x3; val_offset:41655*0 + 3*108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41655*0 + 3*108*FLEN/8, x4, x1, x2)

inst_13886:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x051ed8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e851ed8; op2val:0x0;
op3val:0x9e00000; valaddr_reg:x3; val_offset:41658*0 + 3*108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41658*0 + 3*108*FLEN/8, x4, x1, x2)

inst_13887:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x051ed8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e851ed8; op2val:0x0;
op3val:0x9f00000; valaddr_reg:x3; val_offset:41661*0 + 3*108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41661*0 + 3*108*FLEN/8, x4, x1, x2)

inst_13888:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x051ed8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e851ed8; op2val:0x0;
op3val:0x9f80000; valaddr_reg:x3; val_offset:41664*0 + 3*108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41664*0 + 3*108*FLEN/8, x4, x1, x2)

inst_13889:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x051ed8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e851ed8; op2val:0x0;
op3val:0x9fc0000; valaddr_reg:x3; val_offset:41667*0 + 3*108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41667*0 + 3*108*FLEN/8, x4, x1, x2)

inst_13890:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x051ed8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e851ed8; op2val:0x0;
op3val:0x9fe0000; valaddr_reg:x3; val_offset:41670*0 + 3*108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41670*0 + 3*108*FLEN/8, x4, x1, x2)

inst_13891:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x051ed8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e851ed8; op2val:0x0;
op3val:0x9ff0000; valaddr_reg:x3; val_offset:41673*0 + 3*108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41673*0 + 3*108*FLEN/8, x4, x1, x2)

inst_13892:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x051ed8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e851ed8; op2val:0x0;
op3val:0x9ff8000; valaddr_reg:x3; val_offset:41676*0 + 3*108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41676*0 + 3*108*FLEN/8, x4, x1, x2)

inst_13893:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x051ed8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e851ed8; op2val:0x0;
op3val:0x9ffc000; valaddr_reg:x3; val_offset:41679*0 + 3*108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41679*0 + 3*108*FLEN/8, x4, x1, x2)

inst_13894:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x051ed8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e851ed8; op2val:0x0;
op3val:0x9ffe000; valaddr_reg:x3; val_offset:41682*0 + 3*108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41682*0 + 3*108*FLEN/8, x4, x1, x2)

inst_13895:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x051ed8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e851ed8; op2val:0x0;
op3val:0x9fff000; valaddr_reg:x3; val_offset:41685*0 + 3*108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41685*0 + 3*108*FLEN/8, x4, x1, x2)

inst_13896:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x051ed8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e851ed8; op2val:0x0;
op3val:0x9fff800; valaddr_reg:x3; val_offset:41688*0 + 3*108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41688*0 + 3*108*FLEN/8, x4, x1, x2)

inst_13897:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x051ed8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e851ed8; op2val:0x0;
op3val:0x9fffc00; valaddr_reg:x3; val_offset:41691*0 + 3*108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41691*0 + 3*108*FLEN/8, x4, x1, x2)

inst_13898:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x051ed8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e851ed8; op2val:0x0;
op3val:0x9fffe00; valaddr_reg:x3; val_offset:41694*0 + 3*108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41694*0 + 3*108*FLEN/8, x4, x1, x2)

inst_13899:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x051ed8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e851ed8; op2val:0x0;
op3val:0x9ffff00; valaddr_reg:x3; val_offset:41697*0 + 3*108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41697*0 + 3*108*FLEN/8, x4, x1, x2)

inst_13900:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x051ed8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e851ed8; op2val:0x0;
op3val:0x9ffff80; valaddr_reg:x3; val_offset:41700*0 + 3*108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41700*0 + 3*108*FLEN/8, x4, x1, x2)

inst_13901:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x051ed8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e851ed8; op2val:0x0;
op3val:0x9ffffc0; valaddr_reg:x3; val_offset:41703*0 + 3*108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41703*0 + 3*108*FLEN/8, x4, x1, x2)

inst_13902:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x051ed8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e851ed8; op2val:0x0;
op3val:0x9ffffe0; valaddr_reg:x3; val_offset:41706*0 + 3*108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41706*0 + 3*108*FLEN/8, x4, x1, x2)

inst_13903:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x051ed8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e851ed8; op2val:0x0;
op3val:0x9fffff0; valaddr_reg:x3; val_offset:41709*0 + 3*108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41709*0 + 3*108*FLEN/8, x4, x1, x2)

inst_13904:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x051ed8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e851ed8; op2val:0x0;
op3val:0x9fffff8; valaddr_reg:x3; val_offset:41712*0 + 3*108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41712*0 + 3*108*FLEN/8, x4, x1, x2)

inst_13905:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x051ed8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e851ed8; op2val:0x0;
op3val:0x9fffffc; valaddr_reg:x3; val_offset:41715*0 + 3*108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41715*0 + 3*108*FLEN/8, x4, x1, x2)

inst_13906:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x051ed8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e851ed8; op2val:0x0;
op3val:0x9fffffe; valaddr_reg:x3; val_offset:41718*0 + 3*108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41718*0 + 3*108*FLEN/8, x4, x1, x2)

inst_13907:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x051ed8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e851ed8; op2val:0x0;
op3val:0x9ffffff; valaddr_reg:x3; val_offset:41721*0 + 3*108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41721*0 + 3*108*FLEN/8, x4, x1, x2)

inst_13908:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x075c74 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x72140b and fs3 == 0 and fe3 == 0xc3 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e875c74; op2val:0x4072140b;
op3val:0x61800000; valaddr_reg:x3; val_offset:41724*0 + 3*108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41724*0 + 3*108*FLEN/8, x4, x1, x2)

inst_13909:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x075c74 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x72140b and fs3 == 0 and fe3 == 0xc3 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e875c74; op2val:0x4072140b;
op3val:0x61800001; valaddr_reg:x3; val_offset:41727*0 + 3*108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41727*0 + 3*108*FLEN/8, x4, x1, x2)

inst_13910:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x075c74 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x72140b and fs3 == 0 and fe3 == 0xc3 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e875c74; op2val:0x4072140b;
op3val:0x61800003; valaddr_reg:x3; val_offset:41730*0 + 3*108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41730*0 + 3*108*FLEN/8, x4, x1, x2)

inst_13911:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x075c74 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x72140b and fs3 == 0 and fe3 == 0xc3 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e875c74; op2val:0x4072140b;
op3val:0x61800007; valaddr_reg:x3; val_offset:41733*0 + 3*108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41733*0 + 3*108*FLEN/8, x4, x1, x2)

inst_13912:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x075c74 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x72140b and fs3 == 0 and fe3 == 0xc3 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e875c74; op2val:0x4072140b;
op3val:0x6180000f; valaddr_reg:x3; val_offset:41736*0 + 3*108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41736*0 + 3*108*FLEN/8, x4, x1, x2)

inst_13913:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x075c74 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x72140b and fs3 == 0 and fe3 == 0xc3 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e875c74; op2val:0x4072140b;
op3val:0x6180001f; valaddr_reg:x3; val_offset:41739*0 + 3*108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41739*0 + 3*108*FLEN/8, x4, x1, x2)

inst_13914:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x075c74 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x72140b and fs3 == 0 and fe3 == 0xc3 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e875c74; op2val:0x4072140b;
op3val:0x6180003f; valaddr_reg:x3; val_offset:41742*0 + 3*108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41742*0 + 3*108*FLEN/8, x4, x1, x2)

inst_13915:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x075c74 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x72140b and fs3 == 0 and fe3 == 0xc3 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e875c74; op2val:0x4072140b;
op3val:0x6180007f; valaddr_reg:x3; val_offset:41745*0 + 3*108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41745*0 + 3*108*FLEN/8, x4, x1, x2)

inst_13916:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x075c74 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x72140b and fs3 == 0 and fe3 == 0xc3 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e875c74; op2val:0x4072140b;
op3val:0x618000ff; valaddr_reg:x3; val_offset:41748*0 + 3*108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41748*0 + 3*108*FLEN/8, x4, x1, x2)

inst_13917:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x075c74 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x72140b and fs3 == 0 and fe3 == 0xc3 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e875c74; op2val:0x4072140b;
op3val:0x618001ff; valaddr_reg:x3; val_offset:41751*0 + 3*108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41751*0 + 3*108*FLEN/8, x4, x1, x2)

inst_13918:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x075c74 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x72140b and fs3 == 0 and fe3 == 0xc3 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e875c74; op2val:0x4072140b;
op3val:0x618003ff; valaddr_reg:x3; val_offset:41754*0 + 3*108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41754*0 + 3*108*FLEN/8, x4, x1, x2)

inst_13919:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x075c74 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x72140b and fs3 == 0 and fe3 == 0xc3 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e875c74; op2val:0x4072140b;
op3val:0x618007ff; valaddr_reg:x3; val_offset:41757*0 + 3*108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41757*0 + 3*108*FLEN/8, x4, x1, x2)

inst_13920:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x075c74 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x72140b and fs3 == 0 and fe3 == 0xc3 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e875c74; op2val:0x4072140b;
op3val:0x61800fff; valaddr_reg:x3; val_offset:41760*0 + 3*108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41760*0 + 3*108*FLEN/8, x4, x1, x2)

inst_13921:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x075c74 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x72140b and fs3 == 0 and fe3 == 0xc3 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e875c74; op2val:0x4072140b;
op3val:0x61801fff; valaddr_reg:x3; val_offset:41763*0 + 3*108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41763*0 + 3*108*FLEN/8, x4, x1, x2)

inst_13922:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x075c74 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x72140b and fs3 == 0 and fe3 == 0xc3 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e875c74; op2val:0x4072140b;
op3val:0x61803fff; valaddr_reg:x3; val_offset:41766*0 + 3*108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41766*0 + 3*108*FLEN/8, x4, x1, x2)

inst_13923:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x075c74 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x72140b and fs3 == 0 and fe3 == 0xc3 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e875c74; op2val:0x4072140b;
op3val:0x61807fff; valaddr_reg:x3; val_offset:41769*0 + 3*108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41769*0 + 3*108*FLEN/8, x4, x1, x2)

inst_13924:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x075c74 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x72140b and fs3 == 0 and fe3 == 0xc3 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e875c74; op2val:0x4072140b;
op3val:0x6180ffff; valaddr_reg:x3; val_offset:41772*0 + 3*108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41772*0 + 3*108*FLEN/8, x4, x1, x2)

inst_13925:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x075c74 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x72140b and fs3 == 0 and fe3 == 0xc3 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e875c74; op2val:0x4072140b;
op3val:0x6181ffff; valaddr_reg:x3; val_offset:41775*0 + 3*108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41775*0 + 3*108*FLEN/8, x4, x1, x2)

inst_13926:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x075c74 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x72140b and fs3 == 0 and fe3 == 0xc3 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e875c74; op2val:0x4072140b;
op3val:0x6183ffff; valaddr_reg:x3; val_offset:41778*0 + 3*108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41778*0 + 3*108*FLEN/8, x4, x1, x2)

inst_13927:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x075c74 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x72140b and fs3 == 0 and fe3 == 0xc3 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e875c74; op2val:0x4072140b;
op3val:0x6187ffff; valaddr_reg:x3; val_offset:41781*0 + 3*108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41781*0 + 3*108*FLEN/8, x4, x1, x2)

inst_13928:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x075c74 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x72140b and fs3 == 0 and fe3 == 0xc3 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e875c74; op2val:0x4072140b;
op3val:0x618fffff; valaddr_reg:x3; val_offset:41784*0 + 3*108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41784*0 + 3*108*FLEN/8, x4, x1, x2)

inst_13929:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x075c74 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x72140b and fs3 == 0 and fe3 == 0xc3 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e875c74; op2val:0x4072140b;
op3val:0x619fffff; valaddr_reg:x3; val_offset:41787*0 + 3*108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41787*0 + 3*108*FLEN/8, x4, x1, x2)

inst_13930:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x075c74 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x72140b and fs3 == 0 and fe3 == 0xc3 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e875c74; op2val:0x4072140b;
op3val:0x61bfffff; valaddr_reg:x3; val_offset:41790*0 + 3*108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41790*0 + 3*108*FLEN/8, x4, x1, x2)

inst_13931:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x075c74 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x72140b and fs3 == 0 and fe3 == 0xc3 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e875c74; op2val:0x4072140b;
op3val:0x61c00000; valaddr_reg:x3; val_offset:41793*0 + 3*108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41793*0 + 3*108*FLEN/8, x4, x1, x2)

inst_13932:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x075c74 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x72140b and fs3 == 0 and fe3 == 0xc3 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e875c74; op2val:0x4072140b;
op3val:0x61e00000; valaddr_reg:x3; val_offset:41796*0 + 3*108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41796*0 + 3*108*FLEN/8, x4, x1, x2)

inst_13933:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x075c74 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x72140b and fs3 == 0 and fe3 == 0xc3 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e875c74; op2val:0x4072140b;
op3val:0x61f00000; valaddr_reg:x3; val_offset:41799*0 + 3*108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41799*0 + 3*108*FLEN/8, x4, x1, x2)

inst_13934:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x075c74 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x72140b and fs3 == 0 and fe3 == 0xc3 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e875c74; op2val:0x4072140b;
op3val:0x61f80000; valaddr_reg:x3; val_offset:41802*0 + 3*108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41802*0 + 3*108*FLEN/8, x4, x1, x2)

inst_13935:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x075c74 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x72140b and fs3 == 0 and fe3 == 0xc3 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e875c74; op2val:0x4072140b;
op3val:0x61fc0000; valaddr_reg:x3; val_offset:41805*0 + 3*108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41805*0 + 3*108*FLEN/8, x4, x1, x2)

inst_13936:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x075c74 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x72140b and fs3 == 0 and fe3 == 0xc3 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e875c74; op2val:0x4072140b;
op3val:0x61fe0000; valaddr_reg:x3; val_offset:41808*0 + 3*108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41808*0 + 3*108*FLEN/8, x4, x1, x2)

inst_13937:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x075c74 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x72140b and fs3 == 0 and fe3 == 0xc3 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e875c74; op2val:0x4072140b;
op3val:0x61ff0000; valaddr_reg:x3; val_offset:41811*0 + 3*108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41811*0 + 3*108*FLEN/8, x4, x1, x2)

inst_13938:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x075c74 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x72140b and fs3 == 0 and fe3 == 0xc3 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e875c74; op2val:0x4072140b;
op3val:0x61ff8000; valaddr_reg:x3; val_offset:41814*0 + 3*108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41814*0 + 3*108*FLEN/8, x4, x1, x2)

inst_13939:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x075c74 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x72140b and fs3 == 0 and fe3 == 0xc3 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e875c74; op2val:0x4072140b;
op3val:0x61ffc000; valaddr_reg:x3; val_offset:41817*0 + 3*108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41817*0 + 3*108*FLEN/8, x4, x1, x2)

inst_13940:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x075c74 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x72140b and fs3 == 0 and fe3 == 0xc3 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e875c74; op2val:0x4072140b;
op3val:0x61ffe000; valaddr_reg:x3; val_offset:41820*0 + 3*108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41820*0 + 3*108*FLEN/8, x4, x1, x2)

inst_13941:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x075c74 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x72140b and fs3 == 0 and fe3 == 0xc3 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e875c74; op2val:0x4072140b;
op3val:0x61fff000; valaddr_reg:x3; val_offset:41823*0 + 3*108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41823*0 + 3*108*FLEN/8, x4, x1, x2)

inst_13942:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x075c74 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x72140b and fs3 == 0 and fe3 == 0xc3 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e875c74; op2val:0x4072140b;
op3val:0x61fff800; valaddr_reg:x3; val_offset:41826*0 + 3*108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41826*0 + 3*108*FLEN/8, x4, x1, x2)

inst_13943:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x075c74 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x72140b and fs3 == 0 and fe3 == 0xc3 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e875c74; op2val:0x4072140b;
op3val:0x61fffc00; valaddr_reg:x3; val_offset:41829*0 + 3*108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41829*0 + 3*108*FLEN/8, x4, x1, x2)

inst_13944:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x075c74 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x72140b and fs3 == 0 and fe3 == 0xc3 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e875c74; op2val:0x4072140b;
op3val:0x61fffe00; valaddr_reg:x3; val_offset:41832*0 + 3*108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41832*0 + 3*108*FLEN/8, x4, x1, x2)

inst_13945:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x075c74 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x72140b and fs3 == 0 and fe3 == 0xc3 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e875c74; op2val:0x4072140b;
op3val:0x61ffff00; valaddr_reg:x3; val_offset:41835*0 + 3*108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41835*0 + 3*108*FLEN/8, x4, x1, x2)

inst_13946:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x075c74 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x72140b and fs3 == 0 and fe3 == 0xc3 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e875c74; op2val:0x4072140b;
op3val:0x61ffff80; valaddr_reg:x3; val_offset:41838*0 + 3*108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41838*0 + 3*108*FLEN/8, x4, x1, x2)

inst_13947:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x075c74 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x72140b and fs3 == 0 and fe3 == 0xc3 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e875c74; op2val:0x4072140b;
op3val:0x61ffffc0; valaddr_reg:x3; val_offset:41841*0 + 3*108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41841*0 + 3*108*FLEN/8, x4, x1, x2)

inst_13948:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x075c74 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x72140b and fs3 == 0 and fe3 == 0xc3 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e875c74; op2val:0x4072140b;
op3val:0x61ffffe0; valaddr_reg:x3; val_offset:41844*0 + 3*108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41844*0 + 3*108*FLEN/8, x4, x1, x2)

inst_13949:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x075c74 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x72140b and fs3 == 0 and fe3 == 0xc3 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e875c74; op2val:0x4072140b;
op3val:0x61fffff0; valaddr_reg:x3; val_offset:41847*0 + 3*108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41847*0 + 3*108*FLEN/8, x4, x1, x2)

inst_13950:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x075c74 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x72140b and fs3 == 0 and fe3 == 0xc3 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e875c74; op2val:0x4072140b;
op3val:0x61fffff8; valaddr_reg:x3; val_offset:41850*0 + 3*108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41850*0 + 3*108*FLEN/8, x4, x1, x2)

inst_13951:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x075c74 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x72140b and fs3 == 0 and fe3 == 0xc3 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e875c74; op2val:0x4072140b;
op3val:0x61fffffc; valaddr_reg:x3; val_offset:41853*0 + 3*108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41853*0 + 3*108*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2122622626,32,FLEN)
NAN_BOXED(1081542199,32,FLEN)
NAN_BOXED(1669332960,32,FLEN)
NAN_BOXED(2122622626,32,FLEN)
NAN_BOXED(1081542199,32,FLEN)
NAN_BOXED(1669332976,32,FLEN)
NAN_BOXED(2122622626,32,FLEN)
NAN_BOXED(1081542199,32,FLEN)
NAN_BOXED(1669332984,32,FLEN)
NAN_BOXED(2122622626,32,FLEN)
NAN_BOXED(1081542199,32,FLEN)
NAN_BOXED(1669332988,32,FLEN)
NAN_BOXED(2122622626,32,FLEN)
NAN_BOXED(1081542199,32,FLEN)
NAN_BOXED(1669332990,32,FLEN)
NAN_BOXED(2122622626,32,FLEN)
NAN_BOXED(1081542199,32,FLEN)
NAN_BOXED(1669332991,32,FLEN)
NAN_BOXED(2122622626,32,FLEN)
NAN_BOXED(1081542199,32,FLEN)
NAN_BOXED(2130706433,32,FLEN)
NAN_BOXED(2122622626,32,FLEN)
NAN_BOXED(1081542199,32,FLEN)
NAN_BOXED(2130706435,32,FLEN)
NAN_BOXED(2122622626,32,FLEN)
NAN_BOXED(1081542199,32,FLEN)
NAN_BOXED(2130706439,32,FLEN)
NAN_BOXED(2122622626,32,FLEN)
NAN_BOXED(1081542199,32,FLEN)
NAN_BOXED(2132384153,32,FLEN)
NAN_BOXED(2122622626,32,FLEN)
NAN_BOXED(1081542199,32,FLEN)
NAN_BOXED(2133103177,32,FLEN)
NAN_BOXED(2122622626,32,FLEN)
NAN_BOXED(1081542199,32,FLEN)
NAN_BOXED(2134061875,32,FLEN)
NAN_BOXED(2122622626,32,FLEN)
NAN_BOXED(1081542199,32,FLEN)
NAN_BOXED(2134301549,32,FLEN)
NAN_BOXED(2122622626,32,FLEN)
NAN_BOXED(1081542199,32,FLEN)
NAN_BOXED(2134621115,32,FLEN)
NAN_BOXED(2122622626,32,FLEN)
NAN_BOXED(1081542199,32,FLEN)
NAN_BOXED(2135180356,32,FLEN)
NAN_BOXED(2122622626,32,FLEN)
NAN_BOXED(1081542199,32,FLEN)
NAN_BOXED(2135739596,32,FLEN)
NAN_BOXED(2122622626,32,FLEN)
NAN_BOXED(1081542199,32,FLEN)
NAN_BOXED(2136698294,32,FLEN)
NAN_BOXED(2122622626,32,FLEN)
NAN_BOXED(1081542199,32,FLEN)
NAN_BOXED(2137417318,32,FLEN)
NAN_BOXED(2122622626,32,FLEN)
NAN_BOXED(1081542199,32,FLEN)
NAN_BOXED(2137896667,32,FLEN)
NAN_BOXED(2122622626,32,FLEN)
NAN_BOXED(1081542199,32,FLEN)
NAN_BOXED(2139095032,32,FLEN)
NAN_BOXED(2122622626,32,FLEN)
NAN_BOXED(1081542199,32,FLEN)
NAN_BOXED(2139095036,32,FLEN)
NAN_BOXED(2122622626,32,FLEN)
NAN_BOXED(1081542199,32,FLEN)
NAN_BOXED(2139095038,32,FLEN)
NAN_BOXED(2122653400,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(2122653400,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388611,32,FLEN)
NAN_BOXED(2122653400,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388615,32,FLEN)
NAN_BOXED(2122653400,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(10066329,32,FLEN)
NAN_BOXED(2122653400,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(10785353,32,FLEN)
NAN_BOXED(2122653400,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(11744051,32,FLEN)
NAN_BOXED(2122653400,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(11983725,32,FLEN)
NAN_BOXED(2122653400,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(12303291,32,FLEN)
NAN_BOXED(2122653400,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(12862532,32,FLEN)
NAN_BOXED(2122653400,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(13421772,32,FLEN)
NAN_BOXED(2122653400,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(14380470,32,FLEN)
NAN_BOXED(2122653400,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(15099494,32,FLEN)
NAN_BOXED(2122653400,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(15578843,32,FLEN)
NAN_BOXED(2122653400,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777208,32,FLEN)
NAN_BOXED(2122653400,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777212,32,FLEN)
NAN_BOXED(2122653400,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777214,32,FLEN)
NAN_BOXED(2122653400,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159383552,32,FLEN)
NAN_BOXED(2122653400,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159383553,32,FLEN)
NAN_BOXED(2122653400,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159383555,32,FLEN)
NAN_BOXED(2122653400,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159383559,32,FLEN)
NAN_BOXED(2122653400,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159383567,32,FLEN)
NAN_BOXED(2122653400,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159383583,32,FLEN)
NAN_BOXED(2122653400,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159383615,32,FLEN)
NAN_BOXED(2122653400,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159383679,32,FLEN)
NAN_BOXED(2122653400,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159383807,32,FLEN)
NAN_BOXED(2122653400,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159384063,32,FLEN)
NAN_BOXED(2122653400,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159384575,32,FLEN)
NAN_BOXED(2122653400,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159385599,32,FLEN)
NAN_BOXED(2122653400,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159387647,32,FLEN)
NAN_BOXED(2122653400,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159391743,32,FLEN)
NAN_BOXED(2122653400,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159399935,32,FLEN)
NAN_BOXED(2122653400,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159416319,32,FLEN)
NAN_BOXED(2122653400,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159449087,32,FLEN)
NAN_BOXED(2122653400,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159514623,32,FLEN)
NAN_BOXED(2122653400,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159645695,32,FLEN)
NAN_BOXED(2122653400,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159907839,32,FLEN)
NAN_BOXED(2122653400,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(160432127,32,FLEN)
NAN_BOXED(2122653400,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(161480703,32,FLEN)
NAN_BOXED(2122653400,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(163577855,32,FLEN)
NAN_BOXED(2122653400,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(163577856,32,FLEN)
NAN_BOXED(2122653400,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(165675008,32,FLEN)
NAN_BOXED(2122653400,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(166723584,32,FLEN)
NAN_BOXED(2122653400,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167247872,32,FLEN)
NAN_BOXED(2122653400,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167510016,32,FLEN)
NAN_BOXED(2122653400,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167641088,32,FLEN)
NAN_BOXED(2122653400,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167706624,32,FLEN)
NAN_BOXED(2122653400,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167739392,32,FLEN)
NAN_BOXED(2122653400,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167755776,32,FLEN)
NAN_BOXED(2122653400,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167763968,32,FLEN)
NAN_BOXED(2122653400,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167768064,32,FLEN)
NAN_BOXED(2122653400,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167770112,32,FLEN)
NAN_BOXED(2122653400,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167771136,32,FLEN)
NAN_BOXED(2122653400,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167771648,32,FLEN)
NAN_BOXED(2122653400,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167771904,32,FLEN)
NAN_BOXED(2122653400,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167772032,32,FLEN)
NAN_BOXED(2122653400,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167772096,32,FLEN)
NAN_BOXED(2122653400,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167772128,32,FLEN)
NAN_BOXED(2122653400,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167772144,32,FLEN)
NAN_BOXED(2122653400,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167772152,32,FLEN)
NAN_BOXED(2122653400,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167772156,32,FLEN)
NAN_BOXED(2122653400,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167772158,32,FLEN)
NAN_BOXED(2122653400,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167772159,32,FLEN)
NAN_BOXED(2122800244,32,FLEN)
NAN_BOXED(1081218059,32,FLEN)
NAN_BOXED(1635778560,32,FLEN)
NAN_BOXED(2122800244,32,FLEN)
NAN_BOXED(1081218059,32,FLEN)
NAN_BOXED(1635778561,32,FLEN)
NAN_BOXED(2122800244,32,FLEN)
NAN_BOXED(1081218059,32,FLEN)
NAN_BOXED(1635778563,32,FLEN)
NAN_BOXED(2122800244,32,FLEN)
NAN_BOXED(1081218059,32,FLEN)
NAN_BOXED(1635778567,32,FLEN)
NAN_BOXED(2122800244,32,FLEN)
NAN_BOXED(1081218059,32,FLEN)
NAN_BOXED(1635778575,32,FLEN)
NAN_BOXED(2122800244,32,FLEN)
NAN_BOXED(1081218059,32,FLEN)
NAN_BOXED(1635778591,32,FLEN)
NAN_BOXED(2122800244,32,FLEN)
NAN_BOXED(1081218059,32,FLEN)
NAN_BOXED(1635778623,32,FLEN)
NAN_BOXED(2122800244,32,FLEN)
NAN_BOXED(1081218059,32,FLEN)
NAN_BOXED(1635778687,32,FLEN)
NAN_BOXED(2122800244,32,FLEN)
NAN_BOXED(1081218059,32,FLEN)
NAN_BOXED(1635778815,32,FLEN)
NAN_BOXED(2122800244,32,FLEN)
NAN_BOXED(1081218059,32,FLEN)
NAN_BOXED(1635779071,32,FLEN)
NAN_BOXED(2122800244,32,FLEN)
NAN_BOXED(1081218059,32,FLEN)
NAN_BOXED(1635779583,32,FLEN)
NAN_BOXED(2122800244,32,FLEN)
NAN_BOXED(1081218059,32,FLEN)
NAN_BOXED(1635780607,32,FLEN)
NAN_BOXED(2122800244,32,FLEN)
NAN_BOXED(1081218059,32,FLEN)
NAN_BOXED(1635782655,32,FLEN)
NAN_BOXED(2122800244,32,FLEN)
NAN_BOXED(1081218059,32,FLEN)
NAN_BOXED(1635786751,32,FLEN)
NAN_BOXED(2122800244,32,FLEN)
NAN_BOXED(1081218059,32,FLEN)
NAN_BOXED(1635794943,32,FLEN)
NAN_BOXED(2122800244,32,FLEN)
NAN_BOXED(1081218059,32,FLEN)
NAN_BOXED(1635811327,32,FLEN)
NAN_BOXED(2122800244,32,FLEN)
NAN_BOXED(1081218059,32,FLEN)
NAN_BOXED(1635844095,32,FLEN)
NAN_BOXED(2122800244,32,FLEN)
NAN_BOXED(1081218059,32,FLEN)
NAN_BOXED(1635909631,32,FLEN)
NAN_BOXED(2122800244,32,FLEN)
NAN_BOXED(1081218059,32,FLEN)
NAN_BOXED(1636040703,32,FLEN)
NAN_BOXED(2122800244,32,FLEN)
NAN_BOXED(1081218059,32,FLEN)
NAN_BOXED(1636302847,32,FLEN)
NAN_BOXED(2122800244,32,FLEN)
NAN_BOXED(1081218059,32,FLEN)
NAN_BOXED(1636827135,32,FLEN)
NAN_BOXED(2122800244,32,FLEN)
NAN_BOXED(1081218059,32,FLEN)
NAN_BOXED(1637875711,32,FLEN)
NAN_BOXED(2122800244,32,FLEN)
NAN_BOXED(1081218059,32,FLEN)
NAN_BOXED(1639972863,32,FLEN)
NAN_BOXED(2122800244,32,FLEN)
NAN_BOXED(1081218059,32,FLEN)
NAN_BOXED(1639972864,32,FLEN)
NAN_BOXED(2122800244,32,FLEN)
NAN_BOXED(1081218059,32,FLEN)
NAN_BOXED(1642070016,32,FLEN)
NAN_BOXED(2122800244,32,FLEN)
NAN_BOXED(1081218059,32,FLEN)
NAN_BOXED(1643118592,32,FLEN)
NAN_BOXED(2122800244,32,FLEN)
NAN_BOXED(1081218059,32,FLEN)
NAN_BOXED(1643642880,32,FLEN)
NAN_BOXED(2122800244,32,FLEN)
NAN_BOXED(1081218059,32,FLEN)
NAN_BOXED(1643905024,32,FLEN)
NAN_BOXED(2122800244,32,FLEN)
NAN_BOXED(1081218059,32,FLEN)
NAN_BOXED(1644036096,32,FLEN)
NAN_BOXED(2122800244,32,FLEN)
NAN_BOXED(1081218059,32,FLEN)
NAN_BOXED(1644101632,32,FLEN)
NAN_BOXED(2122800244,32,FLEN)
NAN_BOXED(1081218059,32,FLEN)
NAN_BOXED(1644134400,32,FLEN)
NAN_BOXED(2122800244,32,FLEN)
NAN_BOXED(1081218059,32,FLEN)
NAN_BOXED(1644150784,32,FLEN)
NAN_BOXED(2122800244,32,FLEN)
NAN_BOXED(1081218059,32,FLEN)
NAN_BOXED(1644158976,32,FLEN)
NAN_BOXED(2122800244,32,FLEN)
NAN_BOXED(1081218059,32,FLEN)
NAN_BOXED(1644163072,32,FLEN)
NAN_BOXED(2122800244,32,FLEN)
NAN_BOXED(1081218059,32,FLEN)
NAN_BOXED(1644165120,32,FLEN)
NAN_BOXED(2122800244,32,FLEN)
NAN_BOXED(1081218059,32,FLEN)
NAN_BOXED(1644166144,32,FLEN)
NAN_BOXED(2122800244,32,FLEN)
NAN_BOXED(1081218059,32,FLEN)
NAN_BOXED(1644166656,32,FLEN)
NAN_BOXED(2122800244,32,FLEN)
NAN_BOXED(1081218059,32,FLEN)
NAN_BOXED(1644166912,32,FLEN)
NAN_BOXED(2122800244,32,FLEN)
NAN_BOXED(1081218059,32,FLEN)
NAN_BOXED(1644167040,32,FLEN)
NAN_BOXED(2122800244,32,FLEN)
NAN_BOXED(1081218059,32,FLEN)
NAN_BOXED(1644167104,32,FLEN)
NAN_BOXED(2122800244,32,FLEN)
NAN_BOXED(1081218059,32,FLEN)
NAN_BOXED(1644167136,32,FLEN)
NAN_BOXED(2122800244,32,FLEN)
NAN_BOXED(1081218059,32,FLEN)
NAN_BOXED(1644167152,32,FLEN)
NAN_BOXED(2122800244,32,FLEN)
NAN_BOXED(1081218059,32,FLEN)
NAN_BOXED(1644167160,32,FLEN)
NAN_BOXED(2122800244,32,FLEN)
NAN_BOXED(1081218059,32,FLEN)
NAN_BOXED(1644167164,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
