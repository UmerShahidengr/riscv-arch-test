
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:17:59 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_13952:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x075c74 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x72140b and fs3 == 0 and fe3 == 0xc3 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e875c74; op2val:0x4072140b;
op3val:0x61fffffe; valaddr_reg:x3; val_offset:41856*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41856*0 + 3*109*FLEN/8, x4, x1, x2)

inst_13953:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x075c74 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x72140b and fs3 == 0 and fe3 == 0xc3 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e875c74; op2val:0x4072140b;
op3val:0x61ffffff; valaddr_reg:x3; val_offset:41859*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41859*0 + 3*109*FLEN/8, x4, x1, x2)

inst_13954:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x075c74 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x72140b and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e875c74; op2val:0x4072140b;
op3val:0x7f000001; valaddr_reg:x3; val_offset:41862*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41862*0 + 3*109*FLEN/8, x4, x1, x2)

inst_13955:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x075c74 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x72140b and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e875c74; op2val:0x4072140b;
op3val:0x7f000003; valaddr_reg:x3; val_offset:41865*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41865*0 + 3*109*FLEN/8, x4, x1, x2)

inst_13956:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x075c74 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x72140b and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e875c74; op2val:0x4072140b;
op3val:0x7f000007; valaddr_reg:x3; val_offset:41868*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41868*0 + 3*109*FLEN/8, x4, x1, x2)

inst_13957:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x075c74 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x72140b and fs3 == 0 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e875c74; op2val:0x4072140b;
op3val:0x7f199999; valaddr_reg:x3; val_offset:41871*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41871*0 + 3*109*FLEN/8, x4, x1, x2)

inst_13958:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x075c74 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x72140b and fs3 == 0 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e875c74; op2val:0x4072140b;
op3val:0x7f249249; valaddr_reg:x3; val_offset:41874*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41874*0 + 3*109*FLEN/8, x4, x1, x2)

inst_13959:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x075c74 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x72140b and fs3 == 0 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e875c74; op2val:0x4072140b;
op3val:0x7f333333; valaddr_reg:x3; val_offset:41877*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41877*0 + 3*109*FLEN/8, x4, x1, x2)

inst_13960:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x075c74 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x72140b and fs3 == 0 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e875c74; op2val:0x4072140b;
op3val:0x7f36db6d; valaddr_reg:x3; val_offset:41880*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41880*0 + 3*109*FLEN/8, x4, x1, x2)

inst_13961:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x075c74 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x72140b and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e875c74; op2val:0x4072140b;
op3val:0x7f3bbbbb; valaddr_reg:x3; val_offset:41883*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41883*0 + 3*109*FLEN/8, x4, x1, x2)

inst_13962:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x075c74 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x72140b and fs3 == 0 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e875c74; op2val:0x4072140b;
op3val:0x7f444444; valaddr_reg:x3; val_offset:41886*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41886*0 + 3*109*FLEN/8, x4, x1, x2)

inst_13963:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x075c74 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x72140b and fs3 == 0 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e875c74; op2val:0x4072140b;
op3val:0x7f4ccccc; valaddr_reg:x3; val_offset:41889*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41889*0 + 3*109*FLEN/8, x4, x1, x2)

inst_13964:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x075c74 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x72140b and fs3 == 0 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e875c74; op2val:0x4072140b;
op3val:0x7f5b6db6; valaddr_reg:x3; val_offset:41892*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41892*0 + 3*109*FLEN/8, x4, x1, x2)

inst_13965:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x075c74 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x72140b and fs3 == 0 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e875c74; op2val:0x4072140b;
op3val:0x7f666666; valaddr_reg:x3; val_offset:41895*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41895*0 + 3*109*FLEN/8, x4, x1, x2)

inst_13966:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x075c74 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x72140b and fs3 == 0 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e875c74; op2val:0x4072140b;
op3val:0x7f6db6db; valaddr_reg:x3; val_offset:41898*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41898*0 + 3*109*FLEN/8, x4, x1, x2)

inst_13967:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x075c74 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x72140b and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e875c74; op2val:0x4072140b;
op3val:0x7f7ffff8; valaddr_reg:x3; val_offset:41901*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41901*0 + 3*109*FLEN/8, x4, x1, x2)

inst_13968:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x075c74 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x72140b and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e875c74; op2val:0x4072140b;
op3val:0x7f7ffffc; valaddr_reg:x3; val_offset:41904*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41904*0 + 3*109*FLEN/8, x4, x1, x2)

inst_13969:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x075c74 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x72140b and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e875c74; op2val:0x4072140b;
op3val:0x7f7ffffe; valaddr_reg:x3; val_offset:41907*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41907*0 + 3*109*FLEN/8, x4, x1, x2)

inst_13970:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x07db19 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e87db19; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:41910*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41910*0 + 3*109*FLEN/8, x4, x1, x2)

inst_13971:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x07db19 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e87db19; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:41913*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41913*0 + 3*109*FLEN/8, x4, x1, x2)

inst_13972:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x07db19 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e87db19; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:41916*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41916*0 + 3*109*FLEN/8, x4, x1, x2)

inst_13973:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x07db19 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e87db19; op2val:0x0;
op3val:0x199999; valaddr_reg:x3; val_offset:41919*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41919*0 + 3*109*FLEN/8, x4, x1, x2)

inst_13974:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x07db19 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e87db19; op2val:0x0;
op3val:0x249249; valaddr_reg:x3; val_offset:41922*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41922*0 + 3*109*FLEN/8, x4, x1, x2)

inst_13975:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x07db19 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e87db19; op2val:0x0;
op3val:0x333333; valaddr_reg:x3; val_offset:41925*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41925*0 + 3*109*FLEN/8, x4, x1, x2)

inst_13976:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x07db19 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e87db19; op2val:0x0;
op3val:0x36db6d; valaddr_reg:x3; val_offset:41928*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41928*0 + 3*109*FLEN/8, x4, x1, x2)

inst_13977:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x07db19 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e87db19; op2val:0x0;
op3val:0x3bbbbb; valaddr_reg:x3; val_offset:41931*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41931*0 + 3*109*FLEN/8, x4, x1, x2)

inst_13978:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x07db19 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e87db19; op2val:0x0;
op3val:0x444444; valaddr_reg:x3; val_offset:41934*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41934*0 + 3*109*FLEN/8, x4, x1, x2)

inst_13979:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x07db19 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e87db19; op2val:0x0;
op3val:0x4ccccc; valaddr_reg:x3; val_offset:41937*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41937*0 + 3*109*FLEN/8, x4, x1, x2)

inst_13980:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x07db19 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e87db19; op2val:0x0;
op3val:0x5b6db6; valaddr_reg:x3; val_offset:41940*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41940*0 + 3*109*FLEN/8, x4, x1, x2)

inst_13981:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x07db19 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e87db19; op2val:0x0;
op3val:0x666666; valaddr_reg:x3; val_offset:41943*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41943*0 + 3*109*FLEN/8, x4, x1, x2)

inst_13982:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x07db19 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e87db19; op2val:0x0;
op3val:0x6db6db; valaddr_reg:x3; val_offset:41946*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41946*0 + 3*109*FLEN/8, x4, x1, x2)

inst_13983:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x07db19 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e87db19; op2val:0x0;
op3val:0x7ffff8; valaddr_reg:x3; val_offset:41949*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41949*0 + 3*109*FLEN/8, x4, x1, x2)

inst_13984:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x07db19 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e87db19; op2val:0x0;
op3val:0x7ffffc; valaddr_reg:x3; val_offset:41952*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41952*0 + 3*109*FLEN/8, x4, x1, x2)

inst_13985:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x07db19 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e87db19; op2val:0x0;
op3val:0x7ffffe; valaddr_reg:x3; val_offset:41955*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41955*0 + 3*109*FLEN/8, x4, x1, x2)

inst_13986:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x07db19 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x17 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e87db19; op2val:0x0;
op3val:0xb800000; valaddr_reg:x3; val_offset:41958*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41958*0 + 3*109*FLEN/8, x4, x1, x2)

inst_13987:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x07db19 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x17 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e87db19; op2val:0x0;
op3val:0xb800001; valaddr_reg:x3; val_offset:41961*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41961*0 + 3*109*FLEN/8, x4, x1, x2)

inst_13988:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x07db19 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x17 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e87db19; op2val:0x0;
op3val:0xb800003; valaddr_reg:x3; val_offset:41964*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41964*0 + 3*109*FLEN/8, x4, x1, x2)

inst_13989:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x07db19 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x17 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e87db19; op2val:0x0;
op3val:0xb800007; valaddr_reg:x3; val_offset:41967*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41967*0 + 3*109*FLEN/8, x4, x1, x2)

inst_13990:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x07db19 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x17 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e87db19; op2val:0x0;
op3val:0xb80000f; valaddr_reg:x3; val_offset:41970*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41970*0 + 3*109*FLEN/8, x4, x1, x2)

inst_13991:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x07db19 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x17 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e87db19; op2val:0x0;
op3val:0xb80001f; valaddr_reg:x3; val_offset:41973*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41973*0 + 3*109*FLEN/8, x4, x1, x2)

inst_13992:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x07db19 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x17 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e87db19; op2val:0x0;
op3val:0xb80003f; valaddr_reg:x3; val_offset:41976*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41976*0 + 3*109*FLEN/8, x4, x1, x2)

inst_13993:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x07db19 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x17 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e87db19; op2val:0x0;
op3val:0xb80007f; valaddr_reg:x3; val_offset:41979*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41979*0 + 3*109*FLEN/8, x4, x1, x2)

inst_13994:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x07db19 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x17 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e87db19; op2val:0x0;
op3val:0xb8000ff; valaddr_reg:x3; val_offset:41982*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41982*0 + 3*109*FLEN/8, x4, x1, x2)

inst_13995:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x07db19 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x17 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e87db19; op2val:0x0;
op3val:0xb8001ff; valaddr_reg:x3; val_offset:41985*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41985*0 + 3*109*FLEN/8, x4, x1, x2)

inst_13996:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x07db19 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x17 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e87db19; op2val:0x0;
op3val:0xb8003ff; valaddr_reg:x3; val_offset:41988*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41988*0 + 3*109*FLEN/8, x4, x1, x2)

inst_13997:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x07db19 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x17 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e87db19; op2val:0x0;
op3val:0xb8007ff; valaddr_reg:x3; val_offset:41991*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41991*0 + 3*109*FLEN/8, x4, x1, x2)

inst_13998:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x07db19 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x17 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e87db19; op2val:0x0;
op3val:0xb800fff; valaddr_reg:x3; val_offset:41994*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41994*0 + 3*109*FLEN/8, x4, x1, x2)

inst_13999:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x07db19 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x17 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e87db19; op2val:0x0;
op3val:0xb801fff; valaddr_reg:x3; val_offset:41997*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41997*0 + 3*109*FLEN/8, x4, x1, x2)

inst_14000:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x07db19 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x17 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e87db19; op2val:0x0;
op3val:0xb803fff; valaddr_reg:x3; val_offset:42000*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42000*0 + 3*109*FLEN/8, x4, x1, x2)

inst_14001:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x07db19 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x17 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e87db19; op2val:0x0;
op3val:0xb807fff; valaddr_reg:x3; val_offset:42003*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42003*0 + 3*109*FLEN/8, x4, x1, x2)

inst_14002:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x07db19 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x17 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e87db19; op2val:0x0;
op3val:0xb80ffff; valaddr_reg:x3; val_offset:42006*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42006*0 + 3*109*FLEN/8, x4, x1, x2)

inst_14003:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x07db19 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x17 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e87db19; op2val:0x0;
op3val:0xb81ffff; valaddr_reg:x3; val_offset:42009*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42009*0 + 3*109*FLEN/8, x4, x1, x2)

inst_14004:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x07db19 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x17 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e87db19; op2val:0x0;
op3val:0xb83ffff; valaddr_reg:x3; val_offset:42012*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42012*0 + 3*109*FLEN/8, x4, x1, x2)

inst_14005:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x07db19 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x17 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e87db19; op2val:0x0;
op3val:0xb87ffff; valaddr_reg:x3; val_offset:42015*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42015*0 + 3*109*FLEN/8, x4, x1, x2)

inst_14006:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x07db19 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x17 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e87db19; op2val:0x0;
op3val:0xb8fffff; valaddr_reg:x3; val_offset:42018*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42018*0 + 3*109*FLEN/8, x4, x1, x2)

inst_14007:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x07db19 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x17 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e87db19; op2val:0x0;
op3val:0xb9fffff; valaddr_reg:x3; val_offset:42021*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42021*0 + 3*109*FLEN/8, x4, x1, x2)

inst_14008:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x07db19 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x17 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e87db19; op2val:0x0;
op3val:0xbbfffff; valaddr_reg:x3; val_offset:42024*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42024*0 + 3*109*FLEN/8, x4, x1, x2)

inst_14009:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x07db19 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x17 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e87db19; op2val:0x0;
op3val:0xbc00000; valaddr_reg:x3; val_offset:42027*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42027*0 + 3*109*FLEN/8, x4, x1, x2)

inst_14010:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x07db19 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x17 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e87db19; op2val:0x0;
op3val:0xbe00000; valaddr_reg:x3; val_offset:42030*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42030*0 + 3*109*FLEN/8, x4, x1, x2)

inst_14011:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x07db19 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x17 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e87db19; op2val:0x0;
op3val:0xbf00000; valaddr_reg:x3; val_offset:42033*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42033*0 + 3*109*FLEN/8, x4, x1, x2)

inst_14012:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x07db19 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x17 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e87db19; op2val:0x0;
op3val:0xbf80000; valaddr_reg:x3; val_offset:42036*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42036*0 + 3*109*FLEN/8, x4, x1, x2)

inst_14013:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x07db19 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x17 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e87db19; op2val:0x0;
op3val:0xbfc0000; valaddr_reg:x3; val_offset:42039*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42039*0 + 3*109*FLEN/8, x4, x1, x2)

inst_14014:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x07db19 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x17 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e87db19; op2val:0x0;
op3val:0xbfe0000; valaddr_reg:x3; val_offset:42042*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42042*0 + 3*109*FLEN/8, x4, x1, x2)

inst_14015:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x07db19 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x17 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e87db19; op2val:0x0;
op3val:0xbff0000; valaddr_reg:x3; val_offset:42045*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42045*0 + 3*109*FLEN/8, x4, x1, x2)

inst_14016:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x07db19 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x17 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e87db19; op2val:0x0;
op3val:0xbff8000; valaddr_reg:x3; val_offset:42048*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42048*0 + 3*109*FLEN/8, x4, x1, x2)

inst_14017:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x07db19 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x17 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e87db19; op2val:0x0;
op3val:0xbffc000; valaddr_reg:x3; val_offset:42051*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42051*0 + 3*109*FLEN/8, x4, x1, x2)

inst_14018:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x07db19 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x17 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e87db19; op2val:0x0;
op3val:0xbffe000; valaddr_reg:x3; val_offset:42054*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42054*0 + 3*109*FLEN/8, x4, x1, x2)

inst_14019:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x07db19 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x17 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e87db19; op2val:0x0;
op3val:0xbfff000; valaddr_reg:x3; val_offset:42057*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42057*0 + 3*109*FLEN/8, x4, x1, x2)

inst_14020:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x07db19 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x17 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e87db19; op2val:0x0;
op3val:0xbfff800; valaddr_reg:x3; val_offset:42060*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42060*0 + 3*109*FLEN/8, x4, x1, x2)

inst_14021:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x07db19 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x17 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e87db19; op2val:0x0;
op3val:0xbfffc00; valaddr_reg:x3; val_offset:42063*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42063*0 + 3*109*FLEN/8, x4, x1, x2)

inst_14022:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x07db19 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x17 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e87db19; op2val:0x0;
op3val:0xbfffe00; valaddr_reg:x3; val_offset:42066*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42066*0 + 3*109*FLEN/8, x4, x1, x2)

inst_14023:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x07db19 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x17 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e87db19; op2val:0x0;
op3val:0xbffff00; valaddr_reg:x3; val_offset:42069*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42069*0 + 3*109*FLEN/8, x4, x1, x2)

inst_14024:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x07db19 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x17 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e87db19; op2val:0x0;
op3val:0xbffff80; valaddr_reg:x3; val_offset:42072*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42072*0 + 3*109*FLEN/8, x4, x1, x2)

inst_14025:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x07db19 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x17 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e87db19; op2val:0x0;
op3val:0xbffffc0; valaddr_reg:x3; val_offset:42075*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42075*0 + 3*109*FLEN/8, x4, x1, x2)

inst_14026:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x07db19 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x17 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e87db19; op2val:0x0;
op3val:0xbffffe0; valaddr_reg:x3; val_offset:42078*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42078*0 + 3*109*FLEN/8, x4, x1, x2)

inst_14027:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x07db19 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x17 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e87db19; op2val:0x0;
op3val:0xbfffff0; valaddr_reg:x3; val_offset:42081*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42081*0 + 3*109*FLEN/8, x4, x1, x2)

inst_14028:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x07db19 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x17 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e87db19; op2val:0x0;
op3val:0xbfffff8; valaddr_reg:x3; val_offset:42084*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42084*0 + 3*109*FLEN/8, x4, x1, x2)

inst_14029:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x07db19 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x17 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e87db19; op2val:0x0;
op3val:0xbfffffc; valaddr_reg:x3; val_offset:42087*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42087*0 + 3*109*FLEN/8, x4, x1, x2)

inst_14030:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x07db19 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x17 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e87db19; op2val:0x0;
op3val:0xbfffffe; valaddr_reg:x3; val_offset:42090*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42090*0 + 3*109*FLEN/8, x4, x1, x2)

inst_14031:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x07db19 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x17 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e87db19; op2val:0x0;
op3val:0xbffffff; valaddr_reg:x3; val_offset:42093*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42093*0 + 3*109*FLEN/8, x4, x1, x2)

inst_14032:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x082711 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x70abcc and fs3 == 0 and fe3 == 0xfa and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e882711; op2val:0x4070abcc;
op3val:0x7d000000; valaddr_reg:x3; val_offset:42096*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42096*0 + 3*109*FLEN/8, x4, x1, x2)

inst_14033:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x082711 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x70abcc and fs3 == 0 and fe3 == 0xfa and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e882711; op2val:0x4070abcc;
op3val:0x7d000001; valaddr_reg:x3; val_offset:42099*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42099*0 + 3*109*FLEN/8, x4, x1, x2)

inst_14034:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x082711 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x70abcc and fs3 == 0 and fe3 == 0xfa and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e882711; op2val:0x4070abcc;
op3val:0x7d000003; valaddr_reg:x3; val_offset:42102*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42102*0 + 3*109*FLEN/8, x4, x1, x2)

inst_14035:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x082711 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x70abcc and fs3 == 0 and fe3 == 0xfa and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e882711; op2val:0x4070abcc;
op3val:0x7d000007; valaddr_reg:x3; val_offset:42105*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42105*0 + 3*109*FLEN/8, x4, x1, x2)

inst_14036:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x082711 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x70abcc and fs3 == 0 and fe3 == 0xfa and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e882711; op2val:0x4070abcc;
op3val:0x7d00000f; valaddr_reg:x3; val_offset:42108*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42108*0 + 3*109*FLEN/8, x4, x1, x2)

inst_14037:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x082711 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x70abcc and fs3 == 0 and fe3 == 0xfa and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e882711; op2val:0x4070abcc;
op3val:0x7d00001f; valaddr_reg:x3; val_offset:42111*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42111*0 + 3*109*FLEN/8, x4, x1, x2)

inst_14038:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x082711 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x70abcc and fs3 == 0 and fe3 == 0xfa and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e882711; op2val:0x4070abcc;
op3val:0x7d00003f; valaddr_reg:x3; val_offset:42114*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42114*0 + 3*109*FLEN/8, x4, x1, x2)

inst_14039:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x082711 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x70abcc and fs3 == 0 and fe3 == 0xfa and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e882711; op2val:0x4070abcc;
op3val:0x7d00007f; valaddr_reg:x3; val_offset:42117*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42117*0 + 3*109*FLEN/8, x4, x1, x2)

inst_14040:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x082711 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x70abcc and fs3 == 0 and fe3 == 0xfa and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e882711; op2val:0x4070abcc;
op3val:0x7d0000ff; valaddr_reg:x3; val_offset:42120*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42120*0 + 3*109*FLEN/8, x4, x1, x2)

inst_14041:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x082711 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x70abcc and fs3 == 0 and fe3 == 0xfa and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e882711; op2val:0x4070abcc;
op3val:0x7d0001ff; valaddr_reg:x3; val_offset:42123*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42123*0 + 3*109*FLEN/8, x4, x1, x2)

inst_14042:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x082711 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x70abcc and fs3 == 0 and fe3 == 0xfa and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e882711; op2val:0x4070abcc;
op3val:0x7d0003ff; valaddr_reg:x3; val_offset:42126*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42126*0 + 3*109*FLEN/8, x4, x1, x2)

inst_14043:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x082711 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x70abcc and fs3 == 0 and fe3 == 0xfa and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e882711; op2val:0x4070abcc;
op3val:0x7d0007ff; valaddr_reg:x3; val_offset:42129*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42129*0 + 3*109*FLEN/8, x4, x1, x2)

inst_14044:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x082711 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x70abcc and fs3 == 0 and fe3 == 0xfa and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e882711; op2val:0x4070abcc;
op3val:0x7d000fff; valaddr_reg:x3; val_offset:42132*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42132*0 + 3*109*FLEN/8, x4, x1, x2)

inst_14045:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x082711 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x70abcc and fs3 == 0 and fe3 == 0xfa and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e882711; op2val:0x4070abcc;
op3val:0x7d001fff; valaddr_reg:x3; val_offset:42135*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42135*0 + 3*109*FLEN/8, x4, x1, x2)

inst_14046:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x082711 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x70abcc and fs3 == 0 and fe3 == 0xfa and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e882711; op2val:0x4070abcc;
op3val:0x7d003fff; valaddr_reg:x3; val_offset:42138*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42138*0 + 3*109*FLEN/8, x4, x1, x2)

inst_14047:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x082711 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x70abcc and fs3 == 0 and fe3 == 0xfa and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e882711; op2val:0x4070abcc;
op3val:0x7d007fff; valaddr_reg:x3; val_offset:42141*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42141*0 + 3*109*FLEN/8, x4, x1, x2)

inst_14048:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x082711 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x70abcc and fs3 == 0 and fe3 == 0xfa and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e882711; op2val:0x4070abcc;
op3val:0x7d00ffff; valaddr_reg:x3; val_offset:42144*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42144*0 + 3*109*FLEN/8, x4, x1, x2)

inst_14049:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x082711 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x70abcc and fs3 == 0 and fe3 == 0xfa and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e882711; op2val:0x4070abcc;
op3val:0x7d01ffff; valaddr_reg:x3; val_offset:42147*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42147*0 + 3*109*FLEN/8, x4, x1, x2)

inst_14050:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x082711 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x70abcc and fs3 == 0 and fe3 == 0xfa and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e882711; op2val:0x4070abcc;
op3val:0x7d03ffff; valaddr_reg:x3; val_offset:42150*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42150*0 + 3*109*FLEN/8, x4, x1, x2)

inst_14051:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x082711 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x70abcc and fs3 == 0 and fe3 == 0xfa and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e882711; op2val:0x4070abcc;
op3val:0x7d07ffff; valaddr_reg:x3; val_offset:42153*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42153*0 + 3*109*FLEN/8, x4, x1, x2)

inst_14052:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x082711 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x70abcc and fs3 == 0 and fe3 == 0xfa and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e882711; op2val:0x4070abcc;
op3val:0x7d0fffff; valaddr_reg:x3; val_offset:42156*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42156*0 + 3*109*FLEN/8, x4, x1, x2)

inst_14053:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x082711 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x70abcc and fs3 == 0 and fe3 == 0xfa and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e882711; op2val:0x4070abcc;
op3val:0x7d1fffff; valaddr_reg:x3; val_offset:42159*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42159*0 + 3*109*FLEN/8, x4, x1, x2)

inst_14054:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x082711 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x70abcc and fs3 == 0 and fe3 == 0xfa and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e882711; op2val:0x4070abcc;
op3val:0x7d3fffff; valaddr_reg:x3; val_offset:42162*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42162*0 + 3*109*FLEN/8, x4, x1, x2)

inst_14055:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x082711 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x70abcc and fs3 == 0 and fe3 == 0xfa and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e882711; op2val:0x4070abcc;
op3val:0x7d400000; valaddr_reg:x3; val_offset:42165*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42165*0 + 3*109*FLEN/8, x4, x1, x2)

inst_14056:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x082711 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x70abcc and fs3 == 0 and fe3 == 0xfa and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e882711; op2val:0x4070abcc;
op3val:0x7d600000; valaddr_reg:x3; val_offset:42168*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42168*0 + 3*109*FLEN/8, x4, x1, x2)

inst_14057:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x082711 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x70abcc and fs3 == 0 and fe3 == 0xfa and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e882711; op2val:0x4070abcc;
op3val:0x7d700000; valaddr_reg:x3; val_offset:42171*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42171*0 + 3*109*FLEN/8, x4, x1, x2)

inst_14058:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x082711 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x70abcc and fs3 == 0 and fe3 == 0xfa and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e882711; op2val:0x4070abcc;
op3val:0x7d780000; valaddr_reg:x3; val_offset:42174*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42174*0 + 3*109*FLEN/8, x4, x1, x2)

inst_14059:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x082711 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x70abcc and fs3 == 0 and fe3 == 0xfa and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e882711; op2val:0x4070abcc;
op3val:0x7d7c0000; valaddr_reg:x3; val_offset:42177*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42177*0 + 3*109*FLEN/8, x4, x1, x2)

inst_14060:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x082711 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x70abcc and fs3 == 0 and fe3 == 0xfa and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e882711; op2val:0x4070abcc;
op3val:0x7d7e0000; valaddr_reg:x3; val_offset:42180*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42180*0 + 3*109*FLEN/8, x4, x1, x2)

inst_14061:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x082711 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x70abcc and fs3 == 0 and fe3 == 0xfa and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e882711; op2val:0x4070abcc;
op3val:0x7d7f0000; valaddr_reg:x3; val_offset:42183*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42183*0 + 3*109*FLEN/8, x4, x1, x2)

inst_14062:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x082711 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x70abcc and fs3 == 0 and fe3 == 0xfa and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e882711; op2val:0x4070abcc;
op3val:0x7d7f8000; valaddr_reg:x3; val_offset:42186*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42186*0 + 3*109*FLEN/8, x4, x1, x2)

inst_14063:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x082711 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x70abcc and fs3 == 0 and fe3 == 0xfa and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e882711; op2val:0x4070abcc;
op3val:0x7d7fc000; valaddr_reg:x3; val_offset:42189*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42189*0 + 3*109*FLEN/8, x4, x1, x2)

inst_14064:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x082711 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x70abcc and fs3 == 0 and fe3 == 0xfa and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e882711; op2val:0x4070abcc;
op3val:0x7d7fe000; valaddr_reg:x3; val_offset:42192*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42192*0 + 3*109*FLEN/8, x4, x1, x2)

inst_14065:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x082711 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x70abcc and fs3 == 0 and fe3 == 0xfa and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e882711; op2val:0x4070abcc;
op3val:0x7d7ff000; valaddr_reg:x3; val_offset:42195*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42195*0 + 3*109*FLEN/8, x4, x1, x2)

inst_14066:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x082711 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x70abcc and fs3 == 0 and fe3 == 0xfa and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e882711; op2val:0x4070abcc;
op3val:0x7d7ff800; valaddr_reg:x3; val_offset:42198*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42198*0 + 3*109*FLEN/8, x4, x1, x2)

inst_14067:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x082711 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x70abcc and fs3 == 0 and fe3 == 0xfa and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e882711; op2val:0x4070abcc;
op3val:0x7d7ffc00; valaddr_reg:x3; val_offset:42201*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42201*0 + 3*109*FLEN/8, x4, x1, x2)

inst_14068:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x082711 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x70abcc and fs3 == 0 and fe3 == 0xfa and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e882711; op2val:0x4070abcc;
op3val:0x7d7ffe00; valaddr_reg:x3; val_offset:42204*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42204*0 + 3*109*FLEN/8, x4, x1, x2)

inst_14069:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x082711 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x70abcc and fs3 == 0 and fe3 == 0xfa and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e882711; op2val:0x4070abcc;
op3val:0x7d7fff00; valaddr_reg:x3; val_offset:42207*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42207*0 + 3*109*FLEN/8, x4, x1, x2)

inst_14070:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x082711 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x70abcc and fs3 == 0 and fe3 == 0xfa and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e882711; op2val:0x4070abcc;
op3val:0x7d7fff80; valaddr_reg:x3; val_offset:42210*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42210*0 + 3*109*FLEN/8, x4, x1, x2)

inst_14071:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x082711 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x70abcc and fs3 == 0 and fe3 == 0xfa and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e882711; op2val:0x4070abcc;
op3val:0x7d7fffc0; valaddr_reg:x3; val_offset:42213*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42213*0 + 3*109*FLEN/8, x4, x1, x2)

inst_14072:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x082711 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x70abcc and fs3 == 0 and fe3 == 0xfa and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e882711; op2val:0x4070abcc;
op3val:0x7d7fffe0; valaddr_reg:x3; val_offset:42216*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42216*0 + 3*109*FLEN/8, x4, x1, x2)

inst_14073:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x082711 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x70abcc and fs3 == 0 and fe3 == 0xfa and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e882711; op2val:0x4070abcc;
op3val:0x7d7ffff0; valaddr_reg:x3; val_offset:42219*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42219*0 + 3*109*FLEN/8, x4, x1, x2)

inst_14074:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x082711 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x70abcc and fs3 == 0 and fe3 == 0xfa and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e882711; op2val:0x4070abcc;
op3val:0x7d7ffff8; valaddr_reg:x3; val_offset:42222*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42222*0 + 3*109*FLEN/8, x4, x1, x2)

inst_14075:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x082711 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x70abcc and fs3 == 0 and fe3 == 0xfa and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e882711; op2val:0x4070abcc;
op3val:0x7d7ffffc; valaddr_reg:x3; val_offset:42225*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42225*0 + 3*109*FLEN/8, x4, x1, x2)

inst_14076:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x082711 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x70abcc and fs3 == 0 and fe3 == 0xfa and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e882711; op2val:0x4070abcc;
op3val:0x7d7ffffe; valaddr_reg:x3; val_offset:42228*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42228*0 + 3*109*FLEN/8, x4, x1, x2)

inst_14077:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x082711 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x70abcc and fs3 == 0 and fe3 == 0xfa and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e882711; op2val:0x4070abcc;
op3val:0x7d7fffff; valaddr_reg:x3; val_offset:42231*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42231*0 + 3*109*FLEN/8, x4, x1, x2)

inst_14078:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x082711 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x70abcc and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e882711; op2val:0x4070abcc;
op3val:0x7f000001; valaddr_reg:x3; val_offset:42234*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42234*0 + 3*109*FLEN/8, x4, x1, x2)

inst_14079:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x082711 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x70abcc and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e882711; op2val:0x4070abcc;
op3val:0x7f000003; valaddr_reg:x3; val_offset:42237*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42237*0 + 3*109*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2122800244,32,FLEN)
NAN_BOXED(1081218059,32,FLEN)
NAN_BOXED(1644167166,32,FLEN)
NAN_BOXED(2122800244,32,FLEN)
NAN_BOXED(1081218059,32,FLEN)
NAN_BOXED(1644167167,32,FLEN)
NAN_BOXED(2122800244,32,FLEN)
NAN_BOXED(1081218059,32,FLEN)
NAN_BOXED(2130706433,32,FLEN)
NAN_BOXED(2122800244,32,FLEN)
NAN_BOXED(1081218059,32,FLEN)
NAN_BOXED(2130706435,32,FLEN)
NAN_BOXED(2122800244,32,FLEN)
NAN_BOXED(1081218059,32,FLEN)
NAN_BOXED(2130706439,32,FLEN)
NAN_BOXED(2122800244,32,FLEN)
NAN_BOXED(1081218059,32,FLEN)
NAN_BOXED(2132384153,32,FLEN)
NAN_BOXED(2122800244,32,FLEN)
NAN_BOXED(1081218059,32,FLEN)
NAN_BOXED(2133103177,32,FLEN)
NAN_BOXED(2122800244,32,FLEN)
NAN_BOXED(1081218059,32,FLEN)
NAN_BOXED(2134061875,32,FLEN)
NAN_BOXED(2122800244,32,FLEN)
NAN_BOXED(1081218059,32,FLEN)
NAN_BOXED(2134301549,32,FLEN)
NAN_BOXED(2122800244,32,FLEN)
NAN_BOXED(1081218059,32,FLEN)
NAN_BOXED(2134621115,32,FLEN)
NAN_BOXED(2122800244,32,FLEN)
NAN_BOXED(1081218059,32,FLEN)
NAN_BOXED(2135180356,32,FLEN)
NAN_BOXED(2122800244,32,FLEN)
NAN_BOXED(1081218059,32,FLEN)
NAN_BOXED(2135739596,32,FLEN)
NAN_BOXED(2122800244,32,FLEN)
NAN_BOXED(1081218059,32,FLEN)
NAN_BOXED(2136698294,32,FLEN)
NAN_BOXED(2122800244,32,FLEN)
NAN_BOXED(1081218059,32,FLEN)
NAN_BOXED(2137417318,32,FLEN)
NAN_BOXED(2122800244,32,FLEN)
NAN_BOXED(1081218059,32,FLEN)
NAN_BOXED(2137896667,32,FLEN)
NAN_BOXED(2122800244,32,FLEN)
NAN_BOXED(1081218059,32,FLEN)
NAN_BOXED(2139095032,32,FLEN)
NAN_BOXED(2122800244,32,FLEN)
NAN_BOXED(1081218059,32,FLEN)
NAN_BOXED(2139095036,32,FLEN)
NAN_BOXED(2122800244,32,FLEN)
NAN_BOXED(1081218059,32,FLEN)
NAN_BOXED(2139095038,32,FLEN)
NAN_BOXED(2122832665,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2122832665,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3,32,FLEN)
NAN_BOXED(2122832665,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7,32,FLEN)
NAN_BOXED(2122832665,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1677721,32,FLEN)
NAN_BOXED(2122832665,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2396745,32,FLEN)
NAN_BOXED(2122832665,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3355443,32,FLEN)
NAN_BOXED(2122832665,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3595117,32,FLEN)
NAN_BOXED(2122832665,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3914683,32,FLEN)
NAN_BOXED(2122832665,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4473924,32,FLEN)
NAN_BOXED(2122832665,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5033164,32,FLEN)
NAN_BOXED(2122832665,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5991862,32,FLEN)
NAN_BOXED(2122832665,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(6710886,32,FLEN)
NAN_BOXED(2122832665,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7190235,32,FLEN)
NAN_BOXED(2122832665,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388600,32,FLEN)
NAN_BOXED(2122832665,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388604,32,FLEN)
NAN_BOXED(2122832665,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388606,32,FLEN)
NAN_BOXED(2122832665,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(192937984,32,FLEN)
NAN_BOXED(2122832665,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(192937985,32,FLEN)
NAN_BOXED(2122832665,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(192937987,32,FLEN)
NAN_BOXED(2122832665,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(192937991,32,FLEN)
NAN_BOXED(2122832665,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(192937999,32,FLEN)
NAN_BOXED(2122832665,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(192938015,32,FLEN)
NAN_BOXED(2122832665,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(192938047,32,FLEN)
NAN_BOXED(2122832665,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(192938111,32,FLEN)
NAN_BOXED(2122832665,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(192938239,32,FLEN)
NAN_BOXED(2122832665,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(192938495,32,FLEN)
NAN_BOXED(2122832665,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(192939007,32,FLEN)
NAN_BOXED(2122832665,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(192940031,32,FLEN)
NAN_BOXED(2122832665,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(192942079,32,FLEN)
NAN_BOXED(2122832665,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(192946175,32,FLEN)
NAN_BOXED(2122832665,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(192954367,32,FLEN)
NAN_BOXED(2122832665,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(192970751,32,FLEN)
NAN_BOXED(2122832665,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(193003519,32,FLEN)
NAN_BOXED(2122832665,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(193069055,32,FLEN)
NAN_BOXED(2122832665,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(193200127,32,FLEN)
NAN_BOXED(2122832665,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(193462271,32,FLEN)
NAN_BOXED(2122832665,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(193986559,32,FLEN)
NAN_BOXED(2122832665,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(195035135,32,FLEN)
NAN_BOXED(2122832665,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(197132287,32,FLEN)
NAN_BOXED(2122832665,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(197132288,32,FLEN)
NAN_BOXED(2122832665,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(199229440,32,FLEN)
NAN_BOXED(2122832665,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(200278016,32,FLEN)
NAN_BOXED(2122832665,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(200802304,32,FLEN)
NAN_BOXED(2122832665,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(201064448,32,FLEN)
NAN_BOXED(2122832665,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(201195520,32,FLEN)
NAN_BOXED(2122832665,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(201261056,32,FLEN)
NAN_BOXED(2122832665,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(201293824,32,FLEN)
NAN_BOXED(2122832665,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(201310208,32,FLEN)
NAN_BOXED(2122832665,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(201318400,32,FLEN)
NAN_BOXED(2122832665,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(201322496,32,FLEN)
NAN_BOXED(2122832665,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(201324544,32,FLEN)
NAN_BOXED(2122832665,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(201325568,32,FLEN)
NAN_BOXED(2122832665,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(201326080,32,FLEN)
NAN_BOXED(2122832665,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(201326336,32,FLEN)
NAN_BOXED(2122832665,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(201326464,32,FLEN)
NAN_BOXED(2122832665,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(201326528,32,FLEN)
NAN_BOXED(2122832665,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(201326560,32,FLEN)
NAN_BOXED(2122832665,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(201326576,32,FLEN)
NAN_BOXED(2122832665,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(201326584,32,FLEN)
NAN_BOXED(2122832665,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(201326588,32,FLEN)
NAN_BOXED(2122832665,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(201326590,32,FLEN)
NAN_BOXED(2122832665,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(201326591,32,FLEN)
NAN_BOXED(2122852113,32,FLEN)
NAN_BOXED(1081125836,32,FLEN)
NAN_BOXED(2097152000,32,FLEN)
NAN_BOXED(2122852113,32,FLEN)
NAN_BOXED(1081125836,32,FLEN)
NAN_BOXED(2097152001,32,FLEN)
NAN_BOXED(2122852113,32,FLEN)
NAN_BOXED(1081125836,32,FLEN)
NAN_BOXED(2097152003,32,FLEN)
NAN_BOXED(2122852113,32,FLEN)
NAN_BOXED(1081125836,32,FLEN)
NAN_BOXED(2097152007,32,FLEN)
NAN_BOXED(2122852113,32,FLEN)
NAN_BOXED(1081125836,32,FLEN)
NAN_BOXED(2097152015,32,FLEN)
NAN_BOXED(2122852113,32,FLEN)
NAN_BOXED(1081125836,32,FLEN)
NAN_BOXED(2097152031,32,FLEN)
NAN_BOXED(2122852113,32,FLEN)
NAN_BOXED(1081125836,32,FLEN)
NAN_BOXED(2097152063,32,FLEN)
NAN_BOXED(2122852113,32,FLEN)
NAN_BOXED(1081125836,32,FLEN)
NAN_BOXED(2097152127,32,FLEN)
NAN_BOXED(2122852113,32,FLEN)
NAN_BOXED(1081125836,32,FLEN)
NAN_BOXED(2097152255,32,FLEN)
NAN_BOXED(2122852113,32,FLEN)
NAN_BOXED(1081125836,32,FLEN)
NAN_BOXED(2097152511,32,FLEN)
NAN_BOXED(2122852113,32,FLEN)
NAN_BOXED(1081125836,32,FLEN)
NAN_BOXED(2097153023,32,FLEN)
NAN_BOXED(2122852113,32,FLEN)
NAN_BOXED(1081125836,32,FLEN)
NAN_BOXED(2097154047,32,FLEN)
NAN_BOXED(2122852113,32,FLEN)
NAN_BOXED(1081125836,32,FLEN)
NAN_BOXED(2097156095,32,FLEN)
NAN_BOXED(2122852113,32,FLEN)
NAN_BOXED(1081125836,32,FLEN)
NAN_BOXED(2097160191,32,FLEN)
NAN_BOXED(2122852113,32,FLEN)
NAN_BOXED(1081125836,32,FLEN)
NAN_BOXED(2097168383,32,FLEN)
NAN_BOXED(2122852113,32,FLEN)
NAN_BOXED(1081125836,32,FLEN)
NAN_BOXED(2097184767,32,FLEN)
NAN_BOXED(2122852113,32,FLEN)
NAN_BOXED(1081125836,32,FLEN)
NAN_BOXED(2097217535,32,FLEN)
NAN_BOXED(2122852113,32,FLEN)
NAN_BOXED(1081125836,32,FLEN)
NAN_BOXED(2097283071,32,FLEN)
NAN_BOXED(2122852113,32,FLEN)
NAN_BOXED(1081125836,32,FLEN)
NAN_BOXED(2097414143,32,FLEN)
NAN_BOXED(2122852113,32,FLEN)
NAN_BOXED(1081125836,32,FLEN)
NAN_BOXED(2097676287,32,FLEN)
NAN_BOXED(2122852113,32,FLEN)
NAN_BOXED(1081125836,32,FLEN)
NAN_BOXED(2098200575,32,FLEN)
NAN_BOXED(2122852113,32,FLEN)
NAN_BOXED(1081125836,32,FLEN)
NAN_BOXED(2099249151,32,FLEN)
NAN_BOXED(2122852113,32,FLEN)
NAN_BOXED(1081125836,32,FLEN)
NAN_BOXED(2101346303,32,FLEN)
NAN_BOXED(2122852113,32,FLEN)
NAN_BOXED(1081125836,32,FLEN)
NAN_BOXED(2101346304,32,FLEN)
NAN_BOXED(2122852113,32,FLEN)
NAN_BOXED(1081125836,32,FLEN)
NAN_BOXED(2103443456,32,FLEN)
NAN_BOXED(2122852113,32,FLEN)
NAN_BOXED(1081125836,32,FLEN)
NAN_BOXED(2104492032,32,FLEN)
NAN_BOXED(2122852113,32,FLEN)
NAN_BOXED(1081125836,32,FLEN)
NAN_BOXED(2105016320,32,FLEN)
NAN_BOXED(2122852113,32,FLEN)
NAN_BOXED(1081125836,32,FLEN)
NAN_BOXED(2105278464,32,FLEN)
NAN_BOXED(2122852113,32,FLEN)
NAN_BOXED(1081125836,32,FLEN)
NAN_BOXED(2105409536,32,FLEN)
NAN_BOXED(2122852113,32,FLEN)
NAN_BOXED(1081125836,32,FLEN)
NAN_BOXED(2105475072,32,FLEN)
NAN_BOXED(2122852113,32,FLEN)
NAN_BOXED(1081125836,32,FLEN)
NAN_BOXED(2105507840,32,FLEN)
NAN_BOXED(2122852113,32,FLEN)
NAN_BOXED(1081125836,32,FLEN)
NAN_BOXED(2105524224,32,FLEN)
NAN_BOXED(2122852113,32,FLEN)
NAN_BOXED(1081125836,32,FLEN)
NAN_BOXED(2105532416,32,FLEN)
NAN_BOXED(2122852113,32,FLEN)
NAN_BOXED(1081125836,32,FLEN)
NAN_BOXED(2105536512,32,FLEN)
NAN_BOXED(2122852113,32,FLEN)
NAN_BOXED(1081125836,32,FLEN)
NAN_BOXED(2105538560,32,FLEN)
NAN_BOXED(2122852113,32,FLEN)
NAN_BOXED(1081125836,32,FLEN)
NAN_BOXED(2105539584,32,FLEN)
NAN_BOXED(2122852113,32,FLEN)
NAN_BOXED(1081125836,32,FLEN)
NAN_BOXED(2105540096,32,FLEN)
NAN_BOXED(2122852113,32,FLEN)
NAN_BOXED(1081125836,32,FLEN)
NAN_BOXED(2105540352,32,FLEN)
NAN_BOXED(2122852113,32,FLEN)
NAN_BOXED(1081125836,32,FLEN)
NAN_BOXED(2105540480,32,FLEN)
NAN_BOXED(2122852113,32,FLEN)
NAN_BOXED(1081125836,32,FLEN)
NAN_BOXED(2105540544,32,FLEN)
NAN_BOXED(2122852113,32,FLEN)
NAN_BOXED(1081125836,32,FLEN)
NAN_BOXED(2105540576,32,FLEN)
NAN_BOXED(2122852113,32,FLEN)
NAN_BOXED(1081125836,32,FLEN)
NAN_BOXED(2105540592,32,FLEN)
NAN_BOXED(2122852113,32,FLEN)
NAN_BOXED(1081125836,32,FLEN)
NAN_BOXED(2105540600,32,FLEN)
NAN_BOXED(2122852113,32,FLEN)
NAN_BOXED(1081125836,32,FLEN)
NAN_BOXED(2105540604,32,FLEN)
NAN_BOXED(2122852113,32,FLEN)
NAN_BOXED(1081125836,32,FLEN)
NAN_BOXED(2105540606,32,FLEN)
NAN_BOXED(2122852113,32,FLEN)
NAN_BOXED(1081125836,32,FLEN)
NAN_BOXED(2105540607,32,FLEN)
NAN_BOXED(2122852113,32,FLEN)
NAN_BOXED(1081125836,32,FLEN)
NAN_BOXED(2130706433,32,FLEN)
NAN_BOXED(2122852113,32,FLEN)
NAN_BOXED(1081125836,32,FLEN)
NAN_BOXED(2130706435,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
