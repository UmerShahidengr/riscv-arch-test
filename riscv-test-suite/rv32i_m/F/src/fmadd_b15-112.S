
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:17:59 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_14208:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x097daf and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e897daf; op2val:0x0;
op3val:0x37ffe00; valaddr_reg:x3; val_offset:42624*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42624*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14209:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x097daf and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e897daf; op2val:0x0;
op3val:0x37fff00; valaddr_reg:x3; val_offset:42627*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42627*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14210:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x097daf and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e897daf; op2val:0x0;
op3val:0x37fff80; valaddr_reg:x3; val_offset:42630*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42630*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14211:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x097daf and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e897daf; op2val:0x0;
op3val:0x37fffc0; valaddr_reg:x3; val_offset:42633*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42633*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14212:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x097daf and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e897daf; op2val:0x0;
op3val:0x37fffe0; valaddr_reg:x3; val_offset:42636*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42636*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14213:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x097daf and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e897daf; op2val:0x0;
op3val:0x37ffff0; valaddr_reg:x3; val_offset:42639*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42639*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14214:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x097daf and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e897daf; op2val:0x0;
op3val:0x37ffff8; valaddr_reg:x3; val_offset:42642*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42642*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14215:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x097daf and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e897daf; op2val:0x0;
op3val:0x37ffffc; valaddr_reg:x3; val_offset:42645*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42645*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14216:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x097daf and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e897daf; op2val:0x0;
op3val:0x37ffffe; valaddr_reg:x3; val_offset:42648*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42648*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14217:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x097daf and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e897daf; op2val:0x0;
op3val:0x37fffff; valaddr_reg:x3; val_offset:42651*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42651*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14218:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0adedc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8adedc; op2val:0x80000000;
op3val:0x80000001; valaddr_reg:x3; val_offset:42654*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42654*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14219:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0adedc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8adedc; op2val:0x80000000;
op3val:0x80000003; valaddr_reg:x3; val_offset:42657*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42657*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14220:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0adedc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8adedc; op2val:0x80000000;
op3val:0x80000007; valaddr_reg:x3; val_offset:42660*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42660*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14221:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0adedc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8adedc; op2val:0x80000000;
op3val:0x80199999; valaddr_reg:x3; val_offset:42663*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42663*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14222:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0adedc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8adedc; op2val:0x80000000;
op3val:0x80249249; valaddr_reg:x3; val_offset:42666*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42666*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14223:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0adedc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8adedc; op2val:0x80000000;
op3val:0x80333333; valaddr_reg:x3; val_offset:42669*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42669*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14224:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0adedc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8adedc; op2val:0x80000000;
op3val:0x8036db6d; valaddr_reg:x3; val_offset:42672*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42672*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14225:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0adedc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8adedc; op2val:0x80000000;
op3val:0x803bbbbb; valaddr_reg:x3; val_offset:42675*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42675*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14226:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0adedc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8adedc; op2val:0x80000000;
op3val:0x80444444; valaddr_reg:x3; val_offset:42678*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42678*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14227:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0adedc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8adedc; op2val:0x80000000;
op3val:0x804ccccc; valaddr_reg:x3; val_offset:42681*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42681*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14228:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0adedc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8adedc; op2val:0x80000000;
op3val:0x805b6db6; valaddr_reg:x3; val_offset:42684*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42684*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14229:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0adedc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8adedc; op2val:0x80000000;
op3val:0x80666666; valaddr_reg:x3; val_offset:42687*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42687*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14230:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0adedc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8adedc; op2val:0x80000000;
op3val:0x806db6db; valaddr_reg:x3; val_offset:42690*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42690*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14231:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0adedc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8adedc; op2val:0x80000000;
op3val:0x807ffff8; valaddr_reg:x3; val_offset:42693*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42693*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14232:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0adedc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8adedc; op2val:0x80000000;
op3val:0x807ffffc; valaddr_reg:x3; val_offset:42696*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42696*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14233:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0adedc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8adedc; op2val:0x80000000;
op3val:0x807ffffe; valaddr_reg:x3; val_offset:42699*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42699*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14234:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0adedc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8adedc; op2val:0x80000000;
op3val:0x8d800000; valaddr_reg:x3; val_offset:42702*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42702*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14235:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0adedc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8adedc; op2val:0x80000000;
op3val:0x8d800001; valaddr_reg:x3; val_offset:42705*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42705*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14236:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0adedc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8adedc; op2val:0x80000000;
op3val:0x8d800003; valaddr_reg:x3; val_offset:42708*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42708*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14237:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0adedc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8adedc; op2val:0x80000000;
op3val:0x8d800007; valaddr_reg:x3; val_offset:42711*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42711*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14238:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0adedc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8adedc; op2val:0x80000000;
op3val:0x8d80000f; valaddr_reg:x3; val_offset:42714*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42714*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14239:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0adedc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8adedc; op2val:0x80000000;
op3val:0x8d80001f; valaddr_reg:x3; val_offset:42717*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42717*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14240:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0adedc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8adedc; op2val:0x80000000;
op3val:0x8d80003f; valaddr_reg:x3; val_offset:42720*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42720*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14241:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0adedc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8adedc; op2val:0x80000000;
op3val:0x8d80007f; valaddr_reg:x3; val_offset:42723*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42723*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14242:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0adedc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8adedc; op2val:0x80000000;
op3val:0x8d8000ff; valaddr_reg:x3; val_offset:42726*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42726*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14243:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0adedc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8adedc; op2val:0x80000000;
op3val:0x8d8001ff; valaddr_reg:x3; val_offset:42729*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42729*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14244:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0adedc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8adedc; op2val:0x80000000;
op3val:0x8d8003ff; valaddr_reg:x3; val_offset:42732*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42732*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14245:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0adedc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8adedc; op2val:0x80000000;
op3val:0x8d8007ff; valaddr_reg:x3; val_offset:42735*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42735*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14246:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0adedc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8adedc; op2val:0x80000000;
op3val:0x8d800fff; valaddr_reg:x3; val_offset:42738*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42738*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14247:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0adedc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8adedc; op2val:0x80000000;
op3val:0x8d801fff; valaddr_reg:x3; val_offset:42741*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42741*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14248:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0adedc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8adedc; op2val:0x80000000;
op3val:0x8d803fff; valaddr_reg:x3; val_offset:42744*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42744*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14249:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0adedc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8adedc; op2val:0x80000000;
op3val:0x8d807fff; valaddr_reg:x3; val_offset:42747*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42747*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14250:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0adedc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8adedc; op2val:0x80000000;
op3val:0x8d80ffff; valaddr_reg:x3; val_offset:42750*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42750*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14251:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0adedc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8adedc; op2val:0x80000000;
op3val:0x8d81ffff; valaddr_reg:x3; val_offset:42753*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42753*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14252:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0adedc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8adedc; op2val:0x80000000;
op3val:0x8d83ffff; valaddr_reg:x3; val_offset:42756*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42756*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14253:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0adedc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8adedc; op2val:0x80000000;
op3val:0x8d87ffff; valaddr_reg:x3; val_offset:42759*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42759*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14254:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0adedc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8adedc; op2val:0x80000000;
op3val:0x8d8fffff; valaddr_reg:x3; val_offset:42762*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42762*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14255:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0adedc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8adedc; op2val:0x80000000;
op3val:0x8d9fffff; valaddr_reg:x3; val_offset:42765*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42765*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14256:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0adedc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8adedc; op2val:0x80000000;
op3val:0x8dbfffff; valaddr_reg:x3; val_offset:42768*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42768*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14257:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0adedc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8adedc; op2val:0x80000000;
op3val:0x8dc00000; valaddr_reg:x3; val_offset:42771*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42771*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14258:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0adedc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8adedc; op2val:0x80000000;
op3val:0x8de00000; valaddr_reg:x3; val_offset:42774*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42774*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14259:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0adedc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8adedc; op2val:0x80000000;
op3val:0x8df00000; valaddr_reg:x3; val_offset:42777*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42777*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14260:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0adedc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8adedc; op2val:0x80000000;
op3val:0x8df80000; valaddr_reg:x3; val_offset:42780*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42780*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14261:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0adedc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8adedc; op2val:0x80000000;
op3val:0x8dfc0000; valaddr_reg:x3; val_offset:42783*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42783*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14262:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0adedc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8adedc; op2val:0x80000000;
op3val:0x8dfe0000; valaddr_reg:x3; val_offset:42786*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42786*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14263:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0adedc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8adedc; op2val:0x80000000;
op3val:0x8dff0000; valaddr_reg:x3; val_offset:42789*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42789*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14264:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0adedc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8adedc; op2val:0x80000000;
op3val:0x8dff8000; valaddr_reg:x3; val_offset:42792*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42792*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14265:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0adedc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8adedc; op2val:0x80000000;
op3val:0x8dffc000; valaddr_reg:x3; val_offset:42795*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42795*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14266:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0adedc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8adedc; op2val:0x80000000;
op3val:0x8dffe000; valaddr_reg:x3; val_offset:42798*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42798*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14267:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0adedc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8adedc; op2val:0x80000000;
op3val:0x8dfff000; valaddr_reg:x3; val_offset:42801*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42801*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14268:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0adedc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8adedc; op2val:0x80000000;
op3val:0x8dfff800; valaddr_reg:x3; val_offset:42804*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42804*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14269:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0adedc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8adedc; op2val:0x80000000;
op3val:0x8dfffc00; valaddr_reg:x3; val_offset:42807*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42807*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14270:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0adedc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8adedc; op2val:0x80000000;
op3val:0x8dfffe00; valaddr_reg:x3; val_offset:42810*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42810*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14271:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0adedc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8adedc; op2val:0x80000000;
op3val:0x8dffff00; valaddr_reg:x3; val_offset:42813*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42813*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14272:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0adedc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8adedc; op2val:0x80000000;
op3val:0x8dffff80; valaddr_reg:x3; val_offset:42816*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42816*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14273:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0adedc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8adedc; op2val:0x80000000;
op3val:0x8dffffc0; valaddr_reg:x3; val_offset:42819*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42819*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14274:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0adedc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8adedc; op2val:0x80000000;
op3val:0x8dffffe0; valaddr_reg:x3; val_offset:42822*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42822*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14275:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0adedc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8adedc; op2val:0x80000000;
op3val:0x8dfffff0; valaddr_reg:x3; val_offset:42825*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42825*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14276:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0adedc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8adedc; op2val:0x80000000;
op3val:0x8dfffff8; valaddr_reg:x3; val_offset:42828*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42828*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14277:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0adedc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8adedc; op2val:0x80000000;
op3val:0x8dfffffc; valaddr_reg:x3; val_offset:42831*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42831*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14278:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0adedc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8adedc; op2val:0x80000000;
op3val:0x8dfffffe; valaddr_reg:x3; val_offset:42834*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42834*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14279:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0adedc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8adedc; op2val:0x80000000;
op3val:0x8dffffff; valaddr_reg:x3; val_offset:42837*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42837*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14280:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0c77d8 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x6946ee and fs3 == 0 and fe3 == 0xca and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8c77d8; op2val:0x406946ee;
op3val:0x65000000; valaddr_reg:x3; val_offset:42840*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42840*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14281:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0c77d8 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x6946ee and fs3 == 0 and fe3 == 0xca and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8c77d8; op2val:0x406946ee;
op3val:0x65000001; valaddr_reg:x3; val_offset:42843*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42843*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14282:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0c77d8 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x6946ee and fs3 == 0 and fe3 == 0xca and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8c77d8; op2val:0x406946ee;
op3val:0x65000003; valaddr_reg:x3; val_offset:42846*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42846*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14283:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0c77d8 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x6946ee and fs3 == 0 and fe3 == 0xca and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8c77d8; op2val:0x406946ee;
op3val:0x65000007; valaddr_reg:x3; val_offset:42849*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42849*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14284:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0c77d8 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x6946ee and fs3 == 0 and fe3 == 0xca and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8c77d8; op2val:0x406946ee;
op3val:0x6500000f; valaddr_reg:x3; val_offset:42852*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42852*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14285:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0c77d8 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x6946ee and fs3 == 0 and fe3 == 0xca and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8c77d8; op2val:0x406946ee;
op3val:0x6500001f; valaddr_reg:x3; val_offset:42855*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42855*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14286:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0c77d8 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x6946ee and fs3 == 0 and fe3 == 0xca and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8c77d8; op2val:0x406946ee;
op3val:0x6500003f; valaddr_reg:x3; val_offset:42858*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42858*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14287:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0c77d8 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x6946ee and fs3 == 0 and fe3 == 0xca and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8c77d8; op2val:0x406946ee;
op3val:0x6500007f; valaddr_reg:x3; val_offset:42861*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42861*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14288:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0c77d8 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x6946ee and fs3 == 0 and fe3 == 0xca and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8c77d8; op2val:0x406946ee;
op3val:0x650000ff; valaddr_reg:x3; val_offset:42864*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42864*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14289:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0c77d8 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x6946ee and fs3 == 0 and fe3 == 0xca and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8c77d8; op2val:0x406946ee;
op3val:0x650001ff; valaddr_reg:x3; val_offset:42867*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42867*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14290:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0c77d8 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x6946ee and fs3 == 0 and fe3 == 0xca and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8c77d8; op2val:0x406946ee;
op3val:0x650003ff; valaddr_reg:x3; val_offset:42870*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42870*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14291:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0c77d8 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x6946ee and fs3 == 0 and fe3 == 0xca and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8c77d8; op2val:0x406946ee;
op3val:0x650007ff; valaddr_reg:x3; val_offset:42873*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42873*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14292:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0c77d8 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x6946ee and fs3 == 0 and fe3 == 0xca and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8c77d8; op2val:0x406946ee;
op3val:0x65000fff; valaddr_reg:x3; val_offset:42876*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42876*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14293:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0c77d8 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x6946ee and fs3 == 0 and fe3 == 0xca and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8c77d8; op2val:0x406946ee;
op3val:0x65001fff; valaddr_reg:x3; val_offset:42879*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42879*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14294:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0c77d8 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x6946ee and fs3 == 0 and fe3 == 0xca and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8c77d8; op2val:0x406946ee;
op3val:0x65003fff; valaddr_reg:x3; val_offset:42882*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42882*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14295:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0c77d8 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x6946ee and fs3 == 0 and fe3 == 0xca and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8c77d8; op2val:0x406946ee;
op3val:0x65007fff; valaddr_reg:x3; val_offset:42885*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42885*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14296:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0c77d8 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x6946ee and fs3 == 0 and fe3 == 0xca and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8c77d8; op2val:0x406946ee;
op3val:0x6500ffff; valaddr_reg:x3; val_offset:42888*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42888*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14297:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0c77d8 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x6946ee and fs3 == 0 and fe3 == 0xca and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8c77d8; op2val:0x406946ee;
op3val:0x6501ffff; valaddr_reg:x3; val_offset:42891*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42891*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14298:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0c77d8 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x6946ee and fs3 == 0 and fe3 == 0xca and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8c77d8; op2val:0x406946ee;
op3val:0x6503ffff; valaddr_reg:x3; val_offset:42894*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42894*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14299:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0c77d8 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x6946ee and fs3 == 0 and fe3 == 0xca and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8c77d8; op2val:0x406946ee;
op3val:0x6507ffff; valaddr_reg:x3; val_offset:42897*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42897*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14300:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0c77d8 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x6946ee and fs3 == 0 and fe3 == 0xca and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8c77d8; op2val:0x406946ee;
op3val:0x650fffff; valaddr_reg:x3; val_offset:42900*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42900*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14301:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0c77d8 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x6946ee and fs3 == 0 and fe3 == 0xca and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8c77d8; op2val:0x406946ee;
op3val:0x651fffff; valaddr_reg:x3; val_offset:42903*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42903*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14302:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0c77d8 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x6946ee and fs3 == 0 and fe3 == 0xca and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8c77d8; op2val:0x406946ee;
op3val:0x653fffff; valaddr_reg:x3; val_offset:42906*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42906*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14303:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0c77d8 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x6946ee and fs3 == 0 and fe3 == 0xca and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8c77d8; op2val:0x406946ee;
op3val:0x65400000; valaddr_reg:x3; val_offset:42909*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42909*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14304:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0c77d8 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x6946ee and fs3 == 0 and fe3 == 0xca and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8c77d8; op2val:0x406946ee;
op3val:0x65600000; valaddr_reg:x3; val_offset:42912*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42912*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14305:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0c77d8 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x6946ee and fs3 == 0 and fe3 == 0xca and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8c77d8; op2val:0x406946ee;
op3val:0x65700000; valaddr_reg:x3; val_offset:42915*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42915*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14306:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0c77d8 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x6946ee and fs3 == 0 and fe3 == 0xca and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8c77d8; op2val:0x406946ee;
op3val:0x65780000; valaddr_reg:x3; val_offset:42918*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42918*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14307:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0c77d8 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x6946ee and fs3 == 0 and fe3 == 0xca and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8c77d8; op2val:0x406946ee;
op3val:0x657c0000; valaddr_reg:x3; val_offset:42921*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42921*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14308:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0c77d8 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x6946ee and fs3 == 0 and fe3 == 0xca and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8c77d8; op2val:0x406946ee;
op3val:0x657e0000; valaddr_reg:x3; val_offset:42924*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42924*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14309:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0c77d8 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x6946ee and fs3 == 0 and fe3 == 0xca and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8c77d8; op2val:0x406946ee;
op3val:0x657f0000; valaddr_reg:x3; val_offset:42927*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42927*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14310:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0c77d8 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x6946ee and fs3 == 0 and fe3 == 0xca and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8c77d8; op2val:0x406946ee;
op3val:0x657f8000; valaddr_reg:x3; val_offset:42930*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42930*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14311:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0c77d8 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x6946ee and fs3 == 0 and fe3 == 0xca and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8c77d8; op2val:0x406946ee;
op3val:0x657fc000; valaddr_reg:x3; val_offset:42933*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42933*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14312:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0c77d8 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x6946ee and fs3 == 0 and fe3 == 0xca and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8c77d8; op2val:0x406946ee;
op3val:0x657fe000; valaddr_reg:x3; val_offset:42936*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42936*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14313:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0c77d8 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x6946ee and fs3 == 0 and fe3 == 0xca and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8c77d8; op2val:0x406946ee;
op3val:0x657ff000; valaddr_reg:x3; val_offset:42939*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42939*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14314:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0c77d8 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x6946ee and fs3 == 0 and fe3 == 0xca and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8c77d8; op2val:0x406946ee;
op3val:0x657ff800; valaddr_reg:x3; val_offset:42942*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42942*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14315:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0c77d8 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x6946ee and fs3 == 0 and fe3 == 0xca and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8c77d8; op2val:0x406946ee;
op3val:0x657ffc00; valaddr_reg:x3; val_offset:42945*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42945*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14316:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0c77d8 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x6946ee and fs3 == 0 and fe3 == 0xca and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8c77d8; op2val:0x406946ee;
op3val:0x657ffe00; valaddr_reg:x3; val_offset:42948*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42948*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14317:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0c77d8 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x6946ee and fs3 == 0 and fe3 == 0xca and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8c77d8; op2val:0x406946ee;
op3val:0x657fff00; valaddr_reg:x3; val_offset:42951*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42951*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14318:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0c77d8 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x6946ee and fs3 == 0 and fe3 == 0xca and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8c77d8; op2val:0x406946ee;
op3val:0x657fff80; valaddr_reg:x3; val_offset:42954*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42954*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14319:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0c77d8 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x6946ee and fs3 == 0 and fe3 == 0xca and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8c77d8; op2val:0x406946ee;
op3val:0x657fffc0; valaddr_reg:x3; val_offset:42957*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42957*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14320:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0c77d8 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x6946ee and fs3 == 0 and fe3 == 0xca and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8c77d8; op2val:0x406946ee;
op3val:0x657fffe0; valaddr_reg:x3; val_offset:42960*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42960*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14321:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0c77d8 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x6946ee and fs3 == 0 and fe3 == 0xca and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8c77d8; op2val:0x406946ee;
op3val:0x657ffff0; valaddr_reg:x3; val_offset:42963*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42963*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14322:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0c77d8 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x6946ee and fs3 == 0 and fe3 == 0xca and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8c77d8; op2val:0x406946ee;
op3val:0x657ffff8; valaddr_reg:x3; val_offset:42966*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42966*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14323:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0c77d8 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x6946ee and fs3 == 0 and fe3 == 0xca and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8c77d8; op2val:0x406946ee;
op3val:0x657ffffc; valaddr_reg:x3; val_offset:42969*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42969*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14324:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0c77d8 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x6946ee and fs3 == 0 and fe3 == 0xca and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8c77d8; op2val:0x406946ee;
op3val:0x657ffffe; valaddr_reg:x3; val_offset:42972*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42972*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14325:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0c77d8 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x6946ee and fs3 == 0 and fe3 == 0xca and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8c77d8; op2val:0x406946ee;
op3val:0x657fffff; valaddr_reg:x3; val_offset:42975*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42975*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14326:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0c77d8 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x6946ee and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8c77d8; op2val:0x406946ee;
op3val:0x7f000001; valaddr_reg:x3; val_offset:42978*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42978*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14327:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0c77d8 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x6946ee and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8c77d8; op2val:0x406946ee;
op3val:0x7f000003; valaddr_reg:x3; val_offset:42981*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42981*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14328:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0c77d8 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x6946ee and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8c77d8; op2val:0x406946ee;
op3val:0x7f000007; valaddr_reg:x3; val_offset:42984*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42984*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14329:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0c77d8 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x6946ee and fs3 == 0 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8c77d8; op2val:0x406946ee;
op3val:0x7f199999; valaddr_reg:x3; val_offset:42987*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42987*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14330:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0c77d8 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x6946ee and fs3 == 0 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8c77d8; op2val:0x406946ee;
op3val:0x7f249249; valaddr_reg:x3; val_offset:42990*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42990*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14331:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0c77d8 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x6946ee and fs3 == 0 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8c77d8; op2val:0x406946ee;
op3val:0x7f333333; valaddr_reg:x3; val_offset:42993*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42993*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14332:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0c77d8 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x6946ee and fs3 == 0 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8c77d8; op2val:0x406946ee;
op3val:0x7f36db6d; valaddr_reg:x3; val_offset:42996*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42996*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14333:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0c77d8 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x6946ee and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8c77d8; op2val:0x406946ee;
op3val:0x7f3bbbbb; valaddr_reg:x3; val_offset:42999*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42999*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14334:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0c77d8 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x6946ee and fs3 == 0 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8c77d8; op2val:0x406946ee;
op3val:0x7f444444; valaddr_reg:x3; val_offset:43002*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43002*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14335:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0c77d8 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x6946ee and fs3 == 0 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8c77d8; op2val:0x406946ee;
op3val:0x7f4ccccc; valaddr_reg:x3; val_offset:43005*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43005*0 + 3*111*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2122939823,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58719744,32,FLEN)
NAN_BOXED(2122939823,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58720000,32,FLEN)
NAN_BOXED(2122939823,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58720128,32,FLEN)
NAN_BOXED(2122939823,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58720192,32,FLEN)
NAN_BOXED(2122939823,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58720224,32,FLEN)
NAN_BOXED(2122939823,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58720240,32,FLEN)
NAN_BOXED(2122939823,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58720248,32,FLEN)
NAN_BOXED(2122939823,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58720252,32,FLEN)
NAN_BOXED(2122939823,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58720254,32,FLEN)
NAN_BOXED(2122939823,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58720255,32,FLEN)
NAN_BOXED(2123030236,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2123030236,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483651,32,FLEN)
NAN_BOXED(2123030236,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483655,32,FLEN)
NAN_BOXED(2123030236,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149161369,32,FLEN)
NAN_BOXED(2123030236,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149880393,32,FLEN)
NAN_BOXED(2123030236,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2150839091,32,FLEN)
NAN_BOXED(2123030236,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151078765,32,FLEN)
NAN_BOXED(2123030236,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151398331,32,FLEN)
NAN_BOXED(2123030236,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151957572,32,FLEN)
NAN_BOXED(2123030236,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2152516812,32,FLEN)
NAN_BOXED(2123030236,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2153475510,32,FLEN)
NAN_BOXED(2123030236,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154194534,32,FLEN)
NAN_BOXED(2123030236,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154673883,32,FLEN)
NAN_BOXED(2123030236,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872248,32,FLEN)
NAN_BOXED(2123030236,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872252,32,FLEN)
NAN_BOXED(2123030236,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2123030236,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373976064,32,FLEN)
NAN_BOXED(2123030236,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373976065,32,FLEN)
NAN_BOXED(2123030236,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373976067,32,FLEN)
NAN_BOXED(2123030236,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373976071,32,FLEN)
NAN_BOXED(2123030236,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373976079,32,FLEN)
NAN_BOXED(2123030236,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373976095,32,FLEN)
NAN_BOXED(2123030236,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373976127,32,FLEN)
NAN_BOXED(2123030236,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373976191,32,FLEN)
NAN_BOXED(2123030236,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373976319,32,FLEN)
NAN_BOXED(2123030236,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373976575,32,FLEN)
NAN_BOXED(2123030236,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373977087,32,FLEN)
NAN_BOXED(2123030236,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373978111,32,FLEN)
NAN_BOXED(2123030236,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373980159,32,FLEN)
NAN_BOXED(2123030236,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373984255,32,FLEN)
NAN_BOXED(2123030236,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373992447,32,FLEN)
NAN_BOXED(2123030236,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2374008831,32,FLEN)
NAN_BOXED(2123030236,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2374041599,32,FLEN)
NAN_BOXED(2123030236,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2374107135,32,FLEN)
NAN_BOXED(2123030236,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2374238207,32,FLEN)
NAN_BOXED(2123030236,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2374500351,32,FLEN)
NAN_BOXED(2123030236,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2375024639,32,FLEN)
NAN_BOXED(2123030236,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2376073215,32,FLEN)
NAN_BOXED(2123030236,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2378170367,32,FLEN)
NAN_BOXED(2123030236,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2378170368,32,FLEN)
NAN_BOXED(2123030236,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2380267520,32,FLEN)
NAN_BOXED(2123030236,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2381316096,32,FLEN)
NAN_BOXED(2123030236,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2381840384,32,FLEN)
NAN_BOXED(2123030236,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382102528,32,FLEN)
NAN_BOXED(2123030236,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382233600,32,FLEN)
NAN_BOXED(2123030236,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382299136,32,FLEN)
NAN_BOXED(2123030236,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382331904,32,FLEN)
NAN_BOXED(2123030236,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382348288,32,FLEN)
NAN_BOXED(2123030236,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382356480,32,FLEN)
NAN_BOXED(2123030236,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382360576,32,FLEN)
NAN_BOXED(2123030236,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382362624,32,FLEN)
NAN_BOXED(2123030236,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382363648,32,FLEN)
NAN_BOXED(2123030236,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382364160,32,FLEN)
NAN_BOXED(2123030236,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382364416,32,FLEN)
NAN_BOXED(2123030236,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382364544,32,FLEN)
NAN_BOXED(2123030236,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382364608,32,FLEN)
NAN_BOXED(2123030236,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382364640,32,FLEN)
NAN_BOXED(2123030236,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382364656,32,FLEN)
NAN_BOXED(2123030236,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382364664,32,FLEN)
NAN_BOXED(2123030236,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382364668,32,FLEN)
NAN_BOXED(2123030236,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382364670,32,FLEN)
NAN_BOXED(2123030236,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382364671,32,FLEN)
NAN_BOXED(2123134936,32,FLEN)
NAN_BOXED(1080641262,32,FLEN)
NAN_BOXED(1694498816,32,FLEN)
NAN_BOXED(2123134936,32,FLEN)
NAN_BOXED(1080641262,32,FLEN)
NAN_BOXED(1694498817,32,FLEN)
NAN_BOXED(2123134936,32,FLEN)
NAN_BOXED(1080641262,32,FLEN)
NAN_BOXED(1694498819,32,FLEN)
NAN_BOXED(2123134936,32,FLEN)
NAN_BOXED(1080641262,32,FLEN)
NAN_BOXED(1694498823,32,FLEN)
NAN_BOXED(2123134936,32,FLEN)
NAN_BOXED(1080641262,32,FLEN)
NAN_BOXED(1694498831,32,FLEN)
NAN_BOXED(2123134936,32,FLEN)
NAN_BOXED(1080641262,32,FLEN)
NAN_BOXED(1694498847,32,FLEN)
NAN_BOXED(2123134936,32,FLEN)
NAN_BOXED(1080641262,32,FLEN)
NAN_BOXED(1694498879,32,FLEN)
NAN_BOXED(2123134936,32,FLEN)
NAN_BOXED(1080641262,32,FLEN)
NAN_BOXED(1694498943,32,FLEN)
NAN_BOXED(2123134936,32,FLEN)
NAN_BOXED(1080641262,32,FLEN)
NAN_BOXED(1694499071,32,FLEN)
NAN_BOXED(2123134936,32,FLEN)
NAN_BOXED(1080641262,32,FLEN)
NAN_BOXED(1694499327,32,FLEN)
NAN_BOXED(2123134936,32,FLEN)
NAN_BOXED(1080641262,32,FLEN)
NAN_BOXED(1694499839,32,FLEN)
NAN_BOXED(2123134936,32,FLEN)
NAN_BOXED(1080641262,32,FLEN)
NAN_BOXED(1694500863,32,FLEN)
NAN_BOXED(2123134936,32,FLEN)
NAN_BOXED(1080641262,32,FLEN)
NAN_BOXED(1694502911,32,FLEN)
NAN_BOXED(2123134936,32,FLEN)
NAN_BOXED(1080641262,32,FLEN)
NAN_BOXED(1694507007,32,FLEN)
NAN_BOXED(2123134936,32,FLEN)
NAN_BOXED(1080641262,32,FLEN)
NAN_BOXED(1694515199,32,FLEN)
NAN_BOXED(2123134936,32,FLEN)
NAN_BOXED(1080641262,32,FLEN)
NAN_BOXED(1694531583,32,FLEN)
NAN_BOXED(2123134936,32,FLEN)
NAN_BOXED(1080641262,32,FLEN)
NAN_BOXED(1694564351,32,FLEN)
NAN_BOXED(2123134936,32,FLEN)
NAN_BOXED(1080641262,32,FLEN)
NAN_BOXED(1694629887,32,FLEN)
NAN_BOXED(2123134936,32,FLEN)
NAN_BOXED(1080641262,32,FLEN)
NAN_BOXED(1694760959,32,FLEN)
NAN_BOXED(2123134936,32,FLEN)
NAN_BOXED(1080641262,32,FLEN)
NAN_BOXED(1695023103,32,FLEN)
NAN_BOXED(2123134936,32,FLEN)
NAN_BOXED(1080641262,32,FLEN)
NAN_BOXED(1695547391,32,FLEN)
NAN_BOXED(2123134936,32,FLEN)
NAN_BOXED(1080641262,32,FLEN)
NAN_BOXED(1696595967,32,FLEN)
NAN_BOXED(2123134936,32,FLEN)
NAN_BOXED(1080641262,32,FLEN)
NAN_BOXED(1698693119,32,FLEN)
NAN_BOXED(2123134936,32,FLEN)
NAN_BOXED(1080641262,32,FLEN)
NAN_BOXED(1698693120,32,FLEN)
NAN_BOXED(2123134936,32,FLEN)
NAN_BOXED(1080641262,32,FLEN)
NAN_BOXED(1700790272,32,FLEN)
NAN_BOXED(2123134936,32,FLEN)
NAN_BOXED(1080641262,32,FLEN)
NAN_BOXED(1701838848,32,FLEN)
NAN_BOXED(2123134936,32,FLEN)
NAN_BOXED(1080641262,32,FLEN)
NAN_BOXED(1702363136,32,FLEN)
NAN_BOXED(2123134936,32,FLEN)
NAN_BOXED(1080641262,32,FLEN)
NAN_BOXED(1702625280,32,FLEN)
NAN_BOXED(2123134936,32,FLEN)
NAN_BOXED(1080641262,32,FLEN)
NAN_BOXED(1702756352,32,FLEN)
NAN_BOXED(2123134936,32,FLEN)
NAN_BOXED(1080641262,32,FLEN)
NAN_BOXED(1702821888,32,FLEN)
NAN_BOXED(2123134936,32,FLEN)
NAN_BOXED(1080641262,32,FLEN)
NAN_BOXED(1702854656,32,FLEN)
NAN_BOXED(2123134936,32,FLEN)
NAN_BOXED(1080641262,32,FLEN)
NAN_BOXED(1702871040,32,FLEN)
NAN_BOXED(2123134936,32,FLEN)
NAN_BOXED(1080641262,32,FLEN)
NAN_BOXED(1702879232,32,FLEN)
NAN_BOXED(2123134936,32,FLEN)
NAN_BOXED(1080641262,32,FLEN)
NAN_BOXED(1702883328,32,FLEN)
NAN_BOXED(2123134936,32,FLEN)
NAN_BOXED(1080641262,32,FLEN)
NAN_BOXED(1702885376,32,FLEN)
NAN_BOXED(2123134936,32,FLEN)
NAN_BOXED(1080641262,32,FLEN)
NAN_BOXED(1702886400,32,FLEN)
NAN_BOXED(2123134936,32,FLEN)
NAN_BOXED(1080641262,32,FLEN)
NAN_BOXED(1702886912,32,FLEN)
NAN_BOXED(2123134936,32,FLEN)
NAN_BOXED(1080641262,32,FLEN)
NAN_BOXED(1702887168,32,FLEN)
NAN_BOXED(2123134936,32,FLEN)
NAN_BOXED(1080641262,32,FLEN)
NAN_BOXED(1702887296,32,FLEN)
NAN_BOXED(2123134936,32,FLEN)
NAN_BOXED(1080641262,32,FLEN)
NAN_BOXED(1702887360,32,FLEN)
NAN_BOXED(2123134936,32,FLEN)
NAN_BOXED(1080641262,32,FLEN)
NAN_BOXED(1702887392,32,FLEN)
NAN_BOXED(2123134936,32,FLEN)
NAN_BOXED(1080641262,32,FLEN)
NAN_BOXED(1702887408,32,FLEN)
NAN_BOXED(2123134936,32,FLEN)
NAN_BOXED(1080641262,32,FLEN)
NAN_BOXED(1702887416,32,FLEN)
NAN_BOXED(2123134936,32,FLEN)
NAN_BOXED(1080641262,32,FLEN)
NAN_BOXED(1702887420,32,FLEN)
NAN_BOXED(2123134936,32,FLEN)
NAN_BOXED(1080641262,32,FLEN)
NAN_BOXED(1702887422,32,FLEN)
NAN_BOXED(2123134936,32,FLEN)
NAN_BOXED(1080641262,32,FLEN)
NAN_BOXED(1702887423,32,FLEN)
NAN_BOXED(2123134936,32,FLEN)
NAN_BOXED(1080641262,32,FLEN)
NAN_BOXED(2130706433,32,FLEN)
NAN_BOXED(2123134936,32,FLEN)
NAN_BOXED(1080641262,32,FLEN)
NAN_BOXED(2130706435,32,FLEN)
NAN_BOXED(2123134936,32,FLEN)
NAN_BOXED(1080641262,32,FLEN)
NAN_BOXED(2130706439,32,FLEN)
NAN_BOXED(2123134936,32,FLEN)
NAN_BOXED(1080641262,32,FLEN)
NAN_BOXED(2132384153,32,FLEN)
NAN_BOXED(2123134936,32,FLEN)
NAN_BOXED(1080641262,32,FLEN)
NAN_BOXED(2133103177,32,FLEN)
NAN_BOXED(2123134936,32,FLEN)
NAN_BOXED(1080641262,32,FLEN)
NAN_BOXED(2134061875,32,FLEN)
NAN_BOXED(2123134936,32,FLEN)
NAN_BOXED(1080641262,32,FLEN)
NAN_BOXED(2134301549,32,FLEN)
NAN_BOXED(2123134936,32,FLEN)
NAN_BOXED(1080641262,32,FLEN)
NAN_BOXED(2134621115,32,FLEN)
NAN_BOXED(2123134936,32,FLEN)
NAN_BOXED(1080641262,32,FLEN)
NAN_BOXED(2135180356,32,FLEN)
NAN_BOXED(2123134936,32,FLEN)
NAN_BOXED(1080641262,32,FLEN)
NAN_BOXED(2135739596,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
