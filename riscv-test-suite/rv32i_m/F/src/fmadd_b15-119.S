
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:17:59 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_15104:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x147c7c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e947c7c; op2val:0x0;
op3val:0x5000003; valaddr_reg:x3; val_offset:45312*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45312*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15105:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x147c7c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e947c7c; op2val:0x0;
op3val:0x5000007; valaddr_reg:x3; val_offset:45315*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45315*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15106:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x147c7c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e947c7c; op2val:0x0;
op3val:0x500000f; valaddr_reg:x3; val_offset:45318*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45318*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15107:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x147c7c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e947c7c; op2val:0x0;
op3val:0x500001f; valaddr_reg:x3; val_offset:45321*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45321*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15108:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x147c7c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e947c7c; op2val:0x0;
op3val:0x500003f; valaddr_reg:x3; val_offset:45324*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45324*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15109:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x147c7c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e947c7c; op2val:0x0;
op3val:0x500007f; valaddr_reg:x3; val_offset:45327*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45327*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15110:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x147c7c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e947c7c; op2val:0x0;
op3val:0x50000ff; valaddr_reg:x3; val_offset:45330*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45330*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15111:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x147c7c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e947c7c; op2val:0x0;
op3val:0x50001ff; valaddr_reg:x3; val_offset:45333*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45333*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15112:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x147c7c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e947c7c; op2val:0x0;
op3val:0x50003ff; valaddr_reg:x3; val_offset:45336*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45336*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15113:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x147c7c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e947c7c; op2val:0x0;
op3val:0x50007ff; valaddr_reg:x3; val_offset:45339*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45339*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15114:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x147c7c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e947c7c; op2val:0x0;
op3val:0x5000fff; valaddr_reg:x3; val_offset:45342*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45342*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15115:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x147c7c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e947c7c; op2val:0x0;
op3val:0x5001fff; valaddr_reg:x3; val_offset:45345*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45345*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15116:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x147c7c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e947c7c; op2val:0x0;
op3val:0x5003fff; valaddr_reg:x3; val_offset:45348*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45348*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15117:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x147c7c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e947c7c; op2val:0x0;
op3val:0x5007fff; valaddr_reg:x3; val_offset:45351*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45351*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15118:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x147c7c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e947c7c; op2val:0x0;
op3val:0x500ffff; valaddr_reg:x3; val_offset:45354*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45354*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15119:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x147c7c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e947c7c; op2val:0x0;
op3val:0x501ffff; valaddr_reg:x3; val_offset:45357*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45357*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15120:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x147c7c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e947c7c; op2val:0x0;
op3val:0x503ffff; valaddr_reg:x3; val_offset:45360*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45360*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15121:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x147c7c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e947c7c; op2val:0x0;
op3val:0x507ffff; valaddr_reg:x3; val_offset:45363*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45363*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15122:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x147c7c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e947c7c; op2val:0x0;
op3val:0x50fffff; valaddr_reg:x3; val_offset:45366*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45366*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15123:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x147c7c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e947c7c; op2val:0x0;
op3val:0x51fffff; valaddr_reg:x3; val_offset:45369*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45369*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15124:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x147c7c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e947c7c; op2val:0x0;
op3val:0x53fffff; valaddr_reg:x3; val_offset:45372*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45372*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15125:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x147c7c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e947c7c; op2val:0x0;
op3val:0x5400000; valaddr_reg:x3; val_offset:45375*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45375*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15126:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x147c7c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e947c7c; op2val:0x0;
op3val:0x5600000; valaddr_reg:x3; val_offset:45378*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45378*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15127:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x147c7c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e947c7c; op2val:0x0;
op3val:0x5700000; valaddr_reg:x3; val_offset:45381*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45381*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15128:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x147c7c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e947c7c; op2val:0x0;
op3val:0x5780000; valaddr_reg:x3; val_offset:45384*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45384*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15129:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x147c7c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e947c7c; op2val:0x0;
op3val:0x57c0000; valaddr_reg:x3; val_offset:45387*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45387*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15130:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x147c7c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e947c7c; op2val:0x0;
op3val:0x57e0000; valaddr_reg:x3; val_offset:45390*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45390*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15131:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x147c7c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e947c7c; op2val:0x0;
op3val:0x57f0000; valaddr_reg:x3; val_offset:45393*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45393*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15132:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x147c7c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e947c7c; op2val:0x0;
op3val:0x57f8000; valaddr_reg:x3; val_offset:45396*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45396*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15133:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x147c7c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e947c7c; op2val:0x0;
op3val:0x57fc000; valaddr_reg:x3; val_offset:45399*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45399*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15134:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x147c7c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e947c7c; op2val:0x0;
op3val:0x57fe000; valaddr_reg:x3; val_offset:45402*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45402*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15135:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x147c7c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e947c7c; op2val:0x0;
op3val:0x57ff000; valaddr_reg:x3; val_offset:45405*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45405*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15136:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x147c7c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e947c7c; op2val:0x0;
op3val:0x57ff800; valaddr_reg:x3; val_offset:45408*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45408*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15137:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x147c7c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e947c7c; op2val:0x0;
op3val:0x57ffc00; valaddr_reg:x3; val_offset:45411*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45411*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15138:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x147c7c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e947c7c; op2val:0x0;
op3val:0x57ffe00; valaddr_reg:x3; val_offset:45414*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45414*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15139:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x147c7c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e947c7c; op2val:0x0;
op3val:0x57fff00; valaddr_reg:x3; val_offset:45417*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45417*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15140:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x147c7c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e947c7c; op2val:0x0;
op3val:0x57fff80; valaddr_reg:x3; val_offset:45420*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45420*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15141:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x147c7c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e947c7c; op2val:0x0;
op3val:0x57fffc0; valaddr_reg:x3; val_offset:45423*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45423*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15142:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x147c7c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e947c7c; op2val:0x0;
op3val:0x57fffe0; valaddr_reg:x3; val_offset:45426*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45426*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15143:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x147c7c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e947c7c; op2val:0x0;
op3val:0x57ffff0; valaddr_reg:x3; val_offset:45429*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45429*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15144:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x147c7c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e947c7c; op2val:0x0;
op3val:0x57ffff8; valaddr_reg:x3; val_offset:45432*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45432*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15145:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x147c7c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e947c7c; op2val:0x0;
op3val:0x57ffffc; valaddr_reg:x3; val_offset:45435*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45435*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15146:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x147c7c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e947c7c; op2val:0x0;
op3val:0x57ffffe; valaddr_reg:x3; val_offset:45438*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45438*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15147:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x147c7c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e947c7c; op2val:0x0;
op3val:0x57fffff; valaddr_reg:x3; val_offset:45441*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45441*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15148:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x153d15 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x6dc8ae and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e953d15; op2val:0x6dc8ae;
op3val:0x3f800001; valaddr_reg:x3; val_offset:45444*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45444*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15149:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x153d15 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x6dc8ae and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e953d15; op2val:0x6dc8ae;
op3val:0x3f800003; valaddr_reg:x3; val_offset:45447*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45447*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15150:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x153d15 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x6dc8ae and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e953d15; op2val:0x6dc8ae;
op3val:0x3f800007; valaddr_reg:x3; val_offset:45450*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45450*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15151:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x153d15 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x6dc8ae and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e953d15; op2val:0x6dc8ae;
op3val:0x3f999999; valaddr_reg:x3; val_offset:45453*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45453*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15152:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x153d15 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x6dc8ae and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e953d15; op2val:0x6dc8ae;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:45456*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45456*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15153:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x153d15 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x6dc8ae and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e953d15; op2val:0x6dc8ae;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:45459*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45459*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15154:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x153d15 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x6dc8ae and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e953d15; op2val:0x6dc8ae;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:45462*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45462*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15155:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x153d15 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x6dc8ae and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e953d15; op2val:0x6dc8ae;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:45465*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45465*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15156:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x153d15 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x6dc8ae and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e953d15; op2val:0x6dc8ae;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:45468*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45468*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15157:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x153d15 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x6dc8ae and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e953d15; op2val:0x6dc8ae;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:45471*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45471*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15158:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x153d15 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x6dc8ae and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e953d15; op2val:0x6dc8ae;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:45474*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45474*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15159:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x153d15 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x6dc8ae and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e953d15; op2val:0x6dc8ae;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:45477*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45477*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15160:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x153d15 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x6dc8ae and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e953d15; op2val:0x6dc8ae;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:45480*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45480*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15161:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x153d15 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x6dc8ae and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e953d15; op2val:0x6dc8ae;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:45483*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45483*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15162:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x153d15 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x6dc8ae and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e953d15; op2val:0x6dc8ae;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:45486*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45486*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15163:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x153d15 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x6dc8ae and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e953d15; op2val:0x6dc8ae;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:45489*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45489*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15164:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x153d15 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x6dc8ae and fs3 == 0 and fe3 == 0x99 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e953d15; op2val:0x6dc8ae;
op3val:0x4c800000; valaddr_reg:x3; val_offset:45492*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45492*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15165:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x153d15 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x6dc8ae and fs3 == 0 and fe3 == 0x99 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e953d15; op2val:0x6dc8ae;
op3val:0x4c800001; valaddr_reg:x3; val_offset:45495*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45495*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15166:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x153d15 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x6dc8ae and fs3 == 0 and fe3 == 0x99 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e953d15; op2val:0x6dc8ae;
op3val:0x4c800003; valaddr_reg:x3; val_offset:45498*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45498*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15167:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x153d15 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x6dc8ae and fs3 == 0 and fe3 == 0x99 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e953d15; op2val:0x6dc8ae;
op3val:0x4c800007; valaddr_reg:x3; val_offset:45501*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45501*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15168:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x153d15 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x6dc8ae and fs3 == 0 and fe3 == 0x99 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e953d15; op2val:0x6dc8ae;
op3val:0x4c80000f; valaddr_reg:x3; val_offset:45504*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45504*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15169:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x153d15 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x6dc8ae and fs3 == 0 and fe3 == 0x99 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e953d15; op2val:0x6dc8ae;
op3val:0x4c80001f; valaddr_reg:x3; val_offset:45507*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45507*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15170:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x153d15 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x6dc8ae and fs3 == 0 and fe3 == 0x99 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e953d15; op2val:0x6dc8ae;
op3val:0x4c80003f; valaddr_reg:x3; val_offset:45510*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45510*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15171:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x153d15 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x6dc8ae and fs3 == 0 and fe3 == 0x99 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e953d15; op2val:0x6dc8ae;
op3val:0x4c80007f; valaddr_reg:x3; val_offset:45513*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45513*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15172:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x153d15 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x6dc8ae and fs3 == 0 and fe3 == 0x99 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e953d15; op2val:0x6dc8ae;
op3val:0x4c8000ff; valaddr_reg:x3; val_offset:45516*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45516*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15173:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x153d15 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x6dc8ae and fs3 == 0 and fe3 == 0x99 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e953d15; op2val:0x6dc8ae;
op3val:0x4c8001ff; valaddr_reg:x3; val_offset:45519*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45519*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15174:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x153d15 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x6dc8ae and fs3 == 0 and fe3 == 0x99 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e953d15; op2val:0x6dc8ae;
op3val:0x4c8003ff; valaddr_reg:x3; val_offset:45522*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45522*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15175:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x153d15 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x6dc8ae and fs3 == 0 and fe3 == 0x99 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e953d15; op2val:0x6dc8ae;
op3val:0x4c8007ff; valaddr_reg:x3; val_offset:45525*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45525*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15176:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x153d15 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x6dc8ae and fs3 == 0 and fe3 == 0x99 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e953d15; op2val:0x6dc8ae;
op3val:0x4c800fff; valaddr_reg:x3; val_offset:45528*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45528*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15177:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x153d15 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x6dc8ae and fs3 == 0 and fe3 == 0x99 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e953d15; op2val:0x6dc8ae;
op3val:0x4c801fff; valaddr_reg:x3; val_offset:45531*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45531*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15178:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x153d15 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x6dc8ae and fs3 == 0 and fe3 == 0x99 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e953d15; op2val:0x6dc8ae;
op3val:0x4c803fff; valaddr_reg:x3; val_offset:45534*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45534*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15179:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x153d15 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x6dc8ae and fs3 == 0 and fe3 == 0x99 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e953d15; op2val:0x6dc8ae;
op3val:0x4c807fff; valaddr_reg:x3; val_offset:45537*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45537*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15180:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x153d15 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x6dc8ae and fs3 == 0 and fe3 == 0x99 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e953d15; op2val:0x6dc8ae;
op3val:0x4c80ffff; valaddr_reg:x3; val_offset:45540*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45540*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15181:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x153d15 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x6dc8ae and fs3 == 0 and fe3 == 0x99 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e953d15; op2val:0x6dc8ae;
op3val:0x4c81ffff; valaddr_reg:x3; val_offset:45543*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45543*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15182:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x153d15 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x6dc8ae and fs3 == 0 and fe3 == 0x99 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e953d15; op2val:0x6dc8ae;
op3val:0x4c83ffff; valaddr_reg:x3; val_offset:45546*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45546*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15183:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x153d15 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x6dc8ae and fs3 == 0 and fe3 == 0x99 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e953d15; op2val:0x6dc8ae;
op3val:0x4c87ffff; valaddr_reg:x3; val_offset:45549*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45549*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15184:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x153d15 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x6dc8ae and fs3 == 0 and fe3 == 0x99 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e953d15; op2val:0x6dc8ae;
op3val:0x4c8fffff; valaddr_reg:x3; val_offset:45552*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45552*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15185:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x153d15 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x6dc8ae and fs3 == 0 and fe3 == 0x99 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e953d15; op2val:0x6dc8ae;
op3val:0x4c9fffff; valaddr_reg:x3; val_offset:45555*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45555*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15186:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x153d15 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x6dc8ae and fs3 == 0 and fe3 == 0x99 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e953d15; op2val:0x6dc8ae;
op3val:0x4cbfffff; valaddr_reg:x3; val_offset:45558*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45558*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15187:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x153d15 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x6dc8ae and fs3 == 0 and fe3 == 0x99 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e953d15; op2val:0x6dc8ae;
op3val:0x4cc00000; valaddr_reg:x3; val_offset:45561*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45561*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15188:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x153d15 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x6dc8ae and fs3 == 0 and fe3 == 0x99 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e953d15; op2val:0x6dc8ae;
op3val:0x4ce00000; valaddr_reg:x3; val_offset:45564*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45564*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15189:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x153d15 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x6dc8ae and fs3 == 0 and fe3 == 0x99 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e953d15; op2val:0x6dc8ae;
op3val:0x4cf00000; valaddr_reg:x3; val_offset:45567*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45567*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15190:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x153d15 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x6dc8ae and fs3 == 0 and fe3 == 0x99 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e953d15; op2val:0x6dc8ae;
op3val:0x4cf80000; valaddr_reg:x3; val_offset:45570*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45570*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15191:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x153d15 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x6dc8ae and fs3 == 0 and fe3 == 0x99 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e953d15; op2val:0x6dc8ae;
op3val:0x4cfc0000; valaddr_reg:x3; val_offset:45573*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45573*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15192:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x153d15 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x6dc8ae and fs3 == 0 and fe3 == 0x99 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e953d15; op2val:0x6dc8ae;
op3val:0x4cfe0000; valaddr_reg:x3; val_offset:45576*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45576*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15193:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x153d15 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x6dc8ae and fs3 == 0 and fe3 == 0x99 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e953d15; op2val:0x6dc8ae;
op3val:0x4cff0000; valaddr_reg:x3; val_offset:45579*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45579*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15194:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x153d15 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x6dc8ae and fs3 == 0 and fe3 == 0x99 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e953d15; op2val:0x6dc8ae;
op3val:0x4cff8000; valaddr_reg:x3; val_offset:45582*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45582*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15195:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x153d15 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x6dc8ae and fs3 == 0 and fe3 == 0x99 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e953d15; op2val:0x6dc8ae;
op3val:0x4cffc000; valaddr_reg:x3; val_offset:45585*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45585*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15196:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x153d15 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x6dc8ae and fs3 == 0 and fe3 == 0x99 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e953d15; op2val:0x6dc8ae;
op3val:0x4cffe000; valaddr_reg:x3; val_offset:45588*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45588*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15197:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x153d15 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x6dc8ae and fs3 == 0 and fe3 == 0x99 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e953d15; op2val:0x6dc8ae;
op3val:0x4cfff000; valaddr_reg:x3; val_offset:45591*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45591*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15198:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x153d15 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x6dc8ae and fs3 == 0 and fe3 == 0x99 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e953d15; op2val:0x6dc8ae;
op3val:0x4cfff800; valaddr_reg:x3; val_offset:45594*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45594*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15199:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x153d15 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x6dc8ae and fs3 == 0 and fe3 == 0x99 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e953d15; op2val:0x6dc8ae;
op3val:0x4cfffc00; valaddr_reg:x3; val_offset:45597*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45597*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15200:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x153d15 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x6dc8ae and fs3 == 0 and fe3 == 0x99 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e953d15; op2val:0x6dc8ae;
op3val:0x4cfffe00; valaddr_reg:x3; val_offset:45600*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45600*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15201:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x153d15 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x6dc8ae and fs3 == 0 and fe3 == 0x99 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e953d15; op2val:0x6dc8ae;
op3val:0x4cffff00; valaddr_reg:x3; val_offset:45603*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45603*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15202:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x153d15 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x6dc8ae and fs3 == 0 and fe3 == 0x99 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e953d15; op2val:0x6dc8ae;
op3val:0x4cffff80; valaddr_reg:x3; val_offset:45606*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45606*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15203:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x153d15 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x6dc8ae and fs3 == 0 and fe3 == 0x99 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e953d15; op2val:0x6dc8ae;
op3val:0x4cffffc0; valaddr_reg:x3; val_offset:45609*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45609*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15204:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x153d15 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x6dc8ae and fs3 == 0 and fe3 == 0x99 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e953d15; op2val:0x6dc8ae;
op3val:0x4cffffe0; valaddr_reg:x3; val_offset:45612*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45612*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15205:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x153d15 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x6dc8ae and fs3 == 0 and fe3 == 0x99 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e953d15; op2val:0x6dc8ae;
op3val:0x4cfffff0; valaddr_reg:x3; val_offset:45615*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45615*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15206:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x153d15 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x6dc8ae and fs3 == 0 and fe3 == 0x99 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e953d15; op2val:0x6dc8ae;
op3val:0x4cfffff8; valaddr_reg:x3; val_offset:45618*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45618*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15207:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x153d15 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x6dc8ae and fs3 == 0 and fe3 == 0x99 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e953d15; op2val:0x6dc8ae;
op3val:0x4cfffffc; valaddr_reg:x3; val_offset:45621*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45621*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15208:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x153d15 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x6dc8ae and fs3 == 0 and fe3 == 0x99 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e953d15; op2val:0x6dc8ae;
op3val:0x4cfffffe; valaddr_reg:x3; val_offset:45624*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45624*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15209:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x153d15 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x6dc8ae and fs3 == 0 and fe3 == 0x99 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e953d15; op2val:0x6dc8ae;
op3val:0x4cffffff; valaddr_reg:x3; val_offset:45627*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45627*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15210:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x164003 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x6d0b7d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e964003; op2val:0x6d0b7d;
op3val:0x3f800001; valaddr_reg:x3; val_offset:45630*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45630*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15211:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x164003 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x6d0b7d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e964003; op2val:0x6d0b7d;
op3val:0x3f800003; valaddr_reg:x3; val_offset:45633*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45633*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15212:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x164003 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x6d0b7d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e964003; op2val:0x6d0b7d;
op3val:0x3f800007; valaddr_reg:x3; val_offset:45636*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45636*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15213:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x164003 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x6d0b7d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e964003; op2val:0x6d0b7d;
op3val:0x3f999999; valaddr_reg:x3; val_offset:45639*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45639*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15214:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x164003 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x6d0b7d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e964003; op2val:0x6d0b7d;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:45642*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45642*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15215:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x164003 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x6d0b7d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e964003; op2val:0x6d0b7d;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:45645*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45645*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15216:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x164003 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x6d0b7d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e964003; op2val:0x6d0b7d;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:45648*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45648*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15217:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x164003 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x6d0b7d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e964003; op2val:0x6d0b7d;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:45651*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45651*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15218:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x164003 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x6d0b7d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e964003; op2val:0x6d0b7d;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:45654*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45654*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15219:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x164003 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x6d0b7d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e964003; op2val:0x6d0b7d;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:45657*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45657*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15220:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x164003 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x6d0b7d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e964003; op2val:0x6d0b7d;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:45660*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45660*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15221:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x164003 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x6d0b7d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e964003; op2val:0x6d0b7d;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:45663*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45663*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15222:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x164003 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x6d0b7d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e964003; op2val:0x6d0b7d;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:45666*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45666*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15223:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x164003 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x6d0b7d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e964003; op2val:0x6d0b7d;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:45669*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45669*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15224:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x164003 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x6d0b7d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e964003; op2val:0x6d0b7d;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:45672*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45672*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15225:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x164003 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x6d0b7d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e964003; op2val:0x6d0b7d;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:45675*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45675*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15226:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x164003 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x6d0b7d and fs3 == 0 and fe3 == 0x83 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e964003; op2val:0x6d0b7d;
op3val:0x41800000; valaddr_reg:x3; val_offset:45678*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45678*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15227:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x164003 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x6d0b7d and fs3 == 0 and fe3 == 0x83 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e964003; op2val:0x6d0b7d;
op3val:0x41800001; valaddr_reg:x3; val_offset:45681*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45681*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15228:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x164003 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x6d0b7d and fs3 == 0 and fe3 == 0x83 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e964003; op2val:0x6d0b7d;
op3val:0x41800003; valaddr_reg:x3; val_offset:45684*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45684*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15229:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x164003 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x6d0b7d and fs3 == 0 and fe3 == 0x83 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e964003; op2val:0x6d0b7d;
op3val:0x41800007; valaddr_reg:x3; val_offset:45687*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45687*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15230:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x164003 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x6d0b7d and fs3 == 0 and fe3 == 0x83 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e964003; op2val:0x6d0b7d;
op3val:0x4180000f; valaddr_reg:x3; val_offset:45690*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45690*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15231:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x164003 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x6d0b7d and fs3 == 0 and fe3 == 0x83 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e964003; op2val:0x6d0b7d;
op3val:0x4180001f; valaddr_reg:x3; val_offset:45693*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45693*0 + 3*118*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2123660412,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83886083,32,FLEN)
NAN_BOXED(2123660412,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83886087,32,FLEN)
NAN_BOXED(2123660412,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83886095,32,FLEN)
NAN_BOXED(2123660412,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83886111,32,FLEN)
NAN_BOXED(2123660412,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83886143,32,FLEN)
NAN_BOXED(2123660412,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83886207,32,FLEN)
NAN_BOXED(2123660412,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83886335,32,FLEN)
NAN_BOXED(2123660412,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83886591,32,FLEN)
NAN_BOXED(2123660412,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83887103,32,FLEN)
NAN_BOXED(2123660412,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83888127,32,FLEN)
NAN_BOXED(2123660412,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83890175,32,FLEN)
NAN_BOXED(2123660412,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83894271,32,FLEN)
NAN_BOXED(2123660412,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83902463,32,FLEN)
NAN_BOXED(2123660412,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83918847,32,FLEN)
NAN_BOXED(2123660412,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83951615,32,FLEN)
NAN_BOXED(2123660412,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(84017151,32,FLEN)
NAN_BOXED(2123660412,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(84148223,32,FLEN)
NAN_BOXED(2123660412,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(84410367,32,FLEN)
NAN_BOXED(2123660412,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(84934655,32,FLEN)
NAN_BOXED(2123660412,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(85983231,32,FLEN)
NAN_BOXED(2123660412,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(88080383,32,FLEN)
NAN_BOXED(2123660412,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(88080384,32,FLEN)
NAN_BOXED(2123660412,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(90177536,32,FLEN)
NAN_BOXED(2123660412,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(91226112,32,FLEN)
NAN_BOXED(2123660412,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(91750400,32,FLEN)
NAN_BOXED(2123660412,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92012544,32,FLEN)
NAN_BOXED(2123660412,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92143616,32,FLEN)
NAN_BOXED(2123660412,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92209152,32,FLEN)
NAN_BOXED(2123660412,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92241920,32,FLEN)
NAN_BOXED(2123660412,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92258304,32,FLEN)
NAN_BOXED(2123660412,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92266496,32,FLEN)
NAN_BOXED(2123660412,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92270592,32,FLEN)
NAN_BOXED(2123660412,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92272640,32,FLEN)
NAN_BOXED(2123660412,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92273664,32,FLEN)
NAN_BOXED(2123660412,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92274176,32,FLEN)
NAN_BOXED(2123660412,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92274432,32,FLEN)
NAN_BOXED(2123660412,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92274560,32,FLEN)
NAN_BOXED(2123660412,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92274624,32,FLEN)
NAN_BOXED(2123660412,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92274656,32,FLEN)
NAN_BOXED(2123660412,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92274672,32,FLEN)
NAN_BOXED(2123660412,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92274680,32,FLEN)
NAN_BOXED(2123660412,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92274684,32,FLEN)
NAN_BOXED(2123660412,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92274686,32,FLEN)
NAN_BOXED(2123660412,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92274687,32,FLEN)
NAN_BOXED(2123709717,32,FLEN)
NAN_BOXED(7194798,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2123709717,32,FLEN)
NAN_BOXED(7194798,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2123709717,32,FLEN)
NAN_BOXED(7194798,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2123709717,32,FLEN)
NAN_BOXED(7194798,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2123709717,32,FLEN)
NAN_BOXED(7194798,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2123709717,32,FLEN)
NAN_BOXED(7194798,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2123709717,32,FLEN)
NAN_BOXED(7194798,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2123709717,32,FLEN)
NAN_BOXED(7194798,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2123709717,32,FLEN)
NAN_BOXED(7194798,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2123709717,32,FLEN)
NAN_BOXED(7194798,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2123709717,32,FLEN)
NAN_BOXED(7194798,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2123709717,32,FLEN)
NAN_BOXED(7194798,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2123709717,32,FLEN)
NAN_BOXED(7194798,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2123709717,32,FLEN)
NAN_BOXED(7194798,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2123709717,32,FLEN)
NAN_BOXED(7194798,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2123709717,32,FLEN)
NAN_BOXED(7194798,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2123709717,32,FLEN)
NAN_BOXED(7194798,32,FLEN)
NAN_BOXED(1283457024,32,FLEN)
NAN_BOXED(2123709717,32,FLEN)
NAN_BOXED(7194798,32,FLEN)
NAN_BOXED(1283457025,32,FLEN)
NAN_BOXED(2123709717,32,FLEN)
NAN_BOXED(7194798,32,FLEN)
NAN_BOXED(1283457027,32,FLEN)
NAN_BOXED(2123709717,32,FLEN)
NAN_BOXED(7194798,32,FLEN)
NAN_BOXED(1283457031,32,FLEN)
NAN_BOXED(2123709717,32,FLEN)
NAN_BOXED(7194798,32,FLEN)
NAN_BOXED(1283457039,32,FLEN)
NAN_BOXED(2123709717,32,FLEN)
NAN_BOXED(7194798,32,FLEN)
NAN_BOXED(1283457055,32,FLEN)
NAN_BOXED(2123709717,32,FLEN)
NAN_BOXED(7194798,32,FLEN)
NAN_BOXED(1283457087,32,FLEN)
NAN_BOXED(2123709717,32,FLEN)
NAN_BOXED(7194798,32,FLEN)
NAN_BOXED(1283457151,32,FLEN)
NAN_BOXED(2123709717,32,FLEN)
NAN_BOXED(7194798,32,FLEN)
NAN_BOXED(1283457279,32,FLEN)
NAN_BOXED(2123709717,32,FLEN)
NAN_BOXED(7194798,32,FLEN)
NAN_BOXED(1283457535,32,FLEN)
NAN_BOXED(2123709717,32,FLEN)
NAN_BOXED(7194798,32,FLEN)
NAN_BOXED(1283458047,32,FLEN)
NAN_BOXED(2123709717,32,FLEN)
NAN_BOXED(7194798,32,FLEN)
NAN_BOXED(1283459071,32,FLEN)
NAN_BOXED(2123709717,32,FLEN)
NAN_BOXED(7194798,32,FLEN)
NAN_BOXED(1283461119,32,FLEN)
NAN_BOXED(2123709717,32,FLEN)
NAN_BOXED(7194798,32,FLEN)
NAN_BOXED(1283465215,32,FLEN)
NAN_BOXED(2123709717,32,FLEN)
NAN_BOXED(7194798,32,FLEN)
NAN_BOXED(1283473407,32,FLEN)
NAN_BOXED(2123709717,32,FLEN)
NAN_BOXED(7194798,32,FLEN)
NAN_BOXED(1283489791,32,FLEN)
NAN_BOXED(2123709717,32,FLEN)
NAN_BOXED(7194798,32,FLEN)
NAN_BOXED(1283522559,32,FLEN)
NAN_BOXED(2123709717,32,FLEN)
NAN_BOXED(7194798,32,FLEN)
NAN_BOXED(1283588095,32,FLEN)
NAN_BOXED(2123709717,32,FLEN)
NAN_BOXED(7194798,32,FLEN)
NAN_BOXED(1283719167,32,FLEN)
NAN_BOXED(2123709717,32,FLEN)
NAN_BOXED(7194798,32,FLEN)
NAN_BOXED(1283981311,32,FLEN)
NAN_BOXED(2123709717,32,FLEN)
NAN_BOXED(7194798,32,FLEN)
NAN_BOXED(1284505599,32,FLEN)
NAN_BOXED(2123709717,32,FLEN)
NAN_BOXED(7194798,32,FLEN)
NAN_BOXED(1285554175,32,FLEN)
NAN_BOXED(2123709717,32,FLEN)
NAN_BOXED(7194798,32,FLEN)
NAN_BOXED(1287651327,32,FLEN)
NAN_BOXED(2123709717,32,FLEN)
NAN_BOXED(7194798,32,FLEN)
NAN_BOXED(1287651328,32,FLEN)
NAN_BOXED(2123709717,32,FLEN)
NAN_BOXED(7194798,32,FLEN)
NAN_BOXED(1289748480,32,FLEN)
NAN_BOXED(2123709717,32,FLEN)
NAN_BOXED(7194798,32,FLEN)
NAN_BOXED(1290797056,32,FLEN)
NAN_BOXED(2123709717,32,FLEN)
NAN_BOXED(7194798,32,FLEN)
NAN_BOXED(1291321344,32,FLEN)
NAN_BOXED(2123709717,32,FLEN)
NAN_BOXED(7194798,32,FLEN)
NAN_BOXED(1291583488,32,FLEN)
NAN_BOXED(2123709717,32,FLEN)
NAN_BOXED(7194798,32,FLEN)
NAN_BOXED(1291714560,32,FLEN)
NAN_BOXED(2123709717,32,FLEN)
NAN_BOXED(7194798,32,FLEN)
NAN_BOXED(1291780096,32,FLEN)
NAN_BOXED(2123709717,32,FLEN)
NAN_BOXED(7194798,32,FLEN)
NAN_BOXED(1291812864,32,FLEN)
NAN_BOXED(2123709717,32,FLEN)
NAN_BOXED(7194798,32,FLEN)
NAN_BOXED(1291829248,32,FLEN)
NAN_BOXED(2123709717,32,FLEN)
NAN_BOXED(7194798,32,FLEN)
NAN_BOXED(1291837440,32,FLEN)
NAN_BOXED(2123709717,32,FLEN)
NAN_BOXED(7194798,32,FLEN)
NAN_BOXED(1291841536,32,FLEN)
NAN_BOXED(2123709717,32,FLEN)
NAN_BOXED(7194798,32,FLEN)
NAN_BOXED(1291843584,32,FLEN)
NAN_BOXED(2123709717,32,FLEN)
NAN_BOXED(7194798,32,FLEN)
NAN_BOXED(1291844608,32,FLEN)
NAN_BOXED(2123709717,32,FLEN)
NAN_BOXED(7194798,32,FLEN)
NAN_BOXED(1291845120,32,FLEN)
NAN_BOXED(2123709717,32,FLEN)
NAN_BOXED(7194798,32,FLEN)
NAN_BOXED(1291845376,32,FLEN)
NAN_BOXED(2123709717,32,FLEN)
NAN_BOXED(7194798,32,FLEN)
NAN_BOXED(1291845504,32,FLEN)
NAN_BOXED(2123709717,32,FLEN)
NAN_BOXED(7194798,32,FLEN)
NAN_BOXED(1291845568,32,FLEN)
NAN_BOXED(2123709717,32,FLEN)
NAN_BOXED(7194798,32,FLEN)
NAN_BOXED(1291845600,32,FLEN)
NAN_BOXED(2123709717,32,FLEN)
NAN_BOXED(7194798,32,FLEN)
NAN_BOXED(1291845616,32,FLEN)
NAN_BOXED(2123709717,32,FLEN)
NAN_BOXED(7194798,32,FLEN)
NAN_BOXED(1291845624,32,FLEN)
NAN_BOXED(2123709717,32,FLEN)
NAN_BOXED(7194798,32,FLEN)
NAN_BOXED(1291845628,32,FLEN)
NAN_BOXED(2123709717,32,FLEN)
NAN_BOXED(7194798,32,FLEN)
NAN_BOXED(1291845630,32,FLEN)
NAN_BOXED(2123709717,32,FLEN)
NAN_BOXED(7194798,32,FLEN)
NAN_BOXED(1291845631,32,FLEN)
NAN_BOXED(2123776003,32,FLEN)
NAN_BOXED(7146365,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2123776003,32,FLEN)
NAN_BOXED(7146365,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2123776003,32,FLEN)
NAN_BOXED(7146365,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2123776003,32,FLEN)
NAN_BOXED(7146365,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2123776003,32,FLEN)
NAN_BOXED(7146365,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2123776003,32,FLEN)
NAN_BOXED(7146365,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2123776003,32,FLEN)
NAN_BOXED(7146365,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2123776003,32,FLEN)
NAN_BOXED(7146365,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2123776003,32,FLEN)
NAN_BOXED(7146365,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2123776003,32,FLEN)
NAN_BOXED(7146365,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2123776003,32,FLEN)
NAN_BOXED(7146365,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2123776003,32,FLEN)
NAN_BOXED(7146365,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2123776003,32,FLEN)
NAN_BOXED(7146365,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2123776003,32,FLEN)
NAN_BOXED(7146365,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2123776003,32,FLEN)
NAN_BOXED(7146365,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2123776003,32,FLEN)
NAN_BOXED(7146365,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2123776003,32,FLEN)
NAN_BOXED(7146365,32,FLEN)
NAN_BOXED(1098907648,32,FLEN)
NAN_BOXED(2123776003,32,FLEN)
NAN_BOXED(7146365,32,FLEN)
NAN_BOXED(1098907649,32,FLEN)
NAN_BOXED(2123776003,32,FLEN)
NAN_BOXED(7146365,32,FLEN)
NAN_BOXED(1098907651,32,FLEN)
NAN_BOXED(2123776003,32,FLEN)
NAN_BOXED(7146365,32,FLEN)
NAN_BOXED(1098907655,32,FLEN)
NAN_BOXED(2123776003,32,FLEN)
NAN_BOXED(7146365,32,FLEN)
NAN_BOXED(1098907663,32,FLEN)
NAN_BOXED(2123776003,32,FLEN)
NAN_BOXED(7146365,32,FLEN)
NAN_BOXED(1098907679,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
