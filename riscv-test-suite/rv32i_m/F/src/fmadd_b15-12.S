
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:17:59 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_1408:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x5cc707 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cdcc707; op2val:0x0;
op3val:0x7ffffe; valaddr_reg:x3; val_offset:4224*0 + 3*11*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4224*0 + 3*11*FLEN/8, x4, x1, x2)

inst_1409:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x5cc707 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cdcc707; op2val:0x0;
op3val:0x7fffff; valaddr_reg:x3; val_offset:4227*0 + 3*11*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4227*0 + 3*11*FLEN/8, x4, x1, x2)

inst_1410:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x5cc707 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cdcc707; op2val:0x0;
op3val:0x800001; valaddr_reg:x3; val_offset:4230*0 + 3*11*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4230*0 + 3*11*FLEN/8, x4, x1, x2)

inst_1411:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x5cc707 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cdcc707; op2val:0x0;
op3val:0x800003; valaddr_reg:x3; val_offset:4233*0 + 3*11*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4233*0 + 3*11*FLEN/8, x4, x1, x2)

inst_1412:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x5cc707 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cdcc707; op2val:0x0;
op3val:0x800007; valaddr_reg:x3; val_offset:4236*0 + 3*11*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4236*0 + 3*11*FLEN/8, x4, x1, x2)

inst_1413:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x5cc707 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cdcc707; op2val:0x0;
op3val:0x999999; valaddr_reg:x3; val_offset:4239*0 + 3*11*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4239*0 + 3*11*FLEN/8, x4, x1, x2)

inst_1414:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x5cc707 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cdcc707; op2val:0x0;
op3val:0xa49249; valaddr_reg:x3; val_offset:4242*0 + 3*11*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4242*0 + 3*11*FLEN/8, x4, x1, x2)

inst_1415:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x5cc707 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cdcc707; op2val:0x0;
op3val:0xb33333; valaddr_reg:x3; val_offset:4245*0 + 3*11*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4245*0 + 3*11*FLEN/8, x4, x1, x2)

inst_1416:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x5cc707 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cdcc707; op2val:0x0;
op3val:0xb6db6d; valaddr_reg:x3; val_offset:4248*0 + 3*11*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4248*0 + 3*11*FLEN/8, x4, x1, x2)

inst_1417:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x5cc707 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cdcc707; op2val:0x0;
op3val:0xbbbbbb; valaddr_reg:x3; val_offset:4251*0 + 3*11*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4251*0 + 3*11*FLEN/8, x4, x1, x2)

inst_1418:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x5cc707 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cdcc707; op2val:0x0;
op3val:0xc44444; valaddr_reg:x3; val_offset:4254*0 + 3*11*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4254*0 + 3*11*FLEN/8, x4, x1, x2)

inst_1419:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x5cc707 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cdcc707; op2val:0x0;
op3val:0xcccccc; valaddr_reg:x3; val_offset:4257*0 + 3*11*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4257*0 + 3*11*FLEN/8, x4, x1, x2)

inst_1420:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x5cc707 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cdcc707; op2val:0x0;
op3val:0xdb6db6; valaddr_reg:x3; val_offset:4260*0 + 3*11*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4260*0 + 3*11*FLEN/8, x4, x1, x2)

inst_1421:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x5cc707 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cdcc707; op2val:0x0;
op3val:0xe66666; valaddr_reg:x3; val_offset:4263*0 + 3*11*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4263*0 + 3*11*FLEN/8, x4, x1, x2)

inst_1422:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x5cc707 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cdcc707; op2val:0x0;
op3val:0xedb6db; valaddr_reg:x3; val_offset:4266*0 + 3*11*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4266*0 + 3*11*FLEN/8, x4, x1, x2)

inst_1423:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x5cc707 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cdcc707; op2val:0x0;
op3val:0xfffff8; valaddr_reg:x3; val_offset:4269*0 + 3*11*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4269*0 + 3*11*FLEN/8, x4, x1, x2)

inst_1424:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x5cc707 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cdcc707; op2val:0x0;
op3val:0xfffffc; valaddr_reg:x3; val_offset:4272*0 + 3*11*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4272*0 + 3*11*FLEN/8, x4, x1, x2)

inst_1425:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x5cc707 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cdcc707; op2val:0x0;
op3val:0xfffffe; valaddr_reg:x3; val_offset:4275*0 + 3*11*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4275*0 + 3*11*FLEN/8, x4, x1, x2)

inst_1426:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x6d69ee and fs2 == 0 and fe2 == 0x04 and fm2 == 0x0a0547 and fs3 == 0 and fe3 == 0x42 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ced69ee; op2val:0x20a0547;
op3val:0x21000000; valaddr_reg:x3; val_offset:4278*0 + 3*11*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4278*0 + 3*11*FLEN/8, x4, x1, x2)

inst_1427:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x6d69ee and fs2 == 0 and fe2 == 0x04 and fm2 == 0x0a0547 and fs3 == 0 and fe3 == 0x42 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ced69ee; op2val:0x20a0547;
op3val:0x21000001; valaddr_reg:x3; val_offset:4281*0 + 3*11*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4281*0 + 3*11*FLEN/8, x4, x1, x2)

inst_1428:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x6d69ee and fs2 == 0 and fe2 == 0x04 and fm2 == 0x0a0547 and fs3 == 0 and fe3 == 0x42 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ced69ee; op2val:0x20a0547;
op3val:0x21000003; valaddr_reg:x3; val_offset:4284*0 + 3*11*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4284*0 + 3*11*FLEN/8, x4, x1, x2)

inst_1429:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x6d69ee and fs2 == 0 and fe2 == 0x04 and fm2 == 0x0a0547 and fs3 == 0 and fe3 == 0x42 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ced69ee; op2val:0x20a0547;
op3val:0x21000007; valaddr_reg:x3; val_offset:4287*0 + 3*11*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4287*0 + 3*11*FLEN/8, x4, x1, x2)

inst_1430:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x6d69ee and fs2 == 0 and fe2 == 0x04 and fm2 == 0x0a0547 and fs3 == 0 and fe3 == 0x42 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ced69ee; op2val:0x20a0547;
op3val:0x2100000f; valaddr_reg:x3; val_offset:4290*0 + 3*11*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4290*0 + 3*11*FLEN/8, x4, x1, x2)

inst_1431:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x6d69ee and fs2 == 0 and fe2 == 0x04 and fm2 == 0x0a0547 and fs3 == 0 and fe3 == 0x42 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ced69ee; op2val:0x20a0547;
op3val:0x2100001f; valaddr_reg:x3; val_offset:4293*0 + 3*11*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4293*0 + 3*11*FLEN/8, x4, x1, x2)

inst_1432:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x6d69ee and fs2 == 0 and fe2 == 0x04 and fm2 == 0x0a0547 and fs3 == 0 and fe3 == 0x42 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ced69ee; op2val:0x20a0547;
op3val:0x2100003f; valaddr_reg:x3; val_offset:4296*0 + 3*11*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4296*0 + 3*11*FLEN/8, x4, x1, x2)

inst_1433:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x6d69ee and fs2 == 0 and fe2 == 0x04 and fm2 == 0x0a0547 and fs3 == 0 and fe3 == 0x42 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ced69ee; op2val:0x20a0547;
op3val:0x2100007f; valaddr_reg:x3; val_offset:4299*0 + 3*11*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4299*0 + 3*11*FLEN/8, x4, x1, x2)

inst_1434:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x6d69ee and fs2 == 0 and fe2 == 0x04 and fm2 == 0x0a0547 and fs3 == 0 and fe3 == 0x42 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ced69ee; op2val:0x20a0547;
op3val:0x210000ff; valaddr_reg:x3; val_offset:4302*0 + 3*11*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4302*0 + 3*11*FLEN/8, x4, x1, x2)

inst_1435:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x6d69ee and fs2 == 0 and fe2 == 0x04 and fm2 == 0x0a0547 and fs3 == 0 and fe3 == 0x42 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ced69ee; op2val:0x20a0547;
op3val:0x210001ff; valaddr_reg:x3; val_offset:4305*0 + 3*11*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4305*0 + 3*11*FLEN/8, x4, x1, x2)

inst_1436:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x6d69ee and fs2 == 0 and fe2 == 0x04 and fm2 == 0x0a0547 and fs3 == 0 and fe3 == 0x42 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ced69ee; op2val:0x20a0547;
op3val:0x210003ff; valaddr_reg:x3; val_offset:4308*0 + 3*11*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4308*0 + 3*11*FLEN/8, x4, x1, x2)

inst_1437:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x6d69ee and fs2 == 0 and fe2 == 0x04 and fm2 == 0x0a0547 and fs3 == 0 and fe3 == 0x42 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ced69ee; op2val:0x20a0547;
op3val:0x210007ff; valaddr_reg:x3; val_offset:4311*0 + 3*11*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4311*0 + 3*11*FLEN/8, x4, x1, x2)

inst_1438:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x6d69ee and fs2 == 0 and fe2 == 0x04 and fm2 == 0x0a0547 and fs3 == 0 and fe3 == 0x42 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ced69ee; op2val:0x20a0547;
op3val:0x21000fff; valaddr_reg:x3; val_offset:4314*0 + 3*11*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4314*0 + 3*11*FLEN/8, x4, x1, x2)

inst_1439:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x6d69ee and fs2 == 0 and fe2 == 0x04 and fm2 == 0x0a0547 and fs3 == 0 and fe3 == 0x42 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ced69ee; op2val:0x20a0547;
op3val:0x21001fff; valaddr_reg:x3; val_offset:4317*0 + 3*11*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4317*0 + 3*11*FLEN/8, x4, x1, x2)

inst_1440:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x6d69ee and fs2 == 0 and fe2 == 0x04 and fm2 == 0x0a0547 and fs3 == 0 and fe3 == 0x42 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ced69ee; op2val:0x20a0547;
op3val:0x21003fff; valaddr_reg:x3; val_offset:4320*0 + 3*11*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4320*0 + 3*11*FLEN/8, x4, x1, x2)

inst_1441:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x6d69ee and fs2 == 0 and fe2 == 0x04 and fm2 == 0x0a0547 and fs3 == 0 and fe3 == 0x42 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ced69ee; op2val:0x20a0547;
op3val:0x21007fff; valaddr_reg:x3; val_offset:4323*0 + 3*11*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4323*0 + 3*11*FLEN/8, x4, x1, x2)

inst_1442:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x6d69ee and fs2 == 0 and fe2 == 0x04 and fm2 == 0x0a0547 and fs3 == 0 and fe3 == 0x42 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ced69ee; op2val:0x20a0547;
op3val:0x2100ffff; valaddr_reg:x3; val_offset:4326*0 + 3*11*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4326*0 + 3*11*FLEN/8, x4, x1, x2)

inst_1443:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x6d69ee and fs2 == 0 and fe2 == 0x04 and fm2 == 0x0a0547 and fs3 == 0 and fe3 == 0x42 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ced69ee; op2val:0x20a0547;
op3val:0x2101ffff; valaddr_reg:x3; val_offset:4329*0 + 3*11*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4329*0 + 3*11*FLEN/8, x4, x1, x2)

inst_1444:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x6d69ee and fs2 == 0 and fe2 == 0x04 and fm2 == 0x0a0547 and fs3 == 0 and fe3 == 0x42 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ced69ee; op2val:0x20a0547;
op3val:0x2103ffff; valaddr_reg:x3; val_offset:4332*0 + 3*11*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4332*0 + 3*11*FLEN/8, x4, x1, x2)

inst_1445:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x6d69ee and fs2 == 0 and fe2 == 0x04 and fm2 == 0x0a0547 and fs3 == 0 and fe3 == 0x42 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ced69ee; op2val:0x20a0547;
op3val:0x2107ffff; valaddr_reg:x3; val_offset:4335*0 + 3*11*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4335*0 + 3*11*FLEN/8, x4, x1, x2)

inst_1446:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x6d69ee and fs2 == 0 and fe2 == 0x04 and fm2 == 0x0a0547 and fs3 == 0 and fe3 == 0x42 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ced69ee; op2val:0x20a0547;
op3val:0x210fffff; valaddr_reg:x3; val_offset:4338*0 + 3*11*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4338*0 + 3*11*FLEN/8, x4, x1, x2)

inst_1447:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x6d69ee and fs2 == 0 and fe2 == 0x04 and fm2 == 0x0a0547 and fs3 == 0 and fe3 == 0x42 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ced69ee; op2val:0x20a0547;
op3val:0x211fffff; valaddr_reg:x3; val_offset:4341*0 + 3*11*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4341*0 + 3*11*FLEN/8, x4, x1, x2)

inst_1448:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x6d69ee and fs2 == 0 and fe2 == 0x04 and fm2 == 0x0a0547 and fs3 == 0 and fe3 == 0x42 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ced69ee; op2val:0x20a0547;
op3val:0x213fffff; valaddr_reg:x3; val_offset:4344*0 + 3*11*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4344*0 + 3*11*FLEN/8, x4, x1, x2)

inst_1449:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x6d69ee and fs2 == 0 and fe2 == 0x04 and fm2 == 0x0a0547 and fs3 == 0 and fe3 == 0x42 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ced69ee; op2val:0x20a0547;
op3val:0x21400000; valaddr_reg:x3; val_offset:4347*0 + 3*11*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4347*0 + 3*11*FLEN/8, x4, x1, x2)

inst_1450:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x6d69ee and fs2 == 0 and fe2 == 0x04 and fm2 == 0x0a0547 and fs3 == 0 and fe3 == 0x42 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ced69ee; op2val:0x20a0547;
op3val:0x21600000; valaddr_reg:x3; val_offset:4350*0 + 3*11*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4350*0 + 3*11*FLEN/8, x4, x1, x2)

inst_1451:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x6d69ee and fs2 == 0 and fe2 == 0x04 and fm2 == 0x0a0547 and fs3 == 0 and fe3 == 0x42 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ced69ee; op2val:0x20a0547;
op3val:0x21700000; valaddr_reg:x3; val_offset:4353*0 + 3*11*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4353*0 + 3*11*FLEN/8, x4, x1, x2)

inst_1452:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x6d69ee and fs2 == 0 and fe2 == 0x04 and fm2 == 0x0a0547 and fs3 == 0 and fe3 == 0x42 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ced69ee; op2val:0x20a0547;
op3val:0x21780000; valaddr_reg:x3; val_offset:4356*0 + 3*11*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4356*0 + 3*11*FLEN/8, x4, x1, x2)

inst_1453:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x6d69ee and fs2 == 0 and fe2 == 0x04 and fm2 == 0x0a0547 and fs3 == 0 and fe3 == 0x42 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ced69ee; op2val:0x20a0547;
op3val:0x217c0000; valaddr_reg:x3; val_offset:4359*0 + 3*11*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4359*0 + 3*11*FLEN/8, x4, x1, x2)

inst_1454:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x6d69ee and fs2 == 0 and fe2 == 0x04 and fm2 == 0x0a0547 and fs3 == 0 and fe3 == 0x42 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ced69ee; op2val:0x20a0547;
op3val:0x217e0000; valaddr_reg:x3; val_offset:4362*0 + 3*11*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4362*0 + 3*11*FLEN/8, x4, x1, x2)

inst_1455:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x6d69ee and fs2 == 0 and fe2 == 0x04 and fm2 == 0x0a0547 and fs3 == 0 and fe3 == 0x42 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ced69ee; op2val:0x20a0547;
op3val:0x217f0000; valaddr_reg:x3; val_offset:4365*0 + 3*11*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4365*0 + 3*11*FLEN/8, x4, x1, x2)

inst_1456:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x6d69ee and fs2 == 0 and fe2 == 0x04 and fm2 == 0x0a0547 and fs3 == 0 and fe3 == 0x42 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ced69ee; op2val:0x20a0547;
op3val:0x217f8000; valaddr_reg:x3; val_offset:4368*0 + 3*11*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4368*0 + 3*11*FLEN/8, x4, x1, x2)

inst_1457:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x6d69ee and fs2 == 0 and fe2 == 0x04 and fm2 == 0x0a0547 and fs3 == 0 and fe3 == 0x42 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ced69ee; op2val:0x20a0547;
op3val:0x217fc000; valaddr_reg:x3; val_offset:4371*0 + 3*11*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4371*0 + 3*11*FLEN/8, x4, x1, x2)

inst_1458:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x6d69ee and fs2 == 0 and fe2 == 0x04 and fm2 == 0x0a0547 and fs3 == 0 and fe3 == 0x42 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ced69ee; op2val:0x20a0547;
op3val:0x217fe000; valaddr_reg:x3; val_offset:4374*0 + 3*11*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4374*0 + 3*11*FLEN/8, x4, x1, x2)

inst_1459:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x6d69ee and fs2 == 0 and fe2 == 0x04 and fm2 == 0x0a0547 and fs3 == 0 and fe3 == 0x42 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ced69ee; op2val:0x20a0547;
op3val:0x217ff000; valaddr_reg:x3; val_offset:4377*0 + 3*11*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4377*0 + 3*11*FLEN/8, x4, x1, x2)

inst_1460:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x6d69ee and fs2 == 0 and fe2 == 0x04 and fm2 == 0x0a0547 and fs3 == 0 and fe3 == 0x42 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ced69ee; op2val:0x20a0547;
op3val:0x217ff800; valaddr_reg:x3; val_offset:4380*0 + 3*11*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4380*0 + 3*11*FLEN/8, x4, x1, x2)

inst_1461:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x6d69ee and fs2 == 0 and fe2 == 0x04 and fm2 == 0x0a0547 and fs3 == 0 and fe3 == 0x42 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ced69ee; op2val:0x20a0547;
op3val:0x217ffc00; valaddr_reg:x3; val_offset:4383*0 + 3*11*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4383*0 + 3*11*FLEN/8, x4, x1, x2)

inst_1462:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x6d69ee and fs2 == 0 and fe2 == 0x04 and fm2 == 0x0a0547 and fs3 == 0 and fe3 == 0x42 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ced69ee; op2val:0x20a0547;
op3val:0x217ffe00; valaddr_reg:x3; val_offset:4386*0 + 3*11*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4386*0 + 3*11*FLEN/8, x4, x1, x2)

inst_1463:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x6d69ee and fs2 == 0 and fe2 == 0x04 and fm2 == 0x0a0547 and fs3 == 0 and fe3 == 0x42 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ced69ee; op2val:0x20a0547;
op3val:0x217fff00; valaddr_reg:x3; val_offset:4389*0 + 3*11*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4389*0 + 3*11*FLEN/8, x4, x1, x2)

inst_1464:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x6d69ee and fs2 == 0 and fe2 == 0x04 and fm2 == 0x0a0547 and fs3 == 0 and fe3 == 0x42 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ced69ee; op2val:0x20a0547;
op3val:0x217fff80; valaddr_reg:x3; val_offset:4392*0 + 3*11*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4392*0 + 3*11*FLEN/8, x4, x1, x2)

inst_1465:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x6d69ee and fs2 == 0 and fe2 == 0x04 and fm2 == 0x0a0547 and fs3 == 0 and fe3 == 0x42 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ced69ee; op2val:0x20a0547;
op3val:0x217fffc0; valaddr_reg:x3; val_offset:4395*0 + 3*11*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4395*0 + 3*11*FLEN/8, x4, x1, x2)

inst_1466:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x6d69ee and fs2 == 0 and fe2 == 0x04 and fm2 == 0x0a0547 and fs3 == 0 and fe3 == 0x42 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ced69ee; op2val:0x20a0547;
op3val:0x217fffe0; valaddr_reg:x3; val_offset:4398*0 + 3*11*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4398*0 + 3*11*FLEN/8, x4, x1, x2)

inst_1467:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x6d69ee and fs2 == 0 and fe2 == 0x04 and fm2 == 0x0a0547 and fs3 == 0 and fe3 == 0x42 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ced69ee; op2val:0x20a0547;
op3val:0x217ffff0; valaddr_reg:x3; val_offset:4401*0 + 3*11*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4401*0 + 3*11*FLEN/8, x4, x1, x2)

inst_1468:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x6d69ee and fs2 == 0 and fe2 == 0x04 and fm2 == 0x0a0547 and fs3 == 0 and fe3 == 0x42 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ced69ee; op2val:0x20a0547;
op3val:0x217ffff8; valaddr_reg:x3; val_offset:4404*0 + 3*11*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4404*0 + 3*11*FLEN/8, x4, x1, x2)

inst_1469:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x6d69ee and fs2 == 0 and fe2 == 0x04 and fm2 == 0x0a0547 and fs3 == 0 and fe3 == 0x42 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ced69ee; op2val:0x20a0547;
op3val:0x217ffffc; valaddr_reg:x3; val_offset:4407*0 + 3*11*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4407*0 + 3*11*FLEN/8, x4, x1, x2)

inst_1470:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x6d69ee and fs2 == 0 and fe2 == 0x04 and fm2 == 0x0a0547 and fs3 == 0 and fe3 == 0x42 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ced69ee; op2val:0x20a0547;
op3val:0x217ffffe; valaddr_reg:x3; val_offset:4410*0 + 3*11*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4410*0 + 3*11*FLEN/8, x4, x1, x2)

inst_1471:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x6d69ee and fs2 == 0 and fe2 == 0x04 and fm2 == 0x0a0547 and fs3 == 0 and fe3 == 0x42 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ced69ee; op2val:0x20a0547;
op3val:0x217fffff; valaddr_reg:x3; val_offset:4413*0 + 3*11*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4413*0 + 3*11*FLEN/8, x4, x1, x2)

inst_1472:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x6d69ee and fs2 == 0 and fe2 == 0x04 and fm2 == 0x0a0547 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ced69ee; op2val:0x20a0547;
op3val:0x3f800001; valaddr_reg:x3; val_offset:4416*0 + 3*11*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4416*0 + 3*11*FLEN/8, x4, x1, x2)

inst_1473:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x6d69ee and fs2 == 0 and fe2 == 0x04 and fm2 == 0x0a0547 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ced69ee; op2val:0x20a0547;
op3val:0x3f800003; valaddr_reg:x3; val_offset:4419*0 + 3*11*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4419*0 + 3*11*FLEN/8, x4, x1, x2)

inst_1474:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x6d69ee and fs2 == 0 and fe2 == 0x04 and fm2 == 0x0a0547 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ced69ee; op2val:0x20a0547;
op3val:0x3f800007; valaddr_reg:x3; val_offset:4422*0 + 3*11*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4422*0 + 3*11*FLEN/8, x4, x1, x2)

inst_1475:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x6d69ee and fs2 == 0 and fe2 == 0x04 and fm2 == 0x0a0547 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ced69ee; op2val:0x20a0547;
op3val:0x3f999999; valaddr_reg:x3; val_offset:4425*0 + 3*11*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4425*0 + 3*11*FLEN/8, x4, x1, x2)

inst_1476:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x6d69ee and fs2 == 0 and fe2 == 0x04 and fm2 == 0x0a0547 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ced69ee; op2val:0x20a0547;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:4428*0 + 3*11*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4428*0 + 3*11*FLEN/8, x4, x1, x2)

inst_1477:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x6d69ee and fs2 == 0 and fe2 == 0x04 and fm2 == 0x0a0547 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ced69ee; op2val:0x20a0547;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:4431*0 + 3*11*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4431*0 + 3*11*FLEN/8, x4, x1, x2)

inst_1478:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x6d69ee and fs2 == 0 and fe2 == 0x04 and fm2 == 0x0a0547 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ced69ee; op2val:0x20a0547;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:4434*0 + 3*11*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4434*0 + 3*11*FLEN/8, x4, x1, x2)

inst_1479:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x6d69ee and fs2 == 0 and fe2 == 0x04 and fm2 == 0x0a0547 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ced69ee; op2val:0x20a0547;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:4437*0 + 3*11*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4437*0 + 3*11*FLEN/8, x4, x1, x2)

inst_1480:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x6d69ee and fs2 == 0 and fe2 == 0x04 and fm2 == 0x0a0547 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ced69ee; op2val:0x20a0547;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:4440*0 + 3*11*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4440*0 + 3*11*FLEN/8, x4, x1, x2)

inst_1481:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x6d69ee and fs2 == 0 and fe2 == 0x04 and fm2 == 0x0a0547 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ced69ee; op2val:0x20a0547;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:4443*0 + 3*11*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4443*0 + 3*11*FLEN/8, x4, x1, x2)

inst_1482:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x6d69ee and fs2 == 0 and fe2 == 0x04 and fm2 == 0x0a0547 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ced69ee; op2val:0x20a0547;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:4446*0 + 3*11*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4446*0 + 3*11*FLEN/8, x4, x1, x2)

inst_1483:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x6d69ee and fs2 == 0 and fe2 == 0x04 and fm2 == 0x0a0547 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ced69ee; op2val:0x20a0547;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:4449*0 + 3*11*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4449*0 + 3*11*FLEN/8, x4, x1, x2)

inst_1484:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x6d69ee and fs2 == 0 and fe2 == 0x04 and fm2 == 0x0a0547 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ced69ee; op2val:0x20a0547;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:4452*0 + 3*11*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4452*0 + 3*11*FLEN/8, x4, x1, x2)

inst_1485:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x6d69ee and fs2 == 0 and fe2 == 0x04 and fm2 == 0x0a0547 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ced69ee; op2val:0x20a0547;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:4455*0 + 3*11*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4455*0 + 3*11*FLEN/8, x4, x1, x2)

inst_1486:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x6d69ee and fs2 == 0 and fe2 == 0x04 and fm2 == 0x0a0547 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ced69ee; op2val:0x20a0547;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:4458*0 + 3*11*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4458*0 + 3*11*FLEN/8, x4, x1, x2)

inst_1487:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x6d69ee and fs2 == 0 and fe2 == 0x04 and fm2 == 0x0a0547 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ced69ee; op2val:0x20a0547;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:4461*0 + 3*11*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4461*0 + 3*11*FLEN/8, x4, x1, x2)

inst_1488:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x6f106c and fs2 == 1 and fe2 == 0x04 and fm2 == 0x09115b and fs3 == 1 and fe3 == 0x5e and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cef106c; op2val:0x8209115b;
op3val:0xaf000000; valaddr_reg:x3; val_offset:4464*0 + 3*11*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4464*0 + 3*11*FLEN/8, x4, x1, x2)

inst_1489:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x6f106c and fs2 == 1 and fe2 == 0x04 and fm2 == 0x09115b and fs3 == 1 and fe3 == 0x5e and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cef106c; op2val:0x8209115b;
op3val:0xaf000001; valaddr_reg:x3; val_offset:4467*0 + 3*11*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4467*0 + 3*11*FLEN/8, x4, x1, x2)

inst_1490:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x6f106c and fs2 == 1 and fe2 == 0x04 and fm2 == 0x09115b and fs3 == 1 and fe3 == 0x5e and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cef106c; op2val:0x8209115b;
op3val:0xaf000003; valaddr_reg:x3; val_offset:4470*0 + 3*11*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4470*0 + 3*11*FLEN/8, x4, x1, x2)

inst_1491:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x6f106c and fs2 == 1 and fe2 == 0x04 and fm2 == 0x09115b and fs3 == 1 and fe3 == 0x5e and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cef106c; op2val:0x8209115b;
op3val:0xaf000007; valaddr_reg:x3; val_offset:4473*0 + 3*11*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4473*0 + 3*11*FLEN/8, x4, x1, x2)

inst_1492:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x6f106c and fs2 == 1 and fe2 == 0x04 and fm2 == 0x09115b and fs3 == 1 and fe3 == 0x5e and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cef106c; op2val:0x8209115b;
op3val:0xaf00000f; valaddr_reg:x3; val_offset:4476*0 + 3*11*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4476*0 + 3*11*FLEN/8, x4, x1, x2)

inst_1493:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x6f106c and fs2 == 1 and fe2 == 0x04 and fm2 == 0x09115b and fs3 == 1 and fe3 == 0x5e and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cef106c; op2val:0x8209115b;
op3val:0xaf00001f; valaddr_reg:x3; val_offset:4479*0 + 3*11*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4479*0 + 3*11*FLEN/8, x4, x1, x2)

inst_1494:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x6f106c and fs2 == 1 and fe2 == 0x04 and fm2 == 0x09115b and fs3 == 1 and fe3 == 0x5e and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cef106c; op2val:0x8209115b;
op3val:0xaf00003f; valaddr_reg:x3; val_offset:4482*0 + 3*11*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4482*0 + 3*11*FLEN/8, x4, x1, x2)

inst_1495:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x6f106c and fs2 == 1 and fe2 == 0x04 and fm2 == 0x09115b and fs3 == 1 and fe3 == 0x5e and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cef106c; op2val:0x8209115b;
op3val:0xaf00007f; valaddr_reg:x3; val_offset:4485*0 + 3*11*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4485*0 + 3*11*FLEN/8, x4, x1, x2)

inst_1496:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x6f106c and fs2 == 1 and fe2 == 0x04 and fm2 == 0x09115b and fs3 == 1 and fe3 == 0x5e and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cef106c; op2val:0x8209115b;
op3val:0xaf0000ff; valaddr_reg:x3; val_offset:4488*0 + 3*11*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4488*0 + 3*11*FLEN/8, x4, x1, x2)

inst_1497:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x6f106c and fs2 == 1 and fe2 == 0x04 and fm2 == 0x09115b and fs3 == 1 and fe3 == 0x5e and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cef106c; op2val:0x8209115b;
op3val:0xaf0001ff; valaddr_reg:x3; val_offset:4491*0 + 3*11*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4491*0 + 3*11*FLEN/8, x4, x1, x2)

inst_1498:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x6f106c and fs2 == 1 and fe2 == 0x04 and fm2 == 0x09115b and fs3 == 1 and fe3 == 0x5e and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cef106c; op2val:0x8209115b;
op3val:0xaf0003ff; valaddr_reg:x3; val_offset:4494*0 + 3*11*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4494*0 + 3*11*FLEN/8, x4, x1, x2)

inst_1499:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x6f106c and fs2 == 1 and fe2 == 0x04 and fm2 == 0x09115b and fs3 == 1 and fe3 == 0x5e and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cef106c; op2val:0x8209115b;
op3val:0xaf0007ff; valaddr_reg:x3; val_offset:4497*0 + 3*11*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4497*0 + 3*11*FLEN/8, x4, x1, x2)

inst_1500:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x6f106c and fs2 == 1 and fe2 == 0x04 and fm2 == 0x09115b and fs3 == 1 and fe3 == 0x5e and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cef106c; op2val:0x8209115b;
op3val:0xaf000fff; valaddr_reg:x3; val_offset:4500*0 + 3*11*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4500*0 + 3*11*FLEN/8, x4, x1, x2)

inst_1501:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x6f106c and fs2 == 1 and fe2 == 0x04 and fm2 == 0x09115b and fs3 == 1 and fe3 == 0x5e and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cef106c; op2val:0x8209115b;
op3val:0xaf001fff; valaddr_reg:x3; val_offset:4503*0 + 3*11*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4503*0 + 3*11*FLEN/8, x4, x1, x2)

inst_1502:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x6f106c and fs2 == 1 and fe2 == 0x04 and fm2 == 0x09115b and fs3 == 1 and fe3 == 0x5e and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cef106c; op2val:0x8209115b;
op3val:0xaf003fff; valaddr_reg:x3; val_offset:4506*0 + 3*11*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4506*0 + 3*11*FLEN/8, x4, x1, x2)

inst_1503:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x6f106c and fs2 == 1 and fe2 == 0x04 and fm2 == 0x09115b and fs3 == 1 and fe3 == 0x5e and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cef106c; op2val:0x8209115b;
op3val:0xaf007fff; valaddr_reg:x3; val_offset:4509*0 + 3*11*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4509*0 + 3*11*FLEN/8, x4, x1, x2)

inst_1504:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x6f106c and fs2 == 1 and fe2 == 0x04 and fm2 == 0x09115b and fs3 == 1 and fe3 == 0x5e and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cef106c; op2val:0x8209115b;
op3val:0xaf00ffff; valaddr_reg:x3; val_offset:4512*0 + 3*11*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4512*0 + 3*11*FLEN/8, x4, x1, x2)

inst_1505:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x6f106c and fs2 == 1 and fe2 == 0x04 and fm2 == 0x09115b and fs3 == 1 and fe3 == 0x5e and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cef106c; op2val:0x8209115b;
op3val:0xaf01ffff; valaddr_reg:x3; val_offset:4515*0 + 3*11*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4515*0 + 3*11*FLEN/8, x4, x1, x2)

inst_1506:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x6f106c and fs2 == 1 and fe2 == 0x04 and fm2 == 0x09115b and fs3 == 1 and fe3 == 0x5e and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cef106c; op2val:0x8209115b;
op3val:0xaf03ffff; valaddr_reg:x3; val_offset:4518*0 + 3*11*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4518*0 + 3*11*FLEN/8, x4, x1, x2)

inst_1507:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x6f106c and fs2 == 1 and fe2 == 0x04 and fm2 == 0x09115b and fs3 == 1 and fe3 == 0x5e and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cef106c; op2val:0x8209115b;
op3val:0xaf07ffff; valaddr_reg:x3; val_offset:4521*0 + 3*11*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4521*0 + 3*11*FLEN/8, x4, x1, x2)

inst_1508:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x6f106c and fs2 == 1 and fe2 == 0x04 and fm2 == 0x09115b and fs3 == 1 and fe3 == 0x5e and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cef106c; op2val:0x8209115b;
op3val:0xaf0fffff; valaddr_reg:x3; val_offset:4524*0 + 3*11*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4524*0 + 3*11*FLEN/8, x4, x1, x2)

inst_1509:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x6f106c and fs2 == 1 and fe2 == 0x04 and fm2 == 0x09115b and fs3 == 1 and fe3 == 0x5e and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cef106c; op2val:0x8209115b;
op3val:0xaf1fffff; valaddr_reg:x3; val_offset:4527*0 + 3*11*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4527*0 + 3*11*FLEN/8, x4, x1, x2)

inst_1510:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x6f106c and fs2 == 1 and fe2 == 0x04 and fm2 == 0x09115b and fs3 == 1 and fe3 == 0x5e and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cef106c; op2val:0x8209115b;
op3val:0xaf3fffff; valaddr_reg:x3; val_offset:4530*0 + 3*11*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4530*0 + 3*11*FLEN/8, x4, x1, x2)

inst_1511:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x6f106c and fs2 == 1 and fe2 == 0x04 and fm2 == 0x09115b and fs3 == 1 and fe3 == 0x5e and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cef106c; op2val:0x8209115b;
op3val:0xaf400000; valaddr_reg:x3; val_offset:4533*0 + 3*11*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4533*0 + 3*11*FLEN/8, x4, x1, x2)

inst_1512:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x6f106c and fs2 == 1 and fe2 == 0x04 and fm2 == 0x09115b and fs3 == 1 and fe3 == 0x5e and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cef106c; op2val:0x8209115b;
op3val:0xaf600000; valaddr_reg:x3; val_offset:4536*0 + 3*11*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4536*0 + 3*11*FLEN/8, x4, x1, x2)

inst_1513:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x6f106c and fs2 == 1 and fe2 == 0x04 and fm2 == 0x09115b and fs3 == 1 and fe3 == 0x5e and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cef106c; op2val:0x8209115b;
op3val:0xaf700000; valaddr_reg:x3; val_offset:4539*0 + 3*11*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4539*0 + 3*11*FLEN/8, x4, x1, x2)

inst_1514:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x6f106c and fs2 == 1 and fe2 == 0x04 and fm2 == 0x09115b and fs3 == 1 and fe3 == 0x5e and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cef106c; op2val:0x8209115b;
op3val:0xaf780000; valaddr_reg:x3; val_offset:4542*0 + 3*11*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4542*0 + 3*11*FLEN/8, x4, x1, x2)

inst_1515:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x6f106c and fs2 == 1 and fe2 == 0x04 and fm2 == 0x09115b and fs3 == 1 and fe3 == 0x5e and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cef106c; op2val:0x8209115b;
op3val:0xaf7c0000; valaddr_reg:x3; val_offset:4545*0 + 3*11*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4545*0 + 3*11*FLEN/8, x4, x1, x2)

inst_1516:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x6f106c and fs2 == 1 and fe2 == 0x04 and fm2 == 0x09115b and fs3 == 1 and fe3 == 0x5e and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cef106c; op2val:0x8209115b;
op3val:0xaf7e0000; valaddr_reg:x3; val_offset:4548*0 + 3*11*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4548*0 + 3*11*FLEN/8, x4, x1, x2)

inst_1517:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x6f106c and fs2 == 1 and fe2 == 0x04 and fm2 == 0x09115b and fs3 == 1 and fe3 == 0x5e and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cef106c; op2val:0x8209115b;
op3val:0xaf7f0000; valaddr_reg:x3; val_offset:4551*0 + 3*11*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4551*0 + 3*11*FLEN/8, x4, x1, x2)

inst_1518:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x6f106c and fs2 == 1 and fe2 == 0x04 and fm2 == 0x09115b and fs3 == 1 and fe3 == 0x5e and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cef106c; op2val:0x8209115b;
op3val:0xaf7f8000; valaddr_reg:x3; val_offset:4554*0 + 3*11*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4554*0 + 3*11*FLEN/8, x4, x1, x2)

inst_1519:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x6f106c and fs2 == 1 and fe2 == 0x04 and fm2 == 0x09115b and fs3 == 1 and fe3 == 0x5e and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cef106c; op2val:0x8209115b;
op3val:0xaf7fc000; valaddr_reg:x3; val_offset:4557*0 + 3*11*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4557*0 + 3*11*FLEN/8, x4, x1, x2)

inst_1520:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x6f106c and fs2 == 1 and fe2 == 0x04 and fm2 == 0x09115b and fs3 == 1 and fe3 == 0x5e and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cef106c; op2val:0x8209115b;
op3val:0xaf7fe000; valaddr_reg:x3; val_offset:4560*0 + 3*11*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4560*0 + 3*11*FLEN/8, x4, x1, x2)

inst_1521:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x6f106c and fs2 == 1 and fe2 == 0x04 and fm2 == 0x09115b and fs3 == 1 and fe3 == 0x5e and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cef106c; op2val:0x8209115b;
op3val:0xaf7ff000; valaddr_reg:x3; val_offset:4563*0 + 3*11*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4563*0 + 3*11*FLEN/8, x4, x1, x2)

inst_1522:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x6f106c and fs2 == 1 and fe2 == 0x04 and fm2 == 0x09115b and fs3 == 1 and fe3 == 0x5e and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cef106c; op2val:0x8209115b;
op3val:0xaf7ff800; valaddr_reg:x3; val_offset:4566*0 + 3*11*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4566*0 + 3*11*FLEN/8, x4, x1, x2)

inst_1523:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x6f106c and fs2 == 1 and fe2 == 0x04 and fm2 == 0x09115b and fs3 == 1 and fe3 == 0x5e and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cef106c; op2val:0x8209115b;
op3val:0xaf7ffc00; valaddr_reg:x3; val_offset:4569*0 + 3*11*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4569*0 + 3*11*FLEN/8, x4, x1, x2)

inst_1524:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x6f106c and fs2 == 1 and fe2 == 0x04 and fm2 == 0x09115b and fs3 == 1 and fe3 == 0x5e and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cef106c; op2val:0x8209115b;
op3val:0xaf7ffe00; valaddr_reg:x3; val_offset:4572*0 + 3*11*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4572*0 + 3*11*FLEN/8, x4, x1, x2)

inst_1525:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x6f106c and fs2 == 1 and fe2 == 0x04 and fm2 == 0x09115b and fs3 == 1 and fe3 == 0x5e and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cef106c; op2val:0x8209115b;
op3val:0xaf7fff00; valaddr_reg:x3; val_offset:4575*0 + 3*11*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4575*0 + 3*11*FLEN/8, x4, x1, x2)

inst_1526:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x6f106c and fs2 == 1 and fe2 == 0x04 and fm2 == 0x09115b and fs3 == 1 and fe3 == 0x5e and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cef106c; op2val:0x8209115b;
op3val:0xaf7fff80; valaddr_reg:x3; val_offset:4578*0 + 3*11*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4578*0 + 3*11*FLEN/8, x4, x1, x2)

inst_1527:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x6f106c and fs2 == 1 and fe2 == 0x04 and fm2 == 0x09115b and fs3 == 1 and fe3 == 0x5e and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cef106c; op2val:0x8209115b;
op3val:0xaf7fffc0; valaddr_reg:x3; val_offset:4581*0 + 3*11*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4581*0 + 3*11*FLEN/8, x4, x1, x2)

inst_1528:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x6f106c and fs2 == 1 and fe2 == 0x04 and fm2 == 0x09115b and fs3 == 1 and fe3 == 0x5e and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cef106c; op2val:0x8209115b;
op3val:0xaf7fffe0; valaddr_reg:x3; val_offset:4584*0 + 3*11*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4584*0 + 3*11*FLEN/8, x4, x1, x2)

inst_1529:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x6f106c and fs2 == 1 and fe2 == 0x04 and fm2 == 0x09115b and fs3 == 1 and fe3 == 0x5e and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cef106c; op2val:0x8209115b;
op3val:0xaf7ffff0; valaddr_reg:x3; val_offset:4587*0 + 3*11*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4587*0 + 3*11*FLEN/8, x4, x1, x2)

inst_1530:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x6f106c and fs2 == 1 and fe2 == 0x04 and fm2 == 0x09115b and fs3 == 1 and fe3 == 0x5e and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cef106c; op2val:0x8209115b;
op3val:0xaf7ffff8; valaddr_reg:x3; val_offset:4590*0 + 3*11*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4590*0 + 3*11*FLEN/8, x4, x1, x2)

inst_1531:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x6f106c and fs2 == 1 and fe2 == 0x04 and fm2 == 0x09115b and fs3 == 1 and fe3 == 0x5e and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cef106c; op2val:0x8209115b;
op3val:0xaf7ffffc; valaddr_reg:x3; val_offset:4593*0 + 3*11*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4593*0 + 3*11*FLEN/8, x4, x1, x2)

inst_1532:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x6f106c and fs2 == 1 and fe2 == 0x04 and fm2 == 0x09115b and fs3 == 1 and fe3 == 0x5e and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cef106c; op2val:0x8209115b;
op3val:0xaf7ffffe; valaddr_reg:x3; val_offset:4596*0 + 3*11*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4596*0 + 3*11*FLEN/8, x4, x1, x2)

inst_1533:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x6f106c and fs2 == 1 and fe2 == 0x04 and fm2 == 0x09115b and fs3 == 1 and fe3 == 0x5e and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cef106c; op2val:0x8209115b;
op3val:0xaf7fffff; valaddr_reg:x3; val_offset:4599*0 + 3*11*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4599*0 + 3*11*FLEN/8, x4, x1, x2)

inst_1534:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x6f106c and fs2 == 1 and fe2 == 0x04 and fm2 == 0x09115b and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cef106c; op2val:0x8209115b;
op3val:0xbf800001; valaddr_reg:x3; val_offset:4602*0 + 3*11*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4602*0 + 3*11*FLEN/8, x4, x1, x2)

inst_1535:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x6f106c and fs2 == 1 and fe2 == 0x04 and fm2 == 0x09115b and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cef106c; op2val:0x8209115b;
op3val:0xbf800003; valaddr_reg:x3; val_offset:4605*0 + 3*11*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4605*0 + 3*11*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2094843655,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388606,32,FLEN)
NAN_BOXED(2094843655,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(2094843655,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(2094843655,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388611,32,FLEN)
NAN_BOXED(2094843655,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388615,32,FLEN)
NAN_BOXED(2094843655,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(10066329,32,FLEN)
NAN_BOXED(2094843655,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(10785353,32,FLEN)
NAN_BOXED(2094843655,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(11744051,32,FLEN)
NAN_BOXED(2094843655,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(11983725,32,FLEN)
NAN_BOXED(2094843655,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(12303291,32,FLEN)
NAN_BOXED(2094843655,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(12862532,32,FLEN)
NAN_BOXED(2094843655,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(13421772,32,FLEN)
NAN_BOXED(2094843655,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(14380470,32,FLEN)
NAN_BOXED(2094843655,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(15099494,32,FLEN)
NAN_BOXED(2094843655,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(15578843,32,FLEN)
NAN_BOXED(2094843655,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777208,32,FLEN)
NAN_BOXED(2094843655,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777212,32,FLEN)
NAN_BOXED(2094843655,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777214,32,FLEN)
NAN_BOXED(2095933934,32,FLEN)
NAN_BOXED(34211143,32,FLEN)
NAN_BOXED(553648128,32,FLEN)
NAN_BOXED(2095933934,32,FLEN)
NAN_BOXED(34211143,32,FLEN)
NAN_BOXED(553648129,32,FLEN)
NAN_BOXED(2095933934,32,FLEN)
NAN_BOXED(34211143,32,FLEN)
NAN_BOXED(553648131,32,FLEN)
NAN_BOXED(2095933934,32,FLEN)
NAN_BOXED(34211143,32,FLEN)
NAN_BOXED(553648135,32,FLEN)
NAN_BOXED(2095933934,32,FLEN)
NAN_BOXED(34211143,32,FLEN)
NAN_BOXED(553648143,32,FLEN)
NAN_BOXED(2095933934,32,FLEN)
NAN_BOXED(34211143,32,FLEN)
NAN_BOXED(553648159,32,FLEN)
NAN_BOXED(2095933934,32,FLEN)
NAN_BOXED(34211143,32,FLEN)
NAN_BOXED(553648191,32,FLEN)
NAN_BOXED(2095933934,32,FLEN)
NAN_BOXED(34211143,32,FLEN)
NAN_BOXED(553648255,32,FLEN)
NAN_BOXED(2095933934,32,FLEN)
NAN_BOXED(34211143,32,FLEN)
NAN_BOXED(553648383,32,FLEN)
NAN_BOXED(2095933934,32,FLEN)
NAN_BOXED(34211143,32,FLEN)
NAN_BOXED(553648639,32,FLEN)
NAN_BOXED(2095933934,32,FLEN)
NAN_BOXED(34211143,32,FLEN)
NAN_BOXED(553649151,32,FLEN)
NAN_BOXED(2095933934,32,FLEN)
NAN_BOXED(34211143,32,FLEN)
NAN_BOXED(553650175,32,FLEN)
NAN_BOXED(2095933934,32,FLEN)
NAN_BOXED(34211143,32,FLEN)
NAN_BOXED(553652223,32,FLEN)
NAN_BOXED(2095933934,32,FLEN)
NAN_BOXED(34211143,32,FLEN)
NAN_BOXED(553656319,32,FLEN)
NAN_BOXED(2095933934,32,FLEN)
NAN_BOXED(34211143,32,FLEN)
NAN_BOXED(553664511,32,FLEN)
NAN_BOXED(2095933934,32,FLEN)
NAN_BOXED(34211143,32,FLEN)
NAN_BOXED(553680895,32,FLEN)
NAN_BOXED(2095933934,32,FLEN)
NAN_BOXED(34211143,32,FLEN)
NAN_BOXED(553713663,32,FLEN)
NAN_BOXED(2095933934,32,FLEN)
NAN_BOXED(34211143,32,FLEN)
NAN_BOXED(553779199,32,FLEN)
NAN_BOXED(2095933934,32,FLEN)
NAN_BOXED(34211143,32,FLEN)
NAN_BOXED(553910271,32,FLEN)
NAN_BOXED(2095933934,32,FLEN)
NAN_BOXED(34211143,32,FLEN)
NAN_BOXED(554172415,32,FLEN)
NAN_BOXED(2095933934,32,FLEN)
NAN_BOXED(34211143,32,FLEN)
NAN_BOXED(554696703,32,FLEN)
NAN_BOXED(2095933934,32,FLEN)
NAN_BOXED(34211143,32,FLEN)
NAN_BOXED(555745279,32,FLEN)
NAN_BOXED(2095933934,32,FLEN)
NAN_BOXED(34211143,32,FLEN)
NAN_BOXED(557842431,32,FLEN)
NAN_BOXED(2095933934,32,FLEN)
NAN_BOXED(34211143,32,FLEN)
NAN_BOXED(557842432,32,FLEN)
NAN_BOXED(2095933934,32,FLEN)
NAN_BOXED(34211143,32,FLEN)
NAN_BOXED(559939584,32,FLEN)
NAN_BOXED(2095933934,32,FLEN)
NAN_BOXED(34211143,32,FLEN)
NAN_BOXED(560988160,32,FLEN)
NAN_BOXED(2095933934,32,FLEN)
NAN_BOXED(34211143,32,FLEN)
NAN_BOXED(561512448,32,FLEN)
NAN_BOXED(2095933934,32,FLEN)
NAN_BOXED(34211143,32,FLEN)
NAN_BOXED(561774592,32,FLEN)
NAN_BOXED(2095933934,32,FLEN)
NAN_BOXED(34211143,32,FLEN)
NAN_BOXED(561905664,32,FLEN)
NAN_BOXED(2095933934,32,FLEN)
NAN_BOXED(34211143,32,FLEN)
NAN_BOXED(561971200,32,FLEN)
NAN_BOXED(2095933934,32,FLEN)
NAN_BOXED(34211143,32,FLEN)
NAN_BOXED(562003968,32,FLEN)
NAN_BOXED(2095933934,32,FLEN)
NAN_BOXED(34211143,32,FLEN)
NAN_BOXED(562020352,32,FLEN)
NAN_BOXED(2095933934,32,FLEN)
NAN_BOXED(34211143,32,FLEN)
NAN_BOXED(562028544,32,FLEN)
NAN_BOXED(2095933934,32,FLEN)
NAN_BOXED(34211143,32,FLEN)
NAN_BOXED(562032640,32,FLEN)
NAN_BOXED(2095933934,32,FLEN)
NAN_BOXED(34211143,32,FLEN)
NAN_BOXED(562034688,32,FLEN)
NAN_BOXED(2095933934,32,FLEN)
NAN_BOXED(34211143,32,FLEN)
NAN_BOXED(562035712,32,FLEN)
NAN_BOXED(2095933934,32,FLEN)
NAN_BOXED(34211143,32,FLEN)
NAN_BOXED(562036224,32,FLEN)
NAN_BOXED(2095933934,32,FLEN)
NAN_BOXED(34211143,32,FLEN)
NAN_BOXED(562036480,32,FLEN)
NAN_BOXED(2095933934,32,FLEN)
NAN_BOXED(34211143,32,FLEN)
NAN_BOXED(562036608,32,FLEN)
NAN_BOXED(2095933934,32,FLEN)
NAN_BOXED(34211143,32,FLEN)
NAN_BOXED(562036672,32,FLEN)
NAN_BOXED(2095933934,32,FLEN)
NAN_BOXED(34211143,32,FLEN)
NAN_BOXED(562036704,32,FLEN)
NAN_BOXED(2095933934,32,FLEN)
NAN_BOXED(34211143,32,FLEN)
NAN_BOXED(562036720,32,FLEN)
NAN_BOXED(2095933934,32,FLEN)
NAN_BOXED(34211143,32,FLEN)
NAN_BOXED(562036728,32,FLEN)
NAN_BOXED(2095933934,32,FLEN)
NAN_BOXED(34211143,32,FLEN)
NAN_BOXED(562036732,32,FLEN)
NAN_BOXED(2095933934,32,FLEN)
NAN_BOXED(34211143,32,FLEN)
NAN_BOXED(562036734,32,FLEN)
NAN_BOXED(2095933934,32,FLEN)
NAN_BOXED(34211143,32,FLEN)
NAN_BOXED(562036735,32,FLEN)
NAN_BOXED(2095933934,32,FLEN)
NAN_BOXED(34211143,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2095933934,32,FLEN)
NAN_BOXED(34211143,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2095933934,32,FLEN)
NAN_BOXED(34211143,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2095933934,32,FLEN)
NAN_BOXED(34211143,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2095933934,32,FLEN)
NAN_BOXED(34211143,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2095933934,32,FLEN)
NAN_BOXED(34211143,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2095933934,32,FLEN)
NAN_BOXED(34211143,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2095933934,32,FLEN)
NAN_BOXED(34211143,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2095933934,32,FLEN)
NAN_BOXED(34211143,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2095933934,32,FLEN)
NAN_BOXED(34211143,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2095933934,32,FLEN)
NAN_BOXED(34211143,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2095933934,32,FLEN)
NAN_BOXED(34211143,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2095933934,32,FLEN)
NAN_BOXED(34211143,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2095933934,32,FLEN)
NAN_BOXED(34211143,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2095933934,32,FLEN)
NAN_BOXED(34211143,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2095933934,32,FLEN)
NAN_BOXED(34211143,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2096042092,32,FLEN)
NAN_BOXED(2181632347,32,FLEN)
NAN_BOXED(2936012800,32,FLEN)
NAN_BOXED(2096042092,32,FLEN)
NAN_BOXED(2181632347,32,FLEN)
NAN_BOXED(2936012801,32,FLEN)
NAN_BOXED(2096042092,32,FLEN)
NAN_BOXED(2181632347,32,FLEN)
NAN_BOXED(2936012803,32,FLEN)
NAN_BOXED(2096042092,32,FLEN)
NAN_BOXED(2181632347,32,FLEN)
NAN_BOXED(2936012807,32,FLEN)
NAN_BOXED(2096042092,32,FLEN)
NAN_BOXED(2181632347,32,FLEN)
NAN_BOXED(2936012815,32,FLEN)
NAN_BOXED(2096042092,32,FLEN)
NAN_BOXED(2181632347,32,FLEN)
NAN_BOXED(2936012831,32,FLEN)
NAN_BOXED(2096042092,32,FLEN)
NAN_BOXED(2181632347,32,FLEN)
NAN_BOXED(2936012863,32,FLEN)
NAN_BOXED(2096042092,32,FLEN)
NAN_BOXED(2181632347,32,FLEN)
NAN_BOXED(2936012927,32,FLEN)
NAN_BOXED(2096042092,32,FLEN)
NAN_BOXED(2181632347,32,FLEN)
NAN_BOXED(2936013055,32,FLEN)
NAN_BOXED(2096042092,32,FLEN)
NAN_BOXED(2181632347,32,FLEN)
NAN_BOXED(2936013311,32,FLEN)
NAN_BOXED(2096042092,32,FLEN)
NAN_BOXED(2181632347,32,FLEN)
NAN_BOXED(2936013823,32,FLEN)
NAN_BOXED(2096042092,32,FLEN)
NAN_BOXED(2181632347,32,FLEN)
NAN_BOXED(2936014847,32,FLEN)
NAN_BOXED(2096042092,32,FLEN)
NAN_BOXED(2181632347,32,FLEN)
NAN_BOXED(2936016895,32,FLEN)
NAN_BOXED(2096042092,32,FLEN)
NAN_BOXED(2181632347,32,FLEN)
NAN_BOXED(2936020991,32,FLEN)
NAN_BOXED(2096042092,32,FLEN)
NAN_BOXED(2181632347,32,FLEN)
NAN_BOXED(2936029183,32,FLEN)
NAN_BOXED(2096042092,32,FLEN)
NAN_BOXED(2181632347,32,FLEN)
NAN_BOXED(2936045567,32,FLEN)
NAN_BOXED(2096042092,32,FLEN)
NAN_BOXED(2181632347,32,FLEN)
NAN_BOXED(2936078335,32,FLEN)
NAN_BOXED(2096042092,32,FLEN)
NAN_BOXED(2181632347,32,FLEN)
NAN_BOXED(2936143871,32,FLEN)
NAN_BOXED(2096042092,32,FLEN)
NAN_BOXED(2181632347,32,FLEN)
NAN_BOXED(2936274943,32,FLEN)
NAN_BOXED(2096042092,32,FLEN)
NAN_BOXED(2181632347,32,FLEN)
NAN_BOXED(2936537087,32,FLEN)
NAN_BOXED(2096042092,32,FLEN)
NAN_BOXED(2181632347,32,FLEN)
NAN_BOXED(2937061375,32,FLEN)
NAN_BOXED(2096042092,32,FLEN)
NAN_BOXED(2181632347,32,FLEN)
NAN_BOXED(2938109951,32,FLEN)
NAN_BOXED(2096042092,32,FLEN)
NAN_BOXED(2181632347,32,FLEN)
NAN_BOXED(2940207103,32,FLEN)
NAN_BOXED(2096042092,32,FLEN)
NAN_BOXED(2181632347,32,FLEN)
NAN_BOXED(2940207104,32,FLEN)
NAN_BOXED(2096042092,32,FLEN)
NAN_BOXED(2181632347,32,FLEN)
NAN_BOXED(2942304256,32,FLEN)
NAN_BOXED(2096042092,32,FLEN)
NAN_BOXED(2181632347,32,FLEN)
NAN_BOXED(2943352832,32,FLEN)
NAN_BOXED(2096042092,32,FLEN)
NAN_BOXED(2181632347,32,FLEN)
NAN_BOXED(2943877120,32,FLEN)
NAN_BOXED(2096042092,32,FLEN)
NAN_BOXED(2181632347,32,FLEN)
NAN_BOXED(2944139264,32,FLEN)
NAN_BOXED(2096042092,32,FLEN)
NAN_BOXED(2181632347,32,FLEN)
NAN_BOXED(2944270336,32,FLEN)
NAN_BOXED(2096042092,32,FLEN)
NAN_BOXED(2181632347,32,FLEN)
NAN_BOXED(2944335872,32,FLEN)
NAN_BOXED(2096042092,32,FLEN)
NAN_BOXED(2181632347,32,FLEN)
NAN_BOXED(2944368640,32,FLEN)
NAN_BOXED(2096042092,32,FLEN)
NAN_BOXED(2181632347,32,FLEN)
NAN_BOXED(2944385024,32,FLEN)
NAN_BOXED(2096042092,32,FLEN)
NAN_BOXED(2181632347,32,FLEN)
NAN_BOXED(2944393216,32,FLEN)
NAN_BOXED(2096042092,32,FLEN)
NAN_BOXED(2181632347,32,FLEN)
NAN_BOXED(2944397312,32,FLEN)
NAN_BOXED(2096042092,32,FLEN)
NAN_BOXED(2181632347,32,FLEN)
NAN_BOXED(2944399360,32,FLEN)
NAN_BOXED(2096042092,32,FLEN)
NAN_BOXED(2181632347,32,FLEN)
NAN_BOXED(2944400384,32,FLEN)
NAN_BOXED(2096042092,32,FLEN)
NAN_BOXED(2181632347,32,FLEN)
NAN_BOXED(2944400896,32,FLEN)
NAN_BOXED(2096042092,32,FLEN)
NAN_BOXED(2181632347,32,FLEN)
NAN_BOXED(2944401152,32,FLEN)
NAN_BOXED(2096042092,32,FLEN)
NAN_BOXED(2181632347,32,FLEN)
NAN_BOXED(2944401280,32,FLEN)
NAN_BOXED(2096042092,32,FLEN)
NAN_BOXED(2181632347,32,FLEN)
NAN_BOXED(2944401344,32,FLEN)
NAN_BOXED(2096042092,32,FLEN)
NAN_BOXED(2181632347,32,FLEN)
NAN_BOXED(2944401376,32,FLEN)
NAN_BOXED(2096042092,32,FLEN)
NAN_BOXED(2181632347,32,FLEN)
NAN_BOXED(2944401392,32,FLEN)
NAN_BOXED(2096042092,32,FLEN)
NAN_BOXED(2181632347,32,FLEN)
NAN_BOXED(2944401400,32,FLEN)
NAN_BOXED(2096042092,32,FLEN)
NAN_BOXED(2181632347,32,FLEN)
NAN_BOXED(2944401404,32,FLEN)
NAN_BOXED(2096042092,32,FLEN)
NAN_BOXED(2181632347,32,FLEN)
NAN_BOXED(2944401406,32,FLEN)
NAN_BOXED(2096042092,32,FLEN)
NAN_BOXED(2181632347,32,FLEN)
NAN_BOXED(2944401407,32,FLEN)
NAN_BOXED(2096042092,32,FLEN)
NAN_BOXED(2181632347,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2096042092,32,FLEN)
NAN_BOXED(2181632347,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
