
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:17:59 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_15616:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1ad123 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9ad123; op2val:0x0;
op3val:0x503ffff; valaddr_reg:x3; val_offset:46848*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46848*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15617:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1ad123 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9ad123; op2val:0x0;
op3val:0x507ffff; valaddr_reg:x3; val_offset:46851*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46851*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15618:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1ad123 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9ad123; op2val:0x0;
op3val:0x50fffff; valaddr_reg:x3; val_offset:46854*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46854*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15619:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1ad123 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9ad123; op2val:0x0;
op3val:0x51fffff; valaddr_reg:x3; val_offset:46857*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46857*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15620:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1ad123 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9ad123; op2val:0x0;
op3val:0x53fffff; valaddr_reg:x3; val_offset:46860*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46860*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15621:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1ad123 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9ad123; op2val:0x0;
op3val:0x5400000; valaddr_reg:x3; val_offset:46863*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46863*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15622:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1ad123 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9ad123; op2val:0x0;
op3val:0x5600000; valaddr_reg:x3; val_offset:46866*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46866*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15623:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1ad123 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9ad123; op2val:0x0;
op3val:0x5700000; valaddr_reg:x3; val_offset:46869*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46869*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15624:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1ad123 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9ad123; op2val:0x0;
op3val:0x5780000; valaddr_reg:x3; val_offset:46872*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46872*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15625:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1ad123 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9ad123; op2val:0x0;
op3val:0x57c0000; valaddr_reg:x3; val_offset:46875*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46875*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15626:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1ad123 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9ad123; op2val:0x0;
op3val:0x57e0000; valaddr_reg:x3; val_offset:46878*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46878*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15627:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1ad123 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9ad123; op2val:0x0;
op3val:0x57f0000; valaddr_reg:x3; val_offset:46881*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46881*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15628:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1ad123 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9ad123; op2val:0x0;
op3val:0x57f8000; valaddr_reg:x3; val_offset:46884*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46884*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15629:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1ad123 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9ad123; op2val:0x0;
op3val:0x57fc000; valaddr_reg:x3; val_offset:46887*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46887*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15630:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1ad123 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9ad123; op2val:0x0;
op3val:0x57fe000; valaddr_reg:x3; val_offset:46890*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46890*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15631:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1ad123 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9ad123; op2val:0x0;
op3val:0x57ff000; valaddr_reg:x3; val_offset:46893*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46893*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15632:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1ad123 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9ad123; op2val:0x0;
op3val:0x57ff800; valaddr_reg:x3; val_offset:46896*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46896*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15633:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1ad123 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9ad123; op2val:0x0;
op3val:0x57ffc00; valaddr_reg:x3; val_offset:46899*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46899*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15634:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1ad123 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9ad123; op2val:0x0;
op3val:0x57ffe00; valaddr_reg:x3; val_offset:46902*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46902*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15635:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1ad123 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9ad123; op2val:0x0;
op3val:0x57fff00; valaddr_reg:x3; val_offset:46905*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46905*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15636:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1ad123 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9ad123; op2val:0x0;
op3val:0x57fff80; valaddr_reg:x3; val_offset:46908*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46908*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15637:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1ad123 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9ad123; op2val:0x0;
op3val:0x57fffc0; valaddr_reg:x3; val_offset:46911*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46911*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15638:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1ad123 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9ad123; op2val:0x0;
op3val:0x57fffe0; valaddr_reg:x3; val_offset:46914*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46914*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15639:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1ad123 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9ad123; op2val:0x0;
op3val:0x57ffff0; valaddr_reg:x3; val_offset:46917*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46917*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15640:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1ad123 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9ad123; op2val:0x0;
op3val:0x57ffff8; valaddr_reg:x3; val_offset:46920*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46920*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15641:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1ad123 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9ad123; op2val:0x0;
op3val:0x57ffffc; valaddr_reg:x3; val_offset:46923*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46923*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15642:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1ad123 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9ad123; op2val:0x0;
op3val:0x57ffffe; valaddr_reg:x3; val_offset:46926*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46926*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15643:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1ad123 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9ad123; op2val:0x0;
op3val:0x57fffff; valaddr_reg:x3; val_offset:46929*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46929*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15644:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1ce997 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x50d46d and fs3 == 1 and fe3 == 0x60 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9ce997; op2val:0xc050d46d;
op3val:0xb0000000; valaddr_reg:x3; val_offset:46932*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46932*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15645:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1ce997 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x50d46d and fs3 == 1 and fe3 == 0x60 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9ce997; op2val:0xc050d46d;
op3val:0xb0000001; valaddr_reg:x3; val_offset:46935*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46935*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15646:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1ce997 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x50d46d and fs3 == 1 and fe3 == 0x60 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9ce997; op2val:0xc050d46d;
op3val:0xb0000003; valaddr_reg:x3; val_offset:46938*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46938*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15647:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1ce997 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x50d46d and fs3 == 1 and fe3 == 0x60 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9ce997; op2val:0xc050d46d;
op3val:0xb0000007; valaddr_reg:x3; val_offset:46941*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46941*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15648:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1ce997 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x50d46d and fs3 == 1 and fe3 == 0x60 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9ce997; op2val:0xc050d46d;
op3val:0xb000000f; valaddr_reg:x3; val_offset:46944*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46944*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15649:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1ce997 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x50d46d and fs3 == 1 and fe3 == 0x60 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9ce997; op2val:0xc050d46d;
op3val:0xb000001f; valaddr_reg:x3; val_offset:46947*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46947*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15650:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1ce997 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x50d46d and fs3 == 1 and fe3 == 0x60 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9ce997; op2val:0xc050d46d;
op3val:0xb000003f; valaddr_reg:x3; val_offset:46950*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46950*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15651:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1ce997 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x50d46d and fs3 == 1 and fe3 == 0x60 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9ce997; op2val:0xc050d46d;
op3val:0xb000007f; valaddr_reg:x3; val_offset:46953*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46953*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15652:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1ce997 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x50d46d and fs3 == 1 and fe3 == 0x60 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9ce997; op2val:0xc050d46d;
op3val:0xb00000ff; valaddr_reg:x3; val_offset:46956*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46956*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15653:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1ce997 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x50d46d and fs3 == 1 and fe3 == 0x60 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9ce997; op2val:0xc050d46d;
op3val:0xb00001ff; valaddr_reg:x3; val_offset:46959*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46959*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15654:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1ce997 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x50d46d and fs3 == 1 and fe3 == 0x60 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9ce997; op2val:0xc050d46d;
op3val:0xb00003ff; valaddr_reg:x3; val_offset:46962*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46962*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15655:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1ce997 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x50d46d and fs3 == 1 and fe3 == 0x60 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9ce997; op2val:0xc050d46d;
op3val:0xb00007ff; valaddr_reg:x3; val_offset:46965*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46965*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15656:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1ce997 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x50d46d and fs3 == 1 and fe3 == 0x60 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9ce997; op2val:0xc050d46d;
op3val:0xb0000fff; valaddr_reg:x3; val_offset:46968*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46968*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15657:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1ce997 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x50d46d and fs3 == 1 and fe3 == 0x60 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9ce997; op2val:0xc050d46d;
op3val:0xb0001fff; valaddr_reg:x3; val_offset:46971*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46971*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15658:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1ce997 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x50d46d and fs3 == 1 and fe3 == 0x60 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9ce997; op2val:0xc050d46d;
op3val:0xb0003fff; valaddr_reg:x3; val_offset:46974*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46974*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15659:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1ce997 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x50d46d and fs3 == 1 and fe3 == 0x60 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9ce997; op2val:0xc050d46d;
op3val:0xb0007fff; valaddr_reg:x3; val_offset:46977*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46977*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15660:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1ce997 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x50d46d and fs3 == 1 and fe3 == 0x60 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9ce997; op2val:0xc050d46d;
op3val:0xb000ffff; valaddr_reg:x3; val_offset:46980*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46980*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15661:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1ce997 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x50d46d and fs3 == 1 and fe3 == 0x60 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9ce997; op2val:0xc050d46d;
op3val:0xb001ffff; valaddr_reg:x3; val_offset:46983*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46983*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15662:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1ce997 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x50d46d and fs3 == 1 and fe3 == 0x60 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9ce997; op2val:0xc050d46d;
op3val:0xb003ffff; valaddr_reg:x3; val_offset:46986*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46986*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15663:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1ce997 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x50d46d and fs3 == 1 and fe3 == 0x60 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9ce997; op2val:0xc050d46d;
op3val:0xb007ffff; valaddr_reg:x3; val_offset:46989*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46989*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15664:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1ce997 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x50d46d and fs3 == 1 and fe3 == 0x60 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9ce997; op2val:0xc050d46d;
op3val:0xb00fffff; valaddr_reg:x3; val_offset:46992*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46992*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15665:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1ce997 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x50d46d and fs3 == 1 and fe3 == 0x60 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9ce997; op2val:0xc050d46d;
op3val:0xb01fffff; valaddr_reg:x3; val_offset:46995*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46995*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15666:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1ce997 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x50d46d and fs3 == 1 and fe3 == 0x60 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9ce997; op2val:0xc050d46d;
op3val:0xb03fffff; valaddr_reg:x3; val_offset:46998*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46998*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15667:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1ce997 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x50d46d and fs3 == 1 and fe3 == 0x60 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9ce997; op2val:0xc050d46d;
op3val:0xb0400000; valaddr_reg:x3; val_offset:47001*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47001*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15668:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1ce997 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x50d46d and fs3 == 1 and fe3 == 0x60 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9ce997; op2val:0xc050d46d;
op3val:0xb0600000; valaddr_reg:x3; val_offset:47004*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47004*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15669:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1ce997 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x50d46d and fs3 == 1 and fe3 == 0x60 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9ce997; op2val:0xc050d46d;
op3val:0xb0700000; valaddr_reg:x3; val_offset:47007*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47007*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15670:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1ce997 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x50d46d and fs3 == 1 and fe3 == 0x60 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9ce997; op2val:0xc050d46d;
op3val:0xb0780000; valaddr_reg:x3; val_offset:47010*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47010*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15671:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1ce997 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x50d46d and fs3 == 1 and fe3 == 0x60 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9ce997; op2val:0xc050d46d;
op3val:0xb07c0000; valaddr_reg:x3; val_offset:47013*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47013*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15672:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1ce997 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x50d46d and fs3 == 1 and fe3 == 0x60 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9ce997; op2val:0xc050d46d;
op3val:0xb07e0000; valaddr_reg:x3; val_offset:47016*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47016*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15673:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1ce997 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x50d46d and fs3 == 1 and fe3 == 0x60 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9ce997; op2val:0xc050d46d;
op3val:0xb07f0000; valaddr_reg:x3; val_offset:47019*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47019*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15674:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1ce997 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x50d46d and fs3 == 1 and fe3 == 0x60 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9ce997; op2val:0xc050d46d;
op3val:0xb07f8000; valaddr_reg:x3; val_offset:47022*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47022*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15675:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1ce997 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x50d46d and fs3 == 1 and fe3 == 0x60 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9ce997; op2val:0xc050d46d;
op3val:0xb07fc000; valaddr_reg:x3; val_offset:47025*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47025*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15676:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1ce997 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x50d46d and fs3 == 1 and fe3 == 0x60 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9ce997; op2val:0xc050d46d;
op3val:0xb07fe000; valaddr_reg:x3; val_offset:47028*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47028*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15677:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1ce997 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x50d46d and fs3 == 1 and fe3 == 0x60 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9ce997; op2val:0xc050d46d;
op3val:0xb07ff000; valaddr_reg:x3; val_offset:47031*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47031*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15678:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1ce997 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x50d46d and fs3 == 1 and fe3 == 0x60 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9ce997; op2val:0xc050d46d;
op3val:0xb07ff800; valaddr_reg:x3; val_offset:47034*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47034*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15679:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1ce997 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x50d46d and fs3 == 1 and fe3 == 0x60 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9ce997; op2val:0xc050d46d;
op3val:0xb07ffc00; valaddr_reg:x3; val_offset:47037*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47037*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15680:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1ce997 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x50d46d and fs3 == 1 and fe3 == 0x60 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9ce997; op2val:0xc050d46d;
op3val:0xb07ffe00; valaddr_reg:x3; val_offset:47040*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47040*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15681:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1ce997 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x50d46d and fs3 == 1 and fe3 == 0x60 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9ce997; op2val:0xc050d46d;
op3val:0xb07fff00; valaddr_reg:x3; val_offset:47043*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47043*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15682:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1ce997 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x50d46d and fs3 == 1 and fe3 == 0x60 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9ce997; op2val:0xc050d46d;
op3val:0xb07fff80; valaddr_reg:x3; val_offset:47046*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47046*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15683:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1ce997 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x50d46d and fs3 == 1 and fe3 == 0x60 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9ce997; op2val:0xc050d46d;
op3val:0xb07fffc0; valaddr_reg:x3; val_offset:47049*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47049*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15684:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1ce997 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x50d46d and fs3 == 1 and fe3 == 0x60 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9ce997; op2val:0xc050d46d;
op3val:0xb07fffe0; valaddr_reg:x3; val_offset:47052*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47052*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15685:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1ce997 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x50d46d and fs3 == 1 and fe3 == 0x60 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9ce997; op2val:0xc050d46d;
op3val:0xb07ffff0; valaddr_reg:x3; val_offset:47055*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47055*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15686:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1ce997 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x50d46d and fs3 == 1 and fe3 == 0x60 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9ce997; op2val:0xc050d46d;
op3val:0xb07ffff8; valaddr_reg:x3; val_offset:47058*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47058*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15687:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1ce997 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x50d46d and fs3 == 1 and fe3 == 0x60 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9ce997; op2val:0xc050d46d;
op3val:0xb07ffffc; valaddr_reg:x3; val_offset:47061*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47061*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15688:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1ce997 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x50d46d and fs3 == 1 and fe3 == 0x60 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9ce997; op2val:0xc050d46d;
op3val:0xb07ffffe; valaddr_reg:x3; val_offset:47064*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47064*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15689:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1ce997 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x50d46d and fs3 == 1 and fe3 == 0x60 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9ce997; op2val:0xc050d46d;
op3val:0xb07fffff; valaddr_reg:x3; val_offset:47067*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47067*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15690:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1ce997 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x50d46d and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9ce997; op2val:0xc050d46d;
op3val:0xff000001; valaddr_reg:x3; val_offset:47070*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47070*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15691:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1ce997 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x50d46d and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9ce997; op2val:0xc050d46d;
op3val:0xff000003; valaddr_reg:x3; val_offset:47073*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47073*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15692:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1ce997 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x50d46d and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9ce997; op2val:0xc050d46d;
op3val:0xff000007; valaddr_reg:x3; val_offset:47076*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47076*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15693:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1ce997 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x50d46d and fs3 == 1 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9ce997; op2val:0xc050d46d;
op3val:0xff199999; valaddr_reg:x3; val_offset:47079*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47079*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15694:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1ce997 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x50d46d and fs3 == 1 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9ce997; op2val:0xc050d46d;
op3val:0xff249249; valaddr_reg:x3; val_offset:47082*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47082*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15695:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1ce997 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x50d46d and fs3 == 1 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9ce997; op2val:0xc050d46d;
op3val:0xff333333; valaddr_reg:x3; val_offset:47085*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47085*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15696:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1ce997 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x50d46d and fs3 == 1 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9ce997; op2val:0xc050d46d;
op3val:0xff36db6d; valaddr_reg:x3; val_offset:47088*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47088*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15697:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1ce997 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x50d46d and fs3 == 1 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9ce997; op2val:0xc050d46d;
op3val:0xff3bbbbb; valaddr_reg:x3; val_offset:47091*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47091*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15698:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1ce997 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x50d46d and fs3 == 1 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9ce997; op2val:0xc050d46d;
op3val:0xff444444; valaddr_reg:x3; val_offset:47094*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47094*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15699:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1ce997 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x50d46d and fs3 == 1 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9ce997; op2val:0xc050d46d;
op3val:0xff4ccccc; valaddr_reg:x3; val_offset:47097*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47097*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15700:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1ce997 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x50d46d and fs3 == 1 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9ce997; op2val:0xc050d46d;
op3val:0xff5b6db6; valaddr_reg:x3; val_offset:47100*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47100*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15701:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1ce997 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x50d46d and fs3 == 1 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9ce997; op2val:0xc050d46d;
op3val:0xff666666; valaddr_reg:x3; val_offset:47103*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47103*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15702:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1ce997 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x50d46d and fs3 == 1 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9ce997; op2val:0xc050d46d;
op3val:0xff6db6db; valaddr_reg:x3; val_offset:47106*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47106*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15703:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1ce997 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x50d46d and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9ce997; op2val:0xc050d46d;
op3val:0xff7ffff8; valaddr_reg:x3; val_offset:47109*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47109*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15704:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1ce997 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x50d46d and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9ce997; op2val:0xc050d46d;
op3val:0xff7ffffc; valaddr_reg:x3; val_offset:47112*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47112*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15705:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1ce997 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x50d46d and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9ce997; op2val:0xc050d46d;
op3val:0xff7ffffe; valaddr_reg:x3; val_offset:47115*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47115*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15706:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1de0b9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9de0b9; op2val:0x0;
op3val:0x800001; valaddr_reg:x3; val_offset:47118*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47118*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15707:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1de0b9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9de0b9; op2val:0x0;
op3val:0x800003; valaddr_reg:x3; val_offset:47121*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47121*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15708:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1de0b9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9de0b9; op2val:0x0;
op3val:0x800007; valaddr_reg:x3; val_offset:47124*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47124*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15709:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1de0b9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9de0b9; op2val:0x0;
op3val:0x999999; valaddr_reg:x3; val_offset:47127*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47127*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15710:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1de0b9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9de0b9; op2val:0x0;
op3val:0xa49249; valaddr_reg:x3; val_offset:47130*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47130*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15711:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1de0b9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9de0b9; op2val:0x0;
op3val:0xb33333; valaddr_reg:x3; val_offset:47133*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47133*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15712:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1de0b9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9de0b9; op2val:0x0;
op3val:0xb6db6d; valaddr_reg:x3; val_offset:47136*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47136*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15713:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1de0b9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9de0b9; op2val:0x0;
op3val:0xbbbbbb; valaddr_reg:x3; val_offset:47139*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47139*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15714:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1de0b9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9de0b9; op2val:0x0;
op3val:0xc44444; valaddr_reg:x3; val_offset:47142*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47142*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15715:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1de0b9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9de0b9; op2val:0x0;
op3val:0xcccccc; valaddr_reg:x3; val_offset:47145*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47145*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15716:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1de0b9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9de0b9; op2val:0x0;
op3val:0xdb6db6; valaddr_reg:x3; val_offset:47148*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47148*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15717:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1de0b9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9de0b9; op2val:0x0;
op3val:0xe66666; valaddr_reg:x3; val_offset:47151*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47151*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15718:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1de0b9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9de0b9; op2val:0x0;
op3val:0xedb6db; valaddr_reg:x3; val_offset:47154*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47154*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15719:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1de0b9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9de0b9; op2val:0x0;
op3val:0xfffff8; valaddr_reg:x3; val_offset:47157*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47157*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15720:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1de0b9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9de0b9; op2val:0x0;
op3val:0xfffffc; valaddr_reg:x3; val_offset:47160*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47160*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15721:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1de0b9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9de0b9; op2val:0x0;
op3val:0xfffffe; valaddr_reg:x3; val_offset:47163*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47163*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15722:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1de0b9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9de0b9; op2val:0x0;
op3val:0x4000000; valaddr_reg:x3; val_offset:47166*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47166*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15723:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1de0b9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9de0b9; op2val:0x0;
op3val:0x4000001; valaddr_reg:x3; val_offset:47169*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47169*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15724:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1de0b9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9de0b9; op2val:0x0;
op3val:0x4000003; valaddr_reg:x3; val_offset:47172*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47172*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15725:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1de0b9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9de0b9; op2val:0x0;
op3val:0x4000007; valaddr_reg:x3; val_offset:47175*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47175*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15726:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1de0b9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9de0b9; op2val:0x0;
op3val:0x400000f; valaddr_reg:x3; val_offset:47178*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47178*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15727:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1de0b9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9de0b9; op2val:0x0;
op3val:0x400001f; valaddr_reg:x3; val_offset:47181*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47181*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15728:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1de0b9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9de0b9; op2val:0x0;
op3val:0x400003f; valaddr_reg:x3; val_offset:47184*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47184*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15729:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1de0b9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9de0b9; op2val:0x0;
op3val:0x400007f; valaddr_reg:x3; val_offset:47187*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47187*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15730:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1de0b9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9de0b9; op2val:0x0;
op3val:0x40000ff; valaddr_reg:x3; val_offset:47190*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47190*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15731:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1de0b9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9de0b9; op2val:0x0;
op3val:0x40001ff; valaddr_reg:x3; val_offset:47193*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47193*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15732:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1de0b9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9de0b9; op2val:0x0;
op3val:0x40003ff; valaddr_reg:x3; val_offset:47196*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47196*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15733:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1de0b9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9de0b9; op2val:0x0;
op3val:0x40007ff; valaddr_reg:x3; val_offset:47199*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47199*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15734:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1de0b9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9de0b9; op2val:0x0;
op3val:0x4000fff; valaddr_reg:x3; val_offset:47202*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47202*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15735:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1de0b9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9de0b9; op2val:0x0;
op3val:0x4001fff; valaddr_reg:x3; val_offset:47205*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47205*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15736:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1de0b9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9de0b9; op2val:0x0;
op3val:0x4003fff; valaddr_reg:x3; val_offset:47208*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47208*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15737:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1de0b9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9de0b9; op2val:0x0;
op3val:0x4007fff; valaddr_reg:x3; val_offset:47211*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47211*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15738:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1de0b9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9de0b9; op2val:0x0;
op3val:0x400ffff; valaddr_reg:x3; val_offset:47214*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47214*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15739:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1de0b9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9de0b9; op2val:0x0;
op3val:0x401ffff; valaddr_reg:x3; val_offset:47217*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47217*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15740:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1de0b9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9de0b9; op2val:0x0;
op3val:0x403ffff; valaddr_reg:x3; val_offset:47220*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47220*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15741:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1de0b9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9de0b9; op2val:0x0;
op3val:0x407ffff; valaddr_reg:x3; val_offset:47223*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47223*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15742:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1de0b9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9de0b9; op2val:0x0;
op3val:0x40fffff; valaddr_reg:x3; val_offset:47226*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47226*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15743:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1de0b9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9de0b9; op2val:0x0;
op3val:0x41fffff; valaddr_reg:x3; val_offset:47229*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47229*0 + 3*122*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2124075299,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(84148223,32,FLEN)
NAN_BOXED(2124075299,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(84410367,32,FLEN)
NAN_BOXED(2124075299,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(84934655,32,FLEN)
NAN_BOXED(2124075299,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(85983231,32,FLEN)
NAN_BOXED(2124075299,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(88080383,32,FLEN)
NAN_BOXED(2124075299,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(88080384,32,FLEN)
NAN_BOXED(2124075299,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(90177536,32,FLEN)
NAN_BOXED(2124075299,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(91226112,32,FLEN)
NAN_BOXED(2124075299,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(91750400,32,FLEN)
NAN_BOXED(2124075299,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92012544,32,FLEN)
NAN_BOXED(2124075299,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92143616,32,FLEN)
NAN_BOXED(2124075299,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92209152,32,FLEN)
NAN_BOXED(2124075299,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92241920,32,FLEN)
NAN_BOXED(2124075299,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92258304,32,FLEN)
NAN_BOXED(2124075299,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92266496,32,FLEN)
NAN_BOXED(2124075299,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92270592,32,FLEN)
NAN_BOXED(2124075299,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92272640,32,FLEN)
NAN_BOXED(2124075299,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92273664,32,FLEN)
NAN_BOXED(2124075299,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92274176,32,FLEN)
NAN_BOXED(2124075299,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92274432,32,FLEN)
NAN_BOXED(2124075299,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92274560,32,FLEN)
NAN_BOXED(2124075299,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92274624,32,FLEN)
NAN_BOXED(2124075299,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92274656,32,FLEN)
NAN_BOXED(2124075299,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92274672,32,FLEN)
NAN_BOXED(2124075299,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92274680,32,FLEN)
NAN_BOXED(2124075299,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92274684,32,FLEN)
NAN_BOXED(2124075299,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92274686,32,FLEN)
NAN_BOXED(2124075299,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92274687,32,FLEN)
NAN_BOXED(2124212631,32,FLEN)
NAN_BOXED(3226522733,32,FLEN)
NAN_BOXED(2952790016,32,FLEN)
NAN_BOXED(2124212631,32,FLEN)
NAN_BOXED(3226522733,32,FLEN)
NAN_BOXED(2952790017,32,FLEN)
NAN_BOXED(2124212631,32,FLEN)
NAN_BOXED(3226522733,32,FLEN)
NAN_BOXED(2952790019,32,FLEN)
NAN_BOXED(2124212631,32,FLEN)
NAN_BOXED(3226522733,32,FLEN)
NAN_BOXED(2952790023,32,FLEN)
NAN_BOXED(2124212631,32,FLEN)
NAN_BOXED(3226522733,32,FLEN)
NAN_BOXED(2952790031,32,FLEN)
NAN_BOXED(2124212631,32,FLEN)
NAN_BOXED(3226522733,32,FLEN)
NAN_BOXED(2952790047,32,FLEN)
NAN_BOXED(2124212631,32,FLEN)
NAN_BOXED(3226522733,32,FLEN)
NAN_BOXED(2952790079,32,FLEN)
NAN_BOXED(2124212631,32,FLEN)
NAN_BOXED(3226522733,32,FLEN)
NAN_BOXED(2952790143,32,FLEN)
NAN_BOXED(2124212631,32,FLEN)
NAN_BOXED(3226522733,32,FLEN)
NAN_BOXED(2952790271,32,FLEN)
NAN_BOXED(2124212631,32,FLEN)
NAN_BOXED(3226522733,32,FLEN)
NAN_BOXED(2952790527,32,FLEN)
NAN_BOXED(2124212631,32,FLEN)
NAN_BOXED(3226522733,32,FLEN)
NAN_BOXED(2952791039,32,FLEN)
NAN_BOXED(2124212631,32,FLEN)
NAN_BOXED(3226522733,32,FLEN)
NAN_BOXED(2952792063,32,FLEN)
NAN_BOXED(2124212631,32,FLEN)
NAN_BOXED(3226522733,32,FLEN)
NAN_BOXED(2952794111,32,FLEN)
NAN_BOXED(2124212631,32,FLEN)
NAN_BOXED(3226522733,32,FLEN)
NAN_BOXED(2952798207,32,FLEN)
NAN_BOXED(2124212631,32,FLEN)
NAN_BOXED(3226522733,32,FLEN)
NAN_BOXED(2952806399,32,FLEN)
NAN_BOXED(2124212631,32,FLEN)
NAN_BOXED(3226522733,32,FLEN)
NAN_BOXED(2952822783,32,FLEN)
NAN_BOXED(2124212631,32,FLEN)
NAN_BOXED(3226522733,32,FLEN)
NAN_BOXED(2952855551,32,FLEN)
NAN_BOXED(2124212631,32,FLEN)
NAN_BOXED(3226522733,32,FLEN)
NAN_BOXED(2952921087,32,FLEN)
NAN_BOXED(2124212631,32,FLEN)
NAN_BOXED(3226522733,32,FLEN)
NAN_BOXED(2953052159,32,FLEN)
NAN_BOXED(2124212631,32,FLEN)
NAN_BOXED(3226522733,32,FLEN)
NAN_BOXED(2953314303,32,FLEN)
NAN_BOXED(2124212631,32,FLEN)
NAN_BOXED(3226522733,32,FLEN)
NAN_BOXED(2953838591,32,FLEN)
NAN_BOXED(2124212631,32,FLEN)
NAN_BOXED(3226522733,32,FLEN)
NAN_BOXED(2954887167,32,FLEN)
NAN_BOXED(2124212631,32,FLEN)
NAN_BOXED(3226522733,32,FLEN)
NAN_BOXED(2956984319,32,FLEN)
NAN_BOXED(2124212631,32,FLEN)
NAN_BOXED(3226522733,32,FLEN)
NAN_BOXED(2956984320,32,FLEN)
NAN_BOXED(2124212631,32,FLEN)
NAN_BOXED(3226522733,32,FLEN)
NAN_BOXED(2959081472,32,FLEN)
NAN_BOXED(2124212631,32,FLEN)
NAN_BOXED(3226522733,32,FLEN)
NAN_BOXED(2960130048,32,FLEN)
NAN_BOXED(2124212631,32,FLEN)
NAN_BOXED(3226522733,32,FLEN)
NAN_BOXED(2960654336,32,FLEN)
NAN_BOXED(2124212631,32,FLEN)
NAN_BOXED(3226522733,32,FLEN)
NAN_BOXED(2960916480,32,FLEN)
NAN_BOXED(2124212631,32,FLEN)
NAN_BOXED(3226522733,32,FLEN)
NAN_BOXED(2961047552,32,FLEN)
NAN_BOXED(2124212631,32,FLEN)
NAN_BOXED(3226522733,32,FLEN)
NAN_BOXED(2961113088,32,FLEN)
NAN_BOXED(2124212631,32,FLEN)
NAN_BOXED(3226522733,32,FLEN)
NAN_BOXED(2961145856,32,FLEN)
NAN_BOXED(2124212631,32,FLEN)
NAN_BOXED(3226522733,32,FLEN)
NAN_BOXED(2961162240,32,FLEN)
NAN_BOXED(2124212631,32,FLEN)
NAN_BOXED(3226522733,32,FLEN)
NAN_BOXED(2961170432,32,FLEN)
NAN_BOXED(2124212631,32,FLEN)
NAN_BOXED(3226522733,32,FLEN)
NAN_BOXED(2961174528,32,FLEN)
NAN_BOXED(2124212631,32,FLEN)
NAN_BOXED(3226522733,32,FLEN)
NAN_BOXED(2961176576,32,FLEN)
NAN_BOXED(2124212631,32,FLEN)
NAN_BOXED(3226522733,32,FLEN)
NAN_BOXED(2961177600,32,FLEN)
NAN_BOXED(2124212631,32,FLEN)
NAN_BOXED(3226522733,32,FLEN)
NAN_BOXED(2961178112,32,FLEN)
NAN_BOXED(2124212631,32,FLEN)
NAN_BOXED(3226522733,32,FLEN)
NAN_BOXED(2961178368,32,FLEN)
NAN_BOXED(2124212631,32,FLEN)
NAN_BOXED(3226522733,32,FLEN)
NAN_BOXED(2961178496,32,FLEN)
NAN_BOXED(2124212631,32,FLEN)
NAN_BOXED(3226522733,32,FLEN)
NAN_BOXED(2961178560,32,FLEN)
NAN_BOXED(2124212631,32,FLEN)
NAN_BOXED(3226522733,32,FLEN)
NAN_BOXED(2961178592,32,FLEN)
NAN_BOXED(2124212631,32,FLEN)
NAN_BOXED(3226522733,32,FLEN)
NAN_BOXED(2961178608,32,FLEN)
NAN_BOXED(2124212631,32,FLEN)
NAN_BOXED(3226522733,32,FLEN)
NAN_BOXED(2961178616,32,FLEN)
NAN_BOXED(2124212631,32,FLEN)
NAN_BOXED(3226522733,32,FLEN)
NAN_BOXED(2961178620,32,FLEN)
NAN_BOXED(2124212631,32,FLEN)
NAN_BOXED(3226522733,32,FLEN)
NAN_BOXED(2961178622,32,FLEN)
NAN_BOXED(2124212631,32,FLEN)
NAN_BOXED(3226522733,32,FLEN)
NAN_BOXED(2961178623,32,FLEN)
NAN_BOXED(2124212631,32,FLEN)
NAN_BOXED(3226522733,32,FLEN)
NAN_BOXED(4278190081,32,FLEN)
NAN_BOXED(2124212631,32,FLEN)
NAN_BOXED(3226522733,32,FLEN)
NAN_BOXED(4278190083,32,FLEN)
NAN_BOXED(2124212631,32,FLEN)
NAN_BOXED(3226522733,32,FLEN)
NAN_BOXED(4278190087,32,FLEN)
NAN_BOXED(2124212631,32,FLEN)
NAN_BOXED(3226522733,32,FLEN)
NAN_BOXED(4279867801,32,FLEN)
NAN_BOXED(2124212631,32,FLEN)
NAN_BOXED(3226522733,32,FLEN)
NAN_BOXED(4280586825,32,FLEN)
NAN_BOXED(2124212631,32,FLEN)
NAN_BOXED(3226522733,32,FLEN)
NAN_BOXED(4281545523,32,FLEN)
NAN_BOXED(2124212631,32,FLEN)
NAN_BOXED(3226522733,32,FLEN)
NAN_BOXED(4281785197,32,FLEN)
NAN_BOXED(2124212631,32,FLEN)
NAN_BOXED(3226522733,32,FLEN)
NAN_BOXED(4282104763,32,FLEN)
NAN_BOXED(2124212631,32,FLEN)
NAN_BOXED(3226522733,32,FLEN)
NAN_BOXED(4282664004,32,FLEN)
NAN_BOXED(2124212631,32,FLEN)
NAN_BOXED(3226522733,32,FLEN)
NAN_BOXED(4283223244,32,FLEN)
NAN_BOXED(2124212631,32,FLEN)
NAN_BOXED(3226522733,32,FLEN)
NAN_BOXED(4284181942,32,FLEN)
NAN_BOXED(2124212631,32,FLEN)
NAN_BOXED(3226522733,32,FLEN)
NAN_BOXED(4284900966,32,FLEN)
NAN_BOXED(2124212631,32,FLEN)
NAN_BOXED(3226522733,32,FLEN)
NAN_BOXED(4285380315,32,FLEN)
NAN_BOXED(2124212631,32,FLEN)
NAN_BOXED(3226522733,32,FLEN)
NAN_BOXED(4286578680,32,FLEN)
NAN_BOXED(2124212631,32,FLEN)
NAN_BOXED(3226522733,32,FLEN)
NAN_BOXED(4286578684,32,FLEN)
NAN_BOXED(2124212631,32,FLEN)
NAN_BOXED(3226522733,32,FLEN)
NAN_BOXED(4286578686,32,FLEN)
NAN_BOXED(2124275897,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(2124275897,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388611,32,FLEN)
NAN_BOXED(2124275897,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388615,32,FLEN)
NAN_BOXED(2124275897,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(10066329,32,FLEN)
NAN_BOXED(2124275897,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(10785353,32,FLEN)
NAN_BOXED(2124275897,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(11744051,32,FLEN)
NAN_BOXED(2124275897,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(11983725,32,FLEN)
NAN_BOXED(2124275897,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(12303291,32,FLEN)
NAN_BOXED(2124275897,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(12862532,32,FLEN)
NAN_BOXED(2124275897,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(13421772,32,FLEN)
NAN_BOXED(2124275897,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(14380470,32,FLEN)
NAN_BOXED(2124275897,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(15099494,32,FLEN)
NAN_BOXED(2124275897,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(15578843,32,FLEN)
NAN_BOXED(2124275897,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777208,32,FLEN)
NAN_BOXED(2124275897,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777212,32,FLEN)
NAN_BOXED(2124275897,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777214,32,FLEN)
NAN_BOXED(2124275897,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67108864,32,FLEN)
NAN_BOXED(2124275897,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67108865,32,FLEN)
NAN_BOXED(2124275897,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67108867,32,FLEN)
NAN_BOXED(2124275897,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67108871,32,FLEN)
NAN_BOXED(2124275897,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67108879,32,FLEN)
NAN_BOXED(2124275897,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67108895,32,FLEN)
NAN_BOXED(2124275897,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67108927,32,FLEN)
NAN_BOXED(2124275897,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67108991,32,FLEN)
NAN_BOXED(2124275897,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67109119,32,FLEN)
NAN_BOXED(2124275897,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67109375,32,FLEN)
NAN_BOXED(2124275897,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67109887,32,FLEN)
NAN_BOXED(2124275897,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67110911,32,FLEN)
NAN_BOXED(2124275897,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67112959,32,FLEN)
NAN_BOXED(2124275897,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67117055,32,FLEN)
NAN_BOXED(2124275897,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67125247,32,FLEN)
NAN_BOXED(2124275897,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67141631,32,FLEN)
NAN_BOXED(2124275897,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67174399,32,FLEN)
NAN_BOXED(2124275897,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67239935,32,FLEN)
NAN_BOXED(2124275897,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67371007,32,FLEN)
NAN_BOXED(2124275897,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67633151,32,FLEN)
NAN_BOXED(2124275897,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(68157439,32,FLEN)
NAN_BOXED(2124275897,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(69206015,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
