
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:17:59 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_15744:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1de0b9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9de0b9; op2val:0x0;
op3val:0x43fffff; valaddr_reg:x3; val_offset:47232*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47232*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15745:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1de0b9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9de0b9; op2val:0x0;
op3val:0x4400000; valaddr_reg:x3; val_offset:47235*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47235*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15746:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1de0b9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9de0b9; op2val:0x0;
op3val:0x4600000; valaddr_reg:x3; val_offset:47238*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47238*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15747:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1de0b9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9de0b9; op2val:0x0;
op3val:0x4700000; valaddr_reg:x3; val_offset:47241*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47241*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15748:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1de0b9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9de0b9; op2val:0x0;
op3val:0x4780000; valaddr_reg:x3; val_offset:47244*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47244*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15749:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1de0b9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9de0b9; op2val:0x0;
op3val:0x47c0000; valaddr_reg:x3; val_offset:47247*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47247*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15750:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1de0b9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9de0b9; op2val:0x0;
op3val:0x47e0000; valaddr_reg:x3; val_offset:47250*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47250*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15751:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1de0b9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9de0b9; op2val:0x0;
op3val:0x47f0000; valaddr_reg:x3; val_offset:47253*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47253*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15752:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1de0b9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9de0b9; op2val:0x0;
op3val:0x47f8000; valaddr_reg:x3; val_offset:47256*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47256*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15753:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1de0b9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9de0b9; op2val:0x0;
op3val:0x47fc000; valaddr_reg:x3; val_offset:47259*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47259*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15754:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1de0b9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9de0b9; op2val:0x0;
op3val:0x47fe000; valaddr_reg:x3; val_offset:47262*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47262*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15755:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1de0b9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9de0b9; op2val:0x0;
op3val:0x47ff000; valaddr_reg:x3; val_offset:47265*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47265*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15756:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1de0b9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9de0b9; op2val:0x0;
op3val:0x47ff800; valaddr_reg:x3; val_offset:47268*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47268*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15757:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1de0b9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9de0b9; op2val:0x0;
op3val:0x47ffc00; valaddr_reg:x3; val_offset:47271*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47271*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15758:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1de0b9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9de0b9; op2val:0x0;
op3val:0x47ffe00; valaddr_reg:x3; val_offset:47274*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47274*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15759:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1de0b9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9de0b9; op2val:0x0;
op3val:0x47fff00; valaddr_reg:x3; val_offset:47277*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47277*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15760:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1de0b9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9de0b9; op2val:0x0;
op3val:0x47fff80; valaddr_reg:x3; val_offset:47280*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47280*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15761:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1de0b9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9de0b9; op2val:0x0;
op3val:0x47fffc0; valaddr_reg:x3; val_offset:47283*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47283*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15762:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1de0b9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9de0b9; op2val:0x0;
op3val:0x47fffe0; valaddr_reg:x3; val_offset:47286*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47286*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15763:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1de0b9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9de0b9; op2val:0x0;
op3val:0x47ffff0; valaddr_reg:x3; val_offset:47289*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47289*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15764:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1de0b9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9de0b9; op2val:0x0;
op3val:0x47ffff8; valaddr_reg:x3; val_offset:47292*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47292*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15765:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1de0b9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9de0b9; op2val:0x0;
op3val:0x47ffffc; valaddr_reg:x3; val_offset:47295*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47295*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15766:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1de0b9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9de0b9; op2val:0x0;
op3val:0x47ffffe; valaddr_reg:x3; val_offset:47298*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47298*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15767:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1de0b9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9de0b9; op2val:0x0;
op3val:0x47fffff; valaddr_reg:x3; val_offset:47301*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47301*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15768:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f40ca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f40ca; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:47304*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47304*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15769:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f40ca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f40ca; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:47307*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47307*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15770:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f40ca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f40ca; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:47310*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47310*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15771:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f40ca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f40ca; op2val:0x0;
op3val:0x199999; valaddr_reg:x3; val_offset:47313*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47313*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15772:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f40ca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f40ca; op2val:0x0;
op3val:0x249249; valaddr_reg:x3; val_offset:47316*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47316*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15773:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f40ca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f40ca; op2val:0x0;
op3val:0x333333; valaddr_reg:x3; val_offset:47319*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47319*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15774:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f40ca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f40ca; op2val:0x0;
op3val:0x36db6d; valaddr_reg:x3; val_offset:47322*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47322*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15775:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f40ca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f40ca; op2val:0x0;
op3val:0x3bbbbb; valaddr_reg:x3; val_offset:47325*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47325*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15776:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f40ca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f40ca; op2val:0x0;
op3val:0x444444; valaddr_reg:x3; val_offset:47328*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47328*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15777:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f40ca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f40ca; op2val:0x0;
op3val:0x4ccccc; valaddr_reg:x3; val_offset:47331*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47331*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15778:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f40ca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f40ca; op2val:0x0;
op3val:0x5b6db6; valaddr_reg:x3; val_offset:47334*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47334*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15779:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f40ca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f40ca; op2val:0x0;
op3val:0x666666; valaddr_reg:x3; val_offset:47337*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47337*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15780:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f40ca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f40ca; op2val:0x0;
op3val:0x6db6db; valaddr_reg:x3; val_offset:47340*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47340*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15781:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f40ca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f40ca; op2val:0x0;
op3val:0x7ffff8; valaddr_reg:x3; val_offset:47343*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47343*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15782:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f40ca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f40ca; op2val:0x0;
op3val:0x7ffffc; valaddr_reg:x3; val_offset:47346*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47346*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15783:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f40ca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f40ca; op2val:0x0;
op3val:0x7ffffe; valaddr_reg:x3; val_offset:47349*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47349*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15784:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f40ca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f40ca; op2val:0x0;
op3val:0x6000000; valaddr_reg:x3; val_offset:47352*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47352*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15785:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f40ca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f40ca; op2val:0x0;
op3val:0x6000001; valaddr_reg:x3; val_offset:47355*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47355*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15786:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f40ca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f40ca; op2val:0x0;
op3val:0x6000003; valaddr_reg:x3; val_offset:47358*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47358*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15787:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f40ca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f40ca; op2val:0x0;
op3val:0x6000007; valaddr_reg:x3; val_offset:47361*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47361*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15788:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f40ca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f40ca; op2val:0x0;
op3val:0x600000f; valaddr_reg:x3; val_offset:47364*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47364*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15789:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f40ca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f40ca; op2val:0x0;
op3val:0x600001f; valaddr_reg:x3; val_offset:47367*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47367*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15790:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f40ca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f40ca; op2val:0x0;
op3val:0x600003f; valaddr_reg:x3; val_offset:47370*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47370*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15791:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f40ca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f40ca; op2val:0x0;
op3val:0x600007f; valaddr_reg:x3; val_offset:47373*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47373*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15792:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f40ca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f40ca; op2val:0x0;
op3val:0x60000ff; valaddr_reg:x3; val_offset:47376*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47376*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15793:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f40ca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f40ca; op2val:0x0;
op3val:0x60001ff; valaddr_reg:x3; val_offset:47379*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47379*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15794:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f40ca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f40ca; op2val:0x0;
op3val:0x60003ff; valaddr_reg:x3; val_offset:47382*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47382*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15795:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f40ca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f40ca; op2val:0x0;
op3val:0x60007ff; valaddr_reg:x3; val_offset:47385*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47385*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15796:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f40ca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f40ca; op2val:0x0;
op3val:0x6000fff; valaddr_reg:x3; val_offset:47388*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47388*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15797:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f40ca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f40ca; op2val:0x0;
op3val:0x6001fff; valaddr_reg:x3; val_offset:47391*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47391*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15798:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f40ca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f40ca; op2val:0x0;
op3val:0x6003fff; valaddr_reg:x3; val_offset:47394*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47394*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15799:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f40ca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f40ca; op2val:0x0;
op3val:0x6007fff; valaddr_reg:x3; val_offset:47397*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47397*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15800:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f40ca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f40ca; op2val:0x0;
op3val:0x600ffff; valaddr_reg:x3; val_offset:47400*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47400*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15801:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f40ca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f40ca; op2val:0x0;
op3val:0x601ffff; valaddr_reg:x3; val_offset:47403*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47403*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15802:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f40ca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f40ca; op2val:0x0;
op3val:0x603ffff; valaddr_reg:x3; val_offset:47406*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47406*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15803:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f40ca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f40ca; op2val:0x0;
op3val:0x607ffff; valaddr_reg:x3; val_offset:47409*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47409*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15804:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f40ca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f40ca; op2val:0x0;
op3val:0x60fffff; valaddr_reg:x3; val_offset:47412*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47412*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15805:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f40ca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f40ca; op2val:0x0;
op3val:0x61fffff; valaddr_reg:x3; val_offset:47415*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47415*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15806:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f40ca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f40ca; op2val:0x0;
op3val:0x63fffff; valaddr_reg:x3; val_offset:47418*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47418*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15807:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f40ca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f40ca; op2val:0x0;
op3val:0x6400000; valaddr_reg:x3; val_offset:47421*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47421*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15808:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f40ca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f40ca; op2val:0x0;
op3val:0x6600000; valaddr_reg:x3; val_offset:47424*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47424*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15809:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f40ca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f40ca; op2val:0x0;
op3val:0x6700000; valaddr_reg:x3; val_offset:47427*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47427*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15810:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f40ca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f40ca; op2val:0x0;
op3val:0x6780000; valaddr_reg:x3; val_offset:47430*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47430*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15811:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f40ca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f40ca; op2val:0x0;
op3val:0x67c0000; valaddr_reg:x3; val_offset:47433*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47433*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15812:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f40ca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f40ca; op2val:0x0;
op3val:0x67e0000; valaddr_reg:x3; val_offset:47436*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47436*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15813:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f40ca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f40ca; op2val:0x0;
op3val:0x67f0000; valaddr_reg:x3; val_offset:47439*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47439*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15814:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f40ca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f40ca; op2val:0x0;
op3val:0x67f8000; valaddr_reg:x3; val_offset:47442*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47442*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15815:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f40ca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f40ca; op2val:0x0;
op3val:0x67fc000; valaddr_reg:x3; val_offset:47445*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47445*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15816:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f40ca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f40ca; op2val:0x0;
op3val:0x67fe000; valaddr_reg:x3; val_offset:47448*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47448*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15817:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f40ca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f40ca; op2val:0x0;
op3val:0x67ff000; valaddr_reg:x3; val_offset:47451*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47451*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15818:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f40ca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f40ca; op2val:0x0;
op3val:0x67ff800; valaddr_reg:x3; val_offset:47454*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47454*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15819:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f40ca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f40ca; op2val:0x0;
op3val:0x67ffc00; valaddr_reg:x3; val_offset:47457*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47457*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15820:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f40ca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f40ca; op2val:0x0;
op3val:0x67ffe00; valaddr_reg:x3; val_offset:47460*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47460*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15821:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f40ca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f40ca; op2val:0x0;
op3val:0x67fff00; valaddr_reg:x3; val_offset:47463*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47463*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15822:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f40ca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f40ca; op2val:0x0;
op3val:0x67fff80; valaddr_reg:x3; val_offset:47466*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47466*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15823:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f40ca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f40ca; op2val:0x0;
op3val:0x67fffc0; valaddr_reg:x3; val_offset:47469*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47469*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15824:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f40ca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f40ca; op2val:0x0;
op3val:0x67fffe0; valaddr_reg:x3; val_offset:47472*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47472*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15825:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f40ca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f40ca; op2val:0x0;
op3val:0x67ffff0; valaddr_reg:x3; val_offset:47475*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47475*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15826:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f40ca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f40ca; op2val:0x0;
op3val:0x67ffff8; valaddr_reg:x3; val_offset:47478*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47478*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15827:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f40ca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f40ca; op2val:0x0;
op3val:0x67ffffc; valaddr_reg:x3; val_offset:47481*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47481*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15828:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f40ca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f40ca; op2val:0x0;
op3val:0x67ffffe; valaddr_reg:x3; val_offset:47484*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47484*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15829:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f40ca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f40ca; op2val:0x0;
op3val:0x67fffff; valaddr_reg:x3; val_offset:47487*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47487*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15830:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f4b7c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4db4e0 and fs3 == 1 and fe3 == 0xfa and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f4b7c; op2val:0xc04db4e0;
op3val:0xfd000000; valaddr_reg:x3; val_offset:47490*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47490*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15831:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f4b7c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4db4e0 and fs3 == 1 and fe3 == 0xfa and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f4b7c; op2val:0xc04db4e0;
op3val:0xfd000001; valaddr_reg:x3; val_offset:47493*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47493*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15832:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f4b7c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4db4e0 and fs3 == 1 and fe3 == 0xfa and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f4b7c; op2val:0xc04db4e0;
op3val:0xfd000003; valaddr_reg:x3; val_offset:47496*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47496*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15833:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f4b7c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4db4e0 and fs3 == 1 and fe3 == 0xfa and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f4b7c; op2val:0xc04db4e0;
op3val:0xfd000007; valaddr_reg:x3; val_offset:47499*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47499*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15834:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f4b7c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4db4e0 and fs3 == 1 and fe3 == 0xfa and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f4b7c; op2val:0xc04db4e0;
op3val:0xfd00000f; valaddr_reg:x3; val_offset:47502*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47502*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15835:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f4b7c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4db4e0 and fs3 == 1 and fe3 == 0xfa and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f4b7c; op2val:0xc04db4e0;
op3val:0xfd00001f; valaddr_reg:x3; val_offset:47505*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47505*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15836:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f4b7c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4db4e0 and fs3 == 1 and fe3 == 0xfa and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f4b7c; op2val:0xc04db4e0;
op3val:0xfd00003f; valaddr_reg:x3; val_offset:47508*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47508*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15837:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f4b7c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4db4e0 and fs3 == 1 and fe3 == 0xfa and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f4b7c; op2val:0xc04db4e0;
op3val:0xfd00007f; valaddr_reg:x3; val_offset:47511*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47511*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15838:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f4b7c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4db4e0 and fs3 == 1 and fe3 == 0xfa and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f4b7c; op2val:0xc04db4e0;
op3val:0xfd0000ff; valaddr_reg:x3; val_offset:47514*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47514*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15839:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f4b7c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4db4e0 and fs3 == 1 and fe3 == 0xfa and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f4b7c; op2val:0xc04db4e0;
op3val:0xfd0001ff; valaddr_reg:x3; val_offset:47517*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47517*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15840:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f4b7c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4db4e0 and fs3 == 1 and fe3 == 0xfa and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f4b7c; op2val:0xc04db4e0;
op3val:0xfd0003ff; valaddr_reg:x3; val_offset:47520*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47520*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15841:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f4b7c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4db4e0 and fs3 == 1 and fe3 == 0xfa and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f4b7c; op2val:0xc04db4e0;
op3val:0xfd0007ff; valaddr_reg:x3; val_offset:47523*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47523*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15842:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f4b7c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4db4e0 and fs3 == 1 and fe3 == 0xfa and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f4b7c; op2val:0xc04db4e0;
op3val:0xfd000fff; valaddr_reg:x3; val_offset:47526*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47526*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15843:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f4b7c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4db4e0 and fs3 == 1 and fe3 == 0xfa and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f4b7c; op2val:0xc04db4e0;
op3val:0xfd001fff; valaddr_reg:x3; val_offset:47529*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47529*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15844:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f4b7c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4db4e0 and fs3 == 1 and fe3 == 0xfa and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f4b7c; op2val:0xc04db4e0;
op3val:0xfd003fff; valaddr_reg:x3; val_offset:47532*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47532*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15845:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f4b7c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4db4e0 and fs3 == 1 and fe3 == 0xfa and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f4b7c; op2val:0xc04db4e0;
op3val:0xfd007fff; valaddr_reg:x3; val_offset:47535*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47535*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15846:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f4b7c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4db4e0 and fs3 == 1 and fe3 == 0xfa and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f4b7c; op2val:0xc04db4e0;
op3val:0xfd00ffff; valaddr_reg:x3; val_offset:47538*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47538*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15847:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f4b7c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4db4e0 and fs3 == 1 and fe3 == 0xfa and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f4b7c; op2val:0xc04db4e0;
op3val:0xfd01ffff; valaddr_reg:x3; val_offset:47541*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47541*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15848:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f4b7c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4db4e0 and fs3 == 1 and fe3 == 0xfa and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f4b7c; op2val:0xc04db4e0;
op3val:0xfd03ffff; valaddr_reg:x3; val_offset:47544*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47544*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15849:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f4b7c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4db4e0 and fs3 == 1 and fe3 == 0xfa and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f4b7c; op2val:0xc04db4e0;
op3val:0xfd07ffff; valaddr_reg:x3; val_offset:47547*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47547*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15850:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f4b7c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4db4e0 and fs3 == 1 and fe3 == 0xfa and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f4b7c; op2val:0xc04db4e0;
op3val:0xfd0fffff; valaddr_reg:x3; val_offset:47550*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47550*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15851:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f4b7c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4db4e0 and fs3 == 1 and fe3 == 0xfa and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f4b7c; op2val:0xc04db4e0;
op3val:0xfd1fffff; valaddr_reg:x3; val_offset:47553*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47553*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15852:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f4b7c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4db4e0 and fs3 == 1 and fe3 == 0xfa and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f4b7c; op2val:0xc04db4e0;
op3val:0xfd3fffff; valaddr_reg:x3; val_offset:47556*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47556*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15853:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f4b7c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4db4e0 and fs3 == 1 and fe3 == 0xfa and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f4b7c; op2val:0xc04db4e0;
op3val:0xfd400000; valaddr_reg:x3; val_offset:47559*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47559*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15854:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f4b7c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4db4e0 and fs3 == 1 and fe3 == 0xfa and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f4b7c; op2val:0xc04db4e0;
op3val:0xfd600000; valaddr_reg:x3; val_offset:47562*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47562*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15855:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f4b7c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4db4e0 and fs3 == 1 and fe3 == 0xfa and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f4b7c; op2val:0xc04db4e0;
op3val:0xfd700000; valaddr_reg:x3; val_offset:47565*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47565*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15856:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f4b7c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4db4e0 and fs3 == 1 and fe3 == 0xfa and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f4b7c; op2val:0xc04db4e0;
op3val:0xfd780000; valaddr_reg:x3; val_offset:47568*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47568*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15857:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f4b7c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4db4e0 and fs3 == 1 and fe3 == 0xfa and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f4b7c; op2val:0xc04db4e0;
op3val:0xfd7c0000; valaddr_reg:x3; val_offset:47571*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47571*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15858:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f4b7c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4db4e0 and fs3 == 1 and fe3 == 0xfa and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f4b7c; op2val:0xc04db4e0;
op3val:0xfd7e0000; valaddr_reg:x3; val_offset:47574*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47574*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15859:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f4b7c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4db4e0 and fs3 == 1 and fe3 == 0xfa and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f4b7c; op2val:0xc04db4e0;
op3val:0xfd7f0000; valaddr_reg:x3; val_offset:47577*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47577*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15860:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f4b7c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4db4e0 and fs3 == 1 and fe3 == 0xfa and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f4b7c; op2val:0xc04db4e0;
op3val:0xfd7f8000; valaddr_reg:x3; val_offset:47580*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47580*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15861:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f4b7c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4db4e0 and fs3 == 1 and fe3 == 0xfa and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f4b7c; op2val:0xc04db4e0;
op3val:0xfd7fc000; valaddr_reg:x3; val_offset:47583*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47583*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15862:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f4b7c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4db4e0 and fs3 == 1 and fe3 == 0xfa and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f4b7c; op2val:0xc04db4e0;
op3val:0xfd7fe000; valaddr_reg:x3; val_offset:47586*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47586*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15863:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f4b7c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4db4e0 and fs3 == 1 and fe3 == 0xfa and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f4b7c; op2val:0xc04db4e0;
op3val:0xfd7ff000; valaddr_reg:x3; val_offset:47589*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47589*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15864:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f4b7c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4db4e0 and fs3 == 1 and fe3 == 0xfa and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f4b7c; op2val:0xc04db4e0;
op3val:0xfd7ff800; valaddr_reg:x3; val_offset:47592*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47592*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15865:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f4b7c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4db4e0 and fs3 == 1 and fe3 == 0xfa and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f4b7c; op2val:0xc04db4e0;
op3val:0xfd7ffc00; valaddr_reg:x3; val_offset:47595*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47595*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15866:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f4b7c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4db4e0 and fs3 == 1 and fe3 == 0xfa and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f4b7c; op2val:0xc04db4e0;
op3val:0xfd7ffe00; valaddr_reg:x3; val_offset:47598*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47598*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15867:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f4b7c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4db4e0 and fs3 == 1 and fe3 == 0xfa and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f4b7c; op2val:0xc04db4e0;
op3val:0xfd7fff00; valaddr_reg:x3; val_offset:47601*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47601*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15868:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f4b7c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4db4e0 and fs3 == 1 and fe3 == 0xfa and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f4b7c; op2val:0xc04db4e0;
op3val:0xfd7fff80; valaddr_reg:x3; val_offset:47604*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47604*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15869:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f4b7c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4db4e0 and fs3 == 1 and fe3 == 0xfa and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f4b7c; op2val:0xc04db4e0;
op3val:0xfd7fffc0; valaddr_reg:x3; val_offset:47607*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47607*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15870:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f4b7c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4db4e0 and fs3 == 1 and fe3 == 0xfa and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f4b7c; op2val:0xc04db4e0;
op3val:0xfd7fffe0; valaddr_reg:x3; val_offset:47610*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47610*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15871:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f4b7c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4db4e0 and fs3 == 1 and fe3 == 0xfa and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f4b7c; op2val:0xc04db4e0;
op3val:0xfd7ffff0; valaddr_reg:x3; val_offset:47613*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47613*0 + 3*123*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2124275897,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(71303167,32,FLEN)
NAN_BOXED(2124275897,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(71303168,32,FLEN)
NAN_BOXED(2124275897,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(73400320,32,FLEN)
NAN_BOXED(2124275897,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(74448896,32,FLEN)
NAN_BOXED(2124275897,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(74973184,32,FLEN)
NAN_BOXED(2124275897,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75235328,32,FLEN)
NAN_BOXED(2124275897,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75366400,32,FLEN)
NAN_BOXED(2124275897,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75431936,32,FLEN)
NAN_BOXED(2124275897,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75464704,32,FLEN)
NAN_BOXED(2124275897,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75481088,32,FLEN)
NAN_BOXED(2124275897,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75489280,32,FLEN)
NAN_BOXED(2124275897,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75493376,32,FLEN)
NAN_BOXED(2124275897,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75495424,32,FLEN)
NAN_BOXED(2124275897,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75496448,32,FLEN)
NAN_BOXED(2124275897,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75496960,32,FLEN)
NAN_BOXED(2124275897,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75497216,32,FLEN)
NAN_BOXED(2124275897,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75497344,32,FLEN)
NAN_BOXED(2124275897,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75497408,32,FLEN)
NAN_BOXED(2124275897,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75497440,32,FLEN)
NAN_BOXED(2124275897,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75497456,32,FLEN)
NAN_BOXED(2124275897,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75497464,32,FLEN)
NAN_BOXED(2124275897,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75497468,32,FLEN)
NAN_BOXED(2124275897,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75497470,32,FLEN)
NAN_BOXED(2124275897,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75497471,32,FLEN)
NAN_BOXED(2124366026,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2124366026,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3,32,FLEN)
NAN_BOXED(2124366026,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7,32,FLEN)
NAN_BOXED(2124366026,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1677721,32,FLEN)
NAN_BOXED(2124366026,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2396745,32,FLEN)
NAN_BOXED(2124366026,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3355443,32,FLEN)
NAN_BOXED(2124366026,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3595117,32,FLEN)
NAN_BOXED(2124366026,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3914683,32,FLEN)
NAN_BOXED(2124366026,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4473924,32,FLEN)
NAN_BOXED(2124366026,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5033164,32,FLEN)
NAN_BOXED(2124366026,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5991862,32,FLEN)
NAN_BOXED(2124366026,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(6710886,32,FLEN)
NAN_BOXED(2124366026,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7190235,32,FLEN)
NAN_BOXED(2124366026,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388600,32,FLEN)
NAN_BOXED(2124366026,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388604,32,FLEN)
NAN_BOXED(2124366026,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388606,32,FLEN)
NAN_BOXED(2124366026,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100663296,32,FLEN)
NAN_BOXED(2124366026,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100663297,32,FLEN)
NAN_BOXED(2124366026,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100663299,32,FLEN)
NAN_BOXED(2124366026,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100663303,32,FLEN)
NAN_BOXED(2124366026,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100663311,32,FLEN)
NAN_BOXED(2124366026,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100663327,32,FLEN)
NAN_BOXED(2124366026,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100663359,32,FLEN)
NAN_BOXED(2124366026,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100663423,32,FLEN)
NAN_BOXED(2124366026,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100663551,32,FLEN)
NAN_BOXED(2124366026,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100663807,32,FLEN)
NAN_BOXED(2124366026,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100664319,32,FLEN)
NAN_BOXED(2124366026,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100665343,32,FLEN)
NAN_BOXED(2124366026,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100667391,32,FLEN)
NAN_BOXED(2124366026,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100671487,32,FLEN)
NAN_BOXED(2124366026,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100679679,32,FLEN)
NAN_BOXED(2124366026,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100696063,32,FLEN)
NAN_BOXED(2124366026,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100728831,32,FLEN)
NAN_BOXED(2124366026,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100794367,32,FLEN)
NAN_BOXED(2124366026,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100925439,32,FLEN)
NAN_BOXED(2124366026,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(101187583,32,FLEN)
NAN_BOXED(2124366026,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(101711871,32,FLEN)
NAN_BOXED(2124366026,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(102760447,32,FLEN)
NAN_BOXED(2124366026,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(104857599,32,FLEN)
NAN_BOXED(2124366026,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(104857600,32,FLEN)
NAN_BOXED(2124366026,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(106954752,32,FLEN)
NAN_BOXED(2124366026,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(108003328,32,FLEN)
NAN_BOXED(2124366026,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(108527616,32,FLEN)
NAN_BOXED(2124366026,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(108789760,32,FLEN)
NAN_BOXED(2124366026,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(108920832,32,FLEN)
NAN_BOXED(2124366026,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(108986368,32,FLEN)
NAN_BOXED(2124366026,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109019136,32,FLEN)
NAN_BOXED(2124366026,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109035520,32,FLEN)
NAN_BOXED(2124366026,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109043712,32,FLEN)
NAN_BOXED(2124366026,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109047808,32,FLEN)
NAN_BOXED(2124366026,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109049856,32,FLEN)
NAN_BOXED(2124366026,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109050880,32,FLEN)
NAN_BOXED(2124366026,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109051392,32,FLEN)
NAN_BOXED(2124366026,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109051648,32,FLEN)
NAN_BOXED(2124366026,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109051776,32,FLEN)
NAN_BOXED(2124366026,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109051840,32,FLEN)
NAN_BOXED(2124366026,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109051872,32,FLEN)
NAN_BOXED(2124366026,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109051888,32,FLEN)
NAN_BOXED(2124366026,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109051896,32,FLEN)
NAN_BOXED(2124366026,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109051900,32,FLEN)
NAN_BOXED(2124366026,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109051902,32,FLEN)
NAN_BOXED(2124366026,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109051903,32,FLEN)
NAN_BOXED(2124368764,32,FLEN)
NAN_BOXED(3226318048,32,FLEN)
NAN_BOXED(4244635648,32,FLEN)
NAN_BOXED(2124368764,32,FLEN)
NAN_BOXED(3226318048,32,FLEN)
NAN_BOXED(4244635649,32,FLEN)
NAN_BOXED(2124368764,32,FLEN)
NAN_BOXED(3226318048,32,FLEN)
NAN_BOXED(4244635651,32,FLEN)
NAN_BOXED(2124368764,32,FLEN)
NAN_BOXED(3226318048,32,FLEN)
NAN_BOXED(4244635655,32,FLEN)
NAN_BOXED(2124368764,32,FLEN)
NAN_BOXED(3226318048,32,FLEN)
NAN_BOXED(4244635663,32,FLEN)
NAN_BOXED(2124368764,32,FLEN)
NAN_BOXED(3226318048,32,FLEN)
NAN_BOXED(4244635679,32,FLEN)
NAN_BOXED(2124368764,32,FLEN)
NAN_BOXED(3226318048,32,FLEN)
NAN_BOXED(4244635711,32,FLEN)
NAN_BOXED(2124368764,32,FLEN)
NAN_BOXED(3226318048,32,FLEN)
NAN_BOXED(4244635775,32,FLEN)
NAN_BOXED(2124368764,32,FLEN)
NAN_BOXED(3226318048,32,FLEN)
NAN_BOXED(4244635903,32,FLEN)
NAN_BOXED(2124368764,32,FLEN)
NAN_BOXED(3226318048,32,FLEN)
NAN_BOXED(4244636159,32,FLEN)
NAN_BOXED(2124368764,32,FLEN)
NAN_BOXED(3226318048,32,FLEN)
NAN_BOXED(4244636671,32,FLEN)
NAN_BOXED(2124368764,32,FLEN)
NAN_BOXED(3226318048,32,FLEN)
NAN_BOXED(4244637695,32,FLEN)
NAN_BOXED(2124368764,32,FLEN)
NAN_BOXED(3226318048,32,FLEN)
NAN_BOXED(4244639743,32,FLEN)
NAN_BOXED(2124368764,32,FLEN)
NAN_BOXED(3226318048,32,FLEN)
NAN_BOXED(4244643839,32,FLEN)
NAN_BOXED(2124368764,32,FLEN)
NAN_BOXED(3226318048,32,FLEN)
NAN_BOXED(4244652031,32,FLEN)
NAN_BOXED(2124368764,32,FLEN)
NAN_BOXED(3226318048,32,FLEN)
NAN_BOXED(4244668415,32,FLEN)
NAN_BOXED(2124368764,32,FLEN)
NAN_BOXED(3226318048,32,FLEN)
NAN_BOXED(4244701183,32,FLEN)
NAN_BOXED(2124368764,32,FLEN)
NAN_BOXED(3226318048,32,FLEN)
NAN_BOXED(4244766719,32,FLEN)
NAN_BOXED(2124368764,32,FLEN)
NAN_BOXED(3226318048,32,FLEN)
NAN_BOXED(4244897791,32,FLEN)
NAN_BOXED(2124368764,32,FLEN)
NAN_BOXED(3226318048,32,FLEN)
NAN_BOXED(4245159935,32,FLEN)
NAN_BOXED(2124368764,32,FLEN)
NAN_BOXED(3226318048,32,FLEN)
NAN_BOXED(4245684223,32,FLEN)
NAN_BOXED(2124368764,32,FLEN)
NAN_BOXED(3226318048,32,FLEN)
NAN_BOXED(4246732799,32,FLEN)
NAN_BOXED(2124368764,32,FLEN)
NAN_BOXED(3226318048,32,FLEN)
NAN_BOXED(4248829951,32,FLEN)
NAN_BOXED(2124368764,32,FLEN)
NAN_BOXED(3226318048,32,FLEN)
NAN_BOXED(4248829952,32,FLEN)
NAN_BOXED(2124368764,32,FLEN)
NAN_BOXED(3226318048,32,FLEN)
NAN_BOXED(4250927104,32,FLEN)
NAN_BOXED(2124368764,32,FLEN)
NAN_BOXED(3226318048,32,FLEN)
NAN_BOXED(4251975680,32,FLEN)
NAN_BOXED(2124368764,32,FLEN)
NAN_BOXED(3226318048,32,FLEN)
NAN_BOXED(4252499968,32,FLEN)
NAN_BOXED(2124368764,32,FLEN)
NAN_BOXED(3226318048,32,FLEN)
NAN_BOXED(4252762112,32,FLEN)
NAN_BOXED(2124368764,32,FLEN)
NAN_BOXED(3226318048,32,FLEN)
NAN_BOXED(4252893184,32,FLEN)
NAN_BOXED(2124368764,32,FLEN)
NAN_BOXED(3226318048,32,FLEN)
NAN_BOXED(4252958720,32,FLEN)
NAN_BOXED(2124368764,32,FLEN)
NAN_BOXED(3226318048,32,FLEN)
NAN_BOXED(4252991488,32,FLEN)
NAN_BOXED(2124368764,32,FLEN)
NAN_BOXED(3226318048,32,FLEN)
NAN_BOXED(4253007872,32,FLEN)
NAN_BOXED(2124368764,32,FLEN)
NAN_BOXED(3226318048,32,FLEN)
NAN_BOXED(4253016064,32,FLEN)
NAN_BOXED(2124368764,32,FLEN)
NAN_BOXED(3226318048,32,FLEN)
NAN_BOXED(4253020160,32,FLEN)
NAN_BOXED(2124368764,32,FLEN)
NAN_BOXED(3226318048,32,FLEN)
NAN_BOXED(4253022208,32,FLEN)
NAN_BOXED(2124368764,32,FLEN)
NAN_BOXED(3226318048,32,FLEN)
NAN_BOXED(4253023232,32,FLEN)
NAN_BOXED(2124368764,32,FLEN)
NAN_BOXED(3226318048,32,FLEN)
NAN_BOXED(4253023744,32,FLEN)
NAN_BOXED(2124368764,32,FLEN)
NAN_BOXED(3226318048,32,FLEN)
NAN_BOXED(4253024000,32,FLEN)
NAN_BOXED(2124368764,32,FLEN)
NAN_BOXED(3226318048,32,FLEN)
NAN_BOXED(4253024128,32,FLEN)
NAN_BOXED(2124368764,32,FLEN)
NAN_BOXED(3226318048,32,FLEN)
NAN_BOXED(4253024192,32,FLEN)
NAN_BOXED(2124368764,32,FLEN)
NAN_BOXED(3226318048,32,FLEN)
NAN_BOXED(4253024224,32,FLEN)
NAN_BOXED(2124368764,32,FLEN)
NAN_BOXED(3226318048,32,FLEN)
NAN_BOXED(4253024240,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
