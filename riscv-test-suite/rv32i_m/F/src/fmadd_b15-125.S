
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:17:59 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_15872:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f4b7c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4db4e0 and fs3 == 1 and fe3 == 0xfa and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f4b7c; op2val:0xc04db4e0;
op3val:0xfd7ffff8; valaddr_reg:x3; val_offset:47616*0 + 3*124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47616*0 + 3*124*FLEN/8, x4, x1, x2)

inst_15873:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f4b7c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4db4e0 and fs3 == 1 and fe3 == 0xfa and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f4b7c; op2val:0xc04db4e0;
op3val:0xfd7ffffc; valaddr_reg:x3; val_offset:47619*0 + 3*124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47619*0 + 3*124*FLEN/8, x4, x1, x2)

inst_15874:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f4b7c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4db4e0 and fs3 == 1 and fe3 == 0xfa and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f4b7c; op2val:0xc04db4e0;
op3val:0xfd7ffffe; valaddr_reg:x3; val_offset:47622*0 + 3*124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47622*0 + 3*124*FLEN/8, x4, x1, x2)

inst_15875:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f4b7c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4db4e0 and fs3 == 1 and fe3 == 0xfa and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f4b7c; op2val:0xc04db4e0;
op3val:0xfd7fffff; valaddr_reg:x3; val_offset:47625*0 + 3*124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47625*0 + 3*124*FLEN/8, x4, x1, x2)

inst_15876:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f4b7c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4db4e0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f4b7c; op2val:0xc04db4e0;
op3val:0xff000001; valaddr_reg:x3; val_offset:47628*0 + 3*124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47628*0 + 3*124*FLEN/8, x4, x1, x2)

inst_15877:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f4b7c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4db4e0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f4b7c; op2val:0xc04db4e0;
op3val:0xff000003; valaddr_reg:x3; val_offset:47631*0 + 3*124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47631*0 + 3*124*FLEN/8, x4, x1, x2)

inst_15878:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f4b7c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4db4e0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f4b7c; op2val:0xc04db4e0;
op3val:0xff000007; valaddr_reg:x3; val_offset:47634*0 + 3*124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47634*0 + 3*124*FLEN/8, x4, x1, x2)

inst_15879:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f4b7c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4db4e0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f4b7c; op2val:0xc04db4e0;
op3val:0xff199999; valaddr_reg:x3; val_offset:47637*0 + 3*124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47637*0 + 3*124*FLEN/8, x4, x1, x2)

inst_15880:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f4b7c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4db4e0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f4b7c; op2val:0xc04db4e0;
op3val:0xff249249; valaddr_reg:x3; val_offset:47640*0 + 3*124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47640*0 + 3*124*FLEN/8, x4, x1, x2)

inst_15881:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f4b7c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4db4e0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f4b7c; op2val:0xc04db4e0;
op3val:0xff333333; valaddr_reg:x3; val_offset:47643*0 + 3*124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47643*0 + 3*124*FLEN/8, x4, x1, x2)

inst_15882:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f4b7c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4db4e0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f4b7c; op2val:0xc04db4e0;
op3val:0xff36db6d; valaddr_reg:x3; val_offset:47646*0 + 3*124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47646*0 + 3*124*FLEN/8, x4, x1, x2)

inst_15883:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f4b7c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4db4e0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f4b7c; op2val:0xc04db4e0;
op3val:0xff3bbbbb; valaddr_reg:x3; val_offset:47649*0 + 3*124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47649*0 + 3*124*FLEN/8, x4, x1, x2)

inst_15884:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f4b7c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4db4e0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f4b7c; op2val:0xc04db4e0;
op3val:0xff444444; valaddr_reg:x3; val_offset:47652*0 + 3*124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47652*0 + 3*124*FLEN/8, x4, x1, x2)

inst_15885:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f4b7c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4db4e0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f4b7c; op2val:0xc04db4e0;
op3val:0xff4ccccc; valaddr_reg:x3; val_offset:47655*0 + 3*124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47655*0 + 3*124*FLEN/8, x4, x1, x2)

inst_15886:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f4b7c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4db4e0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f4b7c; op2val:0xc04db4e0;
op3val:0xff5b6db6; valaddr_reg:x3; val_offset:47658*0 + 3*124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47658*0 + 3*124*FLEN/8, x4, x1, x2)

inst_15887:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f4b7c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4db4e0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f4b7c; op2val:0xc04db4e0;
op3val:0xff666666; valaddr_reg:x3; val_offset:47661*0 + 3*124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47661*0 + 3*124*FLEN/8, x4, x1, x2)

inst_15888:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f4b7c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4db4e0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f4b7c; op2val:0xc04db4e0;
op3val:0xff6db6db; valaddr_reg:x3; val_offset:47664*0 + 3*124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47664*0 + 3*124*FLEN/8, x4, x1, x2)

inst_15889:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f4b7c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4db4e0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f4b7c; op2val:0xc04db4e0;
op3val:0xff7ffff8; valaddr_reg:x3; val_offset:47667*0 + 3*124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47667*0 + 3*124*FLEN/8, x4, x1, x2)

inst_15890:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f4b7c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4db4e0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f4b7c; op2val:0xc04db4e0;
op3val:0xff7ffffc; valaddr_reg:x3; val_offset:47670*0 + 3*124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47670*0 + 3*124*FLEN/8, x4, x1, x2)

inst_15891:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f4b7c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4db4e0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f4b7c; op2val:0xc04db4e0;
op3val:0xff7ffffe; valaddr_reg:x3; val_offset:47673*0 + 3*124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47673*0 + 3*124*FLEN/8, x4, x1, x2)

inst_15892:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f69aa and fs2 == 1 and fe2 == 0x00 and fm2 == 0x66c6f7 and fs3 == 1 and fe3 == 0x64 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f69aa; op2val:0x8066c6f7;
op3val:0xb2000000; valaddr_reg:x3; val_offset:47676*0 + 3*124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47676*0 + 3*124*FLEN/8, x4, x1, x2)

inst_15893:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f69aa and fs2 == 1 and fe2 == 0x00 and fm2 == 0x66c6f7 and fs3 == 1 and fe3 == 0x64 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f69aa; op2val:0x8066c6f7;
op3val:0xb2000001; valaddr_reg:x3; val_offset:47679*0 + 3*124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47679*0 + 3*124*FLEN/8, x4, x1, x2)

inst_15894:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f69aa and fs2 == 1 and fe2 == 0x00 and fm2 == 0x66c6f7 and fs3 == 1 and fe3 == 0x64 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f69aa; op2val:0x8066c6f7;
op3val:0xb2000003; valaddr_reg:x3; val_offset:47682*0 + 3*124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47682*0 + 3*124*FLEN/8, x4, x1, x2)

inst_15895:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f69aa and fs2 == 1 and fe2 == 0x00 and fm2 == 0x66c6f7 and fs3 == 1 and fe3 == 0x64 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f69aa; op2val:0x8066c6f7;
op3val:0xb2000007; valaddr_reg:x3; val_offset:47685*0 + 3*124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47685*0 + 3*124*FLEN/8, x4, x1, x2)

inst_15896:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f69aa and fs2 == 1 and fe2 == 0x00 and fm2 == 0x66c6f7 and fs3 == 1 and fe3 == 0x64 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f69aa; op2val:0x8066c6f7;
op3val:0xb200000f; valaddr_reg:x3; val_offset:47688*0 + 3*124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47688*0 + 3*124*FLEN/8, x4, x1, x2)

inst_15897:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f69aa and fs2 == 1 and fe2 == 0x00 and fm2 == 0x66c6f7 and fs3 == 1 and fe3 == 0x64 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f69aa; op2val:0x8066c6f7;
op3val:0xb200001f; valaddr_reg:x3; val_offset:47691*0 + 3*124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47691*0 + 3*124*FLEN/8, x4, x1, x2)

inst_15898:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f69aa and fs2 == 1 and fe2 == 0x00 and fm2 == 0x66c6f7 and fs3 == 1 and fe3 == 0x64 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f69aa; op2val:0x8066c6f7;
op3val:0xb200003f; valaddr_reg:x3; val_offset:47694*0 + 3*124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47694*0 + 3*124*FLEN/8, x4, x1, x2)

inst_15899:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f69aa and fs2 == 1 and fe2 == 0x00 and fm2 == 0x66c6f7 and fs3 == 1 and fe3 == 0x64 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f69aa; op2val:0x8066c6f7;
op3val:0xb200007f; valaddr_reg:x3; val_offset:47697*0 + 3*124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47697*0 + 3*124*FLEN/8, x4, x1, x2)

inst_15900:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f69aa and fs2 == 1 and fe2 == 0x00 and fm2 == 0x66c6f7 and fs3 == 1 and fe3 == 0x64 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f69aa; op2val:0x8066c6f7;
op3val:0xb20000ff; valaddr_reg:x3; val_offset:47700*0 + 3*124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47700*0 + 3*124*FLEN/8, x4, x1, x2)

inst_15901:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f69aa and fs2 == 1 and fe2 == 0x00 and fm2 == 0x66c6f7 and fs3 == 1 and fe3 == 0x64 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f69aa; op2val:0x8066c6f7;
op3val:0xb20001ff; valaddr_reg:x3; val_offset:47703*0 + 3*124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47703*0 + 3*124*FLEN/8, x4, x1, x2)

inst_15902:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f69aa and fs2 == 1 and fe2 == 0x00 and fm2 == 0x66c6f7 and fs3 == 1 and fe3 == 0x64 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f69aa; op2val:0x8066c6f7;
op3val:0xb20003ff; valaddr_reg:x3; val_offset:47706*0 + 3*124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47706*0 + 3*124*FLEN/8, x4, x1, x2)

inst_15903:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f69aa and fs2 == 1 and fe2 == 0x00 and fm2 == 0x66c6f7 and fs3 == 1 and fe3 == 0x64 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f69aa; op2val:0x8066c6f7;
op3val:0xb20007ff; valaddr_reg:x3; val_offset:47709*0 + 3*124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47709*0 + 3*124*FLEN/8, x4, x1, x2)

inst_15904:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f69aa and fs2 == 1 and fe2 == 0x00 and fm2 == 0x66c6f7 and fs3 == 1 and fe3 == 0x64 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f69aa; op2val:0x8066c6f7;
op3val:0xb2000fff; valaddr_reg:x3; val_offset:47712*0 + 3*124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47712*0 + 3*124*FLEN/8, x4, x1, x2)

inst_15905:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f69aa and fs2 == 1 and fe2 == 0x00 and fm2 == 0x66c6f7 and fs3 == 1 and fe3 == 0x64 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f69aa; op2val:0x8066c6f7;
op3val:0xb2001fff; valaddr_reg:x3; val_offset:47715*0 + 3*124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47715*0 + 3*124*FLEN/8, x4, x1, x2)

inst_15906:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f69aa and fs2 == 1 and fe2 == 0x00 and fm2 == 0x66c6f7 and fs3 == 1 and fe3 == 0x64 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f69aa; op2val:0x8066c6f7;
op3val:0xb2003fff; valaddr_reg:x3; val_offset:47718*0 + 3*124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47718*0 + 3*124*FLEN/8, x4, x1, x2)

inst_15907:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f69aa and fs2 == 1 and fe2 == 0x00 and fm2 == 0x66c6f7 and fs3 == 1 and fe3 == 0x64 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f69aa; op2val:0x8066c6f7;
op3val:0xb2007fff; valaddr_reg:x3; val_offset:47721*0 + 3*124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47721*0 + 3*124*FLEN/8, x4, x1, x2)

inst_15908:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f69aa and fs2 == 1 and fe2 == 0x00 and fm2 == 0x66c6f7 and fs3 == 1 and fe3 == 0x64 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f69aa; op2val:0x8066c6f7;
op3val:0xb200ffff; valaddr_reg:x3; val_offset:47724*0 + 3*124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47724*0 + 3*124*FLEN/8, x4, x1, x2)

inst_15909:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f69aa and fs2 == 1 and fe2 == 0x00 and fm2 == 0x66c6f7 and fs3 == 1 and fe3 == 0x64 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f69aa; op2val:0x8066c6f7;
op3val:0xb201ffff; valaddr_reg:x3; val_offset:47727*0 + 3*124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47727*0 + 3*124*FLEN/8, x4, x1, x2)

inst_15910:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f69aa and fs2 == 1 and fe2 == 0x00 and fm2 == 0x66c6f7 and fs3 == 1 and fe3 == 0x64 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f69aa; op2val:0x8066c6f7;
op3val:0xb203ffff; valaddr_reg:x3; val_offset:47730*0 + 3*124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47730*0 + 3*124*FLEN/8, x4, x1, x2)

inst_15911:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f69aa and fs2 == 1 and fe2 == 0x00 and fm2 == 0x66c6f7 and fs3 == 1 and fe3 == 0x64 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f69aa; op2val:0x8066c6f7;
op3val:0xb207ffff; valaddr_reg:x3; val_offset:47733*0 + 3*124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47733*0 + 3*124*FLEN/8, x4, x1, x2)

inst_15912:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f69aa and fs2 == 1 and fe2 == 0x00 and fm2 == 0x66c6f7 and fs3 == 1 and fe3 == 0x64 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f69aa; op2val:0x8066c6f7;
op3val:0xb20fffff; valaddr_reg:x3; val_offset:47736*0 + 3*124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47736*0 + 3*124*FLEN/8, x4, x1, x2)

inst_15913:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f69aa and fs2 == 1 and fe2 == 0x00 and fm2 == 0x66c6f7 and fs3 == 1 and fe3 == 0x64 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f69aa; op2val:0x8066c6f7;
op3val:0xb21fffff; valaddr_reg:x3; val_offset:47739*0 + 3*124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47739*0 + 3*124*FLEN/8, x4, x1, x2)

inst_15914:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f69aa and fs2 == 1 and fe2 == 0x00 and fm2 == 0x66c6f7 and fs3 == 1 and fe3 == 0x64 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f69aa; op2val:0x8066c6f7;
op3val:0xb23fffff; valaddr_reg:x3; val_offset:47742*0 + 3*124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47742*0 + 3*124*FLEN/8, x4, x1, x2)

inst_15915:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f69aa and fs2 == 1 and fe2 == 0x00 and fm2 == 0x66c6f7 and fs3 == 1 and fe3 == 0x64 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f69aa; op2val:0x8066c6f7;
op3val:0xb2400000; valaddr_reg:x3; val_offset:47745*0 + 3*124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47745*0 + 3*124*FLEN/8, x4, x1, x2)

inst_15916:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f69aa and fs2 == 1 and fe2 == 0x00 and fm2 == 0x66c6f7 and fs3 == 1 and fe3 == 0x64 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f69aa; op2val:0x8066c6f7;
op3val:0xb2600000; valaddr_reg:x3; val_offset:47748*0 + 3*124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47748*0 + 3*124*FLEN/8, x4, x1, x2)

inst_15917:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f69aa and fs2 == 1 and fe2 == 0x00 and fm2 == 0x66c6f7 and fs3 == 1 and fe3 == 0x64 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f69aa; op2val:0x8066c6f7;
op3val:0xb2700000; valaddr_reg:x3; val_offset:47751*0 + 3*124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47751*0 + 3*124*FLEN/8, x4, x1, x2)

inst_15918:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f69aa and fs2 == 1 and fe2 == 0x00 and fm2 == 0x66c6f7 and fs3 == 1 and fe3 == 0x64 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f69aa; op2val:0x8066c6f7;
op3val:0xb2780000; valaddr_reg:x3; val_offset:47754*0 + 3*124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47754*0 + 3*124*FLEN/8, x4, x1, x2)

inst_15919:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f69aa and fs2 == 1 and fe2 == 0x00 and fm2 == 0x66c6f7 and fs3 == 1 and fe3 == 0x64 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f69aa; op2val:0x8066c6f7;
op3val:0xb27c0000; valaddr_reg:x3; val_offset:47757*0 + 3*124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47757*0 + 3*124*FLEN/8, x4, x1, x2)

inst_15920:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f69aa and fs2 == 1 and fe2 == 0x00 and fm2 == 0x66c6f7 and fs3 == 1 and fe3 == 0x64 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f69aa; op2val:0x8066c6f7;
op3val:0xb27e0000; valaddr_reg:x3; val_offset:47760*0 + 3*124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47760*0 + 3*124*FLEN/8, x4, x1, x2)

inst_15921:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f69aa and fs2 == 1 and fe2 == 0x00 and fm2 == 0x66c6f7 and fs3 == 1 and fe3 == 0x64 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f69aa; op2val:0x8066c6f7;
op3val:0xb27f0000; valaddr_reg:x3; val_offset:47763*0 + 3*124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47763*0 + 3*124*FLEN/8, x4, x1, x2)

inst_15922:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f69aa and fs2 == 1 and fe2 == 0x00 and fm2 == 0x66c6f7 and fs3 == 1 and fe3 == 0x64 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f69aa; op2val:0x8066c6f7;
op3val:0xb27f8000; valaddr_reg:x3; val_offset:47766*0 + 3*124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47766*0 + 3*124*FLEN/8, x4, x1, x2)

inst_15923:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f69aa and fs2 == 1 and fe2 == 0x00 and fm2 == 0x66c6f7 and fs3 == 1 and fe3 == 0x64 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f69aa; op2val:0x8066c6f7;
op3val:0xb27fc000; valaddr_reg:x3; val_offset:47769*0 + 3*124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47769*0 + 3*124*FLEN/8, x4, x1, x2)

inst_15924:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f69aa and fs2 == 1 and fe2 == 0x00 and fm2 == 0x66c6f7 and fs3 == 1 and fe3 == 0x64 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f69aa; op2val:0x8066c6f7;
op3val:0xb27fe000; valaddr_reg:x3; val_offset:47772*0 + 3*124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47772*0 + 3*124*FLEN/8, x4, x1, x2)

inst_15925:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f69aa and fs2 == 1 and fe2 == 0x00 and fm2 == 0x66c6f7 and fs3 == 1 and fe3 == 0x64 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f69aa; op2val:0x8066c6f7;
op3val:0xb27ff000; valaddr_reg:x3; val_offset:47775*0 + 3*124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47775*0 + 3*124*FLEN/8, x4, x1, x2)

inst_15926:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f69aa and fs2 == 1 and fe2 == 0x00 and fm2 == 0x66c6f7 and fs3 == 1 and fe3 == 0x64 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f69aa; op2val:0x8066c6f7;
op3val:0xb27ff800; valaddr_reg:x3; val_offset:47778*0 + 3*124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47778*0 + 3*124*FLEN/8, x4, x1, x2)

inst_15927:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f69aa and fs2 == 1 and fe2 == 0x00 and fm2 == 0x66c6f7 and fs3 == 1 and fe3 == 0x64 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f69aa; op2val:0x8066c6f7;
op3val:0xb27ffc00; valaddr_reg:x3; val_offset:47781*0 + 3*124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47781*0 + 3*124*FLEN/8, x4, x1, x2)

inst_15928:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f69aa and fs2 == 1 and fe2 == 0x00 and fm2 == 0x66c6f7 and fs3 == 1 and fe3 == 0x64 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f69aa; op2val:0x8066c6f7;
op3val:0xb27ffe00; valaddr_reg:x3; val_offset:47784*0 + 3*124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47784*0 + 3*124*FLEN/8, x4, x1, x2)

inst_15929:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f69aa and fs2 == 1 and fe2 == 0x00 and fm2 == 0x66c6f7 and fs3 == 1 and fe3 == 0x64 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f69aa; op2val:0x8066c6f7;
op3val:0xb27fff00; valaddr_reg:x3; val_offset:47787*0 + 3*124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47787*0 + 3*124*FLEN/8, x4, x1, x2)

inst_15930:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f69aa and fs2 == 1 and fe2 == 0x00 and fm2 == 0x66c6f7 and fs3 == 1 and fe3 == 0x64 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f69aa; op2val:0x8066c6f7;
op3val:0xb27fff80; valaddr_reg:x3; val_offset:47790*0 + 3*124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47790*0 + 3*124*FLEN/8, x4, x1, x2)

inst_15931:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f69aa and fs2 == 1 and fe2 == 0x00 and fm2 == 0x66c6f7 and fs3 == 1 and fe3 == 0x64 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f69aa; op2val:0x8066c6f7;
op3val:0xb27fffc0; valaddr_reg:x3; val_offset:47793*0 + 3*124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47793*0 + 3*124*FLEN/8, x4, x1, x2)

inst_15932:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f69aa and fs2 == 1 and fe2 == 0x00 and fm2 == 0x66c6f7 and fs3 == 1 and fe3 == 0x64 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f69aa; op2val:0x8066c6f7;
op3val:0xb27fffe0; valaddr_reg:x3; val_offset:47796*0 + 3*124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47796*0 + 3*124*FLEN/8, x4, x1, x2)

inst_15933:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f69aa and fs2 == 1 and fe2 == 0x00 and fm2 == 0x66c6f7 and fs3 == 1 and fe3 == 0x64 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f69aa; op2val:0x8066c6f7;
op3val:0xb27ffff0; valaddr_reg:x3; val_offset:47799*0 + 3*124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47799*0 + 3*124*FLEN/8, x4, x1, x2)

inst_15934:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f69aa and fs2 == 1 and fe2 == 0x00 and fm2 == 0x66c6f7 and fs3 == 1 and fe3 == 0x64 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f69aa; op2val:0x8066c6f7;
op3val:0xb27ffff8; valaddr_reg:x3; val_offset:47802*0 + 3*124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47802*0 + 3*124*FLEN/8, x4, x1, x2)

inst_15935:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f69aa and fs2 == 1 and fe2 == 0x00 and fm2 == 0x66c6f7 and fs3 == 1 and fe3 == 0x64 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f69aa; op2val:0x8066c6f7;
op3val:0xb27ffffc; valaddr_reg:x3; val_offset:47805*0 + 3*124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47805*0 + 3*124*FLEN/8, x4, x1, x2)

inst_15936:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f69aa and fs2 == 1 and fe2 == 0x00 and fm2 == 0x66c6f7 and fs3 == 1 and fe3 == 0x64 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f69aa; op2val:0x8066c6f7;
op3val:0xb27ffffe; valaddr_reg:x3; val_offset:47808*0 + 3*124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47808*0 + 3*124*FLEN/8, x4, x1, x2)

inst_15937:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f69aa and fs2 == 1 and fe2 == 0x00 and fm2 == 0x66c6f7 and fs3 == 1 and fe3 == 0x64 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f69aa; op2val:0x8066c6f7;
op3val:0xb27fffff; valaddr_reg:x3; val_offset:47811*0 + 3*124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47811*0 + 3*124*FLEN/8, x4, x1, x2)

inst_15938:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f69aa and fs2 == 1 and fe2 == 0x00 and fm2 == 0x66c6f7 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f69aa; op2val:0x8066c6f7;
op3val:0xbf800001; valaddr_reg:x3; val_offset:47814*0 + 3*124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47814*0 + 3*124*FLEN/8, x4, x1, x2)

inst_15939:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f69aa and fs2 == 1 and fe2 == 0x00 and fm2 == 0x66c6f7 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f69aa; op2val:0x8066c6f7;
op3val:0xbf800003; valaddr_reg:x3; val_offset:47817*0 + 3*124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47817*0 + 3*124*FLEN/8, x4, x1, x2)

inst_15940:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f69aa and fs2 == 1 and fe2 == 0x00 and fm2 == 0x66c6f7 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f69aa; op2val:0x8066c6f7;
op3val:0xbf800007; valaddr_reg:x3; val_offset:47820*0 + 3*124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47820*0 + 3*124*FLEN/8, x4, x1, x2)

inst_15941:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f69aa and fs2 == 1 and fe2 == 0x00 and fm2 == 0x66c6f7 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f69aa; op2val:0x8066c6f7;
op3val:0xbf999999; valaddr_reg:x3; val_offset:47823*0 + 3*124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47823*0 + 3*124*FLEN/8, x4, x1, x2)

inst_15942:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f69aa and fs2 == 1 and fe2 == 0x00 and fm2 == 0x66c6f7 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f69aa; op2val:0x8066c6f7;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:47826*0 + 3*124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47826*0 + 3*124*FLEN/8, x4, x1, x2)

inst_15943:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f69aa and fs2 == 1 and fe2 == 0x00 and fm2 == 0x66c6f7 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f69aa; op2val:0x8066c6f7;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:47829*0 + 3*124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47829*0 + 3*124*FLEN/8, x4, x1, x2)

inst_15944:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f69aa and fs2 == 1 and fe2 == 0x00 and fm2 == 0x66c6f7 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f69aa; op2val:0x8066c6f7;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:47832*0 + 3*124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47832*0 + 3*124*FLEN/8, x4, x1, x2)

inst_15945:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f69aa and fs2 == 1 and fe2 == 0x00 and fm2 == 0x66c6f7 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f69aa; op2val:0x8066c6f7;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:47835*0 + 3*124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47835*0 + 3*124*FLEN/8, x4, x1, x2)

inst_15946:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f69aa and fs2 == 1 and fe2 == 0x00 and fm2 == 0x66c6f7 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f69aa; op2val:0x8066c6f7;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:47838*0 + 3*124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47838*0 + 3*124*FLEN/8, x4, x1, x2)

inst_15947:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f69aa and fs2 == 1 and fe2 == 0x00 and fm2 == 0x66c6f7 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f69aa; op2val:0x8066c6f7;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:47841*0 + 3*124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47841*0 + 3*124*FLEN/8, x4, x1, x2)

inst_15948:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f69aa and fs2 == 1 and fe2 == 0x00 and fm2 == 0x66c6f7 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f69aa; op2val:0x8066c6f7;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:47844*0 + 3*124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47844*0 + 3*124*FLEN/8, x4, x1, x2)

inst_15949:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f69aa and fs2 == 1 and fe2 == 0x00 and fm2 == 0x66c6f7 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f69aa; op2val:0x8066c6f7;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:47847*0 + 3*124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47847*0 + 3*124*FLEN/8, x4, x1, x2)

inst_15950:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f69aa and fs2 == 1 and fe2 == 0x00 and fm2 == 0x66c6f7 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f69aa; op2val:0x8066c6f7;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:47850*0 + 3*124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47850*0 + 3*124*FLEN/8, x4, x1, x2)

inst_15951:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f69aa and fs2 == 1 and fe2 == 0x00 and fm2 == 0x66c6f7 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f69aa; op2val:0x8066c6f7;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:47853*0 + 3*124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47853*0 + 3*124*FLEN/8, x4, x1, x2)

inst_15952:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f69aa and fs2 == 1 and fe2 == 0x00 and fm2 == 0x66c6f7 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f69aa; op2val:0x8066c6f7;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:47856*0 + 3*124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47856*0 + 3*124*FLEN/8, x4, x1, x2)

inst_15953:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f69aa and fs2 == 1 and fe2 == 0x00 and fm2 == 0x66c6f7 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f69aa; op2val:0x8066c6f7;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:47859*0 + 3*124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47859*0 + 3*124*FLEN/8, x4, x1, x2)

inst_15954:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f9b30 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f9b30; op2val:0x80000000;
op3val:0x80800001; valaddr_reg:x3; val_offset:47862*0 + 3*124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47862*0 + 3*124*FLEN/8, x4, x1, x2)

inst_15955:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f9b30 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f9b30; op2val:0x80000000;
op3val:0x80800003; valaddr_reg:x3; val_offset:47865*0 + 3*124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47865*0 + 3*124*FLEN/8, x4, x1, x2)

inst_15956:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f9b30 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f9b30; op2val:0x80000000;
op3val:0x80800007; valaddr_reg:x3; val_offset:47868*0 + 3*124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47868*0 + 3*124*FLEN/8, x4, x1, x2)

inst_15957:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f9b30 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f9b30; op2val:0x80000000;
op3val:0x80999999; valaddr_reg:x3; val_offset:47871*0 + 3*124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47871*0 + 3*124*FLEN/8, x4, x1, x2)

inst_15958:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f9b30 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f9b30; op2val:0x80000000;
op3val:0x80a49249; valaddr_reg:x3; val_offset:47874*0 + 3*124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47874*0 + 3*124*FLEN/8, x4, x1, x2)

inst_15959:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f9b30 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f9b30; op2val:0x80000000;
op3val:0x80b33333; valaddr_reg:x3; val_offset:47877*0 + 3*124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47877*0 + 3*124*FLEN/8, x4, x1, x2)

inst_15960:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f9b30 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f9b30; op2val:0x80000000;
op3val:0x80b6db6d; valaddr_reg:x3; val_offset:47880*0 + 3*124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47880*0 + 3*124*FLEN/8, x4, x1, x2)

inst_15961:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f9b30 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f9b30; op2val:0x80000000;
op3val:0x80bbbbbb; valaddr_reg:x3; val_offset:47883*0 + 3*124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47883*0 + 3*124*FLEN/8, x4, x1, x2)

inst_15962:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f9b30 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f9b30; op2val:0x80000000;
op3val:0x80c44444; valaddr_reg:x3; val_offset:47886*0 + 3*124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47886*0 + 3*124*FLEN/8, x4, x1, x2)

inst_15963:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f9b30 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f9b30; op2val:0x80000000;
op3val:0x80cccccc; valaddr_reg:x3; val_offset:47889*0 + 3*124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47889*0 + 3*124*FLEN/8, x4, x1, x2)

inst_15964:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f9b30 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f9b30; op2val:0x80000000;
op3val:0x80db6db6; valaddr_reg:x3; val_offset:47892*0 + 3*124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47892*0 + 3*124*FLEN/8, x4, x1, x2)

inst_15965:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f9b30 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f9b30; op2val:0x80000000;
op3val:0x80e66666; valaddr_reg:x3; val_offset:47895*0 + 3*124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47895*0 + 3*124*FLEN/8, x4, x1, x2)

inst_15966:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f9b30 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f9b30; op2val:0x80000000;
op3val:0x80edb6db; valaddr_reg:x3; val_offset:47898*0 + 3*124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47898*0 + 3*124*FLEN/8, x4, x1, x2)

inst_15967:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f9b30 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f9b30; op2val:0x80000000;
op3val:0x80fffff8; valaddr_reg:x3; val_offset:47901*0 + 3*124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47901*0 + 3*124*FLEN/8, x4, x1, x2)

inst_15968:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f9b30 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f9b30; op2val:0x80000000;
op3val:0x80fffffc; valaddr_reg:x3; val_offset:47904*0 + 3*124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47904*0 + 3*124*FLEN/8, x4, x1, x2)

inst_15969:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f9b30 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f9b30; op2val:0x80000000;
op3val:0x80fffffe; valaddr_reg:x3; val_offset:47907*0 + 3*124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47907*0 + 3*124*FLEN/8, x4, x1, x2)

inst_15970:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f9b30 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f9b30; op2val:0x80000000;
op3val:0x8f800000; valaddr_reg:x3; val_offset:47910*0 + 3*124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47910*0 + 3*124*FLEN/8, x4, x1, x2)

inst_15971:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f9b30 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f9b30; op2val:0x80000000;
op3val:0x8f800001; valaddr_reg:x3; val_offset:47913*0 + 3*124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47913*0 + 3*124*FLEN/8, x4, x1, x2)

inst_15972:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f9b30 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f9b30; op2val:0x80000000;
op3val:0x8f800003; valaddr_reg:x3; val_offset:47916*0 + 3*124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47916*0 + 3*124*FLEN/8, x4, x1, x2)

inst_15973:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f9b30 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f9b30; op2val:0x80000000;
op3val:0x8f800007; valaddr_reg:x3; val_offset:47919*0 + 3*124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47919*0 + 3*124*FLEN/8, x4, x1, x2)

inst_15974:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f9b30 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f9b30; op2val:0x80000000;
op3val:0x8f80000f; valaddr_reg:x3; val_offset:47922*0 + 3*124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47922*0 + 3*124*FLEN/8, x4, x1, x2)

inst_15975:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f9b30 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f9b30; op2val:0x80000000;
op3val:0x8f80001f; valaddr_reg:x3; val_offset:47925*0 + 3*124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47925*0 + 3*124*FLEN/8, x4, x1, x2)

inst_15976:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f9b30 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f9b30; op2val:0x80000000;
op3val:0x8f80003f; valaddr_reg:x3; val_offset:47928*0 + 3*124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47928*0 + 3*124*FLEN/8, x4, x1, x2)

inst_15977:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f9b30 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f9b30; op2val:0x80000000;
op3val:0x8f80007f; valaddr_reg:x3; val_offset:47931*0 + 3*124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47931*0 + 3*124*FLEN/8, x4, x1, x2)

inst_15978:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f9b30 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f9b30; op2val:0x80000000;
op3val:0x8f8000ff; valaddr_reg:x3; val_offset:47934*0 + 3*124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47934*0 + 3*124*FLEN/8, x4, x1, x2)

inst_15979:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f9b30 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f9b30; op2val:0x80000000;
op3val:0x8f8001ff; valaddr_reg:x3; val_offset:47937*0 + 3*124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47937*0 + 3*124*FLEN/8, x4, x1, x2)

inst_15980:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f9b30 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f9b30; op2val:0x80000000;
op3val:0x8f8003ff; valaddr_reg:x3; val_offset:47940*0 + 3*124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47940*0 + 3*124*FLEN/8, x4, x1, x2)

inst_15981:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f9b30 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f9b30; op2val:0x80000000;
op3val:0x8f8007ff; valaddr_reg:x3; val_offset:47943*0 + 3*124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47943*0 + 3*124*FLEN/8, x4, x1, x2)

inst_15982:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f9b30 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f9b30; op2val:0x80000000;
op3val:0x8f800fff; valaddr_reg:x3; val_offset:47946*0 + 3*124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47946*0 + 3*124*FLEN/8, x4, x1, x2)

inst_15983:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f9b30 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f9b30; op2val:0x80000000;
op3val:0x8f801fff; valaddr_reg:x3; val_offset:47949*0 + 3*124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47949*0 + 3*124*FLEN/8, x4, x1, x2)

inst_15984:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f9b30 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f9b30; op2val:0x80000000;
op3val:0x8f803fff; valaddr_reg:x3; val_offset:47952*0 + 3*124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47952*0 + 3*124*FLEN/8, x4, x1, x2)

inst_15985:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f9b30 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f9b30; op2val:0x80000000;
op3val:0x8f807fff; valaddr_reg:x3; val_offset:47955*0 + 3*124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47955*0 + 3*124*FLEN/8, x4, x1, x2)

inst_15986:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f9b30 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f9b30; op2val:0x80000000;
op3val:0x8f80ffff; valaddr_reg:x3; val_offset:47958*0 + 3*124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47958*0 + 3*124*FLEN/8, x4, x1, x2)

inst_15987:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f9b30 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f9b30; op2val:0x80000000;
op3val:0x8f81ffff; valaddr_reg:x3; val_offset:47961*0 + 3*124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47961*0 + 3*124*FLEN/8, x4, x1, x2)

inst_15988:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f9b30 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f9b30; op2val:0x80000000;
op3val:0x8f83ffff; valaddr_reg:x3; val_offset:47964*0 + 3*124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47964*0 + 3*124*FLEN/8, x4, x1, x2)

inst_15989:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f9b30 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f9b30; op2val:0x80000000;
op3val:0x8f87ffff; valaddr_reg:x3; val_offset:47967*0 + 3*124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47967*0 + 3*124*FLEN/8, x4, x1, x2)

inst_15990:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f9b30 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f9b30; op2val:0x80000000;
op3val:0x8f8fffff; valaddr_reg:x3; val_offset:47970*0 + 3*124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47970*0 + 3*124*FLEN/8, x4, x1, x2)

inst_15991:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f9b30 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f9b30; op2val:0x80000000;
op3val:0x8f9fffff; valaddr_reg:x3; val_offset:47973*0 + 3*124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47973*0 + 3*124*FLEN/8, x4, x1, x2)

inst_15992:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f9b30 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f9b30; op2val:0x80000000;
op3val:0x8fbfffff; valaddr_reg:x3; val_offset:47976*0 + 3*124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47976*0 + 3*124*FLEN/8, x4, x1, x2)

inst_15993:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f9b30 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f9b30; op2val:0x80000000;
op3val:0x8fc00000; valaddr_reg:x3; val_offset:47979*0 + 3*124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47979*0 + 3*124*FLEN/8, x4, x1, x2)

inst_15994:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f9b30 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f9b30; op2val:0x80000000;
op3val:0x8fe00000; valaddr_reg:x3; val_offset:47982*0 + 3*124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47982*0 + 3*124*FLEN/8, x4, x1, x2)

inst_15995:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f9b30 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f9b30; op2val:0x80000000;
op3val:0x8ff00000; valaddr_reg:x3; val_offset:47985*0 + 3*124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47985*0 + 3*124*FLEN/8, x4, x1, x2)

inst_15996:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f9b30 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f9b30; op2val:0x80000000;
op3val:0x8ff80000; valaddr_reg:x3; val_offset:47988*0 + 3*124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47988*0 + 3*124*FLEN/8, x4, x1, x2)

inst_15997:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f9b30 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f9b30; op2val:0x80000000;
op3val:0x8ffc0000; valaddr_reg:x3; val_offset:47991*0 + 3*124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47991*0 + 3*124*FLEN/8, x4, x1, x2)

inst_15998:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f9b30 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f9b30; op2val:0x80000000;
op3val:0x8ffe0000; valaddr_reg:x3; val_offset:47994*0 + 3*124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47994*0 + 3*124*FLEN/8, x4, x1, x2)

inst_15999:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f9b30 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f9b30; op2val:0x80000000;
op3val:0x8fff0000; valaddr_reg:x3; val_offset:47997*0 + 3*124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47997*0 + 3*124*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2124368764,32,FLEN)
NAN_BOXED(3226318048,32,FLEN)
NAN_BOXED(4253024248,32,FLEN)
NAN_BOXED(2124368764,32,FLEN)
NAN_BOXED(3226318048,32,FLEN)
NAN_BOXED(4253024252,32,FLEN)
NAN_BOXED(2124368764,32,FLEN)
NAN_BOXED(3226318048,32,FLEN)
NAN_BOXED(4253024254,32,FLEN)
NAN_BOXED(2124368764,32,FLEN)
NAN_BOXED(3226318048,32,FLEN)
NAN_BOXED(4253024255,32,FLEN)
NAN_BOXED(2124368764,32,FLEN)
NAN_BOXED(3226318048,32,FLEN)
NAN_BOXED(4278190081,32,FLEN)
NAN_BOXED(2124368764,32,FLEN)
NAN_BOXED(3226318048,32,FLEN)
NAN_BOXED(4278190083,32,FLEN)
NAN_BOXED(2124368764,32,FLEN)
NAN_BOXED(3226318048,32,FLEN)
NAN_BOXED(4278190087,32,FLEN)
NAN_BOXED(2124368764,32,FLEN)
NAN_BOXED(3226318048,32,FLEN)
NAN_BOXED(4279867801,32,FLEN)
NAN_BOXED(2124368764,32,FLEN)
NAN_BOXED(3226318048,32,FLEN)
NAN_BOXED(4280586825,32,FLEN)
NAN_BOXED(2124368764,32,FLEN)
NAN_BOXED(3226318048,32,FLEN)
NAN_BOXED(4281545523,32,FLEN)
NAN_BOXED(2124368764,32,FLEN)
NAN_BOXED(3226318048,32,FLEN)
NAN_BOXED(4281785197,32,FLEN)
NAN_BOXED(2124368764,32,FLEN)
NAN_BOXED(3226318048,32,FLEN)
NAN_BOXED(4282104763,32,FLEN)
NAN_BOXED(2124368764,32,FLEN)
NAN_BOXED(3226318048,32,FLEN)
NAN_BOXED(4282664004,32,FLEN)
NAN_BOXED(2124368764,32,FLEN)
NAN_BOXED(3226318048,32,FLEN)
NAN_BOXED(4283223244,32,FLEN)
NAN_BOXED(2124368764,32,FLEN)
NAN_BOXED(3226318048,32,FLEN)
NAN_BOXED(4284181942,32,FLEN)
NAN_BOXED(2124368764,32,FLEN)
NAN_BOXED(3226318048,32,FLEN)
NAN_BOXED(4284900966,32,FLEN)
NAN_BOXED(2124368764,32,FLEN)
NAN_BOXED(3226318048,32,FLEN)
NAN_BOXED(4285380315,32,FLEN)
NAN_BOXED(2124368764,32,FLEN)
NAN_BOXED(3226318048,32,FLEN)
NAN_BOXED(4286578680,32,FLEN)
NAN_BOXED(2124368764,32,FLEN)
NAN_BOXED(3226318048,32,FLEN)
NAN_BOXED(4286578684,32,FLEN)
NAN_BOXED(2124368764,32,FLEN)
NAN_BOXED(3226318048,32,FLEN)
NAN_BOXED(4286578686,32,FLEN)
NAN_BOXED(2124376490,32,FLEN)
NAN_BOXED(2154219255,32,FLEN)
NAN_BOXED(2986344448,32,FLEN)
NAN_BOXED(2124376490,32,FLEN)
NAN_BOXED(2154219255,32,FLEN)
NAN_BOXED(2986344449,32,FLEN)
NAN_BOXED(2124376490,32,FLEN)
NAN_BOXED(2154219255,32,FLEN)
NAN_BOXED(2986344451,32,FLEN)
NAN_BOXED(2124376490,32,FLEN)
NAN_BOXED(2154219255,32,FLEN)
NAN_BOXED(2986344455,32,FLEN)
NAN_BOXED(2124376490,32,FLEN)
NAN_BOXED(2154219255,32,FLEN)
NAN_BOXED(2986344463,32,FLEN)
NAN_BOXED(2124376490,32,FLEN)
NAN_BOXED(2154219255,32,FLEN)
NAN_BOXED(2986344479,32,FLEN)
NAN_BOXED(2124376490,32,FLEN)
NAN_BOXED(2154219255,32,FLEN)
NAN_BOXED(2986344511,32,FLEN)
NAN_BOXED(2124376490,32,FLEN)
NAN_BOXED(2154219255,32,FLEN)
NAN_BOXED(2986344575,32,FLEN)
NAN_BOXED(2124376490,32,FLEN)
NAN_BOXED(2154219255,32,FLEN)
NAN_BOXED(2986344703,32,FLEN)
NAN_BOXED(2124376490,32,FLEN)
NAN_BOXED(2154219255,32,FLEN)
NAN_BOXED(2986344959,32,FLEN)
NAN_BOXED(2124376490,32,FLEN)
NAN_BOXED(2154219255,32,FLEN)
NAN_BOXED(2986345471,32,FLEN)
NAN_BOXED(2124376490,32,FLEN)
NAN_BOXED(2154219255,32,FLEN)
NAN_BOXED(2986346495,32,FLEN)
NAN_BOXED(2124376490,32,FLEN)
NAN_BOXED(2154219255,32,FLEN)
NAN_BOXED(2986348543,32,FLEN)
NAN_BOXED(2124376490,32,FLEN)
NAN_BOXED(2154219255,32,FLEN)
NAN_BOXED(2986352639,32,FLEN)
NAN_BOXED(2124376490,32,FLEN)
NAN_BOXED(2154219255,32,FLEN)
NAN_BOXED(2986360831,32,FLEN)
NAN_BOXED(2124376490,32,FLEN)
NAN_BOXED(2154219255,32,FLEN)
NAN_BOXED(2986377215,32,FLEN)
NAN_BOXED(2124376490,32,FLEN)
NAN_BOXED(2154219255,32,FLEN)
NAN_BOXED(2986409983,32,FLEN)
NAN_BOXED(2124376490,32,FLEN)
NAN_BOXED(2154219255,32,FLEN)
NAN_BOXED(2986475519,32,FLEN)
NAN_BOXED(2124376490,32,FLEN)
NAN_BOXED(2154219255,32,FLEN)
NAN_BOXED(2986606591,32,FLEN)
NAN_BOXED(2124376490,32,FLEN)
NAN_BOXED(2154219255,32,FLEN)
NAN_BOXED(2986868735,32,FLEN)
NAN_BOXED(2124376490,32,FLEN)
NAN_BOXED(2154219255,32,FLEN)
NAN_BOXED(2987393023,32,FLEN)
NAN_BOXED(2124376490,32,FLEN)
NAN_BOXED(2154219255,32,FLEN)
NAN_BOXED(2988441599,32,FLEN)
NAN_BOXED(2124376490,32,FLEN)
NAN_BOXED(2154219255,32,FLEN)
NAN_BOXED(2990538751,32,FLEN)
NAN_BOXED(2124376490,32,FLEN)
NAN_BOXED(2154219255,32,FLEN)
NAN_BOXED(2990538752,32,FLEN)
NAN_BOXED(2124376490,32,FLEN)
NAN_BOXED(2154219255,32,FLEN)
NAN_BOXED(2992635904,32,FLEN)
NAN_BOXED(2124376490,32,FLEN)
NAN_BOXED(2154219255,32,FLEN)
NAN_BOXED(2993684480,32,FLEN)
NAN_BOXED(2124376490,32,FLEN)
NAN_BOXED(2154219255,32,FLEN)
NAN_BOXED(2994208768,32,FLEN)
NAN_BOXED(2124376490,32,FLEN)
NAN_BOXED(2154219255,32,FLEN)
NAN_BOXED(2994470912,32,FLEN)
NAN_BOXED(2124376490,32,FLEN)
NAN_BOXED(2154219255,32,FLEN)
NAN_BOXED(2994601984,32,FLEN)
NAN_BOXED(2124376490,32,FLEN)
NAN_BOXED(2154219255,32,FLEN)
NAN_BOXED(2994667520,32,FLEN)
NAN_BOXED(2124376490,32,FLEN)
NAN_BOXED(2154219255,32,FLEN)
NAN_BOXED(2994700288,32,FLEN)
NAN_BOXED(2124376490,32,FLEN)
NAN_BOXED(2154219255,32,FLEN)
NAN_BOXED(2994716672,32,FLEN)
NAN_BOXED(2124376490,32,FLEN)
NAN_BOXED(2154219255,32,FLEN)
NAN_BOXED(2994724864,32,FLEN)
NAN_BOXED(2124376490,32,FLEN)
NAN_BOXED(2154219255,32,FLEN)
NAN_BOXED(2994728960,32,FLEN)
NAN_BOXED(2124376490,32,FLEN)
NAN_BOXED(2154219255,32,FLEN)
NAN_BOXED(2994731008,32,FLEN)
NAN_BOXED(2124376490,32,FLEN)
NAN_BOXED(2154219255,32,FLEN)
NAN_BOXED(2994732032,32,FLEN)
NAN_BOXED(2124376490,32,FLEN)
NAN_BOXED(2154219255,32,FLEN)
NAN_BOXED(2994732544,32,FLEN)
NAN_BOXED(2124376490,32,FLEN)
NAN_BOXED(2154219255,32,FLEN)
NAN_BOXED(2994732800,32,FLEN)
NAN_BOXED(2124376490,32,FLEN)
NAN_BOXED(2154219255,32,FLEN)
NAN_BOXED(2994732928,32,FLEN)
NAN_BOXED(2124376490,32,FLEN)
NAN_BOXED(2154219255,32,FLEN)
NAN_BOXED(2994732992,32,FLEN)
NAN_BOXED(2124376490,32,FLEN)
NAN_BOXED(2154219255,32,FLEN)
NAN_BOXED(2994733024,32,FLEN)
NAN_BOXED(2124376490,32,FLEN)
NAN_BOXED(2154219255,32,FLEN)
NAN_BOXED(2994733040,32,FLEN)
NAN_BOXED(2124376490,32,FLEN)
NAN_BOXED(2154219255,32,FLEN)
NAN_BOXED(2994733048,32,FLEN)
NAN_BOXED(2124376490,32,FLEN)
NAN_BOXED(2154219255,32,FLEN)
NAN_BOXED(2994733052,32,FLEN)
NAN_BOXED(2124376490,32,FLEN)
NAN_BOXED(2154219255,32,FLEN)
NAN_BOXED(2994733054,32,FLEN)
NAN_BOXED(2124376490,32,FLEN)
NAN_BOXED(2154219255,32,FLEN)
NAN_BOXED(2994733055,32,FLEN)
NAN_BOXED(2124376490,32,FLEN)
NAN_BOXED(2154219255,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2124376490,32,FLEN)
NAN_BOXED(2154219255,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2124376490,32,FLEN)
NAN_BOXED(2154219255,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
NAN_BOXED(2124376490,32,FLEN)
NAN_BOXED(2154219255,32,FLEN)
NAN_BOXED(3214514585,32,FLEN)
NAN_BOXED(2124376490,32,FLEN)
NAN_BOXED(2154219255,32,FLEN)
NAN_BOXED(3215233609,32,FLEN)
NAN_BOXED(2124376490,32,FLEN)
NAN_BOXED(2154219255,32,FLEN)
NAN_BOXED(3216192307,32,FLEN)
NAN_BOXED(2124376490,32,FLEN)
NAN_BOXED(2154219255,32,FLEN)
NAN_BOXED(3216431981,32,FLEN)
NAN_BOXED(2124376490,32,FLEN)
NAN_BOXED(2154219255,32,FLEN)
NAN_BOXED(3216751547,32,FLEN)
NAN_BOXED(2124376490,32,FLEN)
NAN_BOXED(2154219255,32,FLEN)
NAN_BOXED(3217310788,32,FLEN)
NAN_BOXED(2124376490,32,FLEN)
NAN_BOXED(2154219255,32,FLEN)
NAN_BOXED(3217870028,32,FLEN)
NAN_BOXED(2124376490,32,FLEN)
NAN_BOXED(2154219255,32,FLEN)
NAN_BOXED(3218828726,32,FLEN)
NAN_BOXED(2124376490,32,FLEN)
NAN_BOXED(2154219255,32,FLEN)
NAN_BOXED(3219547750,32,FLEN)
NAN_BOXED(2124376490,32,FLEN)
NAN_BOXED(2154219255,32,FLEN)
NAN_BOXED(3220027099,32,FLEN)
NAN_BOXED(2124376490,32,FLEN)
NAN_BOXED(2154219255,32,FLEN)
NAN_BOXED(3221225464,32,FLEN)
NAN_BOXED(2124376490,32,FLEN)
NAN_BOXED(2154219255,32,FLEN)
NAN_BOXED(3221225468,32,FLEN)
NAN_BOXED(2124376490,32,FLEN)
NAN_BOXED(2154219255,32,FLEN)
NAN_BOXED(3221225470,32,FLEN)
NAN_BOXED(2124389168,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872257,32,FLEN)
NAN_BOXED(2124389168,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872259,32,FLEN)
NAN_BOXED(2124389168,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872263,32,FLEN)
NAN_BOXED(2124389168,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2157549977,32,FLEN)
NAN_BOXED(2124389168,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2158269001,32,FLEN)
NAN_BOXED(2124389168,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2159227699,32,FLEN)
NAN_BOXED(2124389168,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2159467373,32,FLEN)
NAN_BOXED(2124389168,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2159786939,32,FLEN)
NAN_BOXED(2124389168,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2160346180,32,FLEN)
NAN_BOXED(2124389168,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2160905420,32,FLEN)
NAN_BOXED(2124389168,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2161864118,32,FLEN)
NAN_BOXED(2124389168,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2162583142,32,FLEN)
NAN_BOXED(2124389168,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2163062491,32,FLEN)
NAN_BOXED(2124389168,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260856,32,FLEN)
NAN_BOXED(2124389168,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260860,32,FLEN)
NAN_BOXED(2124389168,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260862,32,FLEN)
NAN_BOXED(2124389168,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407530496,32,FLEN)
NAN_BOXED(2124389168,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407530497,32,FLEN)
NAN_BOXED(2124389168,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407530499,32,FLEN)
NAN_BOXED(2124389168,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407530503,32,FLEN)
NAN_BOXED(2124389168,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407530511,32,FLEN)
NAN_BOXED(2124389168,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407530527,32,FLEN)
NAN_BOXED(2124389168,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407530559,32,FLEN)
NAN_BOXED(2124389168,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407530623,32,FLEN)
NAN_BOXED(2124389168,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407530751,32,FLEN)
NAN_BOXED(2124389168,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407531007,32,FLEN)
NAN_BOXED(2124389168,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407531519,32,FLEN)
NAN_BOXED(2124389168,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407532543,32,FLEN)
NAN_BOXED(2124389168,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407534591,32,FLEN)
NAN_BOXED(2124389168,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407538687,32,FLEN)
NAN_BOXED(2124389168,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407546879,32,FLEN)
NAN_BOXED(2124389168,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407563263,32,FLEN)
NAN_BOXED(2124389168,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407596031,32,FLEN)
NAN_BOXED(2124389168,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407661567,32,FLEN)
NAN_BOXED(2124389168,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407792639,32,FLEN)
NAN_BOXED(2124389168,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2408054783,32,FLEN)
NAN_BOXED(2124389168,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2408579071,32,FLEN)
NAN_BOXED(2124389168,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2409627647,32,FLEN)
NAN_BOXED(2124389168,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2411724799,32,FLEN)
NAN_BOXED(2124389168,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2411724800,32,FLEN)
NAN_BOXED(2124389168,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2413821952,32,FLEN)
NAN_BOXED(2124389168,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2414870528,32,FLEN)
NAN_BOXED(2124389168,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2415394816,32,FLEN)
NAN_BOXED(2124389168,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2415656960,32,FLEN)
NAN_BOXED(2124389168,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2415788032,32,FLEN)
NAN_BOXED(2124389168,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2415853568,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
