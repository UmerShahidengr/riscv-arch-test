
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:17:59 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_16256:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x207367 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea07367; op2val:0x80000000;
op3val:0x859fffff; valaddr_reg:x3; val_offset:48768*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48768*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16257:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x207367 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea07367; op2val:0x80000000;
op3val:0x85bfffff; valaddr_reg:x3; val_offset:48771*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48771*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16258:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x207367 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea07367; op2val:0x80000000;
op3val:0x85c00000; valaddr_reg:x3; val_offset:48774*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48774*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16259:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x207367 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea07367; op2val:0x80000000;
op3val:0x85e00000; valaddr_reg:x3; val_offset:48777*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48777*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16260:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x207367 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea07367; op2val:0x80000000;
op3val:0x85f00000; valaddr_reg:x3; val_offset:48780*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48780*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16261:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x207367 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea07367; op2val:0x80000000;
op3val:0x85f80000; valaddr_reg:x3; val_offset:48783*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48783*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16262:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x207367 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea07367; op2val:0x80000000;
op3val:0x85fc0000; valaddr_reg:x3; val_offset:48786*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48786*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16263:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x207367 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea07367; op2val:0x80000000;
op3val:0x85fe0000; valaddr_reg:x3; val_offset:48789*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48789*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16264:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x207367 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea07367; op2val:0x80000000;
op3val:0x85ff0000; valaddr_reg:x3; val_offset:48792*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48792*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16265:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x207367 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea07367; op2val:0x80000000;
op3val:0x85ff8000; valaddr_reg:x3; val_offset:48795*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48795*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16266:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x207367 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea07367; op2val:0x80000000;
op3val:0x85ffc000; valaddr_reg:x3; val_offset:48798*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48798*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16267:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x207367 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea07367; op2val:0x80000000;
op3val:0x85ffe000; valaddr_reg:x3; val_offset:48801*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48801*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16268:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x207367 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea07367; op2val:0x80000000;
op3val:0x85fff000; valaddr_reg:x3; val_offset:48804*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48804*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16269:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x207367 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea07367; op2val:0x80000000;
op3val:0x85fff800; valaddr_reg:x3; val_offset:48807*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48807*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16270:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x207367 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea07367; op2val:0x80000000;
op3val:0x85fffc00; valaddr_reg:x3; val_offset:48810*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48810*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16271:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x207367 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea07367; op2val:0x80000000;
op3val:0x85fffe00; valaddr_reg:x3; val_offset:48813*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48813*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16272:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x207367 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea07367; op2val:0x80000000;
op3val:0x85ffff00; valaddr_reg:x3; val_offset:48816*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48816*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16273:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x207367 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea07367; op2val:0x80000000;
op3val:0x85ffff80; valaddr_reg:x3; val_offset:48819*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48819*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16274:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x207367 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea07367; op2val:0x80000000;
op3val:0x85ffffc0; valaddr_reg:x3; val_offset:48822*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48822*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16275:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x207367 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea07367; op2val:0x80000000;
op3val:0x85ffffe0; valaddr_reg:x3; val_offset:48825*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48825*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16276:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x207367 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea07367; op2val:0x80000000;
op3val:0x85fffff0; valaddr_reg:x3; val_offset:48828*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48828*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16277:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x207367 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea07367; op2val:0x80000000;
op3val:0x85fffff8; valaddr_reg:x3; val_offset:48831*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48831*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16278:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x207367 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea07367; op2val:0x80000000;
op3val:0x85fffffc; valaddr_reg:x3; val_offset:48834*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48834*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16279:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x207367 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea07367; op2val:0x80000000;
op3val:0x85fffffe; valaddr_reg:x3; val_offset:48837*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48837*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16280:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x207367 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea07367; op2val:0x80000000;
op3val:0x85ffffff; valaddr_reg:x3; val_offset:48840*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48840*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16281:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2075e6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea075e6; op2val:0x0;
op3val:0x800000; valaddr_reg:x3; val_offset:48843*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48843*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16282:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2075e6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea075e6; op2val:0x0;
op3val:0x800001; valaddr_reg:x3; val_offset:48846*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48846*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16283:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2075e6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea075e6; op2val:0x0;
op3val:0x800003; valaddr_reg:x3; val_offset:48849*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48849*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16284:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2075e6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea075e6; op2val:0x0;
op3val:0x800007; valaddr_reg:x3; val_offset:48852*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48852*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16285:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2075e6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea075e6; op2val:0x0;
op3val:0x80000f; valaddr_reg:x3; val_offset:48855*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48855*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16286:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2075e6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea075e6; op2val:0x0;
op3val:0x80001f; valaddr_reg:x3; val_offset:48858*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48858*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16287:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2075e6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea075e6; op2val:0x0;
op3val:0x80003f; valaddr_reg:x3; val_offset:48861*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48861*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16288:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2075e6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea075e6; op2val:0x0;
op3val:0x80007f; valaddr_reg:x3; val_offset:48864*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48864*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16289:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2075e6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea075e6; op2val:0x0;
op3val:0x8000ff; valaddr_reg:x3; val_offset:48867*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48867*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16290:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2075e6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea075e6; op2val:0x0;
op3val:0x8001ff; valaddr_reg:x3; val_offset:48870*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48870*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16291:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2075e6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea075e6; op2val:0x0;
op3val:0x8003ff; valaddr_reg:x3; val_offset:48873*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48873*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16292:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2075e6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea075e6; op2val:0x0;
op3val:0x8007ff; valaddr_reg:x3; val_offset:48876*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48876*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16293:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2075e6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea075e6; op2val:0x0;
op3val:0x800fff; valaddr_reg:x3; val_offset:48879*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48879*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16294:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2075e6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea075e6; op2val:0x0;
op3val:0x801fff; valaddr_reg:x3; val_offset:48882*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48882*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16295:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2075e6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea075e6; op2val:0x0;
op3val:0x803fff; valaddr_reg:x3; val_offset:48885*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48885*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16296:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2075e6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea075e6; op2val:0x0;
op3val:0x807fff; valaddr_reg:x3; val_offset:48888*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48888*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16297:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2075e6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea075e6; op2val:0x0;
op3val:0x80ffff; valaddr_reg:x3; val_offset:48891*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48891*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16298:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2075e6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea075e6; op2val:0x0;
op3val:0x81ffff; valaddr_reg:x3; val_offset:48894*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48894*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16299:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2075e6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea075e6; op2val:0x0;
op3val:0x83ffff; valaddr_reg:x3; val_offset:48897*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48897*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16300:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2075e6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea075e6; op2val:0x0;
op3val:0x87ffff; valaddr_reg:x3; val_offset:48900*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48900*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16301:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2075e6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea075e6; op2val:0x0;
op3val:0x8fffff; valaddr_reg:x3; val_offset:48903*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48903*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16302:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2075e6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea075e6; op2val:0x0;
op3val:0x999999; valaddr_reg:x3; val_offset:48906*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48906*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16303:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2075e6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea075e6; op2val:0x0;
op3val:0x9fffff; valaddr_reg:x3; val_offset:48909*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48909*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16304:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2075e6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea075e6; op2val:0x0;
op3val:0xa49249; valaddr_reg:x3; val_offset:48912*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48912*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16305:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2075e6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea075e6; op2val:0x0;
op3val:0xb33333; valaddr_reg:x3; val_offset:48915*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48915*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16306:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2075e6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea075e6; op2val:0x0;
op3val:0xb6db6d; valaddr_reg:x3; val_offset:48918*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48918*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16307:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2075e6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea075e6; op2val:0x0;
op3val:0xbbbbbb; valaddr_reg:x3; val_offset:48921*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48921*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16308:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2075e6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea075e6; op2val:0x0;
op3val:0xbfffff; valaddr_reg:x3; val_offset:48924*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48924*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16309:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2075e6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea075e6; op2val:0x0;
op3val:0xc00000; valaddr_reg:x3; val_offset:48927*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48927*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16310:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2075e6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea075e6; op2val:0x0;
op3val:0xc44444; valaddr_reg:x3; val_offset:48930*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48930*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16311:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2075e6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea075e6; op2val:0x0;
op3val:0xcccccc; valaddr_reg:x3; val_offset:48933*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48933*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16312:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2075e6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea075e6; op2val:0x0;
op3val:0xdb6db6; valaddr_reg:x3; val_offset:48936*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48936*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16313:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2075e6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea075e6; op2val:0x0;
op3val:0xe00000; valaddr_reg:x3; val_offset:48939*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48939*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16314:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2075e6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea075e6; op2val:0x0;
op3val:0xe66666; valaddr_reg:x3; val_offset:48942*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48942*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16315:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2075e6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea075e6; op2val:0x0;
op3val:0xedb6db; valaddr_reg:x3; val_offset:48945*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48945*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16316:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2075e6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea075e6; op2val:0x0;
op3val:0xf00000; valaddr_reg:x3; val_offset:48948*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48948*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16317:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2075e6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea075e6; op2val:0x0;
op3val:0xf80000; valaddr_reg:x3; val_offset:48951*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48951*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16318:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2075e6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea075e6; op2val:0x0;
op3val:0xfc0000; valaddr_reg:x3; val_offset:48954*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48954*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16319:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2075e6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea075e6; op2val:0x0;
op3val:0xfe0000; valaddr_reg:x3; val_offset:48957*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48957*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16320:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2075e6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea075e6; op2val:0x0;
op3val:0xff0000; valaddr_reg:x3; val_offset:48960*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48960*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16321:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2075e6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea075e6; op2val:0x0;
op3val:0xff8000; valaddr_reg:x3; val_offset:48963*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48963*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16322:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2075e6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea075e6; op2val:0x0;
op3val:0xffc000; valaddr_reg:x3; val_offset:48966*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48966*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16323:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2075e6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea075e6; op2val:0x0;
op3val:0xffe000; valaddr_reg:x3; val_offset:48969*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48969*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16324:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2075e6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea075e6; op2val:0x0;
op3val:0xfff000; valaddr_reg:x3; val_offset:48972*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48972*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16325:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2075e6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea075e6; op2val:0x0;
op3val:0xfff800; valaddr_reg:x3; val_offset:48975*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48975*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16326:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2075e6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea075e6; op2val:0x0;
op3val:0xfffc00; valaddr_reg:x3; val_offset:48978*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48978*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16327:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2075e6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea075e6; op2val:0x0;
op3val:0xfffe00; valaddr_reg:x3; val_offset:48981*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48981*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16328:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2075e6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea075e6; op2val:0x0;
op3val:0xffff00; valaddr_reg:x3; val_offset:48984*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48984*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16329:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2075e6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea075e6; op2val:0x0;
op3val:0xffff80; valaddr_reg:x3; val_offset:48987*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48987*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16330:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2075e6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea075e6; op2val:0x0;
op3val:0xffffc0; valaddr_reg:x3; val_offset:48990*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48990*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16331:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2075e6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea075e6; op2val:0x0;
op3val:0xffffe0; valaddr_reg:x3; val_offset:48993*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48993*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16332:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2075e6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea075e6; op2val:0x0;
op3val:0xfffff0; valaddr_reg:x3; val_offset:48996*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48996*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16333:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2075e6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea075e6; op2val:0x0;
op3val:0xfffff8; valaddr_reg:x3; val_offset:48999*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48999*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16334:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2075e6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea075e6; op2val:0x0;
op3val:0xfffffc; valaddr_reg:x3; val_offset:49002*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49002*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16335:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2075e6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea075e6; op2val:0x0;
op3val:0xfffffe; valaddr_reg:x3; val_offset:49005*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49005*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16336:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2075e6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea075e6; op2val:0x0;
op3val:0xffffff; valaddr_reg:x3; val_offset:49008*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49008*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16337:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x210efb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x65ba1c and fs3 == 0 and fe3 == 0x4e and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea10efb; op2val:0x65ba1c;
op3val:0x27000000; valaddr_reg:x3; val_offset:49011*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49011*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16338:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x210efb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x65ba1c and fs3 == 0 and fe3 == 0x4e and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea10efb; op2val:0x65ba1c;
op3val:0x27000001; valaddr_reg:x3; val_offset:49014*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49014*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16339:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x210efb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x65ba1c and fs3 == 0 and fe3 == 0x4e and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea10efb; op2val:0x65ba1c;
op3val:0x27000003; valaddr_reg:x3; val_offset:49017*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49017*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16340:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x210efb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x65ba1c and fs3 == 0 and fe3 == 0x4e and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea10efb; op2val:0x65ba1c;
op3val:0x27000007; valaddr_reg:x3; val_offset:49020*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49020*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16341:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x210efb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x65ba1c and fs3 == 0 and fe3 == 0x4e and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea10efb; op2val:0x65ba1c;
op3val:0x2700000f; valaddr_reg:x3; val_offset:49023*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49023*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16342:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x210efb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x65ba1c and fs3 == 0 and fe3 == 0x4e and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea10efb; op2val:0x65ba1c;
op3val:0x2700001f; valaddr_reg:x3; val_offset:49026*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49026*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16343:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x210efb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x65ba1c and fs3 == 0 and fe3 == 0x4e and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea10efb; op2val:0x65ba1c;
op3val:0x2700003f; valaddr_reg:x3; val_offset:49029*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49029*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16344:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x210efb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x65ba1c and fs3 == 0 and fe3 == 0x4e and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea10efb; op2val:0x65ba1c;
op3val:0x2700007f; valaddr_reg:x3; val_offset:49032*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49032*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16345:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x210efb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x65ba1c and fs3 == 0 and fe3 == 0x4e and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea10efb; op2val:0x65ba1c;
op3val:0x270000ff; valaddr_reg:x3; val_offset:49035*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49035*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16346:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x210efb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x65ba1c and fs3 == 0 and fe3 == 0x4e and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea10efb; op2val:0x65ba1c;
op3val:0x270001ff; valaddr_reg:x3; val_offset:49038*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49038*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16347:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x210efb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x65ba1c and fs3 == 0 and fe3 == 0x4e and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea10efb; op2val:0x65ba1c;
op3val:0x270003ff; valaddr_reg:x3; val_offset:49041*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49041*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16348:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x210efb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x65ba1c and fs3 == 0 and fe3 == 0x4e and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea10efb; op2val:0x65ba1c;
op3val:0x270007ff; valaddr_reg:x3; val_offset:49044*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49044*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16349:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x210efb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x65ba1c and fs3 == 0 and fe3 == 0x4e and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea10efb; op2val:0x65ba1c;
op3val:0x27000fff; valaddr_reg:x3; val_offset:49047*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49047*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16350:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x210efb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x65ba1c and fs3 == 0 and fe3 == 0x4e and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea10efb; op2val:0x65ba1c;
op3val:0x27001fff; valaddr_reg:x3; val_offset:49050*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49050*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16351:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x210efb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x65ba1c and fs3 == 0 and fe3 == 0x4e and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea10efb; op2val:0x65ba1c;
op3val:0x27003fff; valaddr_reg:x3; val_offset:49053*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49053*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16352:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x210efb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x65ba1c and fs3 == 0 and fe3 == 0x4e and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea10efb; op2val:0x65ba1c;
op3val:0x27007fff; valaddr_reg:x3; val_offset:49056*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49056*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16353:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x210efb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x65ba1c and fs3 == 0 and fe3 == 0x4e and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea10efb; op2val:0x65ba1c;
op3val:0x2700ffff; valaddr_reg:x3; val_offset:49059*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49059*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16354:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x210efb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x65ba1c and fs3 == 0 and fe3 == 0x4e and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea10efb; op2val:0x65ba1c;
op3val:0x2701ffff; valaddr_reg:x3; val_offset:49062*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49062*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16355:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x210efb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x65ba1c and fs3 == 0 and fe3 == 0x4e and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea10efb; op2val:0x65ba1c;
op3val:0x2703ffff; valaddr_reg:x3; val_offset:49065*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49065*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16356:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x210efb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x65ba1c and fs3 == 0 and fe3 == 0x4e and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea10efb; op2val:0x65ba1c;
op3val:0x2707ffff; valaddr_reg:x3; val_offset:49068*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49068*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16357:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x210efb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x65ba1c and fs3 == 0 and fe3 == 0x4e and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea10efb; op2val:0x65ba1c;
op3val:0x270fffff; valaddr_reg:x3; val_offset:49071*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49071*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16358:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x210efb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x65ba1c and fs3 == 0 and fe3 == 0x4e and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea10efb; op2val:0x65ba1c;
op3val:0x271fffff; valaddr_reg:x3; val_offset:49074*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49074*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16359:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x210efb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x65ba1c and fs3 == 0 and fe3 == 0x4e and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea10efb; op2val:0x65ba1c;
op3val:0x273fffff; valaddr_reg:x3; val_offset:49077*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49077*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16360:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x210efb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x65ba1c and fs3 == 0 and fe3 == 0x4e and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea10efb; op2val:0x65ba1c;
op3val:0x27400000; valaddr_reg:x3; val_offset:49080*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49080*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16361:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x210efb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x65ba1c and fs3 == 0 and fe3 == 0x4e and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea10efb; op2val:0x65ba1c;
op3val:0x27600000; valaddr_reg:x3; val_offset:49083*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49083*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16362:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x210efb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x65ba1c and fs3 == 0 and fe3 == 0x4e and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea10efb; op2val:0x65ba1c;
op3val:0x27700000; valaddr_reg:x3; val_offset:49086*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49086*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16363:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x210efb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x65ba1c and fs3 == 0 and fe3 == 0x4e and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea10efb; op2val:0x65ba1c;
op3val:0x27780000; valaddr_reg:x3; val_offset:49089*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49089*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16364:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x210efb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x65ba1c and fs3 == 0 and fe3 == 0x4e and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea10efb; op2val:0x65ba1c;
op3val:0x277c0000; valaddr_reg:x3; val_offset:49092*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49092*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16365:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x210efb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x65ba1c and fs3 == 0 and fe3 == 0x4e and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea10efb; op2val:0x65ba1c;
op3val:0x277e0000; valaddr_reg:x3; val_offset:49095*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49095*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16366:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x210efb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x65ba1c and fs3 == 0 and fe3 == 0x4e and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea10efb; op2val:0x65ba1c;
op3val:0x277f0000; valaddr_reg:x3; val_offset:49098*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49098*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16367:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x210efb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x65ba1c and fs3 == 0 and fe3 == 0x4e and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea10efb; op2val:0x65ba1c;
op3val:0x277f8000; valaddr_reg:x3; val_offset:49101*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49101*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16368:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x210efb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x65ba1c and fs3 == 0 and fe3 == 0x4e and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea10efb; op2val:0x65ba1c;
op3val:0x277fc000; valaddr_reg:x3; val_offset:49104*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49104*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16369:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x210efb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x65ba1c and fs3 == 0 and fe3 == 0x4e and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea10efb; op2val:0x65ba1c;
op3val:0x277fe000; valaddr_reg:x3; val_offset:49107*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49107*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16370:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x210efb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x65ba1c and fs3 == 0 and fe3 == 0x4e and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea10efb; op2val:0x65ba1c;
op3val:0x277ff000; valaddr_reg:x3; val_offset:49110*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49110*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16371:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x210efb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x65ba1c and fs3 == 0 and fe3 == 0x4e and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea10efb; op2val:0x65ba1c;
op3val:0x277ff800; valaddr_reg:x3; val_offset:49113*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49113*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16372:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x210efb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x65ba1c and fs3 == 0 and fe3 == 0x4e and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea10efb; op2val:0x65ba1c;
op3val:0x277ffc00; valaddr_reg:x3; val_offset:49116*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49116*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16373:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x210efb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x65ba1c and fs3 == 0 and fe3 == 0x4e and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea10efb; op2val:0x65ba1c;
op3val:0x277ffe00; valaddr_reg:x3; val_offset:49119*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49119*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16374:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x210efb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x65ba1c and fs3 == 0 and fe3 == 0x4e and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea10efb; op2val:0x65ba1c;
op3val:0x277fff00; valaddr_reg:x3; val_offset:49122*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49122*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16375:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x210efb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x65ba1c and fs3 == 0 and fe3 == 0x4e and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea10efb; op2val:0x65ba1c;
op3val:0x277fff80; valaddr_reg:x3; val_offset:49125*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49125*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16376:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x210efb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x65ba1c and fs3 == 0 and fe3 == 0x4e and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea10efb; op2val:0x65ba1c;
op3val:0x277fffc0; valaddr_reg:x3; val_offset:49128*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49128*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16377:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x210efb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x65ba1c and fs3 == 0 and fe3 == 0x4e and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea10efb; op2val:0x65ba1c;
op3val:0x277fffe0; valaddr_reg:x3; val_offset:49131*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49131*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16378:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x210efb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x65ba1c and fs3 == 0 and fe3 == 0x4e and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea10efb; op2val:0x65ba1c;
op3val:0x277ffff0; valaddr_reg:x3; val_offset:49134*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49134*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16379:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x210efb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x65ba1c and fs3 == 0 and fe3 == 0x4e and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea10efb; op2val:0x65ba1c;
op3val:0x277ffff8; valaddr_reg:x3; val_offset:49137*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49137*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16380:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x210efb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x65ba1c and fs3 == 0 and fe3 == 0x4e and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea10efb; op2val:0x65ba1c;
op3val:0x277ffffc; valaddr_reg:x3; val_offset:49140*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49140*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16381:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x210efb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x65ba1c and fs3 == 0 and fe3 == 0x4e and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea10efb; op2val:0x65ba1c;
op3val:0x277ffffe; valaddr_reg:x3; val_offset:49143*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49143*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16382:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x210efb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x65ba1c and fs3 == 0 and fe3 == 0x4e and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea10efb; op2val:0x65ba1c;
op3val:0x277fffff; valaddr_reg:x3; val_offset:49146*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49146*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16383:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x210efb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x65ba1c and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea10efb; op2val:0x65ba1c;
op3val:0x3f800001; valaddr_reg:x3; val_offset:49149*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49149*0 + 3*127*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2124444519,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2241855487,32,FLEN)
NAN_BOXED(2124444519,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2243952639,32,FLEN)
NAN_BOXED(2124444519,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2243952640,32,FLEN)
NAN_BOXED(2124444519,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2246049792,32,FLEN)
NAN_BOXED(2124444519,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2247098368,32,FLEN)
NAN_BOXED(2124444519,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2247622656,32,FLEN)
NAN_BOXED(2124444519,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2247884800,32,FLEN)
NAN_BOXED(2124444519,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2248015872,32,FLEN)
NAN_BOXED(2124444519,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2248081408,32,FLEN)
NAN_BOXED(2124444519,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2248114176,32,FLEN)
NAN_BOXED(2124444519,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2248130560,32,FLEN)
NAN_BOXED(2124444519,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2248138752,32,FLEN)
NAN_BOXED(2124444519,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2248142848,32,FLEN)
NAN_BOXED(2124444519,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2248144896,32,FLEN)
NAN_BOXED(2124444519,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2248145920,32,FLEN)
NAN_BOXED(2124444519,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2248146432,32,FLEN)
NAN_BOXED(2124444519,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2248146688,32,FLEN)
NAN_BOXED(2124444519,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2248146816,32,FLEN)
NAN_BOXED(2124444519,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2248146880,32,FLEN)
NAN_BOXED(2124444519,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2248146912,32,FLEN)
NAN_BOXED(2124444519,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2248146928,32,FLEN)
NAN_BOXED(2124444519,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2248146936,32,FLEN)
NAN_BOXED(2124444519,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2248146940,32,FLEN)
NAN_BOXED(2124444519,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2248146942,32,FLEN)
NAN_BOXED(2124444519,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2248146943,32,FLEN)
NAN_BOXED(2124445158,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2124445158,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(2124445158,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388611,32,FLEN)
NAN_BOXED(2124445158,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388615,32,FLEN)
NAN_BOXED(2124445158,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388623,32,FLEN)
NAN_BOXED(2124445158,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388639,32,FLEN)
NAN_BOXED(2124445158,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388671,32,FLEN)
NAN_BOXED(2124445158,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388735,32,FLEN)
NAN_BOXED(2124445158,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388863,32,FLEN)
NAN_BOXED(2124445158,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8389119,32,FLEN)
NAN_BOXED(2124445158,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8389631,32,FLEN)
NAN_BOXED(2124445158,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8390655,32,FLEN)
NAN_BOXED(2124445158,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8392703,32,FLEN)
NAN_BOXED(2124445158,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8396799,32,FLEN)
NAN_BOXED(2124445158,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8404991,32,FLEN)
NAN_BOXED(2124445158,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8421375,32,FLEN)
NAN_BOXED(2124445158,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8454143,32,FLEN)
NAN_BOXED(2124445158,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8519679,32,FLEN)
NAN_BOXED(2124445158,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8650751,32,FLEN)
NAN_BOXED(2124445158,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8912895,32,FLEN)
NAN_BOXED(2124445158,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(9437183,32,FLEN)
NAN_BOXED(2124445158,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(10066329,32,FLEN)
NAN_BOXED(2124445158,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(10485759,32,FLEN)
NAN_BOXED(2124445158,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(10785353,32,FLEN)
NAN_BOXED(2124445158,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(11744051,32,FLEN)
NAN_BOXED(2124445158,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(11983725,32,FLEN)
NAN_BOXED(2124445158,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(12303291,32,FLEN)
NAN_BOXED(2124445158,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(12582911,32,FLEN)
NAN_BOXED(2124445158,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(12582912,32,FLEN)
NAN_BOXED(2124445158,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(12862532,32,FLEN)
NAN_BOXED(2124445158,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(13421772,32,FLEN)
NAN_BOXED(2124445158,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(14380470,32,FLEN)
NAN_BOXED(2124445158,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(14680064,32,FLEN)
NAN_BOXED(2124445158,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(15099494,32,FLEN)
NAN_BOXED(2124445158,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(15578843,32,FLEN)
NAN_BOXED(2124445158,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(15728640,32,FLEN)
NAN_BOXED(2124445158,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16252928,32,FLEN)
NAN_BOXED(2124445158,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16515072,32,FLEN)
NAN_BOXED(2124445158,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16646144,32,FLEN)
NAN_BOXED(2124445158,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16711680,32,FLEN)
NAN_BOXED(2124445158,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16744448,32,FLEN)
NAN_BOXED(2124445158,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16760832,32,FLEN)
NAN_BOXED(2124445158,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16769024,32,FLEN)
NAN_BOXED(2124445158,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16773120,32,FLEN)
NAN_BOXED(2124445158,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16775168,32,FLEN)
NAN_BOXED(2124445158,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16776192,32,FLEN)
NAN_BOXED(2124445158,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16776704,32,FLEN)
NAN_BOXED(2124445158,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16776960,32,FLEN)
NAN_BOXED(2124445158,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777088,32,FLEN)
NAN_BOXED(2124445158,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777152,32,FLEN)
NAN_BOXED(2124445158,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777184,32,FLEN)
NAN_BOXED(2124445158,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777200,32,FLEN)
NAN_BOXED(2124445158,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777208,32,FLEN)
NAN_BOXED(2124445158,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777212,32,FLEN)
NAN_BOXED(2124445158,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777214,32,FLEN)
NAN_BOXED(2124445158,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777215,32,FLEN)
NAN_BOXED(2124484347,32,FLEN)
NAN_BOXED(6666780,32,FLEN)
NAN_BOXED(654311424,32,FLEN)
NAN_BOXED(2124484347,32,FLEN)
NAN_BOXED(6666780,32,FLEN)
NAN_BOXED(654311425,32,FLEN)
NAN_BOXED(2124484347,32,FLEN)
NAN_BOXED(6666780,32,FLEN)
NAN_BOXED(654311427,32,FLEN)
NAN_BOXED(2124484347,32,FLEN)
NAN_BOXED(6666780,32,FLEN)
NAN_BOXED(654311431,32,FLEN)
NAN_BOXED(2124484347,32,FLEN)
NAN_BOXED(6666780,32,FLEN)
NAN_BOXED(654311439,32,FLEN)
NAN_BOXED(2124484347,32,FLEN)
NAN_BOXED(6666780,32,FLEN)
NAN_BOXED(654311455,32,FLEN)
NAN_BOXED(2124484347,32,FLEN)
NAN_BOXED(6666780,32,FLEN)
NAN_BOXED(654311487,32,FLEN)
NAN_BOXED(2124484347,32,FLEN)
NAN_BOXED(6666780,32,FLEN)
NAN_BOXED(654311551,32,FLEN)
NAN_BOXED(2124484347,32,FLEN)
NAN_BOXED(6666780,32,FLEN)
NAN_BOXED(654311679,32,FLEN)
NAN_BOXED(2124484347,32,FLEN)
NAN_BOXED(6666780,32,FLEN)
NAN_BOXED(654311935,32,FLEN)
NAN_BOXED(2124484347,32,FLEN)
NAN_BOXED(6666780,32,FLEN)
NAN_BOXED(654312447,32,FLEN)
NAN_BOXED(2124484347,32,FLEN)
NAN_BOXED(6666780,32,FLEN)
NAN_BOXED(654313471,32,FLEN)
NAN_BOXED(2124484347,32,FLEN)
NAN_BOXED(6666780,32,FLEN)
NAN_BOXED(654315519,32,FLEN)
NAN_BOXED(2124484347,32,FLEN)
NAN_BOXED(6666780,32,FLEN)
NAN_BOXED(654319615,32,FLEN)
NAN_BOXED(2124484347,32,FLEN)
NAN_BOXED(6666780,32,FLEN)
NAN_BOXED(654327807,32,FLEN)
NAN_BOXED(2124484347,32,FLEN)
NAN_BOXED(6666780,32,FLEN)
NAN_BOXED(654344191,32,FLEN)
NAN_BOXED(2124484347,32,FLEN)
NAN_BOXED(6666780,32,FLEN)
NAN_BOXED(654376959,32,FLEN)
NAN_BOXED(2124484347,32,FLEN)
NAN_BOXED(6666780,32,FLEN)
NAN_BOXED(654442495,32,FLEN)
NAN_BOXED(2124484347,32,FLEN)
NAN_BOXED(6666780,32,FLEN)
NAN_BOXED(654573567,32,FLEN)
NAN_BOXED(2124484347,32,FLEN)
NAN_BOXED(6666780,32,FLEN)
NAN_BOXED(654835711,32,FLEN)
NAN_BOXED(2124484347,32,FLEN)
NAN_BOXED(6666780,32,FLEN)
NAN_BOXED(655359999,32,FLEN)
NAN_BOXED(2124484347,32,FLEN)
NAN_BOXED(6666780,32,FLEN)
NAN_BOXED(656408575,32,FLEN)
NAN_BOXED(2124484347,32,FLEN)
NAN_BOXED(6666780,32,FLEN)
NAN_BOXED(658505727,32,FLEN)
NAN_BOXED(2124484347,32,FLEN)
NAN_BOXED(6666780,32,FLEN)
NAN_BOXED(658505728,32,FLEN)
NAN_BOXED(2124484347,32,FLEN)
NAN_BOXED(6666780,32,FLEN)
NAN_BOXED(660602880,32,FLEN)
NAN_BOXED(2124484347,32,FLEN)
NAN_BOXED(6666780,32,FLEN)
NAN_BOXED(661651456,32,FLEN)
NAN_BOXED(2124484347,32,FLEN)
NAN_BOXED(6666780,32,FLEN)
NAN_BOXED(662175744,32,FLEN)
NAN_BOXED(2124484347,32,FLEN)
NAN_BOXED(6666780,32,FLEN)
NAN_BOXED(662437888,32,FLEN)
NAN_BOXED(2124484347,32,FLEN)
NAN_BOXED(6666780,32,FLEN)
NAN_BOXED(662568960,32,FLEN)
NAN_BOXED(2124484347,32,FLEN)
NAN_BOXED(6666780,32,FLEN)
NAN_BOXED(662634496,32,FLEN)
NAN_BOXED(2124484347,32,FLEN)
NAN_BOXED(6666780,32,FLEN)
NAN_BOXED(662667264,32,FLEN)
NAN_BOXED(2124484347,32,FLEN)
NAN_BOXED(6666780,32,FLEN)
NAN_BOXED(662683648,32,FLEN)
NAN_BOXED(2124484347,32,FLEN)
NAN_BOXED(6666780,32,FLEN)
NAN_BOXED(662691840,32,FLEN)
NAN_BOXED(2124484347,32,FLEN)
NAN_BOXED(6666780,32,FLEN)
NAN_BOXED(662695936,32,FLEN)
NAN_BOXED(2124484347,32,FLEN)
NAN_BOXED(6666780,32,FLEN)
NAN_BOXED(662697984,32,FLEN)
NAN_BOXED(2124484347,32,FLEN)
NAN_BOXED(6666780,32,FLEN)
NAN_BOXED(662699008,32,FLEN)
NAN_BOXED(2124484347,32,FLEN)
NAN_BOXED(6666780,32,FLEN)
NAN_BOXED(662699520,32,FLEN)
NAN_BOXED(2124484347,32,FLEN)
NAN_BOXED(6666780,32,FLEN)
NAN_BOXED(662699776,32,FLEN)
NAN_BOXED(2124484347,32,FLEN)
NAN_BOXED(6666780,32,FLEN)
NAN_BOXED(662699904,32,FLEN)
NAN_BOXED(2124484347,32,FLEN)
NAN_BOXED(6666780,32,FLEN)
NAN_BOXED(662699968,32,FLEN)
NAN_BOXED(2124484347,32,FLEN)
NAN_BOXED(6666780,32,FLEN)
NAN_BOXED(662700000,32,FLEN)
NAN_BOXED(2124484347,32,FLEN)
NAN_BOXED(6666780,32,FLEN)
NAN_BOXED(662700016,32,FLEN)
NAN_BOXED(2124484347,32,FLEN)
NAN_BOXED(6666780,32,FLEN)
NAN_BOXED(662700024,32,FLEN)
NAN_BOXED(2124484347,32,FLEN)
NAN_BOXED(6666780,32,FLEN)
NAN_BOXED(662700028,32,FLEN)
NAN_BOXED(2124484347,32,FLEN)
NAN_BOXED(6666780,32,FLEN)
NAN_BOXED(662700030,32,FLEN)
NAN_BOXED(2124484347,32,FLEN)
NAN_BOXED(6666780,32,FLEN)
NAN_BOXED(662700031,32,FLEN)
NAN_BOXED(2124484347,32,FLEN)
NAN_BOXED(6666780,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
