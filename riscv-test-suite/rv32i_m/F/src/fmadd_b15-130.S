
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:17:59 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_16512:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x239293 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea39293; op2val:0x80000000;
op3val:0x8dfffc00; valaddr_reg:x3; val_offset:49536*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49536*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16513:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x239293 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea39293; op2val:0x80000000;
op3val:0x8dfffe00; valaddr_reg:x3; val_offset:49539*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49539*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16514:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x239293 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea39293; op2val:0x80000000;
op3val:0x8dffff00; valaddr_reg:x3; val_offset:49542*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49542*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16515:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x239293 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea39293; op2val:0x80000000;
op3val:0x8dffff80; valaddr_reg:x3; val_offset:49545*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49545*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16516:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x239293 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea39293; op2val:0x80000000;
op3val:0x8dffffc0; valaddr_reg:x3; val_offset:49548*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49548*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16517:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x239293 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea39293; op2val:0x80000000;
op3val:0x8dffffe0; valaddr_reg:x3; val_offset:49551*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49551*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16518:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x239293 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea39293; op2val:0x80000000;
op3val:0x8dfffff0; valaddr_reg:x3; val_offset:49554*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49554*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16519:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x239293 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea39293; op2val:0x80000000;
op3val:0x8dfffff8; valaddr_reg:x3; val_offset:49557*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49557*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16520:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x239293 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea39293; op2val:0x80000000;
op3val:0x8dfffffc; valaddr_reg:x3; val_offset:49560*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49560*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16521:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x239293 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea39293; op2val:0x80000000;
op3val:0x8dfffffe; valaddr_reg:x3; val_offset:49563*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49563*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16522:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x239293 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea39293; op2val:0x80000000;
op3val:0x8dffffff; valaddr_reg:x3; val_offset:49566*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49566*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16523:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23a264 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x64202c and fs3 == 0 and fe3 == 0x5f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3a264; op2val:0x64202c;
op3val:0x2f800000; valaddr_reg:x3; val_offset:49569*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49569*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16524:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23a264 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x64202c and fs3 == 0 and fe3 == 0x5f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3a264; op2val:0x64202c;
op3val:0x2f800001; valaddr_reg:x3; val_offset:49572*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49572*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16525:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23a264 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x64202c and fs3 == 0 and fe3 == 0x5f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3a264; op2val:0x64202c;
op3val:0x2f800003; valaddr_reg:x3; val_offset:49575*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49575*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16526:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23a264 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x64202c and fs3 == 0 and fe3 == 0x5f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3a264; op2val:0x64202c;
op3val:0x2f800007; valaddr_reg:x3; val_offset:49578*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49578*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16527:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23a264 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x64202c and fs3 == 0 and fe3 == 0x5f and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3a264; op2val:0x64202c;
op3val:0x2f80000f; valaddr_reg:x3; val_offset:49581*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49581*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16528:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23a264 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x64202c and fs3 == 0 and fe3 == 0x5f and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3a264; op2val:0x64202c;
op3val:0x2f80001f; valaddr_reg:x3; val_offset:49584*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49584*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16529:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23a264 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x64202c and fs3 == 0 and fe3 == 0x5f and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3a264; op2val:0x64202c;
op3val:0x2f80003f; valaddr_reg:x3; val_offset:49587*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49587*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16530:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23a264 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x64202c and fs3 == 0 and fe3 == 0x5f and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3a264; op2val:0x64202c;
op3val:0x2f80007f; valaddr_reg:x3; val_offset:49590*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49590*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16531:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23a264 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x64202c and fs3 == 0 and fe3 == 0x5f and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3a264; op2val:0x64202c;
op3val:0x2f8000ff; valaddr_reg:x3; val_offset:49593*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49593*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16532:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23a264 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x64202c and fs3 == 0 and fe3 == 0x5f and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3a264; op2val:0x64202c;
op3val:0x2f8001ff; valaddr_reg:x3; val_offset:49596*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49596*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16533:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23a264 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x64202c and fs3 == 0 and fe3 == 0x5f and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3a264; op2val:0x64202c;
op3val:0x2f8003ff; valaddr_reg:x3; val_offset:49599*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49599*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16534:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23a264 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x64202c and fs3 == 0 and fe3 == 0x5f and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3a264; op2val:0x64202c;
op3val:0x2f8007ff; valaddr_reg:x3; val_offset:49602*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49602*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16535:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23a264 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x64202c and fs3 == 0 and fe3 == 0x5f and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3a264; op2val:0x64202c;
op3val:0x2f800fff; valaddr_reg:x3; val_offset:49605*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49605*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16536:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23a264 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x64202c and fs3 == 0 and fe3 == 0x5f and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3a264; op2val:0x64202c;
op3val:0x2f801fff; valaddr_reg:x3; val_offset:49608*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49608*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16537:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23a264 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x64202c and fs3 == 0 and fe3 == 0x5f and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3a264; op2val:0x64202c;
op3val:0x2f803fff; valaddr_reg:x3; val_offset:49611*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49611*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16538:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23a264 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x64202c and fs3 == 0 and fe3 == 0x5f and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3a264; op2val:0x64202c;
op3val:0x2f807fff; valaddr_reg:x3; val_offset:49614*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49614*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16539:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23a264 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x64202c and fs3 == 0 and fe3 == 0x5f and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3a264; op2val:0x64202c;
op3val:0x2f80ffff; valaddr_reg:x3; val_offset:49617*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49617*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16540:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23a264 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x64202c and fs3 == 0 and fe3 == 0x5f and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3a264; op2val:0x64202c;
op3val:0x2f81ffff; valaddr_reg:x3; val_offset:49620*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49620*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16541:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23a264 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x64202c and fs3 == 0 and fe3 == 0x5f and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3a264; op2val:0x64202c;
op3val:0x2f83ffff; valaddr_reg:x3; val_offset:49623*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49623*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16542:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23a264 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x64202c and fs3 == 0 and fe3 == 0x5f and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3a264; op2val:0x64202c;
op3val:0x2f87ffff; valaddr_reg:x3; val_offset:49626*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49626*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16543:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23a264 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x64202c and fs3 == 0 and fe3 == 0x5f and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3a264; op2val:0x64202c;
op3val:0x2f8fffff; valaddr_reg:x3; val_offset:49629*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49629*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16544:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23a264 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x64202c and fs3 == 0 and fe3 == 0x5f and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3a264; op2val:0x64202c;
op3val:0x2f9fffff; valaddr_reg:x3; val_offset:49632*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49632*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16545:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23a264 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x64202c and fs3 == 0 and fe3 == 0x5f and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3a264; op2val:0x64202c;
op3val:0x2fbfffff; valaddr_reg:x3; val_offset:49635*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49635*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16546:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23a264 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x64202c and fs3 == 0 and fe3 == 0x5f and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3a264; op2val:0x64202c;
op3val:0x2fc00000; valaddr_reg:x3; val_offset:49638*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49638*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16547:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23a264 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x64202c and fs3 == 0 and fe3 == 0x5f and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3a264; op2val:0x64202c;
op3val:0x2fe00000; valaddr_reg:x3; val_offset:49641*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49641*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16548:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23a264 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x64202c and fs3 == 0 and fe3 == 0x5f and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3a264; op2val:0x64202c;
op3val:0x2ff00000; valaddr_reg:x3; val_offset:49644*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49644*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16549:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23a264 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x64202c and fs3 == 0 and fe3 == 0x5f and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3a264; op2val:0x64202c;
op3val:0x2ff80000; valaddr_reg:x3; val_offset:49647*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49647*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16550:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23a264 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x64202c and fs3 == 0 and fe3 == 0x5f and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3a264; op2val:0x64202c;
op3val:0x2ffc0000; valaddr_reg:x3; val_offset:49650*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49650*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16551:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23a264 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x64202c and fs3 == 0 and fe3 == 0x5f and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3a264; op2val:0x64202c;
op3val:0x2ffe0000; valaddr_reg:x3; val_offset:49653*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49653*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16552:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23a264 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x64202c and fs3 == 0 and fe3 == 0x5f and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3a264; op2val:0x64202c;
op3val:0x2fff0000; valaddr_reg:x3; val_offset:49656*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49656*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16553:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23a264 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x64202c and fs3 == 0 and fe3 == 0x5f and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3a264; op2val:0x64202c;
op3val:0x2fff8000; valaddr_reg:x3; val_offset:49659*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49659*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16554:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23a264 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x64202c and fs3 == 0 and fe3 == 0x5f and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3a264; op2val:0x64202c;
op3val:0x2fffc000; valaddr_reg:x3; val_offset:49662*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49662*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16555:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23a264 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x64202c and fs3 == 0 and fe3 == 0x5f and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3a264; op2val:0x64202c;
op3val:0x2fffe000; valaddr_reg:x3; val_offset:49665*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49665*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16556:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23a264 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x64202c and fs3 == 0 and fe3 == 0x5f and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3a264; op2val:0x64202c;
op3val:0x2ffff000; valaddr_reg:x3; val_offset:49668*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49668*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16557:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23a264 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x64202c and fs3 == 0 and fe3 == 0x5f and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3a264; op2val:0x64202c;
op3val:0x2ffff800; valaddr_reg:x3; val_offset:49671*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49671*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16558:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23a264 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x64202c and fs3 == 0 and fe3 == 0x5f and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3a264; op2val:0x64202c;
op3val:0x2ffffc00; valaddr_reg:x3; val_offset:49674*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49674*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16559:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23a264 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x64202c and fs3 == 0 and fe3 == 0x5f and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3a264; op2val:0x64202c;
op3val:0x2ffffe00; valaddr_reg:x3; val_offset:49677*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49677*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16560:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23a264 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x64202c and fs3 == 0 and fe3 == 0x5f and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3a264; op2val:0x64202c;
op3val:0x2fffff00; valaddr_reg:x3; val_offset:49680*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49680*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16561:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23a264 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x64202c and fs3 == 0 and fe3 == 0x5f and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3a264; op2val:0x64202c;
op3val:0x2fffff80; valaddr_reg:x3; val_offset:49683*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49683*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16562:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23a264 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x64202c and fs3 == 0 and fe3 == 0x5f and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3a264; op2val:0x64202c;
op3val:0x2fffffc0; valaddr_reg:x3; val_offset:49686*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49686*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16563:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23a264 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x64202c and fs3 == 0 and fe3 == 0x5f and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3a264; op2val:0x64202c;
op3val:0x2fffffe0; valaddr_reg:x3; val_offset:49689*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49689*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16564:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23a264 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x64202c and fs3 == 0 and fe3 == 0x5f and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3a264; op2val:0x64202c;
op3val:0x2ffffff0; valaddr_reg:x3; val_offset:49692*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49692*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16565:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23a264 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x64202c and fs3 == 0 and fe3 == 0x5f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3a264; op2val:0x64202c;
op3val:0x2ffffff8; valaddr_reg:x3; val_offset:49695*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49695*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16566:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23a264 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x64202c and fs3 == 0 and fe3 == 0x5f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3a264; op2val:0x64202c;
op3val:0x2ffffffc; valaddr_reg:x3; val_offset:49698*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49698*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16567:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23a264 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x64202c and fs3 == 0 and fe3 == 0x5f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3a264; op2val:0x64202c;
op3val:0x2ffffffe; valaddr_reg:x3; val_offset:49701*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49701*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16568:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23a264 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x64202c and fs3 == 0 and fe3 == 0x5f and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3a264; op2val:0x64202c;
op3val:0x2fffffff; valaddr_reg:x3; val_offset:49704*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49704*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16569:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23a264 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x64202c and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3a264; op2val:0x64202c;
op3val:0x3f800001; valaddr_reg:x3; val_offset:49707*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49707*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16570:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23a264 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x64202c and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3a264; op2val:0x64202c;
op3val:0x3f800003; valaddr_reg:x3; val_offset:49710*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49710*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16571:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23a264 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x64202c and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3a264; op2val:0x64202c;
op3val:0x3f800007; valaddr_reg:x3; val_offset:49713*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49713*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16572:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23a264 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x64202c and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3a264; op2val:0x64202c;
op3val:0x3f999999; valaddr_reg:x3; val_offset:49716*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49716*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16573:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23a264 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x64202c and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3a264; op2val:0x64202c;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:49719*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49719*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16574:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23a264 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x64202c and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3a264; op2val:0x64202c;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:49722*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49722*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16575:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23a264 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x64202c and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3a264; op2val:0x64202c;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:49725*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49725*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16576:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23a264 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x64202c and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3a264; op2val:0x64202c;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:49728*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49728*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16577:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23a264 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x64202c and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3a264; op2val:0x64202c;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:49731*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49731*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16578:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23a264 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x64202c and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3a264; op2val:0x64202c;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:49734*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49734*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16579:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23a264 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x64202c and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3a264; op2val:0x64202c;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:49737*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49737*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16580:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23a264 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x64202c and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3a264; op2val:0x64202c;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:49740*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49740*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16581:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23a264 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x64202c and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3a264; op2val:0x64202c;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:49743*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49743*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16582:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23a264 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x64202c and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3a264; op2val:0x64202c;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:49746*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49746*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16583:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23a264 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x64202c and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3a264; op2val:0x64202c;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:49749*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49749*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16584:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23a264 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x64202c and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3a264; op2val:0x64202c;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:49752*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49752*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16585:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23b98c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3b98c; op2val:0x80000000;
op3val:0x80000001; valaddr_reg:x3; val_offset:49755*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49755*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16586:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23b98c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3b98c; op2val:0x80000000;
op3val:0x80000003; valaddr_reg:x3; val_offset:49758*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49758*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16587:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23b98c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3b98c; op2val:0x80000000;
op3val:0x80000007; valaddr_reg:x3; val_offset:49761*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49761*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16588:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23b98c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3b98c; op2val:0x80000000;
op3val:0x80199999; valaddr_reg:x3; val_offset:49764*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49764*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16589:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23b98c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3b98c; op2val:0x80000000;
op3val:0x80249249; valaddr_reg:x3; val_offset:49767*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49767*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16590:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23b98c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3b98c; op2val:0x80000000;
op3val:0x80333333; valaddr_reg:x3; val_offset:49770*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49770*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16591:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23b98c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3b98c; op2val:0x80000000;
op3val:0x8036db6d; valaddr_reg:x3; val_offset:49773*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49773*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16592:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23b98c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3b98c; op2val:0x80000000;
op3val:0x803bbbbb; valaddr_reg:x3; val_offset:49776*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49776*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16593:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23b98c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3b98c; op2val:0x80000000;
op3val:0x80444444; valaddr_reg:x3; val_offset:49779*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49779*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16594:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23b98c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3b98c; op2val:0x80000000;
op3val:0x804ccccc; valaddr_reg:x3; val_offset:49782*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49782*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16595:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23b98c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3b98c; op2val:0x80000000;
op3val:0x805b6db6; valaddr_reg:x3; val_offset:49785*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49785*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16596:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23b98c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3b98c; op2val:0x80000000;
op3val:0x80666666; valaddr_reg:x3; val_offset:49788*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49788*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16597:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23b98c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3b98c; op2val:0x80000000;
op3val:0x806db6db; valaddr_reg:x3; val_offset:49791*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49791*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16598:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23b98c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3b98c; op2val:0x80000000;
op3val:0x807ffff8; valaddr_reg:x3; val_offset:49794*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49794*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16599:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23b98c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3b98c; op2val:0x80000000;
op3val:0x807ffffc; valaddr_reg:x3; val_offset:49797*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49797*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16600:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23b98c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3b98c; op2val:0x80000000;
op3val:0x807ffffe; valaddr_reg:x3; val_offset:49800*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49800*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16601:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23b98c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3b98c; op2val:0x80000000;
op3val:0x83800000; valaddr_reg:x3; val_offset:49803*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49803*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16602:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23b98c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3b98c; op2val:0x80000000;
op3val:0x83800001; valaddr_reg:x3; val_offset:49806*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49806*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16603:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23b98c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3b98c; op2val:0x80000000;
op3val:0x83800003; valaddr_reg:x3; val_offset:49809*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49809*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16604:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23b98c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3b98c; op2val:0x80000000;
op3val:0x83800007; valaddr_reg:x3; val_offset:49812*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49812*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16605:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23b98c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3b98c; op2val:0x80000000;
op3val:0x8380000f; valaddr_reg:x3; val_offset:49815*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49815*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16606:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23b98c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3b98c; op2val:0x80000000;
op3val:0x8380001f; valaddr_reg:x3; val_offset:49818*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49818*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16607:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23b98c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3b98c; op2val:0x80000000;
op3val:0x8380003f; valaddr_reg:x3; val_offset:49821*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49821*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16608:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23b98c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3b98c; op2val:0x80000000;
op3val:0x8380007f; valaddr_reg:x3; val_offset:49824*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49824*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16609:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23b98c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3b98c; op2val:0x80000000;
op3val:0x838000ff; valaddr_reg:x3; val_offset:49827*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49827*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16610:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23b98c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3b98c; op2val:0x80000000;
op3val:0x838001ff; valaddr_reg:x3; val_offset:49830*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49830*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16611:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23b98c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3b98c; op2val:0x80000000;
op3val:0x838003ff; valaddr_reg:x3; val_offset:49833*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49833*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16612:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23b98c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3b98c; op2val:0x80000000;
op3val:0x838007ff; valaddr_reg:x3; val_offset:49836*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49836*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16613:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23b98c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3b98c; op2val:0x80000000;
op3val:0x83800fff; valaddr_reg:x3; val_offset:49839*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49839*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16614:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23b98c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3b98c; op2val:0x80000000;
op3val:0x83801fff; valaddr_reg:x3; val_offset:49842*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49842*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16615:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23b98c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3b98c; op2val:0x80000000;
op3val:0x83803fff; valaddr_reg:x3; val_offset:49845*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49845*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16616:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23b98c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3b98c; op2val:0x80000000;
op3val:0x83807fff; valaddr_reg:x3; val_offset:49848*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49848*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16617:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23b98c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3b98c; op2val:0x80000000;
op3val:0x8380ffff; valaddr_reg:x3; val_offset:49851*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49851*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16618:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23b98c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3b98c; op2val:0x80000000;
op3val:0x8381ffff; valaddr_reg:x3; val_offset:49854*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49854*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16619:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23b98c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3b98c; op2val:0x80000000;
op3val:0x8383ffff; valaddr_reg:x3; val_offset:49857*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49857*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16620:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23b98c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3b98c; op2val:0x80000000;
op3val:0x8387ffff; valaddr_reg:x3; val_offset:49860*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49860*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16621:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23b98c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3b98c; op2val:0x80000000;
op3val:0x838fffff; valaddr_reg:x3; val_offset:49863*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49863*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16622:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23b98c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3b98c; op2val:0x80000000;
op3val:0x839fffff; valaddr_reg:x3; val_offset:49866*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49866*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16623:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23b98c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3b98c; op2val:0x80000000;
op3val:0x83bfffff; valaddr_reg:x3; val_offset:49869*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49869*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16624:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23b98c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3b98c; op2val:0x80000000;
op3val:0x83c00000; valaddr_reg:x3; val_offset:49872*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49872*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16625:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23b98c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3b98c; op2val:0x80000000;
op3val:0x83e00000; valaddr_reg:x3; val_offset:49875*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49875*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16626:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23b98c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3b98c; op2val:0x80000000;
op3val:0x83f00000; valaddr_reg:x3; val_offset:49878*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49878*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16627:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23b98c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3b98c; op2val:0x80000000;
op3val:0x83f80000; valaddr_reg:x3; val_offset:49881*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49881*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16628:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23b98c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3b98c; op2val:0x80000000;
op3val:0x83fc0000; valaddr_reg:x3; val_offset:49884*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49884*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16629:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23b98c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3b98c; op2val:0x80000000;
op3val:0x83fe0000; valaddr_reg:x3; val_offset:49887*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49887*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16630:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23b98c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3b98c; op2val:0x80000000;
op3val:0x83ff0000; valaddr_reg:x3; val_offset:49890*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49890*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16631:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23b98c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3b98c; op2val:0x80000000;
op3val:0x83ff8000; valaddr_reg:x3; val_offset:49893*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49893*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16632:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23b98c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3b98c; op2val:0x80000000;
op3val:0x83ffc000; valaddr_reg:x3; val_offset:49896*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49896*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16633:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23b98c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3b98c; op2val:0x80000000;
op3val:0x83ffe000; valaddr_reg:x3; val_offset:49899*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49899*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16634:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23b98c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3b98c; op2val:0x80000000;
op3val:0x83fff000; valaddr_reg:x3; val_offset:49902*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49902*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16635:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23b98c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3b98c; op2val:0x80000000;
op3val:0x83fff800; valaddr_reg:x3; val_offset:49905*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49905*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16636:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23b98c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3b98c; op2val:0x80000000;
op3val:0x83fffc00; valaddr_reg:x3; val_offset:49908*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49908*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16637:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23b98c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3b98c; op2val:0x80000000;
op3val:0x83fffe00; valaddr_reg:x3; val_offset:49911*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49911*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16638:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23b98c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3b98c; op2val:0x80000000;
op3val:0x83ffff00; valaddr_reg:x3; val_offset:49914*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49914*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16639:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23b98c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3b98c; op2val:0x80000000;
op3val:0x83ffff80; valaddr_reg:x3; val_offset:49917*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49917*0 + 3*129*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2124649107,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382363648,32,FLEN)
NAN_BOXED(2124649107,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382364160,32,FLEN)
NAN_BOXED(2124649107,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382364416,32,FLEN)
NAN_BOXED(2124649107,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382364544,32,FLEN)
NAN_BOXED(2124649107,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382364608,32,FLEN)
NAN_BOXED(2124649107,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382364640,32,FLEN)
NAN_BOXED(2124649107,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382364656,32,FLEN)
NAN_BOXED(2124649107,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382364664,32,FLEN)
NAN_BOXED(2124649107,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382364668,32,FLEN)
NAN_BOXED(2124649107,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382364670,32,FLEN)
NAN_BOXED(2124649107,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382364671,32,FLEN)
NAN_BOXED(2124653156,32,FLEN)
NAN_BOXED(6561836,32,FLEN)
NAN_BOXED(796917760,32,FLEN)
NAN_BOXED(2124653156,32,FLEN)
NAN_BOXED(6561836,32,FLEN)
NAN_BOXED(796917761,32,FLEN)
NAN_BOXED(2124653156,32,FLEN)
NAN_BOXED(6561836,32,FLEN)
NAN_BOXED(796917763,32,FLEN)
NAN_BOXED(2124653156,32,FLEN)
NAN_BOXED(6561836,32,FLEN)
NAN_BOXED(796917767,32,FLEN)
NAN_BOXED(2124653156,32,FLEN)
NAN_BOXED(6561836,32,FLEN)
NAN_BOXED(796917775,32,FLEN)
NAN_BOXED(2124653156,32,FLEN)
NAN_BOXED(6561836,32,FLEN)
NAN_BOXED(796917791,32,FLEN)
NAN_BOXED(2124653156,32,FLEN)
NAN_BOXED(6561836,32,FLEN)
NAN_BOXED(796917823,32,FLEN)
NAN_BOXED(2124653156,32,FLEN)
NAN_BOXED(6561836,32,FLEN)
NAN_BOXED(796917887,32,FLEN)
NAN_BOXED(2124653156,32,FLEN)
NAN_BOXED(6561836,32,FLEN)
NAN_BOXED(796918015,32,FLEN)
NAN_BOXED(2124653156,32,FLEN)
NAN_BOXED(6561836,32,FLEN)
NAN_BOXED(796918271,32,FLEN)
NAN_BOXED(2124653156,32,FLEN)
NAN_BOXED(6561836,32,FLEN)
NAN_BOXED(796918783,32,FLEN)
NAN_BOXED(2124653156,32,FLEN)
NAN_BOXED(6561836,32,FLEN)
NAN_BOXED(796919807,32,FLEN)
NAN_BOXED(2124653156,32,FLEN)
NAN_BOXED(6561836,32,FLEN)
NAN_BOXED(796921855,32,FLEN)
NAN_BOXED(2124653156,32,FLEN)
NAN_BOXED(6561836,32,FLEN)
NAN_BOXED(796925951,32,FLEN)
NAN_BOXED(2124653156,32,FLEN)
NAN_BOXED(6561836,32,FLEN)
NAN_BOXED(796934143,32,FLEN)
NAN_BOXED(2124653156,32,FLEN)
NAN_BOXED(6561836,32,FLEN)
NAN_BOXED(796950527,32,FLEN)
NAN_BOXED(2124653156,32,FLEN)
NAN_BOXED(6561836,32,FLEN)
NAN_BOXED(796983295,32,FLEN)
NAN_BOXED(2124653156,32,FLEN)
NAN_BOXED(6561836,32,FLEN)
NAN_BOXED(797048831,32,FLEN)
NAN_BOXED(2124653156,32,FLEN)
NAN_BOXED(6561836,32,FLEN)
NAN_BOXED(797179903,32,FLEN)
NAN_BOXED(2124653156,32,FLEN)
NAN_BOXED(6561836,32,FLEN)
NAN_BOXED(797442047,32,FLEN)
NAN_BOXED(2124653156,32,FLEN)
NAN_BOXED(6561836,32,FLEN)
NAN_BOXED(797966335,32,FLEN)
NAN_BOXED(2124653156,32,FLEN)
NAN_BOXED(6561836,32,FLEN)
NAN_BOXED(799014911,32,FLEN)
NAN_BOXED(2124653156,32,FLEN)
NAN_BOXED(6561836,32,FLEN)
NAN_BOXED(801112063,32,FLEN)
NAN_BOXED(2124653156,32,FLEN)
NAN_BOXED(6561836,32,FLEN)
NAN_BOXED(801112064,32,FLEN)
NAN_BOXED(2124653156,32,FLEN)
NAN_BOXED(6561836,32,FLEN)
NAN_BOXED(803209216,32,FLEN)
NAN_BOXED(2124653156,32,FLEN)
NAN_BOXED(6561836,32,FLEN)
NAN_BOXED(804257792,32,FLEN)
NAN_BOXED(2124653156,32,FLEN)
NAN_BOXED(6561836,32,FLEN)
NAN_BOXED(804782080,32,FLEN)
NAN_BOXED(2124653156,32,FLEN)
NAN_BOXED(6561836,32,FLEN)
NAN_BOXED(805044224,32,FLEN)
NAN_BOXED(2124653156,32,FLEN)
NAN_BOXED(6561836,32,FLEN)
NAN_BOXED(805175296,32,FLEN)
NAN_BOXED(2124653156,32,FLEN)
NAN_BOXED(6561836,32,FLEN)
NAN_BOXED(805240832,32,FLEN)
NAN_BOXED(2124653156,32,FLEN)
NAN_BOXED(6561836,32,FLEN)
NAN_BOXED(805273600,32,FLEN)
NAN_BOXED(2124653156,32,FLEN)
NAN_BOXED(6561836,32,FLEN)
NAN_BOXED(805289984,32,FLEN)
NAN_BOXED(2124653156,32,FLEN)
NAN_BOXED(6561836,32,FLEN)
NAN_BOXED(805298176,32,FLEN)
NAN_BOXED(2124653156,32,FLEN)
NAN_BOXED(6561836,32,FLEN)
NAN_BOXED(805302272,32,FLEN)
NAN_BOXED(2124653156,32,FLEN)
NAN_BOXED(6561836,32,FLEN)
NAN_BOXED(805304320,32,FLEN)
NAN_BOXED(2124653156,32,FLEN)
NAN_BOXED(6561836,32,FLEN)
NAN_BOXED(805305344,32,FLEN)
NAN_BOXED(2124653156,32,FLEN)
NAN_BOXED(6561836,32,FLEN)
NAN_BOXED(805305856,32,FLEN)
NAN_BOXED(2124653156,32,FLEN)
NAN_BOXED(6561836,32,FLEN)
NAN_BOXED(805306112,32,FLEN)
NAN_BOXED(2124653156,32,FLEN)
NAN_BOXED(6561836,32,FLEN)
NAN_BOXED(805306240,32,FLEN)
NAN_BOXED(2124653156,32,FLEN)
NAN_BOXED(6561836,32,FLEN)
NAN_BOXED(805306304,32,FLEN)
NAN_BOXED(2124653156,32,FLEN)
NAN_BOXED(6561836,32,FLEN)
NAN_BOXED(805306336,32,FLEN)
NAN_BOXED(2124653156,32,FLEN)
NAN_BOXED(6561836,32,FLEN)
NAN_BOXED(805306352,32,FLEN)
NAN_BOXED(2124653156,32,FLEN)
NAN_BOXED(6561836,32,FLEN)
NAN_BOXED(805306360,32,FLEN)
NAN_BOXED(2124653156,32,FLEN)
NAN_BOXED(6561836,32,FLEN)
NAN_BOXED(805306364,32,FLEN)
NAN_BOXED(2124653156,32,FLEN)
NAN_BOXED(6561836,32,FLEN)
NAN_BOXED(805306366,32,FLEN)
NAN_BOXED(2124653156,32,FLEN)
NAN_BOXED(6561836,32,FLEN)
NAN_BOXED(805306367,32,FLEN)
NAN_BOXED(2124653156,32,FLEN)
NAN_BOXED(6561836,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2124653156,32,FLEN)
NAN_BOXED(6561836,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2124653156,32,FLEN)
NAN_BOXED(6561836,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2124653156,32,FLEN)
NAN_BOXED(6561836,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2124653156,32,FLEN)
NAN_BOXED(6561836,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2124653156,32,FLEN)
NAN_BOXED(6561836,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2124653156,32,FLEN)
NAN_BOXED(6561836,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2124653156,32,FLEN)
NAN_BOXED(6561836,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2124653156,32,FLEN)
NAN_BOXED(6561836,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2124653156,32,FLEN)
NAN_BOXED(6561836,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2124653156,32,FLEN)
NAN_BOXED(6561836,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2124653156,32,FLEN)
NAN_BOXED(6561836,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2124653156,32,FLEN)
NAN_BOXED(6561836,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2124653156,32,FLEN)
NAN_BOXED(6561836,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2124653156,32,FLEN)
NAN_BOXED(6561836,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2124653156,32,FLEN)
NAN_BOXED(6561836,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2124659084,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2124659084,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483651,32,FLEN)
NAN_BOXED(2124659084,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483655,32,FLEN)
NAN_BOXED(2124659084,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149161369,32,FLEN)
NAN_BOXED(2124659084,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149880393,32,FLEN)
NAN_BOXED(2124659084,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2150839091,32,FLEN)
NAN_BOXED(2124659084,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151078765,32,FLEN)
NAN_BOXED(2124659084,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151398331,32,FLEN)
NAN_BOXED(2124659084,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151957572,32,FLEN)
NAN_BOXED(2124659084,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2152516812,32,FLEN)
NAN_BOXED(2124659084,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2153475510,32,FLEN)
NAN_BOXED(2124659084,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154194534,32,FLEN)
NAN_BOXED(2124659084,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154673883,32,FLEN)
NAN_BOXED(2124659084,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872248,32,FLEN)
NAN_BOXED(2124659084,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872252,32,FLEN)
NAN_BOXED(2124659084,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2124659084,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206203904,32,FLEN)
NAN_BOXED(2124659084,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206203905,32,FLEN)
NAN_BOXED(2124659084,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206203907,32,FLEN)
NAN_BOXED(2124659084,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206203911,32,FLEN)
NAN_BOXED(2124659084,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206203919,32,FLEN)
NAN_BOXED(2124659084,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206203935,32,FLEN)
NAN_BOXED(2124659084,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206203967,32,FLEN)
NAN_BOXED(2124659084,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206204031,32,FLEN)
NAN_BOXED(2124659084,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206204159,32,FLEN)
NAN_BOXED(2124659084,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206204415,32,FLEN)
NAN_BOXED(2124659084,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206204927,32,FLEN)
NAN_BOXED(2124659084,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206205951,32,FLEN)
NAN_BOXED(2124659084,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206207999,32,FLEN)
NAN_BOXED(2124659084,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206212095,32,FLEN)
NAN_BOXED(2124659084,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206220287,32,FLEN)
NAN_BOXED(2124659084,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206236671,32,FLEN)
NAN_BOXED(2124659084,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206269439,32,FLEN)
NAN_BOXED(2124659084,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206334975,32,FLEN)
NAN_BOXED(2124659084,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206466047,32,FLEN)
NAN_BOXED(2124659084,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206728191,32,FLEN)
NAN_BOXED(2124659084,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2207252479,32,FLEN)
NAN_BOXED(2124659084,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2208301055,32,FLEN)
NAN_BOXED(2124659084,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2210398207,32,FLEN)
NAN_BOXED(2124659084,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2210398208,32,FLEN)
NAN_BOXED(2124659084,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2212495360,32,FLEN)
NAN_BOXED(2124659084,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2213543936,32,FLEN)
NAN_BOXED(2124659084,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214068224,32,FLEN)
NAN_BOXED(2124659084,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214330368,32,FLEN)
NAN_BOXED(2124659084,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214461440,32,FLEN)
NAN_BOXED(2124659084,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214526976,32,FLEN)
NAN_BOXED(2124659084,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214559744,32,FLEN)
NAN_BOXED(2124659084,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214576128,32,FLEN)
NAN_BOXED(2124659084,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214584320,32,FLEN)
NAN_BOXED(2124659084,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214588416,32,FLEN)
NAN_BOXED(2124659084,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214590464,32,FLEN)
NAN_BOXED(2124659084,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214591488,32,FLEN)
NAN_BOXED(2124659084,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214592000,32,FLEN)
NAN_BOXED(2124659084,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214592256,32,FLEN)
NAN_BOXED(2124659084,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214592384,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
