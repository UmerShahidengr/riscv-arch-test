
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:17:59 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_17024:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ab7f3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaab7f3; op2val:0x80000000;
op3val:0x80b33333; valaddr_reg:x3; val_offset:51072*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51072*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17025:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ab7f3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaab7f3; op2val:0x80000000;
op3val:0x80b6db6d; valaddr_reg:x3; val_offset:51075*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51075*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17026:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ab7f3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaab7f3; op2val:0x80000000;
op3val:0x80bbbbbb; valaddr_reg:x3; val_offset:51078*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51078*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17027:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ab7f3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaab7f3; op2val:0x80000000;
op3val:0x80c44444; valaddr_reg:x3; val_offset:51081*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51081*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17028:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ab7f3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaab7f3; op2val:0x80000000;
op3val:0x80cccccc; valaddr_reg:x3; val_offset:51084*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51084*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17029:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ab7f3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaab7f3; op2val:0x80000000;
op3val:0x80db6db6; valaddr_reg:x3; val_offset:51087*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51087*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17030:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ab7f3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaab7f3; op2val:0x80000000;
op3val:0x80e66666; valaddr_reg:x3; val_offset:51090*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51090*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17031:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ab7f3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaab7f3; op2val:0x80000000;
op3val:0x80edb6db; valaddr_reg:x3; val_offset:51093*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51093*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17032:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ab7f3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaab7f3; op2val:0x80000000;
op3val:0x80fffff8; valaddr_reg:x3; val_offset:51096*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51096*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17033:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ab7f3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaab7f3; op2val:0x80000000;
op3val:0x80fffffc; valaddr_reg:x3; val_offset:51099*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51099*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17034:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ab7f3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaab7f3; op2val:0x80000000;
op3val:0x80fffffe; valaddr_reg:x3; val_offset:51102*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51102*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17035:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ab7f3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaab7f3; op2val:0x80000000;
op3val:0x83000000; valaddr_reg:x3; val_offset:51105*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51105*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17036:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ab7f3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaab7f3; op2val:0x80000000;
op3val:0x83000001; valaddr_reg:x3; val_offset:51108*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51108*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17037:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ab7f3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaab7f3; op2val:0x80000000;
op3val:0x83000003; valaddr_reg:x3; val_offset:51111*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51111*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17038:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ab7f3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaab7f3; op2val:0x80000000;
op3val:0x83000007; valaddr_reg:x3; val_offset:51114*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51114*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17039:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ab7f3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaab7f3; op2val:0x80000000;
op3val:0x8300000f; valaddr_reg:x3; val_offset:51117*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51117*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17040:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ab7f3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaab7f3; op2val:0x80000000;
op3val:0x8300001f; valaddr_reg:x3; val_offset:51120*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51120*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17041:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ab7f3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaab7f3; op2val:0x80000000;
op3val:0x8300003f; valaddr_reg:x3; val_offset:51123*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51123*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17042:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ab7f3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaab7f3; op2val:0x80000000;
op3val:0x8300007f; valaddr_reg:x3; val_offset:51126*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51126*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17043:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ab7f3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaab7f3; op2val:0x80000000;
op3val:0x830000ff; valaddr_reg:x3; val_offset:51129*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51129*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17044:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ab7f3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaab7f3; op2val:0x80000000;
op3val:0x830001ff; valaddr_reg:x3; val_offset:51132*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51132*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17045:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ab7f3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaab7f3; op2val:0x80000000;
op3val:0x830003ff; valaddr_reg:x3; val_offset:51135*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51135*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17046:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ab7f3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaab7f3; op2val:0x80000000;
op3val:0x830007ff; valaddr_reg:x3; val_offset:51138*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51138*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17047:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ab7f3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaab7f3; op2val:0x80000000;
op3val:0x83000fff; valaddr_reg:x3; val_offset:51141*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51141*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17048:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ab7f3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaab7f3; op2val:0x80000000;
op3val:0x83001fff; valaddr_reg:x3; val_offset:51144*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51144*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17049:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ab7f3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaab7f3; op2val:0x80000000;
op3val:0x83003fff; valaddr_reg:x3; val_offset:51147*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51147*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17050:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ab7f3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaab7f3; op2val:0x80000000;
op3val:0x83007fff; valaddr_reg:x3; val_offset:51150*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51150*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17051:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ab7f3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaab7f3; op2val:0x80000000;
op3val:0x8300ffff; valaddr_reg:x3; val_offset:51153*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51153*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17052:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ab7f3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaab7f3; op2val:0x80000000;
op3val:0x8301ffff; valaddr_reg:x3; val_offset:51156*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51156*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17053:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ab7f3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaab7f3; op2val:0x80000000;
op3val:0x8303ffff; valaddr_reg:x3; val_offset:51159*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51159*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17054:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ab7f3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaab7f3; op2val:0x80000000;
op3val:0x8307ffff; valaddr_reg:x3; val_offset:51162*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51162*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17055:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ab7f3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaab7f3; op2val:0x80000000;
op3val:0x830fffff; valaddr_reg:x3; val_offset:51165*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51165*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17056:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ab7f3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaab7f3; op2val:0x80000000;
op3val:0x831fffff; valaddr_reg:x3; val_offset:51168*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51168*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17057:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ab7f3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaab7f3; op2val:0x80000000;
op3val:0x833fffff; valaddr_reg:x3; val_offset:51171*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51171*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17058:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ab7f3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaab7f3; op2val:0x80000000;
op3val:0x83400000; valaddr_reg:x3; val_offset:51174*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51174*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17059:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ab7f3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaab7f3; op2val:0x80000000;
op3val:0x83600000; valaddr_reg:x3; val_offset:51177*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51177*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17060:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ab7f3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaab7f3; op2val:0x80000000;
op3val:0x83700000; valaddr_reg:x3; val_offset:51180*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51180*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17061:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ab7f3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaab7f3; op2val:0x80000000;
op3val:0x83780000; valaddr_reg:x3; val_offset:51183*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51183*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17062:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ab7f3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaab7f3; op2val:0x80000000;
op3val:0x837c0000; valaddr_reg:x3; val_offset:51186*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51186*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17063:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ab7f3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaab7f3; op2val:0x80000000;
op3val:0x837e0000; valaddr_reg:x3; val_offset:51189*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51189*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17064:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ab7f3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaab7f3; op2val:0x80000000;
op3val:0x837f0000; valaddr_reg:x3; val_offset:51192*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51192*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17065:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ab7f3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaab7f3; op2val:0x80000000;
op3val:0x837f8000; valaddr_reg:x3; val_offset:51195*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51195*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17066:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ab7f3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaab7f3; op2val:0x80000000;
op3val:0x837fc000; valaddr_reg:x3; val_offset:51198*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51198*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17067:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ab7f3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaab7f3; op2val:0x80000000;
op3val:0x837fe000; valaddr_reg:x3; val_offset:51201*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51201*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17068:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ab7f3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaab7f3; op2val:0x80000000;
op3val:0x837ff000; valaddr_reg:x3; val_offset:51204*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51204*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17069:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ab7f3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaab7f3; op2val:0x80000000;
op3val:0x837ff800; valaddr_reg:x3; val_offset:51207*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51207*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17070:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ab7f3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaab7f3; op2val:0x80000000;
op3val:0x837ffc00; valaddr_reg:x3; val_offset:51210*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51210*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17071:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ab7f3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaab7f3; op2val:0x80000000;
op3val:0x837ffe00; valaddr_reg:x3; val_offset:51213*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51213*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17072:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ab7f3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaab7f3; op2val:0x80000000;
op3val:0x837fff00; valaddr_reg:x3; val_offset:51216*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51216*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17073:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ab7f3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaab7f3; op2val:0x80000000;
op3val:0x837fff80; valaddr_reg:x3; val_offset:51219*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51219*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17074:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ab7f3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaab7f3; op2val:0x80000000;
op3val:0x837fffc0; valaddr_reg:x3; val_offset:51222*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51222*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17075:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ab7f3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaab7f3; op2val:0x80000000;
op3val:0x837fffe0; valaddr_reg:x3; val_offset:51225*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51225*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17076:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ab7f3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaab7f3; op2val:0x80000000;
op3val:0x837ffff0; valaddr_reg:x3; val_offset:51228*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51228*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17077:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ab7f3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaab7f3; op2val:0x80000000;
op3val:0x837ffff8; valaddr_reg:x3; val_offset:51231*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51231*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17078:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ab7f3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaab7f3; op2val:0x80000000;
op3val:0x837ffffc; valaddr_reg:x3; val_offset:51234*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51234*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17079:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ab7f3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaab7f3; op2val:0x80000000;
op3val:0x837ffffe; valaddr_reg:x3; val_offset:51237*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51237*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17080:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ab7f3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaab7f3; op2val:0x80000000;
op3val:0x837fffff; valaddr_reg:x3; val_offset:51240*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51240*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17081:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ae033 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaae033; op2val:0x80000000;
op3val:0x80000001; valaddr_reg:x3; val_offset:51243*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51243*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17082:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ae033 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaae033; op2val:0x80000000;
op3val:0x80000003; valaddr_reg:x3; val_offset:51246*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51246*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17083:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ae033 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaae033; op2val:0x80000000;
op3val:0x80000007; valaddr_reg:x3; val_offset:51249*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51249*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17084:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ae033 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaae033; op2val:0x80000000;
op3val:0x80199999; valaddr_reg:x3; val_offset:51252*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51252*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17085:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ae033 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaae033; op2val:0x80000000;
op3val:0x80249249; valaddr_reg:x3; val_offset:51255*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51255*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17086:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ae033 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaae033; op2val:0x80000000;
op3val:0x80333333; valaddr_reg:x3; val_offset:51258*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51258*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17087:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ae033 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaae033; op2val:0x80000000;
op3val:0x8036db6d; valaddr_reg:x3; val_offset:51261*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51261*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17088:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ae033 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaae033; op2val:0x80000000;
op3val:0x803bbbbb; valaddr_reg:x3; val_offset:51264*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51264*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17089:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ae033 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaae033; op2val:0x80000000;
op3val:0x80444444; valaddr_reg:x3; val_offset:51267*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51267*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17090:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ae033 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaae033; op2val:0x80000000;
op3val:0x804ccccc; valaddr_reg:x3; val_offset:51270*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51270*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17091:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ae033 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaae033; op2val:0x80000000;
op3val:0x805b6db6; valaddr_reg:x3; val_offset:51273*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51273*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17092:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ae033 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaae033; op2val:0x80000000;
op3val:0x80666666; valaddr_reg:x3; val_offset:51276*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51276*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17093:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ae033 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaae033; op2val:0x80000000;
op3val:0x806db6db; valaddr_reg:x3; val_offset:51279*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51279*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17094:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ae033 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaae033; op2val:0x80000000;
op3val:0x807ffff8; valaddr_reg:x3; val_offset:51282*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51282*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17095:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ae033 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaae033; op2val:0x80000000;
op3val:0x807ffffc; valaddr_reg:x3; val_offset:51285*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51285*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17096:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ae033 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaae033; op2val:0x80000000;
op3val:0x807ffffe; valaddr_reg:x3; val_offset:51288*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51288*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17097:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ae033 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaae033; op2val:0x80000000;
op3val:0x8d800000; valaddr_reg:x3; val_offset:51291*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51291*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17098:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ae033 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaae033; op2val:0x80000000;
op3val:0x8d800001; valaddr_reg:x3; val_offset:51294*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51294*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17099:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ae033 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaae033; op2val:0x80000000;
op3val:0x8d800003; valaddr_reg:x3; val_offset:51297*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51297*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17100:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ae033 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaae033; op2val:0x80000000;
op3val:0x8d800007; valaddr_reg:x3; val_offset:51300*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51300*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17101:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ae033 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaae033; op2val:0x80000000;
op3val:0x8d80000f; valaddr_reg:x3; val_offset:51303*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51303*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17102:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ae033 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaae033; op2val:0x80000000;
op3val:0x8d80001f; valaddr_reg:x3; val_offset:51306*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51306*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17103:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ae033 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaae033; op2val:0x80000000;
op3val:0x8d80003f; valaddr_reg:x3; val_offset:51309*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51309*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17104:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ae033 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaae033; op2val:0x80000000;
op3val:0x8d80007f; valaddr_reg:x3; val_offset:51312*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51312*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17105:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ae033 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaae033; op2val:0x80000000;
op3val:0x8d8000ff; valaddr_reg:x3; val_offset:51315*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51315*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17106:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ae033 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaae033; op2val:0x80000000;
op3val:0x8d8001ff; valaddr_reg:x3; val_offset:51318*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51318*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17107:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ae033 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaae033; op2val:0x80000000;
op3val:0x8d8003ff; valaddr_reg:x3; val_offset:51321*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51321*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17108:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ae033 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaae033; op2val:0x80000000;
op3val:0x8d8007ff; valaddr_reg:x3; val_offset:51324*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51324*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17109:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ae033 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaae033; op2val:0x80000000;
op3val:0x8d800fff; valaddr_reg:x3; val_offset:51327*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51327*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17110:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ae033 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaae033; op2val:0x80000000;
op3val:0x8d801fff; valaddr_reg:x3; val_offset:51330*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51330*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17111:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ae033 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaae033; op2val:0x80000000;
op3val:0x8d803fff; valaddr_reg:x3; val_offset:51333*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51333*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17112:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ae033 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaae033; op2val:0x80000000;
op3val:0x8d807fff; valaddr_reg:x3; val_offset:51336*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51336*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17113:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ae033 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaae033; op2val:0x80000000;
op3val:0x8d80ffff; valaddr_reg:x3; val_offset:51339*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51339*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17114:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ae033 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaae033; op2val:0x80000000;
op3val:0x8d81ffff; valaddr_reg:x3; val_offset:51342*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51342*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17115:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ae033 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaae033; op2val:0x80000000;
op3val:0x8d83ffff; valaddr_reg:x3; val_offset:51345*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51345*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17116:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ae033 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaae033; op2val:0x80000000;
op3val:0x8d87ffff; valaddr_reg:x3; val_offset:51348*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51348*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17117:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ae033 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaae033; op2val:0x80000000;
op3val:0x8d8fffff; valaddr_reg:x3; val_offset:51351*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51351*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17118:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ae033 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaae033; op2val:0x80000000;
op3val:0x8d9fffff; valaddr_reg:x3; val_offset:51354*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51354*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17119:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ae033 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaae033; op2val:0x80000000;
op3val:0x8dbfffff; valaddr_reg:x3; val_offset:51357*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51357*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17120:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ae033 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaae033; op2val:0x80000000;
op3val:0x8dc00000; valaddr_reg:x3; val_offset:51360*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51360*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17121:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ae033 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaae033; op2val:0x80000000;
op3val:0x8de00000; valaddr_reg:x3; val_offset:51363*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51363*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17122:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ae033 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaae033; op2val:0x80000000;
op3val:0x8df00000; valaddr_reg:x3; val_offset:51366*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51366*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17123:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ae033 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaae033; op2val:0x80000000;
op3val:0x8df80000; valaddr_reg:x3; val_offset:51369*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51369*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17124:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ae033 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaae033; op2val:0x80000000;
op3val:0x8dfc0000; valaddr_reg:x3; val_offset:51372*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51372*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17125:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ae033 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaae033; op2val:0x80000000;
op3val:0x8dfe0000; valaddr_reg:x3; val_offset:51375*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51375*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17126:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ae033 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaae033; op2val:0x80000000;
op3val:0x8dff0000; valaddr_reg:x3; val_offset:51378*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51378*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17127:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ae033 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaae033; op2val:0x80000000;
op3val:0x8dff8000; valaddr_reg:x3; val_offset:51381*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51381*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17128:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ae033 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaae033; op2val:0x80000000;
op3val:0x8dffc000; valaddr_reg:x3; val_offset:51384*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51384*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17129:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ae033 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaae033; op2val:0x80000000;
op3val:0x8dffe000; valaddr_reg:x3; val_offset:51387*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51387*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17130:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ae033 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaae033; op2val:0x80000000;
op3val:0x8dfff000; valaddr_reg:x3; val_offset:51390*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51390*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17131:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ae033 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaae033; op2val:0x80000000;
op3val:0x8dfff800; valaddr_reg:x3; val_offset:51393*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51393*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17132:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ae033 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaae033; op2val:0x80000000;
op3val:0x8dfffc00; valaddr_reg:x3; val_offset:51396*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51396*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17133:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ae033 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaae033; op2val:0x80000000;
op3val:0x8dfffe00; valaddr_reg:x3; val_offset:51399*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51399*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17134:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ae033 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaae033; op2val:0x80000000;
op3val:0x8dffff00; valaddr_reg:x3; val_offset:51402*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51402*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17135:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ae033 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaae033; op2val:0x80000000;
op3val:0x8dffff80; valaddr_reg:x3; val_offset:51405*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51405*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17136:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ae033 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaae033; op2val:0x80000000;
op3val:0x8dffffc0; valaddr_reg:x3; val_offset:51408*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51408*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17137:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ae033 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaae033; op2val:0x80000000;
op3val:0x8dffffe0; valaddr_reg:x3; val_offset:51411*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51411*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17138:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ae033 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaae033; op2val:0x80000000;
op3val:0x8dfffff0; valaddr_reg:x3; val_offset:51414*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51414*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17139:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ae033 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaae033; op2val:0x80000000;
op3val:0x8dfffff8; valaddr_reg:x3; val_offset:51417*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51417*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17140:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ae033 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaae033; op2val:0x80000000;
op3val:0x8dfffffc; valaddr_reg:x3; val_offset:51420*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51420*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17141:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ae033 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaae033; op2val:0x80000000;
op3val:0x8dfffffe; valaddr_reg:x3; val_offset:51423*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51423*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17142:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ae033 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaae033; op2val:0x80000000;
op3val:0x8dffffff; valaddr_reg:x3; val_offset:51426*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51426*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17143:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2b53bd and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3f4285 and fs3 == 1 and fe3 == 0xc8 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eab53bd; op2val:0xc03f4285;
op3val:0xe4000000; valaddr_reg:x3; val_offset:51429*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51429*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17144:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2b53bd and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3f4285 and fs3 == 1 and fe3 == 0xc8 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eab53bd; op2val:0xc03f4285;
op3val:0xe4000001; valaddr_reg:x3; val_offset:51432*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51432*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17145:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2b53bd and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3f4285 and fs3 == 1 and fe3 == 0xc8 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eab53bd; op2val:0xc03f4285;
op3val:0xe4000003; valaddr_reg:x3; val_offset:51435*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51435*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17146:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2b53bd and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3f4285 and fs3 == 1 and fe3 == 0xc8 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eab53bd; op2val:0xc03f4285;
op3val:0xe4000007; valaddr_reg:x3; val_offset:51438*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51438*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17147:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2b53bd and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3f4285 and fs3 == 1 and fe3 == 0xc8 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eab53bd; op2val:0xc03f4285;
op3val:0xe400000f; valaddr_reg:x3; val_offset:51441*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51441*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17148:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2b53bd and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3f4285 and fs3 == 1 and fe3 == 0xc8 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eab53bd; op2val:0xc03f4285;
op3val:0xe400001f; valaddr_reg:x3; val_offset:51444*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51444*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17149:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2b53bd and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3f4285 and fs3 == 1 and fe3 == 0xc8 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eab53bd; op2val:0xc03f4285;
op3val:0xe400003f; valaddr_reg:x3; val_offset:51447*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51447*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17150:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2b53bd and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3f4285 and fs3 == 1 and fe3 == 0xc8 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eab53bd; op2val:0xc03f4285;
op3val:0xe400007f; valaddr_reg:x3; val_offset:51450*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51450*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17151:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2b53bd and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3f4285 and fs3 == 1 and fe3 == 0xc8 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eab53bd; op2val:0xc03f4285;
op3val:0xe40000ff; valaddr_reg:x3; val_offset:51453*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51453*0 + 3*133*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2125117427,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2159227699,32,FLEN)
NAN_BOXED(2125117427,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2159467373,32,FLEN)
NAN_BOXED(2125117427,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2159786939,32,FLEN)
NAN_BOXED(2125117427,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2160346180,32,FLEN)
NAN_BOXED(2125117427,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2160905420,32,FLEN)
NAN_BOXED(2125117427,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2161864118,32,FLEN)
NAN_BOXED(2125117427,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2162583142,32,FLEN)
NAN_BOXED(2125117427,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2163062491,32,FLEN)
NAN_BOXED(2125117427,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260856,32,FLEN)
NAN_BOXED(2125117427,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260860,32,FLEN)
NAN_BOXED(2125117427,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260862,32,FLEN)
NAN_BOXED(2125117427,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197815296,32,FLEN)
NAN_BOXED(2125117427,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197815297,32,FLEN)
NAN_BOXED(2125117427,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197815299,32,FLEN)
NAN_BOXED(2125117427,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197815303,32,FLEN)
NAN_BOXED(2125117427,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197815311,32,FLEN)
NAN_BOXED(2125117427,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197815327,32,FLEN)
NAN_BOXED(2125117427,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197815359,32,FLEN)
NAN_BOXED(2125117427,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197815423,32,FLEN)
NAN_BOXED(2125117427,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197815551,32,FLEN)
NAN_BOXED(2125117427,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197815807,32,FLEN)
NAN_BOXED(2125117427,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197816319,32,FLEN)
NAN_BOXED(2125117427,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197817343,32,FLEN)
NAN_BOXED(2125117427,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197819391,32,FLEN)
NAN_BOXED(2125117427,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197823487,32,FLEN)
NAN_BOXED(2125117427,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197831679,32,FLEN)
NAN_BOXED(2125117427,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197848063,32,FLEN)
NAN_BOXED(2125117427,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197880831,32,FLEN)
NAN_BOXED(2125117427,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197946367,32,FLEN)
NAN_BOXED(2125117427,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2198077439,32,FLEN)
NAN_BOXED(2125117427,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2198339583,32,FLEN)
NAN_BOXED(2125117427,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2198863871,32,FLEN)
NAN_BOXED(2125117427,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2199912447,32,FLEN)
NAN_BOXED(2125117427,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2202009599,32,FLEN)
NAN_BOXED(2125117427,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2202009600,32,FLEN)
NAN_BOXED(2125117427,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2204106752,32,FLEN)
NAN_BOXED(2125117427,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2205155328,32,FLEN)
NAN_BOXED(2125117427,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2205679616,32,FLEN)
NAN_BOXED(2125117427,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2205941760,32,FLEN)
NAN_BOXED(2125117427,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206072832,32,FLEN)
NAN_BOXED(2125117427,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206138368,32,FLEN)
NAN_BOXED(2125117427,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206171136,32,FLEN)
NAN_BOXED(2125117427,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206187520,32,FLEN)
NAN_BOXED(2125117427,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206195712,32,FLEN)
NAN_BOXED(2125117427,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206199808,32,FLEN)
NAN_BOXED(2125117427,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206201856,32,FLEN)
NAN_BOXED(2125117427,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206202880,32,FLEN)
NAN_BOXED(2125117427,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206203392,32,FLEN)
NAN_BOXED(2125117427,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206203648,32,FLEN)
NAN_BOXED(2125117427,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206203776,32,FLEN)
NAN_BOXED(2125117427,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206203840,32,FLEN)
NAN_BOXED(2125117427,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206203872,32,FLEN)
NAN_BOXED(2125117427,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206203888,32,FLEN)
NAN_BOXED(2125117427,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206203896,32,FLEN)
NAN_BOXED(2125117427,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206203900,32,FLEN)
NAN_BOXED(2125117427,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206203902,32,FLEN)
NAN_BOXED(2125117427,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206203903,32,FLEN)
NAN_BOXED(2125127731,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2125127731,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483651,32,FLEN)
NAN_BOXED(2125127731,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483655,32,FLEN)
NAN_BOXED(2125127731,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149161369,32,FLEN)
NAN_BOXED(2125127731,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149880393,32,FLEN)
NAN_BOXED(2125127731,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2150839091,32,FLEN)
NAN_BOXED(2125127731,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151078765,32,FLEN)
NAN_BOXED(2125127731,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151398331,32,FLEN)
NAN_BOXED(2125127731,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151957572,32,FLEN)
NAN_BOXED(2125127731,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2152516812,32,FLEN)
NAN_BOXED(2125127731,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2153475510,32,FLEN)
NAN_BOXED(2125127731,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154194534,32,FLEN)
NAN_BOXED(2125127731,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154673883,32,FLEN)
NAN_BOXED(2125127731,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872248,32,FLEN)
NAN_BOXED(2125127731,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872252,32,FLEN)
NAN_BOXED(2125127731,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2125127731,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373976064,32,FLEN)
NAN_BOXED(2125127731,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373976065,32,FLEN)
NAN_BOXED(2125127731,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373976067,32,FLEN)
NAN_BOXED(2125127731,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373976071,32,FLEN)
NAN_BOXED(2125127731,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373976079,32,FLEN)
NAN_BOXED(2125127731,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373976095,32,FLEN)
NAN_BOXED(2125127731,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373976127,32,FLEN)
NAN_BOXED(2125127731,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373976191,32,FLEN)
NAN_BOXED(2125127731,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373976319,32,FLEN)
NAN_BOXED(2125127731,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373976575,32,FLEN)
NAN_BOXED(2125127731,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373977087,32,FLEN)
NAN_BOXED(2125127731,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373978111,32,FLEN)
NAN_BOXED(2125127731,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373980159,32,FLEN)
NAN_BOXED(2125127731,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373984255,32,FLEN)
NAN_BOXED(2125127731,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373992447,32,FLEN)
NAN_BOXED(2125127731,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2374008831,32,FLEN)
NAN_BOXED(2125127731,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2374041599,32,FLEN)
NAN_BOXED(2125127731,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2374107135,32,FLEN)
NAN_BOXED(2125127731,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2374238207,32,FLEN)
NAN_BOXED(2125127731,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2374500351,32,FLEN)
NAN_BOXED(2125127731,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2375024639,32,FLEN)
NAN_BOXED(2125127731,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2376073215,32,FLEN)
NAN_BOXED(2125127731,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2378170367,32,FLEN)
NAN_BOXED(2125127731,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2378170368,32,FLEN)
NAN_BOXED(2125127731,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2380267520,32,FLEN)
NAN_BOXED(2125127731,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2381316096,32,FLEN)
NAN_BOXED(2125127731,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2381840384,32,FLEN)
NAN_BOXED(2125127731,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382102528,32,FLEN)
NAN_BOXED(2125127731,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382233600,32,FLEN)
NAN_BOXED(2125127731,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382299136,32,FLEN)
NAN_BOXED(2125127731,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382331904,32,FLEN)
NAN_BOXED(2125127731,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382348288,32,FLEN)
NAN_BOXED(2125127731,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382356480,32,FLEN)
NAN_BOXED(2125127731,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382360576,32,FLEN)
NAN_BOXED(2125127731,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382362624,32,FLEN)
NAN_BOXED(2125127731,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382363648,32,FLEN)
NAN_BOXED(2125127731,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382364160,32,FLEN)
NAN_BOXED(2125127731,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382364416,32,FLEN)
NAN_BOXED(2125127731,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382364544,32,FLEN)
NAN_BOXED(2125127731,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382364608,32,FLEN)
NAN_BOXED(2125127731,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382364640,32,FLEN)
NAN_BOXED(2125127731,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382364656,32,FLEN)
NAN_BOXED(2125127731,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382364664,32,FLEN)
NAN_BOXED(2125127731,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382364668,32,FLEN)
NAN_BOXED(2125127731,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382364670,32,FLEN)
NAN_BOXED(2125127731,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382364671,32,FLEN)
NAN_BOXED(2125157309,32,FLEN)
NAN_BOXED(3225371269,32,FLEN)
NAN_BOXED(3825205248,32,FLEN)
NAN_BOXED(2125157309,32,FLEN)
NAN_BOXED(3225371269,32,FLEN)
NAN_BOXED(3825205249,32,FLEN)
NAN_BOXED(2125157309,32,FLEN)
NAN_BOXED(3225371269,32,FLEN)
NAN_BOXED(3825205251,32,FLEN)
NAN_BOXED(2125157309,32,FLEN)
NAN_BOXED(3225371269,32,FLEN)
NAN_BOXED(3825205255,32,FLEN)
NAN_BOXED(2125157309,32,FLEN)
NAN_BOXED(3225371269,32,FLEN)
NAN_BOXED(3825205263,32,FLEN)
NAN_BOXED(2125157309,32,FLEN)
NAN_BOXED(3225371269,32,FLEN)
NAN_BOXED(3825205279,32,FLEN)
NAN_BOXED(2125157309,32,FLEN)
NAN_BOXED(3225371269,32,FLEN)
NAN_BOXED(3825205311,32,FLEN)
NAN_BOXED(2125157309,32,FLEN)
NAN_BOXED(3225371269,32,FLEN)
NAN_BOXED(3825205375,32,FLEN)
NAN_BOXED(2125157309,32,FLEN)
NAN_BOXED(3225371269,32,FLEN)
NAN_BOXED(3825205503,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
