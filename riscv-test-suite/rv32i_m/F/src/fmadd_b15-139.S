
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:17:59 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_17664:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x300757 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb00757; op2val:0x80000000;
op3val:0x8d0001ff; valaddr_reg:x3; val_offset:52992*0 + 3*138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52992*0 + 3*138*FLEN/8, x4, x1, x2)

inst_17665:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x300757 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb00757; op2val:0x80000000;
op3val:0x8d0003ff; valaddr_reg:x3; val_offset:52995*0 + 3*138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52995*0 + 3*138*FLEN/8, x4, x1, x2)

inst_17666:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x300757 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb00757; op2val:0x80000000;
op3val:0x8d0007ff; valaddr_reg:x3; val_offset:52998*0 + 3*138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52998*0 + 3*138*FLEN/8, x4, x1, x2)

inst_17667:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x300757 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb00757; op2val:0x80000000;
op3val:0x8d000fff; valaddr_reg:x3; val_offset:53001*0 + 3*138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53001*0 + 3*138*FLEN/8, x4, x1, x2)

inst_17668:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x300757 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb00757; op2val:0x80000000;
op3val:0x8d001fff; valaddr_reg:x3; val_offset:53004*0 + 3*138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53004*0 + 3*138*FLEN/8, x4, x1, x2)

inst_17669:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x300757 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb00757; op2val:0x80000000;
op3val:0x8d003fff; valaddr_reg:x3; val_offset:53007*0 + 3*138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53007*0 + 3*138*FLEN/8, x4, x1, x2)

inst_17670:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x300757 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb00757; op2val:0x80000000;
op3val:0x8d007fff; valaddr_reg:x3; val_offset:53010*0 + 3*138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53010*0 + 3*138*FLEN/8, x4, x1, x2)

inst_17671:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x300757 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb00757; op2val:0x80000000;
op3val:0x8d00ffff; valaddr_reg:x3; val_offset:53013*0 + 3*138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53013*0 + 3*138*FLEN/8, x4, x1, x2)

inst_17672:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x300757 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb00757; op2val:0x80000000;
op3val:0x8d01ffff; valaddr_reg:x3; val_offset:53016*0 + 3*138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53016*0 + 3*138*FLEN/8, x4, x1, x2)

inst_17673:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x300757 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb00757; op2val:0x80000000;
op3val:0x8d03ffff; valaddr_reg:x3; val_offset:53019*0 + 3*138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53019*0 + 3*138*FLEN/8, x4, x1, x2)

inst_17674:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x300757 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb00757; op2val:0x80000000;
op3val:0x8d07ffff; valaddr_reg:x3; val_offset:53022*0 + 3*138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53022*0 + 3*138*FLEN/8, x4, x1, x2)

inst_17675:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x300757 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb00757; op2val:0x80000000;
op3val:0x8d0fffff; valaddr_reg:x3; val_offset:53025*0 + 3*138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53025*0 + 3*138*FLEN/8, x4, x1, x2)

inst_17676:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x300757 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb00757; op2val:0x80000000;
op3val:0x8d1fffff; valaddr_reg:x3; val_offset:53028*0 + 3*138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53028*0 + 3*138*FLEN/8, x4, x1, x2)

inst_17677:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x300757 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb00757; op2val:0x80000000;
op3val:0x8d3fffff; valaddr_reg:x3; val_offset:53031*0 + 3*138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53031*0 + 3*138*FLEN/8, x4, x1, x2)

inst_17678:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x300757 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb00757; op2val:0x80000000;
op3val:0x8d400000; valaddr_reg:x3; val_offset:53034*0 + 3*138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53034*0 + 3*138*FLEN/8, x4, x1, x2)

inst_17679:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x300757 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb00757; op2val:0x80000000;
op3val:0x8d600000; valaddr_reg:x3; val_offset:53037*0 + 3*138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53037*0 + 3*138*FLEN/8, x4, x1, x2)

inst_17680:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x300757 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb00757; op2val:0x80000000;
op3val:0x8d700000; valaddr_reg:x3; val_offset:53040*0 + 3*138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53040*0 + 3*138*FLEN/8, x4, x1, x2)

inst_17681:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x300757 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb00757; op2val:0x80000000;
op3val:0x8d780000; valaddr_reg:x3; val_offset:53043*0 + 3*138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53043*0 + 3*138*FLEN/8, x4, x1, x2)

inst_17682:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x300757 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb00757; op2val:0x80000000;
op3val:0x8d7c0000; valaddr_reg:x3; val_offset:53046*0 + 3*138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53046*0 + 3*138*FLEN/8, x4, x1, x2)

inst_17683:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x300757 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb00757; op2val:0x80000000;
op3val:0x8d7e0000; valaddr_reg:x3; val_offset:53049*0 + 3*138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53049*0 + 3*138*FLEN/8, x4, x1, x2)

inst_17684:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x300757 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb00757; op2val:0x80000000;
op3val:0x8d7f0000; valaddr_reg:x3; val_offset:53052*0 + 3*138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53052*0 + 3*138*FLEN/8, x4, x1, x2)

inst_17685:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x300757 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb00757; op2val:0x80000000;
op3val:0x8d7f8000; valaddr_reg:x3; val_offset:53055*0 + 3*138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53055*0 + 3*138*FLEN/8, x4, x1, x2)

inst_17686:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x300757 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb00757; op2val:0x80000000;
op3val:0x8d7fc000; valaddr_reg:x3; val_offset:53058*0 + 3*138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53058*0 + 3*138*FLEN/8, x4, x1, x2)

inst_17687:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x300757 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb00757; op2val:0x80000000;
op3val:0x8d7fe000; valaddr_reg:x3; val_offset:53061*0 + 3*138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53061*0 + 3*138*FLEN/8, x4, x1, x2)

inst_17688:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x300757 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb00757; op2val:0x80000000;
op3val:0x8d7ff000; valaddr_reg:x3; val_offset:53064*0 + 3*138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53064*0 + 3*138*FLEN/8, x4, x1, x2)

inst_17689:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x300757 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb00757; op2val:0x80000000;
op3val:0x8d7ff800; valaddr_reg:x3; val_offset:53067*0 + 3*138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53067*0 + 3*138*FLEN/8, x4, x1, x2)

inst_17690:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x300757 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb00757; op2val:0x80000000;
op3val:0x8d7ffc00; valaddr_reg:x3; val_offset:53070*0 + 3*138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53070*0 + 3*138*FLEN/8, x4, x1, x2)

inst_17691:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x300757 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb00757; op2val:0x80000000;
op3val:0x8d7ffe00; valaddr_reg:x3; val_offset:53073*0 + 3*138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53073*0 + 3*138*FLEN/8, x4, x1, x2)

inst_17692:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x300757 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb00757; op2val:0x80000000;
op3val:0x8d7fff00; valaddr_reg:x3; val_offset:53076*0 + 3*138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53076*0 + 3*138*FLEN/8, x4, x1, x2)

inst_17693:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x300757 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb00757; op2val:0x80000000;
op3val:0x8d7fff80; valaddr_reg:x3; val_offset:53079*0 + 3*138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53079*0 + 3*138*FLEN/8, x4, x1, x2)

inst_17694:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x300757 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb00757; op2val:0x80000000;
op3val:0x8d7fffc0; valaddr_reg:x3; val_offset:53082*0 + 3*138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53082*0 + 3*138*FLEN/8, x4, x1, x2)

inst_17695:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x300757 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb00757; op2val:0x80000000;
op3val:0x8d7fffe0; valaddr_reg:x3; val_offset:53085*0 + 3*138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53085*0 + 3*138*FLEN/8, x4, x1, x2)

inst_17696:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x300757 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb00757; op2val:0x80000000;
op3val:0x8d7ffff0; valaddr_reg:x3; val_offset:53088*0 + 3*138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53088*0 + 3*138*FLEN/8, x4, x1, x2)

inst_17697:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x300757 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb00757; op2val:0x80000000;
op3val:0x8d7ffff8; valaddr_reg:x3; val_offset:53091*0 + 3*138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53091*0 + 3*138*FLEN/8, x4, x1, x2)

inst_17698:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x300757 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb00757; op2val:0x80000000;
op3val:0x8d7ffffc; valaddr_reg:x3; val_offset:53094*0 + 3*138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53094*0 + 3*138*FLEN/8, x4, x1, x2)

inst_17699:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x300757 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb00757; op2val:0x80000000;
op3val:0x8d7ffffe; valaddr_reg:x3; val_offset:53097*0 + 3*138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53097*0 + 3*138*FLEN/8, x4, x1, x2)

inst_17700:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x300757 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb00757; op2val:0x80000000;
op3val:0x8d7fffff; valaddr_reg:x3; val_offset:53100*0 + 3*138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53100*0 + 3*138*FLEN/8, x4, x1, x2)

inst_17701:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x30208a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5d0612 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb0208a; op2val:0x805d0612;
op3val:0xbf800001; valaddr_reg:x3; val_offset:53103*0 + 3*138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53103*0 + 3*138*FLEN/8, x4, x1, x2)

inst_17702:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x30208a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5d0612 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb0208a; op2val:0x805d0612;
op3val:0xbf800003; valaddr_reg:x3; val_offset:53106*0 + 3*138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53106*0 + 3*138*FLEN/8, x4, x1, x2)

inst_17703:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x30208a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5d0612 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb0208a; op2val:0x805d0612;
op3val:0xbf800007; valaddr_reg:x3; val_offset:53109*0 + 3*138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53109*0 + 3*138*FLEN/8, x4, x1, x2)

inst_17704:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x30208a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5d0612 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb0208a; op2val:0x805d0612;
op3val:0xbf999999; valaddr_reg:x3; val_offset:53112*0 + 3*138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53112*0 + 3*138*FLEN/8, x4, x1, x2)

inst_17705:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x30208a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5d0612 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb0208a; op2val:0x805d0612;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:53115*0 + 3*138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53115*0 + 3*138*FLEN/8, x4, x1, x2)

inst_17706:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x30208a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5d0612 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb0208a; op2val:0x805d0612;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:53118*0 + 3*138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53118*0 + 3*138*FLEN/8, x4, x1, x2)

inst_17707:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x30208a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5d0612 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb0208a; op2val:0x805d0612;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:53121*0 + 3*138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53121*0 + 3*138*FLEN/8, x4, x1, x2)

inst_17708:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x30208a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5d0612 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb0208a; op2val:0x805d0612;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:53124*0 + 3*138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53124*0 + 3*138*FLEN/8, x4, x1, x2)

inst_17709:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x30208a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5d0612 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb0208a; op2val:0x805d0612;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:53127*0 + 3*138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53127*0 + 3*138*FLEN/8, x4, x1, x2)

inst_17710:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x30208a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5d0612 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb0208a; op2val:0x805d0612;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:53130*0 + 3*138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53130*0 + 3*138*FLEN/8, x4, x1, x2)

inst_17711:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x30208a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5d0612 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb0208a; op2val:0x805d0612;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:53133*0 + 3*138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53133*0 + 3*138*FLEN/8, x4, x1, x2)

inst_17712:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x30208a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5d0612 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb0208a; op2val:0x805d0612;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:53136*0 + 3*138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53136*0 + 3*138*FLEN/8, x4, x1, x2)

inst_17713:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x30208a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5d0612 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb0208a; op2val:0x805d0612;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:53139*0 + 3*138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53139*0 + 3*138*FLEN/8, x4, x1, x2)

inst_17714:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x30208a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5d0612 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb0208a; op2val:0x805d0612;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:53142*0 + 3*138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53142*0 + 3*138*FLEN/8, x4, x1, x2)

inst_17715:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x30208a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5d0612 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb0208a; op2val:0x805d0612;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:53145*0 + 3*138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53145*0 + 3*138*FLEN/8, x4, x1, x2)

inst_17716:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x30208a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5d0612 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb0208a; op2val:0x805d0612;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:53148*0 + 3*138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53148*0 + 3*138*FLEN/8, x4, x1, x2)

inst_17717:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x30208a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5d0612 and fs3 == 1 and fe3 == 0x93 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb0208a; op2val:0x805d0612;
op3val:0xc9800000; valaddr_reg:x3; val_offset:53151*0 + 3*138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53151*0 + 3*138*FLEN/8, x4, x1, x2)

inst_17718:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x30208a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5d0612 and fs3 == 1 and fe3 == 0x93 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb0208a; op2val:0x805d0612;
op3val:0xc9800001; valaddr_reg:x3; val_offset:53154*0 + 3*138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53154*0 + 3*138*FLEN/8, x4, x1, x2)

inst_17719:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x30208a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5d0612 and fs3 == 1 and fe3 == 0x93 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb0208a; op2val:0x805d0612;
op3val:0xc9800003; valaddr_reg:x3; val_offset:53157*0 + 3*138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53157*0 + 3*138*FLEN/8, x4, x1, x2)

inst_17720:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x30208a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5d0612 and fs3 == 1 and fe3 == 0x93 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb0208a; op2val:0x805d0612;
op3val:0xc9800007; valaddr_reg:x3; val_offset:53160*0 + 3*138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53160*0 + 3*138*FLEN/8, x4, x1, x2)

inst_17721:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x30208a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5d0612 and fs3 == 1 and fe3 == 0x93 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb0208a; op2val:0x805d0612;
op3val:0xc980000f; valaddr_reg:x3; val_offset:53163*0 + 3*138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53163*0 + 3*138*FLEN/8, x4, x1, x2)

inst_17722:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x30208a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5d0612 and fs3 == 1 and fe3 == 0x93 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb0208a; op2val:0x805d0612;
op3val:0xc980001f; valaddr_reg:x3; val_offset:53166*0 + 3*138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53166*0 + 3*138*FLEN/8, x4, x1, x2)

inst_17723:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x30208a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5d0612 and fs3 == 1 and fe3 == 0x93 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb0208a; op2val:0x805d0612;
op3val:0xc980003f; valaddr_reg:x3; val_offset:53169*0 + 3*138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53169*0 + 3*138*FLEN/8, x4, x1, x2)

inst_17724:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x30208a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5d0612 and fs3 == 1 and fe3 == 0x93 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb0208a; op2val:0x805d0612;
op3val:0xc980007f; valaddr_reg:x3; val_offset:53172*0 + 3*138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53172*0 + 3*138*FLEN/8, x4, x1, x2)

inst_17725:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x30208a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5d0612 and fs3 == 1 and fe3 == 0x93 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb0208a; op2val:0x805d0612;
op3val:0xc98000ff; valaddr_reg:x3; val_offset:53175*0 + 3*138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53175*0 + 3*138*FLEN/8, x4, x1, x2)

inst_17726:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x30208a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5d0612 and fs3 == 1 and fe3 == 0x93 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb0208a; op2val:0x805d0612;
op3val:0xc98001ff; valaddr_reg:x3; val_offset:53178*0 + 3*138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53178*0 + 3*138*FLEN/8, x4, x1, x2)

inst_17727:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x30208a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5d0612 and fs3 == 1 and fe3 == 0x93 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb0208a; op2val:0x805d0612;
op3val:0xc98003ff; valaddr_reg:x3; val_offset:53181*0 + 3*138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53181*0 + 3*138*FLEN/8, x4, x1, x2)

inst_17728:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x30208a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5d0612 and fs3 == 1 and fe3 == 0x93 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb0208a; op2val:0x805d0612;
op3val:0xc98007ff; valaddr_reg:x3; val_offset:53184*0 + 3*138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53184*0 + 3*138*FLEN/8, x4, x1, x2)

inst_17729:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x30208a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5d0612 and fs3 == 1 and fe3 == 0x93 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb0208a; op2val:0x805d0612;
op3val:0xc9800fff; valaddr_reg:x3; val_offset:53187*0 + 3*138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53187*0 + 3*138*FLEN/8, x4, x1, x2)

inst_17730:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x30208a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5d0612 and fs3 == 1 and fe3 == 0x93 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb0208a; op2val:0x805d0612;
op3val:0xc9801fff; valaddr_reg:x3; val_offset:53190*0 + 3*138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53190*0 + 3*138*FLEN/8, x4, x1, x2)

inst_17731:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x30208a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5d0612 and fs3 == 1 and fe3 == 0x93 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb0208a; op2val:0x805d0612;
op3val:0xc9803fff; valaddr_reg:x3; val_offset:53193*0 + 3*138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53193*0 + 3*138*FLEN/8, x4, x1, x2)

inst_17732:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x30208a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5d0612 and fs3 == 1 and fe3 == 0x93 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb0208a; op2val:0x805d0612;
op3val:0xc9807fff; valaddr_reg:x3; val_offset:53196*0 + 3*138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53196*0 + 3*138*FLEN/8, x4, x1, x2)

inst_17733:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x30208a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5d0612 and fs3 == 1 and fe3 == 0x93 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb0208a; op2val:0x805d0612;
op3val:0xc980ffff; valaddr_reg:x3; val_offset:53199*0 + 3*138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53199*0 + 3*138*FLEN/8, x4, x1, x2)

inst_17734:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x30208a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5d0612 and fs3 == 1 and fe3 == 0x93 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb0208a; op2val:0x805d0612;
op3val:0xc981ffff; valaddr_reg:x3; val_offset:53202*0 + 3*138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53202*0 + 3*138*FLEN/8, x4, x1, x2)

inst_17735:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x30208a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5d0612 and fs3 == 1 and fe3 == 0x93 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb0208a; op2val:0x805d0612;
op3val:0xc983ffff; valaddr_reg:x3; val_offset:53205*0 + 3*138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53205*0 + 3*138*FLEN/8, x4, x1, x2)

inst_17736:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x30208a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5d0612 and fs3 == 1 and fe3 == 0x93 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb0208a; op2val:0x805d0612;
op3val:0xc987ffff; valaddr_reg:x3; val_offset:53208*0 + 3*138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53208*0 + 3*138*FLEN/8, x4, x1, x2)

inst_17737:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x30208a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5d0612 and fs3 == 1 and fe3 == 0x93 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb0208a; op2val:0x805d0612;
op3val:0xc98fffff; valaddr_reg:x3; val_offset:53211*0 + 3*138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53211*0 + 3*138*FLEN/8, x4, x1, x2)

inst_17738:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x30208a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5d0612 and fs3 == 1 and fe3 == 0x93 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb0208a; op2val:0x805d0612;
op3val:0xc99fffff; valaddr_reg:x3; val_offset:53214*0 + 3*138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53214*0 + 3*138*FLEN/8, x4, x1, x2)

inst_17739:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x30208a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5d0612 and fs3 == 1 and fe3 == 0x93 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb0208a; op2val:0x805d0612;
op3val:0xc9bfffff; valaddr_reg:x3; val_offset:53217*0 + 3*138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53217*0 + 3*138*FLEN/8, x4, x1, x2)

inst_17740:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x30208a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5d0612 and fs3 == 1 and fe3 == 0x93 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb0208a; op2val:0x805d0612;
op3val:0xc9c00000; valaddr_reg:x3; val_offset:53220*0 + 3*138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53220*0 + 3*138*FLEN/8, x4, x1, x2)

inst_17741:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x30208a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5d0612 and fs3 == 1 and fe3 == 0x93 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb0208a; op2val:0x805d0612;
op3val:0xc9e00000; valaddr_reg:x3; val_offset:53223*0 + 3*138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53223*0 + 3*138*FLEN/8, x4, x1, x2)

inst_17742:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x30208a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5d0612 and fs3 == 1 and fe3 == 0x93 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb0208a; op2val:0x805d0612;
op3val:0xc9f00000; valaddr_reg:x3; val_offset:53226*0 + 3*138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53226*0 + 3*138*FLEN/8, x4, x1, x2)

inst_17743:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x30208a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5d0612 and fs3 == 1 and fe3 == 0x93 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb0208a; op2val:0x805d0612;
op3val:0xc9f80000; valaddr_reg:x3; val_offset:53229*0 + 3*138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53229*0 + 3*138*FLEN/8, x4, x1, x2)

inst_17744:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x30208a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5d0612 and fs3 == 1 and fe3 == 0x93 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb0208a; op2val:0x805d0612;
op3val:0xc9fc0000; valaddr_reg:x3; val_offset:53232*0 + 3*138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53232*0 + 3*138*FLEN/8, x4, x1, x2)

inst_17745:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x30208a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5d0612 and fs3 == 1 and fe3 == 0x93 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb0208a; op2val:0x805d0612;
op3val:0xc9fe0000; valaddr_reg:x3; val_offset:53235*0 + 3*138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53235*0 + 3*138*FLEN/8, x4, x1, x2)

inst_17746:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x30208a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5d0612 and fs3 == 1 and fe3 == 0x93 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb0208a; op2val:0x805d0612;
op3val:0xc9ff0000; valaddr_reg:x3; val_offset:53238*0 + 3*138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53238*0 + 3*138*FLEN/8, x4, x1, x2)

inst_17747:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x30208a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5d0612 and fs3 == 1 and fe3 == 0x93 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb0208a; op2val:0x805d0612;
op3val:0xc9ff8000; valaddr_reg:x3; val_offset:53241*0 + 3*138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53241*0 + 3*138*FLEN/8, x4, x1, x2)

inst_17748:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x30208a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5d0612 and fs3 == 1 and fe3 == 0x93 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb0208a; op2val:0x805d0612;
op3val:0xc9ffc000; valaddr_reg:x3; val_offset:53244*0 + 3*138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53244*0 + 3*138*FLEN/8, x4, x1, x2)

inst_17749:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x30208a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5d0612 and fs3 == 1 and fe3 == 0x93 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb0208a; op2val:0x805d0612;
op3val:0xc9ffe000; valaddr_reg:x3; val_offset:53247*0 + 3*138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53247*0 + 3*138*FLEN/8, x4, x1, x2)

inst_17750:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x30208a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5d0612 and fs3 == 1 and fe3 == 0x93 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb0208a; op2val:0x805d0612;
op3val:0xc9fff000; valaddr_reg:x3; val_offset:53250*0 + 3*138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53250*0 + 3*138*FLEN/8, x4, x1, x2)

inst_17751:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x30208a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5d0612 and fs3 == 1 and fe3 == 0x93 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb0208a; op2val:0x805d0612;
op3val:0xc9fff800; valaddr_reg:x3; val_offset:53253*0 + 3*138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53253*0 + 3*138*FLEN/8, x4, x1, x2)

inst_17752:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x30208a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5d0612 and fs3 == 1 and fe3 == 0x93 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb0208a; op2val:0x805d0612;
op3val:0xc9fffc00; valaddr_reg:x3; val_offset:53256*0 + 3*138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53256*0 + 3*138*FLEN/8, x4, x1, x2)

inst_17753:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x30208a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5d0612 and fs3 == 1 and fe3 == 0x93 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb0208a; op2val:0x805d0612;
op3val:0xc9fffe00; valaddr_reg:x3; val_offset:53259*0 + 3*138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53259*0 + 3*138*FLEN/8, x4, x1, x2)

inst_17754:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x30208a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5d0612 and fs3 == 1 and fe3 == 0x93 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb0208a; op2val:0x805d0612;
op3val:0xc9ffff00; valaddr_reg:x3; val_offset:53262*0 + 3*138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53262*0 + 3*138*FLEN/8, x4, x1, x2)

inst_17755:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x30208a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5d0612 and fs3 == 1 and fe3 == 0x93 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb0208a; op2val:0x805d0612;
op3val:0xc9ffff80; valaddr_reg:x3; val_offset:53265*0 + 3*138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53265*0 + 3*138*FLEN/8, x4, x1, x2)

inst_17756:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x30208a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5d0612 and fs3 == 1 and fe3 == 0x93 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb0208a; op2val:0x805d0612;
op3val:0xc9ffffc0; valaddr_reg:x3; val_offset:53268*0 + 3*138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53268*0 + 3*138*FLEN/8, x4, x1, x2)

inst_17757:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x30208a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5d0612 and fs3 == 1 and fe3 == 0x93 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb0208a; op2val:0x805d0612;
op3val:0xc9ffffe0; valaddr_reg:x3; val_offset:53271*0 + 3*138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53271*0 + 3*138*FLEN/8, x4, x1, x2)

inst_17758:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x30208a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5d0612 and fs3 == 1 and fe3 == 0x93 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb0208a; op2val:0x805d0612;
op3val:0xc9fffff0; valaddr_reg:x3; val_offset:53274*0 + 3*138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53274*0 + 3*138*FLEN/8, x4, x1, x2)

inst_17759:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x30208a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5d0612 and fs3 == 1 and fe3 == 0x93 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb0208a; op2val:0x805d0612;
op3val:0xc9fffff8; valaddr_reg:x3; val_offset:53277*0 + 3*138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53277*0 + 3*138*FLEN/8, x4, x1, x2)

inst_17760:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x30208a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5d0612 and fs3 == 1 and fe3 == 0x93 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb0208a; op2val:0x805d0612;
op3val:0xc9fffffc; valaddr_reg:x3; val_offset:53280*0 + 3*138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53280*0 + 3*138*FLEN/8, x4, x1, x2)

inst_17761:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x30208a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5d0612 and fs3 == 1 and fe3 == 0x93 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb0208a; op2val:0x805d0612;
op3val:0xc9fffffe; valaddr_reg:x3; val_offset:53283*0 + 3*138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53283*0 + 3*138*FLEN/8, x4, x1, x2)

inst_17762:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x30208a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5d0612 and fs3 == 1 and fe3 == 0x93 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb0208a; op2val:0x805d0612;
op3val:0xc9ffffff; valaddr_reg:x3; val_offset:53286*0 + 3*138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53286*0 + 3*138*FLEN/8, x4, x1, x2)

inst_17763:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x31933e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3887c1 and fs3 == 1 and fe3 == 0xd0 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb1933e; op2val:0xc03887c1;
op3val:0xe8000000; valaddr_reg:x3; val_offset:53289*0 + 3*138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53289*0 + 3*138*FLEN/8, x4, x1, x2)

inst_17764:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x31933e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3887c1 and fs3 == 1 and fe3 == 0xd0 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb1933e; op2val:0xc03887c1;
op3val:0xe8000001; valaddr_reg:x3; val_offset:53292*0 + 3*138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53292*0 + 3*138*FLEN/8, x4, x1, x2)

inst_17765:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x31933e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3887c1 and fs3 == 1 and fe3 == 0xd0 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb1933e; op2val:0xc03887c1;
op3val:0xe8000003; valaddr_reg:x3; val_offset:53295*0 + 3*138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53295*0 + 3*138*FLEN/8, x4, x1, x2)

inst_17766:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x31933e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3887c1 and fs3 == 1 and fe3 == 0xd0 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb1933e; op2val:0xc03887c1;
op3val:0xe8000007; valaddr_reg:x3; val_offset:53298*0 + 3*138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53298*0 + 3*138*FLEN/8, x4, x1, x2)

inst_17767:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x31933e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3887c1 and fs3 == 1 and fe3 == 0xd0 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb1933e; op2val:0xc03887c1;
op3val:0xe800000f; valaddr_reg:x3; val_offset:53301*0 + 3*138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53301*0 + 3*138*FLEN/8, x4, x1, x2)

inst_17768:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x31933e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3887c1 and fs3 == 1 and fe3 == 0xd0 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb1933e; op2val:0xc03887c1;
op3val:0xe800001f; valaddr_reg:x3; val_offset:53304*0 + 3*138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53304*0 + 3*138*FLEN/8, x4, x1, x2)

inst_17769:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x31933e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3887c1 and fs3 == 1 and fe3 == 0xd0 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb1933e; op2val:0xc03887c1;
op3val:0xe800003f; valaddr_reg:x3; val_offset:53307*0 + 3*138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53307*0 + 3*138*FLEN/8, x4, x1, x2)

inst_17770:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x31933e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3887c1 and fs3 == 1 and fe3 == 0xd0 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb1933e; op2val:0xc03887c1;
op3val:0xe800007f; valaddr_reg:x3; val_offset:53310*0 + 3*138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53310*0 + 3*138*FLEN/8, x4, x1, x2)

inst_17771:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x31933e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3887c1 and fs3 == 1 and fe3 == 0xd0 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb1933e; op2val:0xc03887c1;
op3val:0xe80000ff; valaddr_reg:x3; val_offset:53313*0 + 3*138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53313*0 + 3*138*FLEN/8, x4, x1, x2)

inst_17772:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x31933e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3887c1 and fs3 == 1 and fe3 == 0xd0 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb1933e; op2val:0xc03887c1;
op3val:0xe80001ff; valaddr_reg:x3; val_offset:53316*0 + 3*138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53316*0 + 3*138*FLEN/8, x4, x1, x2)

inst_17773:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x31933e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3887c1 and fs3 == 1 and fe3 == 0xd0 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb1933e; op2val:0xc03887c1;
op3val:0xe80003ff; valaddr_reg:x3; val_offset:53319*0 + 3*138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53319*0 + 3*138*FLEN/8, x4, x1, x2)

inst_17774:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x31933e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3887c1 and fs3 == 1 and fe3 == 0xd0 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb1933e; op2val:0xc03887c1;
op3val:0xe80007ff; valaddr_reg:x3; val_offset:53322*0 + 3*138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53322*0 + 3*138*FLEN/8, x4, x1, x2)

inst_17775:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x31933e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3887c1 and fs3 == 1 and fe3 == 0xd0 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb1933e; op2val:0xc03887c1;
op3val:0xe8000fff; valaddr_reg:x3; val_offset:53325*0 + 3*138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53325*0 + 3*138*FLEN/8, x4, x1, x2)

inst_17776:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x31933e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3887c1 and fs3 == 1 and fe3 == 0xd0 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb1933e; op2val:0xc03887c1;
op3val:0xe8001fff; valaddr_reg:x3; val_offset:53328*0 + 3*138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53328*0 + 3*138*FLEN/8, x4, x1, x2)

inst_17777:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x31933e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3887c1 and fs3 == 1 and fe3 == 0xd0 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb1933e; op2val:0xc03887c1;
op3val:0xe8003fff; valaddr_reg:x3; val_offset:53331*0 + 3*138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53331*0 + 3*138*FLEN/8, x4, x1, x2)

inst_17778:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x31933e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3887c1 and fs3 == 1 and fe3 == 0xd0 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb1933e; op2val:0xc03887c1;
op3val:0xe8007fff; valaddr_reg:x3; val_offset:53334*0 + 3*138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53334*0 + 3*138*FLEN/8, x4, x1, x2)

inst_17779:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x31933e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3887c1 and fs3 == 1 and fe3 == 0xd0 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb1933e; op2val:0xc03887c1;
op3val:0xe800ffff; valaddr_reg:x3; val_offset:53337*0 + 3*138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53337*0 + 3*138*FLEN/8, x4, x1, x2)

inst_17780:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x31933e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3887c1 and fs3 == 1 and fe3 == 0xd0 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb1933e; op2val:0xc03887c1;
op3val:0xe801ffff; valaddr_reg:x3; val_offset:53340*0 + 3*138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53340*0 + 3*138*FLEN/8, x4, x1, x2)

inst_17781:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x31933e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3887c1 and fs3 == 1 and fe3 == 0xd0 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb1933e; op2val:0xc03887c1;
op3val:0xe803ffff; valaddr_reg:x3; val_offset:53343*0 + 3*138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53343*0 + 3*138*FLEN/8, x4, x1, x2)

inst_17782:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x31933e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3887c1 and fs3 == 1 and fe3 == 0xd0 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb1933e; op2val:0xc03887c1;
op3val:0xe807ffff; valaddr_reg:x3; val_offset:53346*0 + 3*138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53346*0 + 3*138*FLEN/8, x4, x1, x2)

inst_17783:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x31933e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3887c1 and fs3 == 1 and fe3 == 0xd0 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb1933e; op2val:0xc03887c1;
op3val:0xe80fffff; valaddr_reg:x3; val_offset:53349*0 + 3*138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53349*0 + 3*138*FLEN/8, x4, x1, x2)

inst_17784:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x31933e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3887c1 and fs3 == 1 and fe3 == 0xd0 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb1933e; op2val:0xc03887c1;
op3val:0xe81fffff; valaddr_reg:x3; val_offset:53352*0 + 3*138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53352*0 + 3*138*FLEN/8, x4, x1, x2)

inst_17785:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x31933e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3887c1 and fs3 == 1 and fe3 == 0xd0 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb1933e; op2val:0xc03887c1;
op3val:0xe83fffff; valaddr_reg:x3; val_offset:53355*0 + 3*138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53355*0 + 3*138*FLEN/8, x4, x1, x2)

inst_17786:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x31933e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3887c1 and fs3 == 1 and fe3 == 0xd0 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb1933e; op2val:0xc03887c1;
op3val:0xe8400000; valaddr_reg:x3; val_offset:53358*0 + 3*138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53358*0 + 3*138*FLEN/8, x4, x1, x2)

inst_17787:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x31933e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3887c1 and fs3 == 1 and fe3 == 0xd0 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb1933e; op2val:0xc03887c1;
op3val:0xe8600000; valaddr_reg:x3; val_offset:53361*0 + 3*138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53361*0 + 3*138*FLEN/8, x4, x1, x2)

inst_17788:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x31933e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3887c1 and fs3 == 1 and fe3 == 0xd0 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb1933e; op2val:0xc03887c1;
op3val:0xe8700000; valaddr_reg:x3; val_offset:53364*0 + 3*138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53364*0 + 3*138*FLEN/8, x4, x1, x2)

inst_17789:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x31933e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3887c1 and fs3 == 1 and fe3 == 0xd0 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb1933e; op2val:0xc03887c1;
op3val:0xe8780000; valaddr_reg:x3; val_offset:53367*0 + 3*138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53367*0 + 3*138*FLEN/8, x4, x1, x2)

inst_17790:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x31933e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3887c1 and fs3 == 1 and fe3 == 0xd0 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb1933e; op2val:0xc03887c1;
op3val:0xe87c0000; valaddr_reg:x3; val_offset:53370*0 + 3*138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53370*0 + 3*138*FLEN/8, x4, x1, x2)

inst_17791:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x31933e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3887c1 and fs3 == 1 and fe3 == 0xd0 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb1933e; op2val:0xc03887c1;
op3val:0xe87e0000; valaddr_reg:x3; val_offset:53373*0 + 3*138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53373*0 + 3*138*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2125465431,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2365587967,32,FLEN)
NAN_BOXED(2125465431,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2365588479,32,FLEN)
NAN_BOXED(2125465431,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2365589503,32,FLEN)
NAN_BOXED(2125465431,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2365591551,32,FLEN)
NAN_BOXED(2125465431,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2365595647,32,FLEN)
NAN_BOXED(2125465431,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2365603839,32,FLEN)
NAN_BOXED(2125465431,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2365620223,32,FLEN)
NAN_BOXED(2125465431,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2365652991,32,FLEN)
NAN_BOXED(2125465431,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2365718527,32,FLEN)
NAN_BOXED(2125465431,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2365849599,32,FLEN)
NAN_BOXED(2125465431,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2366111743,32,FLEN)
NAN_BOXED(2125465431,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2366636031,32,FLEN)
NAN_BOXED(2125465431,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2367684607,32,FLEN)
NAN_BOXED(2125465431,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2369781759,32,FLEN)
NAN_BOXED(2125465431,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2369781760,32,FLEN)
NAN_BOXED(2125465431,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2371878912,32,FLEN)
NAN_BOXED(2125465431,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2372927488,32,FLEN)
NAN_BOXED(2125465431,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373451776,32,FLEN)
NAN_BOXED(2125465431,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373713920,32,FLEN)
NAN_BOXED(2125465431,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373844992,32,FLEN)
NAN_BOXED(2125465431,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373910528,32,FLEN)
NAN_BOXED(2125465431,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373943296,32,FLEN)
NAN_BOXED(2125465431,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373959680,32,FLEN)
NAN_BOXED(2125465431,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373967872,32,FLEN)
NAN_BOXED(2125465431,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373971968,32,FLEN)
NAN_BOXED(2125465431,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373974016,32,FLEN)
NAN_BOXED(2125465431,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373975040,32,FLEN)
NAN_BOXED(2125465431,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373975552,32,FLEN)
NAN_BOXED(2125465431,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373975808,32,FLEN)
NAN_BOXED(2125465431,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373975936,32,FLEN)
NAN_BOXED(2125465431,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373976000,32,FLEN)
NAN_BOXED(2125465431,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373976032,32,FLEN)
NAN_BOXED(2125465431,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373976048,32,FLEN)
NAN_BOXED(2125465431,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373976056,32,FLEN)
NAN_BOXED(2125465431,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373976060,32,FLEN)
NAN_BOXED(2125465431,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373976062,32,FLEN)
NAN_BOXED(2125465431,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373976063,32,FLEN)
NAN_BOXED(2125471882,32,FLEN)
NAN_BOXED(2153580050,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2125471882,32,FLEN)
NAN_BOXED(2153580050,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2125471882,32,FLEN)
NAN_BOXED(2153580050,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
NAN_BOXED(2125471882,32,FLEN)
NAN_BOXED(2153580050,32,FLEN)
NAN_BOXED(3214514585,32,FLEN)
NAN_BOXED(2125471882,32,FLEN)
NAN_BOXED(2153580050,32,FLEN)
NAN_BOXED(3215233609,32,FLEN)
NAN_BOXED(2125471882,32,FLEN)
NAN_BOXED(2153580050,32,FLEN)
NAN_BOXED(3216192307,32,FLEN)
NAN_BOXED(2125471882,32,FLEN)
NAN_BOXED(2153580050,32,FLEN)
NAN_BOXED(3216431981,32,FLEN)
NAN_BOXED(2125471882,32,FLEN)
NAN_BOXED(2153580050,32,FLEN)
NAN_BOXED(3216751547,32,FLEN)
NAN_BOXED(2125471882,32,FLEN)
NAN_BOXED(2153580050,32,FLEN)
NAN_BOXED(3217310788,32,FLEN)
NAN_BOXED(2125471882,32,FLEN)
NAN_BOXED(2153580050,32,FLEN)
NAN_BOXED(3217870028,32,FLEN)
NAN_BOXED(2125471882,32,FLEN)
NAN_BOXED(2153580050,32,FLEN)
NAN_BOXED(3218828726,32,FLEN)
NAN_BOXED(2125471882,32,FLEN)
NAN_BOXED(2153580050,32,FLEN)
NAN_BOXED(3219547750,32,FLEN)
NAN_BOXED(2125471882,32,FLEN)
NAN_BOXED(2153580050,32,FLEN)
NAN_BOXED(3220027099,32,FLEN)
NAN_BOXED(2125471882,32,FLEN)
NAN_BOXED(2153580050,32,FLEN)
NAN_BOXED(3221225464,32,FLEN)
NAN_BOXED(2125471882,32,FLEN)
NAN_BOXED(2153580050,32,FLEN)
NAN_BOXED(3221225468,32,FLEN)
NAN_BOXED(2125471882,32,FLEN)
NAN_BOXED(2153580050,32,FLEN)
NAN_BOXED(3221225470,32,FLEN)
NAN_BOXED(2125471882,32,FLEN)
NAN_BOXED(2153580050,32,FLEN)
NAN_BOXED(3380609024,32,FLEN)
NAN_BOXED(2125471882,32,FLEN)
NAN_BOXED(2153580050,32,FLEN)
NAN_BOXED(3380609025,32,FLEN)
NAN_BOXED(2125471882,32,FLEN)
NAN_BOXED(2153580050,32,FLEN)
NAN_BOXED(3380609027,32,FLEN)
NAN_BOXED(2125471882,32,FLEN)
NAN_BOXED(2153580050,32,FLEN)
NAN_BOXED(3380609031,32,FLEN)
NAN_BOXED(2125471882,32,FLEN)
NAN_BOXED(2153580050,32,FLEN)
NAN_BOXED(3380609039,32,FLEN)
NAN_BOXED(2125471882,32,FLEN)
NAN_BOXED(2153580050,32,FLEN)
NAN_BOXED(3380609055,32,FLEN)
NAN_BOXED(2125471882,32,FLEN)
NAN_BOXED(2153580050,32,FLEN)
NAN_BOXED(3380609087,32,FLEN)
NAN_BOXED(2125471882,32,FLEN)
NAN_BOXED(2153580050,32,FLEN)
NAN_BOXED(3380609151,32,FLEN)
NAN_BOXED(2125471882,32,FLEN)
NAN_BOXED(2153580050,32,FLEN)
NAN_BOXED(3380609279,32,FLEN)
NAN_BOXED(2125471882,32,FLEN)
NAN_BOXED(2153580050,32,FLEN)
NAN_BOXED(3380609535,32,FLEN)
NAN_BOXED(2125471882,32,FLEN)
NAN_BOXED(2153580050,32,FLEN)
NAN_BOXED(3380610047,32,FLEN)
NAN_BOXED(2125471882,32,FLEN)
NAN_BOXED(2153580050,32,FLEN)
NAN_BOXED(3380611071,32,FLEN)
NAN_BOXED(2125471882,32,FLEN)
NAN_BOXED(2153580050,32,FLEN)
NAN_BOXED(3380613119,32,FLEN)
NAN_BOXED(2125471882,32,FLEN)
NAN_BOXED(2153580050,32,FLEN)
NAN_BOXED(3380617215,32,FLEN)
NAN_BOXED(2125471882,32,FLEN)
NAN_BOXED(2153580050,32,FLEN)
NAN_BOXED(3380625407,32,FLEN)
NAN_BOXED(2125471882,32,FLEN)
NAN_BOXED(2153580050,32,FLEN)
NAN_BOXED(3380641791,32,FLEN)
NAN_BOXED(2125471882,32,FLEN)
NAN_BOXED(2153580050,32,FLEN)
NAN_BOXED(3380674559,32,FLEN)
NAN_BOXED(2125471882,32,FLEN)
NAN_BOXED(2153580050,32,FLEN)
NAN_BOXED(3380740095,32,FLEN)
NAN_BOXED(2125471882,32,FLEN)
NAN_BOXED(2153580050,32,FLEN)
NAN_BOXED(3380871167,32,FLEN)
NAN_BOXED(2125471882,32,FLEN)
NAN_BOXED(2153580050,32,FLEN)
NAN_BOXED(3381133311,32,FLEN)
NAN_BOXED(2125471882,32,FLEN)
NAN_BOXED(2153580050,32,FLEN)
NAN_BOXED(3381657599,32,FLEN)
NAN_BOXED(2125471882,32,FLEN)
NAN_BOXED(2153580050,32,FLEN)
NAN_BOXED(3382706175,32,FLEN)
NAN_BOXED(2125471882,32,FLEN)
NAN_BOXED(2153580050,32,FLEN)
NAN_BOXED(3384803327,32,FLEN)
NAN_BOXED(2125471882,32,FLEN)
NAN_BOXED(2153580050,32,FLEN)
NAN_BOXED(3384803328,32,FLEN)
NAN_BOXED(2125471882,32,FLEN)
NAN_BOXED(2153580050,32,FLEN)
NAN_BOXED(3386900480,32,FLEN)
NAN_BOXED(2125471882,32,FLEN)
NAN_BOXED(2153580050,32,FLEN)
NAN_BOXED(3387949056,32,FLEN)
NAN_BOXED(2125471882,32,FLEN)
NAN_BOXED(2153580050,32,FLEN)
NAN_BOXED(3388473344,32,FLEN)
NAN_BOXED(2125471882,32,FLEN)
NAN_BOXED(2153580050,32,FLEN)
NAN_BOXED(3388735488,32,FLEN)
NAN_BOXED(2125471882,32,FLEN)
NAN_BOXED(2153580050,32,FLEN)
NAN_BOXED(3388866560,32,FLEN)
NAN_BOXED(2125471882,32,FLEN)
NAN_BOXED(2153580050,32,FLEN)
NAN_BOXED(3388932096,32,FLEN)
NAN_BOXED(2125471882,32,FLEN)
NAN_BOXED(2153580050,32,FLEN)
NAN_BOXED(3388964864,32,FLEN)
NAN_BOXED(2125471882,32,FLEN)
NAN_BOXED(2153580050,32,FLEN)
NAN_BOXED(3388981248,32,FLEN)
NAN_BOXED(2125471882,32,FLEN)
NAN_BOXED(2153580050,32,FLEN)
NAN_BOXED(3388989440,32,FLEN)
NAN_BOXED(2125471882,32,FLEN)
NAN_BOXED(2153580050,32,FLEN)
NAN_BOXED(3388993536,32,FLEN)
NAN_BOXED(2125471882,32,FLEN)
NAN_BOXED(2153580050,32,FLEN)
NAN_BOXED(3388995584,32,FLEN)
NAN_BOXED(2125471882,32,FLEN)
NAN_BOXED(2153580050,32,FLEN)
NAN_BOXED(3388996608,32,FLEN)
NAN_BOXED(2125471882,32,FLEN)
NAN_BOXED(2153580050,32,FLEN)
NAN_BOXED(3388997120,32,FLEN)
NAN_BOXED(2125471882,32,FLEN)
NAN_BOXED(2153580050,32,FLEN)
NAN_BOXED(3388997376,32,FLEN)
NAN_BOXED(2125471882,32,FLEN)
NAN_BOXED(2153580050,32,FLEN)
NAN_BOXED(3388997504,32,FLEN)
NAN_BOXED(2125471882,32,FLEN)
NAN_BOXED(2153580050,32,FLEN)
NAN_BOXED(3388997568,32,FLEN)
NAN_BOXED(2125471882,32,FLEN)
NAN_BOXED(2153580050,32,FLEN)
NAN_BOXED(3388997600,32,FLEN)
NAN_BOXED(2125471882,32,FLEN)
NAN_BOXED(2153580050,32,FLEN)
NAN_BOXED(3388997616,32,FLEN)
NAN_BOXED(2125471882,32,FLEN)
NAN_BOXED(2153580050,32,FLEN)
NAN_BOXED(3388997624,32,FLEN)
NAN_BOXED(2125471882,32,FLEN)
NAN_BOXED(2153580050,32,FLEN)
NAN_BOXED(3388997628,32,FLEN)
NAN_BOXED(2125471882,32,FLEN)
NAN_BOXED(2153580050,32,FLEN)
NAN_BOXED(3388997630,32,FLEN)
NAN_BOXED(2125471882,32,FLEN)
NAN_BOXED(2153580050,32,FLEN)
NAN_BOXED(3388997631,32,FLEN)
NAN_BOXED(2125566782,32,FLEN)
NAN_BOXED(3224930241,32,FLEN)
NAN_BOXED(3892314112,32,FLEN)
NAN_BOXED(2125566782,32,FLEN)
NAN_BOXED(3224930241,32,FLEN)
NAN_BOXED(3892314113,32,FLEN)
NAN_BOXED(2125566782,32,FLEN)
NAN_BOXED(3224930241,32,FLEN)
NAN_BOXED(3892314115,32,FLEN)
NAN_BOXED(2125566782,32,FLEN)
NAN_BOXED(3224930241,32,FLEN)
NAN_BOXED(3892314119,32,FLEN)
NAN_BOXED(2125566782,32,FLEN)
NAN_BOXED(3224930241,32,FLEN)
NAN_BOXED(3892314127,32,FLEN)
NAN_BOXED(2125566782,32,FLEN)
NAN_BOXED(3224930241,32,FLEN)
NAN_BOXED(3892314143,32,FLEN)
NAN_BOXED(2125566782,32,FLEN)
NAN_BOXED(3224930241,32,FLEN)
NAN_BOXED(3892314175,32,FLEN)
NAN_BOXED(2125566782,32,FLEN)
NAN_BOXED(3224930241,32,FLEN)
NAN_BOXED(3892314239,32,FLEN)
NAN_BOXED(2125566782,32,FLEN)
NAN_BOXED(3224930241,32,FLEN)
NAN_BOXED(3892314367,32,FLEN)
NAN_BOXED(2125566782,32,FLEN)
NAN_BOXED(3224930241,32,FLEN)
NAN_BOXED(3892314623,32,FLEN)
NAN_BOXED(2125566782,32,FLEN)
NAN_BOXED(3224930241,32,FLEN)
NAN_BOXED(3892315135,32,FLEN)
NAN_BOXED(2125566782,32,FLEN)
NAN_BOXED(3224930241,32,FLEN)
NAN_BOXED(3892316159,32,FLEN)
NAN_BOXED(2125566782,32,FLEN)
NAN_BOXED(3224930241,32,FLEN)
NAN_BOXED(3892318207,32,FLEN)
NAN_BOXED(2125566782,32,FLEN)
NAN_BOXED(3224930241,32,FLEN)
NAN_BOXED(3892322303,32,FLEN)
NAN_BOXED(2125566782,32,FLEN)
NAN_BOXED(3224930241,32,FLEN)
NAN_BOXED(3892330495,32,FLEN)
NAN_BOXED(2125566782,32,FLEN)
NAN_BOXED(3224930241,32,FLEN)
NAN_BOXED(3892346879,32,FLEN)
NAN_BOXED(2125566782,32,FLEN)
NAN_BOXED(3224930241,32,FLEN)
NAN_BOXED(3892379647,32,FLEN)
NAN_BOXED(2125566782,32,FLEN)
NAN_BOXED(3224930241,32,FLEN)
NAN_BOXED(3892445183,32,FLEN)
NAN_BOXED(2125566782,32,FLEN)
NAN_BOXED(3224930241,32,FLEN)
NAN_BOXED(3892576255,32,FLEN)
NAN_BOXED(2125566782,32,FLEN)
NAN_BOXED(3224930241,32,FLEN)
NAN_BOXED(3892838399,32,FLEN)
NAN_BOXED(2125566782,32,FLEN)
NAN_BOXED(3224930241,32,FLEN)
NAN_BOXED(3893362687,32,FLEN)
NAN_BOXED(2125566782,32,FLEN)
NAN_BOXED(3224930241,32,FLEN)
NAN_BOXED(3894411263,32,FLEN)
NAN_BOXED(2125566782,32,FLEN)
NAN_BOXED(3224930241,32,FLEN)
NAN_BOXED(3896508415,32,FLEN)
NAN_BOXED(2125566782,32,FLEN)
NAN_BOXED(3224930241,32,FLEN)
NAN_BOXED(3896508416,32,FLEN)
NAN_BOXED(2125566782,32,FLEN)
NAN_BOXED(3224930241,32,FLEN)
NAN_BOXED(3898605568,32,FLEN)
NAN_BOXED(2125566782,32,FLEN)
NAN_BOXED(3224930241,32,FLEN)
NAN_BOXED(3899654144,32,FLEN)
NAN_BOXED(2125566782,32,FLEN)
NAN_BOXED(3224930241,32,FLEN)
NAN_BOXED(3900178432,32,FLEN)
NAN_BOXED(2125566782,32,FLEN)
NAN_BOXED(3224930241,32,FLEN)
NAN_BOXED(3900440576,32,FLEN)
NAN_BOXED(2125566782,32,FLEN)
NAN_BOXED(3224930241,32,FLEN)
NAN_BOXED(3900571648,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
