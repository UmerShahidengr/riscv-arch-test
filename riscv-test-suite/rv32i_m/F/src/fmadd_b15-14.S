
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:17:59 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_1664:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x78bc6b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf8bc6b; op2val:0x0;
op3val:0x7ffff8; valaddr_reg:x3; val_offset:4992*0 + 3*13*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4992*0 + 3*13*FLEN/8, x4, x1, x2)

inst_1665:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x78bc6b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf8bc6b; op2val:0x0;
op3val:0x7ffffc; valaddr_reg:x3; val_offset:4995*0 + 3*13*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4995*0 + 3*13*FLEN/8, x4, x1, x2)

inst_1666:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x78bc6b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf8bc6b; op2val:0x0;
op3val:0x7ffffe; valaddr_reg:x3; val_offset:4998*0 + 3*13*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4998*0 + 3*13*FLEN/8, x4, x1, x2)

inst_1667:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x78bc6b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf8bc6b; op2val:0x0;
op3val:0x7fffff; valaddr_reg:x3; val_offset:5001*0 + 3*13*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5001*0 + 3*13*FLEN/8, x4, x1, x2)

inst_1668:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x791f1c and fs2 == 1 and fe2 == 0x84 and fm2 == 0x0388c0 and fs3 == 1 and fe3 == 0xe7 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf91f1c; op2val:0xc20388c0;
op3val:0xf3800000; valaddr_reg:x3; val_offset:5004*0 + 3*13*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5004*0 + 3*13*FLEN/8, x4, x1, x2)

inst_1669:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x791f1c and fs2 == 1 and fe2 == 0x84 and fm2 == 0x0388c0 and fs3 == 1 and fe3 == 0xe7 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf91f1c; op2val:0xc20388c0;
op3val:0xf3800001; valaddr_reg:x3; val_offset:5007*0 + 3*13*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5007*0 + 3*13*FLEN/8, x4, x1, x2)

inst_1670:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x791f1c and fs2 == 1 and fe2 == 0x84 and fm2 == 0x0388c0 and fs3 == 1 and fe3 == 0xe7 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf91f1c; op2val:0xc20388c0;
op3val:0xf3800003; valaddr_reg:x3; val_offset:5010*0 + 3*13*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5010*0 + 3*13*FLEN/8, x4, x1, x2)

inst_1671:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x791f1c and fs2 == 1 and fe2 == 0x84 and fm2 == 0x0388c0 and fs3 == 1 and fe3 == 0xe7 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf91f1c; op2val:0xc20388c0;
op3val:0xf3800007; valaddr_reg:x3; val_offset:5013*0 + 3*13*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5013*0 + 3*13*FLEN/8, x4, x1, x2)

inst_1672:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x791f1c and fs2 == 1 and fe2 == 0x84 and fm2 == 0x0388c0 and fs3 == 1 and fe3 == 0xe7 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf91f1c; op2val:0xc20388c0;
op3val:0xf380000f; valaddr_reg:x3; val_offset:5016*0 + 3*13*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5016*0 + 3*13*FLEN/8, x4, x1, x2)

inst_1673:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x791f1c and fs2 == 1 and fe2 == 0x84 and fm2 == 0x0388c0 and fs3 == 1 and fe3 == 0xe7 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf91f1c; op2val:0xc20388c0;
op3val:0xf380001f; valaddr_reg:x3; val_offset:5019*0 + 3*13*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5019*0 + 3*13*FLEN/8, x4, x1, x2)

inst_1674:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x791f1c and fs2 == 1 and fe2 == 0x84 and fm2 == 0x0388c0 and fs3 == 1 and fe3 == 0xe7 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf91f1c; op2val:0xc20388c0;
op3val:0xf380003f; valaddr_reg:x3; val_offset:5022*0 + 3*13*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5022*0 + 3*13*FLEN/8, x4, x1, x2)

inst_1675:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x791f1c and fs2 == 1 and fe2 == 0x84 and fm2 == 0x0388c0 and fs3 == 1 and fe3 == 0xe7 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf91f1c; op2val:0xc20388c0;
op3val:0xf380007f; valaddr_reg:x3; val_offset:5025*0 + 3*13*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5025*0 + 3*13*FLEN/8, x4, x1, x2)

inst_1676:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x791f1c and fs2 == 1 and fe2 == 0x84 and fm2 == 0x0388c0 and fs3 == 1 and fe3 == 0xe7 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf91f1c; op2val:0xc20388c0;
op3val:0xf38000ff; valaddr_reg:x3; val_offset:5028*0 + 3*13*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5028*0 + 3*13*FLEN/8, x4, x1, x2)

inst_1677:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x791f1c and fs2 == 1 and fe2 == 0x84 and fm2 == 0x0388c0 and fs3 == 1 and fe3 == 0xe7 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf91f1c; op2val:0xc20388c0;
op3val:0xf38001ff; valaddr_reg:x3; val_offset:5031*0 + 3*13*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5031*0 + 3*13*FLEN/8, x4, x1, x2)

inst_1678:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x791f1c and fs2 == 1 and fe2 == 0x84 and fm2 == 0x0388c0 and fs3 == 1 and fe3 == 0xe7 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf91f1c; op2val:0xc20388c0;
op3val:0xf38003ff; valaddr_reg:x3; val_offset:5034*0 + 3*13*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5034*0 + 3*13*FLEN/8, x4, x1, x2)

inst_1679:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x791f1c and fs2 == 1 and fe2 == 0x84 and fm2 == 0x0388c0 and fs3 == 1 and fe3 == 0xe7 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf91f1c; op2val:0xc20388c0;
op3val:0xf38007ff; valaddr_reg:x3; val_offset:5037*0 + 3*13*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5037*0 + 3*13*FLEN/8, x4, x1, x2)

inst_1680:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x791f1c and fs2 == 1 and fe2 == 0x84 and fm2 == 0x0388c0 and fs3 == 1 and fe3 == 0xe7 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf91f1c; op2val:0xc20388c0;
op3val:0xf3800fff; valaddr_reg:x3; val_offset:5040*0 + 3*13*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5040*0 + 3*13*FLEN/8, x4, x1, x2)

inst_1681:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x791f1c and fs2 == 1 and fe2 == 0x84 and fm2 == 0x0388c0 and fs3 == 1 and fe3 == 0xe7 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf91f1c; op2val:0xc20388c0;
op3val:0xf3801fff; valaddr_reg:x3; val_offset:5043*0 + 3*13*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5043*0 + 3*13*FLEN/8, x4, x1, x2)

inst_1682:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x791f1c and fs2 == 1 and fe2 == 0x84 and fm2 == 0x0388c0 and fs3 == 1 and fe3 == 0xe7 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf91f1c; op2val:0xc20388c0;
op3val:0xf3803fff; valaddr_reg:x3; val_offset:5046*0 + 3*13*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5046*0 + 3*13*FLEN/8, x4, x1, x2)

inst_1683:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x791f1c and fs2 == 1 and fe2 == 0x84 and fm2 == 0x0388c0 and fs3 == 1 and fe3 == 0xe7 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf91f1c; op2val:0xc20388c0;
op3val:0xf3807fff; valaddr_reg:x3; val_offset:5049*0 + 3*13*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5049*0 + 3*13*FLEN/8, x4, x1, x2)

inst_1684:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x791f1c and fs2 == 1 and fe2 == 0x84 and fm2 == 0x0388c0 and fs3 == 1 and fe3 == 0xe7 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf91f1c; op2val:0xc20388c0;
op3val:0xf380ffff; valaddr_reg:x3; val_offset:5052*0 + 3*13*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5052*0 + 3*13*FLEN/8, x4, x1, x2)

inst_1685:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x791f1c and fs2 == 1 and fe2 == 0x84 and fm2 == 0x0388c0 and fs3 == 1 and fe3 == 0xe7 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf91f1c; op2val:0xc20388c0;
op3val:0xf381ffff; valaddr_reg:x3; val_offset:5055*0 + 3*13*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5055*0 + 3*13*FLEN/8, x4, x1, x2)

inst_1686:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x791f1c and fs2 == 1 and fe2 == 0x84 and fm2 == 0x0388c0 and fs3 == 1 and fe3 == 0xe7 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf91f1c; op2val:0xc20388c0;
op3val:0xf383ffff; valaddr_reg:x3; val_offset:5058*0 + 3*13*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5058*0 + 3*13*FLEN/8, x4, x1, x2)

inst_1687:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x791f1c and fs2 == 1 and fe2 == 0x84 and fm2 == 0x0388c0 and fs3 == 1 and fe3 == 0xe7 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf91f1c; op2val:0xc20388c0;
op3val:0xf387ffff; valaddr_reg:x3; val_offset:5061*0 + 3*13*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5061*0 + 3*13*FLEN/8, x4, x1, x2)

inst_1688:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x791f1c and fs2 == 1 and fe2 == 0x84 and fm2 == 0x0388c0 and fs3 == 1 and fe3 == 0xe7 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf91f1c; op2val:0xc20388c0;
op3val:0xf38fffff; valaddr_reg:x3; val_offset:5064*0 + 3*13*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5064*0 + 3*13*FLEN/8, x4, x1, x2)

inst_1689:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x791f1c and fs2 == 1 and fe2 == 0x84 and fm2 == 0x0388c0 and fs3 == 1 and fe3 == 0xe7 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf91f1c; op2val:0xc20388c0;
op3val:0xf39fffff; valaddr_reg:x3; val_offset:5067*0 + 3*13*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5067*0 + 3*13*FLEN/8, x4, x1, x2)

inst_1690:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x791f1c and fs2 == 1 and fe2 == 0x84 and fm2 == 0x0388c0 and fs3 == 1 and fe3 == 0xe7 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf91f1c; op2val:0xc20388c0;
op3val:0xf3bfffff; valaddr_reg:x3; val_offset:5070*0 + 3*13*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5070*0 + 3*13*FLEN/8, x4, x1, x2)

inst_1691:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x791f1c and fs2 == 1 and fe2 == 0x84 and fm2 == 0x0388c0 and fs3 == 1 and fe3 == 0xe7 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf91f1c; op2val:0xc20388c0;
op3val:0xf3c00000; valaddr_reg:x3; val_offset:5073*0 + 3*13*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5073*0 + 3*13*FLEN/8, x4, x1, x2)

inst_1692:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x791f1c and fs2 == 1 and fe2 == 0x84 and fm2 == 0x0388c0 and fs3 == 1 and fe3 == 0xe7 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf91f1c; op2val:0xc20388c0;
op3val:0xf3e00000; valaddr_reg:x3; val_offset:5076*0 + 3*13*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5076*0 + 3*13*FLEN/8, x4, x1, x2)

inst_1693:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x791f1c and fs2 == 1 and fe2 == 0x84 and fm2 == 0x0388c0 and fs3 == 1 and fe3 == 0xe7 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf91f1c; op2val:0xc20388c0;
op3val:0xf3f00000; valaddr_reg:x3; val_offset:5079*0 + 3*13*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5079*0 + 3*13*FLEN/8, x4, x1, x2)

inst_1694:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x791f1c and fs2 == 1 and fe2 == 0x84 and fm2 == 0x0388c0 and fs3 == 1 and fe3 == 0xe7 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf91f1c; op2val:0xc20388c0;
op3val:0xf3f80000; valaddr_reg:x3; val_offset:5082*0 + 3*13*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5082*0 + 3*13*FLEN/8, x4, x1, x2)

inst_1695:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x791f1c and fs2 == 1 and fe2 == 0x84 and fm2 == 0x0388c0 and fs3 == 1 and fe3 == 0xe7 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf91f1c; op2val:0xc20388c0;
op3val:0xf3fc0000; valaddr_reg:x3; val_offset:5085*0 + 3*13*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5085*0 + 3*13*FLEN/8, x4, x1, x2)

inst_1696:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x791f1c and fs2 == 1 and fe2 == 0x84 and fm2 == 0x0388c0 and fs3 == 1 and fe3 == 0xe7 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf91f1c; op2val:0xc20388c0;
op3val:0xf3fe0000; valaddr_reg:x3; val_offset:5088*0 + 3*13*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5088*0 + 3*13*FLEN/8, x4, x1, x2)

inst_1697:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x791f1c and fs2 == 1 and fe2 == 0x84 and fm2 == 0x0388c0 and fs3 == 1 and fe3 == 0xe7 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf91f1c; op2val:0xc20388c0;
op3val:0xf3ff0000; valaddr_reg:x3; val_offset:5091*0 + 3*13*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5091*0 + 3*13*FLEN/8, x4, x1, x2)

inst_1698:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x791f1c and fs2 == 1 and fe2 == 0x84 and fm2 == 0x0388c0 and fs3 == 1 and fe3 == 0xe7 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf91f1c; op2val:0xc20388c0;
op3val:0xf3ff8000; valaddr_reg:x3; val_offset:5094*0 + 3*13*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5094*0 + 3*13*FLEN/8, x4, x1, x2)

inst_1699:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x791f1c and fs2 == 1 and fe2 == 0x84 and fm2 == 0x0388c0 and fs3 == 1 and fe3 == 0xe7 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf91f1c; op2val:0xc20388c0;
op3val:0xf3ffc000; valaddr_reg:x3; val_offset:5097*0 + 3*13*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5097*0 + 3*13*FLEN/8, x4, x1, x2)

inst_1700:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x791f1c and fs2 == 1 and fe2 == 0x84 and fm2 == 0x0388c0 and fs3 == 1 and fe3 == 0xe7 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf91f1c; op2val:0xc20388c0;
op3val:0xf3ffe000; valaddr_reg:x3; val_offset:5100*0 + 3*13*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5100*0 + 3*13*FLEN/8, x4, x1, x2)

inst_1701:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x791f1c and fs2 == 1 and fe2 == 0x84 and fm2 == 0x0388c0 and fs3 == 1 and fe3 == 0xe7 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf91f1c; op2val:0xc20388c0;
op3val:0xf3fff000; valaddr_reg:x3; val_offset:5103*0 + 3*13*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5103*0 + 3*13*FLEN/8, x4, x1, x2)

inst_1702:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x791f1c and fs2 == 1 and fe2 == 0x84 and fm2 == 0x0388c0 and fs3 == 1 and fe3 == 0xe7 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf91f1c; op2val:0xc20388c0;
op3val:0xf3fff800; valaddr_reg:x3; val_offset:5106*0 + 3*13*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5106*0 + 3*13*FLEN/8, x4, x1, x2)

inst_1703:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x791f1c and fs2 == 1 and fe2 == 0x84 and fm2 == 0x0388c0 and fs3 == 1 and fe3 == 0xe7 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf91f1c; op2val:0xc20388c0;
op3val:0xf3fffc00; valaddr_reg:x3; val_offset:5109*0 + 3*13*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5109*0 + 3*13*FLEN/8, x4, x1, x2)

inst_1704:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x791f1c and fs2 == 1 and fe2 == 0x84 and fm2 == 0x0388c0 and fs3 == 1 and fe3 == 0xe7 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf91f1c; op2val:0xc20388c0;
op3val:0xf3fffe00; valaddr_reg:x3; val_offset:5112*0 + 3*13*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5112*0 + 3*13*FLEN/8, x4, x1, x2)

inst_1705:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x791f1c and fs2 == 1 and fe2 == 0x84 and fm2 == 0x0388c0 and fs3 == 1 and fe3 == 0xe7 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf91f1c; op2val:0xc20388c0;
op3val:0xf3ffff00; valaddr_reg:x3; val_offset:5115*0 + 3*13*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5115*0 + 3*13*FLEN/8, x4, x1, x2)

inst_1706:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x791f1c and fs2 == 1 and fe2 == 0x84 and fm2 == 0x0388c0 and fs3 == 1 and fe3 == 0xe7 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf91f1c; op2val:0xc20388c0;
op3val:0xf3ffff80; valaddr_reg:x3; val_offset:5118*0 + 3*13*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5118*0 + 3*13*FLEN/8, x4, x1, x2)

inst_1707:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x791f1c and fs2 == 1 and fe2 == 0x84 and fm2 == 0x0388c0 and fs3 == 1 and fe3 == 0xe7 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf91f1c; op2val:0xc20388c0;
op3val:0xf3ffffc0; valaddr_reg:x3; val_offset:5121*0 + 3*13*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5121*0 + 3*13*FLEN/8, x4, x1, x2)

inst_1708:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x791f1c and fs2 == 1 and fe2 == 0x84 and fm2 == 0x0388c0 and fs3 == 1 and fe3 == 0xe7 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf91f1c; op2val:0xc20388c0;
op3val:0xf3ffffe0; valaddr_reg:x3; val_offset:5124*0 + 3*13*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5124*0 + 3*13*FLEN/8, x4, x1, x2)

inst_1709:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x791f1c and fs2 == 1 and fe2 == 0x84 and fm2 == 0x0388c0 and fs3 == 1 and fe3 == 0xe7 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf91f1c; op2val:0xc20388c0;
op3val:0xf3fffff0; valaddr_reg:x3; val_offset:5127*0 + 3*13*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5127*0 + 3*13*FLEN/8, x4, x1, x2)

inst_1710:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x791f1c and fs2 == 1 and fe2 == 0x84 and fm2 == 0x0388c0 and fs3 == 1 and fe3 == 0xe7 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf91f1c; op2val:0xc20388c0;
op3val:0xf3fffff8; valaddr_reg:x3; val_offset:5130*0 + 3*13*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5130*0 + 3*13*FLEN/8, x4, x1, x2)

inst_1711:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x791f1c and fs2 == 1 and fe2 == 0x84 and fm2 == 0x0388c0 and fs3 == 1 and fe3 == 0xe7 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf91f1c; op2val:0xc20388c0;
op3val:0xf3fffffc; valaddr_reg:x3; val_offset:5133*0 + 3*13*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5133*0 + 3*13*FLEN/8, x4, x1, x2)

inst_1712:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x791f1c and fs2 == 1 and fe2 == 0x84 and fm2 == 0x0388c0 and fs3 == 1 and fe3 == 0xe7 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf91f1c; op2val:0xc20388c0;
op3val:0xf3fffffe; valaddr_reg:x3; val_offset:5136*0 + 3*13*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5136*0 + 3*13*FLEN/8, x4, x1, x2)

inst_1713:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x791f1c and fs2 == 1 and fe2 == 0x84 and fm2 == 0x0388c0 and fs3 == 1 and fe3 == 0xe7 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf91f1c; op2val:0xc20388c0;
op3val:0xf3ffffff; valaddr_reg:x3; val_offset:5139*0 + 3*13*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5139*0 + 3*13*FLEN/8, x4, x1, x2)

inst_1714:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x791f1c and fs2 == 1 and fe2 == 0x84 and fm2 == 0x0388c0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf91f1c; op2val:0xc20388c0;
op3val:0xff000001; valaddr_reg:x3; val_offset:5142*0 + 3*13*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5142*0 + 3*13*FLEN/8, x4, x1, x2)

inst_1715:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x791f1c and fs2 == 1 and fe2 == 0x84 and fm2 == 0x0388c0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf91f1c; op2val:0xc20388c0;
op3val:0xff000003; valaddr_reg:x3; val_offset:5145*0 + 3*13*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5145*0 + 3*13*FLEN/8, x4, x1, x2)

inst_1716:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x791f1c and fs2 == 1 and fe2 == 0x84 and fm2 == 0x0388c0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf91f1c; op2val:0xc20388c0;
op3val:0xff000007; valaddr_reg:x3; val_offset:5148*0 + 3*13*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5148*0 + 3*13*FLEN/8, x4, x1, x2)

inst_1717:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x791f1c and fs2 == 1 and fe2 == 0x84 and fm2 == 0x0388c0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf91f1c; op2val:0xc20388c0;
op3val:0xff199999; valaddr_reg:x3; val_offset:5151*0 + 3*13*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5151*0 + 3*13*FLEN/8, x4, x1, x2)

inst_1718:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x791f1c and fs2 == 1 and fe2 == 0x84 and fm2 == 0x0388c0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf91f1c; op2val:0xc20388c0;
op3val:0xff249249; valaddr_reg:x3; val_offset:5154*0 + 3*13*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5154*0 + 3*13*FLEN/8, x4, x1, x2)

inst_1719:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x791f1c and fs2 == 1 and fe2 == 0x84 and fm2 == 0x0388c0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf91f1c; op2val:0xc20388c0;
op3val:0xff333333; valaddr_reg:x3; val_offset:5157*0 + 3*13*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5157*0 + 3*13*FLEN/8, x4, x1, x2)

inst_1720:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x791f1c and fs2 == 1 and fe2 == 0x84 and fm2 == 0x0388c0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf91f1c; op2val:0xc20388c0;
op3val:0xff36db6d; valaddr_reg:x3; val_offset:5160*0 + 3*13*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5160*0 + 3*13*FLEN/8, x4, x1, x2)

inst_1721:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x791f1c and fs2 == 1 and fe2 == 0x84 and fm2 == 0x0388c0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf91f1c; op2val:0xc20388c0;
op3val:0xff3bbbbb; valaddr_reg:x3; val_offset:5163*0 + 3*13*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5163*0 + 3*13*FLEN/8, x4, x1, x2)

inst_1722:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x791f1c and fs2 == 1 and fe2 == 0x84 and fm2 == 0x0388c0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf91f1c; op2val:0xc20388c0;
op3val:0xff444444; valaddr_reg:x3; val_offset:5166*0 + 3*13*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5166*0 + 3*13*FLEN/8, x4, x1, x2)

inst_1723:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x791f1c and fs2 == 1 and fe2 == 0x84 and fm2 == 0x0388c0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf91f1c; op2val:0xc20388c0;
op3val:0xff4ccccc; valaddr_reg:x3; val_offset:5169*0 + 3*13*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5169*0 + 3*13*FLEN/8, x4, x1, x2)

inst_1724:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x791f1c and fs2 == 1 and fe2 == 0x84 and fm2 == 0x0388c0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf91f1c; op2val:0xc20388c0;
op3val:0xff5b6db6; valaddr_reg:x3; val_offset:5172*0 + 3*13*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5172*0 + 3*13*FLEN/8, x4, x1, x2)

inst_1725:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x791f1c and fs2 == 1 and fe2 == 0x84 and fm2 == 0x0388c0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf91f1c; op2val:0xc20388c0;
op3val:0xff666666; valaddr_reg:x3; val_offset:5175*0 + 3*13*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5175*0 + 3*13*FLEN/8, x4, x1, x2)

inst_1726:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x791f1c and fs2 == 1 and fe2 == 0x84 and fm2 == 0x0388c0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf91f1c; op2val:0xc20388c0;
op3val:0xff6db6db; valaddr_reg:x3; val_offset:5178*0 + 3*13*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5178*0 + 3*13*FLEN/8, x4, x1, x2)

inst_1727:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x791f1c and fs2 == 1 and fe2 == 0x84 and fm2 == 0x0388c0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf91f1c; op2val:0xc20388c0;
op3val:0xff7ffff8; valaddr_reg:x3; val_offset:5181*0 + 3*13*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5181*0 + 3*13*FLEN/8, x4, x1, x2)

inst_1728:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x791f1c and fs2 == 1 and fe2 == 0x84 and fm2 == 0x0388c0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf91f1c; op2val:0xc20388c0;
op3val:0xff7ffffc; valaddr_reg:x3; val_offset:5184*0 + 3*13*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5184*0 + 3*13*FLEN/8, x4, x1, x2)

inst_1729:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x791f1c and fs2 == 1 and fe2 == 0x84 and fm2 == 0x0388c0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf91f1c; op2val:0xc20388c0;
op3val:0xff7ffffe; valaddr_reg:x3; val_offset:5187*0 + 3*13*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5187*0 + 3*13*FLEN/8, x4, x1, x2)

inst_1730:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x79a4a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf9a4a6; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:5190*0 + 3*13*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5190*0 + 3*13*FLEN/8, x4, x1, x2)

inst_1731:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x79a4a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf9a4a6; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:5193*0 + 3*13*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5193*0 + 3*13*FLEN/8, x4, x1, x2)

inst_1732:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x79a4a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf9a4a6; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:5196*0 + 3*13*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5196*0 + 3*13*FLEN/8, x4, x1, x2)

inst_1733:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x79a4a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf9a4a6; op2val:0x0;
op3val:0x199999; valaddr_reg:x3; val_offset:5199*0 + 3*13*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5199*0 + 3*13*FLEN/8, x4, x1, x2)

inst_1734:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x79a4a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf9a4a6; op2val:0x0;
op3val:0x249249; valaddr_reg:x3; val_offset:5202*0 + 3*13*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5202*0 + 3*13*FLEN/8, x4, x1, x2)

inst_1735:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x79a4a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf9a4a6; op2val:0x0;
op3val:0x333333; valaddr_reg:x3; val_offset:5205*0 + 3*13*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5205*0 + 3*13*FLEN/8, x4, x1, x2)

inst_1736:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x79a4a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf9a4a6; op2val:0x0;
op3val:0x36db6d; valaddr_reg:x3; val_offset:5208*0 + 3*13*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5208*0 + 3*13*FLEN/8, x4, x1, x2)

inst_1737:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x79a4a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf9a4a6; op2val:0x0;
op3val:0x3bbbbb; valaddr_reg:x3; val_offset:5211*0 + 3*13*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5211*0 + 3*13*FLEN/8, x4, x1, x2)

inst_1738:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x79a4a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf9a4a6; op2val:0x0;
op3val:0x444444; valaddr_reg:x3; val_offset:5214*0 + 3*13*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5214*0 + 3*13*FLEN/8, x4, x1, x2)

inst_1739:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x79a4a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf9a4a6; op2val:0x0;
op3val:0x4ccccc; valaddr_reg:x3; val_offset:5217*0 + 3*13*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5217*0 + 3*13*FLEN/8, x4, x1, x2)

inst_1740:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x79a4a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf9a4a6; op2val:0x0;
op3val:0x5b6db6; valaddr_reg:x3; val_offset:5220*0 + 3*13*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5220*0 + 3*13*FLEN/8, x4, x1, x2)

inst_1741:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x79a4a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf9a4a6; op2val:0x0;
op3val:0x666666; valaddr_reg:x3; val_offset:5223*0 + 3*13*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5223*0 + 3*13*FLEN/8, x4, x1, x2)

inst_1742:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x79a4a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf9a4a6; op2val:0x0;
op3val:0x6db6db; valaddr_reg:x3; val_offset:5226*0 + 3*13*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5226*0 + 3*13*FLEN/8, x4, x1, x2)

inst_1743:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x79a4a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf9a4a6; op2val:0x0;
op3val:0x7ffff8; valaddr_reg:x3; val_offset:5229*0 + 3*13*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5229*0 + 3*13*FLEN/8, x4, x1, x2)

inst_1744:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x79a4a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf9a4a6; op2val:0x0;
op3val:0x7ffffc; valaddr_reg:x3; val_offset:5232*0 + 3*13*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5232*0 + 3*13*FLEN/8, x4, x1, x2)

inst_1745:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x79a4a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf9a4a6; op2val:0x0;
op3val:0x7ffffe; valaddr_reg:x3; val_offset:5235*0 + 3*13*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5235*0 + 3*13*FLEN/8, x4, x1, x2)

inst_1746:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x79a4a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf9a4a6; op2val:0x0;
op3val:0xd000000; valaddr_reg:x3; val_offset:5238*0 + 3*13*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5238*0 + 3*13*FLEN/8, x4, x1, x2)

inst_1747:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x79a4a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf9a4a6; op2val:0x0;
op3val:0xd000001; valaddr_reg:x3; val_offset:5241*0 + 3*13*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5241*0 + 3*13*FLEN/8, x4, x1, x2)

inst_1748:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x79a4a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf9a4a6; op2val:0x0;
op3val:0xd000003; valaddr_reg:x3; val_offset:5244*0 + 3*13*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5244*0 + 3*13*FLEN/8, x4, x1, x2)

inst_1749:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x79a4a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf9a4a6; op2val:0x0;
op3val:0xd000007; valaddr_reg:x3; val_offset:5247*0 + 3*13*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5247*0 + 3*13*FLEN/8, x4, x1, x2)

inst_1750:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x79a4a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf9a4a6; op2val:0x0;
op3val:0xd00000f; valaddr_reg:x3; val_offset:5250*0 + 3*13*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5250*0 + 3*13*FLEN/8, x4, x1, x2)

inst_1751:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x79a4a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf9a4a6; op2val:0x0;
op3val:0xd00001f; valaddr_reg:x3; val_offset:5253*0 + 3*13*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5253*0 + 3*13*FLEN/8, x4, x1, x2)

inst_1752:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x79a4a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf9a4a6; op2val:0x0;
op3val:0xd00003f; valaddr_reg:x3; val_offset:5256*0 + 3*13*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5256*0 + 3*13*FLEN/8, x4, x1, x2)

inst_1753:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x79a4a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf9a4a6; op2val:0x0;
op3val:0xd00007f; valaddr_reg:x3; val_offset:5259*0 + 3*13*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5259*0 + 3*13*FLEN/8, x4, x1, x2)

inst_1754:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x79a4a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf9a4a6; op2val:0x0;
op3val:0xd0000ff; valaddr_reg:x3; val_offset:5262*0 + 3*13*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5262*0 + 3*13*FLEN/8, x4, x1, x2)

inst_1755:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x79a4a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf9a4a6; op2val:0x0;
op3val:0xd0001ff; valaddr_reg:x3; val_offset:5265*0 + 3*13*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5265*0 + 3*13*FLEN/8, x4, x1, x2)

inst_1756:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x79a4a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf9a4a6; op2val:0x0;
op3val:0xd0003ff; valaddr_reg:x3; val_offset:5268*0 + 3*13*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5268*0 + 3*13*FLEN/8, x4, x1, x2)

inst_1757:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x79a4a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf9a4a6; op2val:0x0;
op3val:0xd0007ff; valaddr_reg:x3; val_offset:5271*0 + 3*13*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5271*0 + 3*13*FLEN/8, x4, x1, x2)

inst_1758:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x79a4a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf9a4a6; op2val:0x0;
op3val:0xd000fff; valaddr_reg:x3; val_offset:5274*0 + 3*13*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5274*0 + 3*13*FLEN/8, x4, x1, x2)

inst_1759:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x79a4a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf9a4a6; op2val:0x0;
op3val:0xd001fff; valaddr_reg:x3; val_offset:5277*0 + 3*13*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5277*0 + 3*13*FLEN/8, x4, x1, x2)

inst_1760:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x79a4a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf9a4a6; op2val:0x0;
op3val:0xd003fff; valaddr_reg:x3; val_offset:5280*0 + 3*13*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5280*0 + 3*13*FLEN/8, x4, x1, x2)

inst_1761:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x79a4a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf9a4a6; op2val:0x0;
op3val:0xd007fff; valaddr_reg:x3; val_offset:5283*0 + 3*13*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5283*0 + 3*13*FLEN/8, x4, x1, x2)

inst_1762:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x79a4a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf9a4a6; op2val:0x0;
op3val:0xd00ffff; valaddr_reg:x3; val_offset:5286*0 + 3*13*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5286*0 + 3*13*FLEN/8, x4, x1, x2)

inst_1763:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x79a4a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf9a4a6; op2val:0x0;
op3val:0xd01ffff; valaddr_reg:x3; val_offset:5289*0 + 3*13*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5289*0 + 3*13*FLEN/8, x4, x1, x2)

inst_1764:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x79a4a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf9a4a6; op2val:0x0;
op3val:0xd03ffff; valaddr_reg:x3; val_offset:5292*0 + 3*13*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5292*0 + 3*13*FLEN/8, x4, x1, x2)

inst_1765:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x79a4a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf9a4a6; op2val:0x0;
op3val:0xd07ffff; valaddr_reg:x3; val_offset:5295*0 + 3*13*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5295*0 + 3*13*FLEN/8, x4, x1, x2)

inst_1766:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x79a4a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf9a4a6; op2val:0x0;
op3val:0xd0fffff; valaddr_reg:x3; val_offset:5298*0 + 3*13*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5298*0 + 3*13*FLEN/8, x4, x1, x2)

inst_1767:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x79a4a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf9a4a6; op2val:0x0;
op3val:0xd1fffff; valaddr_reg:x3; val_offset:5301*0 + 3*13*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5301*0 + 3*13*FLEN/8, x4, x1, x2)

inst_1768:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x79a4a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf9a4a6; op2val:0x0;
op3val:0xd3fffff; valaddr_reg:x3; val_offset:5304*0 + 3*13*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5304*0 + 3*13*FLEN/8, x4, x1, x2)

inst_1769:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x79a4a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf9a4a6; op2val:0x0;
op3val:0xd400000; valaddr_reg:x3; val_offset:5307*0 + 3*13*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5307*0 + 3*13*FLEN/8, x4, x1, x2)

inst_1770:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x79a4a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf9a4a6; op2val:0x0;
op3val:0xd600000; valaddr_reg:x3; val_offset:5310*0 + 3*13*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5310*0 + 3*13*FLEN/8, x4, x1, x2)

inst_1771:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x79a4a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf9a4a6; op2val:0x0;
op3val:0xd700000; valaddr_reg:x3; val_offset:5313*0 + 3*13*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5313*0 + 3*13*FLEN/8, x4, x1, x2)

inst_1772:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x79a4a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf9a4a6; op2val:0x0;
op3val:0xd780000; valaddr_reg:x3; val_offset:5316*0 + 3*13*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5316*0 + 3*13*FLEN/8, x4, x1, x2)

inst_1773:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x79a4a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf9a4a6; op2val:0x0;
op3val:0xd7c0000; valaddr_reg:x3; val_offset:5319*0 + 3*13*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5319*0 + 3*13*FLEN/8, x4, x1, x2)

inst_1774:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x79a4a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf9a4a6; op2val:0x0;
op3val:0xd7e0000; valaddr_reg:x3; val_offset:5322*0 + 3*13*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5322*0 + 3*13*FLEN/8, x4, x1, x2)

inst_1775:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x79a4a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf9a4a6; op2val:0x0;
op3val:0xd7f0000; valaddr_reg:x3; val_offset:5325*0 + 3*13*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5325*0 + 3*13*FLEN/8, x4, x1, x2)

inst_1776:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x79a4a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf9a4a6; op2val:0x0;
op3val:0xd7f8000; valaddr_reg:x3; val_offset:5328*0 + 3*13*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5328*0 + 3*13*FLEN/8, x4, x1, x2)

inst_1777:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x79a4a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf9a4a6; op2val:0x0;
op3val:0xd7fc000; valaddr_reg:x3; val_offset:5331*0 + 3*13*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5331*0 + 3*13*FLEN/8, x4, x1, x2)

inst_1778:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x79a4a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf9a4a6; op2val:0x0;
op3val:0xd7fe000; valaddr_reg:x3; val_offset:5334*0 + 3*13*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5334*0 + 3*13*FLEN/8, x4, x1, x2)

inst_1779:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x79a4a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf9a4a6; op2val:0x0;
op3val:0xd7ff000; valaddr_reg:x3; val_offset:5337*0 + 3*13*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5337*0 + 3*13*FLEN/8, x4, x1, x2)

inst_1780:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x79a4a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf9a4a6; op2val:0x0;
op3val:0xd7ff800; valaddr_reg:x3; val_offset:5340*0 + 3*13*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5340*0 + 3*13*FLEN/8, x4, x1, x2)

inst_1781:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x79a4a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf9a4a6; op2val:0x0;
op3val:0xd7ffc00; valaddr_reg:x3; val_offset:5343*0 + 3*13*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5343*0 + 3*13*FLEN/8, x4, x1, x2)

inst_1782:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x79a4a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf9a4a6; op2val:0x0;
op3val:0xd7ffe00; valaddr_reg:x3; val_offset:5346*0 + 3*13*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5346*0 + 3*13*FLEN/8, x4, x1, x2)

inst_1783:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x79a4a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf9a4a6; op2val:0x0;
op3val:0xd7fff00; valaddr_reg:x3; val_offset:5349*0 + 3*13*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5349*0 + 3*13*FLEN/8, x4, x1, x2)

inst_1784:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x79a4a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf9a4a6; op2val:0x0;
op3val:0xd7fff80; valaddr_reg:x3; val_offset:5352*0 + 3*13*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5352*0 + 3*13*FLEN/8, x4, x1, x2)

inst_1785:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x79a4a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf9a4a6; op2val:0x0;
op3val:0xd7fffc0; valaddr_reg:x3; val_offset:5355*0 + 3*13*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5355*0 + 3*13*FLEN/8, x4, x1, x2)

inst_1786:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x79a4a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf9a4a6; op2val:0x0;
op3val:0xd7fffe0; valaddr_reg:x3; val_offset:5358*0 + 3*13*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5358*0 + 3*13*FLEN/8, x4, x1, x2)

inst_1787:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x79a4a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf9a4a6; op2val:0x0;
op3val:0xd7ffff0; valaddr_reg:x3; val_offset:5361*0 + 3*13*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5361*0 + 3*13*FLEN/8, x4, x1, x2)

inst_1788:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x79a4a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf9a4a6; op2val:0x0;
op3val:0xd7ffff8; valaddr_reg:x3; val_offset:5364*0 + 3*13*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5364*0 + 3*13*FLEN/8, x4, x1, x2)

inst_1789:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x79a4a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf9a4a6; op2val:0x0;
op3val:0xd7ffffc; valaddr_reg:x3; val_offset:5367*0 + 3*13*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5367*0 + 3*13*FLEN/8, x4, x1, x2)

inst_1790:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x79a4a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf9a4a6; op2val:0x0;
op3val:0xd7ffffe; valaddr_reg:x3; val_offset:5370*0 + 3*13*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5370*0 + 3*13*FLEN/8, x4, x1, x2)

inst_1791:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x79a4a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf9a4a6; op2val:0x0;
op3val:0xd7fffff; valaddr_reg:x3; val_offset:5373*0 + 3*13*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5373*0 + 3*13*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2096675947,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388600,32,FLEN)
NAN_BOXED(2096675947,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388604,32,FLEN)
NAN_BOXED(2096675947,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388606,32,FLEN)
NAN_BOXED(2096675947,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(2096701212,32,FLEN)
NAN_BOXED(3255011520,32,FLEN)
NAN_BOXED(4085252096,32,FLEN)
NAN_BOXED(2096701212,32,FLEN)
NAN_BOXED(3255011520,32,FLEN)
NAN_BOXED(4085252097,32,FLEN)
NAN_BOXED(2096701212,32,FLEN)
NAN_BOXED(3255011520,32,FLEN)
NAN_BOXED(4085252099,32,FLEN)
NAN_BOXED(2096701212,32,FLEN)
NAN_BOXED(3255011520,32,FLEN)
NAN_BOXED(4085252103,32,FLEN)
NAN_BOXED(2096701212,32,FLEN)
NAN_BOXED(3255011520,32,FLEN)
NAN_BOXED(4085252111,32,FLEN)
NAN_BOXED(2096701212,32,FLEN)
NAN_BOXED(3255011520,32,FLEN)
NAN_BOXED(4085252127,32,FLEN)
NAN_BOXED(2096701212,32,FLEN)
NAN_BOXED(3255011520,32,FLEN)
NAN_BOXED(4085252159,32,FLEN)
NAN_BOXED(2096701212,32,FLEN)
NAN_BOXED(3255011520,32,FLEN)
NAN_BOXED(4085252223,32,FLEN)
NAN_BOXED(2096701212,32,FLEN)
NAN_BOXED(3255011520,32,FLEN)
NAN_BOXED(4085252351,32,FLEN)
NAN_BOXED(2096701212,32,FLEN)
NAN_BOXED(3255011520,32,FLEN)
NAN_BOXED(4085252607,32,FLEN)
NAN_BOXED(2096701212,32,FLEN)
NAN_BOXED(3255011520,32,FLEN)
NAN_BOXED(4085253119,32,FLEN)
NAN_BOXED(2096701212,32,FLEN)
NAN_BOXED(3255011520,32,FLEN)
NAN_BOXED(4085254143,32,FLEN)
NAN_BOXED(2096701212,32,FLEN)
NAN_BOXED(3255011520,32,FLEN)
NAN_BOXED(4085256191,32,FLEN)
NAN_BOXED(2096701212,32,FLEN)
NAN_BOXED(3255011520,32,FLEN)
NAN_BOXED(4085260287,32,FLEN)
NAN_BOXED(2096701212,32,FLEN)
NAN_BOXED(3255011520,32,FLEN)
NAN_BOXED(4085268479,32,FLEN)
NAN_BOXED(2096701212,32,FLEN)
NAN_BOXED(3255011520,32,FLEN)
NAN_BOXED(4085284863,32,FLEN)
NAN_BOXED(2096701212,32,FLEN)
NAN_BOXED(3255011520,32,FLEN)
NAN_BOXED(4085317631,32,FLEN)
NAN_BOXED(2096701212,32,FLEN)
NAN_BOXED(3255011520,32,FLEN)
NAN_BOXED(4085383167,32,FLEN)
NAN_BOXED(2096701212,32,FLEN)
NAN_BOXED(3255011520,32,FLEN)
NAN_BOXED(4085514239,32,FLEN)
NAN_BOXED(2096701212,32,FLEN)
NAN_BOXED(3255011520,32,FLEN)
NAN_BOXED(4085776383,32,FLEN)
NAN_BOXED(2096701212,32,FLEN)
NAN_BOXED(3255011520,32,FLEN)
NAN_BOXED(4086300671,32,FLEN)
NAN_BOXED(2096701212,32,FLEN)
NAN_BOXED(3255011520,32,FLEN)
NAN_BOXED(4087349247,32,FLEN)
NAN_BOXED(2096701212,32,FLEN)
NAN_BOXED(3255011520,32,FLEN)
NAN_BOXED(4089446399,32,FLEN)
NAN_BOXED(2096701212,32,FLEN)
NAN_BOXED(3255011520,32,FLEN)
NAN_BOXED(4089446400,32,FLEN)
NAN_BOXED(2096701212,32,FLEN)
NAN_BOXED(3255011520,32,FLEN)
NAN_BOXED(4091543552,32,FLEN)
NAN_BOXED(2096701212,32,FLEN)
NAN_BOXED(3255011520,32,FLEN)
NAN_BOXED(4092592128,32,FLEN)
NAN_BOXED(2096701212,32,FLEN)
NAN_BOXED(3255011520,32,FLEN)
NAN_BOXED(4093116416,32,FLEN)
NAN_BOXED(2096701212,32,FLEN)
NAN_BOXED(3255011520,32,FLEN)
NAN_BOXED(4093378560,32,FLEN)
NAN_BOXED(2096701212,32,FLEN)
NAN_BOXED(3255011520,32,FLEN)
NAN_BOXED(4093509632,32,FLEN)
NAN_BOXED(2096701212,32,FLEN)
NAN_BOXED(3255011520,32,FLEN)
NAN_BOXED(4093575168,32,FLEN)
NAN_BOXED(2096701212,32,FLEN)
NAN_BOXED(3255011520,32,FLEN)
NAN_BOXED(4093607936,32,FLEN)
NAN_BOXED(2096701212,32,FLEN)
NAN_BOXED(3255011520,32,FLEN)
NAN_BOXED(4093624320,32,FLEN)
NAN_BOXED(2096701212,32,FLEN)
NAN_BOXED(3255011520,32,FLEN)
NAN_BOXED(4093632512,32,FLEN)
NAN_BOXED(2096701212,32,FLEN)
NAN_BOXED(3255011520,32,FLEN)
NAN_BOXED(4093636608,32,FLEN)
NAN_BOXED(2096701212,32,FLEN)
NAN_BOXED(3255011520,32,FLEN)
NAN_BOXED(4093638656,32,FLEN)
NAN_BOXED(2096701212,32,FLEN)
NAN_BOXED(3255011520,32,FLEN)
NAN_BOXED(4093639680,32,FLEN)
NAN_BOXED(2096701212,32,FLEN)
NAN_BOXED(3255011520,32,FLEN)
NAN_BOXED(4093640192,32,FLEN)
NAN_BOXED(2096701212,32,FLEN)
NAN_BOXED(3255011520,32,FLEN)
NAN_BOXED(4093640448,32,FLEN)
NAN_BOXED(2096701212,32,FLEN)
NAN_BOXED(3255011520,32,FLEN)
NAN_BOXED(4093640576,32,FLEN)
NAN_BOXED(2096701212,32,FLEN)
NAN_BOXED(3255011520,32,FLEN)
NAN_BOXED(4093640640,32,FLEN)
NAN_BOXED(2096701212,32,FLEN)
NAN_BOXED(3255011520,32,FLEN)
NAN_BOXED(4093640672,32,FLEN)
NAN_BOXED(2096701212,32,FLEN)
NAN_BOXED(3255011520,32,FLEN)
NAN_BOXED(4093640688,32,FLEN)
NAN_BOXED(2096701212,32,FLEN)
NAN_BOXED(3255011520,32,FLEN)
NAN_BOXED(4093640696,32,FLEN)
NAN_BOXED(2096701212,32,FLEN)
NAN_BOXED(3255011520,32,FLEN)
NAN_BOXED(4093640700,32,FLEN)
NAN_BOXED(2096701212,32,FLEN)
NAN_BOXED(3255011520,32,FLEN)
NAN_BOXED(4093640702,32,FLEN)
NAN_BOXED(2096701212,32,FLEN)
NAN_BOXED(3255011520,32,FLEN)
NAN_BOXED(4093640703,32,FLEN)
NAN_BOXED(2096701212,32,FLEN)
NAN_BOXED(3255011520,32,FLEN)
NAN_BOXED(4278190081,32,FLEN)
NAN_BOXED(2096701212,32,FLEN)
NAN_BOXED(3255011520,32,FLEN)
NAN_BOXED(4278190083,32,FLEN)
NAN_BOXED(2096701212,32,FLEN)
NAN_BOXED(3255011520,32,FLEN)
NAN_BOXED(4278190087,32,FLEN)
NAN_BOXED(2096701212,32,FLEN)
NAN_BOXED(3255011520,32,FLEN)
NAN_BOXED(4279867801,32,FLEN)
NAN_BOXED(2096701212,32,FLEN)
NAN_BOXED(3255011520,32,FLEN)
NAN_BOXED(4280586825,32,FLEN)
NAN_BOXED(2096701212,32,FLEN)
NAN_BOXED(3255011520,32,FLEN)
NAN_BOXED(4281545523,32,FLEN)
NAN_BOXED(2096701212,32,FLEN)
NAN_BOXED(3255011520,32,FLEN)
NAN_BOXED(4281785197,32,FLEN)
NAN_BOXED(2096701212,32,FLEN)
NAN_BOXED(3255011520,32,FLEN)
NAN_BOXED(4282104763,32,FLEN)
NAN_BOXED(2096701212,32,FLEN)
NAN_BOXED(3255011520,32,FLEN)
NAN_BOXED(4282664004,32,FLEN)
NAN_BOXED(2096701212,32,FLEN)
NAN_BOXED(3255011520,32,FLEN)
NAN_BOXED(4283223244,32,FLEN)
NAN_BOXED(2096701212,32,FLEN)
NAN_BOXED(3255011520,32,FLEN)
NAN_BOXED(4284181942,32,FLEN)
NAN_BOXED(2096701212,32,FLEN)
NAN_BOXED(3255011520,32,FLEN)
NAN_BOXED(4284900966,32,FLEN)
NAN_BOXED(2096701212,32,FLEN)
NAN_BOXED(3255011520,32,FLEN)
NAN_BOXED(4285380315,32,FLEN)
NAN_BOXED(2096701212,32,FLEN)
NAN_BOXED(3255011520,32,FLEN)
NAN_BOXED(4286578680,32,FLEN)
NAN_BOXED(2096701212,32,FLEN)
NAN_BOXED(3255011520,32,FLEN)
NAN_BOXED(4286578684,32,FLEN)
NAN_BOXED(2096701212,32,FLEN)
NAN_BOXED(3255011520,32,FLEN)
NAN_BOXED(4286578686,32,FLEN)
NAN_BOXED(2096735398,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2096735398,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3,32,FLEN)
NAN_BOXED(2096735398,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7,32,FLEN)
NAN_BOXED(2096735398,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1677721,32,FLEN)
NAN_BOXED(2096735398,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2396745,32,FLEN)
NAN_BOXED(2096735398,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3355443,32,FLEN)
NAN_BOXED(2096735398,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3595117,32,FLEN)
NAN_BOXED(2096735398,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3914683,32,FLEN)
NAN_BOXED(2096735398,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4473924,32,FLEN)
NAN_BOXED(2096735398,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5033164,32,FLEN)
NAN_BOXED(2096735398,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5991862,32,FLEN)
NAN_BOXED(2096735398,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(6710886,32,FLEN)
NAN_BOXED(2096735398,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7190235,32,FLEN)
NAN_BOXED(2096735398,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388600,32,FLEN)
NAN_BOXED(2096735398,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388604,32,FLEN)
NAN_BOXED(2096735398,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388606,32,FLEN)
NAN_BOXED(2096735398,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218103808,32,FLEN)
NAN_BOXED(2096735398,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218103809,32,FLEN)
NAN_BOXED(2096735398,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218103811,32,FLEN)
NAN_BOXED(2096735398,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218103815,32,FLEN)
NAN_BOXED(2096735398,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218103823,32,FLEN)
NAN_BOXED(2096735398,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218103839,32,FLEN)
NAN_BOXED(2096735398,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218103871,32,FLEN)
NAN_BOXED(2096735398,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218103935,32,FLEN)
NAN_BOXED(2096735398,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218104063,32,FLEN)
NAN_BOXED(2096735398,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218104319,32,FLEN)
NAN_BOXED(2096735398,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218104831,32,FLEN)
NAN_BOXED(2096735398,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218105855,32,FLEN)
NAN_BOXED(2096735398,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218107903,32,FLEN)
NAN_BOXED(2096735398,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218111999,32,FLEN)
NAN_BOXED(2096735398,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218120191,32,FLEN)
NAN_BOXED(2096735398,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218136575,32,FLEN)
NAN_BOXED(2096735398,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218169343,32,FLEN)
NAN_BOXED(2096735398,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218234879,32,FLEN)
NAN_BOXED(2096735398,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218365951,32,FLEN)
NAN_BOXED(2096735398,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218628095,32,FLEN)
NAN_BOXED(2096735398,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(219152383,32,FLEN)
NAN_BOXED(2096735398,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(220200959,32,FLEN)
NAN_BOXED(2096735398,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(222298111,32,FLEN)
NAN_BOXED(2096735398,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(222298112,32,FLEN)
NAN_BOXED(2096735398,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(224395264,32,FLEN)
NAN_BOXED(2096735398,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(225443840,32,FLEN)
NAN_BOXED(2096735398,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(225968128,32,FLEN)
NAN_BOXED(2096735398,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226230272,32,FLEN)
NAN_BOXED(2096735398,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226361344,32,FLEN)
NAN_BOXED(2096735398,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226426880,32,FLEN)
NAN_BOXED(2096735398,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226459648,32,FLEN)
NAN_BOXED(2096735398,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226476032,32,FLEN)
NAN_BOXED(2096735398,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226484224,32,FLEN)
NAN_BOXED(2096735398,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226488320,32,FLEN)
NAN_BOXED(2096735398,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226490368,32,FLEN)
NAN_BOXED(2096735398,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226491392,32,FLEN)
NAN_BOXED(2096735398,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226491904,32,FLEN)
NAN_BOXED(2096735398,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226492160,32,FLEN)
NAN_BOXED(2096735398,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226492288,32,FLEN)
NAN_BOXED(2096735398,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226492352,32,FLEN)
NAN_BOXED(2096735398,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226492384,32,FLEN)
NAN_BOXED(2096735398,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226492400,32,FLEN)
NAN_BOXED(2096735398,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226492408,32,FLEN)
NAN_BOXED(2096735398,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226492412,32,FLEN)
NAN_BOXED(2096735398,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226492414,32,FLEN)
NAN_BOXED(2096735398,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226492415,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
