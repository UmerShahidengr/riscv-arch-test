
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:17:59 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_17792:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x31933e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3887c1 and fs3 == 1 and fe3 == 0xd0 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb1933e; op2val:0xc03887c1;
op3val:0xe87f0000; valaddr_reg:x3; val_offset:53376*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53376*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17793:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x31933e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3887c1 and fs3 == 1 and fe3 == 0xd0 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb1933e; op2val:0xc03887c1;
op3val:0xe87f8000; valaddr_reg:x3; val_offset:53379*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53379*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17794:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x31933e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3887c1 and fs3 == 1 and fe3 == 0xd0 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb1933e; op2val:0xc03887c1;
op3val:0xe87fc000; valaddr_reg:x3; val_offset:53382*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53382*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17795:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x31933e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3887c1 and fs3 == 1 and fe3 == 0xd0 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb1933e; op2val:0xc03887c1;
op3val:0xe87fe000; valaddr_reg:x3; val_offset:53385*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53385*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17796:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x31933e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3887c1 and fs3 == 1 and fe3 == 0xd0 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb1933e; op2val:0xc03887c1;
op3val:0xe87ff000; valaddr_reg:x3; val_offset:53388*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53388*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17797:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x31933e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3887c1 and fs3 == 1 and fe3 == 0xd0 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb1933e; op2val:0xc03887c1;
op3val:0xe87ff800; valaddr_reg:x3; val_offset:53391*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53391*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17798:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x31933e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3887c1 and fs3 == 1 and fe3 == 0xd0 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb1933e; op2val:0xc03887c1;
op3val:0xe87ffc00; valaddr_reg:x3; val_offset:53394*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53394*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17799:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x31933e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3887c1 and fs3 == 1 and fe3 == 0xd0 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb1933e; op2val:0xc03887c1;
op3val:0xe87ffe00; valaddr_reg:x3; val_offset:53397*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53397*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17800:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x31933e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3887c1 and fs3 == 1 and fe3 == 0xd0 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb1933e; op2val:0xc03887c1;
op3val:0xe87fff00; valaddr_reg:x3; val_offset:53400*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53400*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17801:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x31933e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3887c1 and fs3 == 1 and fe3 == 0xd0 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb1933e; op2val:0xc03887c1;
op3val:0xe87fff80; valaddr_reg:x3; val_offset:53403*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53403*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17802:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x31933e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3887c1 and fs3 == 1 and fe3 == 0xd0 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb1933e; op2val:0xc03887c1;
op3val:0xe87fffc0; valaddr_reg:x3; val_offset:53406*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53406*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17803:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x31933e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3887c1 and fs3 == 1 and fe3 == 0xd0 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb1933e; op2val:0xc03887c1;
op3val:0xe87fffe0; valaddr_reg:x3; val_offset:53409*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53409*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17804:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x31933e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3887c1 and fs3 == 1 and fe3 == 0xd0 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb1933e; op2val:0xc03887c1;
op3val:0xe87ffff0; valaddr_reg:x3; val_offset:53412*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53412*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17805:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x31933e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3887c1 and fs3 == 1 and fe3 == 0xd0 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb1933e; op2val:0xc03887c1;
op3val:0xe87ffff8; valaddr_reg:x3; val_offset:53415*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53415*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17806:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x31933e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3887c1 and fs3 == 1 and fe3 == 0xd0 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb1933e; op2val:0xc03887c1;
op3val:0xe87ffffc; valaddr_reg:x3; val_offset:53418*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53418*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17807:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x31933e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3887c1 and fs3 == 1 and fe3 == 0xd0 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb1933e; op2val:0xc03887c1;
op3val:0xe87ffffe; valaddr_reg:x3; val_offset:53421*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53421*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17808:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x31933e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3887c1 and fs3 == 1 and fe3 == 0xd0 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb1933e; op2val:0xc03887c1;
op3val:0xe87fffff; valaddr_reg:x3; val_offset:53424*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53424*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17809:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x31933e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3887c1 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb1933e; op2val:0xc03887c1;
op3val:0xff000001; valaddr_reg:x3; val_offset:53427*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53427*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17810:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x31933e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3887c1 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb1933e; op2val:0xc03887c1;
op3val:0xff000003; valaddr_reg:x3; val_offset:53430*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53430*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17811:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x31933e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3887c1 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb1933e; op2val:0xc03887c1;
op3val:0xff000007; valaddr_reg:x3; val_offset:53433*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53433*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17812:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x31933e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3887c1 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb1933e; op2val:0xc03887c1;
op3val:0xff199999; valaddr_reg:x3; val_offset:53436*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53436*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17813:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x31933e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3887c1 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb1933e; op2val:0xc03887c1;
op3val:0xff249249; valaddr_reg:x3; val_offset:53439*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53439*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17814:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x31933e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3887c1 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb1933e; op2val:0xc03887c1;
op3val:0xff333333; valaddr_reg:x3; val_offset:53442*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53442*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17815:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x31933e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3887c1 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb1933e; op2val:0xc03887c1;
op3val:0xff36db6d; valaddr_reg:x3; val_offset:53445*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53445*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17816:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x31933e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3887c1 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb1933e; op2val:0xc03887c1;
op3val:0xff3bbbbb; valaddr_reg:x3; val_offset:53448*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53448*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17817:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x31933e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3887c1 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb1933e; op2val:0xc03887c1;
op3val:0xff444444; valaddr_reg:x3; val_offset:53451*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53451*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17818:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x31933e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3887c1 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb1933e; op2val:0xc03887c1;
op3val:0xff4ccccc; valaddr_reg:x3; val_offset:53454*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53454*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17819:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x31933e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3887c1 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb1933e; op2val:0xc03887c1;
op3val:0xff5b6db6; valaddr_reg:x3; val_offset:53457*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53457*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17820:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x31933e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3887c1 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb1933e; op2val:0xc03887c1;
op3val:0xff666666; valaddr_reg:x3; val_offset:53460*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53460*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17821:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x31933e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3887c1 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb1933e; op2val:0xc03887c1;
op3val:0xff6db6db; valaddr_reg:x3; val_offset:53463*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53463*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17822:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x31933e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3887c1 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb1933e; op2val:0xc03887c1;
op3val:0xff7ffff8; valaddr_reg:x3; val_offset:53466*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53466*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17823:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x31933e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3887c1 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb1933e; op2val:0xc03887c1;
op3val:0xff7ffffc; valaddr_reg:x3; val_offset:53469*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53469*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17824:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x31933e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3887c1 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb1933e; op2val:0xc03887c1;
op3val:0xff7ffffe; valaddr_reg:x3; val_offset:53472*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53472*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17825:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3360dd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5b5670 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb360dd; op2val:0x5b5670;
op3val:0x3f800001; valaddr_reg:x3; val_offset:53475*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53475*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17826:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3360dd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5b5670 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb360dd; op2val:0x5b5670;
op3val:0x3f800003; valaddr_reg:x3; val_offset:53478*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53478*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17827:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3360dd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5b5670 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb360dd; op2val:0x5b5670;
op3val:0x3f800007; valaddr_reg:x3; val_offset:53481*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53481*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17828:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3360dd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5b5670 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb360dd; op2val:0x5b5670;
op3val:0x3f999999; valaddr_reg:x3; val_offset:53484*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53484*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17829:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3360dd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5b5670 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb360dd; op2val:0x5b5670;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:53487*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53487*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17830:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3360dd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5b5670 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb360dd; op2val:0x5b5670;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:53490*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53490*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17831:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3360dd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5b5670 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb360dd; op2val:0x5b5670;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:53493*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53493*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17832:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3360dd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5b5670 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb360dd; op2val:0x5b5670;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:53496*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53496*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17833:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3360dd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5b5670 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb360dd; op2val:0x5b5670;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:53499*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53499*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17834:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3360dd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5b5670 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb360dd; op2val:0x5b5670;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:53502*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53502*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17835:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3360dd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5b5670 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb360dd; op2val:0x5b5670;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:53505*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53505*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17836:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3360dd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5b5670 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb360dd; op2val:0x5b5670;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:53508*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53508*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17837:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3360dd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5b5670 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb360dd; op2val:0x5b5670;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:53511*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53511*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17838:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3360dd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5b5670 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb360dd; op2val:0x5b5670;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:53514*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53514*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17839:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3360dd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5b5670 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb360dd; op2val:0x5b5670;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:53517*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53517*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17840:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3360dd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5b5670 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb360dd; op2val:0x5b5670;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:53520*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53520*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17841:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3360dd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5b5670 and fs3 == 0 and fe3 == 0x80 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb360dd; op2val:0x5b5670;
op3val:0x40000000; valaddr_reg:x3; val_offset:53523*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53523*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17842:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3360dd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5b5670 and fs3 == 0 and fe3 == 0x80 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb360dd; op2val:0x5b5670;
op3val:0x40000001; valaddr_reg:x3; val_offset:53526*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53526*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17843:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3360dd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5b5670 and fs3 == 0 and fe3 == 0x80 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb360dd; op2val:0x5b5670;
op3val:0x40000003; valaddr_reg:x3; val_offset:53529*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53529*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17844:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3360dd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5b5670 and fs3 == 0 and fe3 == 0x80 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb360dd; op2val:0x5b5670;
op3val:0x40000007; valaddr_reg:x3; val_offset:53532*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53532*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17845:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3360dd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5b5670 and fs3 == 0 and fe3 == 0x80 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb360dd; op2val:0x5b5670;
op3val:0x4000000f; valaddr_reg:x3; val_offset:53535*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53535*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17846:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3360dd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5b5670 and fs3 == 0 and fe3 == 0x80 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb360dd; op2val:0x5b5670;
op3val:0x4000001f; valaddr_reg:x3; val_offset:53538*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53538*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17847:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3360dd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5b5670 and fs3 == 0 and fe3 == 0x80 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb360dd; op2val:0x5b5670;
op3val:0x4000003f; valaddr_reg:x3; val_offset:53541*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53541*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17848:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3360dd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5b5670 and fs3 == 0 and fe3 == 0x80 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb360dd; op2val:0x5b5670;
op3val:0x4000007f; valaddr_reg:x3; val_offset:53544*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53544*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17849:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3360dd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5b5670 and fs3 == 0 and fe3 == 0x80 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb360dd; op2val:0x5b5670;
op3val:0x400000ff; valaddr_reg:x3; val_offset:53547*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53547*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17850:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3360dd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5b5670 and fs3 == 0 and fe3 == 0x80 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb360dd; op2val:0x5b5670;
op3val:0x400001ff; valaddr_reg:x3; val_offset:53550*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53550*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17851:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3360dd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5b5670 and fs3 == 0 and fe3 == 0x80 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb360dd; op2val:0x5b5670;
op3val:0x400003ff; valaddr_reg:x3; val_offset:53553*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53553*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17852:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3360dd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5b5670 and fs3 == 0 and fe3 == 0x80 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb360dd; op2val:0x5b5670;
op3val:0x400007ff; valaddr_reg:x3; val_offset:53556*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53556*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17853:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3360dd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5b5670 and fs3 == 0 and fe3 == 0x80 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb360dd; op2val:0x5b5670;
op3val:0x40000fff; valaddr_reg:x3; val_offset:53559*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53559*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17854:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3360dd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5b5670 and fs3 == 0 and fe3 == 0x80 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb360dd; op2val:0x5b5670;
op3val:0x40001fff; valaddr_reg:x3; val_offset:53562*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53562*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17855:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3360dd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5b5670 and fs3 == 0 and fe3 == 0x80 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb360dd; op2val:0x5b5670;
op3val:0x40003fff; valaddr_reg:x3; val_offset:53565*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53565*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17856:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3360dd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5b5670 and fs3 == 0 and fe3 == 0x80 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb360dd; op2val:0x5b5670;
op3val:0x40007fff; valaddr_reg:x3; val_offset:53568*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53568*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17857:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3360dd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5b5670 and fs3 == 0 and fe3 == 0x80 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb360dd; op2val:0x5b5670;
op3val:0x4000ffff; valaddr_reg:x3; val_offset:53571*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53571*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17858:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3360dd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5b5670 and fs3 == 0 and fe3 == 0x80 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb360dd; op2val:0x5b5670;
op3val:0x4001ffff; valaddr_reg:x3; val_offset:53574*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53574*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17859:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3360dd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5b5670 and fs3 == 0 and fe3 == 0x80 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb360dd; op2val:0x5b5670;
op3val:0x4003ffff; valaddr_reg:x3; val_offset:53577*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53577*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17860:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3360dd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5b5670 and fs3 == 0 and fe3 == 0x80 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb360dd; op2val:0x5b5670;
op3val:0x4007ffff; valaddr_reg:x3; val_offset:53580*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53580*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17861:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3360dd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5b5670 and fs3 == 0 and fe3 == 0x80 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb360dd; op2val:0x5b5670;
op3val:0x400fffff; valaddr_reg:x3; val_offset:53583*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53583*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17862:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3360dd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5b5670 and fs3 == 0 and fe3 == 0x80 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb360dd; op2val:0x5b5670;
op3val:0x401fffff; valaddr_reg:x3; val_offset:53586*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53586*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17863:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3360dd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5b5670 and fs3 == 0 and fe3 == 0x80 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb360dd; op2val:0x5b5670;
op3val:0x403fffff; valaddr_reg:x3; val_offset:53589*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53589*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17864:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3360dd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5b5670 and fs3 == 0 and fe3 == 0x80 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb360dd; op2val:0x5b5670;
op3val:0x40400000; valaddr_reg:x3; val_offset:53592*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53592*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17865:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3360dd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5b5670 and fs3 == 0 and fe3 == 0x80 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb360dd; op2val:0x5b5670;
op3val:0x40600000; valaddr_reg:x3; val_offset:53595*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53595*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17866:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3360dd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5b5670 and fs3 == 0 and fe3 == 0x80 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb360dd; op2val:0x5b5670;
op3val:0x40700000; valaddr_reg:x3; val_offset:53598*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53598*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17867:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3360dd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5b5670 and fs3 == 0 and fe3 == 0x80 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb360dd; op2val:0x5b5670;
op3val:0x40780000; valaddr_reg:x3; val_offset:53601*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53601*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17868:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3360dd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5b5670 and fs3 == 0 and fe3 == 0x80 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb360dd; op2val:0x5b5670;
op3val:0x407c0000; valaddr_reg:x3; val_offset:53604*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53604*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17869:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3360dd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5b5670 and fs3 == 0 and fe3 == 0x80 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb360dd; op2val:0x5b5670;
op3val:0x407e0000; valaddr_reg:x3; val_offset:53607*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53607*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17870:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3360dd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5b5670 and fs3 == 0 and fe3 == 0x80 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb360dd; op2val:0x5b5670;
op3val:0x407f0000; valaddr_reg:x3; val_offset:53610*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53610*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17871:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3360dd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5b5670 and fs3 == 0 and fe3 == 0x80 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb360dd; op2val:0x5b5670;
op3val:0x407f8000; valaddr_reg:x3; val_offset:53613*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53613*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17872:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3360dd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5b5670 and fs3 == 0 and fe3 == 0x80 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb360dd; op2val:0x5b5670;
op3val:0x407fc000; valaddr_reg:x3; val_offset:53616*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53616*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17873:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3360dd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5b5670 and fs3 == 0 and fe3 == 0x80 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb360dd; op2val:0x5b5670;
op3val:0x407fe000; valaddr_reg:x3; val_offset:53619*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53619*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17874:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3360dd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5b5670 and fs3 == 0 and fe3 == 0x80 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb360dd; op2val:0x5b5670;
op3val:0x407ff000; valaddr_reg:x3; val_offset:53622*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53622*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17875:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3360dd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5b5670 and fs3 == 0 and fe3 == 0x80 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb360dd; op2val:0x5b5670;
op3val:0x407ff800; valaddr_reg:x3; val_offset:53625*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53625*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17876:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3360dd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5b5670 and fs3 == 0 and fe3 == 0x80 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb360dd; op2val:0x5b5670;
op3val:0x407ffc00; valaddr_reg:x3; val_offset:53628*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53628*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17877:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3360dd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5b5670 and fs3 == 0 and fe3 == 0x80 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb360dd; op2val:0x5b5670;
op3val:0x407ffe00; valaddr_reg:x3; val_offset:53631*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53631*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17878:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3360dd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5b5670 and fs3 == 0 and fe3 == 0x80 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb360dd; op2val:0x5b5670;
op3val:0x407fff00; valaddr_reg:x3; val_offset:53634*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53634*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17879:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3360dd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5b5670 and fs3 == 0 and fe3 == 0x80 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb360dd; op2val:0x5b5670;
op3val:0x407fff80; valaddr_reg:x3; val_offset:53637*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53637*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17880:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3360dd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5b5670 and fs3 == 0 and fe3 == 0x80 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb360dd; op2val:0x5b5670;
op3val:0x407fffc0; valaddr_reg:x3; val_offset:53640*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53640*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17881:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3360dd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5b5670 and fs3 == 0 and fe3 == 0x80 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb360dd; op2val:0x5b5670;
op3val:0x407fffe0; valaddr_reg:x3; val_offset:53643*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53643*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17882:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3360dd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5b5670 and fs3 == 0 and fe3 == 0x80 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb360dd; op2val:0x5b5670;
op3val:0x407ffff0; valaddr_reg:x3; val_offset:53646*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53646*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17883:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3360dd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5b5670 and fs3 == 0 and fe3 == 0x80 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb360dd; op2val:0x5b5670;
op3val:0x407ffff8; valaddr_reg:x3; val_offset:53649*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53649*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17884:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3360dd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5b5670 and fs3 == 0 and fe3 == 0x80 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb360dd; op2val:0x5b5670;
op3val:0x407ffffc; valaddr_reg:x3; val_offset:53652*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53652*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17885:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3360dd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5b5670 and fs3 == 0 and fe3 == 0x80 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb360dd; op2val:0x5b5670;
op3val:0x407ffffe; valaddr_reg:x3; val_offset:53655*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53655*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17886:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3360dd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5b5670 and fs3 == 0 and fe3 == 0x80 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb360dd; op2val:0x5b5670;
op3val:0x407fffff; valaddr_reg:x3; val_offset:53658*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53658*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17887:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x33667c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb3667c; op2val:0x0;
op3val:0x800001; valaddr_reg:x3; val_offset:53661*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53661*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17888:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x33667c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb3667c; op2val:0x0;
op3val:0x800003; valaddr_reg:x3; val_offset:53664*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53664*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17889:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x33667c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb3667c; op2val:0x0;
op3val:0x800007; valaddr_reg:x3; val_offset:53667*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53667*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17890:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x33667c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb3667c; op2val:0x0;
op3val:0x999999; valaddr_reg:x3; val_offset:53670*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53670*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17891:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x33667c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb3667c; op2val:0x0;
op3val:0xa49249; valaddr_reg:x3; val_offset:53673*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53673*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17892:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x33667c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb3667c; op2val:0x0;
op3val:0xb33333; valaddr_reg:x3; val_offset:53676*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53676*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17893:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x33667c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb3667c; op2val:0x0;
op3val:0xb6db6d; valaddr_reg:x3; val_offset:53679*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53679*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17894:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x33667c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb3667c; op2val:0x0;
op3val:0xbbbbbb; valaddr_reg:x3; val_offset:53682*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53682*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17895:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x33667c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb3667c; op2val:0x0;
op3val:0xc44444; valaddr_reg:x3; val_offset:53685*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53685*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17896:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x33667c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb3667c; op2val:0x0;
op3val:0xcccccc; valaddr_reg:x3; val_offset:53688*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53688*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17897:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x33667c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb3667c; op2val:0x0;
op3val:0xdb6db6; valaddr_reg:x3; val_offset:53691*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53691*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17898:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x33667c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb3667c; op2val:0x0;
op3val:0xe66666; valaddr_reg:x3; val_offset:53694*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53694*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17899:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x33667c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb3667c; op2val:0x0;
op3val:0xedb6db; valaddr_reg:x3; val_offset:53697*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53697*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17900:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x33667c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb3667c; op2val:0x0;
op3val:0xfffff8; valaddr_reg:x3; val_offset:53700*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53700*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17901:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x33667c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb3667c; op2val:0x0;
op3val:0xfffffc; valaddr_reg:x3; val_offset:53703*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53703*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17902:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x33667c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb3667c; op2val:0x0;
op3val:0xfffffe; valaddr_reg:x3; val_offset:53706*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53706*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17903:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x33667c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb3667c; op2val:0x0;
op3val:0xc800000; valaddr_reg:x3; val_offset:53709*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53709*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17904:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x33667c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb3667c; op2val:0x0;
op3val:0xc800001; valaddr_reg:x3; val_offset:53712*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53712*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17905:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x33667c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb3667c; op2val:0x0;
op3val:0xc800003; valaddr_reg:x3; val_offset:53715*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53715*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17906:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x33667c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb3667c; op2val:0x0;
op3val:0xc800007; valaddr_reg:x3; val_offset:53718*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53718*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17907:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x33667c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb3667c; op2val:0x0;
op3val:0xc80000f; valaddr_reg:x3; val_offset:53721*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53721*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17908:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x33667c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb3667c; op2val:0x0;
op3val:0xc80001f; valaddr_reg:x3; val_offset:53724*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53724*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17909:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x33667c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb3667c; op2val:0x0;
op3val:0xc80003f; valaddr_reg:x3; val_offset:53727*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53727*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17910:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x33667c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb3667c; op2val:0x0;
op3val:0xc80007f; valaddr_reg:x3; val_offset:53730*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53730*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17911:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x33667c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb3667c; op2val:0x0;
op3val:0xc8000ff; valaddr_reg:x3; val_offset:53733*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53733*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17912:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x33667c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb3667c; op2val:0x0;
op3val:0xc8001ff; valaddr_reg:x3; val_offset:53736*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53736*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17913:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x33667c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb3667c; op2val:0x0;
op3val:0xc8003ff; valaddr_reg:x3; val_offset:53739*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53739*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17914:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x33667c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb3667c; op2val:0x0;
op3val:0xc8007ff; valaddr_reg:x3; val_offset:53742*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53742*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17915:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x33667c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb3667c; op2val:0x0;
op3val:0xc800fff; valaddr_reg:x3; val_offset:53745*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53745*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17916:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x33667c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb3667c; op2val:0x0;
op3val:0xc801fff; valaddr_reg:x3; val_offset:53748*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53748*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17917:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x33667c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb3667c; op2val:0x0;
op3val:0xc803fff; valaddr_reg:x3; val_offset:53751*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53751*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17918:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x33667c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb3667c; op2val:0x0;
op3val:0xc807fff; valaddr_reg:x3; val_offset:53754*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53754*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17919:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x33667c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb3667c; op2val:0x0;
op3val:0xc80ffff; valaddr_reg:x3; val_offset:53757*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53757*0 + 3*139*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2125566782,32,FLEN)
NAN_BOXED(3224930241,32,FLEN)
NAN_BOXED(3900637184,32,FLEN)
NAN_BOXED(2125566782,32,FLEN)
NAN_BOXED(3224930241,32,FLEN)
NAN_BOXED(3900669952,32,FLEN)
NAN_BOXED(2125566782,32,FLEN)
NAN_BOXED(3224930241,32,FLEN)
NAN_BOXED(3900686336,32,FLEN)
NAN_BOXED(2125566782,32,FLEN)
NAN_BOXED(3224930241,32,FLEN)
NAN_BOXED(3900694528,32,FLEN)
NAN_BOXED(2125566782,32,FLEN)
NAN_BOXED(3224930241,32,FLEN)
NAN_BOXED(3900698624,32,FLEN)
NAN_BOXED(2125566782,32,FLEN)
NAN_BOXED(3224930241,32,FLEN)
NAN_BOXED(3900700672,32,FLEN)
NAN_BOXED(2125566782,32,FLEN)
NAN_BOXED(3224930241,32,FLEN)
NAN_BOXED(3900701696,32,FLEN)
NAN_BOXED(2125566782,32,FLEN)
NAN_BOXED(3224930241,32,FLEN)
NAN_BOXED(3900702208,32,FLEN)
NAN_BOXED(2125566782,32,FLEN)
NAN_BOXED(3224930241,32,FLEN)
NAN_BOXED(3900702464,32,FLEN)
NAN_BOXED(2125566782,32,FLEN)
NAN_BOXED(3224930241,32,FLEN)
NAN_BOXED(3900702592,32,FLEN)
NAN_BOXED(2125566782,32,FLEN)
NAN_BOXED(3224930241,32,FLEN)
NAN_BOXED(3900702656,32,FLEN)
NAN_BOXED(2125566782,32,FLEN)
NAN_BOXED(3224930241,32,FLEN)
NAN_BOXED(3900702688,32,FLEN)
NAN_BOXED(2125566782,32,FLEN)
NAN_BOXED(3224930241,32,FLEN)
NAN_BOXED(3900702704,32,FLEN)
NAN_BOXED(2125566782,32,FLEN)
NAN_BOXED(3224930241,32,FLEN)
NAN_BOXED(3900702712,32,FLEN)
NAN_BOXED(2125566782,32,FLEN)
NAN_BOXED(3224930241,32,FLEN)
NAN_BOXED(3900702716,32,FLEN)
NAN_BOXED(2125566782,32,FLEN)
NAN_BOXED(3224930241,32,FLEN)
NAN_BOXED(3900702718,32,FLEN)
NAN_BOXED(2125566782,32,FLEN)
NAN_BOXED(3224930241,32,FLEN)
NAN_BOXED(3900702719,32,FLEN)
NAN_BOXED(2125566782,32,FLEN)
NAN_BOXED(3224930241,32,FLEN)
NAN_BOXED(4278190081,32,FLEN)
NAN_BOXED(2125566782,32,FLEN)
NAN_BOXED(3224930241,32,FLEN)
NAN_BOXED(4278190083,32,FLEN)
NAN_BOXED(2125566782,32,FLEN)
NAN_BOXED(3224930241,32,FLEN)
NAN_BOXED(4278190087,32,FLEN)
NAN_BOXED(2125566782,32,FLEN)
NAN_BOXED(3224930241,32,FLEN)
NAN_BOXED(4279867801,32,FLEN)
NAN_BOXED(2125566782,32,FLEN)
NAN_BOXED(3224930241,32,FLEN)
NAN_BOXED(4280586825,32,FLEN)
NAN_BOXED(2125566782,32,FLEN)
NAN_BOXED(3224930241,32,FLEN)
NAN_BOXED(4281545523,32,FLEN)
NAN_BOXED(2125566782,32,FLEN)
NAN_BOXED(3224930241,32,FLEN)
NAN_BOXED(4281785197,32,FLEN)
NAN_BOXED(2125566782,32,FLEN)
NAN_BOXED(3224930241,32,FLEN)
NAN_BOXED(4282104763,32,FLEN)
NAN_BOXED(2125566782,32,FLEN)
NAN_BOXED(3224930241,32,FLEN)
NAN_BOXED(4282664004,32,FLEN)
NAN_BOXED(2125566782,32,FLEN)
NAN_BOXED(3224930241,32,FLEN)
NAN_BOXED(4283223244,32,FLEN)
NAN_BOXED(2125566782,32,FLEN)
NAN_BOXED(3224930241,32,FLEN)
NAN_BOXED(4284181942,32,FLEN)
NAN_BOXED(2125566782,32,FLEN)
NAN_BOXED(3224930241,32,FLEN)
NAN_BOXED(4284900966,32,FLEN)
NAN_BOXED(2125566782,32,FLEN)
NAN_BOXED(3224930241,32,FLEN)
NAN_BOXED(4285380315,32,FLEN)
NAN_BOXED(2125566782,32,FLEN)
NAN_BOXED(3224930241,32,FLEN)
NAN_BOXED(4286578680,32,FLEN)
NAN_BOXED(2125566782,32,FLEN)
NAN_BOXED(3224930241,32,FLEN)
NAN_BOXED(4286578684,32,FLEN)
NAN_BOXED(2125566782,32,FLEN)
NAN_BOXED(3224930241,32,FLEN)
NAN_BOXED(4286578686,32,FLEN)
NAN_BOXED(2125684957,32,FLEN)
NAN_BOXED(5985904,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2125684957,32,FLEN)
NAN_BOXED(5985904,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2125684957,32,FLEN)
NAN_BOXED(5985904,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2125684957,32,FLEN)
NAN_BOXED(5985904,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2125684957,32,FLEN)
NAN_BOXED(5985904,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2125684957,32,FLEN)
NAN_BOXED(5985904,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2125684957,32,FLEN)
NAN_BOXED(5985904,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2125684957,32,FLEN)
NAN_BOXED(5985904,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2125684957,32,FLEN)
NAN_BOXED(5985904,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2125684957,32,FLEN)
NAN_BOXED(5985904,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2125684957,32,FLEN)
NAN_BOXED(5985904,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2125684957,32,FLEN)
NAN_BOXED(5985904,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2125684957,32,FLEN)
NAN_BOXED(5985904,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2125684957,32,FLEN)
NAN_BOXED(5985904,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2125684957,32,FLEN)
NAN_BOXED(5985904,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2125684957,32,FLEN)
NAN_BOXED(5985904,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2125684957,32,FLEN)
NAN_BOXED(5985904,32,FLEN)
NAN_BOXED(1073741824,32,FLEN)
NAN_BOXED(2125684957,32,FLEN)
NAN_BOXED(5985904,32,FLEN)
NAN_BOXED(1073741825,32,FLEN)
NAN_BOXED(2125684957,32,FLEN)
NAN_BOXED(5985904,32,FLEN)
NAN_BOXED(1073741827,32,FLEN)
NAN_BOXED(2125684957,32,FLEN)
NAN_BOXED(5985904,32,FLEN)
NAN_BOXED(1073741831,32,FLEN)
NAN_BOXED(2125684957,32,FLEN)
NAN_BOXED(5985904,32,FLEN)
NAN_BOXED(1073741839,32,FLEN)
NAN_BOXED(2125684957,32,FLEN)
NAN_BOXED(5985904,32,FLEN)
NAN_BOXED(1073741855,32,FLEN)
NAN_BOXED(2125684957,32,FLEN)
NAN_BOXED(5985904,32,FLEN)
NAN_BOXED(1073741887,32,FLEN)
NAN_BOXED(2125684957,32,FLEN)
NAN_BOXED(5985904,32,FLEN)
NAN_BOXED(1073741951,32,FLEN)
NAN_BOXED(2125684957,32,FLEN)
NAN_BOXED(5985904,32,FLEN)
NAN_BOXED(1073742079,32,FLEN)
NAN_BOXED(2125684957,32,FLEN)
NAN_BOXED(5985904,32,FLEN)
NAN_BOXED(1073742335,32,FLEN)
NAN_BOXED(2125684957,32,FLEN)
NAN_BOXED(5985904,32,FLEN)
NAN_BOXED(1073742847,32,FLEN)
NAN_BOXED(2125684957,32,FLEN)
NAN_BOXED(5985904,32,FLEN)
NAN_BOXED(1073743871,32,FLEN)
NAN_BOXED(2125684957,32,FLEN)
NAN_BOXED(5985904,32,FLEN)
NAN_BOXED(1073745919,32,FLEN)
NAN_BOXED(2125684957,32,FLEN)
NAN_BOXED(5985904,32,FLEN)
NAN_BOXED(1073750015,32,FLEN)
NAN_BOXED(2125684957,32,FLEN)
NAN_BOXED(5985904,32,FLEN)
NAN_BOXED(1073758207,32,FLEN)
NAN_BOXED(2125684957,32,FLEN)
NAN_BOXED(5985904,32,FLEN)
NAN_BOXED(1073774591,32,FLEN)
NAN_BOXED(2125684957,32,FLEN)
NAN_BOXED(5985904,32,FLEN)
NAN_BOXED(1073807359,32,FLEN)
NAN_BOXED(2125684957,32,FLEN)
NAN_BOXED(5985904,32,FLEN)
NAN_BOXED(1073872895,32,FLEN)
NAN_BOXED(2125684957,32,FLEN)
NAN_BOXED(5985904,32,FLEN)
NAN_BOXED(1074003967,32,FLEN)
NAN_BOXED(2125684957,32,FLEN)
NAN_BOXED(5985904,32,FLEN)
NAN_BOXED(1074266111,32,FLEN)
NAN_BOXED(2125684957,32,FLEN)
NAN_BOXED(5985904,32,FLEN)
NAN_BOXED(1074790399,32,FLEN)
NAN_BOXED(2125684957,32,FLEN)
NAN_BOXED(5985904,32,FLEN)
NAN_BOXED(1075838975,32,FLEN)
NAN_BOXED(2125684957,32,FLEN)
NAN_BOXED(5985904,32,FLEN)
NAN_BOXED(1077936127,32,FLEN)
NAN_BOXED(2125684957,32,FLEN)
NAN_BOXED(5985904,32,FLEN)
NAN_BOXED(1077936128,32,FLEN)
NAN_BOXED(2125684957,32,FLEN)
NAN_BOXED(5985904,32,FLEN)
NAN_BOXED(1080033280,32,FLEN)
NAN_BOXED(2125684957,32,FLEN)
NAN_BOXED(5985904,32,FLEN)
NAN_BOXED(1081081856,32,FLEN)
NAN_BOXED(2125684957,32,FLEN)
NAN_BOXED(5985904,32,FLEN)
NAN_BOXED(1081606144,32,FLEN)
NAN_BOXED(2125684957,32,FLEN)
NAN_BOXED(5985904,32,FLEN)
NAN_BOXED(1081868288,32,FLEN)
NAN_BOXED(2125684957,32,FLEN)
NAN_BOXED(5985904,32,FLEN)
NAN_BOXED(1081999360,32,FLEN)
NAN_BOXED(2125684957,32,FLEN)
NAN_BOXED(5985904,32,FLEN)
NAN_BOXED(1082064896,32,FLEN)
NAN_BOXED(2125684957,32,FLEN)
NAN_BOXED(5985904,32,FLEN)
NAN_BOXED(1082097664,32,FLEN)
NAN_BOXED(2125684957,32,FLEN)
NAN_BOXED(5985904,32,FLEN)
NAN_BOXED(1082114048,32,FLEN)
NAN_BOXED(2125684957,32,FLEN)
NAN_BOXED(5985904,32,FLEN)
NAN_BOXED(1082122240,32,FLEN)
NAN_BOXED(2125684957,32,FLEN)
NAN_BOXED(5985904,32,FLEN)
NAN_BOXED(1082126336,32,FLEN)
NAN_BOXED(2125684957,32,FLEN)
NAN_BOXED(5985904,32,FLEN)
NAN_BOXED(1082128384,32,FLEN)
NAN_BOXED(2125684957,32,FLEN)
NAN_BOXED(5985904,32,FLEN)
NAN_BOXED(1082129408,32,FLEN)
NAN_BOXED(2125684957,32,FLEN)
NAN_BOXED(5985904,32,FLEN)
NAN_BOXED(1082129920,32,FLEN)
NAN_BOXED(2125684957,32,FLEN)
NAN_BOXED(5985904,32,FLEN)
NAN_BOXED(1082130176,32,FLEN)
NAN_BOXED(2125684957,32,FLEN)
NAN_BOXED(5985904,32,FLEN)
NAN_BOXED(1082130304,32,FLEN)
NAN_BOXED(2125684957,32,FLEN)
NAN_BOXED(5985904,32,FLEN)
NAN_BOXED(1082130368,32,FLEN)
NAN_BOXED(2125684957,32,FLEN)
NAN_BOXED(5985904,32,FLEN)
NAN_BOXED(1082130400,32,FLEN)
NAN_BOXED(2125684957,32,FLEN)
NAN_BOXED(5985904,32,FLEN)
NAN_BOXED(1082130416,32,FLEN)
NAN_BOXED(2125684957,32,FLEN)
NAN_BOXED(5985904,32,FLEN)
NAN_BOXED(1082130424,32,FLEN)
NAN_BOXED(2125684957,32,FLEN)
NAN_BOXED(5985904,32,FLEN)
NAN_BOXED(1082130428,32,FLEN)
NAN_BOXED(2125684957,32,FLEN)
NAN_BOXED(5985904,32,FLEN)
NAN_BOXED(1082130430,32,FLEN)
NAN_BOXED(2125684957,32,FLEN)
NAN_BOXED(5985904,32,FLEN)
NAN_BOXED(1082130431,32,FLEN)
NAN_BOXED(2125686396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(2125686396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388611,32,FLEN)
NAN_BOXED(2125686396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388615,32,FLEN)
NAN_BOXED(2125686396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(10066329,32,FLEN)
NAN_BOXED(2125686396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(10785353,32,FLEN)
NAN_BOXED(2125686396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(11744051,32,FLEN)
NAN_BOXED(2125686396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(11983725,32,FLEN)
NAN_BOXED(2125686396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(12303291,32,FLEN)
NAN_BOXED(2125686396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(12862532,32,FLEN)
NAN_BOXED(2125686396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(13421772,32,FLEN)
NAN_BOXED(2125686396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(14380470,32,FLEN)
NAN_BOXED(2125686396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(15099494,32,FLEN)
NAN_BOXED(2125686396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(15578843,32,FLEN)
NAN_BOXED(2125686396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777208,32,FLEN)
NAN_BOXED(2125686396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777212,32,FLEN)
NAN_BOXED(2125686396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777214,32,FLEN)
NAN_BOXED(2125686396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209715200,32,FLEN)
NAN_BOXED(2125686396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209715201,32,FLEN)
NAN_BOXED(2125686396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209715203,32,FLEN)
NAN_BOXED(2125686396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209715207,32,FLEN)
NAN_BOXED(2125686396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209715215,32,FLEN)
NAN_BOXED(2125686396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209715231,32,FLEN)
NAN_BOXED(2125686396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209715263,32,FLEN)
NAN_BOXED(2125686396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209715327,32,FLEN)
NAN_BOXED(2125686396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209715455,32,FLEN)
NAN_BOXED(2125686396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209715711,32,FLEN)
NAN_BOXED(2125686396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209716223,32,FLEN)
NAN_BOXED(2125686396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209717247,32,FLEN)
NAN_BOXED(2125686396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209719295,32,FLEN)
NAN_BOXED(2125686396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209723391,32,FLEN)
NAN_BOXED(2125686396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209731583,32,FLEN)
NAN_BOXED(2125686396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209747967,32,FLEN)
NAN_BOXED(2125686396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209780735,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
