
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:17:59 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_17920:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x33667c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb3667c; op2val:0x0;
op3val:0xc81ffff; valaddr_reg:x3; val_offset:53760*0 + 3*140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53760*0 + 3*140*FLEN/8, x4, x1, x2)

inst_17921:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x33667c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb3667c; op2val:0x0;
op3val:0xc83ffff; valaddr_reg:x3; val_offset:53763*0 + 3*140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53763*0 + 3*140*FLEN/8, x4, x1, x2)

inst_17922:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x33667c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb3667c; op2val:0x0;
op3val:0xc87ffff; valaddr_reg:x3; val_offset:53766*0 + 3*140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53766*0 + 3*140*FLEN/8, x4, x1, x2)

inst_17923:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x33667c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb3667c; op2val:0x0;
op3val:0xc8fffff; valaddr_reg:x3; val_offset:53769*0 + 3*140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53769*0 + 3*140*FLEN/8, x4, x1, x2)

inst_17924:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x33667c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb3667c; op2val:0x0;
op3val:0xc9fffff; valaddr_reg:x3; val_offset:53772*0 + 3*140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53772*0 + 3*140*FLEN/8, x4, x1, x2)

inst_17925:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x33667c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb3667c; op2val:0x0;
op3val:0xcbfffff; valaddr_reg:x3; val_offset:53775*0 + 3*140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53775*0 + 3*140*FLEN/8, x4, x1, x2)

inst_17926:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x33667c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb3667c; op2val:0x0;
op3val:0xcc00000; valaddr_reg:x3; val_offset:53778*0 + 3*140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53778*0 + 3*140*FLEN/8, x4, x1, x2)

inst_17927:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x33667c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb3667c; op2val:0x0;
op3val:0xce00000; valaddr_reg:x3; val_offset:53781*0 + 3*140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53781*0 + 3*140*FLEN/8, x4, x1, x2)

inst_17928:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x33667c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb3667c; op2val:0x0;
op3val:0xcf00000; valaddr_reg:x3; val_offset:53784*0 + 3*140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53784*0 + 3*140*FLEN/8, x4, x1, x2)

inst_17929:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x33667c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb3667c; op2val:0x0;
op3val:0xcf80000; valaddr_reg:x3; val_offset:53787*0 + 3*140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53787*0 + 3*140*FLEN/8, x4, x1, x2)

inst_17930:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x33667c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb3667c; op2val:0x0;
op3val:0xcfc0000; valaddr_reg:x3; val_offset:53790*0 + 3*140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53790*0 + 3*140*FLEN/8, x4, x1, x2)

inst_17931:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x33667c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb3667c; op2val:0x0;
op3val:0xcfe0000; valaddr_reg:x3; val_offset:53793*0 + 3*140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53793*0 + 3*140*FLEN/8, x4, x1, x2)

inst_17932:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x33667c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb3667c; op2val:0x0;
op3val:0xcff0000; valaddr_reg:x3; val_offset:53796*0 + 3*140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53796*0 + 3*140*FLEN/8, x4, x1, x2)

inst_17933:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x33667c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb3667c; op2val:0x0;
op3val:0xcff8000; valaddr_reg:x3; val_offset:53799*0 + 3*140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53799*0 + 3*140*FLEN/8, x4, x1, x2)

inst_17934:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x33667c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb3667c; op2val:0x0;
op3val:0xcffc000; valaddr_reg:x3; val_offset:53802*0 + 3*140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53802*0 + 3*140*FLEN/8, x4, x1, x2)

inst_17935:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x33667c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb3667c; op2val:0x0;
op3val:0xcffe000; valaddr_reg:x3; val_offset:53805*0 + 3*140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53805*0 + 3*140*FLEN/8, x4, x1, x2)

inst_17936:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x33667c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb3667c; op2val:0x0;
op3val:0xcfff000; valaddr_reg:x3; val_offset:53808*0 + 3*140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53808*0 + 3*140*FLEN/8, x4, x1, x2)

inst_17937:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x33667c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb3667c; op2val:0x0;
op3val:0xcfff800; valaddr_reg:x3; val_offset:53811*0 + 3*140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53811*0 + 3*140*FLEN/8, x4, x1, x2)

inst_17938:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x33667c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb3667c; op2val:0x0;
op3val:0xcfffc00; valaddr_reg:x3; val_offset:53814*0 + 3*140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53814*0 + 3*140*FLEN/8, x4, x1, x2)

inst_17939:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x33667c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb3667c; op2val:0x0;
op3val:0xcfffe00; valaddr_reg:x3; val_offset:53817*0 + 3*140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53817*0 + 3*140*FLEN/8, x4, x1, x2)

inst_17940:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x33667c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb3667c; op2val:0x0;
op3val:0xcffff00; valaddr_reg:x3; val_offset:53820*0 + 3*140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53820*0 + 3*140*FLEN/8, x4, x1, x2)

inst_17941:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x33667c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb3667c; op2val:0x0;
op3val:0xcffff80; valaddr_reg:x3; val_offset:53823*0 + 3*140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53823*0 + 3*140*FLEN/8, x4, x1, x2)

inst_17942:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x33667c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb3667c; op2val:0x0;
op3val:0xcffffc0; valaddr_reg:x3; val_offset:53826*0 + 3*140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53826*0 + 3*140*FLEN/8, x4, x1, x2)

inst_17943:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x33667c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb3667c; op2val:0x0;
op3val:0xcffffe0; valaddr_reg:x3; val_offset:53829*0 + 3*140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53829*0 + 3*140*FLEN/8, x4, x1, x2)

inst_17944:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x33667c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb3667c; op2val:0x0;
op3val:0xcfffff0; valaddr_reg:x3; val_offset:53832*0 + 3*140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53832*0 + 3*140*FLEN/8, x4, x1, x2)

inst_17945:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x33667c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb3667c; op2val:0x0;
op3val:0xcfffff8; valaddr_reg:x3; val_offset:53835*0 + 3*140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53835*0 + 3*140*FLEN/8, x4, x1, x2)

inst_17946:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x33667c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb3667c; op2val:0x0;
op3val:0xcfffffc; valaddr_reg:x3; val_offset:53838*0 + 3*140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53838*0 + 3*140*FLEN/8, x4, x1, x2)

inst_17947:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x33667c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb3667c; op2val:0x0;
op3val:0xcfffffe; valaddr_reg:x3; val_offset:53841*0 + 3*140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53841*0 + 3*140*FLEN/8, x4, x1, x2)

inst_17948:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x33667c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb3667c; op2val:0x0;
op3val:0xcffffff; valaddr_reg:x3; val_offset:53844*0 + 3*140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53844*0 + 3*140*FLEN/8, x4, x1, x2)

inst_17949:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x349020 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5abd08 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb49020; op2val:0x5abd08;
op3val:0x3f800001; valaddr_reg:x3; val_offset:53847*0 + 3*140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53847*0 + 3*140*FLEN/8, x4, x1, x2)

inst_17950:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x349020 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5abd08 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb49020; op2val:0x5abd08;
op3val:0x3f800003; valaddr_reg:x3; val_offset:53850*0 + 3*140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53850*0 + 3*140*FLEN/8, x4, x1, x2)

inst_17951:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x349020 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5abd08 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb49020; op2val:0x5abd08;
op3val:0x3f800007; valaddr_reg:x3; val_offset:53853*0 + 3*140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53853*0 + 3*140*FLEN/8, x4, x1, x2)

inst_17952:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x349020 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5abd08 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb49020; op2val:0x5abd08;
op3val:0x3f999999; valaddr_reg:x3; val_offset:53856*0 + 3*140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53856*0 + 3*140*FLEN/8, x4, x1, x2)

inst_17953:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x349020 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5abd08 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb49020; op2val:0x5abd08;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:53859*0 + 3*140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53859*0 + 3*140*FLEN/8, x4, x1, x2)

inst_17954:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x349020 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5abd08 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb49020; op2val:0x5abd08;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:53862*0 + 3*140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53862*0 + 3*140*FLEN/8, x4, x1, x2)

inst_17955:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x349020 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5abd08 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb49020; op2val:0x5abd08;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:53865*0 + 3*140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53865*0 + 3*140*FLEN/8, x4, x1, x2)

inst_17956:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x349020 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5abd08 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb49020; op2val:0x5abd08;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:53868*0 + 3*140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53868*0 + 3*140*FLEN/8, x4, x1, x2)

inst_17957:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x349020 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5abd08 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb49020; op2val:0x5abd08;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:53871*0 + 3*140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53871*0 + 3*140*FLEN/8, x4, x1, x2)

inst_17958:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x349020 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5abd08 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb49020; op2val:0x5abd08;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:53874*0 + 3*140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53874*0 + 3*140*FLEN/8, x4, x1, x2)

inst_17959:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x349020 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5abd08 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb49020; op2val:0x5abd08;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:53877*0 + 3*140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53877*0 + 3*140*FLEN/8, x4, x1, x2)

inst_17960:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x349020 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5abd08 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb49020; op2val:0x5abd08;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:53880*0 + 3*140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53880*0 + 3*140*FLEN/8, x4, x1, x2)

inst_17961:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x349020 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5abd08 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb49020; op2val:0x5abd08;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:53883*0 + 3*140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53883*0 + 3*140*FLEN/8, x4, x1, x2)

inst_17962:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x349020 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5abd08 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb49020; op2val:0x5abd08;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:53886*0 + 3*140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53886*0 + 3*140*FLEN/8, x4, x1, x2)

inst_17963:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x349020 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5abd08 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb49020; op2val:0x5abd08;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:53889*0 + 3*140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53889*0 + 3*140*FLEN/8, x4, x1, x2)

inst_17964:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x349020 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5abd08 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb49020; op2val:0x5abd08;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:53892*0 + 3*140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53892*0 + 3*140*FLEN/8, x4, x1, x2)

inst_17965:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x349020 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5abd08 and fs3 == 0 and fe3 == 0x86 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb49020; op2val:0x5abd08;
op3val:0x43000000; valaddr_reg:x3; val_offset:53895*0 + 3*140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53895*0 + 3*140*FLEN/8, x4, x1, x2)

inst_17966:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x349020 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5abd08 and fs3 == 0 and fe3 == 0x86 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb49020; op2val:0x5abd08;
op3val:0x43000001; valaddr_reg:x3; val_offset:53898*0 + 3*140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53898*0 + 3*140*FLEN/8, x4, x1, x2)

inst_17967:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x349020 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5abd08 and fs3 == 0 and fe3 == 0x86 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb49020; op2val:0x5abd08;
op3val:0x43000003; valaddr_reg:x3; val_offset:53901*0 + 3*140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53901*0 + 3*140*FLEN/8, x4, x1, x2)

inst_17968:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x349020 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5abd08 and fs3 == 0 and fe3 == 0x86 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb49020; op2val:0x5abd08;
op3val:0x43000007; valaddr_reg:x3; val_offset:53904*0 + 3*140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53904*0 + 3*140*FLEN/8, x4, x1, x2)

inst_17969:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x349020 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5abd08 and fs3 == 0 and fe3 == 0x86 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb49020; op2val:0x5abd08;
op3val:0x4300000f; valaddr_reg:x3; val_offset:53907*0 + 3*140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53907*0 + 3*140*FLEN/8, x4, x1, x2)

inst_17970:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x349020 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5abd08 and fs3 == 0 and fe3 == 0x86 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb49020; op2val:0x5abd08;
op3val:0x4300001f; valaddr_reg:x3; val_offset:53910*0 + 3*140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53910*0 + 3*140*FLEN/8, x4, x1, x2)

inst_17971:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x349020 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5abd08 and fs3 == 0 and fe3 == 0x86 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb49020; op2val:0x5abd08;
op3val:0x4300003f; valaddr_reg:x3; val_offset:53913*0 + 3*140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53913*0 + 3*140*FLEN/8, x4, x1, x2)

inst_17972:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x349020 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5abd08 and fs3 == 0 and fe3 == 0x86 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb49020; op2val:0x5abd08;
op3val:0x4300007f; valaddr_reg:x3; val_offset:53916*0 + 3*140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53916*0 + 3*140*FLEN/8, x4, x1, x2)

inst_17973:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x349020 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5abd08 and fs3 == 0 and fe3 == 0x86 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb49020; op2val:0x5abd08;
op3val:0x430000ff; valaddr_reg:x3; val_offset:53919*0 + 3*140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53919*0 + 3*140*FLEN/8, x4, x1, x2)

inst_17974:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x349020 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5abd08 and fs3 == 0 and fe3 == 0x86 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb49020; op2val:0x5abd08;
op3val:0x430001ff; valaddr_reg:x3; val_offset:53922*0 + 3*140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53922*0 + 3*140*FLEN/8, x4, x1, x2)

inst_17975:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x349020 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5abd08 and fs3 == 0 and fe3 == 0x86 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb49020; op2val:0x5abd08;
op3val:0x430003ff; valaddr_reg:x3; val_offset:53925*0 + 3*140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53925*0 + 3*140*FLEN/8, x4, x1, x2)

inst_17976:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x349020 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5abd08 and fs3 == 0 and fe3 == 0x86 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb49020; op2val:0x5abd08;
op3val:0x430007ff; valaddr_reg:x3; val_offset:53928*0 + 3*140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53928*0 + 3*140*FLEN/8, x4, x1, x2)

inst_17977:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x349020 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5abd08 and fs3 == 0 and fe3 == 0x86 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb49020; op2val:0x5abd08;
op3val:0x43000fff; valaddr_reg:x3; val_offset:53931*0 + 3*140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53931*0 + 3*140*FLEN/8, x4, x1, x2)

inst_17978:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x349020 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5abd08 and fs3 == 0 and fe3 == 0x86 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb49020; op2val:0x5abd08;
op3val:0x43001fff; valaddr_reg:x3; val_offset:53934*0 + 3*140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53934*0 + 3*140*FLEN/8, x4, x1, x2)

inst_17979:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x349020 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5abd08 and fs3 == 0 and fe3 == 0x86 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb49020; op2val:0x5abd08;
op3val:0x43003fff; valaddr_reg:x3; val_offset:53937*0 + 3*140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53937*0 + 3*140*FLEN/8, x4, x1, x2)

inst_17980:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x349020 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5abd08 and fs3 == 0 and fe3 == 0x86 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb49020; op2val:0x5abd08;
op3val:0x43007fff; valaddr_reg:x3; val_offset:53940*0 + 3*140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53940*0 + 3*140*FLEN/8, x4, x1, x2)

inst_17981:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x349020 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5abd08 and fs3 == 0 and fe3 == 0x86 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb49020; op2val:0x5abd08;
op3val:0x4300ffff; valaddr_reg:x3; val_offset:53943*0 + 3*140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53943*0 + 3*140*FLEN/8, x4, x1, x2)

inst_17982:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x349020 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5abd08 and fs3 == 0 and fe3 == 0x86 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb49020; op2val:0x5abd08;
op3val:0x4301ffff; valaddr_reg:x3; val_offset:53946*0 + 3*140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53946*0 + 3*140*FLEN/8, x4, x1, x2)

inst_17983:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x349020 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5abd08 and fs3 == 0 and fe3 == 0x86 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb49020; op2val:0x5abd08;
op3val:0x4303ffff; valaddr_reg:x3; val_offset:53949*0 + 3*140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53949*0 + 3*140*FLEN/8, x4, x1, x2)

inst_17984:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x349020 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5abd08 and fs3 == 0 and fe3 == 0x86 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb49020; op2val:0x5abd08;
op3val:0x4307ffff; valaddr_reg:x3; val_offset:53952*0 + 3*140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53952*0 + 3*140*FLEN/8, x4, x1, x2)

inst_17985:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x349020 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5abd08 and fs3 == 0 and fe3 == 0x86 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb49020; op2val:0x5abd08;
op3val:0x430fffff; valaddr_reg:x3; val_offset:53955*0 + 3*140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53955*0 + 3*140*FLEN/8, x4, x1, x2)

inst_17986:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x349020 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5abd08 and fs3 == 0 and fe3 == 0x86 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb49020; op2val:0x5abd08;
op3val:0x431fffff; valaddr_reg:x3; val_offset:53958*0 + 3*140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53958*0 + 3*140*FLEN/8, x4, x1, x2)

inst_17987:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x349020 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5abd08 and fs3 == 0 and fe3 == 0x86 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb49020; op2val:0x5abd08;
op3val:0x433fffff; valaddr_reg:x3; val_offset:53961*0 + 3*140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53961*0 + 3*140*FLEN/8, x4, x1, x2)

inst_17988:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x349020 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5abd08 and fs3 == 0 and fe3 == 0x86 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb49020; op2val:0x5abd08;
op3val:0x43400000; valaddr_reg:x3; val_offset:53964*0 + 3*140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53964*0 + 3*140*FLEN/8, x4, x1, x2)

inst_17989:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x349020 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5abd08 and fs3 == 0 and fe3 == 0x86 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb49020; op2val:0x5abd08;
op3val:0x43600000; valaddr_reg:x3; val_offset:53967*0 + 3*140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53967*0 + 3*140*FLEN/8, x4, x1, x2)

inst_17990:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x349020 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5abd08 and fs3 == 0 and fe3 == 0x86 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb49020; op2val:0x5abd08;
op3val:0x43700000; valaddr_reg:x3; val_offset:53970*0 + 3*140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53970*0 + 3*140*FLEN/8, x4, x1, x2)

inst_17991:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x349020 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5abd08 and fs3 == 0 and fe3 == 0x86 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb49020; op2val:0x5abd08;
op3val:0x43780000; valaddr_reg:x3; val_offset:53973*0 + 3*140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53973*0 + 3*140*FLEN/8, x4, x1, x2)

inst_17992:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x349020 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5abd08 and fs3 == 0 and fe3 == 0x86 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb49020; op2val:0x5abd08;
op3val:0x437c0000; valaddr_reg:x3; val_offset:53976*0 + 3*140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53976*0 + 3*140*FLEN/8, x4, x1, x2)

inst_17993:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x349020 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5abd08 and fs3 == 0 and fe3 == 0x86 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb49020; op2val:0x5abd08;
op3val:0x437e0000; valaddr_reg:x3; val_offset:53979*0 + 3*140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53979*0 + 3*140*FLEN/8, x4, x1, x2)

inst_17994:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x349020 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5abd08 and fs3 == 0 and fe3 == 0x86 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb49020; op2val:0x5abd08;
op3val:0x437f0000; valaddr_reg:x3; val_offset:53982*0 + 3*140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53982*0 + 3*140*FLEN/8, x4, x1, x2)

inst_17995:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x349020 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5abd08 and fs3 == 0 and fe3 == 0x86 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb49020; op2val:0x5abd08;
op3val:0x437f8000; valaddr_reg:x3; val_offset:53985*0 + 3*140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53985*0 + 3*140*FLEN/8, x4, x1, x2)

inst_17996:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x349020 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5abd08 and fs3 == 0 and fe3 == 0x86 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb49020; op2val:0x5abd08;
op3val:0x437fc000; valaddr_reg:x3; val_offset:53988*0 + 3*140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53988*0 + 3*140*FLEN/8, x4, x1, x2)

inst_17997:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x349020 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5abd08 and fs3 == 0 and fe3 == 0x86 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb49020; op2val:0x5abd08;
op3val:0x437fe000; valaddr_reg:x3; val_offset:53991*0 + 3*140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53991*0 + 3*140*FLEN/8, x4, x1, x2)

inst_17998:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x349020 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5abd08 and fs3 == 0 and fe3 == 0x86 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb49020; op2val:0x5abd08;
op3val:0x437ff000; valaddr_reg:x3; val_offset:53994*0 + 3*140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53994*0 + 3*140*FLEN/8, x4, x1, x2)

inst_17999:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x349020 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5abd08 and fs3 == 0 and fe3 == 0x86 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb49020; op2val:0x5abd08;
op3val:0x437ff800; valaddr_reg:x3; val_offset:53997*0 + 3*140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53997*0 + 3*140*FLEN/8, x4, x1, x2)

inst_18000:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x349020 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5abd08 and fs3 == 0 and fe3 == 0x86 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb49020; op2val:0x5abd08;
op3val:0x437ffc00; valaddr_reg:x3; val_offset:54000*0 + 3*140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54000*0 + 3*140*FLEN/8, x4, x1, x2)

inst_18001:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x349020 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5abd08 and fs3 == 0 and fe3 == 0x86 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb49020; op2val:0x5abd08;
op3val:0x437ffe00; valaddr_reg:x3; val_offset:54003*0 + 3*140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54003*0 + 3*140*FLEN/8, x4, x1, x2)

inst_18002:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x349020 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5abd08 and fs3 == 0 and fe3 == 0x86 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb49020; op2val:0x5abd08;
op3val:0x437fff00; valaddr_reg:x3; val_offset:54006*0 + 3*140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54006*0 + 3*140*FLEN/8, x4, x1, x2)

inst_18003:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x349020 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5abd08 and fs3 == 0 and fe3 == 0x86 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb49020; op2val:0x5abd08;
op3val:0x437fff80; valaddr_reg:x3; val_offset:54009*0 + 3*140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54009*0 + 3*140*FLEN/8, x4, x1, x2)

inst_18004:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x349020 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5abd08 and fs3 == 0 and fe3 == 0x86 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb49020; op2val:0x5abd08;
op3val:0x437fffc0; valaddr_reg:x3; val_offset:54012*0 + 3*140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54012*0 + 3*140*FLEN/8, x4, x1, x2)

inst_18005:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x349020 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5abd08 and fs3 == 0 and fe3 == 0x86 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb49020; op2val:0x5abd08;
op3val:0x437fffe0; valaddr_reg:x3; val_offset:54015*0 + 3*140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54015*0 + 3*140*FLEN/8, x4, x1, x2)

inst_18006:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x349020 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5abd08 and fs3 == 0 and fe3 == 0x86 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb49020; op2val:0x5abd08;
op3val:0x437ffff0; valaddr_reg:x3; val_offset:54018*0 + 3*140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54018*0 + 3*140*FLEN/8, x4, x1, x2)

inst_18007:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x349020 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5abd08 and fs3 == 0 and fe3 == 0x86 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb49020; op2val:0x5abd08;
op3val:0x437ffff8; valaddr_reg:x3; val_offset:54021*0 + 3*140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54021*0 + 3*140*FLEN/8, x4, x1, x2)

inst_18008:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x349020 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5abd08 and fs3 == 0 and fe3 == 0x86 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb49020; op2val:0x5abd08;
op3val:0x437ffffc; valaddr_reg:x3; val_offset:54024*0 + 3*140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54024*0 + 3*140*FLEN/8, x4, x1, x2)

inst_18009:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x349020 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5abd08 and fs3 == 0 and fe3 == 0x86 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb49020; op2val:0x5abd08;
op3val:0x437ffffe; valaddr_reg:x3; val_offset:54027*0 + 3*140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54027*0 + 3*140*FLEN/8, x4, x1, x2)

inst_18010:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x349020 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5abd08 and fs3 == 0 and fe3 == 0x86 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb49020; op2val:0x5abd08;
op3val:0x437fffff; valaddr_reg:x3; val_offset:54030*0 + 3*140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54030*0 + 3*140*FLEN/8, x4, x1, x2)

inst_18011:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x34d220 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3537d3 and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb4d220; op2val:0xc03537d3;
op3val:0xe0800000; valaddr_reg:x3; val_offset:54033*0 + 3*140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54033*0 + 3*140*FLEN/8, x4, x1, x2)

inst_18012:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x34d220 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3537d3 and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb4d220; op2val:0xc03537d3;
op3val:0xe0800001; valaddr_reg:x3; val_offset:54036*0 + 3*140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54036*0 + 3*140*FLEN/8, x4, x1, x2)

inst_18013:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x34d220 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3537d3 and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb4d220; op2val:0xc03537d3;
op3val:0xe0800003; valaddr_reg:x3; val_offset:54039*0 + 3*140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54039*0 + 3*140*FLEN/8, x4, x1, x2)

inst_18014:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x34d220 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3537d3 and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb4d220; op2val:0xc03537d3;
op3val:0xe0800007; valaddr_reg:x3; val_offset:54042*0 + 3*140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54042*0 + 3*140*FLEN/8, x4, x1, x2)

inst_18015:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x34d220 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3537d3 and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb4d220; op2val:0xc03537d3;
op3val:0xe080000f; valaddr_reg:x3; val_offset:54045*0 + 3*140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54045*0 + 3*140*FLEN/8, x4, x1, x2)

inst_18016:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x34d220 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3537d3 and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb4d220; op2val:0xc03537d3;
op3val:0xe080001f; valaddr_reg:x3; val_offset:54048*0 + 3*140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54048*0 + 3*140*FLEN/8, x4, x1, x2)

inst_18017:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x34d220 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3537d3 and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb4d220; op2val:0xc03537d3;
op3val:0xe080003f; valaddr_reg:x3; val_offset:54051*0 + 3*140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54051*0 + 3*140*FLEN/8, x4, x1, x2)

inst_18018:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x34d220 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3537d3 and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb4d220; op2val:0xc03537d3;
op3val:0xe080007f; valaddr_reg:x3; val_offset:54054*0 + 3*140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54054*0 + 3*140*FLEN/8, x4, x1, x2)

inst_18019:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x34d220 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3537d3 and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb4d220; op2val:0xc03537d3;
op3val:0xe08000ff; valaddr_reg:x3; val_offset:54057*0 + 3*140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54057*0 + 3*140*FLEN/8, x4, x1, x2)

inst_18020:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x34d220 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3537d3 and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb4d220; op2val:0xc03537d3;
op3val:0xe08001ff; valaddr_reg:x3; val_offset:54060*0 + 3*140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54060*0 + 3*140*FLEN/8, x4, x1, x2)

inst_18021:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x34d220 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3537d3 and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb4d220; op2val:0xc03537d3;
op3val:0xe08003ff; valaddr_reg:x3; val_offset:54063*0 + 3*140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54063*0 + 3*140*FLEN/8, x4, x1, x2)

inst_18022:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x34d220 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3537d3 and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb4d220; op2val:0xc03537d3;
op3val:0xe08007ff; valaddr_reg:x3; val_offset:54066*0 + 3*140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54066*0 + 3*140*FLEN/8, x4, x1, x2)

inst_18023:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x34d220 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3537d3 and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb4d220; op2val:0xc03537d3;
op3val:0xe0800fff; valaddr_reg:x3; val_offset:54069*0 + 3*140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54069*0 + 3*140*FLEN/8, x4, x1, x2)

inst_18024:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x34d220 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3537d3 and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb4d220; op2val:0xc03537d3;
op3val:0xe0801fff; valaddr_reg:x3; val_offset:54072*0 + 3*140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54072*0 + 3*140*FLEN/8, x4, x1, x2)

inst_18025:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x34d220 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3537d3 and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb4d220; op2val:0xc03537d3;
op3val:0xe0803fff; valaddr_reg:x3; val_offset:54075*0 + 3*140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54075*0 + 3*140*FLEN/8, x4, x1, x2)

inst_18026:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x34d220 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3537d3 and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb4d220; op2val:0xc03537d3;
op3val:0xe0807fff; valaddr_reg:x3; val_offset:54078*0 + 3*140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54078*0 + 3*140*FLEN/8, x4, x1, x2)

inst_18027:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x34d220 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3537d3 and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb4d220; op2val:0xc03537d3;
op3val:0xe080ffff; valaddr_reg:x3; val_offset:54081*0 + 3*140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54081*0 + 3*140*FLEN/8, x4, x1, x2)

inst_18028:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x34d220 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3537d3 and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb4d220; op2val:0xc03537d3;
op3val:0xe081ffff; valaddr_reg:x3; val_offset:54084*0 + 3*140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54084*0 + 3*140*FLEN/8, x4, x1, x2)

inst_18029:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x34d220 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3537d3 and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb4d220; op2val:0xc03537d3;
op3val:0xe083ffff; valaddr_reg:x3; val_offset:54087*0 + 3*140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54087*0 + 3*140*FLEN/8, x4, x1, x2)

inst_18030:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x34d220 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3537d3 and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb4d220; op2val:0xc03537d3;
op3val:0xe087ffff; valaddr_reg:x3; val_offset:54090*0 + 3*140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54090*0 + 3*140*FLEN/8, x4, x1, x2)

inst_18031:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x34d220 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3537d3 and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb4d220; op2val:0xc03537d3;
op3val:0xe08fffff; valaddr_reg:x3; val_offset:54093*0 + 3*140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54093*0 + 3*140*FLEN/8, x4, x1, x2)

inst_18032:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x34d220 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3537d3 and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb4d220; op2val:0xc03537d3;
op3val:0xe09fffff; valaddr_reg:x3; val_offset:54096*0 + 3*140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54096*0 + 3*140*FLEN/8, x4, x1, x2)

inst_18033:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x34d220 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3537d3 and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb4d220; op2val:0xc03537d3;
op3val:0xe0bfffff; valaddr_reg:x3; val_offset:54099*0 + 3*140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54099*0 + 3*140*FLEN/8, x4, x1, x2)

inst_18034:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x34d220 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3537d3 and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb4d220; op2val:0xc03537d3;
op3val:0xe0c00000; valaddr_reg:x3; val_offset:54102*0 + 3*140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54102*0 + 3*140*FLEN/8, x4, x1, x2)

inst_18035:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x34d220 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3537d3 and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb4d220; op2val:0xc03537d3;
op3val:0xe0e00000; valaddr_reg:x3; val_offset:54105*0 + 3*140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54105*0 + 3*140*FLEN/8, x4, x1, x2)

inst_18036:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x34d220 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3537d3 and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb4d220; op2val:0xc03537d3;
op3val:0xe0f00000; valaddr_reg:x3; val_offset:54108*0 + 3*140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54108*0 + 3*140*FLEN/8, x4, x1, x2)

inst_18037:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x34d220 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3537d3 and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb4d220; op2val:0xc03537d3;
op3val:0xe0f80000; valaddr_reg:x3; val_offset:54111*0 + 3*140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54111*0 + 3*140*FLEN/8, x4, x1, x2)

inst_18038:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x34d220 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3537d3 and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb4d220; op2val:0xc03537d3;
op3val:0xe0fc0000; valaddr_reg:x3; val_offset:54114*0 + 3*140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54114*0 + 3*140*FLEN/8, x4, x1, x2)

inst_18039:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x34d220 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3537d3 and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb4d220; op2val:0xc03537d3;
op3val:0xe0fe0000; valaddr_reg:x3; val_offset:54117*0 + 3*140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54117*0 + 3*140*FLEN/8, x4, x1, x2)

inst_18040:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x34d220 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3537d3 and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb4d220; op2val:0xc03537d3;
op3val:0xe0ff0000; valaddr_reg:x3; val_offset:54120*0 + 3*140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54120*0 + 3*140*FLEN/8, x4, x1, x2)

inst_18041:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x34d220 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3537d3 and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb4d220; op2val:0xc03537d3;
op3val:0xe0ff8000; valaddr_reg:x3; val_offset:54123*0 + 3*140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54123*0 + 3*140*FLEN/8, x4, x1, x2)

inst_18042:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x34d220 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3537d3 and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb4d220; op2val:0xc03537d3;
op3val:0xe0ffc000; valaddr_reg:x3; val_offset:54126*0 + 3*140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54126*0 + 3*140*FLEN/8, x4, x1, x2)

inst_18043:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x34d220 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3537d3 and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb4d220; op2val:0xc03537d3;
op3val:0xe0ffe000; valaddr_reg:x3; val_offset:54129*0 + 3*140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54129*0 + 3*140*FLEN/8, x4, x1, x2)

inst_18044:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x34d220 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3537d3 and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb4d220; op2val:0xc03537d3;
op3val:0xe0fff000; valaddr_reg:x3; val_offset:54132*0 + 3*140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54132*0 + 3*140*FLEN/8, x4, x1, x2)

inst_18045:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x34d220 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3537d3 and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb4d220; op2val:0xc03537d3;
op3val:0xe0fff800; valaddr_reg:x3; val_offset:54135*0 + 3*140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54135*0 + 3*140*FLEN/8, x4, x1, x2)

inst_18046:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x34d220 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3537d3 and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb4d220; op2val:0xc03537d3;
op3val:0xe0fffc00; valaddr_reg:x3; val_offset:54138*0 + 3*140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54138*0 + 3*140*FLEN/8, x4, x1, x2)

inst_18047:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x34d220 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3537d3 and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb4d220; op2val:0xc03537d3;
op3val:0xe0fffe00; valaddr_reg:x3; val_offset:54141*0 + 3*140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54141*0 + 3*140*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2125686396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209846271,32,FLEN)
NAN_BOXED(2125686396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209977343,32,FLEN)
NAN_BOXED(2125686396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(210239487,32,FLEN)
NAN_BOXED(2125686396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(210763775,32,FLEN)
NAN_BOXED(2125686396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(211812351,32,FLEN)
NAN_BOXED(2125686396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(213909503,32,FLEN)
NAN_BOXED(2125686396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(213909504,32,FLEN)
NAN_BOXED(2125686396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(216006656,32,FLEN)
NAN_BOXED(2125686396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(217055232,32,FLEN)
NAN_BOXED(2125686396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(217579520,32,FLEN)
NAN_BOXED(2125686396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(217841664,32,FLEN)
NAN_BOXED(2125686396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(217972736,32,FLEN)
NAN_BOXED(2125686396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218038272,32,FLEN)
NAN_BOXED(2125686396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218071040,32,FLEN)
NAN_BOXED(2125686396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218087424,32,FLEN)
NAN_BOXED(2125686396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218095616,32,FLEN)
NAN_BOXED(2125686396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218099712,32,FLEN)
NAN_BOXED(2125686396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218101760,32,FLEN)
NAN_BOXED(2125686396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218102784,32,FLEN)
NAN_BOXED(2125686396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218103296,32,FLEN)
NAN_BOXED(2125686396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218103552,32,FLEN)
NAN_BOXED(2125686396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218103680,32,FLEN)
NAN_BOXED(2125686396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218103744,32,FLEN)
NAN_BOXED(2125686396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218103776,32,FLEN)
NAN_BOXED(2125686396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218103792,32,FLEN)
NAN_BOXED(2125686396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218103800,32,FLEN)
NAN_BOXED(2125686396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218103804,32,FLEN)
NAN_BOXED(2125686396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218103806,32,FLEN)
NAN_BOXED(2125686396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218103807,32,FLEN)
NAN_BOXED(2125762592,32,FLEN)
NAN_BOXED(5946632,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2125762592,32,FLEN)
NAN_BOXED(5946632,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2125762592,32,FLEN)
NAN_BOXED(5946632,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2125762592,32,FLEN)
NAN_BOXED(5946632,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2125762592,32,FLEN)
NAN_BOXED(5946632,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2125762592,32,FLEN)
NAN_BOXED(5946632,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2125762592,32,FLEN)
NAN_BOXED(5946632,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2125762592,32,FLEN)
NAN_BOXED(5946632,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2125762592,32,FLEN)
NAN_BOXED(5946632,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2125762592,32,FLEN)
NAN_BOXED(5946632,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2125762592,32,FLEN)
NAN_BOXED(5946632,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2125762592,32,FLEN)
NAN_BOXED(5946632,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2125762592,32,FLEN)
NAN_BOXED(5946632,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2125762592,32,FLEN)
NAN_BOXED(5946632,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2125762592,32,FLEN)
NAN_BOXED(5946632,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2125762592,32,FLEN)
NAN_BOXED(5946632,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2125762592,32,FLEN)
NAN_BOXED(5946632,32,FLEN)
NAN_BOXED(1124073472,32,FLEN)
NAN_BOXED(2125762592,32,FLEN)
NAN_BOXED(5946632,32,FLEN)
NAN_BOXED(1124073473,32,FLEN)
NAN_BOXED(2125762592,32,FLEN)
NAN_BOXED(5946632,32,FLEN)
NAN_BOXED(1124073475,32,FLEN)
NAN_BOXED(2125762592,32,FLEN)
NAN_BOXED(5946632,32,FLEN)
NAN_BOXED(1124073479,32,FLEN)
NAN_BOXED(2125762592,32,FLEN)
NAN_BOXED(5946632,32,FLEN)
NAN_BOXED(1124073487,32,FLEN)
NAN_BOXED(2125762592,32,FLEN)
NAN_BOXED(5946632,32,FLEN)
NAN_BOXED(1124073503,32,FLEN)
NAN_BOXED(2125762592,32,FLEN)
NAN_BOXED(5946632,32,FLEN)
NAN_BOXED(1124073535,32,FLEN)
NAN_BOXED(2125762592,32,FLEN)
NAN_BOXED(5946632,32,FLEN)
NAN_BOXED(1124073599,32,FLEN)
NAN_BOXED(2125762592,32,FLEN)
NAN_BOXED(5946632,32,FLEN)
NAN_BOXED(1124073727,32,FLEN)
NAN_BOXED(2125762592,32,FLEN)
NAN_BOXED(5946632,32,FLEN)
NAN_BOXED(1124073983,32,FLEN)
NAN_BOXED(2125762592,32,FLEN)
NAN_BOXED(5946632,32,FLEN)
NAN_BOXED(1124074495,32,FLEN)
NAN_BOXED(2125762592,32,FLEN)
NAN_BOXED(5946632,32,FLEN)
NAN_BOXED(1124075519,32,FLEN)
NAN_BOXED(2125762592,32,FLEN)
NAN_BOXED(5946632,32,FLEN)
NAN_BOXED(1124077567,32,FLEN)
NAN_BOXED(2125762592,32,FLEN)
NAN_BOXED(5946632,32,FLEN)
NAN_BOXED(1124081663,32,FLEN)
NAN_BOXED(2125762592,32,FLEN)
NAN_BOXED(5946632,32,FLEN)
NAN_BOXED(1124089855,32,FLEN)
NAN_BOXED(2125762592,32,FLEN)
NAN_BOXED(5946632,32,FLEN)
NAN_BOXED(1124106239,32,FLEN)
NAN_BOXED(2125762592,32,FLEN)
NAN_BOXED(5946632,32,FLEN)
NAN_BOXED(1124139007,32,FLEN)
NAN_BOXED(2125762592,32,FLEN)
NAN_BOXED(5946632,32,FLEN)
NAN_BOXED(1124204543,32,FLEN)
NAN_BOXED(2125762592,32,FLEN)
NAN_BOXED(5946632,32,FLEN)
NAN_BOXED(1124335615,32,FLEN)
NAN_BOXED(2125762592,32,FLEN)
NAN_BOXED(5946632,32,FLEN)
NAN_BOXED(1124597759,32,FLEN)
NAN_BOXED(2125762592,32,FLEN)
NAN_BOXED(5946632,32,FLEN)
NAN_BOXED(1125122047,32,FLEN)
NAN_BOXED(2125762592,32,FLEN)
NAN_BOXED(5946632,32,FLEN)
NAN_BOXED(1126170623,32,FLEN)
NAN_BOXED(2125762592,32,FLEN)
NAN_BOXED(5946632,32,FLEN)
NAN_BOXED(1128267775,32,FLEN)
NAN_BOXED(2125762592,32,FLEN)
NAN_BOXED(5946632,32,FLEN)
NAN_BOXED(1128267776,32,FLEN)
NAN_BOXED(2125762592,32,FLEN)
NAN_BOXED(5946632,32,FLEN)
NAN_BOXED(1130364928,32,FLEN)
NAN_BOXED(2125762592,32,FLEN)
NAN_BOXED(5946632,32,FLEN)
NAN_BOXED(1131413504,32,FLEN)
NAN_BOXED(2125762592,32,FLEN)
NAN_BOXED(5946632,32,FLEN)
NAN_BOXED(1131937792,32,FLEN)
NAN_BOXED(2125762592,32,FLEN)
NAN_BOXED(5946632,32,FLEN)
NAN_BOXED(1132199936,32,FLEN)
NAN_BOXED(2125762592,32,FLEN)
NAN_BOXED(5946632,32,FLEN)
NAN_BOXED(1132331008,32,FLEN)
NAN_BOXED(2125762592,32,FLEN)
NAN_BOXED(5946632,32,FLEN)
NAN_BOXED(1132396544,32,FLEN)
NAN_BOXED(2125762592,32,FLEN)
NAN_BOXED(5946632,32,FLEN)
NAN_BOXED(1132429312,32,FLEN)
NAN_BOXED(2125762592,32,FLEN)
NAN_BOXED(5946632,32,FLEN)
NAN_BOXED(1132445696,32,FLEN)
NAN_BOXED(2125762592,32,FLEN)
NAN_BOXED(5946632,32,FLEN)
NAN_BOXED(1132453888,32,FLEN)
NAN_BOXED(2125762592,32,FLEN)
NAN_BOXED(5946632,32,FLEN)
NAN_BOXED(1132457984,32,FLEN)
NAN_BOXED(2125762592,32,FLEN)
NAN_BOXED(5946632,32,FLEN)
NAN_BOXED(1132460032,32,FLEN)
NAN_BOXED(2125762592,32,FLEN)
NAN_BOXED(5946632,32,FLEN)
NAN_BOXED(1132461056,32,FLEN)
NAN_BOXED(2125762592,32,FLEN)
NAN_BOXED(5946632,32,FLEN)
NAN_BOXED(1132461568,32,FLEN)
NAN_BOXED(2125762592,32,FLEN)
NAN_BOXED(5946632,32,FLEN)
NAN_BOXED(1132461824,32,FLEN)
NAN_BOXED(2125762592,32,FLEN)
NAN_BOXED(5946632,32,FLEN)
NAN_BOXED(1132461952,32,FLEN)
NAN_BOXED(2125762592,32,FLEN)
NAN_BOXED(5946632,32,FLEN)
NAN_BOXED(1132462016,32,FLEN)
NAN_BOXED(2125762592,32,FLEN)
NAN_BOXED(5946632,32,FLEN)
NAN_BOXED(1132462048,32,FLEN)
NAN_BOXED(2125762592,32,FLEN)
NAN_BOXED(5946632,32,FLEN)
NAN_BOXED(1132462064,32,FLEN)
NAN_BOXED(2125762592,32,FLEN)
NAN_BOXED(5946632,32,FLEN)
NAN_BOXED(1132462072,32,FLEN)
NAN_BOXED(2125762592,32,FLEN)
NAN_BOXED(5946632,32,FLEN)
NAN_BOXED(1132462076,32,FLEN)
NAN_BOXED(2125762592,32,FLEN)
NAN_BOXED(5946632,32,FLEN)
NAN_BOXED(1132462078,32,FLEN)
NAN_BOXED(2125762592,32,FLEN)
NAN_BOXED(5946632,32,FLEN)
NAN_BOXED(1132462079,32,FLEN)
NAN_BOXED(2125779488,32,FLEN)
NAN_BOXED(3224713171,32,FLEN)
NAN_BOXED(3766484992,32,FLEN)
NAN_BOXED(2125779488,32,FLEN)
NAN_BOXED(3224713171,32,FLEN)
NAN_BOXED(3766484993,32,FLEN)
NAN_BOXED(2125779488,32,FLEN)
NAN_BOXED(3224713171,32,FLEN)
NAN_BOXED(3766484995,32,FLEN)
NAN_BOXED(2125779488,32,FLEN)
NAN_BOXED(3224713171,32,FLEN)
NAN_BOXED(3766484999,32,FLEN)
NAN_BOXED(2125779488,32,FLEN)
NAN_BOXED(3224713171,32,FLEN)
NAN_BOXED(3766485007,32,FLEN)
NAN_BOXED(2125779488,32,FLEN)
NAN_BOXED(3224713171,32,FLEN)
NAN_BOXED(3766485023,32,FLEN)
NAN_BOXED(2125779488,32,FLEN)
NAN_BOXED(3224713171,32,FLEN)
NAN_BOXED(3766485055,32,FLEN)
NAN_BOXED(2125779488,32,FLEN)
NAN_BOXED(3224713171,32,FLEN)
NAN_BOXED(3766485119,32,FLEN)
NAN_BOXED(2125779488,32,FLEN)
NAN_BOXED(3224713171,32,FLEN)
NAN_BOXED(3766485247,32,FLEN)
NAN_BOXED(2125779488,32,FLEN)
NAN_BOXED(3224713171,32,FLEN)
NAN_BOXED(3766485503,32,FLEN)
NAN_BOXED(2125779488,32,FLEN)
NAN_BOXED(3224713171,32,FLEN)
NAN_BOXED(3766486015,32,FLEN)
NAN_BOXED(2125779488,32,FLEN)
NAN_BOXED(3224713171,32,FLEN)
NAN_BOXED(3766487039,32,FLEN)
NAN_BOXED(2125779488,32,FLEN)
NAN_BOXED(3224713171,32,FLEN)
NAN_BOXED(3766489087,32,FLEN)
NAN_BOXED(2125779488,32,FLEN)
NAN_BOXED(3224713171,32,FLEN)
NAN_BOXED(3766493183,32,FLEN)
NAN_BOXED(2125779488,32,FLEN)
NAN_BOXED(3224713171,32,FLEN)
NAN_BOXED(3766501375,32,FLEN)
NAN_BOXED(2125779488,32,FLEN)
NAN_BOXED(3224713171,32,FLEN)
NAN_BOXED(3766517759,32,FLEN)
NAN_BOXED(2125779488,32,FLEN)
NAN_BOXED(3224713171,32,FLEN)
NAN_BOXED(3766550527,32,FLEN)
NAN_BOXED(2125779488,32,FLEN)
NAN_BOXED(3224713171,32,FLEN)
NAN_BOXED(3766616063,32,FLEN)
NAN_BOXED(2125779488,32,FLEN)
NAN_BOXED(3224713171,32,FLEN)
NAN_BOXED(3766747135,32,FLEN)
NAN_BOXED(2125779488,32,FLEN)
NAN_BOXED(3224713171,32,FLEN)
NAN_BOXED(3767009279,32,FLEN)
NAN_BOXED(2125779488,32,FLEN)
NAN_BOXED(3224713171,32,FLEN)
NAN_BOXED(3767533567,32,FLEN)
NAN_BOXED(2125779488,32,FLEN)
NAN_BOXED(3224713171,32,FLEN)
NAN_BOXED(3768582143,32,FLEN)
NAN_BOXED(2125779488,32,FLEN)
NAN_BOXED(3224713171,32,FLEN)
NAN_BOXED(3770679295,32,FLEN)
NAN_BOXED(2125779488,32,FLEN)
NAN_BOXED(3224713171,32,FLEN)
NAN_BOXED(3770679296,32,FLEN)
NAN_BOXED(2125779488,32,FLEN)
NAN_BOXED(3224713171,32,FLEN)
NAN_BOXED(3772776448,32,FLEN)
NAN_BOXED(2125779488,32,FLEN)
NAN_BOXED(3224713171,32,FLEN)
NAN_BOXED(3773825024,32,FLEN)
NAN_BOXED(2125779488,32,FLEN)
NAN_BOXED(3224713171,32,FLEN)
NAN_BOXED(3774349312,32,FLEN)
NAN_BOXED(2125779488,32,FLEN)
NAN_BOXED(3224713171,32,FLEN)
NAN_BOXED(3774611456,32,FLEN)
NAN_BOXED(2125779488,32,FLEN)
NAN_BOXED(3224713171,32,FLEN)
NAN_BOXED(3774742528,32,FLEN)
NAN_BOXED(2125779488,32,FLEN)
NAN_BOXED(3224713171,32,FLEN)
NAN_BOXED(3774808064,32,FLEN)
NAN_BOXED(2125779488,32,FLEN)
NAN_BOXED(3224713171,32,FLEN)
NAN_BOXED(3774840832,32,FLEN)
NAN_BOXED(2125779488,32,FLEN)
NAN_BOXED(3224713171,32,FLEN)
NAN_BOXED(3774857216,32,FLEN)
NAN_BOXED(2125779488,32,FLEN)
NAN_BOXED(3224713171,32,FLEN)
NAN_BOXED(3774865408,32,FLEN)
NAN_BOXED(2125779488,32,FLEN)
NAN_BOXED(3224713171,32,FLEN)
NAN_BOXED(3774869504,32,FLEN)
NAN_BOXED(2125779488,32,FLEN)
NAN_BOXED(3224713171,32,FLEN)
NAN_BOXED(3774871552,32,FLEN)
NAN_BOXED(2125779488,32,FLEN)
NAN_BOXED(3224713171,32,FLEN)
NAN_BOXED(3774872576,32,FLEN)
NAN_BOXED(2125779488,32,FLEN)
NAN_BOXED(3224713171,32,FLEN)
NAN_BOXED(3774873088,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
