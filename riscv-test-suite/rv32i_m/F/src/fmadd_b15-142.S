
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:17:59 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_18048:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x34d220 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3537d3 and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb4d220; op2val:0xc03537d3;
op3val:0xe0ffff00; valaddr_reg:x3; val_offset:54144*0 + 3*141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54144*0 + 3*141*FLEN/8, x4, x1, x2)

inst_18049:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x34d220 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3537d3 and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb4d220; op2val:0xc03537d3;
op3val:0xe0ffff80; valaddr_reg:x3; val_offset:54147*0 + 3*141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54147*0 + 3*141*FLEN/8, x4, x1, x2)

inst_18050:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x34d220 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3537d3 and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb4d220; op2val:0xc03537d3;
op3val:0xe0ffffc0; valaddr_reg:x3; val_offset:54150*0 + 3*141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54150*0 + 3*141*FLEN/8, x4, x1, x2)

inst_18051:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x34d220 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3537d3 and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb4d220; op2val:0xc03537d3;
op3val:0xe0ffffe0; valaddr_reg:x3; val_offset:54153*0 + 3*141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54153*0 + 3*141*FLEN/8, x4, x1, x2)

inst_18052:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x34d220 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3537d3 and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb4d220; op2val:0xc03537d3;
op3val:0xe0fffff0; valaddr_reg:x3; val_offset:54156*0 + 3*141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54156*0 + 3*141*FLEN/8, x4, x1, x2)

inst_18053:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x34d220 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3537d3 and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb4d220; op2val:0xc03537d3;
op3val:0xe0fffff8; valaddr_reg:x3; val_offset:54159*0 + 3*141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54159*0 + 3*141*FLEN/8, x4, x1, x2)

inst_18054:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x34d220 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3537d3 and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb4d220; op2val:0xc03537d3;
op3val:0xe0fffffc; valaddr_reg:x3; val_offset:54162*0 + 3*141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54162*0 + 3*141*FLEN/8, x4, x1, x2)

inst_18055:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x34d220 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3537d3 and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb4d220; op2val:0xc03537d3;
op3val:0xe0fffffe; valaddr_reg:x3; val_offset:54165*0 + 3*141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54165*0 + 3*141*FLEN/8, x4, x1, x2)

inst_18056:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x34d220 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3537d3 and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb4d220; op2val:0xc03537d3;
op3val:0xe0ffffff; valaddr_reg:x3; val_offset:54168*0 + 3*141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54168*0 + 3*141*FLEN/8, x4, x1, x2)

inst_18057:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x34d220 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3537d3 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb4d220; op2val:0xc03537d3;
op3val:0xff000001; valaddr_reg:x3; val_offset:54171*0 + 3*141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54171*0 + 3*141*FLEN/8, x4, x1, x2)

inst_18058:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x34d220 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3537d3 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb4d220; op2val:0xc03537d3;
op3val:0xff000003; valaddr_reg:x3; val_offset:54174*0 + 3*141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54174*0 + 3*141*FLEN/8, x4, x1, x2)

inst_18059:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x34d220 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3537d3 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb4d220; op2val:0xc03537d3;
op3val:0xff000007; valaddr_reg:x3; val_offset:54177*0 + 3*141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54177*0 + 3*141*FLEN/8, x4, x1, x2)

inst_18060:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x34d220 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3537d3 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb4d220; op2val:0xc03537d3;
op3val:0xff199999; valaddr_reg:x3; val_offset:54180*0 + 3*141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54180*0 + 3*141*FLEN/8, x4, x1, x2)

inst_18061:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x34d220 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3537d3 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb4d220; op2val:0xc03537d3;
op3val:0xff249249; valaddr_reg:x3; val_offset:54183*0 + 3*141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54183*0 + 3*141*FLEN/8, x4, x1, x2)

inst_18062:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x34d220 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3537d3 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb4d220; op2val:0xc03537d3;
op3val:0xff333333; valaddr_reg:x3; val_offset:54186*0 + 3*141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54186*0 + 3*141*FLEN/8, x4, x1, x2)

inst_18063:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x34d220 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3537d3 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb4d220; op2val:0xc03537d3;
op3val:0xff36db6d; valaddr_reg:x3; val_offset:54189*0 + 3*141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54189*0 + 3*141*FLEN/8, x4, x1, x2)

inst_18064:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x34d220 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3537d3 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb4d220; op2val:0xc03537d3;
op3val:0xff3bbbbb; valaddr_reg:x3; val_offset:54192*0 + 3*141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54192*0 + 3*141*FLEN/8, x4, x1, x2)

inst_18065:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x34d220 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3537d3 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb4d220; op2val:0xc03537d3;
op3val:0xff444444; valaddr_reg:x3; val_offset:54195*0 + 3*141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54195*0 + 3*141*FLEN/8, x4, x1, x2)

inst_18066:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x34d220 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3537d3 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb4d220; op2val:0xc03537d3;
op3val:0xff4ccccc; valaddr_reg:x3; val_offset:54198*0 + 3*141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54198*0 + 3*141*FLEN/8, x4, x1, x2)

inst_18067:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x34d220 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3537d3 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb4d220; op2val:0xc03537d3;
op3val:0xff5b6db6; valaddr_reg:x3; val_offset:54201*0 + 3*141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54201*0 + 3*141*FLEN/8, x4, x1, x2)

inst_18068:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x34d220 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3537d3 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb4d220; op2val:0xc03537d3;
op3val:0xff666666; valaddr_reg:x3; val_offset:54204*0 + 3*141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54204*0 + 3*141*FLEN/8, x4, x1, x2)

inst_18069:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x34d220 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3537d3 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb4d220; op2val:0xc03537d3;
op3val:0xff6db6db; valaddr_reg:x3; val_offset:54207*0 + 3*141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54207*0 + 3*141*FLEN/8, x4, x1, x2)

inst_18070:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x34d220 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3537d3 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb4d220; op2val:0xc03537d3;
op3val:0xff7ffff8; valaddr_reg:x3; val_offset:54210*0 + 3*141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54210*0 + 3*141*FLEN/8, x4, x1, x2)

inst_18071:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x34d220 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3537d3 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb4d220; op2val:0xc03537d3;
op3val:0xff7ffffc; valaddr_reg:x3; val_offset:54213*0 + 3*141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54213*0 + 3*141*FLEN/8, x4, x1, x2)

inst_18072:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x34d220 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3537d3 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb4d220; op2val:0xc03537d3;
op3val:0xff7ffffe; valaddr_reg:x3; val_offset:54216*0 + 3*141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54216*0 + 3*141*FLEN/8, x4, x1, x2)

inst_18073:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x34d24a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb4d24a; op2val:0x0;
op3val:0x800001; valaddr_reg:x3; val_offset:54219*0 + 3*141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54219*0 + 3*141*FLEN/8, x4, x1, x2)

inst_18074:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x34d24a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb4d24a; op2val:0x0;
op3val:0x800003; valaddr_reg:x3; val_offset:54222*0 + 3*141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54222*0 + 3*141*FLEN/8, x4, x1, x2)

inst_18075:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x34d24a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb4d24a; op2val:0x0;
op3val:0x800007; valaddr_reg:x3; val_offset:54225*0 + 3*141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54225*0 + 3*141*FLEN/8, x4, x1, x2)

inst_18076:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x34d24a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb4d24a; op2val:0x0;
op3val:0x999999; valaddr_reg:x3; val_offset:54228*0 + 3*141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54228*0 + 3*141*FLEN/8, x4, x1, x2)

inst_18077:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x34d24a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb4d24a; op2val:0x0;
op3val:0xa49249; valaddr_reg:x3; val_offset:54231*0 + 3*141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54231*0 + 3*141*FLEN/8, x4, x1, x2)

inst_18078:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x34d24a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb4d24a; op2val:0x0;
op3val:0xb33333; valaddr_reg:x3; val_offset:54234*0 + 3*141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54234*0 + 3*141*FLEN/8, x4, x1, x2)

inst_18079:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x34d24a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb4d24a; op2val:0x0;
op3val:0xb6db6d; valaddr_reg:x3; val_offset:54237*0 + 3*141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54237*0 + 3*141*FLEN/8, x4, x1, x2)

inst_18080:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x34d24a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb4d24a; op2val:0x0;
op3val:0xbbbbbb; valaddr_reg:x3; val_offset:54240*0 + 3*141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54240*0 + 3*141*FLEN/8, x4, x1, x2)

inst_18081:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x34d24a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb4d24a; op2val:0x0;
op3val:0xc44444; valaddr_reg:x3; val_offset:54243*0 + 3*141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54243*0 + 3*141*FLEN/8, x4, x1, x2)

inst_18082:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x34d24a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb4d24a; op2val:0x0;
op3val:0xcccccc; valaddr_reg:x3; val_offset:54246*0 + 3*141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54246*0 + 3*141*FLEN/8, x4, x1, x2)

inst_18083:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x34d24a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb4d24a; op2val:0x0;
op3val:0xdb6db6; valaddr_reg:x3; val_offset:54249*0 + 3*141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54249*0 + 3*141*FLEN/8, x4, x1, x2)

inst_18084:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x34d24a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb4d24a; op2val:0x0;
op3val:0xe66666; valaddr_reg:x3; val_offset:54252*0 + 3*141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54252*0 + 3*141*FLEN/8, x4, x1, x2)

inst_18085:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x34d24a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb4d24a; op2val:0x0;
op3val:0xedb6db; valaddr_reg:x3; val_offset:54255*0 + 3*141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54255*0 + 3*141*FLEN/8, x4, x1, x2)

inst_18086:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x34d24a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb4d24a; op2val:0x0;
op3val:0xfffff8; valaddr_reg:x3; val_offset:54258*0 + 3*141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54258*0 + 3*141*FLEN/8, x4, x1, x2)

inst_18087:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x34d24a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb4d24a; op2val:0x0;
op3val:0xfffffc; valaddr_reg:x3; val_offset:54261*0 + 3*141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54261*0 + 3*141*FLEN/8, x4, x1, x2)

inst_18088:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x34d24a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb4d24a; op2val:0x0;
op3val:0xfffffe; valaddr_reg:x3; val_offset:54264*0 + 3*141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54264*0 + 3*141*FLEN/8, x4, x1, x2)

inst_18089:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x34d24a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb4d24a; op2val:0x0;
op3val:0x6000000; valaddr_reg:x3; val_offset:54267*0 + 3*141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54267*0 + 3*141*FLEN/8, x4, x1, x2)

inst_18090:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x34d24a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb4d24a; op2val:0x0;
op3val:0x6000001; valaddr_reg:x3; val_offset:54270*0 + 3*141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54270*0 + 3*141*FLEN/8, x4, x1, x2)

inst_18091:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x34d24a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb4d24a; op2val:0x0;
op3val:0x6000003; valaddr_reg:x3; val_offset:54273*0 + 3*141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54273*0 + 3*141*FLEN/8, x4, x1, x2)

inst_18092:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x34d24a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb4d24a; op2val:0x0;
op3val:0x6000007; valaddr_reg:x3; val_offset:54276*0 + 3*141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54276*0 + 3*141*FLEN/8, x4, x1, x2)

inst_18093:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x34d24a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb4d24a; op2val:0x0;
op3val:0x600000f; valaddr_reg:x3; val_offset:54279*0 + 3*141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54279*0 + 3*141*FLEN/8, x4, x1, x2)

inst_18094:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x34d24a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb4d24a; op2val:0x0;
op3val:0x600001f; valaddr_reg:x3; val_offset:54282*0 + 3*141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54282*0 + 3*141*FLEN/8, x4, x1, x2)

inst_18095:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x34d24a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb4d24a; op2val:0x0;
op3val:0x600003f; valaddr_reg:x3; val_offset:54285*0 + 3*141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54285*0 + 3*141*FLEN/8, x4, x1, x2)

inst_18096:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x34d24a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb4d24a; op2val:0x0;
op3val:0x600007f; valaddr_reg:x3; val_offset:54288*0 + 3*141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54288*0 + 3*141*FLEN/8, x4, x1, x2)

inst_18097:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x34d24a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb4d24a; op2val:0x0;
op3val:0x60000ff; valaddr_reg:x3; val_offset:54291*0 + 3*141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54291*0 + 3*141*FLEN/8, x4, x1, x2)

inst_18098:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x34d24a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb4d24a; op2val:0x0;
op3val:0x60001ff; valaddr_reg:x3; val_offset:54294*0 + 3*141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54294*0 + 3*141*FLEN/8, x4, x1, x2)

inst_18099:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x34d24a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb4d24a; op2val:0x0;
op3val:0x60003ff; valaddr_reg:x3; val_offset:54297*0 + 3*141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54297*0 + 3*141*FLEN/8, x4, x1, x2)

inst_18100:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x34d24a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb4d24a; op2val:0x0;
op3val:0x60007ff; valaddr_reg:x3; val_offset:54300*0 + 3*141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54300*0 + 3*141*FLEN/8, x4, x1, x2)

inst_18101:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x34d24a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb4d24a; op2val:0x0;
op3val:0x6000fff; valaddr_reg:x3; val_offset:54303*0 + 3*141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54303*0 + 3*141*FLEN/8, x4, x1, x2)

inst_18102:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x34d24a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb4d24a; op2val:0x0;
op3val:0x6001fff; valaddr_reg:x3; val_offset:54306*0 + 3*141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54306*0 + 3*141*FLEN/8, x4, x1, x2)

inst_18103:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x34d24a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb4d24a; op2val:0x0;
op3val:0x6003fff; valaddr_reg:x3; val_offset:54309*0 + 3*141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54309*0 + 3*141*FLEN/8, x4, x1, x2)

inst_18104:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x34d24a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb4d24a; op2val:0x0;
op3val:0x6007fff; valaddr_reg:x3; val_offset:54312*0 + 3*141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54312*0 + 3*141*FLEN/8, x4, x1, x2)

inst_18105:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x34d24a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb4d24a; op2val:0x0;
op3val:0x600ffff; valaddr_reg:x3; val_offset:54315*0 + 3*141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54315*0 + 3*141*FLEN/8, x4, x1, x2)

inst_18106:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x34d24a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb4d24a; op2val:0x0;
op3val:0x601ffff; valaddr_reg:x3; val_offset:54318*0 + 3*141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54318*0 + 3*141*FLEN/8, x4, x1, x2)

inst_18107:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x34d24a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb4d24a; op2val:0x0;
op3val:0x603ffff; valaddr_reg:x3; val_offset:54321*0 + 3*141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54321*0 + 3*141*FLEN/8, x4, x1, x2)

inst_18108:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x34d24a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb4d24a; op2val:0x0;
op3val:0x607ffff; valaddr_reg:x3; val_offset:54324*0 + 3*141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54324*0 + 3*141*FLEN/8, x4, x1, x2)

inst_18109:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x34d24a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb4d24a; op2val:0x0;
op3val:0x60fffff; valaddr_reg:x3; val_offset:54327*0 + 3*141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54327*0 + 3*141*FLEN/8, x4, x1, x2)

inst_18110:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x34d24a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb4d24a; op2val:0x0;
op3val:0x61fffff; valaddr_reg:x3; val_offset:54330*0 + 3*141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54330*0 + 3*141*FLEN/8, x4, x1, x2)

inst_18111:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x34d24a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb4d24a; op2val:0x0;
op3val:0x63fffff; valaddr_reg:x3; val_offset:54333*0 + 3*141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54333*0 + 3*141*FLEN/8, x4, x1, x2)

inst_18112:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x34d24a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb4d24a; op2val:0x0;
op3val:0x6400000; valaddr_reg:x3; val_offset:54336*0 + 3*141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54336*0 + 3*141*FLEN/8, x4, x1, x2)

inst_18113:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x34d24a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb4d24a; op2val:0x0;
op3val:0x6600000; valaddr_reg:x3; val_offset:54339*0 + 3*141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54339*0 + 3*141*FLEN/8, x4, x1, x2)

inst_18114:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x34d24a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb4d24a; op2val:0x0;
op3val:0x6700000; valaddr_reg:x3; val_offset:54342*0 + 3*141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54342*0 + 3*141*FLEN/8, x4, x1, x2)

inst_18115:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x34d24a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb4d24a; op2val:0x0;
op3val:0x6780000; valaddr_reg:x3; val_offset:54345*0 + 3*141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54345*0 + 3*141*FLEN/8, x4, x1, x2)

inst_18116:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x34d24a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb4d24a; op2val:0x0;
op3val:0x67c0000; valaddr_reg:x3; val_offset:54348*0 + 3*141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54348*0 + 3*141*FLEN/8, x4, x1, x2)

inst_18117:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x34d24a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb4d24a; op2val:0x0;
op3val:0x67e0000; valaddr_reg:x3; val_offset:54351*0 + 3*141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54351*0 + 3*141*FLEN/8, x4, x1, x2)

inst_18118:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x34d24a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb4d24a; op2val:0x0;
op3val:0x67f0000; valaddr_reg:x3; val_offset:54354*0 + 3*141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54354*0 + 3*141*FLEN/8, x4, x1, x2)

inst_18119:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x34d24a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb4d24a; op2val:0x0;
op3val:0x67f8000; valaddr_reg:x3; val_offset:54357*0 + 3*141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54357*0 + 3*141*FLEN/8, x4, x1, x2)

inst_18120:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x34d24a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb4d24a; op2val:0x0;
op3val:0x67fc000; valaddr_reg:x3; val_offset:54360*0 + 3*141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54360*0 + 3*141*FLEN/8, x4, x1, x2)

inst_18121:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x34d24a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb4d24a; op2val:0x0;
op3val:0x67fe000; valaddr_reg:x3; val_offset:54363*0 + 3*141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54363*0 + 3*141*FLEN/8, x4, x1, x2)

inst_18122:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x34d24a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb4d24a; op2val:0x0;
op3val:0x67ff000; valaddr_reg:x3; val_offset:54366*0 + 3*141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54366*0 + 3*141*FLEN/8, x4, x1, x2)

inst_18123:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x34d24a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb4d24a; op2val:0x0;
op3val:0x67ff800; valaddr_reg:x3; val_offset:54369*0 + 3*141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54369*0 + 3*141*FLEN/8, x4, x1, x2)

inst_18124:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x34d24a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb4d24a; op2val:0x0;
op3val:0x67ffc00; valaddr_reg:x3; val_offset:54372*0 + 3*141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54372*0 + 3*141*FLEN/8, x4, x1, x2)

inst_18125:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x34d24a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb4d24a; op2val:0x0;
op3val:0x67ffe00; valaddr_reg:x3; val_offset:54375*0 + 3*141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54375*0 + 3*141*FLEN/8, x4, x1, x2)

inst_18126:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x34d24a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb4d24a; op2val:0x0;
op3val:0x67fff00; valaddr_reg:x3; val_offset:54378*0 + 3*141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54378*0 + 3*141*FLEN/8, x4, x1, x2)

inst_18127:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x34d24a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb4d24a; op2val:0x0;
op3val:0x67fff80; valaddr_reg:x3; val_offset:54381*0 + 3*141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54381*0 + 3*141*FLEN/8, x4, x1, x2)

inst_18128:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x34d24a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb4d24a; op2val:0x0;
op3val:0x67fffc0; valaddr_reg:x3; val_offset:54384*0 + 3*141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54384*0 + 3*141*FLEN/8, x4, x1, x2)

inst_18129:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x34d24a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb4d24a; op2val:0x0;
op3val:0x67fffe0; valaddr_reg:x3; val_offset:54387*0 + 3*141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54387*0 + 3*141*FLEN/8, x4, x1, x2)

inst_18130:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x34d24a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb4d24a; op2val:0x0;
op3val:0x67ffff0; valaddr_reg:x3; val_offset:54390*0 + 3*141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54390*0 + 3*141*FLEN/8, x4, x1, x2)

inst_18131:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x34d24a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb4d24a; op2val:0x0;
op3val:0x67ffff8; valaddr_reg:x3; val_offset:54393*0 + 3*141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54393*0 + 3*141*FLEN/8, x4, x1, x2)

inst_18132:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x34d24a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb4d24a; op2val:0x0;
op3val:0x67ffffc; valaddr_reg:x3; val_offset:54396*0 + 3*141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54396*0 + 3*141*FLEN/8, x4, x1, x2)

inst_18133:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x34d24a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb4d24a; op2val:0x0;
op3val:0x67ffffe; valaddr_reg:x3; val_offset:54399*0 + 3*141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54399*0 + 3*141*FLEN/8, x4, x1, x2)

inst_18134:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x34d24a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb4d24a; op2val:0x0;
op3val:0x67fffff; valaddr_reg:x3; val_offset:54402*0 + 3*141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54402*0 + 3*141*FLEN/8, x4, x1, x2)

inst_18135:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3507ef and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3501f5 and fs3 == 1 and fe3 == 0xde and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb507ef; op2val:0xc03501f5;
op3val:0xef000000; valaddr_reg:x3; val_offset:54405*0 + 3*141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54405*0 + 3*141*FLEN/8, x4, x1, x2)

inst_18136:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3507ef and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3501f5 and fs3 == 1 and fe3 == 0xde and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb507ef; op2val:0xc03501f5;
op3val:0xef000001; valaddr_reg:x3; val_offset:54408*0 + 3*141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54408*0 + 3*141*FLEN/8, x4, x1, x2)

inst_18137:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3507ef and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3501f5 and fs3 == 1 and fe3 == 0xde and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb507ef; op2val:0xc03501f5;
op3val:0xef000003; valaddr_reg:x3; val_offset:54411*0 + 3*141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54411*0 + 3*141*FLEN/8, x4, x1, x2)

inst_18138:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3507ef and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3501f5 and fs3 == 1 and fe3 == 0xde and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb507ef; op2val:0xc03501f5;
op3val:0xef000007; valaddr_reg:x3; val_offset:54414*0 + 3*141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54414*0 + 3*141*FLEN/8, x4, x1, x2)

inst_18139:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3507ef and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3501f5 and fs3 == 1 and fe3 == 0xde and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb507ef; op2val:0xc03501f5;
op3val:0xef00000f; valaddr_reg:x3; val_offset:54417*0 + 3*141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54417*0 + 3*141*FLEN/8, x4, x1, x2)

inst_18140:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3507ef and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3501f5 and fs3 == 1 and fe3 == 0xde and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb507ef; op2val:0xc03501f5;
op3val:0xef00001f; valaddr_reg:x3; val_offset:54420*0 + 3*141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54420*0 + 3*141*FLEN/8, x4, x1, x2)

inst_18141:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3507ef and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3501f5 and fs3 == 1 and fe3 == 0xde and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb507ef; op2val:0xc03501f5;
op3val:0xef00003f; valaddr_reg:x3; val_offset:54423*0 + 3*141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54423*0 + 3*141*FLEN/8, x4, x1, x2)

inst_18142:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3507ef and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3501f5 and fs3 == 1 and fe3 == 0xde and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb507ef; op2val:0xc03501f5;
op3val:0xef00007f; valaddr_reg:x3; val_offset:54426*0 + 3*141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54426*0 + 3*141*FLEN/8, x4, x1, x2)

inst_18143:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3507ef and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3501f5 and fs3 == 1 and fe3 == 0xde and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb507ef; op2val:0xc03501f5;
op3val:0xef0000ff; valaddr_reg:x3; val_offset:54429*0 + 3*141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54429*0 + 3*141*FLEN/8, x4, x1, x2)

inst_18144:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3507ef and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3501f5 and fs3 == 1 and fe3 == 0xde and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb507ef; op2val:0xc03501f5;
op3val:0xef0001ff; valaddr_reg:x3; val_offset:54432*0 + 3*141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54432*0 + 3*141*FLEN/8, x4, x1, x2)

inst_18145:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3507ef and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3501f5 and fs3 == 1 and fe3 == 0xde and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb507ef; op2val:0xc03501f5;
op3val:0xef0003ff; valaddr_reg:x3; val_offset:54435*0 + 3*141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54435*0 + 3*141*FLEN/8, x4, x1, x2)

inst_18146:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3507ef and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3501f5 and fs3 == 1 and fe3 == 0xde and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb507ef; op2val:0xc03501f5;
op3val:0xef0007ff; valaddr_reg:x3; val_offset:54438*0 + 3*141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54438*0 + 3*141*FLEN/8, x4, x1, x2)

inst_18147:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3507ef and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3501f5 and fs3 == 1 and fe3 == 0xde and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb507ef; op2val:0xc03501f5;
op3val:0xef000fff; valaddr_reg:x3; val_offset:54441*0 + 3*141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54441*0 + 3*141*FLEN/8, x4, x1, x2)

inst_18148:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3507ef and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3501f5 and fs3 == 1 and fe3 == 0xde and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb507ef; op2val:0xc03501f5;
op3val:0xef001fff; valaddr_reg:x3; val_offset:54444*0 + 3*141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54444*0 + 3*141*FLEN/8, x4, x1, x2)

inst_18149:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3507ef and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3501f5 and fs3 == 1 and fe3 == 0xde and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb507ef; op2val:0xc03501f5;
op3val:0xef003fff; valaddr_reg:x3; val_offset:54447*0 + 3*141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54447*0 + 3*141*FLEN/8, x4, x1, x2)

inst_18150:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3507ef and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3501f5 and fs3 == 1 and fe3 == 0xde and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb507ef; op2val:0xc03501f5;
op3val:0xef007fff; valaddr_reg:x3; val_offset:54450*0 + 3*141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54450*0 + 3*141*FLEN/8, x4, x1, x2)

inst_18151:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3507ef and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3501f5 and fs3 == 1 and fe3 == 0xde and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb507ef; op2val:0xc03501f5;
op3val:0xef00ffff; valaddr_reg:x3; val_offset:54453*0 + 3*141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54453*0 + 3*141*FLEN/8, x4, x1, x2)

inst_18152:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3507ef and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3501f5 and fs3 == 1 and fe3 == 0xde and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb507ef; op2val:0xc03501f5;
op3val:0xef01ffff; valaddr_reg:x3; val_offset:54456*0 + 3*141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54456*0 + 3*141*FLEN/8, x4, x1, x2)

inst_18153:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3507ef and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3501f5 and fs3 == 1 and fe3 == 0xde and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb507ef; op2val:0xc03501f5;
op3val:0xef03ffff; valaddr_reg:x3; val_offset:54459*0 + 3*141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54459*0 + 3*141*FLEN/8, x4, x1, x2)

inst_18154:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3507ef and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3501f5 and fs3 == 1 and fe3 == 0xde and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb507ef; op2val:0xc03501f5;
op3val:0xef07ffff; valaddr_reg:x3; val_offset:54462*0 + 3*141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54462*0 + 3*141*FLEN/8, x4, x1, x2)

inst_18155:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3507ef and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3501f5 and fs3 == 1 and fe3 == 0xde and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb507ef; op2val:0xc03501f5;
op3val:0xef0fffff; valaddr_reg:x3; val_offset:54465*0 + 3*141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54465*0 + 3*141*FLEN/8, x4, x1, x2)

inst_18156:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3507ef and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3501f5 and fs3 == 1 and fe3 == 0xde and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb507ef; op2val:0xc03501f5;
op3val:0xef1fffff; valaddr_reg:x3; val_offset:54468*0 + 3*141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54468*0 + 3*141*FLEN/8, x4, x1, x2)

inst_18157:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3507ef and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3501f5 and fs3 == 1 and fe3 == 0xde and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb507ef; op2val:0xc03501f5;
op3val:0xef3fffff; valaddr_reg:x3; val_offset:54471*0 + 3*141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54471*0 + 3*141*FLEN/8, x4, x1, x2)

inst_18158:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3507ef and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3501f5 and fs3 == 1 and fe3 == 0xde and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb507ef; op2val:0xc03501f5;
op3val:0xef400000; valaddr_reg:x3; val_offset:54474*0 + 3*141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54474*0 + 3*141*FLEN/8, x4, x1, x2)

inst_18159:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3507ef and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3501f5 and fs3 == 1 and fe3 == 0xde and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb507ef; op2val:0xc03501f5;
op3val:0xef600000; valaddr_reg:x3; val_offset:54477*0 + 3*141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54477*0 + 3*141*FLEN/8, x4, x1, x2)

inst_18160:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3507ef and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3501f5 and fs3 == 1 and fe3 == 0xde and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb507ef; op2val:0xc03501f5;
op3val:0xef700000; valaddr_reg:x3; val_offset:54480*0 + 3*141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54480*0 + 3*141*FLEN/8, x4, x1, x2)

inst_18161:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3507ef and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3501f5 and fs3 == 1 and fe3 == 0xde and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb507ef; op2val:0xc03501f5;
op3val:0xef780000; valaddr_reg:x3; val_offset:54483*0 + 3*141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54483*0 + 3*141*FLEN/8, x4, x1, x2)

inst_18162:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3507ef and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3501f5 and fs3 == 1 and fe3 == 0xde and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb507ef; op2val:0xc03501f5;
op3val:0xef7c0000; valaddr_reg:x3; val_offset:54486*0 + 3*141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54486*0 + 3*141*FLEN/8, x4, x1, x2)

inst_18163:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3507ef and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3501f5 and fs3 == 1 and fe3 == 0xde and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb507ef; op2val:0xc03501f5;
op3val:0xef7e0000; valaddr_reg:x3; val_offset:54489*0 + 3*141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54489*0 + 3*141*FLEN/8, x4, x1, x2)

inst_18164:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3507ef and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3501f5 and fs3 == 1 and fe3 == 0xde and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb507ef; op2val:0xc03501f5;
op3val:0xef7f0000; valaddr_reg:x3; val_offset:54492*0 + 3*141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54492*0 + 3*141*FLEN/8, x4, x1, x2)

inst_18165:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3507ef and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3501f5 and fs3 == 1 and fe3 == 0xde and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb507ef; op2val:0xc03501f5;
op3val:0xef7f8000; valaddr_reg:x3; val_offset:54495*0 + 3*141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54495*0 + 3*141*FLEN/8, x4, x1, x2)

inst_18166:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3507ef and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3501f5 and fs3 == 1 and fe3 == 0xde and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb507ef; op2val:0xc03501f5;
op3val:0xef7fc000; valaddr_reg:x3; val_offset:54498*0 + 3*141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54498*0 + 3*141*FLEN/8, x4, x1, x2)

inst_18167:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3507ef and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3501f5 and fs3 == 1 and fe3 == 0xde and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb507ef; op2val:0xc03501f5;
op3val:0xef7fe000; valaddr_reg:x3; val_offset:54501*0 + 3*141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54501*0 + 3*141*FLEN/8, x4, x1, x2)

inst_18168:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3507ef and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3501f5 and fs3 == 1 and fe3 == 0xde and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb507ef; op2val:0xc03501f5;
op3val:0xef7ff000; valaddr_reg:x3; val_offset:54504*0 + 3*141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54504*0 + 3*141*FLEN/8, x4, x1, x2)

inst_18169:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3507ef and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3501f5 and fs3 == 1 and fe3 == 0xde and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb507ef; op2val:0xc03501f5;
op3val:0xef7ff800; valaddr_reg:x3; val_offset:54507*0 + 3*141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54507*0 + 3*141*FLEN/8, x4, x1, x2)

inst_18170:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3507ef and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3501f5 and fs3 == 1 and fe3 == 0xde and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb507ef; op2val:0xc03501f5;
op3val:0xef7ffc00; valaddr_reg:x3; val_offset:54510*0 + 3*141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54510*0 + 3*141*FLEN/8, x4, x1, x2)

inst_18171:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3507ef and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3501f5 and fs3 == 1 and fe3 == 0xde and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb507ef; op2val:0xc03501f5;
op3val:0xef7ffe00; valaddr_reg:x3; val_offset:54513*0 + 3*141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54513*0 + 3*141*FLEN/8, x4, x1, x2)

inst_18172:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3507ef and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3501f5 and fs3 == 1 and fe3 == 0xde and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb507ef; op2val:0xc03501f5;
op3val:0xef7fff00; valaddr_reg:x3; val_offset:54516*0 + 3*141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54516*0 + 3*141*FLEN/8, x4, x1, x2)

inst_18173:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3507ef and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3501f5 and fs3 == 1 and fe3 == 0xde and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb507ef; op2val:0xc03501f5;
op3val:0xef7fff80; valaddr_reg:x3; val_offset:54519*0 + 3*141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54519*0 + 3*141*FLEN/8, x4, x1, x2)

inst_18174:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3507ef and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3501f5 and fs3 == 1 and fe3 == 0xde and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb507ef; op2val:0xc03501f5;
op3val:0xef7fffc0; valaddr_reg:x3; val_offset:54522*0 + 3*141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54522*0 + 3*141*FLEN/8, x4, x1, x2)

inst_18175:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3507ef and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3501f5 and fs3 == 1 and fe3 == 0xde and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb507ef; op2val:0xc03501f5;
op3val:0xef7fffe0; valaddr_reg:x3; val_offset:54525*0 + 3*141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54525*0 + 3*141*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2125779488,32,FLEN)
NAN_BOXED(3224713171,32,FLEN)
NAN_BOXED(3774873344,32,FLEN)
NAN_BOXED(2125779488,32,FLEN)
NAN_BOXED(3224713171,32,FLEN)
NAN_BOXED(3774873472,32,FLEN)
NAN_BOXED(2125779488,32,FLEN)
NAN_BOXED(3224713171,32,FLEN)
NAN_BOXED(3774873536,32,FLEN)
NAN_BOXED(2125779488,32,FLEN)
NAN_BOXED(3224713171,32,FLEN)
NAN_BOXED(3774873568,32,FLEN)
NAN_BOXED(2125779488,32,FLEN)
NAN_BOXED(3224713171,32,FLEN)
NAN_BOXED(3774873584,32,FLEN)
NAN_BOXED(2125779488,32,FLEN)
NAN_BOXED(3224713171,32,FLEN)
NAN_BOXED(3774873592,32,FLEN)
NAN_BOXED(2125779488,32,FLEN)
NAN_BOXED(3224713171,32,FLEN)
NAN_BOXED(3774873596,32,FLEN)
NAN_BOXED(2125779488,32,FLEN)
NAN_BOXED(3224713171,32,FLEN)
NAN_BOXED(3774873598,32,FLEN)
NAN_BOXED(2125779488,32,FLEN)
NAN_BOXED(3224713171,32,FLEN)
NAN_BOXED(3774873599,32,FLEN)
NAN_BOXED(2125779488,32,FLEN)
NAN_BOXED(3224713171,32,FLEN)
NAN_BOXED(4278190081,32,FLEN)
NAN_BOXED(2125779488,32,FLEN)
NAN_BOXED(3224713171,32,FLEN)
NAN_BOXED(4278190083,32,FLEN)
NAN_BOXED(2125779488,32,FLEN)
NAN_BOXED(3224713171,32,FLEN)
NAN_BOXED(4278190087,32,FLEN)
NAN_BOXED(2125779488,32,FLEN)
NAN_BOXED(3224713171,32,FLEN)
NAN_BOXED(4279867801,32,FLEN)
NAN_BOXED(2125779488,32,FLEN)
NAN_BOXED(3224713171,32,FLEN)
NAN_BOXED(4280586825,32,FLEN)
NAN_BOXED(2125779488,32,FLEN)
NAN_BOXED(3224713171,32,FLEN)
NAN_BOXED(4281545523,32,FLEN)
NAN_BOXED(2125779488,32,FLEN)
NAN_BOXED(3224713171,32,FLEN)
NAN_BOXED(4281785197,32,FLEN)
NAN_BOXED(2125779488,32,FLEN)
NAN_BOXED(3224713171,32,FLEN)
NAN_BOXED(4282104763,32,FLEN)
NAN_BOXED(2125779488,32,FLEN)
NAN_BOXED(3224713171,32,FLEN)
NAN_BOXED(4282664004,32,FLEN)
NAN_BOXED(2125779488,32,FLEN)
NAN_BOXED(3224713171,32,FLEN)
NAN_BOXED(4283223244,32,FLEN)
NAN_BOXED(2125779488,32,FLEN)
NAN_BOXED(3224713171,32,FLEN)
NAN_BOXED(4284181942,32,FLEN)
NAN_BOXED(2125779488,32,FLEN)
NAN_BOXED(3224713171,32,FLEN)
NAN_BOXED(4284900966,32,FLEN)
NAN_BOXED(2125779488,32,FLEN)
NAN_BOXED(3224713171,32,FLEN)
NAN_BOXED(4285380315,32,FLEN)
NAN_BOXED(2125779488,32,FLEN)
NAN_BOXED(3224713171,32,FLEN)
NAN_BOXED(4286578680,32,FLEN)
NAN_BOXED(2125779488,32,FLEN)
NAN_BOXED(3224713171,32,FLEN)
NAN_BOXED(4286578684,32,FLEN)
NAN_BOXED(2125779488,32,FLEN)
NAN_BOXED(3224713171,32,FLEN)
NAN_BOXED(4286578686,32,FLEN)
NAN_BOXED(2125779530,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(2125779530,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388611,32,FLEN)
NAN_BOXED(2125779530,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388615,32,FLEN)
NAN_BOXED(2125779530,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(10066329,32,FLEN)
NAN_BOXED(2125779530,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(10785353,32,FLEN)
NAN_BOXED(2125779530,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(11744051,32,FLEN)
NAN_BOXED(2125779530,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(11983725,32,FLEN)
NAN_BOXED(2125779530,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(12303291,32,FLEN)
NAN_BOXED(2125779530,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(12862532,32,FLEN)
NAN_BOXED(2125779530,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(13421772,32,FLEN)
NAN_BOXED(2125779530,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(14380470,32,FLEN)
NAN_BOXED(2125779530,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(15099494,32,FLEN)
NAN_BOXED(2125779530,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(15578843,32,FLEN)
NAN_BOXED(2125779530,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777208,32,FLEN)
NAN_BOXED(2125779530,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777212,32,FLEN)
NAN_BOXED(2125779530,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777214,32,FLEN)
NAN_BOXED(2125779530,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100663296,32,FLEN)
NAN_BOXED(2125779530,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100663297,32,FLEN)
NAN_BOXED(2125779530,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100663299,32,FLEN)
NAN_BOXED(2125779530,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100663303,32,FLEN)
NAN_BOXED(2125779530,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100663311,32,FLEN)
NAN_BOXED(2125779530,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100663327,32,FLEN)
NAN_BOXED(2125779530,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100663359,32,FLEN)
NAN_BOXED(2125779530,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100663423,32,FLEN)
NAN_BOXED(2125779530,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100663551,32,FLEN)
NAN_BOXED(2125779530,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100663807,32,FLEN)
NAN_BOXED(2125779530,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100664319,32,FLEN)
NAN_BOXED(2125779530,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100665343,32,FLEN)
NAN_BOXED(2125779530,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100667391,32,FLEN)
NAN_BOXED(2125779530,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100671487,32,FLEN)
NAN_BOXED(2125779530,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100679679,32,FLEN)
NAN_BOXED(2125779530,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100696063,32,FLEN)
NAN_BOXED(2125779530,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100728831,32,FLEN)
NAN_BOXED(2125779530,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100794367,32,FLEN)
NAN_BOXED(2125779530,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100925439,32,FLEN)
NAN_BOXED(2125779530,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(101187583,32,FLEN)
NAN_BOXED(2125779530,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(101711871,32,FLEN)
NAN_BOXED(2125779530,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(102760447,32,FLEN)
NAN_BOXED(2125779530,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(104857599,32,FLEN)
NAN_BOXED(2125779530,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(104857600,32,FLEN)
NAN_BOXED(2125779530,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(106954752,32,FLEN)
NAN_BOXED(2125779530,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(108003328,32,FLEN)
NAN_BOXED(2125779530,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(108527616,32,FLEN)
NAN_BOXED(2125779530,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(108789760,32,FLEN)
NAN_BOXED(2125779530,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(108920832,32,FLEN)
NAN_BOXED(2125779530,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(108986368,32,FLEN)
NAN_BOXED(2125779530,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109019136,32,FLEN)
NAN_BOXED(2125779530,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109035520,32,FLEN)
NAN_BOXED(2125779530,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109043712,32,FLEN)
NAN_BOXED(2125779530,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109047808,32,FLEN)
NAN_BOXED(2125779530,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109049856,32,FLEN)
NAN_BOXED(2125779530,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109050880,32,FLEN)
NAN_BOXED(2125779530,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109051392,32,FLEN)
NAN_BOXED(2125779530,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109051648,32,FLEN)
NAN_BOXED(2125779530,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109051776,32,FLEN)
NAN_BOXED(2125779530,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109051840,32,FLEN)
NAN_BOXED(2125779530,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109051872,32,FLEN)
NAN_BOXED(2125779530,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109051888,32,FLEN)
NAN_BOXED(2125779530,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109051896,32,FLEN)
NAN_BOXED(2125779530,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109051900,32,FLEN)
NAN_BOXED(2125779530,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109051902,32,FLEN)
NAN_BOXED(2125779530,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109051903,32,FLEN)
NAN_BOXED(2125793263,32,FLEN)
NAN_BOXED(3224699381,32,FLEN)
NAN_BOXED(4009754624,32,FLEN)
NAN_BOXED(2125793263,32,FLEN)
NAN_BOXED(3224699381,32,FLEN)
NAN_BOXED(4009754625,32,FLEN)
NAN_BOXED(2125793263,32,FLEN)
NAN_BOXED(3224699381,32,FLEN)
NAN_BOXED(4009754627,32,FLEN)
NAN_BOXED(2125793263,32,FLEN)
NAN_BOXED(3224699381,32,FLEN)
NAN_BOXED(4009754631,32,FLEN)
NAN_BOXED(2125793263,32,FLEN)
NAN_BOXED(3224699381,32,FLEN)
NAN_BOXED(4009754639,32,FLEN)
NAN_BOXED(2125793263,32,FLEN)
NAN_BOXED(3224699381,32,FLEN)
NAN_BOXED(4009754655,32,FLEN)
NAN_BOXED(2125793263,32,FLEN)
NAN_BOXED(3224699381,32,FLEN)
NAN_BOXED(4009754687,32,FLEN)
NAN_BOXED(2125793263,32,FLEN)
NAN_BOXED(3224699381,32,FLEN)
NAN_BOXED(4009754751,32,FLEN)
NAN_BOXED(2125793263,32,FLEN)
NAN_BOXED(3224699381,32,FLEN)
NAN_BOXED(4009754879,32,FLEN)
NAN_BOXED(2125793263,32,FLEN)
NAN_BOXED(3224699381,32,FLEN)
NAN_BOXED(4009755135,32,FLEN)
NAN_BOXED(2125793263,32,FLEN)
NAN_BOXED(3224699381,32,FLEN)
NAN_BOXED(4009755647,32,FLEN)
NAN_BOXED(2125793263,32,FLEN)
NAN_BOXED(3224699381,32,FLEN)
NAN_BOXED(4009756671,32,FLEN)
NAN_BOXED(2125793263,32,FLEN)
NAN_BOXED(3224699381,32,FLEN)
NAN_BOXED(4009758719,32,FLEN)
NAN_BOXED(2125793263,32,FLEN)
NAN_BOXED(3224699381,32,FLEN)
NAN_BOXED(4009762815,32,FLEN)
NAN_BOXED(2125793263,32,FLEN)
NAN_BOXED(3224699381,32,FLEN)
NAN_BOXED(4009771007,32,FLEN)
NAN_BOXED(2125793263,32,FLEN)
NAN_BOXED(3224699381,32,FLEN)
NAN_BOXED(4009787391,32,FLEN)
NAN_BOXED(2125793263,32,FLEN)
NAN_BOXED(3224699381,32,FLEN)
NAN_BOXED(4009820159,32,FLEN)
NAN_BOXED(2125793263,32,FLEN)
NAN_BOXED(3224699381,32,FLEN)
NAN_BOXED(4009885695,32,FLEN)
NAN_BOXED(2125793263,32,FLEN)
NAN_BOXED(3224699381,32,FLEN)
NAN_BOXED(4010016767,32,FLEN)
NAN_BOXED(2125793263,32,FLEN)
NAN_BOXED(3224699381,32,FLEN)
NAN_BOXED(4010278911,32,FLEN)
NAN_BOXED(2125793263,32,FLEN)
NAN_BOXED(3224699381,32,FLEN)
NAN_BOXED(4010803199,32,FLEN)
NAN_BOXED(2125793263,32,FLEN)
NAN_BOXED(3224699381,32,FLEN)
NAN_BOXED(4011851775,32,FLEN)
NAN_BOXED(2125793263,32,FLEN)
NAN_BOXED(3224699381,32,FLEN)
NAN_BOXED(4013948927,32,FLEN)
NAN_BOXED(2125793263,32,FLEN)
NAN_BOXED(3224699381,32,FLEN)
NAN_BOXED(4013948928,32,FLEN)
NAN_BOXED(2125793263,32,FLEN)
NAN_BOXED(3224699381,32,FLEN)
NAN_BOXED(4016046080,32,FLEN)
NAN_BOXED(2125793263,32,FLEN)
NAN_BOXED(3224699381,32,FLEN)
NAN_BOXED(4017094656,32,FLEN)
NAN_BOXED(2125793263,32,FLEN)
NAN_BOXED(3224699381,32,FLEN)
NAN_BOXED(4017618944,32,FLEN)
NAN_BOXED(2125793263,32,FLEN)
NAN_BOXED(3224699381,32,FLEN)
NAN_BOXED(4017881088,32,FLEN)
NAN_BOXED(2125793263,32,FLEN)
NAN_BOXED(3224699381,32,FLEN)
NAN_BOXED(4018012160,32,FLEN)
NAN_BOXED(2125793263,32,FLEN)
NAN_BOXED(3224699381,32,FLEN)
NAN_BOXED(4018077696,32,FLEN)
NAN_BOXED(2125793263,32,FLEN)
NAN_BOXED(3224699381,32,FLEN)
NAN_BOXED(4018110464,32,FLEN)
NAN_BOXED(2125793263,32,FLEN)
NAN_BOXED(3224699381,32,FLEN)
NAN_BOXED(4018126848,32,FLEN)
NAN_BOXED(2125793263,32,FLEN)
NAN_BOXED(3224699381,32,FLEN)
NAN_BOXED(4018135040,32,FLEN)
NAN_BOXED(2125793263,32,FLEN)
NAN_BOXED(3224699381,32,FLEN)
NAN_BOXED(4018139136,32,FLEN)
NAN_BOXED(2125793263,32,FLEN)
NAN_BOXED(3224699381,32,FLEN)
NAN_BOXED(4018141184,32,FLEN)
NAN_BOXED(2125793263,32,FLEN)
NAN_BOXED(3224699381,32,FLEN)
NAN_BOXED(4018142208,32,FLEN)
NAN_BOXED(2125793263,32,FLEN)
NAN_BOXED(3224699381,32,FLEN)
NAN_BOXED(4018142720,32,FLEN)
NAN_BOXED(2125793263,32,FLEN)
NAN_BOXED(3224699381,32,FLEN)
NAN_BOXED(4018142976,32,FLEN)
NAN_BOXED(2125793263,32,FLEN)
NAN_BOXED(3224699381,32,FLEN)
NAN_BOXED(4018143104,32,FLEN)
NAN_BOXED(2125793263,32,FLEN)
NAN_BOXED(3224699381,32,FLEN)
NAN_BOXED(4018143168,32,FLEN)
NAN_BOXED(2125793263,32,FLEN)
NAN_BOXED(3224699381,32,FLEN)
NAN_BOXED(4018143200,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
