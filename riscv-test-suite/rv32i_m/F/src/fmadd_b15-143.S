
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:17:59 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_18176:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3507ef and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3501f5 and fs3 == 1 and fe3 == 0xde and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb507ef; op2val:0xc03501f5;
op3val:0xef7ffff0; valaddr_reg:x3; val_offset:54528*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54528*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18177:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3507ef and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3501f5 and fs3 == 1 and fe3 == 0xde and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb507ef; op2val:0xc03501f5;
op3val:0xef7ffff8; valaddr_reg:x3; val_offset:54531*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54531*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18178:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3507ef and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3501f5 and fs3 == 1 and fe3 == 0xde and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb507ef; op2val:0xc03501f5;
op3val:0xef7ffffc; valaddr_reg:x3; val_offset:54534*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54534*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18179:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3507ef and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3501f5 and fs3 == 1 and fe3 == 0xde and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb507ef; op2val:0xc03501f5;
op3val:0xef7ffffe; valaddr_reg:x3; val_offset:54537*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54537*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18180:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3507ef and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3501f5 and fs3 == 1 and fe3 == 0xde and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb507ef; op2val:0xc03501f5;
op3val:0xef7fffff; valaddr_reg:x3; val_offset:54540*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54540*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18181:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3507ef and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3501f5 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb507ef; op2val:0xc03501f5;
op3val:0xff000001; valaddr_reg:x3; val_offset:54543*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54543*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18182:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3507ef and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3501f5 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb507ef; op2val:0xc03501f5;
op3val:0xff000003; valaddr_reg:x3; val_offset:54546*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54546*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18183:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3507ef and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3501f5 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb507ef; op2val:0xc03501f5;
op3val:0xff000007; valaddr_reg:x3; val_offset:54549*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54549*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18184:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3507ef and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3501f5 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb507ef; op2val:0xc03501f5;
op3val:0xff199999; valaddr_reg:x3; val_offset:54552*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54552*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18185:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3507ef and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3501f5 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb507ef; op2val:0xc03501f5;
op3val:0xff249249; valaddr_reg:x3; val_offset:54555*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54555*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18186:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3507ef and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3501f5 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb507ef; op2val:0xc03501f5;
op3val:0xff333333; valaddr_reg:x3; val_offset:54558*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54558*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18187:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3507ef and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3501f5 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb507ef; op2val:0xc03501f5;
op3val:0xff36db6d; valaddr_reg:x3; val_offset:54561*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54561*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18188:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3507ef and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3501f5 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb507ef; op2val:0xc03501f5;
op3val:0xff3bbbbb; valaddr_reg:x3; val_offset:54564*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54564*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18189:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3507ef and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3501f5 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb507ef; op2val:0xc03501f5;
op3val:0xff444444; valaddr_reg:x3; val_offset:54567*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54567*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18190:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3507ef and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3501f5 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb507ef; op2val:0xc03501f5;
op3val:0xff4ccccc; valaddr_reg:x3; val_offset:54570*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54570*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18191:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3507ef and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3501f5 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb507ef; op2val:0xc03501f5;
op3val:0xff5b6db6; valaddr_reg:x3; val_offset:54573*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54573*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18192:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3507ef and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3501f5 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb507ef; op2val:0xc03501f5;
op3val:0xff666666; valaddr_reg:x3; val_offset:54576*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54576*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18193:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3507ef and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3501f5 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb507ef; op2val:0xc03501f5;
op3val:0xff6db6db; valaddr_reg:x3; val_offset:54579*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54579*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18194:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3507ef and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3501f5 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb507ef; op2val:0xc03501f5;
op3val:0xff7ffff8; valaddr_reg:x3; val_offset:54582*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54582*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18195:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3507ef and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3501f5 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb507ef; op2val:0xc03501f5;
op3val:0xff7ffffc; valaddr_reg:x3; val_offset:54585*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54585*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18196:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3507ef and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3501f5 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb507ef; op2val:0xc03501f5;
op3val:0xff7ffffe; valaddr_reg:x3; val_offset:54588*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54588*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18197:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x36048d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb6048d; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:54591*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54591*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18198:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x36048d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb6048d; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:54594*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54594*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18199:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x36048d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb6048d; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:54597*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54597*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18200:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x36048d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb6048d; op2val:0x0;
op3val:0x199999; valaddr_reg:x3; val_offset:54600*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54600*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18201:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x36048d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb6048d; op2val:0x0;
op3val:0x249249; valaddr_reg:x3; val_offset:54603*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54603*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18202:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x36048d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb6048d; op2val:0x0;
op3val:0x333333; valaddr_reg:x3; val_offset:54606*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54606*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18203:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x36048d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb6048d; op2val:0x0;
op3val:0x36db6d; valaddr_reg:x3; val_offset:54609*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54609*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18204:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x36048d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb6048d; op2val:0x0;
op3val:0x3bbbbb; valaddr_reg:x3; val_offset:54612*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54612*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18205:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x36048d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb6048d; op2val:0x0;
op3val:0x444444; valaddr_reg:x3; val_offset:54615*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54615*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18206:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x36048d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb6048d; op2val:0x0;
op3val:0x4ccccc; valaddr_reg:x3; val_offset:54618*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54618*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18207:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x36048d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb6048d; op2val:0x0;
op3val:0x5b6db6; valaddr_reg:x3; val_offset:54621*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54621*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18208:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x36048d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb6048d; op2val:0x0;
op3val:0x666666; valaddr_reg:x3; val_offset:54624*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54624*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18209:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x36048d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb6048d; op2val:0x0;
op3val:0x6db6db; valaddr_reg:x3; val_offset:54627*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54627*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18210:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x36048d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb6048d; op2val:0x0;
op3val:0x7ffff8; valaddr_reg:x3; val_offset:54630*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54630*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18211:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x36048d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb6048d; op2val:0x0;
op3val:0x7ffffc; valaddr_reg:x3; val_offset:54633*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54633*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18212:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x36048d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb6048d; op2val:0x0;
op3val:0x7ffffe; valaddr_reg:x3; val_offset:54636*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54636*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18213:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x36048d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb6048d; op2val:0x0;
op3val:0x7800000; valaddr_reg:x3; val_offset:54639*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54639*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18214:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x36048d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb6048d; op2val:0x0;
op3val:0x7800001; valaddr_reg:x3; val_offset:54642*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54642*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18215:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x36048d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb6048d; op2val:0x0;
op3val:0x7800003; valaddr_reg:x3; val_offset:54645*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54645*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18216:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x36048d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb6048d; op2val:0x0;
op3val:0x7800007; valaddr_reg:x3; val_offset:54648*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54648*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18217:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x36048d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb6048d; op2val:0x0;
op3val:0x780000f; valaddr_reg:x3; val_offset:54651*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54651*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18218:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x36048d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb6048d; op2val:0x0;
op3val:0x780001f; valaddr_reg:x3; val_offset:54654*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54654*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18219:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x36048d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb6048d; op2val:0x0;
op3val:0x780003f; valaddr_reg:x3; val_offset:54657*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54657*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18220:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x36048d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb6048d; op2val:0x0;
op3val:0x780007f; valaddr_reg:x3; val_offset:54660*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54660*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18221:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x36048d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb6048d; op2val:0x0;
op3val:0x78000ff; valaddr_reg:x3; val_offset:54663*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54663*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18222:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x36048d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb6048d; op2val:0x0;
op3val:0x78001ff; valaddr_reg:x3; val_offset:54666*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54666*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18223:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x36048d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb6048d; op2val:0x0;
op3val:0x78003ff; valaddr_reg:x3; val_offset:54669*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54669*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18224:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x36048d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb6048d; op2val:0x0;
op3val:0x78007ff; valaddr_reg:x3; val_offset:54672*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54672*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18225:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x36048d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb6048d; op2val:0x0;
op3val:0x7800fff; valaddr_reg:x3; val_offset:54675*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54675*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18226:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x36048d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb6048d; op2val:0x0;
op3val:0x7801fff; valaddr_reg:x3; val_offset:54678*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54678*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18227:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x36048d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb6048d; op2val:0x0;
op3val:0x7803fff; valaddr_reg:x3; val_offset:54681*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54681*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18228:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x36048d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb6048d; op2val:0x0;
op3val:0x7807fff; valaddr_reg:x3; val_offset:54684*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54684*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18229:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x36048d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb6048d; op2val:0x0;
op3val:0x780ffff; valaddr_reg:x3; val_offset:54687*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54687*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18230:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x36048d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb6048d; op2val:0x0;
op3val:0x781ffff; valaddr_reg:x3; val_offset:54690*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54690*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18231:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x36048d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb6048d; op2val:0x0;
op3val:0x783ffff; valaddr_reg:x3; val_offset:54693*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54693*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18232:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x36048d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb6048d; op2val:0x0;
op3val:0x787ffff; valaddr_reg:x3; val_offset:54696*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54696*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18233:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x36048d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb6048d; op2val:0x0;
op3val:0x78fffff; valaddr_reg:x3; val_offset:54699*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54699*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18234:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x36048d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb6048d; op2val:0x0;
op3val:0x79fffff; valaddr_reg:x3; val_offset:54702*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54702*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18235:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x36048d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb6048d; op2val:0x0;
op3val:0x7bfffff; valaddr_reg:x3; val_offset:54705*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54705*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18236:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x36048d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb6048d; op2val:0x0;
op3val:0x7c00000; valaddr_reg:x3; val_offset:54708*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54708*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18237:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x36048d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb6048d; op2val:0x0;
op3val:0x7e00000; valaddr_reg:x3; val_offset:54711*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54711*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18238:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x36048d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb6048d; op2val:0x0;
op3val:0x7f00000; valaddr_reg:x3; val_offset:54714*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54714*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18239:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x36048d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb6048d; op2val:0x0;
op3val:0x7f80000; valaddr_reg:x3; val_offset:54717*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54717*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18240:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x36048d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb6048d; op2val:0x0;
op3val:0x7fc0000; valaddr_reg:x3; val_offset:54720*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54720*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18241:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x36048d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb6048d; op2val:0x0;
op3val:0x7fe0000; valaddr_reg:x3; val_offset:54723*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54723*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18242:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x36048d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb6048d; op2val:0x0;
op3val:0x7ff0000; valaddr_reg:x3; val_offset:54726*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54726*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18243:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x36048d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb6048d; op2val:0x0;
op3val:0x7ff8000; valaddr_reg:x3; val_offset:54729*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54729*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18244:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x36048d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb6048d; op2val:0x0;
op3val:0x7ffc000; valaddr_reg:x3; val_offset:54732*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54732*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18245:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x36048d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb6048d; op2val:0x0;
op3val:0x7ffe000; valaddr_reg:x3; val_offset:54735*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54735*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18246:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x36048d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb6048d; op2val:0x0;
op3val:0x7fff000; valaddr_reg:x3; val_offset:54738*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54738*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18247:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x36048d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb6048d; op2val:0x0;
op3val:0x7fff800; valaddr_reg:x3; val_offset:54741*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54741*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18248:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x36048d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb6048d; op2val:0x0;
op3val:0x7fffc00; valaddr_reg:x3; val_offset:54744*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54744*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18249:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x36048d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb6048d; op2val:0x0;
op3val:0x7fffe00; valaddr_reg:x3; val_offset:54747*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54747*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18250:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x36048d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb6048d; op2val:0x0;
op3val:0x7ffff00; valaddr_reg:x3; val_offset:54750*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54750*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18251:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x36048d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb6048d; op2val:0x0;
op3val:0x7ffff80; valaddr_reg:x3; val_offset:54753*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54753*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18252:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x36048d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb6048d; op2val:0x0;
op3val:0x7ffffc0; valaddr_reg:x3; val_offset:54756*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54756*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18253:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x36048d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb6048d; op2val:0x0;
op3val:0x7ffffe0; valaddr_reg:x3; val_offset:54759*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54759*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18254:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x36048d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb6048d; op2val:0x0;
op3val:0x7fffff0; valaddr_reg:x3; val_offset:54762*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54762*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18255:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x36048d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb6048d; op2val:0x0;
op3val:0x7fffff8; valaddr_reg:x3; val_offset:54765*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54765*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18256:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x36048d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb6048d; op2val:0x0;
op3val:0x7fffffc; valaddr_reg:x3; val_offset:54768*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54768*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18257:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x36048d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb6048d; op2val:0x0;
op3val:0x7fffffe; valaddr_reg:x3; val_offset:54771*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54771*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18258:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x36048d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb6048d; op2val:0x0;
op3val:0x7ffffff; valaddr_reg:x3; val_offset:54774*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54774*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18259:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x36a1eb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x59b5d0 and fs3 == 1 and fe3 == 0x79 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb6a1eb; op2val:0x8059b5d0;
op3val:0xbc800000; valaddr_reg:x3; val_offset:54777*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54777*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18260:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x36a1eb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x59b5d0 and fs3 == 1 and fe3 == 0x79 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb6a1eb; op2val:0x8059b5d0;
op3val:0xbc800001; valaddr_reg:x3; val_offset:54780*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54780*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18261:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x36a1eb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x59b5d0 and fs3 == 1 and fe3 == 0x79 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb6a1eb; op2val:0x8059b5d0;
op3val:0xbc800003; valaddr_reg:x3; val_offset:54783*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54783*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18262:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x36a1eb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x59b5d0 and fs3 == 1 and fe3 == 0x79 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb6a1eb; op2val:0x8059b5d0;
op3val:0xbc800007; valaddr_reg:x3; val_offset:54786*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54786*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18263:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x36a1eb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x59b5d0 and fs3 == 1 and fe3 == 0x79 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb6a1eb; op2val:0x8059b5d0;
op3val:0xbc80000f; valaddr_reg:x3; val_offset:54789*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54789*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18264:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x36a1eb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x59b5d0 and fs3 == 1 and fe3 == 0x79 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb6a1eb; op2val:0x8059b5d0;
op3val:0xbc80001f; valaddr_reg:x3; val_offset:54792*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54792*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18265:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x36a1eb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x59b5d0 and fs3 == 1 and fe3 == 0x79 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb6a1eb; op2val:0x8059b5d0;
op3val:0xbc80003f; valaddr_reg:x3; val_offset:54795*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54795*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18266:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x36a1eb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x59b5d0 and fs3 == 1 and fe3 == 0x79 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb6a1eb; op2val:0x8059b5d0;
op3val:0xbc80007f; valaddr_reg:x3; val_offset:54798*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54798*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18267:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x36a1eb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x59b5d0 and fs3 == 1 and fe3 == 0x79 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb6a1eb; op2val:0x8059b5d0;
op3val:0xbc8000ff; valaddr_reg:x3; val_offset:54801*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54801*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18268:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x36a1eb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x59b5d0 and fs3 == 1 and fe3 == 0x79 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb6a1eb; op2val:0x8059b5d0;
op3val:0xbc8001ff; valaddr_reg:x3; val_offset:54804*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54804*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18269:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x36a1eb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x59b5d0 and fs3 == 1 and fe3 == 0x79 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb6a1eb; op2val:0x8059b5d0;
op3val:0xbc8003ff; valaddr_reg:x3; val_offset:54807*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54807*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18270:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x36a1eb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x59b5d0 and fs3 == 1 and fe3 == 0x79 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb6a1eb; op2val:0x8059b5d0;
op3val:0xbc8007ff; valaddr_reg:x3; val_offset:54810*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54810*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18271:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x36a1eb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x59b5d0 and fs3 == 1 and fe3 == 0x79 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb6a1eb; op2val:0x8059b5d0;
op3val:0xbc800fff; valaddr_reg:x3; val_offset:54813*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54813*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18272:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x36a1eb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x59b5d0 and fs3 == 1 and fe3 == 0x79 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb6a1eb; op2val:0x8059b5d0;
op3val:0xbc801fff; valaddr_reg:x3; val_offset:54816*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54816*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18273:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x36a1eb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x59b5d0 and fs3 == 1 and fe3 == 0x79 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb6a1eb; op2val:0x8059b5d0;
op3val:0xbc803fff; valaddr_reg:x3; val_offset:54819*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54819*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18274:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x36a1eb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x59b5d0 and fs3 == 1 and fe3 == 0x79 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb6a1eb; op2val:0x8059b5d0;
op3val:0xbc807fff; valaddr_reg:x3; val_offset:54822*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54822*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18275:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x36a1eb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x59b5d0 and fs3 == 1 and fe3 == 0x79 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb6a1eb; op2val:0x8059b5d0;
op3val:0xbc80ffff; valaddr_reg:x3; val_offset:54825*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54825*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18276:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x36a1eb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x59b5d0 and fs3 == 1 and fe3 == 0x79 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb6a1eb; op2val:0x8059b5d0;
op3val:0xbc81ffff; valaddr_reg:x3; val_offset:54828*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54828*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18277:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x36a1eb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x59b5d0 and fs3 == 1 and fe3 == 0x79 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb6a1eb; op2val:0x8059b5d0;
op3val:0xbc83ffff; valaddr_reg:x3; val_offset:54831*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54831*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18278:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x36a1eb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x59b5d0 and fs3 == 1 and fe3 == 0x79 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb6a1eb; op2val:0x8059b5d0;
op3val:0xbc87ffff; valaddr_reg:x3; val_offset:54834*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54834*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18279:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x36a1eb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x59b5d0 and fs3 == 1 and fe3 == 0x79 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb6a1eb; op2val:0x8059b5d0;
op3val:0xbc8fffff; valaddr_reg:x3; val_offset:54837*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54837*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18280:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x36a1eb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x59b5d0 and fs3 == 1 and fe3 == 0x79 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb6a1eb; op2val:0x8059b5d0;
op3val:0xbc9fffff; valaddr_reg:x3; val_offset:54840*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54840*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18281:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x36a1eb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x59b5d0 and fs3 == 1 and fe3 == 0x79 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb6a1eb; op2val:0x8059b5d0;
op3val:0xbcbfffff; valaddr_reg:x3; val_offset:54843*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54843*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18282:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x36a1eb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x59b5d0 and fs3 == 1 and fe3 == 0x79 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb6a1eb; op2val:0x8059b5d0;
op3val:0xbcc00000; valaddr_reg:x3; val_offset:54846*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54846*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18283:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x36a1eb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x59b5d0 and fs3 == 1 and fe3 == 0x79 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb6a1eb; op2val:0x8059b5d0;
op3val:0xbce00000; valaddr_reg:x3; val_offset:54849*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54849*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18284:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x36a1eb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x59b5d0 and fs3 == 1 and fe3 == 0x79 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb6a1eb; op2val:0x8059b5d0;
op3val:0xbcf00000; valaddr_reg:x3; val_offset:54852*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54852*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18285:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x36a1eb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x59b5d0 and fs3 == 1 and fe3 == 0x79 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb6a1eb; op2val:0x8059b5d0;
op3val:0xbcf80000; valaddr_reg:x3; val_offset:54855*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54855*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18286:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x36a1eb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x59b5d0 and fs3 == 1 and fe3 == 0x79 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb6a1eb; op2val:0x8059b5d0;
op3val:0xbcfc0000; valaddr_reg:x3; val_offset:54858*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54858*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18287:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x36a1eb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x59b5d0 and fs3 == 1 and fe3 == 0x79 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb6a1eb; op2val:0x8059b5d0;
op3val:0xbcfe0000; valaddr_reg:x3; val_offset:54861*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54861*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18288:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x36a1eb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x59b5d0 and fs3 == 1 and fe3 == 0x79 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb6a1eb; op2val:0x8059b5d0;
op3val:0xbcff0000; valaddr_reg:x3; val_offset:54864*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54864*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18289:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x36a1eb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x59b5d0 and fs3 == 1 and fe3 == 0x79 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb6a1eb; op2val:0x8059b5d0;
op3val:0xbcff8000; valaddr_reg:x3; val_offset:54867*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54867*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18290:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x36a1eb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x59b5d0 and fs3 == 1 and fe3 == 0x79 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb6a1eb; op2val:0x8059b5d0;
op3val:0xbcffc000; valaddr_reg:x3; val_offset:54870*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54870*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18291:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x36a1eb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x59b5d0 and fs3 == 1 and fe3 == 0x79 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb6a1eb; op2val:0x8059b5d0;
op3val:0xbcffe000; valaddr_reg:x3; val_offset:54873*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54873*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18292:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x36a1eb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x59b5d0 and fs3 == 1 and fe3 == 0x79 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb6a1eb; op2val:0x8059b5d0;
op3val:0xbcfff000; valaddr_reg:x3; val_offset:54876*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54876*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18293:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x36a1eb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x59b5d0 and fs3 == 1 and fe3 == 0x79 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb6a1eb; op2val:0x8059b5d0;
op3val:0xbcfff800; valaddr_reg:x3; val_offset:54879*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54879*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18294:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x36a1eb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x59b5d0 and fs3 == 1 and fe3 == 0x79 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb6a1eb; op2val:0x8059b5d0;
op3val:0xbcfffc00; valaddr_reg:x3; val_offset:54882*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54882*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18295:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x36a1eb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x59b5d0 and fs3 == 1 and fe3 == 0x79 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb6a1eb; op2val:0x8059b5d0;
op3val:0xbcfffe00; valaddr_reg:x3; val_offset:54885*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54885*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18296:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x36a1eb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x59b5d0 and fs3 == 1 and fe3 == 0x79 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb6a1eb; op2val:0x8059b5d0;
op3val:0xbcffff00; valaddr_reg:x3; val_offset:54888*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54888*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18297:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x36a1eb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x59b5d0 and fs3 == 1 and fe3 == 0x79 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb6a1eb; op2val:0x8059b5d0;
op3val:0xbcffff80; valaddr_reg:x3; val_offset:54891*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54891*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18298:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x36a1eb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x59b5d0 and fs3 == 1 and fe3 == 0x79 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb6a1eb; op2val:0x8059b5d0;
op3val:0xbcffffc0; valaddr_reg:x3; val_offset:54894*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54894*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18299:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x36a1eb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x59b5d0 and fs3 == 1 and fe3 == 0x79 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb6a1eb; op2val:0x8059b5d0;
op3val:0xbcffffe0; valaddr_reg:x3; val_offset:54897*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54897*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18300:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x36a1eb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x59b5d0 and fs3 == 1 and fe3 == 0x79 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb6a1eb; op2val:0x8059b5d0;
op3val:0xbcfffff0; valaddr_reg:x3; val_offset:54900*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54900*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18301:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x36a1eb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x59b5d0 and fs3 == 1 and fe3 == 0x79 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb6a1eb; op2val:0x8059b5d0;
op3val:0xbcfffff8; valaddr_reg:x3; val_offset:54903*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54903*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18302:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x36a1eb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x59b5d0 and fs3 == 1 and fe3 == 0x79 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb6a1eb; op2val:0x8059b5d0;
op3val:0xbcfffffc; valaddr_reg:x3; val_offset:54906*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54906*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18303:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x36a1eb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x59b5d0 and fs3 == 1 and fe3 == 0x79 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb6a1eb; op2val:0x8059b5d0;
op3val:0xbcfffffe; valaddr_reg:x3; val_offset:54909*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54909*0 + 3*142*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2125793263,32,FLEN)
NAN_BOXED(3224699381,32,FLEN)
NAN_BOXED(4018143216,32,FLEN)
NAN_BOXED(2125793263,32,FLEN)
NAN_BOXED(3224699381,32,FLEN)
NAN_BOXED(4018143224,32,FLEN)
NAN_BOXED(2125793263,32,FLEN)
NAN_BOXED(3224699381,32,FLEN)
NAN_BOXED(4018143228,32,FLEN)
NAN_BOXED(2125793263,32,FLEN)
NAN_BOXED(3224699381,32,FLEN)
NAN_BOXED(4018143230,32,FLEN)
NAN_BOXED(2125793263,32,FLEN)
NAN_BOXED(3224699381,32,FLEN)
NAN_BOXED(4018143231,32,FLEN)
NAN_BOXED(2125793263,32,FLEN)
NAN_BOXED(3224699381,32,FLEN)
NAN_BOXED(4278190081,32,FLEN)
NAN_BOXED(2125793263,32,FLEN)
NAN_BOXED(3224699381,32,FLEN)
NAN_BOXED(4278190083,32,FLEN)
NAN_BOXED(2125793263,32,FLEN)
NAN_BOXED(3224699381,32,FLEN)
NAN_BOXED(4278190087,32,FLEN)
NAN_BOXED(2125793263,32,FLEN)
NAN_BOXED(3224699381,32,FLEN)
NAN_BOXED(4279867801,32,FLEN)
NAN_BOXED(2125793263,32,FLEN)
NAN_BOXED(3224699381,32,FLEN)
NAN_BOXED(4280586825,32,FLEN)
NAN_BOXED(2125793263,32,FLEN)
NAN_BOXED(3224699381,32,FLEN)
NAN_BOXED(4281545523,32,FLEN)
NAN_BOXED(2125793263,32,FLEN)
NAN_BOXED(3224699381,32,FLEN)
NAN_BOXED(4281785197,32,FLEN)
NAN_BOXED(2125793263,32,FLEN)
NAN_BOXED(3224699381,32,FLEN)
NAN_BOXED(4282104763,32,FLEN)
NAN_BOXED(2125793263,32,FLEN)
NAN_BOXED(3224699381,32,FLEN)
NAN_BOXED(4282664004,32,FLEN)
NAN_BOXED(2125793263,32,FLEN)
NAN_BOXED(3224699381,32,FLEN)
NAN_BOXED(4283223244,32,FLEN)
NAN_BOXED(2125793263,32,FLEN)
NAN_BOXED(3224699381,32,FLEN)
NAN_BOXED(4284181942,32,FLEN)
NAN_BOXED(2125793263,32,FLEN)
NAN_BOXED(3224699381,32,FLEN)
NAN_BOXED(4284900966,32,FLEN)
NAN_BOXED(2125793263,32,FLEN)
NAN_BOXED(3224699381,32,FLEN)
NAN_BOXED(4285380315,32,FLEN)
NAN_BOXED(2125793263,32,FLEN)
NAN_BOXED(3224699381,32,FLEN)
NAN_BOXED(4286578680,32,FLEN)
NAN_BOXED(2125793263,32,FLEN)
NAN_BOXED(3224699381,32,FLEN)
NAN_BOXED(4286578684,32,FLEN)
NAN_BOXED(2125793263,32,FLEN)
NAN_BOXED(3224699381,32,FLEN)
NAN_BOXED(4286578686,32,FLEN)
NAN_BOXED(2125857933,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2125857933,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3,32,FLEN)
NAN_BOXED(2125857933,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7,32,FLEN)
NAN_BOXED(2125857933,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1677721,32,FLEN)
NAN_BOXED(2125857933,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2396745,32,FLEN)
NAN_BOXED(2125857933,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3355443,32,FLEN)
NAN_BOXED(2125857933,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3595117,32,FLEN)
NAN_BOXED(2125857933,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3914683,32,FLEN)
NAN_BOXED(2125857933,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4473924,32,FLEN)
NAN_BOXED(2125857933,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5033164,32,FLEN)
NAN_BOXED(2125857933,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5991862,32,FLEN)
NAN_BOXED(2125857933,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(6710886,32,FLEN)
NAN_BOXED(2125857933,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7190235,32,FLEN)
NAN_BOXED(2125857933,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388600,32,FLEN)
NAN_BOXED(2125857933,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388604,32,FLEN)
NAN_BOXED(2125857933,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388606,32,FLEN)
NAN_BOXED(2125857933,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125829120,32,FLEN)
NAN_BOXED(2125857933,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125829121,32,FLEN)
NAN_BOXED(2125857933,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125829123,32,FLEN)
NAN_BOXED(2125857933,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125829127,32,FLEN)
NAN_BOXED(2125857933,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125829135,32,FLEN)
NAN_BOXED(2125857933,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125829151,32,FLEN)
NAN_BOXED(2125857933,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125829183,32,FLEN)
NAN_BOXED(2125857933,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125829247,32,FLEN)
NAN_BOXED(2125857933,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125829375,32,FLEN)
NAN_BOXED(2125857933,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125829631,32,FLEN)
NAN_BOXED(2125857933,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125830143,32,FLEN)
NAN_BOXED(2125857933,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125831167,32,FLEN)
NAN_BOXED(2125857933,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125833215,32,FLEN)
NAN_BOXED(2125857933,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125837311,32,FLEN)
NAN_BOXED(2125857933,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125845503,32,FLEN)
NAN_BOXED(2125857933,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125861887,32,FLEN)
NAN_BOXED(2125857933,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125894655,32,FLEN)
NAN_BOXED(2125857933,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125960191,32,FLEN)
NAN_BOXED(2125857933,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(126091263,32,FLEN)
NAN_BOXED(2125857933,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(126353407,32,FLEN)
NAN_BOXED(2125857933,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(126877695,32,FLEN)
NAN_BOXED(2125857933,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(127926271,32,FLEN)
NAN_BOXED(2125857933,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(130023423,32,FLEN)
NAN_BOXED(2125857933,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(130023424,32,FLEN)
NAN_BOXED(2125857933,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(132120576,32,FLEN)
NAN_BOXED(2125857933,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(133169152,32,FLEN)
NAN_BOXED(2125857933,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(133693440,32,FLEN)
NAN_BOXED(2125857933,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(133955584,32,FLEN)
NAN_BOXED(2125857933,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134086656,32,FLEN)
NAN_BOXED(2125857933,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134152192,32,FLEN)
NAN_BOXED(2125857933,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134184960,32,FLEN)
NAN_BOXED(2125857933,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134201344,32,FLEN)
NAN_BOXED(2125857933,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134209536,32,FLEN)
NAN_BOXED(2125857933,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134213632,32,FLEN)
NAN_BOXED(2125857933,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134215680,32,FLEN)
NAN_BOXED(2125857933,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134216704,32,FLEN)
NAN_BOXED(2125857933,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134217216,32,FLEN)
NAN_BOXED(2125857933,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134217472,32,FLEN)
NAN_BOXED(2125857933,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134217600,32,FLEN)
NAN_BOXED(2125857933,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134217664,32,FLEN)
NAN_BOXED(2125857933,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134217696,32,FLEN)
NAN_BOXED(2125857933,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134217712,32,FLEN)
NAN_BOXED(2125857933,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134217720,32,FLEN)
NAN_BOXED(2125857933,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134217724,32,FLEN)
NAN_BOXED(2125857933,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134217726,32,FLEN)
NAN_BOXED(2125857933,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134217727,32,FLEN)
NAN_BOXED(2125898219,32,FLEN)
NAN_BOXED(2153362896,32,FLEN)
NAN_BOXED(3162505216,32,FLEN)
NAN_BOXED(2125898219,32,FLEN)
NAN_BOXED(2153362896,32,FLEN)
NAN_BOXED(3162505217,32,FLEN)
NAN_BOXED(2125898219,32,FLEN)
NAN_BOXED(2153362896,32,FLEN)
NAN_BOXED(3162505219,32,FLEN)
NAN_BOXED(2125898219,32,FLEN)
NAN_BOXED(2153362896,32,FLEN)
NAN_BOXED(3162505223,32,FLEN)
NAN_BOXED(2125898219,32,FLEN)
NAN_BOXED(2153362896,32,FLEN)
NAN_BOXED(3162505231,32,FLEN)
NAN_BOXED(2125898219,32,FLEN)
NAN_BOXED(2153362896,32,FLEN)
NAN_BOXED(3162505247,32,FLEN)
NAN_BOXED(2125898219,32,FLEN)
NAN_BOXED(2153362896,32,FLEN)
NAN_BOXED(3162505279,32,FLEN)
NAN_BOXED(2125898219,32,FLEN)
NAN_BOXED(2153362896,32,FLEN)
NAN_BOXED(3162505343,32,FLEN)
NAN_BOXED(2125898219,32,FLEN)
NAN_BOXED(2153362896,32,FLEN)
NAN_BOXED(3162505471,32,FLEN)
NAN_BOXED(2125898219,32,FLEN)
NAN_BOXED(2153362896,32,FLEN)
NAN_BOXED(3162505727,32,FLEN)
NAN_BOXED(2125898219,32,FLEN)
NAN_BOXED(2153362896,32,FLEN)
NAN_BOXED(3162506239,32,FLEN)
NAN_BOXED(2125898219,32,FLEN)
NAN_BOXED(2153362896,32,FLEN)
NAN_BOXED(3162507263,32,FLEN)
NAN_BOXED(2125898219,32,FLEN)
NAN_BOXED(2153362896,32,FLEN)
NAN_BOXED(3162509311,32,FLEN)
NAN_BOXED(2125898219,32,FLEN)
NAN_BOXED(2153362896,32,FLEN)
NAN_BOXED(3162513407,32,FLEN)
NAN_BOXED(2125898219,32,FLEN)
NAN_BOXED(2153362896,32,FLEN)
NAN_BOXED(3162521599,32,FLEN)
NAN_BOXED(2125898219,32,FLEN)
NAN_BOXED(2153362896,32,FLEN)
NAN_BOXED(3162537983,32,FLEN)
NAN_BOXED(2125898219,32,FLEN)
NAN_BOXED(2153362896,32,FLEN)
NAN_BOXED(3162570751,32,FLEN)
NAN_BOXED(2125898219,32,FLEN)
NAN_BOXED(2153362896,32,FLEN)
NAN_BOXED(3162636287,32,FLEN)
NAN_BOXED(2125898219,32,FLEN)
NAN_BOXED(2153362896,32,FLEN)
NAN_BOXED(3162767359,32,FLEN)
NAN_BOXED(2125898219,32,FLEN)
NAN_BOXED(2153362896,32,FLEN)
NAN_BOXED(3163029503,32,FLEN)
NAN_BOXED(2125898219,32,FLEN)
NAN_BOXED(2153362896,32,FLEN)
NAN_BOXED(3163553791,32,FLEN)
NAN_BOXED(2125898219,32,FLEN)
NAN_BOXED(2153362896,32,FLEN)
NAN_BOXED(3164602367,32,FLEN)
NAN_BOXED(2125898219,32,FLEN)
NAN_BOXED(2153362896,32,FLEN)
NAN_BOXED(3166699519,32,FLEN)
NAN_BOXED(2125898219,32,FLEN)
NAN_BOXED(2153362896,32,FLEN)
NAN_BOXED(3166699520,32,FLEN)
NAN_BOXED(2125898219,32,FLEN)
NAN_BOXED(2153362896,32,FLEN)
NAN_BOXED(3168796672,32,FLEN)
NAN_BOXED(2125898219,32,FLEN)
NAN_BOXED(2153362896,32,FLEN)
NAN_BOXED(3169845248,32,FLEN)
NAN_BOXED(2125898219,32,FLEN)
NAN_BOXED(2153362896,32,FLEN)
NAN_BOXED(3170369536,32,FLEN)
NAN_BOXED(2125898219,32,FLEN)
NAN_BOXED(2153362896,32,FLEN)
NAN_BOXED(3170631680,32,FLEN)
NAN_BOXED(2125898219,32,FLEN)
NAN_BOXED(2153362896,32,FLEN)
NAN_BOXED(3170762752,32,FLEN)
NAN_BOXED(2125898219,32,FLEN)
NAN_BOXED(2153362896,32,FLEN)
NAN_BOXED(3170828288,32,FLEN)
NAN_BOXED(2125898219,32,FLEN)
NAN_BOXED(2153362896,32,FLEN)
NAN_BOXED(3170861056,32,FLEN)
NAN_BOXED(2125898219,32,FLEN)
NAN_BOXED(2153362896,32,FLEN)
NAN_BOXED(3170877440,32,FLEN)
NAN_BOXED(2125898219,32,FLEN)
NAN_BOXED(2153362896,32,FLEN)
NAN_BOXED(3170885632,32,FLEN)
NAN_BOXED(2125898219,32,FLEN)
NAN_BOXED(2153362896,32,FLEN)
NAN_BOXED(3170889728,32,FLEN)
NAN_BOXED(2125898219,32,FLEN)
NAN_BOXED(2153362896,32,FLEN)
NAN_BOXED(3170891776,32,FLEN)
NAN_BOXED(2125898219,32,FLEN)
NAN_BOXED(2153362896,32,FLEN)
NAN_BOXED(3170892800,32,FLEN)
NAN_BOXED(2125898219,32,FLEN)
NAN_BOXED(2153362896,32,FLEN)
NAN_BOXED(3170893312,32,FLEN)
NAN_BOXED(2125898219,32,FLEN)
NAN_BOXED(2153362896,32,FLEN)
NAN_BOXED(3170893568,32,FLEN)
NAN_BOXED(2125898219,32,FLEN)
NAN_BOXED(2153362896,32,FLEN)
NAN_BOXED(3170893696,32,FLEN)
NAN_BOXED(2125898219,32,FLEN)
NAN_BOXED(2153362896,32,FLEN)
NAN_BOXED(3170893760,32,FLEN)
NAN_BOXED(2125898219,32,FLEN)
NAN_BOXED(2153362896,32,FLEN)
NAN_BOXED(3170893792,32,FLEN)
NAN_BOXED(2125898219,32,FLEN)
NAN_BOXED(2153362896,32,FLEN)
NAN_BOXED(3170893808,32,FLEN)
NAN_BOXED(2125898219,32,FLEN)
NAN_BOXED(2153362896,32,FLEN)
NAN_BOXED(3170893816,32,FLEN)
NAN_BOXED(2125898219,32,FLEN)
NAN_BOXED(2153362896,32,FLEN)
NAN_BOXED(3170893820,32,FLEN)
NAN_BOXED(2125898219,32,FLEN)
NAN_BOXED(2153362896,32,FLEN)
NAN_BOXED(3170893822,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
