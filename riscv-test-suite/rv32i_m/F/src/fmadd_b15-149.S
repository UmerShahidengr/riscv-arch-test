
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:17:59 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_18944:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3cdcf2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebcdcf2; op2val:0x0;
op3val:0x999999; valaddr_reg:x3; val_offset:56832*0 + 3*148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56832*0 + 3*148*FLEN/8, x4, x1, x2)

inst_18945:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3cdcf2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebcdcf2; op2val:0x0;
op3val:0xa49249; valaddr_reg:x3; val_offset:56835*0 + 3*148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56835*0 + 3*148*FLEN/8, x4, x1, x2)

inst_18946:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3cdcf2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebcdcf2; op2val:0x0;
op3val:0xb33333; valaddr_reg:x3; val_offset:56838*0 + 3*148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56838*0 + 3*148*FLEN/8, x4, x1, x2)

inst_18947:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3cdcf2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebcdcf2; op2val:0x0;
op3val:0xb6db6d; valaddr_reg:x3; val_offset:56841*0 + 3*148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56841*0 + 3*148*FLEN/8, x4, x1, x2)

inst_18948:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3cdcf2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebcdcf2; op2val:0x0;
op3val:0xbbbbbb; valaddr_reg:x3; val_offset:56844*0 + 3*148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56844*0 + 3*148*FLEN/8, x4, x1, x2)

inst_18949:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3cdcf2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebcdcf2; op2val:0x0;
op3val:0xc44444; valaddr_reg:x3; val_offset:56847*0 + 3*148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56847*0 + 3*148*FLEN/8, x4, x1, x2)

inst_18950:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3cdcf2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebcdcf2; op2val:0x0;
op3val:0xcccccc; valaddr_reg:x3; val_offset:56850*0 + 3*148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56850*0 + 3*148*FLEN/8, x4, x1, x2)

inst_18951:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3cdcf2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebcdcf2; op2val:0x0;
op3val:0xdb6db6; valaddr_reg:x3; val_offset:56853*0 + 3*148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56853*0 + 3*148*FLEN/8, x4, x1, x2)

inst_18952:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3cdcf2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebcdcf2; op2val:0x0;
op3val:0xe66666; valaddr_reg:x3; val_offset:56856*0 + 3*148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56856*0 + 3*148*FLEN/8, x4, x1, x2)

inst_18953:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3cdcf2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebcdcf2; op2val:0x0;
op3val:0xedb6db; valaddr_reg:x3; val_offset:56859*0 + 3*148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56859*0 + 3*148*FLEN/8, x4, x1, x2)

inst_18954:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3cdcf2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebcdcf2; op2val:0x0;
op3val:0xfffff8; valaddr_reg:x3; val_offset:56862*0 + 3*148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56862*0 + 3*148*FLEN/8, x4, x1, x2)

inst_18955:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3cdcf2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebcdcf2; op2val:0x0;
op3val:0xfffffc; valaddr_reg:x3; val_offset:56865*0 + 3*148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56865*0 + 3*148*FLEN/8, x4, x1, x2)

inst_18956:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3cdcf2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebcdcf2; op2val:0x0;
op3val:0xfffffe; valaddr_reg:x3; val_offset:56868*0 + 3*148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56868*0 + 3*148*FLEN/8, x4, x1, x2)

inst_18957:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3cdcf2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebcdcf2; op2val:0x0;
op3val:0x1000000; valaddr_reg:x3; val_offset:56871*0 + 3*148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56871*0 + 3*148*FLEN/8, x4, x1, x2)

inst_18958:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3cdcf2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebcdcf2; op2val:0x0;
op3val:0x1000001; valaddr_reg:x3; val_offset:56874*0 + 3*148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56874*0 + 3*148*FLEN/8, x4, x1, x2)

inst_18959:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3cdcf2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebcdcf2; op2val:0x0;
op3val:0x1000003; valaddr_reg:x3; val_offset:56877*0 + 3*148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56877*0 + 3*148*FLEN/8, x4, x1, x2)

inst_18960:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3cdcf2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebcdcf2; op2val:0x0;
op3val:0x1000007; valaddr_reg:x3; val_offset:56880*0 + 3*148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56880*0 + 3*148*FLEN/8, x4, x1, x2)

inst_18961:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3cdcf2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebcdcf2; op2val:0x0;
op3val:0x100000f; valaddr_reg:x3; val_offset:56883*0 + 3*148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56883*0 + 3*148*FLEN/8, x4, x1, x2)

inst_18962:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3cdcf2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebcdcf2; op2val:0x0;
op3val:0x100001f; valaddr_reg:x3; val_offset:56886*0 + 3*148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56886*0 + 3*148*FLEN/8, x4, x1, x2)

inst_18963:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3cdcf2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebcdcf2; op2val:0x0;
op3val:0x100003f; valaddr_reg:x3; val_offset:56889*0 + 3*148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56889*0 + 3*148*FLEN/8, x4, x1, x2)

inst_18964:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3cdcf2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebcdcf2; op2val:0x0;
op3val:0x100007f; valaddr_reg:x3; val_offset:56892*0 + 3*148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56892*0 + 3*148*FLEN/8, x4, x1, x2)

inst_18965:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3cdcf2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebcdcf2; op2val:0x0;
op3val:0x10000ff; valaddr_reg:x3; val_offset:56895*0 + 3*148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56895*0 + 3*148*FLEN/8, x4, x1, x2)

inst_18966:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3cdcf2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebcdcf2; op2val:0x0;
op3val:0x10001ff; valaddr_reg:x3; val_offset:56898*0 + 3*148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56898*0 + 3*148*FLEN/8, x4, x1, x2)

inst_18967:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3cdcf2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebcdcf2; op2val:0x0;
op3val:0x10003ff; valaddr_reg:x3; val_offset:56901*0 + 3*148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56901*0 + 3*148*FLEN/8, x4, x1, x2)

inst_18968:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3cdcf2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebcdcf2; op2val:0x0;
op3val:0x10007ff; valaddr_reg:x3; val_offset:56904*0 + 3*148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56904*0 + 3*148*FLEN/8, x4, x1, x2)

inst_18969:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3cdcf2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebcdcf2; op2val:0x0;
op3val:0x1000fff; valaddr_reg:x3; val_offset:56907*0 + 3*148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56907*0 + 3*148*FLEN/8, x4, x1, x2)

inst_18970:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3cdcf2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebcdcf2; op2val:0x0;
op3val:0x1001fff; valaddr_reg:x3; val_offset:56910*0 + 3*148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56910*0 + 3*148*FLEN/8, x4, x1, x2)

inst_18971:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3cdcf2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebcdcf2; op2val:0x0;
op3val:0x1003fff; valaddr_reg:x3; val_offset:56913*0 + 3*148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56913*0 + 3*148*FLEN/8, x4, x1, x2)

inst_18972:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3cdcf2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebcdcf2; op2val:0x0;
op3val:0x1007fff; valaddr_reg:x3; val_offset:56916*0 + 3*148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56916*0 + 3*148*FLEN/8, x4, x1, x2)

inst_18973:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3cdcf2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebcdcf2; op2val:0x0;
op3val:0x100ffff; valaddr_reg:x3; val_offset:56919*0 + 3*148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56919*0 + 3*148*FLEN/8, x4, x1, x2)

inst_18974:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3cdcf2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebcdcf2; op2val:0x0;
op3val:0x101ffff; valaddr_reg:x3; val_offset:56922*0 + 3*148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56922*0 + 3*148*FLEN/8, x4, x1, x2)

inst_18975:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3cdcf2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebcdcf2; op2val:0x0;
op3val:0x103ffff; valaddr_reg:x3; val_offset:56925*0 + 3*148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56925*0 + 3*148*FLEN/8, x4, x1, x2)

inst_18976:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3cdcf2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebcdcf2; op2val:0x0;
op3val:0x107ffff; valaddr_reg:x3; val_offset:56928*0 + 3*148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56928*0 + 3*148*FLEN/8, x4, x1, x2)

inst_18977:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3cdcf2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebcdcf2; op2val:0x0;
op3val:0x10fffff; valaddr_reg:x3; val_offset:56931*0 + 3*148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56931*0 + 3*148*FLEN/8, x4, x1, x2)

inst_18978:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3cdcf2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebcdcf2; op2val:0x0;
op3val:0x11fffff; valaddr_reg:x3; val_offset:56934*0 + 3*148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56934*0 + 3*148*FLEN/8, x4, x1, x2)

inst_18979:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3cdcf2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebcdcf2; op2val:0x0;
op3val:0x13fffff; valaddr_reg:x3; val_offset:56937*0 + 3*148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56937*0 + 3*148*FLEN/8, x4, x1, x2)

inst_18980:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3cdcf2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebcdcf2; op2val:0x0;
op3val:0x1400000; valaddr_reg:x3; val_offset:56940*0 + 3*148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56940*0 + 3*148*FLEN/8, x4, x1, x2)

inst_18981:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3cdcf2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebcdcf2; op2val:0x0;
op3val:0x1600000; valaddr_reg:x3; val_offset:56943*0 + 3*148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56943*0 + 3*148*FLEN/8, x4, x1, x2)

inst_18982:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3cdcf2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebcdcf2; op2val:0x0;
op3val:0x1700000; valaddr_reg:x3; val_offset:56946*0 + 3*148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56946*0 + 3*148*FLEN/8, x4, x1, x2)

inst_18983:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3cdcf2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebcdcf2; op2val:0x0;
op3val:0x1780000; valaddr_reg:x3; val_offset:56949*0 + 3*148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56949*0 + 3*148*FLEN/8, x4, x1, x2)

inst_18984:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3cdcf2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebcdcf2; op2val:0x0;
op3val:0x17c0000; valaddr_reg:x3; val_offset:56952*0 + 3*148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56952*0 + 3*148*FLEN/8, x4, x1, x2)

inst_18985:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3cdcf2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebcdcf2; op2val:0x0;
op3val:0x17e0000; valaddr_reg:x3; val_offset:56955*0 + 3*148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56955*0 + 3*148*FLEN/8, x4, x1, x2)

inst_18986:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3cdcf2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebcdcf2; op2val:0x0;
op3val:0x17f0000; valaddr_reg:x3; val_offset:56958*0 + 3*148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56958*0 + 3*148*FLEN/8, x4, x1, x2)

inst_18987:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3cdcf2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebcdcf2; op2val:0x0;
op3val:0x17f8000; valaddr_reg:x3; val_offset:56961*0 + 3*148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56961*0 + 3*148*FLEN/8, x4, x1, x2)

inst_18988:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3cdcf2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebcdcf2; op2val:0x0;
op3val:0x17fc000; valaddr_reg:x3; val_offset:56964*0 + 3*148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56964*0 + 3*148*FLEN/8, x4, x1, x2)

inst_18989:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3cdcf2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebcdcf2; op2val:0x0;
op3val:0x17fe000; valaddr_reg:x3; val_offset:56967*0 + 3*148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56967*0 + 3*148*FLEN/8, x4, x1, x2)

inst_18990:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3cdcf2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebcdcf2; op2val:0x0;
op3val:0x17ff000; valaddr_reg:x3; val_offset:56970*0 + 3*148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56970*0 + 3*148*FLEN/8, x4, x1, x2)

inst_18991:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3cdcf2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebcdcf2; op2val:0x0;
op3val:0x17ff800; valaddr_reg:x3; val_offset:56973*0 + 3*148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56973*0 + 3*148*FLEN/8, x4, x1, x2)

inst_18992:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3cdcf2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebcdcf2; op2val:0x0;
op3val:0x17ffc00; valaddr_reg:x3; val_offset:56976*0 + 3*148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56976*0 + 3*148*FLEN/8, x4, x1, x2)

inst_18993:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3cdcf2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebcdcf2; op2val:0x0;
op3val:0x17ffe00; valaddr_reg:x3; val_offset:56979*0 + 3*148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56979*0 + 3*148*FLEN/8, x4, x1, x2)

inst_18994:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3cdcf2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebcdcf2; op2val:0x0;
op3val:0x17fff00; valaddr_reg:x3; val_offset:56982*0 + 3*148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56982*0 + 3*148*FLEN/8, x4, x1, x2)

inst_18995:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3cdcf2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebcdcf2; op2val:0x0;
op3val:0x17fff80; valaddr_reg:x3; val_offset:56985*0 + 3*148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56985*0 + 3*148*FLEN/8, x4, x1, x2)

inst_18996:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3cdcf2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebcdcf2; op2val:0x0;
op3val:0x17fffc0; valaddr_reg:x3; val_offset:56988*0 + 3*148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56988*0 + 3*148*FLEN/8, x4, x1, x2)

inst_18997:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3cdcf2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebcdcf2; op2val:0x0;
op3val:0x17fffe0; valaddr_reg:x3; val_offset:56991*0 + 3*148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56991*0 + 3*148*FLEN/8, x4, x1, x2)

inst_18998:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3cdcf2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebcdcf2; op2val:0x0;
op3val:0x17ffff0; valaddr_reg:x3; val_offset:56994*0 + 3*148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56994*0 + 3*148*FLEN/8, x4, x1, x2)

inst_18999:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3cdcf2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebcdcf2; op2val:0x0;
op3val:0x17ffff8; valaddr_reg:x3; val_offset:56997*0 + 3*148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56997*0 + 3*148*FLEN/8, x4, x1, x2)

inst_19000:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3cdcf2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebcdcf2; op2val:0x0;
op3val:0x17ffffc; valaddr_reg:x3; val_offset:57000*0 + 3*148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57000*0 + 3*148*FLEN/8, x4, x1, x2)

inst_19001:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3cdcf2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebcdcf2; op2val:0x0;
op3val:0x17ffffe; valaddr_reg:x3; val_offset:57003*0 + 3*148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57003*0 + 3*148*FLEN/8, x4, x1, x2)

inst_19002:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3cdcf2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebcdcf2; op2val:0x0;
op3val:0x17fffff; valaddr_reg:x3; val_offset:57006*0 + 3*148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57006*0 + 3*148*FLEN/8, x4, x1, x2)

inst_19003:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d2dfe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x569b02 and fs3 == 0 and fe3 == 0x50 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd2dfe; op2val:0x569b02;
op3val:0x28000000; valaddr_reg:x3; val_offset:57009*0 + 3*148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57009*0 + 3*148*FLEN/8, x4, x1, x2)

inst_19004:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d2dfe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x569b02 and fs3 == 0 and fe3 == 0x50 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd2dfe; op2val:0x569b02;
op3val:0x28000001; valaddr_reg:x3; val_offset:57012*0 + 3*148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57012*0 + 3*148*FLEN/8, x4, x1, x2)

inst_19005:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d2dfe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x569b02 and fs3 == 0 and fe3 == 0x50 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd2dfe; op2val:0x569b02;
op3val:0x28000003; valaddr_reg:x3; val_offset:57015*0 + 3*148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57015*0 + 3*148*FLEN/8, x4, x1, x2)

inst_19006:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d2dfe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x569b02 and fs3 == 0 and fe3 == 0x50 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd2dfe; op2val:0x569b02;
op3val:0x28000007; valaddr_reg:x3; val_offset:57018*0 + 3*148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57018*0 + 3*148*FLEN/8, x4, x1, x2)

inst_19007:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d2dfe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x569b02 and fs3 == 0 and fe3 == 0x50 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd2dfe; op2val:0x569b02;
op3val:0x2800000f; valaddr_reg:x3; val_offset:57021*0 + 3*148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57021*0 + 3*148*FLEN/8, x4, x1, x2)

inst_19008:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d2dfe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x569b02 and fs3 == 0 and fe3 == 0x50 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd2dfe; op2val:0x569b02;
op3val:0x2800001f; valaddr_reg:x3; val_offset:57024*0 + 3*148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57024*0 + 3*148*FLEN/8, x4, x1, x2)

inst_19009:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d2dfe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x569b02 and fs3 == 0 and fe3 == 0x50 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd2dfe; op2val:0x569b02;
op3val:0x2800003f; valaddr_reg:x3; val_offset:57027*0 + 3*148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57027*0 + 3*148*FLEN/8, x4, x1, x2)

inst_19010:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d2dfe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x569b02 and fs3 == 0 and fe3 == 0x50 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd2dfe; op2val:0x569b02;
op3val:0x2800007f; valaddr_reg:x3; val_offset:57030*0 + 3*148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57030*0 + 3*148*FLEN/8, x4, x1, x2)

inst_19011:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d2dfe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x569b02 and fs3 == 0 and fe3 == 0x50 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd2dfe; op2val:0x569b02;
op3val:0x280000ff; valaddr_reg:x3; val_offset:57033*0 + 3*148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57033*0 + 3*148*FLEN/8, x4, x1, x2)

inst_19012:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d2dfe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x569b02 and fs3 == 0 and fe3 == 0x50 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd2dfe; op2val:0x569b02;
op3val:0x280001ff; valaddr_reg:x3; val_offset:57036*0 + 3*148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57036*0 + 3*148*FLEN/8, x4, x1, x2)

inst_19013:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d2dfe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x569b02 and fs3 == 0 and fe3 == 0x50 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd2dfe; op2val:0x569b02;
op3val:0x280003ff; valaddr_reg:x3; val_offset:57039*0 + 3*148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57039*0 + 3*148*FLEN/8, x4, x1, x2)

inst_19014:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d2dfe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x569b02 and fs3 == 0 and fe3 == 0x50 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd2dfe; op2val:0x569b02;
op3val:0x280007ff; valaddr_reg:x3; val_offset:57042*0 + 3*148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57042*0 + 3*148*FLEN/8, x4, x1, x2)

inst_19015:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d2dfe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x569b02 and fs3 == 0 and fe3 == 0x50 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd2dfe; op2val:0x569b02;
op3val:0x28000fff; valaddr_reg:x3; val_offset:57045*0 + 3*148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57045*0 + 3*148*FLEN/8, x4, x1, x2)

inst_19016:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d2dfe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x569b02 and fs3 == 0 and fe3 == 0x50 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd2dfe; op2val:0x569b02;
op3val:0x28001fff; valaddr_reg:x3; val_offset:57048*0 + 3*148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57048*0 + 3*148*FLEN/8, x4, x1, x2)

inst_19017:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d2dfe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x569b02 and fs3 == 0 and fe3 == 0x50 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd2dfe; op2val:0x569b02;
op3val:0x28003fff; valaddr_reg:x3; val_offset:57051*0 + 3*148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57051*0 + 3*148*FLEN/8, x4, x1, x2)

inst_19018:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d2dfe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x569b02 and fs3 == 0 and fe3 == 0x50 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd2dfe; op2val:0x569b02;
op3val:0x28007fff; valaddr_reg:x3; val_offset:57054*0 + 3*148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57054*0 + 3*148*FLEN/8, x4, x1, x2)

inst_19019:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d2dfe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x569b02 and fs3 == 0 and fe3 == 0x50 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd2dfe; op2val:0x569b02;
op3val:0x2800ffff; valaddr_reg:x3; val_offset:57057*0 + 3*148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57057*0 + 3*148*FLEN/8, x4, x1, x2)

inst_19020:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d2dfe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x569b02 and fs3 == 0 and fe3 == 0x50 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd2dfe; op2val:0x569b02;
op3val:0x2801ffff; valaddr_reg:x3; val_offset:57060*0 + 3*148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57060*0 + 3*148*FLEN/8, x4, x1, x2)

inst_19021:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d2dfe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x569b02 and fs3 == 0 and fe3 == 0x50 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd2dfe; op2val:0x569b02;
op3val:0x2803ffff; valaddr_reg:x3; val_offset:57063*0 + 3*148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57063*0 + 3*148*FLEN/8, x4, x1, x2)

inst_19022:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d2dfe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x569b02 and fs3 == 0 and fe3 == 0x50 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd2dfe; op2val:0x569b02;
op3val:0x2807ffff; valaddr_reg:x3; val_offset:57066*0 + 3*148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57066*0 + 3*148*FLEN/8, x4, x1, x2)

inst_19023:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d2dfe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x569b02 and fs3 == 0 and fe3 == 0x50 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd2dfe; op2val:0x569b02;
op3val:0x280fffff; valaddr_reg:x3; val_offset:57069*0 + 3*148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57069*0 + 3*148*FLEN/8, x4, x1, x2)

inst_19024:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d2dfe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x569b02 and fs3 == 0 and fe3 == 0x50 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd2dfe; op2val:0x569b02;
op3val:0x281fffff; valaddr_reg:x3; val_offset:57072*0 + 3*148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57072*0 + 3*148*FLEN/8, x4, x1, x2)

inst_19025:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d2dfe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x569b02 and fs3 == 0 and fe3 == 0x50 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd2dfe; op2val:0x569b02;
op3val:0x283fffff; valaddr_reg:x3; val_offset:57075*0 + 3*148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57075*0 + 3*148*FLEN/8, x4, x1, x2)

inst_19026:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d2dfe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x569b02 and fs3 == 0 and fe3 == 0x50 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd2dfe; op2val:0x569b02;
op3val:0x28400000; valaddr_reg:x3; val_offset:57078*0 + 3*148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57078*0 + 3*148*FLEN/8, x4, x1, x2)

inst_19027:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d2dfe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x569b02 and fs3 == 0 and fe3 == 0x50 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd2dfe; op2val:0x569b02;
op3val:0x28600000; valaddr_reg:x3; val_offset:57081*0 + 3*148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57081*0 + 3*148*FLEN/8, x4, x1, x2)

inst_19028:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d2dfe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x569b02 and fs3 == 0 and fe3 == 0x50 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd2dfe; op2val:0x569b02;
op3val:0x28700000; valaddr_reg:x3; val_offset:57084*0 + 3*148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57084*0 + 3*148*FLEN/8, x4, x1, x2)

inst_19029:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d2dfe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x569b02 and fs3 == 0 and fe3 == 0x50 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd2dfe; op2val:0x569b02;
op3val:0x28780000; valaddr_reg:x3; val_offset:57087*0 + 3*148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57087*0 + 3*148*FLEN/8, x4, x1, x2)

inst_19030:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d2dfe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x569b02 and fs3 == 0 and fe3 == 0x50 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd2dfe; op2val:0x569b02;
op3val:0x287c0000; valaddr_reg:x3; val_offset:57090*0 + 3*148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57090*0 + 3*148*FLEN/8, x4, x1, x2)

inst_19031:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d2dfe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x569b02 and fs3 == 0 and fe3 == 0x50 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd2dfe; op2val:0x569b02;
op3val:0x287e0000; valaddr_reg:x3; val_offset:57093*0 + 3*148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57093*0 + 3*148*FLEN/8, x4, x1, x2)

inst_19032:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d2dfe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x569b02 and fs3 == 0 and fe3 == 0x50 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd2dfe; op2val:0x569b02;
op3val:0x287f0000; valaddr_reg:x3; val_offset:57096*0 + 3*148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57096*0 + 3*148*FLEN/8, x4, x1, x2)

inst_19033:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d2dfe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x569b02 and fs3 == 0 and fe3 == 0x50 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd2dfe; op2val:0x569b02;
op3val:0x287f8000; valaddr_reg:x3; val_offset:57099*0 + 3*148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57099*0 + 3*148*FLEN/8, x4, x1, x2)

inst_19034:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d2dfe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x569b02 and fs3 == 0 and fe3 == 0x50 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd2dfe; op2val:0x569b02;
op3val:0x287fc000; valaddr_reg:x3; val_offset:57102*0 + 3*148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57102*0 + 3*148*FLEN/8, x4, x1, x2)

inst_19035:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d2dfe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x569b02 and fs3 == 0 and fe3 == 0x50 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd2dfe; op2val:0x569b02;
op3val:0x287fe000; valaddr_reg:x3; val_offset:57105*0 + 3*148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57105*0 + 3*148*FLEN/8, x4, x1, x2)

inst_19036:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d2dfe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x569b02 and fs3 == 0 and fe3 == 0x50 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd2dfe; op2val:0x569b02;
op3val:0x287ff000; valaddr_reg:x3; val_offset:57108*0 + 3*148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57108*0 + 3*148*FLEN/8, x4, x1, x2)

inst_19037:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d2dfe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x569b02 and fs3 == 0 and fe3 == 0x50 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd2dfe; op2val:0x569b02;
op3val:0x287ff800; valaddr_reg:x3; val_offset:57111*0 + 3*148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57111*0 + 3*148*FLEN/8, x4, x1, x2)

inst_19038:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d2dfe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x569b02 and fs3 == 0 and fe3 == 0x50 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd2dfe; op2val:0x569b02;
op3val:0x287ffc00; valaddr_reg:x3; val_offset:57114*0 + 3*148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57114*0 + 3*148*FLEN/8, x4, x1, x2)

inst_19039:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d2dfe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x569b02 and fs3 == 0 and fe3 == 0x50 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd2dfe; op2val:0x569b02;
op3val:0x287ffe00; valaddr_reg:x3; val_offset:57117*0 + 3*148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57117*0 + 3*148*FLEN/8, x4, x1, x2)

inst_19040:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d2dfe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x569b02 and fs3 == 0 and fe3 == 0x50 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd2dfe; op2val:0x569b02;
op3val:0x287fff00; valaddr_reg:x3; val_offset:57120*0 + 3*148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57120*0 + 3*148*FLEN/8, x4, x1, x2)

inst_19041:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d2dfe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x569b02 and fs3 == 0 and fe3 == 0x50 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd2dfe; op2val:0x569b02;
op3val:0x287fff80; valaddr_reg:x3; val_offset:57123*0 + 3*148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57123*0 + 3*148*FLEN/8, x4, x1, x2)

inst_19042:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d2dfe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x569b02 and fs3 == 0 and fe3 == 0x50 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd2dfe; op2val:0x569b02;
op3val:0x287fffc0; valaddr_reg:x3; val_offset:57126*0 + 3*148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57126*0 + 3*148*FLEN/8, x4, x1, x2)

inst_19043:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d2dfe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x569b02 and fs3 == 0 and fe3 == 0x50 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd2dfe; op2val:0x569b02;
op3val:0x287fffe0; valaddr_reg:x3; val_offset:57129*0 + 3*148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57129*0 + 3*148*FLEN/8, x4, x1, x2)

inst_19044:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d2dfe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x569b02 and fs3 == 0 and fe3 == 0x50 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd2dfe; op2val:0x569b02;
op3val:0x287ffff0; valaddr_reg:x3; val_offset:57132*0 + 3*148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57132*0 + 3*148*FLEN/8, x4, x1, x2)

inst_19045:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d2dfe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x569b02 and fs3 == 0 and fe3 == 0x50 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd2dfe; op2val:0x569b02;
op3val:0x287ffff8; valaddr_reg:x3; val_offset:57135*0 + 3*148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57135*0 + 3*148*FLEN/8, x4, x1, x2)

inst_19046:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d2dfe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x569b02 and fs3 == 0 and fe3 == 0x50 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd2dfe; op2val:0x569b02;
op3val:0x287ffffc; valaddr_reg:x3; val_offset:57138*0 + 3*148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57138*0 + 3*148*FLEN/8, x4, x1, x2)

inst_19047:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d2dfe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x569b02 and fs3 == 0 and fe3 == 0x50 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd2dfe; op2val:0x569b02;
op3val:0x287ffffe; valaddr_reg:x3; val_offset:57141*0 + 3*148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57141*0 + 3*148*FLEN/8, x4, x1, x2)

inst_19048:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d2dfe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x569b02 and fs3 == 0 and fe3 == 0x50 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd2dfe; op2val:0x569b02;
op3val:0x287fffff; valaddr_reg:x3; val_offset:57144*0 + 3*148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57144*0 + 3*148*FLEN/8, x4, x1, x2)

inst_19049:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d2dfe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x569b02 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd2dfe; op2val:0x569b02;
op3val:0x3f800001; valaddr_reg:x3; val_offset:57147*0 + 3*148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57147*0 + 3*148*FLEN/8, x4, x1, x2)

inst_19050:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d2dfe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x569b02 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd2dfe; op2val:0x569b02;
op3val:0x3f800003; valaddr_reg:x3; val_offset:57150*0 + 3*148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57150*0 + 3*148*FLEN/8, x4, x1, x2)

inst_19051:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d2dfe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x569b02 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd2dfe; op2val:0x569b02;
op3val:0x3f800007; valaddr_reg:x3; val_offset:57153*0 + 3*148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57153*0 + 3*148*FLEN/8, x4, x1, x2)

inst_19052:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d2dfe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x569b02 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd2dfe; op2val:0x569b02;
op3val:0x3f999999; valaddr_reg:x3; val_offset:57156*0 + 3*148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57156*0 + 3*148*FLEN/8, x4, x1, x2)

inst_19053:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d2dfe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x569b02 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd2dfe; op2val:0x569b02;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:57159*0 + 3*148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57159*0 + 3*148*FLEN/8, x4, x1, x2)

inst_19054:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d2dfe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x569b02 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd2dfe; op2val:0x569b02;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:57162*0 + 3*148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57162*0 + 3*148*FLEN/8, x4, x1, x2)

inst_19055:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d2dfe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x569b02 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd2dfe; op2val:0x569b02;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:57165*0 + 3*148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57165*0 + 3*148*FLEN/8, x4, x1, x2)

inst_19056:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d2dfe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x569b02 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd2dfe; op2val:0x569b02;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:57168*0 + 3*148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57168*0 + 3*148*FLEN/8, x4, x1, x2)

inst_19057:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d2dfe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x569b02 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd2dfe; op2val:0x569b02;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:57171*0 + 3*148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57171*0 + 3*148*FLEN/8, x4, x1, x2)

inst_19058:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d2dfe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x569b02 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd2dfe; op2val:0x569b02;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:57174*0 + 3*148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57174*0 + 3*148*FLEN/8, x4, x1, x2)

inst_19059:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d2dfe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x569b02 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd2dfe; op2val:0x569b02;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:57177*0 + 3*148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57177*0 + 3*148*FLEN/8, x4, x1, x2)

inst_19060:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d2dfe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x569b02 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd2dfe; op2val:0x569b02;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:57180*0 + 3*148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57180*0 + 3*148*FLEN/8, x4, x1, x2)

inst_19061:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d2dfe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x569b02 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd2dfe; op2val:0x569b02;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:57183*0 + 3*148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57183*0 + 3*148*FLEN/8, x4, x1, x2)

inst_19062:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d2dfe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x569b02 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd2dfe; op2val:0x569b02;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:57186*0 + 3*148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57186*0 + 3*148*FLEN/8, x4, x1, x2)

inst_19063:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d2dfe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x569b02 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd2dfe; op2val:0x569b02;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:57189*0 + 3*148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57189*0 + 3*148*FLEN/8, x4, x1, x2)

inst_19064:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d2dfe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x569b02 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd2dfe; op2val:0x569b02;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:57192*0 + 3*148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57192*0 + 3*148*FLEN/8, x4, x1, x2)

inst_19065:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d8201 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd8201; op2val:0x80000000;
op3val:0x80000001; valaddr_reg:x3; val_offset:57195*0 + 3*148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57195*0 + 3*148*FLEN/8, x4, x1, x2)

inst_19066:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d8201 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd8201; op2val:0x80000000;
op3val:0x80000003; valaddr_reg:x3; val_offset:57198*0 + 3*148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57198*0 + 3*148*FLEN/8, x4, x1, x2)

inst_19067:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d8201 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd8201; op2val:0x80000000;
op3val:0x80000007; valaddr_reg:x3; val_offset:57201*0 + 3*148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57201*0 + 3*148*FLEN/8, x4, x1, x2)

inst_19068:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d8201 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd8201; op2val:0x80000000;
op3val:0x80199999; valaddr_reg:x3; val_offset:57204*0 + 3*148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57204*0 + 3*148*FLEN/8, x4, x1, x2)

inst_19069:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d8201 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd8201; op2val:0x80000000;
op3val:0x80249249; valaddr_reg:x3; val_offset:57207*0 + 3*148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57207*0 + 3*148*FLEN/8, x4, x1, x2)

inst_19070:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d8201 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd8201; op2val:0x80000000;
op3val:0x80333333; valaddr_reg:x3; val_offset:57210*0 + 3*148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57210*0 + 3*148*FLEN/8, x4, x1, x2)

inst_19071:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d8201 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd8201; op2val:0x80000000;
op3val:0x8036db6d; valaddr_reg:x3; val_offset:57213*0 + 3*148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57213*0 + 3*148*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2126306546,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(10066329,32,FLEN)
NAN_BOXED(2126306546,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(10785353,32,FLEN)
NAN_BOXED(2126306546,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(11744051,32,FLEN)
NAN_BOXED(2126306546,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(11983725,32,FLEN)
NAN_BOXED(2126306546,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(12303291,32,FLEN)
NAN_BOXED(2126306546,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(12862532,32,FLEN)
NAN_BOXED(2126306546,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(13421772,32,FLEN)
NAN_BOXED(2126306546,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(14380470,32,FLEN)
NAN_BOXED(2126306546,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(15099494,32,FLEN)
NAN_BOXED(2126306546,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(15578843,32,FLEN)
NAN_BOXED(2126306546,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777208,32,FLEN)
NAN_BOXED(2126306546,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777212,32,FLEN)
NAN_BOXED(2126306546,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777214,32,FLEN)
NAN_BOXED(2126306546,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777216,32,FLEN)
NAN_BOXED(2126306546,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777217,32,FLEN)
NAN_BOXED(2126306546,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777219,32,FLEN)
NAN_BOXED(2126306546,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777223,32,FLEN)
NAN_BOXED(2126306546,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777231,32,FLEN)
NAN_BOXED(2126306546,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777247,32,FLEN)
NAN_BOXED(2126306546,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777279,32,FLEN)
NAN_BOXED(2126306546,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777343,32,FLEN)
NAN_BOXED(2126306546,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777471,32,FLEN)
NAN_BOXED(2126306546,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777727,32,FLEN)
NAN_BOXED(2126306546,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16778239,32,FLEN)
NAN_BOXED(2126306546,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16779263,32,FLEN)
NAN_BOXED(2126306546,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16781311,32,FLEN)
NAN_BOXED(2126306546,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16785407,32,FLEN)
NAN_BOXED(2126306546,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16793599,32,FLEN)
NAN_BOXED(2126306546,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16809983,32,FLEN)
NAN_BOXED(2126306546,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16842751,32,FLEN)
NAN_BOXED(2126306546,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16908287,32,FLEN)
NAN_BOXED(2126306546,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(17039359,32,FLEN)
NAN_BOXED(2126306546,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(17301503,32,FLEN)
NAN_BOXED(2126306546,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(17825791,32,FLEN)
NAN_BOXED(2126306546,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(18874367,32,FLEN)
NAN_BOXED(2126306546,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(20971519,32,FLEN)
NAN_BOXED(2126306546,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(20971520,32,FLEN)
NAN_BOXED(2126306546,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(23068672,32,FLEN)
NAN_BOXED(2126306546,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(24117248,32,FLEN)
NAN_BOXED(2126306546,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(24641536,32,FLEN)
NAN_BOXED(2126306546,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(24903680,32,FLEN)
NAN_BOXED(2126306546,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25034752,32,FLEN)
NAN_BOXED(2126306546,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25100288,32,FLEN)
NAN_BOXED(2126306546,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25133056,32,FLEN)
NAN_BOXED(2126306546,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25149440,32,FLEN)
NAN_BOXED(2126306546,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25157632,32,FLEN)
NAN_BOXED(2126306546,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25161728,32,FLEN)
NAN_BOXED(2126306546,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25163776,32,FLEN)
NAN_BOXED(2126306546,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25164800,32,FLEN)
NAN_BOXED(2126306546,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25165312,32,FLEN)
NAN_BOXED(2126306546,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25165568,32,FLEN)
NAN_BOXED(2126306546,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25165696,32,FLEN)
NAN_BOXED(2126306546,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25165760,32,FLEN)
NAN_BOXED(2126306546,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25165792,32,FLEN)
NAN_BOXED(2126306546,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25165808,32,FLEN)
NAN_BOXED(2126306546,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25165816,32,FLEN)
NAN_BOXED(2126306546,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25165820,32,FLEN)
NAN_BOXED(2126306546,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25165822,32,FLEN)
NAN_BOXED(2126306546,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25165823,32,FLEN)
NAN_BOXED(2126327294,32,FLEN)
NAN_BOXED(5675778,32,FLEN)
NAN_BOXED(671088640,32,FLEN)
NAN_BOXED(2126327294,32,FLEN)
NAN_BOXED(5675778,32,FLEN)
NAN_BOXED(671088641,32,FLEN)
NAN_BOXED(2126327294,32,FLEN)
NAN_BOXED(5675778,32,FLEN)
NAN_BOXED(671088643,32,FLEN)
NAN_BOXED(2126327294,32,FLEN)
NAN_BOXED(5675778,32,FLEN)
NAN_BOXED(671088647,32,FLEN)
NAN_BOXED(2126327294,32,FLEN)
NAN_BOXED(5675778,32,FLEN)
NAN_BOXED(671088655,32,FLEN)
NAN_BOXED(2126327294,32,FLEN)
NAN_BOXED(5675778,32,FLEN)
NAN_BOXED(671088671,32,FLEN)
NAN_BOXED(2126327294,32,FLEN)
NAN_BOXED(5675778,32,FLEN)
NAN_BOXED(671088703,32,FLEN)
NAN_BOXED(2126327294,32,FLEN)
NAN_BOXED(5675778,32,FLEN)
NAN_BOXED(671088767,32,FLEN)
NAN_BOXED(2126327294,32,FLEN)
NAN_BOXED(5675778,32,FLEN)
NAN_BOXED(671088895,32,FLEN)
NAN_BOXED(2126327294,32,FLEN)
NAN_BOXED(5675778,32,FLEN)
NAN_BOXED(671089151,32,FLEN)
NAN_BOXED(2126327294,32,FLEN)
NAN_BOXED(5675778,32,FLEN)
NAN_BOXED(671089663,32,FLEN)
NAN_BOXED(2126327294,32,FLEN)
NAN_BOXED(5675778,32,FLEN)
NAN_BOXED(671090687,32,FLEN)
NAN_BOXED(2126327294,32,FLEN)
NAN_BOXED(5675778,32,FLEN)
NAN_BOXED(671092735,32,FLEN)
NAN_BOXED(2126327294,32,FLEN)
NAN_BOXED(5675778,32,FLEN)
NAN_BOXED(671096831,32,FLEN)
NAN_BOXED(2126327294,32,FLEN)
NAN_BOXED(5675778,32,FLEN)
NAN_BOXED(671105023,32,FLEN)
NAN_BOXED(2126327294,32,FLEN)
NAN_BOXED(5675778,32,FLEN)
NAN_BOXED(671121407,32,FLEN)
NAN_BOXED(2126327294,32,FLEN)
NAN_BOXED(5675778,32,FLEN)
NAN_BOXED(671154175,32,FLEN)
NAN_BOXED(2126327294,32,FLEN)
NAN_BOXED(5675778,32,FLEN)
NAN_BOXED(671219711,32,FLEN)
NAN_BOXED(2126327294,32,FLEN)
NAN_BOXED(5675778,32,FLEN)
NAN_BOXED(671350783,32,FLEN)
NAN_BOXED(2126327294,32,FLEN)
NAN_BOXED(5675778,32,FLEN)
NAN_BOXED(671612927,32,FLEN)
NAN_BOXED(2126327294,32,FLEN)
NAN_BOXED(5675778,32,FLEN)
NAN_BOXED(672137215,32,FLEN)
NAN_BOXED(2126327294,32,FLEN)
NAN_BOXED(5675778,32,FLEN)
NAN_BOXED(673185791,32,FLEN)
NAN_BOXED(2126327294,32,FLEN)
NAN_BOXED(5675778,32,FLEN)
NAN_BOXED(675282943,32,FLEN)
NAN_BOXED(2126327294,32,FLEN)
NAN_BOXED(5675778,32,FLEN)
NAN_BOXED(675282944,32,FLEN)
NAN_BOXED(2126327294,32,FLEN)
NAN_BOXED(5675778,32,FLEN)
NAN_BOXED(677380096,32,FLEN)
NAN_BOXED(2126327294,32,FLEN)
NAN_BOXED(5675778,32,FLEN)
NAN_BOXED(678428672,32,FLEN)
NAN_BOXED(2126327294,32,FLEN)
NAN_BOXED(5675778,32,FLEN)
NAN_BOXED(678952960,32,FLEN)
NAN_BOXED(2126327294,32,FLEN)
NAN_BOXED(5675778,32,FLEN)
NAN_BOXED(679215104,32,FLEN)
NAN_BOXED(2126327294,32,FLEN)
NAN_BOXED(5675778,32,FLEN)
NAN_BOXED(679346176,32,FLEN)
NAN_BOXED(2126327294,32,FLEN)
NAN_BOXED(5675778,32,FLEN)
NAN_BOXED(679411712,32,FLEN)
NAN_BOXED(2126327294,32,FLEN)
NAN_BOXED(5675778,32,FLEN)
NAN_BOXED(679444480,32,FLEN)
NAN_BOXED(2126327294,32,FLEN)
NAN_BOXED(5675778,32,FLEN)
NAN_BOXED(679460864,32,FLEN)
NAN_BOXED(2126327294,32,FLEN)
NAN_BOXED(5675778,32,FLEN)
NAN_BOXED(679469056,32,FLEN)
NAN_BOXED(2126327294,32,FLEN)
NAN_BOXED(5675778,32,FLEN)
NAN_BOXED(679473152,32,FLEN)
NAN_BOXED(2126327294,32,FLEN)
NAN_BOXED(5675778,32,FLEN)
NAN_BOXED(679475200,32,FLEN)
NAN_BOXED(2126327294,32,FLEN)
NAN_BOXED(5675778,32,FLEN)
NAN_BOXED(679476224,32,FLEN)
NAN_BOXED(2126327294,32,FLEN)
NAN_BOXED(5675778,32,FLEN)
NAN_BOXED(679476736,32,FLEN)
NAN_BOXED(2126327294,32,FLEN)
NAN_BOXED(5675778,32,FLEN)
NAN_BOXED(679476992,32,FLEN)
NAN_BOXED(2126327294,32,FLEN)
NAN_BOXED(5675778,32,FLEN)
NAN_BOXED(679477120,32,FLEN)
NAN_BOXED(2126327294,32,FLEN)
NAN_BOXED(5675778,32,FLEN)
NAN_BOXED(679477184,32,FLEN)
NAN_BOXED(2126327294,32,FLEN)
NAN_BOXED(5675778,32,FLEN)
NAN_BOXED(679477216,32,FLEN)
NAN_BOXED(2126327294,32,FLEN)
NAN_BOXED(5675778,32,FLEN)
NAN_BOXED(679477232,32,FLEN)
NAN_BOXED(2126327294,32,FLEN)
NAN_BOXED(5675778,32,FLEN)
NAN_BOXED(679477240,32,FLEN)
NAN_BOXED(2126327294,32,FLEN)
NAN_BOXED(5675778,32,FLEN)
NAN_BOXED(679477244,32,FLEN)
NAN_BOXED(2126327294,32,FLEN)
NAN_BOXED(5675778,32,FLEN)
NAN_BOXED(679477246,32,FLEN)
NAN_BOXED(2126327294,32,FLEN)
NAN_BOXED(5675778,32,FLEN)
NAN_BOXED(679477247,32,FLEN)
NAN_BOXED(2126327294,32,FLEN)
NAN_BOXED(5675778,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2126327294,32,FLEN)
NAN_BOXED(5675778,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2126327294,32,FLEN)
NAN_BOXED(5675778,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2126327294,32,FLEN)
NAN_BOXED(5675778,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2126327294,32,FLEN)
NAN_BOXED(5675778,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2126327294,32,FLEN)
NAN_BOXED(5675778,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2126327294,32,FLEN)
NAN_BOXED(5675778,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2126327294,32,FLEN)
NAN_BOXED(5675778,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2126327294,32,FLEN)
NAN_BOXED(5675778,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2126327294,32,FLEN)
NAN_BOXED(5675778,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2126327294,32,FLEN)
NAN_BOXED(5675778,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2126327294,32,FLEN)
NAN_BOXED(5675778,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2126327294,32,FLEN)
NAN_BOXED(5675778,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2126327294,32,FLEN)
NAN_BOXED(5675778,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2126327294,32,FLEN)
NAN_BOXED(5675778,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2126327294,32,FLEN)
NAN_BOXED(5675778,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2126348801,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2126348801,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483651,32,FLEN)
NAN_BOXED(2126348801,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483655,32,FLEN)
NAN_BOXED(2126348801,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149161369,32,FLEN)
NAN_BOXED(2126348801,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149880393,32,FLEN)
NAN_BOXED(2126348801,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2150839091,32,FLEN)
NAN_BOXED(2126348801,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151078765,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
