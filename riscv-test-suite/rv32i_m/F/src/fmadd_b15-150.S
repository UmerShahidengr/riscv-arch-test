
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:17:59 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_19072:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d8201 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd8201; op2val:0x80000000;
op3val:0x803bbbbb; valaddr_reg:x3; val_offset:57216*0 + 3*149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57216*0 + 3*149*FLEN/8, x4, x1, x2)

inst_19073:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d8201 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd8201; op2val:0x80000000;
op3val:0x80444444; valaddr_reg:x3; val_offset:57219*0 + 3*149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57219*0 + 3*149*FLEN/8, x4, x1, x2)

inst_19074:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d8201 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd8201; op2val:0x80000000;
op3val:0x804ccccc; valaddr_reg:x3; val_offset:57222*0 + 3*149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57222*0 + 3*149*FLEN/8, x4, x1, x2)

inst_19075:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d8201 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd8201; op2val:0x80000000;
op3val:0x805b6db6; valaddr_reg:x3; val_offset:57225*0 + 3*149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57225*0 + 3*149*FLEN/8, x4, x1, x2)

inst_19076:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d8201 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd8201; op2val:0x80000000;
op3val:0x80666666; valaddr_reg:x3; val_offset:57228*0 + 3*149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57228*0 + 3*149*FLEN/8, x4, x1, x2)

inst_19077:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d8201 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd8201; op2val:0x80000000;
op3val:0x806db6db; valaddr_reg:x3; val_offset:57231*0 + 3*149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57231*0 + 3*149*FLEN/8, x4, x1, x2)

inst_19078:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d8201 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd8201; op2val:0x80000000;
op3val:0x807ffff8; valaddr_reg:x3; val_offset:57234*0 + 3*149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57234*0 + 3*149*FLEN/8, x4, x1, x2)

inst_19079:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d8201 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd8201; op2val:0x80000000;
op3val:0x807ffffc; valaddr_reg:x3; val_offset:57237*0 + 3*149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57237*0 + 3*149*FLEN/8, x4, x1, x2)

inst_19080:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d8201 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd8201; op2val:0x80000000;
op3val:0x807ffffe; valaddr_reg:x3; val_offset:57240*0 + 3*149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57240*0 + 3*149*FLEN/8, x4, x1, x2)

inst_19081:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d8201 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd8201; op2val:0x80000000;
op3val:0x8c000000; valaddr_reg:x3; val_offset:57243*0 + 3*149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57243*0 + 3*149*FLEN/8, x4, x1, x2)

inst_19082:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d8201 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd8201; op2val:0x80000000;
op3val:0x8c000001; valaddr_reg:x3; val_offset:57246*0 + 3*149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57246*0 + 3*149*FLEN/8, x4, x1, x2)

inst_19083:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d8201 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd8201; op2val:0x80000000;
op3val:0x8c000003; valaddr_reg:x3; val_offset:57249*0 + 3*149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57249*0 + 3*149*FLEN/8, x4, x1, x2)

inst_19084:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d8201 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd8201; op2val:0x80000000;
op3val:0x8c000007; valaddr_reg:x3; val_offset:57252*0 + 3*149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57252*0 + 3*149*FLEN/8, x4, x1, x2)

inst_19085:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d8201 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd8201; op2val:0x80000000;
op3val:0x8c00000f; valaddr_reg:x3; val_offset:57255*0 + 3*149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57255*0 + 3*149*FLEN/8, x4, x1, x2)

inst_19086:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d8201 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd8201; op2val:0x80000000;
op3val:0x8c00001f; valaddr_reg:x3; val_offset:57258*0 + 3*149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57258*0 + 3*149*FLEN/8, x4, x1, x2)

inst_19087:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d8201 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd8201; op2val:0x80000000;
op3val:0x8c00003f; valaddr_reg:x3; val_offset:57261*0 + 3*149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57261*0 + 3*149*FLEN/8, x4, x1, x2)

inst_19088:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d8201 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd8201; op2val:0x80000000;
op3val:0x8c00007f; valaddr_reg:x3; val_offset:57264*0 + 3*149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57264*0 + 3*149*FLEN/8, x4, x1, x2)

inst_19089:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d8201 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd8201; op2val:0x80000000;
op3val:0x8c0000ff; valaddr_reg:x3; val_offset:57267*0 + 3*149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57267*0 + 3*149*FLEN/8, x4, x1, x2)

inst_19090:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d8201 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd8201; op2val:0x80000000;
op3val:0x8c0001ff; valaddr_reg:x3; val_offset:57270*0 + 3*149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57270*0 + 3*149*FLEN/8, x4, x1, x2)

inst_19091:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d8201 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd8201; op2val:0x80000000;
op3val:0x8c0003ff; valaddr_reg:x3; val_offset:57273*0 + 3*149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57273*0 + 3*149*FLEN/8, x4, x1, x2)

inst_19092:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d8201 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd8201; op2val:0x80000000;
op3val:0x8c0007ff; valaddr_reg:x3; val_offset:57276*0 + 3*149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57276*0 + 3*149*FLEN/8, x4, x1, x2)

inst_19093:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d8201 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd8201; op2val:0x80000000;
op3val:0x8c000fff; valaddr_reg:x3; val_offset:57279*0 + 3*149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57279*0 + 3*149*FLEN/8, x4, x1, x2)

inst_19094:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d8201 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd8201; op2val:0x80000000;
op3val:0x8c001fff; valaddr_reg:x3; val_offset:57282*0 + 3*149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57282*0 + 3*149*FLEN/8, x4, x1, x2)

inst_19095:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d8201 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd8201; op2val:0x80000000;
op3val:0x8c003fff; valaddr_reg:x3; val_offset:57285*0 + 3*149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57285*0 + 3*149*FLEN/8, x4, x1, x2)

inst_19096:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d8201 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd8201; op2val:0x80000000;
op3val:0x8c007fff; valaddr_reg:x3; val_offset:57288*0 + 3*149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57288*0 + 3*149*FLEN/8, x4, x1, x2)

inst_19097:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d8201 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd8201; op2val:0x80000000;
op3val:0x8c00ffff; valaddr_reg:x3; val_offset:57291*0 + 3*149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57291*0 + 3*149*FLEN/8, x4, x1, x2)

inst_19098:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d8201 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd8201; op2val:0x80000000;
op3val:0x8c01ffff; valaddr_reg:x3; val_offset:57294*0 + 3*149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57294*0 + 3*149*FLEN/8, x4, x1, x2)

inst_19099:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d8201 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd8201; op2val:0x80000000;
op3val:0x8c03ffff; valaddr_reg:x3; val_offset:57297*0 + 3*149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57297*0 + 3*149*FLEN/8, x4, x1, x2)

inst_19100:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d8201 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd8201; op2val:0x80000000;
op3val:0x8c07ffff; valaddr_reg:x3; val_offset:57300*0 + 3*149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57300*0 + 3*149*FLEN/8, x4, x1, x2)

inst_19101:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d8201 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd8201; op2val:0x80000000;
op3val:0x8c0fffff; valaddr_reg:x3; val_offset:57303*0 + 3*149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57303*0 + 3*149*FLEN/8, x4, x1, x2)

inst_19102:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d8201 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd8201; op2val:0x80000000;
op3val:0x8c1fffff; valaddr_reg:x3; val_offset:57306*0 + 3*149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57306*0 + 3*149*FLEN/8, x4, x1, x2)

inst_19103:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d8201 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd8201; op2val:0x80000000;
op3val:0x8c3fffff; valaddr_reg:x3; val_offset:57309*0 + 3*149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57309*0 + 3*149*FLEN/8, x4, x1, x2)

inst_19104:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d8201 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd8201; op2val:0x80000000;
op3val:0x8c400000; valaddr_reg:x3; val_offset:57312*0 + 3*149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57312*0 + 3*149*FLEN/8, x4, x1, x2)

inst_19105:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d8201 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd8201; op2val:0x80000000;
op3val:0x8c600000; valaddr_reg:x3; val_offset:57315*0 + 3*149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57315*0 + 3*149*FLEN/8, x4, x1, x2)

inst_19106:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d8201 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd8201; op2val:0x80000000;
op3val:0x8c700000; valaddr_reg:x3; val_offset:57318*0 + 3*149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57318*0 + 3*149*FLEN/8, x4, x1, x2)

inst_19107:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d8201 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd8201; op2val:0x80000000;
op3val:0x8c780000; valaddr_reg:x3; val_offset:57321*0 + 3*149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57321*0 + 3*149*FLEN/8, x4, x1, x2)

inst_19108:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d8201 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd8201; op2val:0x80000000;
op3val:0x8c7c0000; valaddr_reg:x3; val_offset:57324*0 + 3*149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57324*0 + 3*149*FLEN/8, x4, x1, x2)

inst_19109:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d8201 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd8201; op2val:0x80000000;
op3val:0x8c7e0000; valaddr_reg:x3; val_offset:57327*0 + 3*149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57327*0 + 3*149*FLEN/8, x4, x1, x2)

inst_19110:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d8201 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd8201; op2val:0x80000000;
op3val:0x8c7f0000; valaddr_reg:x3; val_offset:57330*0 + 3*149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57330*0 + 3*149*FLEN/8, x4, x1, x2)

inst_19111:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d8201 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd8201; op2val:0x80000000;
op3val:0x8c7f8000; valaddr_reg:x3; val_offset:57333*0 + 3*149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57333*0 + 3*149*FLEN/8, x4, x1, x2)

inst_19112:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d8201 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd8201; op2val:0x80000000;
op3val:0x8c7fc000; valaddr_reg:x3; val_offset:57336*0 + 3*149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57336*0 + 3*149*FLEN/8, x4, x1, x2)

inst_19113:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d8201 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd8201; op2val:0x80000000;
op3val:0x8c7fe000; valaddr_reg:x3; val_offset:57339*0 + 3*149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57339*0 + 3*149*FLEN/8, x4, x1, x2)

inst_19114:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d8201 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd8201; op2val:0x80000000;
op3val:0x8c7ff000; valaddr_reg:x3; val_offset:57342*0 + 3*149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57342*0 + 3*149*FLEN/8, x4, x1, x2)

inst_19115:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d8201 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd8201; op2val:0x80000000;
op3val:0x8c7ff800; valaddr_reg:x3; val_offset:57345*0 + 3*149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57345*0 + 3*149*FLEN/8, x4, x1, x2)

inst_19116:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d8201 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd8201; op2val:0x80000000;
op3val:0x8c7ffc00; valaddr_reg:x3; val_offset:57348*0 + 3*149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57348*0 + 3*149*FLEN/8, x4, x1, x2)

inst_19117:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d8201 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd8201; op2val:0x80000000;
op3val:0x8c7ffe00; valaddr_reg:x3; val_offset:57351*0 + 3*149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57351*0 + 3*149*FLEN/8, x4, x1, x2)

inst_19118:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d8201 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd8201; op2val:0x80000000;
op3val:0x8c7fff00; valaddr_reg:x3; val_offset:57354*0 + 3*149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57354*0 + 3*149*FLEN/8, x4, x1, x2)

inst_19119:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d8201 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd8201; op2val:0x80000000;
op3val:0x8c7fff80; valaddr_reg:x3; val_offset:57357*0 + 3*149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57357*0 + 3*149*FLEN/8, x4, x1, x2)

inst_19120:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d8201 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd8201; op2val:0x80000000;
op3val:0x8c7fffc0; valaddr_reg:x3; val_offset:57360*0 + 3*149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57360*0 + 3*149*FLEN/8, x4, x1, x2)

inst_19121:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d8201 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd8201; op2val:0x80000000;
op3val:0x8c7fffe0; valaddr_reg:x3; val_offset:57363*0 + 3*149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57363*0 + 3*149*FLEN/8, x4, x1, x2)

inst_19122:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d8201 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd8201; op2val:0x80000000;
op3val:0x8c7ffff0; valaddr_reg:x3; val_offset:57366*0 + 3*149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57366*0 + 3*149*FLEN/8, x4, x1, x2)

inst_19123:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d8201 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd8201; op2val:0x80000000;
op3val:0x8c7ffff8; valaddr_reg:x3; val_offset:57369*0 + 3*149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57369*0 + 3*149*FLEN/8, x4, x1, x2)

inst_19124:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d8201 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd8201; op2val:0x80000000;
op3val:0x8c7ffffc; valaddr_reg:x3; val_offset:57372*0 + 3*149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57372*0 + 3*149*FLEN/8, x4, x1, x2)

inst_19125:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d8201 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd8201; op2val:0x80000000;
op3val:0x8c7ffffe; valaddr_reg:x3; val_offset:57375*0 + 3*149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57375*0 + 3*149*FLEN/8, x4, x1, x2)

inst_19126:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d8201 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd8201; op2val:0x80000000;
op3val:0x8c7fffff; valaddr_reg:x3; val_offset:57378*0 + 3*149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57378*0 + 3*149*FLEN/8, x4, x1, x2)

inst_19127:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d88ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd88ad; op2val:0x80000000;
op3val:0x80000001; valaddr_reg:x3; val_offset:57381*0 + 3*149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57381*0 + 3*149*FLEN/8, x4, x1, x2)

inst_19128:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d88ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd88ad; op2val:0x80000000;
op3val:0x80000003; valaddr_reg:x3; val_offset:57384*0 + 3*149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57384*0 + 3*149*FLEN/8, x4, x1, x2)

inst_19129:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d88ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd88ad; op2val:0x80000000;
op3val:0x80000007; valaddr_reg:x3; val_offset:57387*0 + 3*149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57387*0 + 3*149*FLEN/8, x4, x1, x2)

inst_19130:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d88ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd88ad; op2val:0x80000000;
op3val:0x80199999; valaddr_reg:x3; val_offset:57390*0 + 3*149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57390*0 + 3*149*FLEN/8, x4, x1, x2)

inst_19131:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d88ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd88ad; op2val:0x80000000;
op3val:0x80249249; valaddr_reg:x3; val_offset:57393*0 + 3*149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57393*0 + 3*149*FLEN/8, x4, x1, x2)

inst_19132:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d88ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd88ad; op2val:0x80000000;
op3val:0x80333333; valaddr_reg:x3; val_offset:57396*0 + 3*149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57396*0 + 3*149*FLEN/8, x4, x1, x2)

inst_19133:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d88ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd88ad; op2val:0x80000000;
op3val:0x8036db6d; valaddr_reg:x3; val_offset:57399*0 + 3*149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57399*0 + 3*149*FLEN/8, x4, x1, x2)

inst_19134:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d88ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd88ad; op2val:0x80000000;
op3val:0x803bbbbb; valaddr_reg:x3; val_offset:57402*0 + 3*149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57402*0 + 3*149*FLEN/8, x4, x1, x2)

inst_19135:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d88ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd88ad; op2val:0x80000000;
op3val:0x80444444; valaddr_reg:x3; val_offset:57405*0 + 3*149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57405*0 + 3*149*FLEN/8, x4, x1, x2)

inst_19136:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d88ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd88ad; op2val:0x80000000;
op3val:0x804ccccc; valaddr_reg:x3; val_offset:57408*0 + 3*149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57408*0 + 3*149*FLEN/8, x4, x1, x2)

inst_19137:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d88ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd88ad; op2val:0x80000000;
op3val:0x805b6db6; valaddr_reg:x3; val_offset:57411*0 + 3*149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57411*0 + 3*149*FLEN/8, x4, x1, x2)

inst_19138:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d88ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd88ad; op2val:0x80000000;
op3val:0x80666666; valaddr_reg:x3; val_offset:57414*0 + 3*149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57414*0 + 3*149*FLEN/8, x4, x1, x2)

inst_19139:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d88ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd88ad; op2val:0x80000000;
op3val:0x806db6db; valaddr_reg:x3; val_offset:57417*0 + 3*149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57417*0 + 3*149*FLEN/8, x4, x1, x2)

inst_19140:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d88ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd88ad; op2val:0x80000000;
op3val:0x807ffff8; valaddr_reg:x3; val_offset:57420*0 + 3*149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57420*0 + 3*149*FLEN/8, x4, x1, x2)

inst_19141:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d88ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd88ad; op2val:0x80000000;
op3val:0x807ffffc; valaddr_reg:x3; val_offset:57423*0 + 3*149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57423*0 + 3*149*FLEN/8, x4, x1, x2)

inst_19142:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d88ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd88ad; op2val:0x80000000;
op3val:0x807ffffe; valaddr_reg:x3; val_offset:57426*0 + 3*149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57426*0 + 3*149*FLEN/8, x4, x1, x2)

inst_19143:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d88ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd88ad; op2val:0x80000000;
op3val:0x81800000; valaddr_reg:x3; val_offset:57429*0 + 3*149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57429*0 + 3*149*FLEN/8, x4, x1, x2)

inst_19144:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d88ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd88ad; op2val:0x80000000;
op3val:0x81800001; valaddr_reg:x3; val_offset:57432*0 + 3*149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57432*0 + 3*149*FLEN/8, x4, x1, x2)

inst_19145:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d88ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd88ad; op2val:0x80000000;
op3val:0x81800003; valaddr_reg:x3; val_offset:57435*0 + 3*149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57435*0 + 3*149*FLEN/8, x4, x1, x2)

inst_19146:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d88ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd88ad; op2val:0x80000000;
op3val:0x81800007; valaddr_reg:x3; val_offset:57438*0 + 3*149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57438*0 + 3*149*FLEN/8, x4, x1, x2)

inst_19147:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d88ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd88ad; op2val:0x80000000;
op3val:0x8180000f; valaddr_reg:x3; val_offset:57441*0 + 3*149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57441*0 + 3*149*FLEN/8, x4, x1, x2)

inst_19148:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d88ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd88ad; op2val:0x80000000;
op3val:0x8180001f; valaddr_reg:x3; val_offset:57444*0 + 3*149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57444*0 + 3*149*FLEN/8, x4, x1, x2)

inst_19149:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d88ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd88ad; op2val:0x80000000;
op3val:0x8180003f; valaddr_reg:x3; val_offset:57447*0 + 3*149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57447*0 + 3*149*FLEN/8, x4, x1, x2)

inst_19150:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d88ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd88ad; op2val:0x80000000;
op3val:0x8180007f; valaddr_reg:x3; val_offset:57450*0 + 3*149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57450*0 + 3*149*FLEN/8, x4, x1, x2)

inst_19151:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d88ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd88ad; op2val:0x80000000;
op3val:0x818000ff; valaddr_reg:x3; val_offset:57453*0 + 3*149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57453*0 + 3*149*FLEN/8, x4, x1, x2)

inst_19152:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d88ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd88ad; op2val:0x80000000;
op3val:0x818001ff; valaddr_reg:x3; val_offset:57456*0 + 3*149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57456*0 + 3*149*FLEN/8, x4, x1, x2)

inst_19153:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d88ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd88ad; op2val:0x80000000;
op3val:0x818003ff; valaddr_reg:x3; val_offset:57459*0 + 3*149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57459*0 + 3*149*FLEN/8, x4, x1, x2)

inst_19154:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d88ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd88ad; op2val:0x80000000;
op3val:0x818007ff; valaddr_reg:x3; val_offset:57462*0 + 3*149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57462*0 + 3*149*FLEN/8, x4, x1, x2)

inst_19155:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d88ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd88ad; op2val:0x80000000;
op3val:0x81800fff; valaddr_reg:x3; val_offset:57465*0 + 3*149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57465*0 + 3*149*FLEN/8, x4, x1, x2)

inst_19156:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d88ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd88ad; op2val:0x80000000;
op3val:0x81801fff; valaddr_reg:x3; val_offset:57468*0 + 3*149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57468*0 + 3*149*FLEN/8, x4, x1, x2)

inst_19157:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d88ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd88ad; op2val:0x80000000;
op3val:0x81803fff; valaddr_reg:x3; val_offset:57471*0 + 3*149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57471*0 + 3*149*FLEN/8, x4, x1, x2)

inst_19158:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d88ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd88ad; op2val:0x80000000;
op3val:0x81807fff; valaddr_reg:x3; val_offset:57474*0 + 3*149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57474*0 + 3*149*FLEN/8, x4, x1, x2)

inst_19159:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d88ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd88ad; op2val:0x80000000;
op3val:0x8180ffff; valaddr_reg:x3; val_offset:57477*0 + 3*149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57477*0 + 3*149*FLEN/8, x4, x1, x2)

inst_19160:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d88ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd88ad; op2val:0x80000000;
op3val:0x8181ffff; valaddr_reg:x3; val_offset:57480*0 + 3*149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57480*0 + 3*149*FLEN/8, x4, x1, x2)

inst_19161:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d88ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd88ad; op2val:0x80000000;
op3val:0x8183ffff; valaddr_reg:x3; val_offset:57483*0 + 3*149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57483*0 + 3*149*FLEN/8, x4, x1, x2)

inst_19162:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d88ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd88ad; op2val:0x80000000;
op3val:0x8187ffff; valaddr_reg:x3; val_offset:57486*0 + 3*149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57486*0 + 3*149*FLEN/8, x4, x1, x2)

inst_19163:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d88ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd88ad; op2val:0x80000000;
op3val:0x818fffff; valaddr_reg:x3; val_offset:57489*0 + 3*149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57489*0 + 3*149*FLEN/8, x4, x1, x2)

inst_19164:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d88ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd88ad; op2val:0x80000000;
op3val:0x819fffff; valaddr_reg:x3; val_offset:57492*0 + 3*149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57492*0 + 3*149*FLEN/8, x4, x1, x2)

inst_19165:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d88ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd88ad; op2val:0x80000000;
op3val:0x81bfffff; valaddr_reg:x3; val_offset:57495*0 + 3*149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57495*0 + 3*149*FLEN/8, x4, x1, x2)

inst_19166:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d88ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd88ad; op2val:0x80000000;
op3val:0x81c00000; valaddr_reg:x3; val_offset:57498*0 + 3*149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57498*0 + 3*149*FLEN/8, x4, x1, x2)

inst_19167:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d88ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd88ad; op2val:0x80000000;
op3val:0x81e00000; valaddr_reg:x3; val_offset:57501*0 + 3*149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57501*0 + 3*149*FLEN/8, x4, x1, x2)

inst_19168:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d88ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd88ad; op2val:0x80000000;
op3val:0x81f00000; valaddr_reg:x3; val_offset:57504*0 + 3*149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57504*0 + 3*149*FLEN/8, x4, x1, x2)

inst_19169:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d88ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd88ad; op2val:0x80000000;
op3val:0x81f80000; valaddr_reg:x3; val_offset:57507*0 + 3*149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57507*0 + 3*149*FLEN/8, x4, x1, x2)

inst_19170:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d88ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd88ad; op2val:0x80000000;
op3val:0x81fc0000; valaddr_reg:x3; val_offset:57510*0 + 3*149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57510*0 + 3*149*FLEN/8, x4, x1, x2)

inst_19171:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d88ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd88ad; op2val:0x80000000;
op3val:0x81fe0000; valaddr_reg:x3; val_offset:57513*0 + 3*149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57513*0 + 3*149*FLEN/8, x4, x1, x2)

inst_19172:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d88ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd88ad; op2val:0x80000000;
op3val:0x81ff0000; valaddr_reg:x3; val_offset:57516*0 + 3*149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57516*0 + 3*149*FLEN/8, x4, x1, x2)

inst_19173:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d88ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd88ad; op2val:0x80000000;
op3val:0x81ff8000; valaddr_reg:x3; val_offset:57519*0 + 3*149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57519*0 + 3*149*FLEN/8, x4, x1, x2)

inst_19174:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d88ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd88ad; op2val:0x80000000;
op3val:0x81ffc000; valaddr_reg:x3; val_offset:57522*0 + 3*149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57522*0 + 3*149*FLEN/8, x4, x1, x2)

inst_19175:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d88ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd88ad; op2val:0x80000000;
op3val:0x81ffe000; valaddr_reg:x3; val_offset:57525*0 + 3*149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57525*0 + 3*149*FLEN/8, x4, x1, x2)

inst_19176:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d88ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd88ad; op2val:0x80000000;
op3val:0x81fff000; valaddr_reg:x3; val_offset:57528*0 + 3*149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57528*0 + 3*149*FLEN/8, x4, x1, x2)

inst_19177:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d88ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd88ad; op2val:0x80000000;
op3val:0x81fff800; valaddr_reg:x3; val_offset:57531*0 + 3*149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57531*0 + 3*149*FLEN/8, x4, x1, x2)

inst_19178:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d88ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd88ad; op2val:0x80000000;
op3val:0x81fffc00; valaddr_reg:x3; val_offset:57534*0 + 3*149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57534*0 + 3*149*FLEN/8, x4, x1, x2)

inst_19179:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d88ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd88ad; op2val:0x80000000;
op3val:0x81fffe00; valaddr_reg:x3; val_offset:57537*0 + 3*149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57537*0 + 3*149*FLEN/8, x4, x1, x2)

inst_19180:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d88ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd88ad; op2val:0x80000000;
op3val:0x81ffff00; valaddr_reg:x3; val_offset:57540*0 + 3*149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57540*0 + 3*149*FLEN/8, x4, x1, x2)

inst_19181:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d88ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd88ad; op2val:0x80000000;
op3val:0x81ffff80; valaddr_reg:x3; val_offset:57543*0 + 3*149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57543*0 + 3*149*FLEN/8, x4, x1, x2)

inst_19182:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d88ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd88ad; op2val:0x80000000;
op3val:0x81ffffc0; valaddr_reg:x3; val_offset:57546*0 + 3*149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57546*0 + 3*149*FLEN/8, x4, x1, x2)

inst_19183:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d88ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd88ad; op2val:0x80000000;
op3val:0x81ffffe0; valaddr_reg:x3; val_offset:57549*0 + 3*149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57549*0 + 3*149*FLEN/8, x4, x1, x2)

inst_19184:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d88ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd88ad; op2val:0x80000000;
op3val:0x81fffff0; valaddr_reg:x3; val_offset:57552*0 + 3*149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57552*0 + 3*149*FLEN/8, x4, x1, x2)

inst_19185:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d88ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd88ad; op2val:0x80000000;
op3val:0x81fffff8; valaddr_reg:x3; val_offset:57555*0 + 3*149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57555*0 + 3*149*FLEN/8, x4, x1, x2)

inst_19186:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d88ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd88ad; op2val:0x80000000;
op3val:0x81fffffc; valaddr_reg:x3; val_offset:57558*0 + 3*149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57558*0 + 3*149*FLEN/8, x4, x1, x2)

inst_19187:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d88ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd88ad; op2val:0x80000000;
op3val:0x81fffffe; valaddr_reg:x3; val_offset:57561*0 + 3*149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57561*0 + 3*149*FLEN/8, x4, x1, x2)

inst_19188:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d88ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd88ad; op2val:0x80000000;
op3val:0x81ffffff; valaddr_reg:x3; val_offset:57564*0 + 3*149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57564*0 + 3*149*FLEN/8, x4, x1, x2)

inst_19189:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3de1ea and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5648f2 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebde1ea; op2val:0x805648f2;
op3val:0xbf800001; valaddr_reg:x3; val_offset:57567*0 + 3*149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57567*0 + 3*149*FLEN/8, x4, x1, x2)

inst_19190:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3de1ea and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5648f2 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebde1ea; op2val:0x805648f2;
op3val:0xbf800003; valaddr_reg:x3; val_offset:57570*0 + 3*149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57570*0 + 3*149*FLEN/8, x4, x1, x2)

inst_19191:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3de1ea and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5648f2 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebde1ea; op2val:0x805648f2;
op3val:0xbf800007; valaddr_reg:x3; val_offset:57573*0 + 3*149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57573*0 + 3*149*FLEN/8, x4, x1, x2)

inst_19192:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3de1ea and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5648f2 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebde1ea; op2val:0x805648f2;
op3val:0xbf999999; valaddr_reg:x3; val_offset:57576*0 + 3*149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57576*0 + 3*149*FLEN/8, x4, x1, x2)

inst_19193:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3de1ea and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5648f2 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebde1ea; op2val:0x805648f2;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:57579*0 + 3*149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57579*0 + 3*149*FLEN/8, x4, x1, x2)

inst_19194:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3de1ea and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5648f2 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebde1ea; op2val:0x805648f2;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:57582*0 + 3*149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57582*0 + 3*149*FLEN/8, x4, x1, x2)

inst_19195:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3de1ea and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5648f2 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebde1ea; op2val:0x805648f2;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:57585*0 + 3*149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57585*0 + 3*149*FLEN/8, x4, x1, x2)

inst_19196:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3de1ea and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5648f2 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebde1ea; op2val:0x805648f2;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:57588*0 + 3*149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57588*0 + 3*149*FLEN/8, x4, x1, x2)

inst_19197:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3de1ea and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5648f2 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebde1ea; op2val:0x805648f2;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:57591*0 + 3*149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57591*0 + 3*149*FLEN/8, x4, x1, x2)

inst_19198:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3de1ea and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5648f2 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebde1ea; op2val:0x805648f2;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:57594*0 + 3*149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57594*0 + 3*149*FLEN/8, x4, x1, x2)

inst_19199:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3de1ea and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5648f2 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebde1ea; op2val:0x805648f2;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:57597*0 + 3*149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57597*0 + 3*149*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2126348801,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151398331,32,FLEN)
NAN_BOXED(2126348801,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151957572,32,FLEN)
NAN_BOXED(2126348801,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2152516812,32,FLEN)
NAN_BOXED(2126348801,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2153475510,32,FLEN)
NAN_BOXED(2126348801,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154194534,32,FLEN)
NAN_BOXED(2126348801,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154673883,32,FLEN)
NAN_BOXED(2126348801,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872248,32,FLEN)
NAN_BOXED(2126348801,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872252,32,FLEN)
NAN_BOXED(2126348801,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2126348801,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348810240,32,FLEN)
NAN_BOXED(2126348801,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348810241,32,FLEN)
NAN_BOXED(2126348801,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348810243,32,FLEN)
NAN_BOXED(2126348801,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348810247,32,FLEN)
NAN_BOXED(2126348801,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348810255,32,FLEN)
NAN_BOXED(2126348801,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348810271,32,FLEN)
NAN_BOXED(2126348801,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348810303,32,FLEN)
NAN_BOXED(2126348801,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348810367,32,FLEN)
NAN_BOXED(2126348801,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348810495,32,FLEN)
NAN_BOXED(2126348801,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348810751,32,FLEN)
NAN_BOXED(2126348801,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348811263,32,FLEN)
NAN_BOXED(2126348801,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348812287,32,FLEN)
NAN_BOXED(2126348801,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348814335,32,FLEN)
NAN_BOXED(2126348801,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348818431,32,FLEN)
NAN_BOXED(2126348801,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348826623,32,FLEN)
NAN_BOXED(2126348801,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348843007,32,FLEN)
NAN_BOXED(2126348801,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348875775,32,FLEN)
NAN_BOXED(2126348801,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348941311,32,FLEN)
NAN_BOXED(2126348801,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2349072383,32,FLEN)
NAN_BOXED(2126348801,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2349334527,32,FLEN)
NAN_BOXED(2126348801,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2349858815,32,FLEN)
NAN_BOXED(2126348801,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2350907391,32,FLEN)
NAN_BOXED(2126348801,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2353004543,32,FLEN)
NAN_BOXED(2126348801,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2353004544,32,FLEN)
NAN_BOXED(2126348801,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2355101696,32,FLEN)
NAN_BOXED(2126348801,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2356150272,32,FLEN)
NAN_BOXED(2126348801,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2356674560,32,FLEN)
NAN_BOXED(2126348801,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2356936704,32,FLEN)
NAN_BOXED(2126348801,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357067776,32,FLEN)
NAN_BOXED(2126348801,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357133312,32,FLEN)
NAN_BOXED(2126348801,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357166080,32,FLEN)
NAN_BOXED(2126348801,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357182464,32,FLEN)
NAN_BOXED(2126348801,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357190656,32,FLEN)
NAN_BOXED(2126348801,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357194752,32,FLEN)
NAN_BOXED(2126348801,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357196800,32,FLEN)
NAN_BOXED(2126348801,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357197824,32,FLEN)
NAN_BOXED(2126348801,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357198336,32,FLEN)
NAN_BOXED(2126348801,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357198592,32,FLEN)
NAN_BOXED(2126348801,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357198720,32,FLEN)
NAN_BOXED(2126348801,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357198784,32,FLEN)
NAN_BOXED(2126348801,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357198816,32,FLEN)
NAN_BOXED(2126348801,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357198832,32,FLEN)
NAN_BOXED(2126348801,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357198840,32,FLEN)
NAN_BOXED(2126348801,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357198844,32,FLEN)
NAN_BOXED(2126348801,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357198846,32,FLEN)
NAN_BOXED(2126348801,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357198847,32,FLEN)
NAN_BOXED(2126350509,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2126350509,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483651,32,FLEN)
NAN_BOXED(2126350509,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483655,32,FLEN)
NAN_BOXED(2126350509,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149161369,32,FLEN)
NAN_BOXED(2126350509,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149880393,32,FLEN)
NAN_BOXED(2126350509,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2150839091,32,FLEN)
NAN_BOXED(2126350509,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151078765,32,FLEN)
NAN_BOXED(2126350509,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151398331,32,FLEN)
NAN_BOXED(2126350509,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151957572,32,FLEN)
NAN_BOXED(2126350509,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2152516812,32,FLEN)
NAN_BOXED(2126350509,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2153475510,32,FLEN)
NAN_BOXED(2126350509,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154194534,32,FLEN)
NAN_BOXED(2126350509,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154673883,32,FLEN)
NAN_BOXED(2126350509,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872248,32,FLEN)
NAN_BOXED(2126350509,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872252,32,FLEN)
NAN_BOXED(2126350509,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2126350509,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172649472,32,FLEN)
NAN_BOXED(2126350509,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172649473,32,FLEN)
NAN_BOXED(2126350509,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172649475,32,FLEN)
NAN_BOXED(2126350509,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172649479,32,FLEN)
NAN_BOXED(2126350509,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172649487,32,FLEN)
NAN_BOXED(2126350509,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172649503,32,FLEN)
NAN_BOXED(2126350509,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172649535,32,FLEN)
NAN_BOXED(2126350509,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172649599,32,FLEN)
NAN_BOXED(2126350509,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172649727,32,FLEN)
NAN_BOXED(2126350509,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172649983,32,FLEN)
NAN_BOXED(2126350509,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172650495,32,FLEN)
NAN_BOXED(2126350509,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172651519,32,FLEN)
NAN_BOXED(2126350509,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172653567,32,FLEN)
NAN_BOXED(2126350509,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172657663,32,FLEN)
NAN_BOXED(2126350509,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172665855,32,FLEN)
NAN_BOXED(2126350509,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172682239,32,FLEN)
NAN_BOXED(2126350509,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172715007,32,FLEN)
NAN_BOXED(2126350509,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172780543,32,FLEN)
NAN_BOXED(2126350509,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172911615,32,FLEN)
NAN_BOXED(2126350509,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2173173759,32,FLEN)
NAN_BOXED(2126350509,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2173698047,32,FLEN)
NAN_BOXED(2126350509,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2174746623,32,FLEN)
NAN_BOXED(2126350509,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2176843775,32,FLEN)
NAN_BOXED(2126350509,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2176843776,32,FLEN)
NAN_BOXED(2126350509,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2178940928,32,FLEN)
NAN_BOXED(2126350509,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2179989504,32,FLEN)
NAN_BOXED(2126350509,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2180513792,32,FLEN)
NAN_BOXED(2126350509,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2180775936,32,FLEN)
NAN_BOXED(2126350509,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2180907008,32,FLEN)
NAN_BOXED(2126350509,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2180972544,32,FLEN)
NAN_BOXED(2126350509,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181005312,32,FLEN)
NAN_BOXED(2126350509,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181021696,32,FLEN)
NAN_BOXED(2126350509,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181029888,32,FLEN)
NAN_BOXED(2126350509,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181033984,32,FLEN)
NAN_BOXED(2126350509,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181036032,32,FLEN)
NAN_BOXED(2126350509,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181037056,32,FLEN)
NAN_BOXED(2126350509,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181037568,32,FLEN)
NAN_BOXED(2126350509,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181037824,32,FLEN)
NAN_BOXED(2126350509,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181037952,32,FLEN)
NAN_BOXED(2126350509,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181038016,32,FLEN)
NAN_BOXED(2126350509,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181038048,32,FLEN)
NAN_BOXED(2126350509,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181038064,32,FLEN)
NAN_BOXED(2126350509,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181038072,32,FLEN)
NAN_BOXED(2126350509,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181038076,32,FLEN)
NAN_BOXED(2126350509,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181038078,32,FLEN)
NAN_BOXED(2126350509,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181038079,32,FLEN)
NAN_BOXED(2126373354,32,FLEN)
NAN_BOXED(2153138418,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2126373354,32,FLEN)
NAN_BOXED(2153138418,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2126373354,32,FLEN)
NAN_BOXED(2153138418,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
NAN_BOXED(2126373354,32,FLEN)
NAN_BOXED(2153138418,32,FLEN)
NAN_BOXED(3214514585,32,FLEN)
NAN_BOXED(2126373354,32,FLEN)
NAN_BOXED(2153138418,32,FLEN)
NAN_BOXED(3215233609,32,FLEN)
NAN_BOXED(2126373354,32,FLEN)
NAN_BOXED(2153138418,32,FLEN)
NAN_BOXED(3216192307,32,FLEN)
NAN_BOXED(2126373354,32,FLEN)
NAN_BOXED(2153138418,32,FLEN)
NAN_BOXED(3216431981,32,FLEN)
NAN_BOXED(2126373354,32,FLEN)
NAN_BOXED(2153138418,32,FLEN)
NAN_BOXED(3216751547,32,FLEN)
NAN_BOXED(2126373354,32,FLEN)
NAN_BOXED(2153138418,32,FLEN)
NAN_BOXED(3217310788,32,FLEN)
NAN_BOXED(2126373354,32,FLEN)
NAN_BOXED(2153138418,32,FLEN)
NAN_BOXED(3217870028,32,FLEN)
NAN_BOXED(2126373354,32,FLEN)
NAN_BOXED(2153138418,32,FLEN)
NAN_BOXED(3218828726,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
