
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:17:59 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_19584:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x430c98 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec30c98; op2val:0x80000000;
op3val:0x88001fff; valaddr_reg:x3; val_offset:58752*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58752*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19585:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x430c98 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec30c98; op2val:0x80000000;
op3val:0x88003fff; valaddr_reg:x3; val_offset:58755*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58755*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19586:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x430c98 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec30c98; op2val:0x80000000;
op3val:0x88007fff; valaddr_reg:x3; val_offset:58758*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58758*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19587:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x430c98 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec30c98; op2val:0x80000000;
op3val:0x8800ffff; valaddr_reg:x3; val_offset:58761*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58761*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19588:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x430c98 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec30c98; op2val:0x80000000;
op3val:0x8801ffff; valaddr_reg:x3; val_offset:58764*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58764*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19589:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x430c98 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec30c98; op2val:0x80000000;
op3val:0x8803ffff; valaddr_reg:x3; val_offset:58767*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58767*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19590:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x430c98 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec30c98; op2val:0x80000000;
op3val:0x8807ffff; valaddr_reg:x3; val_offset:58770*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58770*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19591:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x430c98 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec30c98; op2val:0x80000000;
op3val:0x880fffff; valaddr_reg:x3; val_offset:58773*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58773*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19592:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x430c98 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec30c98; op2val:0x80000000;
op3val:0x881fffff; valaddr_reg:x3; val_offset:58776*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58776*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19593:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x430c98 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec30c98; op2val:0x80000000;
op3val:0x883fffff; valaddr_reg:x3; val_offset:58779*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58779*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19594:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x430c98 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec30c98; op2val:0x80000000;
op3val:0x88400000; valaddr_reg:x3; val_offset:58782*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58782*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19595:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x430c98 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec30c98; op2val:0x80000000;
op3val:0x88600000; valaddr_reg:x3; val_offset:58785*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58785*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19596:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x430c98 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec30c98; op2val:0x80000000;
op3val:0x88700000; valaddr_reg:x3; val_offset:58788*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58788*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19597:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x430c98 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec30c98; op2val:0x80000000;
op3val:0x88780000; valaddr_reg:x3; val_offset:58791*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58791*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19598:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x430c98 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec30c98; op2val:0x80000000;
op3val:0x887c0000; valaddr_reg:x3; val_offset:58794*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58794*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19599:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x430c98 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec30c98; op2val:0x80000000;
op3val:0x887e0000; valaddr_reg:x3; val_offset:58797*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58797*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19600:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x430c98 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec30c98; op2val:0x80000000;
op3val:0x887f0000; valaddr_reg:x3; val_offset:58800*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58800*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19601:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x430c98 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec30c98; op2val:0x80000000;
op3val:0x887f8000; valaddr_reg:x3; val_offset:58803*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58803*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19602:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x430c98 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec30c98; op2val:0x80000000;
op3val:0x887fc000; valaddr_reg:x3; val_offset:58806*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58806*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19603:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x430c98 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec30c98; op2val:0x80000000;
op3val:0x887fe000; valaddr_reg:x3; val_offset:58809*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58809*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19604:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x430c98 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec30c98; op2val:0x80000000;
op3val:0x887ff000; valaddr_reg:x3; val_offset:58812*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58812*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19605:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x430c98 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec30c98; op2val:0x80000000;
op3val:0x887ff800; valaddr_reg:x3; val_offset:58815*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58815*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19606:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x430c98 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec30c98; op2val:0x80000000;
op3val:0x887ffc00; valaddr_reg:x3; val_offset:58818*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58818*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19607:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x430c98 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec30c98; op2val:0x80000000;
op3val:0x887ffe00; valaddr_reg:x3; val_offset:58821*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58821*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19608:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x430c98 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec30c98; op2val:0x80000000;
op3val:0x887fff00; valaddr_reg:x3; val_offset:58824*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58824*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19609:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x430c98 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec30c98; op2val:0x80000000;
op3val:0x887fff80; valaddr_reg:x3; val_offset:58827*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58827*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19610:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x430c98 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec30c98; op2val:0x80000000;
op3val:0x887fffc0; valaddr_reg:x3; val_offset:58830*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58830*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19611:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x430c98 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec30c98; op2val:0x80000000;
op3val:0x887fffe0; valaddr_reg:x3; val_offset:58833*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58833*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19612:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x430c98 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec30c98; op2val:0x80000000;
op3val:0x887ffff0; valaddr_reg:x3; val_offset:58836*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58836*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19613:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x430c98 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec30c98; op2val:0x80000000;
op3val:0x887ffff8; valaddr_reg:x3; val_offset:58839*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58839*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19614:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x430c98 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec30c98; op2val:0x80000000;
op3val:0x887ffffc; valaddr_reg:x3; val_offset:58842*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58842*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19615:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x430c98 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec30c98; op2val:0x80000000;
op3val:0x887ffffe; valaddr_reg:x3; val_offset:58845*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58845*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19616:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x430c98 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec30c98; op2val:0x80000000;
op3val:0x887fffff; valaddr_reg:x3; val_offset:58848*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58848*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19617:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43331c and fs2 == 0 and fe2 == 0x80 and fm2 == 0x27de80 and fs3 == 0 and fe3 == 0xeb and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec3331c; op2val:0x4027de80;
op3val:0x75800000; valaddr_reg:x3; val_offset:58851*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58851*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19618:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43331c and fs2 == 0 and fe2 == 0x80 and fm2 == 0x27de80 and fs3 == 0 and fe3 == 0xeb and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec3331c; op2val:0x4027de80;
op3val:0x75800001; valaddr_reg:x3; val_offset:58854*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58854*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19619:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43331c and fs2 == 0 and fe2 == 0x80 and fm2 == 0x27de80 and fs3 == 0 and fe3 == 0xeb and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec3331c; op2val:0x4027de80;
op3val:0x75800003; valaddr_reg:x3; val_offset:58857*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58857*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19620:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43331c and fs2 == 0 and fe2 == 0x80 and fm2 == 0x27de80 and fs3 == 0 and fe3 == 0xeb and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec3331c; op2val:0x4027de80;
op3val:0x75800007; valaddr_reg:x3; val_offset:58860*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58860*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19621:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43331c and fs2 == 0 and fe2 == 0x80 and fm2 == 0x27de80 and fs3 == 0 and fe3 == 0xeb and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec3331c; op2val:0x4027de80;
op3val:0x7580000f; valaddr_reg:x3; val_offset:58863*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58863*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19622:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43331c and fs2 == 0 and fe2 == 0x80 and fm2 == 0x27de80 and fs3 == 0 and fe3 == 0xeb and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec3331c; op2val:0x4027de80;
op3val:0x7580001f; valaddr_reg:x3; val_offset:58866*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58866*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19623:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43331c and fs2 == 0 and fe2 == 0x80 and fm2 == 0x27de80 and fs3 == 0 and fe3 == 0xeb and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec3331c; op2val:0x4027de80;
op3val:0x7580003f; valaddr_reg:x3; val_offset:58869*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58869*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19624:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43331c and fs2 == 0 and fe2 == 0x80 and fm2 == 0x27de80 and fs3 == 0 and fe3 == 0xeb and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec3331c; op2val:0x4027de80;
op3val:0x7580007f; valaddr_reg:x3; val_offset:58872*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58872*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19625:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43331c and fs2 == 0 and fe2 == 0x80 and fm2 == 0x27de80 and fs3 == 0 and fe3 == 0xeb and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec3331c; op2val:0x4027de80;
op3val:0x758000ff; valaddr_reg:x3; val_offset:58875*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58875*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19626:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43331c and fs2 == 0 and fe2 == 0x80 and fm2 == 0x27de80 and fs3 == 0 and fe3 == 0xeb and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec3331c; op2val:0x4027de80;
op3val:0x758001ff; valaddr_reg:x3; val_offset:58878*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58878*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19627:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43331c and fs2 == 0 and fe2 == 0x80 and fm2 == 0x27de80 and fs3 == 0 and fe3 == 0xeb and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec3331c; op2val:0x4027de80;
op3val:0x758003ff; valaddr_reg:x3; val_offset:58881*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58881*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19628:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43331c and fs2 == 0 and fe2 == 0x80 and fm2 == 0x27de80 and fs3 == 0 and fe3 == 0xeb and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec3331c; op2val:0x4027de80;
op3val:0x758007ff; valaddr_reg:x3; val_offset:58884*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58884*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19629:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43331c and fs2 == 0 and fe2 == 0x80 and fm2 == 0x27de80 and fs3 == 0 and fe3 == 0xeb and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec3331c; op2val:0x4027de80;
op3val:0x75800fff; valaddr_reg:x3; val_offset:58887*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58887*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19630:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43331c and fs2 == 0 and fe2 == 0x80 and fm2 == 0x27de80 and fs3 == 0 and fe3 == 0xeb and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec3331c; op2val:0x4027de80;
op3val:0x75801fff; valaddr_reg:x3; val_offset:58890*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58890*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19631:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43331c and fs2 == 0 and fe2 == 0x80 and fm2 == 0x27de80 and fs3 == 0 and fe3 == 0xeb and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec3331c; op2val:0x4027de80;
op3val:0x75803fff; valaddr_reg:x3; val_offset:58893*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58893*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19632:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43331c and fs2 == 0 and fe2 == 0x80 and fm2 == 0x27de80 and fs3 == 0 and fe3 == 0xeb and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec3331c; op2val:0x4027de80;
op3val:0x75807fff; valaddr_reg:x3; val_offset:58896*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58896*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19633:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43331c and fs2 == 0 and fe2 == 0x80 and fm2 == 0x27de80 and fs3 == 0 and fe3 == 0xeb and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec3331c; op2val:0x4027de80;
op3val:0x7580ffff; valaddr_reg:x3; val_offset:58899*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58899*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19634:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43331c and fs2 == 0 and fe2 == 0x80 and fm2 == 0x27de80 and fs3 == 0 and fe3 == 0xeb and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec3331c; op2val:0x4027de80;
op3val:0x7581ffff; valaddr_reg:x3; val_offset:58902*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58902*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19635:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43331c and fs2 == 0 and fe2 == 0x80 and fm2 == 0x27de80 and fs3 == 0 and fe3 == 0xeb and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec3331c; op2val:0x4027de80;
op3val:0x7583ffff; valaddr_reg:x3; val_offset:58905*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58905*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19636:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43331c and fs2 == 0 and fe2 == 0x80 and fm2 == 0x27de80 and fs3 == 0 and fe3 == 0xeb and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec3331c; op2val:0x4027de80;
op3val:0x7587ffff; valaddr_reg:x3; val_offset:58908*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58908*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19637:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43331c and fs2 == 0 and fe2 == 0x80 and fm2 == 0x27de80 and fs3 == 0 and fe3 == 0xeb and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec3331c; op2val:0x4027de80;
op3val:0x758fffff; valaddr_reg:x3; val_offset:58911*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58911*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19638:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43331c and fs2 == 0 and fe2 == 0x80 and fm2 == 0x27de80 and fs3 == 0 and fe3 == 0xeb and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec3331c; op2val:0x4027de80;
op3val:0x759fffff; valaddr_reg:x3; val_offset:58914*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58914*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19639:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43331c and fs2 == 0 and fe2 == 0x80 and fm2 == 0x27de80 and fs3 == 0 and fe3 == 0xeb and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec3331c; op2val:0x4027de80;
op3val:0x75bfffff; valaddr_reg:x3; val_offset:58917*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58917*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19640:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43331c and fs2 == 0 and fe2 == 0x80 and fm2 == 0x27de80 and fs3 == 0 and fe3 == 0xeb and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec3331c; op2val:0x4027de80;
op3val:0x75c00000; valaddr_reg:x3; val_offset:58920*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58920*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19641:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43331c and fs2 == 0 and fe2 == 0x80 and fm2 == 0x27de80 and fs3 == 0 and fe3 == 0xeb and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec3331c; op2val:0x4027de80;
op3val:0x75e00000; valaddr_reg:x3; val_offset:58923*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58923*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19642:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43331c and fs2 == 0 and fe2 == 0x80 and fm2 == 0x27de80 and fs3 == 0 and fe3 == 0xeb and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec3331c; op2val:0x4027de80;
op3val:0x75f00000; valaddr_reg:x3; val_offset:58926*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58926*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19643:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43331c and fs2 == 0 and fe2 == 0x80 and fm2 == 0x27de80 and fs3 == 0 and fe3 == 0xeb and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec3331c; op2val:0x4027de80;
op3val:0x75f80000; valaddr_reg:x3; val_offset:58929*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58929*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19644:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43331c and fs2 == 0 and fe2 == 0x80 and fm2 == 0x27de80 and fs3 == 0 and fe3 == 0xeb and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec3331c; op2val:0x4027de80;
op3val:0x75fc0000; valaddr_reg:x3; val_offset:58932*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58932*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19645:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43331c and fs2 == 0 and fe2 == 0x80 and fm2 == 0x27de80 and fs3 == 0 and fe3 == 0xeb and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec3331c; op2val:0x4027de80;
op3val:0x75fe0000; valaddr_reg:x3; val_offset:58935*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58935*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19646:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43331c and fs2 == 0 and fe2 == 0x80 and fm2 == 0x27de80 and fs3 == 0 and fe3 == 0xeb and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec3331c; op2val:0x4027de80;
op3val:0x75ff0000; valaddr_reg:x3; val_offset:58938*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58938*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19647:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43331c and fs2 == 0 and fe2 == 0x80 and fm2 == 0x27de80 and fs3 == 0 and fe3 == 0xeb and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec3331c; op2val:0x4027de80;
op3val:0x75ff8000; valaddr_reg:x3; val_offset:58941*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58941*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19648:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43331c and fs2 == 0 and fe2 == 0x80 and fm2 == 0x27de80 and fs3 == 0 and fe3 == 0xeb and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec3331c; op2val:0x4027de80;
op3val:0x75ffc000; valaddr_reg:x3; val_offset:58944*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58944*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19649:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43331c and fs2 == 0 and fe2 == 0x80 and fm2 == 0x27de80 and fs3 == 0 and fe3 == 0xeb and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec3331c; op2val:0x4027de80;
op3val:0x75ffe000; valaddr_reg:x3; val_offset:58947*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58947*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19650:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43331c and fs2 == 0 and fe2 == 0x80 and fm2 == 0x27de80 and fs3 == 0 and fe3 == 0xeb and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec3331c; op2val:0x4027de80;
op3val:0x75fff000; valaddr_reg:x3; val_offset:58950*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58950*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19651:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43331c and fs2 == 0 and fe2 == 0x80 and fm2 == 0x27de80 and fs3 == 0 and fe3 == 0xeb and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec3331c; op2val:0x4027de80;
op3val:0x75fff800; valaddr_reg:x3; val_offset:58953*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58953*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19652:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43331c and fs2 == 0 and fe2 == 0x80 and fm2 == 0x27de80 and fs3 == 0 and fe3 == 0xeb and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec3331c; op2val:0x4027de80;
op3val:0x75fffc00; valaddr_reg:x3; val_offset:58956*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58956*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19653:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43331c and fs2 == 0 and fe2 == 0x80 and fm2 == 0x27de80 and fs3 == 0 and fe3 == 0xeb and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec3331c; op2val:0x4027de80;
op3val:0x75fffe00; valaddr_reg:x3; val_offset:58959*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58959*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19654:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43331c and fs2 == 0 and fe2 == 0x80 and fm2 == 0x27de80 and fs3 == 0 and fe3 == 0xeb and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec3331c; op2val:0x4027de80;
op3val:0x75ffff00; valaddr_reg:x3; val_offset:58962*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58962*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19655:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43331c and fs2 == 0 and fe2 == 0x80 and fm2 == 0x27de80 and fs3 == 0 and fe3 == 0xeb and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec3331c; op2val:0x4027de80;
op3val:0x75ffff80; valaddr_reg:x3; val_offset:58965*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58965*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19656:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43331c and fs2 == 0 and fe2 == 0x80 and fm2 == 0x27de80 and fs3 == 0 and fe3 == 0xeb and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec3331c; op2val:0x4027de80;
op3val:0x75ffffc0; valaddr_reg:x3; val_offset:58968*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58968*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19657:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43331c and fs2 == 0 and fe2 == 0x80 and fm2 == 0x27de80 and fs3 == 0 and fe3 == 0xeb and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec3331c; op2val:0x4027de80;
op3val:0x75ffffe0; valaddr_reg:x3; val_offset:58971*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58971*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19658:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43331c and fs2 == 0 and fe2 == 0x80 and fm2 == 0x27de80 and fs3 == 0 and fe3 == 0xeb and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec3331c; op2val:0x4027de80;
op3val:0x75fffff0; valaddr_reg:x3; val_offset:58974*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58974*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19659:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43331c and fs2 == 0 and fe2 == 0x80 and fm2 == 0x27de80 and fs3 == 0 and fe3 == 0xeb and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec3331c; op2val:0x4027de80;
op3val:0x75fffff8; valaddr_reg:x3; val_offset:58977*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58977*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19660:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43331c and fs2 == 0 and fe2 == 0x80 and fm2 == 0x27de80 and fs3 == 0 and fe3 == 0xeb and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec3331c; op2val:0x4027de80;
op3val:0x75fffffc; valaddr_reg:x3; val_offset:58980*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58980*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19661:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43331c and fs2 == 0 and fe2 == 0x80 and fm2 == 0x27de80 and fs3 == 0 and fe3 == 0xeb and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec3331c; op2val:0x4027de80;
op3val:0x75fffffe; valaddr_reg:x3; val_offset:58983*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58983*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19662:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43331c and fs2 == 0 and fe2 == 0x80 and fm2 == 0x27de80 and fs3 == 0 and fe3 == 0xeb and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec3331c; op2val:0x4027de80;
op3val:0x75ffffff; valaddr_reg:x3; val_offset:58986*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58986*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19663:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43331c and fs2 == 0 and fe2 == 0x80 and fm2 == 0x27de80 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec3331c; op2val:0x4027de80;
op3val:0x7f000001; valaddr_reg:x3; val_offset:58989*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58989*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19664:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43331c and fs2 == 0 and fe2 == 0x80 and fm2 == 0x27de80 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec3331c; op2val:0x4027de80;
op3val:0x7f000003; valaddr_reg:x3; val_offset:58992*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58992*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19665:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43331c and fs2 == 0 and fe2 == 0x80 and fm2 == 0x27de80 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec3331c; op2val:0x4027de80;
op3val:0x7f000007; valaddr_reg:x3; val_offset:58995*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58995*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19666:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43331c and fs2 == 0 and fe2 == 0x80 and fm2 == 0x27de80 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec3331c; op2val:0x4027de80;
op3val:0x7f199999; valaddr_reg:x3; val_offset:58998*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58998*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19667:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43331c and fs2 == 0 and fe2 == 0x80 and fm2 == 0x27de80 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec3331c; op2val:0x4027de80;
op3val:0x7f249249; valaddr_reg:x3; val_offset:59001*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59001*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19668:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43331c and fs2 == 0 and fe2 == 0x80 and fm2 == 0x27de80 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec3331c; op2val:0x4027de80;
op3val:0x7f333333; valaddr_reg:x3; val_offset:59004*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59004*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19669:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43331c and fs2 == 0 and fe2 == 0x80 and fm2 == 0x27de80 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec3331c; op2val:0x4027de80;
op3val:0x7f36db6d; valaddr_reg:x3; val_offset:59007*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59007*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19670:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43331c and fs2 == 0 and fe2 == 0x80 and fm2 == 0x27de80 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec3331c; op2val:0x4027de80;
op3val:0x7f3bbbbb; valaddr_reg:x3; val_offset:59010*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59010*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19671:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43331c and fs2 == 0 and fe2 == 0x80 and fm2 == 0x27de80 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec3331c; op2val:0x4027de80;
op3val:0x7f444444; valaddr_reg:x3; val_offset:59013*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59013*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19672:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43331c and fs2 == 0 and fe2 == 0x80 and fm2 == 0x27de80 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec3331c; op2val:0x4027de80;
op3val:0x7f4ccccc; valaddr_reg:x3; val_offset:59016*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59016*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19673:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43331c and fs2 == 0 and fe2 == 0x80 and fm2 == 0x27de80 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec3331c; op2val:0x4027de80;
op3val:0x7f5b6db6; valaddr_reg:x3; val_offset:59019*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59019*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19674:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43331c and fs2 == 0 and fe2 == 0x80 and fm2 == 0x27de80 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec3331c; op2val:0x4027de80;
op3val:0x7f666666; valaddr_reg:x3; val_offset:59022*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59022*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19675:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43331c and fs2 == 0 and fe2 == 0x80 and fm2 == 0x27de80 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec3331c; op2val:0x4027de80;
op3val:0x7f6db6db; valaddr_reg:x3; val_offset:59025*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59025*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19676:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43331c and fs2 == 0 and fe2 == 0x80 and fm2 == 0x27de80 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec3331c; op2val:0x4027de80;
op3val:0x7f7ffff8; valaddr_reg:x3; val_offset:59028*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59028*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19677:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43331c and fs2 == 0 and fe2 == 0x80 and fm2 == 0x27de80 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec3331c; op2val:0x4027de80;
op3val:0x7f7ffffc; valaddr_reg:x3; val_offset:59031*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59031*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19678:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43331c and fs2 == 0 and fe2 == 0x80 and fm2 == 0x27de80 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec3331c; op2val:0x4027de80;
op3val:0x7f7ffffe; valaddr_reg:x3; val_offset:59034*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59034*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19679:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x46e94e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec6e94e; op2val:0x80000000;
op3val:0x80000001; valaddr_reg:x3; val_offset:59037*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59037*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19680:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x46e94e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec6e94e; op2val:0x80000000;
op3val:0x80000003; valaddr_reg:x3; val_offset:59040*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59040*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19681:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x46e94e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec6e94e; op2val:0x80000000;
op3val:0x80000007; valaddr_reg:x3; val_offset:59043*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59043*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19682:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x46e94e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec6e94e; op2val:0x80000000;
op3val:0x80199999; valaddr_reg:x3; val_offset:59046*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59046*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19683:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x46e94e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec6e94e; op2val:0x80000000;
op3val:0x80249249; valaddr_reg:x3; val_offset:59049*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59049*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19684:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x46e94e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec6e94e; op2val:0x80000000;
op3val:0x80333333; valaddr_reg:x3; val_offset:59052*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59052*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19685:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x46e94e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec6e94e; op2val:0x80000000;
op3val:0x8036db6d; valaddr_reg:x3; val_offset:59055*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59055*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19686:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x46e94e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec6e94e; op2val:0x80000000;
op3val:0x803bbbbb; valaddr_reg:x3; val_offset:59058*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59058*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19687:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x46e94e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec6e94e; op2val:0x80000000;
op3val:0x80444444; valaddr_reg:x3; val_offset:59061*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59061*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19688:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x46e94e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec6e94e; op2val:0x80000000;
op3val:0x804ccccc; valaddr_reg:x3; val_offset:59064*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59064*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19689:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x46e94e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec6e94e; op2val:0x80000000;
op3val:0x805b6db6; valaddr_reg:x3; val_offset:59067*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59067*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19690:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x46e94e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec6e94e; op2val:0x80000000;
op3val:0x80666666; valaddr_reg:x3; val_offset:59070*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59070*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19691:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x46e94e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec6e94e; op2val:0x80000000;
op3val:0x806db6db; valaddr_reg:x3; val_offset:59073*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59073*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19692:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x46e94e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec6e94e; op2val:0x80000000;
op3val:0x807ffff8; valaddr_reg:x3; val_offset:59076*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59076*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19693:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x46e94e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec6e94e; op2val:0x80000000;
op3val:0x807ffffc; valaddr_reg:x3; val_offset:59079*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59079*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19694:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x46e94e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec6e94e; op2val:0x80000000;
op3val:0x807ffffe; valaddr_reg:x3; val_offset:59082*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59082*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19695:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x46e94e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec6e94e; op2val:0x80000000;
op3val:0x82000000; valaddr_reg:x3; val_offset:59085*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59085*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19696:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x46e94e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec6e94e; op2val:0x80000000;
op3val:0x82000001; valaddr_reg:x3; val_offset:59088*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59088*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19697:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x46e94e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec6e94e; op2val:0x80000000;
op3val:0x82000003; valaddr_reg:x3; val_offset:59091*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59091*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19698:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x46e94e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec6e94e; op2val:0x80000000;
op3val:0x82000007; valaddr_reg:x3; val_offset:59094*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59094*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19699:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x46e94e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec6e94e; op2val:0x80000000;
op3val:0x8200000f; valaddr_reg:x3; val_offset:59097*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59097*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19700:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x46e94e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec6e94e; op2val:0x80000000;
op3val:0x8200001f; valaddr_reg:x3; val_offset:59100*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59100*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19701:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x46e94e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec6e94e; op2val:0x80000000;
op3val:0x8200003f; valaddr_reg:x3; val_offset:59103*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59103*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19702:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x46e94e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec6e94e; op2val:0x80000000;
op3val:0x8200007f; valaddr_reg:x3; val_offset:59106*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59106*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19703:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x46e94e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec6e94e; op2val:0x80000000;
op3val:0x820000ff; valaddr_reg:x3; val_offset:59109*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59109*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19704:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x46e94e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec6e94e; op2val:0x80000000;
op3val:0x820001ff; valaddr_reg:x3; val_offset:59112*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59112*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19705:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x46e94e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec6e94e; op2val:0x80000000;
op3val:0x820003ff; valaddr_reg:x3; val_offset:59115*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59115*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19706:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x46e94e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec6e94e; op2val:0x80000000;
op3val:0x820007ff; valaddr_reg:x3; val_offset:59118*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59118*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19707:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x46e94e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec6e94e; op2val:0x80000000;
op3val:0x82000fff; valaddr_reg:x3; val_offset:59121*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59121*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19708:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x46e94e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec6e94e; op2val:0x80000000;
op3val:0x82001fff; valaddr_reg:x3; val_offset:59124*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59124*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19709:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x46e94e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec6e94e; op2val:0x80000000;
op3val:0x82003fff; valaddr_reg:x3; val_offset:59127*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59127*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19710:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x46e94e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec6e94e; op2val:0x80000000;
op3val:0x82007fff; valaddr_reg:x3; val_offset:59130*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59130*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19711:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x46e94e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec6e94e; op2val:0x80000000;
op3val:0x8200ffff; valaddr_reg:x3; val_offset:59133*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59133*0 + 3*153*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2126711960,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281709567,32,FLEN)
NAN_BOXED(2126711960,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281717759,32,FLEN)
NAN_BOXED(2126711960,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281734143,32,FLEN)
NAN_BOXED(2126711960,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281766911,32,FLEN)
NAN_BOXED(2126711960,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281832447,32,FLEN)
NAN_BOXED(2126711960,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281963519,32,FLEN)
NAN_BOXED(2126711960,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2282225663,32,FLEN)
NAN_BOXED(2126711960,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2282749951,32,FLEN)
NAN_BOXED(2126711960,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2283798527,32,FLEN)
NAN_BOXED(2126711960,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2285895679,32,FLEN)
NAN_BOXED(2126711960,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2285895680,32,FLEN)
NAN_BOXED(2126711960,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2287992832,32,FLEN)
NAN_BOXED(2126711960,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2289041408,32,FLEN)
NAN_BOXED(2126711960,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2289565696,32,FLEN)
NAN_BOXED(2126711960,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2289827840,32,FLEN)
NAN_BOXED(2126711960,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2289958912,32,FLEN)
NAN_BOXED(2126711960,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290024448,32,FLEN)
NAN_BOXED(2126711960,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290057216,32,FLEN)
NAN_BOXED(2126711960,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290073600,32,FLEN)
NAN_BOXED(2126711960,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290081792,32,FLEN)
NAN_BOXED(2126711960,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290085888,32,FLEN)
NAN_BOXED(2126711960,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290087936,32,FLEN)
NAN_BOXED(2126711960,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290088960,32,FLEN)
NAN_BOXED(2126711960,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290089472,32,FLEN)
NAN_BOXED(2126711960,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290089728,32,FLEN)
NAN_BOXED(2126711960,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290089856,32,FLEN)
NAN_BOXED(2126711960,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290089920,32,FLEN)
NAN_BOXED(2126711960,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290089952,32,FLEN)
NAN_BOXED(2126711960,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290089968,32,FLEN)
NAN_BOXED(2126711960,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290089976,32,FLEN)
NAN_BOXED(2126711960,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290089980,32,FLEN)
NAN_BOXED(2126711960,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290089982,32,FLEN)
NAN_BOXED(2126711960,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290089983,32,FLEN)
NAN_BOXED(2126721820,32,FLEN)
NAN_BOXED(1076354688,32,FLEN)
NAN_BOXED(1971322880,32,FLEN)
NAN_BOXED(2126721820,32,FLEN)
NAN_BOXED(1076354688,32,FLEN)
NAN_BOXED(1971322881,32,FLEN)
NAN_BOXED(2126721820,32,FLEN)
NAN_BOXED(1076354688,32,FLEN)
NAN_BOXED(1971322883,32,FLEN)
NAN_BOXED(2126721820,32,FLEN)
NAN_BOXED(1076354688,32,FLEN)
NAN_BOXED(1971322887,32,FLEN)
NAN_BOXED(2126721820,32,FLEN)
NAN_BOXED(1076354688,32,FLEN)
NAN_BOXED(1971322895,32,FLEN)
NAN_BOXED(2126721820,32,FLEN)
NAN_BOXED(1076354688,32,FLEN)
NAN_BOXED(1971322911,32,FLEN)
NAN_BOXED(2126721820,32,FLEN)
NAN_BOXED(1076354688,32,FLEN)
NAN_BOXED(1971322943,32,FLEN)
NAN_BOXED(2126721820,32,FLEN)
NAN_BOXED(1076354688,32,FLEN)
NAN_BOXED(1971323007,32,FLEN)
NAN_BOXED(2126721820,32,FLEN)
NAN_BOXED(1076354688,32,FLEN)
NAN_BOXED(1971323135,32,FLEN)
NAN_BOXED(2126721820,32,FLEN)
NAN_BOXED(1076354688,32,FLEN)
NAN_BOXED(1971323391,32,FLEN)
NAN_BOXED(2126721820,32,FLEN)
NAN_BOXED(1076354688,32,FLEN)
NAN_BOXED(1971323903,32,FLEN)
NAN_BOXED(2126721820,32,FLEN)
NAN_BOXED(1076354688,32,FLEN)
NAN_BOXED(1971324927,32,FLEN)
NAN_BOXED(2126721820,32,FLEN)
NAN_BOXED(1076354688,32,FLEN)
NAN_BOXED(1971326975,32,FLEN)
NAN_BOXED(2126721820,32,FLEN)
NAN_BOXED(1076354688,32,FLEN)
NAN_BOXED(1971331071,32,FLEN)
NAN_BOXED(2126721820,32,FLEN)
NAN_BOXED(1076354688,32,FLEN)
NAN_BOXED(1971339263,32,FLEN)
NAN_BOXED(2126721820,32,FLEN)
NAN_BOXED(1076354688,32,FLEN)
NAN_BOXED(1971355647,32,FLEN)
NAN_BOXED(2126721820,32,FLEN)
NAN_BOXED(1076354688,32,FLEN)
NAN_BOXED(1971388415,32,FLEN)
NAN_BOXED(2126721820,32,FLEN)
NAN_BOXED(1076354688,32,FLEN)
NAN_BOXED(1971453951,32,FLEN)
NAN_BOXED(2126721820,32,FLEN)
NAN_BOXED(1076354688,32,FLEN)
NAN_BOXED(1971585023,32,FLEN)
NAN_BOXED(2126721820,32,FLEN)
NAN_BOXED(1076354688,32,FLEN)
NAN_BOXED(1971847167,32,FLEN)
NAN_BOXED(2126721820,32,FLEN)
NAN_BOXED(1076354688,32,FLEN)
NAN_BOXED(1972371455,32,FLEN)
NAN_BOXED(2126721820,32,FLEN)
NAN_BOXED(1076354688,32,FLEN)
NAN_BOXED(1973420031,32,FLEN)
NAN_BOXED(2126721820,32,FLEN)
NAN_BOXED(1076354688,32,FLEN)
NAN_BOXED(1975517183,32,FLEN)
NAN_BOXED(2126721820,32,FLEN)
NAN_BOXED(1076354688,32,FLEN)
NAN_BOXED(1975517184,32,FLEN)
NAN_BOXED(2126721820,32,FLEN)
NAN_BOXED(1076354688,32,FLEN)
NAN_BOXED(1977614336,32,FLEN)
NAN_BOXED(2126721820,32,FLEN)
NAN_BOXED(1076354688,32,FLEN)
NAN_BOXED(1978662912,32,FLEN)
NAN_BOXED(2126721820,32,FLEN)
NAN_BOXED(1076354688,32,FLEN)
NAN_BOXED(1979187200,32,FLEN)
NAN_BOXED(2126721820,32,FLEN)
NAN_BOXED(1076354688,32,FLEN)
NAN_BOXED(1979449344,32,FLEN)
NAN_BOXED(2126721820,32,FLEN)
NAN_BOXED(1076354688,32,FLEN)
NAN_BOXED(1979580416,32,FLEN)
NAN_BOXED(2126721820,32,FLEN)
NAN_BOXED(1076354688,32,FLEN)
NAN_BOXED(1979645952,32,FLEN)
NAN_BOXED(2126721820,32,FLEN)
NAN_BOXED(1076354688,32,FLEN)
NAN_BOXED(1979678720,32,FLEN)
NAN_BOXED(2126721820,32,FLEN)
NAN_BOXED(1076354688,32,FLEN)
NAN_BOXED(1979695104,32,FLEN)
NAN_BOXED(2126721820,32,FLEN)
NAN_BOXED(1076354688,32,FLEN)
NAN_BOXED(1979703296,32,FLEN)
NAN_BOXED(2126721820,32,FLEN)
NAN_BOXED(1076354688,32,FLEN)
NAN_BOXED(1979707392,32,FLEN)
NAN_BOXED(2126721820,32,FLEN)
NAN_BOXED(1076354688,32,FLEN)
NAN_BOXED(1979709440,32,FLEN)
NAN_BOXED(2126721820,32,FLEN)
NAN_BOXED(1076354688,32,FLEN)
NAN_BOXED(1979710464,32,FLEN)
NAN_BOXED(2126721820,32,FLEN)
NAN_BOXED(1076354688,32,FLEN)
NAN_BOXED(1979710976,32,FLEN)
NAN_BOXED(2126721820,32,FLEN)
NAN_BOXED(1076354688,32,FLEN)
NAN_BOXED(1979711232,32,FLEN)
NAN_BOXED(2126721820,32,FLEN)
NAN_BOXED(1076354688,32,FLEN)
NAN_BOXED(1979711360,32,FLEN)
NAN_BOXED(2126721820,32,FLEN)
NAN_BOXED(1076354688,32,FLEN)
NAN_BOXED(1979711424,32,FLEN)
NAN_BOXED(2126721820,32,FLEN)
NAN_BOXED(1076354688,32,FLEN)
NAN_BOXED(1979711456,32,FLEN)
NAN_BOXED(2126721820,32,FLEN)
NAN_BOXED(1076354688,32,FLEN)
NAN_BOXED(1979711472,32,FLEN)
NAN_BOXED(2126721820,32,FLEN)
NAN_BOXED(1076354688,32,FLEN)
NAN_BOXED(1979711480,32,FLEN)
NAN_BOXED(2126721820,32,FLEN)
NAN_BOXED(1076354688,32,FLEN)
NAN_BOXED(1979711484,32,FLEN)
NAN_BOXED(2126721820,32,FLEN)
NAN_BOXED(1076354688,32,FLEN)
NAN_BOXED(1979711486,32,FLEN)
NAN_BOXED(2126721820,32,FLEN)
NAN_BOXED(1076354688,32,FLEN)
NAN_BOXED(1979711487,32,FLEN)
NAN_BOXED(2126721820,32,FLEN)
NAN_BOXED(1076354688,32,FLEN)
NAN_BOXED(2130706433,32,FLEN)
NAN_BOXED(2126721820,32,FLEN)
NAN_BOXED(1076354688,32,FLEN)
NAN_BOXED(2130706435,32,FLEN)
NAN_BOXED(2126721820,32,FLEN)
NAN_BOXED(1076354688,32,FLEN)
NAN_BOXED(2130706439,32,FLEN)
NAN_BOXED(2126721820,32,FLEN)
NAN_BOXED(1076354688,32,FLEN)
NAN_BOXED(2132384153,32,FLEN)
NAN_BOXED(2126721820,32,FLEN)
NAN_BOXED(1076354688,32,FLEN)
NAN_BOXED(2133103177,32,FLEN)
NAN_BOXED(2126721820,32,FLEN)
NAN_BOXED(1076354688,32,FLEN)
NAN_BOXED(2134061875,32,FLEN)
NAN_BOXED(2126721820,32,FLEN)
NAN_BOXED(1076354688,32,FLEN)
NAN_BOXED(2134301549,32,FLEN)
NAN_BOXED(2126721820,32,FLEN)
NAN_BOXED(1076354688,32,FLEN)
NAN_BOXED(2134621115,32,FLEN)
NAN_BOXED(2126721820,32,FLEN)
NAN_BOXED(1076354688,32,FLEN)
NAN_BOXED(2135180356,32,FLEN)
NAN_BOXED(2126721820,32,FLEN)
NAN_BOXED(1076354688,32,FLEN)
NAN_BOXED(2135739596,32,FLEN)
NAN_BOXED(2126721820,32,FLEN)
NAN_BOXED(1076354688,32,FLEN)
NAN_BOXED(2136698294,32,FLEN)
NAN_BOXED(2126721820,32,FLEN)
NAN_BOXED(1076354688,32,FLEN)
NAN_BOXED(2137417318,32,FLEN)
NAN_BOXED(2126721820,32,FLEN)
NAN_BOXED(1076354688,32,FLEN)
NAN_BOXED(2137896667,32,FLEN)
NAN_BOXED(2126721820,32,FLEN)
NAN_BOXED(1076354688,32,FLEN)
NAN_BOXED(2139095032,32,FLEN)
NAN_BOXED(2126721820,32,FLEN)
NAN_BOXED(1076354688,32,FLEN)
NAN_BOXED(2139095036,32,FLEN)
NAN_BOXED(2126721820,32,FLEN)
NAN_BOXED(1076354688,32,FLEN)
NAN_BOXED(2139095038,32,FLEN)
NAN_BOXED(2126965070,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2126965070,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483651,32,FLEN)
NAN_BOXED(2126965070,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483655,32,FLEN)
NAN_BOXED(2126965070,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149161369,32,FLEN)
NAN_BOXED(2126965070,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149880393,32,FLEN)
NAN_BOXED(2126965070,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2150839091,32,FLEN)
NAN_BOXED(2126965070,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151078765,32,FLEN)
NAN_BOXED(2126965070,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151398331,32,FLEN)
NAN_BOXED(2126965070,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151957572,32,FLEN)
NAN_BOXED(2126965070,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2152516812,32,FLEN)
NAN_BOXED(2126965070,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2153475510,32,FLEN)
NAN_BOXED(2126965070,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154194534,32,FLEN)
NAN_BOXED(2126965070,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154673883,32,FLEN)
NAN_BOXED(2126965070,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872248,32,FLEN)
NAN_BOXED(2126965070,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872252,32,FLEN)
NAN_BOXED(2126965070,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2126965070,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181038080,32,FLEN)
NAN_BOXED(2126965070,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181038081,32,FLEN)
NAN_BOXED(2126965070,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181038083,32,FLEN)
NAN_BOXED(2126965070,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181038087,32,FLEN)
NAN_BOXED(2126965070,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181038095,32,FLEN)
NAN_BOXED(2126965070,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181038111,32,FLEN)
NAN_BOXED(2126965070,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181038143,32,FLEN)
NAN_BOXED(2126965070,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181038207,32,FLEN)
NAN_BOXED(2126965070,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181038335,32,FLEN)
NAN_BOXED(2126965070,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181038591,32,FLEN)
NAN_BOXED(2126965070,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181039103,32,FLEN)
NAN_BOXED(2126965070,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181040127,32,FLEN)
NAN_BOXED(2126965070,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181042175,32,FLEN)
NAN_BOXED(2126965070,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181046271,32,FLEN)
NAN_BOXED(2126965070,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181054463,32,FLEN)
NAN_BOXED(2126965070,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181070847,32,FLEN)
NAN_BOXED(2126965070,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181103615,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
