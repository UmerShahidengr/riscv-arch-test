
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:17:59 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_19712:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x46e94e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec6e94e; op2val:0x80000000;
op3val:0x8201ffff; valaddr_reg:x3; val_offset:59136*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59136*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19713:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x46e94e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec6e94e; op2val:0x80000000;
op3val:0x8203ffff; valaddr_reg:x3; val_offset:59139*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59139*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19714:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x46e94e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec6e94e; op2val:0x80000000;
op3val:0x8207ffff; valaddr_reg:x3; val_offset:59142*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59142*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19715:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x46e94e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec6e94e; op2val:0x80000000;
op3val:0x820fffff; valaddr_reg:x3; val_offset:59145*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59145*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19716:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x46e94e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec6e94e; op2val:0x80000000;
op3val:0x821fffff; valaddr_reg:x3; val_offset:59148*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59148*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19717:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x46e94e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec6e94e; op2val:0x80000000;
op3val:0x823fffff; valaddr_reg:x3; val_offset:59151*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59151*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19718:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x46e94e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec6e94e; op2val:0x80000000;
op3val:0x82400000; valaddr_reg:x3; val_offset:59154*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59154*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19719:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x46e94e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec6e94e; op2val:0x80000000;
op3val:0x82600000; valaddr_reg:x3; val_offset:59157*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59157*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19720:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x46e94e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec6e94e; op2val:0x80000000;
op3val:0x82700000; valaddr_reg:x3; val_offset:59160*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59160*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19721:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x46e94e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec6e94e; op2val:0x80000000;
op3val:0x82780000; valaddr_reg:x3; val_offset:59163*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59163*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19722:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x46e94e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec6e94e; op2val:0x80000000;
op3val:0x827c0000; valaddr_reg:x3; val_offset:59166*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59166*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19723:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x46e94e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec6e94e; op2val:0x80000000;
op3val:0x827e0000; valaddr_reg:x3; val_offset:59169*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59169*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19724:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x46e94e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec6e94e; op2val:0x80000000;
op3val:0x827f0000; valaddr_reg:x3; val_offset:59172*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59172*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19725:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x46e94e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec6e94e; op2val:0x80000000;
op3val:0x827f8000; valaddr_reg:x3; val_offset:59175*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59175*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19726:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x46e94e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec6e94e; op2val:0x80000000;
op3val:0x827fc000; valaddr_reg:x3; val_offset:59178*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59178*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19727:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x46e94e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec6e94e; op2val:0x80000000;
op3val:0x827fe000; valaddr_reg:x3; val_offset:59181*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59181*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19728:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x46e94e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec6e94e; op2val:0x80000000;
op3val:0x827ff000; valaddr_reg:x3; val_offset:59184*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59184*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19729:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x46e94e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec6e94e; op2val:0x80000000;
op3val:0x827ff800; valaddr_reg:x3; val_offset:59187*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59187*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19730:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x46e94e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec6e94e; op2val:0x80000000;
op3val:0x827ffc00; valaddr_reg:x3; val_offset:59190*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59190*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19731:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x46e94e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec6e94e; op2val:0x80000000;
op3val:0x827ffe00; valaddr_reg:x3; val_offset:59193*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59193*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19732:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x46e94e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec6e94e; op2val:0x80000000;
op3val:0x827fff00; valaddr_reg:x3; val_offset:59196*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59196*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19733:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x46e94e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec6e94e; op2val:0x80000000;
op3val:0x827fff80; valaddr_reg:x3; val_offset:59199*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59199*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19734:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x46e94e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec6e94e; op2val:0x80000000;
op3val:0x827fffc0; valaddr_reg:x3; val_offset:59202*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59202*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19735:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x46e94e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec6e94e; op2val:0x80000000;
op3val:0x827fffe0; valaddr_reg:x3; val_offset:59205*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59205*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19736:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x46e94e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec6e94e; op2val:0x80000000;
op3val:0x827ffff0; valaddr_reg:x3; val_offset:59208*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59208*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19737:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x46e94e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec6e94e; op2val:0x80000000;
op3val:0x827ffff8; valaddr_reg:x3; val_offset:59211*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59211*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19738:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x46e94e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec6e94e; op2val:0x80000000;
op3val:0x827ffffc; valaddr_reg:x3; val_offset:59214*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59214*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19739:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x46e94e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec6e94e; op2val:0x80000000;
op3val:0x827ffffe; valaddr_reg:x3; val_offset:59217*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59217*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19740:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x46e94e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec6e94e; op2val:0x80000000;
op3val:0x827fffff; valaddr_reg:x3; val_offset:59220*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59220*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19741:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x474c7e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec74c7e; op2val:0x80000000;
op3val:0x80800001; valaddr_reg:x3; val_offset:59223*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59223*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19742:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x474c7e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec74c7e; op2val:0x80000000;
op3val:0x80800003; valaddr_reg:x3; val_offset:59226*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59226*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19743:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x474c7e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec74c7e; op2val:0x80000000;
op3val:0x80800007; valaddr_reg:x3; val_offset:59229*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59229*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19744:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x474c7e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec74c7e; op2val:0x80000000;
op3val:0x80999999; valaddr_reg:x3; val_offset:59232*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59232*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19745:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x474c7e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec74c7e; op2val:0x80000000;
op3val:0x80a49249; valaddr_reg:x3; val_offset:59235*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59235*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19746:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x474c7e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec74c7e; op2val:0x80000000;
op3val:0x80b33333; valaddr_reg:x3; val_offset:59238*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59238*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19747:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x474c7e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec74c7e; op2val:0x80000000;
op3val:0x80b6db6d; valaddr_reg:x3; val_offset:59241*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59241*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19748:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x474c7e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec74c7e; op2val:0x80000000;
op3val:0x80bbbbbb; valaddr_reg:x3; val_offset:59244*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59244*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19749:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x474c7e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec74c7e; op2val:0x80000000;
op3val:0x80c44444; valaddr_reg:x3; val_offset:59247*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59247*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19750:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x474c7e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec74c7e; op2val:0x80000000;
op3val:0x80cccccc; valaddr_reg:x3; val_offset:59250*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59250*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19751:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x474c7e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec74c7e; op2val:0x80000000;
op3val:0x80db6db6; valaddr_reg:x3; val_offset:59253*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59253*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19752:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x474c7e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec74c7e; op2val:0x80000000;
op3val:0x80e66666; valaddr_reg:x3; val_offset:59256*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59256*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19753:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x474c7e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec74c7e; op2val:0x80000000;
op3val:0x80edb6db; valaddr_reg:x3; val_offset:59259*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59259*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19754:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x474c7e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec74c7e; op2val:0x80000000;
op3val:0x80fffff8; valaddr_reg:x3; val_offset:59262*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59262*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19755:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x474c7e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec74c7e; op2val:0x80000000;
op3val:0x80fffffc; valaddr_reg:x3; val_offset:59265*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59265*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19756:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x474c7e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec74c7e; op2val:0x80000000;
op3val:0x80fffffe; valaddr_reg:x3; val_offset:59268*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59268*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19757:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x474c7e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec74c7e; op2val:0x80000000;
op3val:0x81000000; valaddr_reg:x3; val_offset:59271*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59271*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19758:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x474c7e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec74c7e; op2val:0x80000000;
op3val:0x81000001; valaddr_reg:x3; val_offset:59274*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59274*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19759:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x474c7e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec74c7e; op2val:0x80000000;
op3val:0x81000003; valaddr_reg:x3; val_offset:59277*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59277*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19760:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x474c7e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec74c7e; op2val:0x80000000;
op3val:0x81000007; valaddr_reg:x3; val_offset:59280*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59280*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19761:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x474c7e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec74c7e; op2val:0x80000000;
op3val:0x8100000f; valaddr_reg:x3; val_offset:59283*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59283*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19762:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x474c7e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec74c7e; op2val:0x80000000;
op3val:0x8100001f; valaddr_reg:x3; val_offset:59286*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59286*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19763:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x474c7e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec74c7e; op2val:0x80000000;
op3val:0x8100003f; valaddr_reg:x3; val_offset:59289*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59289*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19764:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x474c7e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec74c7e; op2val:0x80000000;
op3val:0x8100007f; valaddr_reg:x3; val_offset:59292*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59292*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19765:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x474c7e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec74c7e; op2val:0x80000000;
op3val:0x810000ff; valaddr_reg:x3; val_offset:59295*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59295*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19766:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x474c7e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec74c7e; op2val:0x80000000;
op3val:0x810001ff; valaddr_reg:x3; val_offset:59298*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59298*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19767:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x474c7e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec74c7e; op2val:0x80000000;
op3val:0x810003ff; valaddr_reg:x3; val_offset:59301*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59301*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19768:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x474c7e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec74c7e; op2val:0x80000000;
op3val:0x810007ff; valaddr_reg:x3; val_offset:59304*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59304*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19769:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x474c7e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec74c7e; op2val:0x80000000;
op3val:0x81000fff; valaddr_reg:x3; val_offset:59307*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59307*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19770:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x474c7e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec74c7e; op2val:0x80000000;
op3val:0x81001fff; valaddr_reg:x3; val_offset:59310*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59310*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19771:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x474c7e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec74c7e; op2val:0x80000000;
op3val:0x81003fff; valaddr_reg:x3; val_offset:59313*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59313*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19772:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x474c7e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec74c7e; op2val:0x80000000;
op3val:0x81007fff; valaddr_reg:x3; val_offset:59316*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59316*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19773:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x474c7e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec74c7e; op2val:0x80000000;
op3val:0x8100ffff; valaddr_reg:x3; val_offset:59319*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59319*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19774:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x474c7e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec74c7e; op2val:0x80000000;
op3val:0x8101ffff; valaddr_reg:x3; val_offset:59322*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59322*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19775:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x474c7e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec74c7e; op2val:0x80000000;
op3val:0x8103ffff; valaddr_reg:x3; val_offset:59325*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59325*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19776:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x474c7e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec74c7e; op2val:0x80000000;
op3val:0x8107ffff; valaddr_reg:x3; val_offset:59328*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59328*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19777:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x474c7e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec74c7e; op2val:0x80000000;
op3val:0x810fffff; valaddr_reg:x3; val_offset:59331*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59331*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19778:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x474c7e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec74c7e; op2val:0x80000000;
op3val:0x811fffff; valaddr_reg:x3; val_offset:59334*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59334*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19779:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x474c7e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec74c7e; op2val:0x80000000;
op3val:0x813fffff; valaddr_reg:x3; val_offset:59337*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59337*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19780:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x474c7e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec74c7e; op2val:0x80000000;
op3val:0x81400000; valaddr_reg:x3; val_offset:59340*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59340*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19781:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x474c7e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec74c7e; op2val:0x80000000;
op3val:0x81600000; valaddr_reg:x3; val_offset:59343*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59343*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19782:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x474c7e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec74c7e; op2val:0x80000000;
op3val:0x81700000; valaddr_reg:x3; val_offset:59346*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59346*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19783:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x474c7e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec74c7e; op2val:0x80000000;
op3val:0x81780000; valaddr_reg:x3; val_offset:59349*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59349*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19784:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x474c7e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec74c7e; op2val:0x80000000;
op3val:0x817c0000; valaddr_reg:x3; val_offset:59352*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59352*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19785:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x474c7e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec74c7e; op2val:0x80000000;
op3val:0x817e0000; valaddr_reg:x3; val_offset:59355*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59355*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19786:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x474c7e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec74c7e; op2val:0x80000000;
op3val:0x817f0000; valaddr_reg:x3; val_offset:59358*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59358*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19787:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x474c7e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec74c7e; op2val:0x80000000;
op3val:0x817f8000; valaddr_reg:x3; val_offset:59361*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59361*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19788:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x474c7e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec74c7e; op2val:0x80000000;
op3val:0x817fc000; valaddr_reg:x3; val_offset:59364*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59364*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19789:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x474c7e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec74c7e; op2val:0x80000000;
op3val:0x817fe000; valaddr_reg:x3; val_offset:59367*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59367*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19790:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x474c7e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec74c7e; op2val:0x80000000;
op3val:0x817ff000; valaddr_reg:x3; val_offset:59370*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59370*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19791:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x474c7e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec74c7e; op2val:0x80000000;
op3val:0x817ff800; valaddr_reg:x3; val_offset:59373*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59373*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19792:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x474c7e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec74c7e; op2val:0x80000000;
op3val:0x817ffc00; valaddr_reg:x3; val_offset:59376*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59376*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19793:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x474c7e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec74c7e; op2val:0x80000000;
op3val:0x817ffe00; valaddr_reg:x3; val_offset:59379*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59379*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19794:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x474c7e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec74c7e; op2val:0x80000000;
op3val:0x817fff00; valaddr_reg:x3; val_offset:59382*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59382*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19795:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x474c7e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec74c7e; op2val:0x80000000;
op3val:0x817fff80; valaddr_reg:x3; val_offset:59385*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59385*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19796:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x474c7e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec74c7e; op2val:0x80000000;
op3val:0x817fffc0; valaddr_reg:x3; val_offset:59388*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59388*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19797:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x474c7e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec74c7e; op2val:0x80000000;
op3val:0x817fffe0; valaddr_reg:x3; val_offset:59391*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59391*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19798:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x474c7e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec74c7e; op2val:0x80000000;
op3val:0x817ffff0; valaddr_reg:x3; val_offset:59394*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59394*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19799:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x474c7e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec74c7e; op2val:0x80000000;
op3val:0x817ffff8; valaddr_reg:x3; val_offset:59397*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59397*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19800:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x474c7e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec74c7e; op2val:0x80000000;
op3val:0x817ffffc; valaddr_reg:x3; val_offset:59400*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59400*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19801:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x474c7e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec74c7e; op2val:0x80000000;
op3val:0x817ffffe; valaddr_reg:x3; val_offset:59403*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59403*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19802:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x474c7e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec74c7e; op2val:0x80000000;
op3val:0x817fffff; valaddr_reg:x3; val_offset:59406*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59406*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19803:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x479dc5 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2427a9 and fs3 == 1 and fe3 == 0xfc and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec79dc5; op2val:0xc02427a9;
op3val:0xfe000000; valaddr_reg:x3; val_offset:59409*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59409*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19804:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x479dc5 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2427a9 and fs3 == 1 and fe3 == 0xfc and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec79dc5; op2val:0xc02427a9;
op3val:0xfe000001; valaddr_reg:x3; val_offset:59412*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59412*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19805:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x479dc5 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2427a9 and fs3 == 1 and fe3 == 0xfc and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec79dc5; op2val:0xc02427a9;
op3val:0xfe000003; valaddr_reg:x3; val_offset:59415*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59415*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19806:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x479dc5 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2427a9 and fs3 == 1 and fe3 == 0xfc and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec79dc5; op2val:0xc02427a9;
op3val:0xfe000007; valaddr_reg:x3; val_offset:59418*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59418*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19807:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x479dc5 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2427a9 and fs3 == 1 and fe3 == 0xfc and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec79dc5; op2val:0xc02427a9;
op3val:0xfe00000f; valaddr_reg:x3; val_offset:59421*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59421*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19808:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x479dc5 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2427a9 and fs3 == 1 and fe3 == 0xfc and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec79dc5; op2val:0xc02427a9;
op3val:0xfe00001f; valaddr_reg:x3; val_offset:59424*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59424*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19809:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x479dc5 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2427a9 and fs3 == 1 and fe3 == 0xfc and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec79dc5; op2val:0xc02427a9;
op3val:0xfe00003f; valaddr_reg:x3; val_offset:59427*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59427*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19810:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x479dc5 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2427a9 and fs3 == 1 and fe3 == 0xfc and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec79dc5; op2val:0xc02427a9;
op3val:0xfe00007f; valaddr_reg:x3; val_offset:59430*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59430*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19811:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x479dc5 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2427a9 and fs3 == 1 and fe3 == 0xfc and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec79dc5; op2val:0xc02427a9;
op3val:0xfe0000ff; valaddr_reg:x3; val_offset:59433*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59433*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19812:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x479dc5 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2427a9 and fs3 == 1 and fe3 == 0xfc and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec79dc5; op2val:0xc02427a9;
op3val:0xfe0001ff; valaddr_reg:x3; val_offset:59436*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59436*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19813:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x479dc5 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2427a9 and fs3 == 1 and fe3 == 0xfc and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec79dc5; op2val:0xc02427a9;
op3val:0xfe0003ff; valaddr_reg:x3; val_offset:59439*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59439*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19814:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x479dc5 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2427a9 and fs3 == 1 and fe3 == 0xfc and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec79dc5; op2val:0xc02427a9;
op3val:0xfe0007ff; valaddr_reg:x3; val_offset:59442*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59442*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19815:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x479dc5 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2427a9 and fs3 == 1 and fe3 == 0xfc and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec79dc5; op2val:0xc02427a9;
op3val:0xfe000fff; valaddr_reg:x3; val_offset:59445*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59445*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19816:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x479dc5 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2427a9 and fs3 == 1 and fe3 == 0xfc and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec79dc5; op2val:0xc02427a9;
op3val:0xfe001fff; valaddr_reg:x3; val_offset:59448*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59448*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19817:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x479dc5 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2427a9 and fs3 == 1 and fe3 == 0xfc and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec79dc5; op2val:0xc02427a9;
op3val:0xfe003fff; valaddr_reg:x3; val_offset:59451*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59451*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19818:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x479dc5 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2427a9 and fs3 == 1 and fe3 == 0xfc and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec79dc5; op2val:0xc02427a9;
op3val:0xfe007fff; valaddr_reg:x3; val_offset:59454*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59454*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19819:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x479dc5 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2427a9 and fs3 == 1 and fe3 == 0xfc and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec79dc5; op2val:0xc02427a9;
op3val:0xfe00ffff; valaddr_reg:x3; val_offset:59457*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59457*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19820:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x479dc5 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2427a9 and fs3 == 1 and fe3 == 0xfc and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec79dc5; op2val:0xc02427a9;
op3val:0xfe01ffff; valaddr_reg:x3; val_offset:59460*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59460*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19821:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x479dc5 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2427a9 and fs3 == 1 and fe3 == 0xfc and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec79dc5; op2val:0xc02427a9;
op3val:0xfe03ffff; valaddr_reg:x3; val_offset:59463*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59463*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19822:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x479dc5 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2427a9 and fs3 == 1 and fe3 == 0xfc and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec79dc5; op2val:0xc02427a9;
op3val:0xfe07ffff; valaddr_reg:x3; val_offset:59466*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59466*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19823:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x479dc5 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2427a9 and fs3 == 1 and fe3 == 0xfc and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec79dc5; op2val:0xc02427a9;
op3val:0xfe0fffff; valaddr_reg:x3; val_offset:59469*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59469*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19824:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x479dc5 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2427a9 and fs3 == 1 and fe3 == 0xfc and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec79dc5; op2val:0xc02427a9;
op3val:0xfe1fffff; valaddr_reg:x3; val_offset:59472*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59472*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19825:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x479dc5 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2427a9 and fs3 == 1 and fe3 == 0xfc and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec79dc5; op2val:0xc02427a9;
op3val:0xfe3fffff; valaddr_reg:x3; val_offset:59475*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59475*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19826:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x479dc5 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2427a9 and fs3 == 1 and fe3 == 0xfc and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec79dc5; op2val:0xc02427a9;
op3val:0xfe400000; valaddr_reg:x3; val_offset:59478*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59478*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19827:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x479dc5 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2427a9 and fs3 == 1 and fe3 == 0xfc and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec79dc5; op2val:0xc02427a9;
op3val:0xfe600000; valaddr_reg:x3; val_offset:59481*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59481*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19828:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x479dc5 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2427a9 and fs3 == 1 and fe3 == 0xfc and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec79dc5; op2val:0xc02427a9;
op3val:0xfe700000; valaddr_reg:x3; val_offset:59484*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59484*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19829:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x479dc5 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2427a9 and fs3 == 1 and fe3 == 0xfc and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec79dc5; op2val:0xc02427a9;
op3val:0xfe780000; valaddr_reg:x3; val_offset:59487*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59487*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19830:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x479dc5 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2427a9 and fs3 == 1 and fe3 == 0xfc and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec79dc5; op2val:0xc02427a9;
op3val:0xfe7c0000; valaddr_reg:x3; val_offset:59490*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59490*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19831:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x479dc5 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2427a9 and fs3 == 1 and fe3 == 0xfc and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec79dc5; op2val:0xc02427a9;
op3val:0xfe7e0000; valaddr_reg:x3; val_offset:59493*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59493*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19832:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x479dc5 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2427a9 and fs3 == 1 and fe3 == 0xfc and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec79dc5; op2val:0xc02427a9;
op3val:0xfe7f0000; valaddr_reg:x3; val_offset:59496*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59496*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19833:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x479dc5 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2427a9 and fs3 == 1 and fe3 == 0xfc and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec79dc5; op2val:0xc02427a9;
op3val:0xfe7f8000; valaddr_reg:x3; val_offset:59499*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59499*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19834:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x479dc5 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2427a9 and fs3 == 1 and fe3 == 0xfc and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec79dc5; op2val:0xc02427a9;
op3val:0xfe7fc000; valaddr_reg:x3; val_offset:59502*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59502*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19835:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x479dc5 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2427a9 and fs3 == 1 and fe3 == 0xfc and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec79dc5; op2val:0xc02427a9;
op3val:0xfe7fe000; valaddr_reg:x3; val_offset:59505*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59505*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19836:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x479dc5 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2427a9 and fs3 == 1 and fe3 == 0xfc and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec79dc5; op2val:0xc02427a9;
op3val:0xfe7ff000; valaddr_reg:x3; val_offset:59508*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59508*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19837:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x479dc5 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2427a9 and fs3 == 1 and fe3 == 0xfc and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec79dc5; op2val:0xc02427a9;
op3val:0xfe7ff800; valaddr_reg:x3; val_offset:59511*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59511*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19838:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x479dc5 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2427a9 and fs3 == 1 and fe3 == 0xfc and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec79dc5; op2val:0xc02427a9;
op3val:0xfe7ffc00; valaddr_reg:x3; val_offset:59514*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59514*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19839:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x479dc5 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2427a9 and fs3 == 1 and fe3 == 0xfc and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec79dc5; op2val:0xc02427a9;
op3val:0xfe7ffe00; valaddr_reg:x3; val_offset:59517*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59517*0 + 3*154*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2126965070,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181169151,32,FLEN)
NAN_BOXED(2126965070,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181300223,32,FLEN)
NAN_BOXED(2126965070,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181562367,32,FLEN)
NAN_BOXED(2126965070,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2182086655,32,FLEN)
NAN_BOXED(2126965070,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2183135231,32,FLEN)
NAN_BOXED(2126965070,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2185232383,32,FLEN)
NAN_BOXED(2126965070,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2185232384,32,FLEN)
NAN_BOXED(2126965070,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2187329536,32,FLEN)
NAN_BOXED(2126965070,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2188378112,32,FLEN)
NAN_BOXED(2126965070,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2188902400,32,FLEN)
NAN_BOXED(2126965070,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189164544,32,FLEN)
NAN_BOXED(2126965070,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189295616,32,FLEN)
NAN_BOXED(2126965070,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189361152,32,FLEN)
NAN_BOXED(2126965070,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189393920,32,FLEN)
NAN_BOXED(2126965070,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189410304,32,FLEN)
NAN_BOXED(2126965070,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189418496,32,FLEN)
NAN_BOXED(2126965070,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189422592,32,FLEN)
NAN_BOXED(2126965070,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189424640,32,FLEN)
NAN_BOXED(2126965070,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189425664,32,FLEN)
NAN_BOXED(2126965070,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189426176,32,FLEN)
NAN_BOXED(2126965070,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189426432,32,FLEN)
NAN_BOXED(2126965070,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189426560,32,FLEN)
NAN_BOXED(2126965070,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189426624,32,FLEN)
NAN_BOXED(2126965070,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189426656,32,FLEN)
NAN_BOXED(2126965070,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189426672,32,FLEN)
NAN_BOXED(2126965070,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189426680,32,FLEN)
NAN_BOXED(2126965070,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189426684,32,FLEN)
NAN_BOXED(2126965070,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189426686,32,FLEN)
NAN_BOXED(2126965070,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189426687,32,FLEN)
NAN_BOXED(2126990462,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872257,32,FLEN)
NAN_BOXED(2126990462,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872259,32,FLEN)
NAN_BOXED(2126990462,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872263,32,FLEN)
NAN_BOXED(2126990462,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2157549977,32,FLEN)
NAN_BOXED(2126990462,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2158269001,32,FLEN)
NAN_BOXED(2126990462,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2159227699,32,FLEN)
NAN_BOXED(2126990462,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2159467373,32,FLEN)
NAN_BOXED(2126990462,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2159786939,32,FLEN)
NAN_BOXED(2126990462,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2160346180,32,FLEN)
NAN_BOXED(2126990462,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2160905420,32,FLEN)
NAN_BOXED(2126990462,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2161864118,32,FLEN)
NAN_BOXED(2126990462,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2162583142,32,FLEN)
NAN_BOXED(2126990462,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2163062491,32,FLEN)
NAN_BOXED(2126990462,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260856,32,FLEN)
NAN_BOXED(2126990462,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260860,32,FLEN)
NAN_BOXED(2126990462,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260862,32,FLEN)
NAN_BOXED(2126990462,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260864,32,FLEN)
NAN_BOXED(2126990462,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260865,32,FLEN)
NAN_BOXED(2126990462,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260867,32,FLEN)
NAN_BOXED(2126990462,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260871,32,FLEN)
NAN_BOXED(2126990462,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260879,32,FLEN)
NAN_BOXED(2126990462,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260895,32,FLEN)
NAN_BOXED(2126990462,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260927,32,FLEN)
NAN_BOXED(2126990462,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260991,32,FLEN)
NAN_BOXED(2126990462,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164261119,32,FLEN)
NAN_BOXED(2126990462,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164261375,32,FLEN)
NAN_BOXED(2126990462,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164261887,32,FLEN)
NAN_BOXED(2126990462,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164262911,32,FLEN)
NAN_BOXED(2126990462,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164264959,32,FLEN)
NAN_BOXED(2126990462,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164269055,32,FLEN)
NAN_BOXED(2126990462,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164277247,32,FLEN)
NAN_BOXED(2126990462,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164293631,32,FLEN)
NAN_BOXED(2126990462,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164326399,32,FLEN)
NAN_BOXED(2126990462,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164391935,32,FLEN)
NAN_BOXED(2126990462,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164523007,32,FLEN)
NAN_BOXED(2126990462,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164785151,32,FLEN)
NAN_BOXED(2126990462,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2165309439,32,FLEN)
NAN_BOXED(2126990462,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2166358015,32,FLEN)
NAN_BOXED(2126990462,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2168455167,32,FLEN)
NAN_BOXED(2126990462,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2168455168,32,FLEN)
NAN_BOXED(2126990462,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2170552320,32,FLEN)
NAN_BOXED(2126990462,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2171600896,32,FLEN)
NAN_BOXED(2126990462,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172125184,32,FLEN)
NAN_BOXED(2126990462,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172387328,32,FLEN)
NAN_BOXED(2126990462,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172518400,32,FLEN)
NAN_BOXED(2126990462,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172583936,32,FLEN)
NAN_BOXED(2126990462,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172616704,32,FLEN)
NAN_BOXED(2126990462,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172633088,32,FLEN)
NAN_BOXED(2126990462,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172641280,32,FLEN)
NAN_BOXED(2126990462,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172645376,32,FLEN)
NAN_BOXED(2126990462,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172647424,32,FLEN)
NAN_BOXED(2126990462,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172648448,32,FLEN)
NAN_BOXED(2126990462,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172648960,32,FLEN)
NAN_BOXED(2126990462,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172649216,32,FLEN)
NAN_BOXED(2126990462,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172649344,32,FLEN)
NAN_BOXED(2126990462,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172649408,32,FLEN)
NAN_BOXED(2126990462,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172649440,32,FLEN)
NAN_BOXED(2126990462,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172649456,32,FLEN)
NAN_BOXED(2126990462,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172649464,32,FLEN)
NAN_BOXED(2126990462,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172649468,32,FLEN)
NAN_BOXED(2126990462,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172649470,32,FLEN)
NAN_BOXED(2126990462,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172649471,32,FLEN)
NAN_BOXED(2127011269,32,FLEN)
NAN_BOXED(3223594921,32,FLEN)
NAN_BOXED(4261412864,32,FLEN)
NAN_BOXED(2127011269,32,FLEN)
NAN_BOXED(3223594921,32,FLEN)
NAN_BOXED(4261412865,32,FLEN)
NAN_BOXED(2127011269,32,FLEN)
NAN_BOXED(3223594921,32,FLEN)
NAN_BOXED(4261412867,32,FLEN)
NAN_BOXED(2127011269,32,FLEN)
NAN_BOXED(3223594921,32,FLEN)
NAN_BOXED(4261412871,32,FLEN)
NAN_BOXED(2127011269,32,FLEN)
NAN_BOXED(3223594921,32,FLEN)
NAN_BOXED(4261412879,32,FLEN)
NAN_BOXED(2127011269,32,FLEN)
NAN_BOXED(3223594921,32,FLEN)
NAN_BOXED(4261412895,32,FLEN)
NAN_BOXED(2127011269,32,FLEN)
NAN_BOXED(3223594921,32,FLEN)
NAN_BOXED(4261412927,32,FLEN)
NAN_BOXED(2127011269,32,FLEN)
NAN_BOXED(3223594921,32,FLEN)
NAN_BOXED(4261412991,32,FLEN)
NAN_BOXED(2127011269,32,FLEN)
NAN_BOXED(3223594921,32,FLEN)
NAN_BOXED(4261413119,32,FLEN)
NAN_BOXED(2127011269,32,FLEN)
NAN_BOXED(3223594921,32,FLEN)
NAN_BOXED(4261413375,32,FLEN)
NAN_BOXED(2127011269,32,FLEN)
NAN_BOXED(3223594921,32,FLEN)
NAN_BOXED(4261413887,32,FLEN)
NAN_BOXED(2127011269,32,FLEN)
NAN_BOXED(3223594921,32,FLEN)
NAN_BOXED(4261414911,32,FLEN)
NAN_BOXED(2127011269,32,FLEN)
NAN_BOXED(3223594921,32,FLEN)
NAN_BOXED(4261416959,32,FLEN)
NAN_BOXED(2127011269,32,FLEN)
NAN_BOXED(3223594921,32,FLEN)
NAN_BOXED(4261421055,32,FLEN)
NAN_BOXED(2127011269,32,FLEN)
NAN_BOXED(3223594921,32,FLEN)
NAN_BOXED(4261429247,32,FLEN)
NAN_BOXED(2127011269,32,FLEN)
NAN_BOXED(3223594921,32,FLEN)
NAN_BOXED(4261445631,32,FLEN)
NAN_BOXED(2127011269,32,FLEN)
NAN_BOXED(3223594921,32,FLEN)
NAN_BOXED(4261478399,32,FLEN)
NAN_BOXED(2127011269,32,FLEN)
NAN_BOXED(3223594921,32,FLEN)
NAN_BOXED(4261543935,32,FLEN)
NAN_BOXED(2127011269,32,FLEN)
NAN_BOXED(3223594921,32,FLEN)
NAN_BOXED(4261675007,32,FLEN)
NAN_BOXED(2127011269,32,FLEN)
NAN_BOXED(3223594921,32,FLEN)
NAN_BOXED(4261937151,32,FLEN)
NAN_BOXED(2127011269,32,FLEN)
NAN_BOXED(3223594921,32,FLEN)
NAN_BOXED(4262461439,32,FLEN)
NAN_BOXED(2127011269,32,FLEN)
NAN_BOXED(3223594921,32,FLEN)
NAN_BOXED(4263510015,32,FLEN)
NAN_BOXED(2127011269,32,FLEN)
NAN_BOXED(3223594921,32,FLEN)
NAN_BOXED(4265607167,32,FLEN)
NAN_BOXED(2127011269,32,FLEN)
NAN_BOXED(3223594921,32,FLEN)
NAN_BOXED(4265607168,32,FLEN)
NAN_BOXED(2127011269,32,FLEN)
NAN_BOXED(3223594921,32,FLEN)
NAN_BOXED(4267704320,32,FLEN)
NAN_BOXED(2127011269,32,FLEN)
NAN_BOXED(3223594921,32,FLEN)
NAN_BOXED(4268752896,32,FLEN)
NAN_BOXED(2127011269,32,FLEN)
NAN_BOXED(3223594921,32,FLEN)
NAN_BOXED(4269277184,32,FLEN)
NAN_BOXED(2127011269,32,FLEN)
NAN_BOXED(3223594921,32,FLEN)
NAN_BOXED(4269539328,32,FLEN)
NAN_BOXED(2127011269,32,FLEN)
NAN_BOXED(3223594921,32,FLEN)
NAN_BOXED(4269670400,32,FLEN)
NAN_BOXED(2127011269,32,FLEN)
NAN_BOXED(3223594921,32,FLEN)
NAN_BOXED(4269735936,32,FLEN)
NAN_BOXED(2127011269,32,FLEN)
NAN_BOXED(3223594921,32,FLEN)
NAN_BOXED(4269768704,32,FLEN)
NAN_BOXED(2127011269,32,FLEN)
NAN_BOXED(3223594921,32,FLEN)
NAN_BOXED(4269785088,32,FLEN)
NAN_BOXED(2127011269,32,FLEN)
NAN_BOXED(3223594921,32,FLEN)
NAN_BOXED(4269793280,32,FLEN)
NAN_BOXED(2127011269,32,FLEN)
NAN_BOXED(3223594921,32,FLEN)
NAN_BOXED(4269797376,32,FLEN)
NAN_BOXED(2127011269,32,FLEN)
NAN_BOXED(3223594921,32,FLEN)
NAN_BOXED(4269799424,32,FLEN)
NAN_BOXED(2127011269,32,FLEN)
NAN_BOXED(3223594921,32,FLEN)
NAN_BOXED(4269800448,32,FLEN)
NAN_BOXED(2127011269,32,FLEN)
NAN_BOXED(3223594921,32,FLEN)
NAN_BOXED(4269800960,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
