
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:17:59 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_19840:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x479dc5 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2427a9 and fs3 == 1 and fe3 == 0xfc and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec79dc5; op2val:0xc02427a9;
op3val:0xfe7fff00; valaddr_reg:x3; val_offset:59520*0 + 3*155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59520*0 + 3*155*FLEN/8, x4, x1, x2)

inst_19841:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x479dc5 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2427a9 and fs3 == 1 and fe3 == 0xfc and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec79dc5; op2val:0xc02427a9;
op3val:0xfe7fff80; valaddr_reg:x3; val_offset:59523*0 + 3*155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59523*0 + 3*155*FLEN/8, x4, x1, x2)

inst_19842:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x479dc5 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2427a9 and fs3 == 1 and fe3 == 0xfc and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec79dc5; op2val:0xc02427a9;
op3val:0xfe7fffc0; valaddr_reg:x3; val_offset:59526*0 + 3*155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59526*0 + 3*155*FLEN/8, x4, x1, x2)

inst_19843:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x479dc5 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2427a9 and fs3 == 1 and fe3 == 0xfc and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec79dc5; op2val:0xc02427a9;
op3val:0xfe7fffe0; valaddr_reg:x3; val_offset:59529*0 + 3*155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59529*0 + 3*155*FLEN/8, x4, x1, x2)

inst_19844:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x479dc5 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2427a9 and fs3 == 1 and fe3 == 0xfc and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec79dc5; op2val:0xc02427a9;
op3val:0xfe7ffff0; valaddr_reg:x3; val_offset:59532*0 + 3*155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59532*0 + 3*155*FLEN/8, x4, x1, x2)

inst_19845:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x479dc5 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2427a9 and fs3 == 1 and fe3 == 0xfc and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec79dc5; op2val:0xc02427a9;
op3val:0xfe7ffff8; valaddr_reg:x3; val_offset:59535*0 + 3*155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59535*0 + 3*155*FLEN/8, x4, x1, x2)

inst_19846:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x479dc5 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2427a9 and fs3 == 1 and fe3 == 0xfc and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec79dc5; op2val:0xc02427a9;
op3val:0xfe7ffffc; valaddr_reg:x3; val_offset:59538*0 + 3*155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59538*0 + 3*155*FLEN/8, x4, x1, x2)

inst_19847:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x479dc5 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2427a9 and fs3 == 1 and fe3 == 0xfc and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec79dc5; op2val:0xc02427a9;
op3val:0xfe7ffffe; valaddr_reg:x3; val_offset:59541*0 + 3*155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59541*0 + 3*155*FLEN/8, x4, x1, x2)

inst_19848:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x479dc5 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2427a9 and fs3 == 1 and fe3 == 0xfc and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec79dc5; op2val:0xc02427a9;
op3val:0xfe7fffff; valaddr_reg:x3; val_offset:59544*0 + 3*155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59544*0 + 3*155*FLEN/8, x4, x1, x2)

inst_19849:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x479dc5 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2427a9 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec79dc5; op2val:0xc02427a9;
op3val:0xff000001; valaddr_reg:x3; val_offset:59547*0 + 3*155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59547*0 + 3*155*FLEN/8, x4, x1, x2)

inst_19850:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x479dc5 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2427a9 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec79dc5; op2val:0xc02427a9;
op3val:0xff000003; valaddr_reg:x3; val_offset:59550*0 + 3*155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59550*0 + 3*155*FLEN/8, x4, x1, x2)

inst_19851:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x479dc5 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2427a9 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec79dc5; op2val:0xc02427a9;
op3val:0xff000007; valaddr_reg:x3; val_offset:59553*0 + 3*155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59553*0 + 3*155*FLEN/8, x4, x1, x2)

inst_19852:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x479dc5 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2427a9 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec79dc5; op2val:0xc02427a9;
op3val:0xff199999; valaddr_reg:x3; val_offset:59556*0 + 3*155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59556*0 + 3*155*FLEN/8, x4, x1, x2)

inst_19853:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x479dc5 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2427a9 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec79dc5; op2val:0xc02427a9;
op3val:0xff249249; valaddr_reg:x3; val_offset:59559*0 + 3*155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59559*0 + 3*155*FLEN/8, x4, x1, x2)

inst_19854:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x479dc5 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2427a9 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec79dc5; op2val:0xc02427a9;
op3val:0xff333333; valaddr_reg:x3; val_offset:59562*0 + 3*155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59562*0 + 3*155*FLEN/8, x4, x1, x2)

inst_19855:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x479dc5 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2427a9 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec79dc5; op2val:0xc02427a9;
op3val:0xff36db6d; valaddr_reg:x3; val_offset:59565*0 + 3*155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59565*0 + 3*155*FLEN/8, x4, x1, x2)

inst_19856:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x479dc5 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2427a9 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec79dc5; op2val:0xc02427a9;
op3val:0xff3bbbbb; valaddr_reg:x3; val_offset:59568*0 + 3*155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59568*0 + 3*155*FLEN/8, x4, x1, x2)

inst_19857:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x479dc5 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2427a9 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec79dc5; op2val:0xc02427a9;
op3val:0xff444444; valaddr_reg:x3; val_offset:59571*0 + 3*155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59571*0 + 3*155*FLEN/8, x4, x1, x2)

inst_19858:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x479dc5 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2427a9 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec79dc5; op2val:0xc02427a9;
op3val:0xff4ccccc; valaddr_reg:x3; val_offset:59574*0 + 3*155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59574*0 + 3*155*FLEN/8, x4, x1, x2)

inst_19859:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x479dc5 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2427a9 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec79dc5; op2val:0xc02427a9;
op3val:0xff5b6db6; valaddr_reg:x3; val_offset:59577*0 + 3*155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59577*0 + 3*155*FLEN/8, x4, x1, x2)

inst_19860:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x479dc5 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2427a9 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec79dc5; op2val:0xc02427a9;
op3val:0xff666666; valaddr_reg:x3; val_offset:59580*0 + 3*155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59580*0 + 3*155*FLEN/8, x4, x1, x2)

inst_19861:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x479dc5 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2427a9 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec79dc5; op2val:0xc02427a9;
op3val:0xff6db6db; valaddr_reg:x3; val_offset:59583*0 + 3*155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59583*0 + 3*155*FLEN/8, x4, x1, x2)

inst_19862:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x479dc5 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2427a9 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec79dc5; op2val:0xc02427a9;
op3val:0xff7ffff8; valaddr_reg:x3; val_offset:59586*0 + 3*155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59586*0 + 3*155*FLEN/8, x4, x1, x2)

inst_19863:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x479dc5 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2427a9 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec79dc5; op2val:0xc02427a9;
op3val:0xff7ffffc; valaddr_reg:x3; val_offset:59589*0 + 3*155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59589*0 + 3*155*FLEN/8, x4, x1, x2)

inst_19864:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x479dc5 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2427a9 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec79dc5; op2val:0xc02427a9;
op3val:0xff7ffffe; valaddr_reg:x3; val_offset:59592*0 + 3*155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59592*0 + 3*155*FLEN/8, x4, x1, x2)

inst_19865:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x483325 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec83325; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:59595*0 + 3*155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59595*0 + 3*155*FLEN/8, x4, x1, x2)

inst_19866:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x483325 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec83325; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:59598*0 + 3*155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59598*0 + 3*155*FLEN/8, x4, x1, x2)

inst_19867:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x483325 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec83325; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:59601*0 + 3*155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59601*0 + 3*155*FLEN/8, x4, x1, x2)

inst_19868:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x483325 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec83325; op2val:0x0;
op3val:0x199999; valaddr_reg:x3; val_offset:59604*0 + 3*155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59604*0 + 3*155*FLEN/8, x4, x1, x2)

inst_19869:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x483325 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec83325; op2val:0x0;
op3val:0x249249; valaddr_reg:x3; val_offset:59607*0 + 3*155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59607*0 + 3*155*FLEN/8, x4, x1, x2)

inst_19870:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x483325 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec83325; op2val:0x0;
op3val:0x333333; valaddr_reg:x3; val_offset:59610*0 + 3*155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59610*0 + 3*155*FLEN/8, x4, x1, x2)

inst_19871:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x483325 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec83325; op2val:0x0;
op3val:0x36db6d; valaddr_reg:x3; val_offset:59613*0 + 3*155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59613*0 + 3*155*FLEN/8, x4, x1, x2)

inst_19872:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x483325 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec83325; op2val:0x0;
op3val:0x3bbbbb; valaddr_reg:x3; val_offset:59616*0 + 3*155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59616*0 + 3*155*FLEN/8, x4, x1, x2)

inst_19873:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x483325 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec83325; op2val:0x0;
op3val:0x444444; valaddr_reg:x3; val_offset:59619*0 + 3*155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59619*0 + 3*155*FLEN/8, x4, x1, x2)

inst_19874:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x483325 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec83325; op2val:0x0;
op3val:0x4ccccc; valaddr_reg:x3; val_offset:59622*0 + 3*155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59622*0 + 3*155*FLEN/8, x4, x1, x2)

inst_19875:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x483325 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec83325; op2val:0x0;
op3val:0x5b6db6; valaddr_reg:x3; val_offset:59625*0 + 3*155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59625*0 + 3*155*FLEN/8, x4, x1, x2)

inst_19876:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x483325 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec83325; op2val:0x0;
op3val:0x666666; valaddr_reg:x3; val_offset:59628*0 + 3*155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59628*0 + 3*155*FLEN/8, x4, x1, x2)

inst_19877:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x483325 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec83325; op2val:0x0;
op3val:0x6db6db; valaddr_reg:x3; val_offset:59631*0 + 3*155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59631*0 + 3*155*FLEN/8, x4, x1, x2)

inst_19878:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x483325 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec83325; op2val:0x0;
op3val:0x7ffff8; valaddr_reg:x3; val_offset:59634*0 + 3*155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59634*0 + 3*155*FLEN/8, x4, x1, x2)

inst_19879:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x483325 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec83325; op2val:0x0;
op3val:0x7ffffc; valaddr_reg:x3; val_offset:59637*0 + 3*155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59637*0 + 3*155*FLEN/8, x4, x1, x2)

inst_19880:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x483325 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec83325; op2val:0x0;
op3val:0x7ffffe; valaddr_reg:x3; val_offset:59640*0 + 3*155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59640*0 + 3*155*FLEN/8, x4, x1, x2)

inst_19881:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x483325 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec83325; op2val:0x0;
op3val:0xe800000; valaddr_reg:x3; val_offset:59643*0 + 3*155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59643*0 + 3*155*FLEN/8, x4, x1, x2)

inst_19882:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x483325 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec83325; op2val:0x0;
op3val:0xe800001; valaddr_reg:x3; val_offset:59646*0 + 3*155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59646*0 + 3*155*FLEN/8, x4, x1, x2)

inst_19883:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x483325 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec83325; op2val:0x0;
op3val:0xe800003; valaddr_reg:x3; val_offset:59649*0 + 3*155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59649*0 + 3*155*FLEN/8, x4, x1, x2)

inst_19884:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x483325 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec83325; op2val:0x0;
op3val:0xe800007; valaddr_reg:x3; val_offset:59652*0 + 3*155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59652*0 + 3*155*FLEN/8, x4, x1, x2)

inst_19885:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x483325 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec83325; op2val:0x0;
op3val:0xe80000f; valaddr_reg:x3; val_offset:59655*0 + 3*155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59655*0 + 3*155*FLEN/8, x4, x1, x2)

inst_19886:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x483325 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec83325; op2val:0x0;
op3val:0xe80001f; valaddr_reg:x3; val_offset:59658*0 + 3*155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59658*0 + 3*155*FLEN/8, x4, x1, x2)

inst_19887:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x483325 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec83325; op2val:0x0;
op3val:0xe80003f; valaddr_reg:x3; val_offset:59661*0 + 3*155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59661*0 + 3*155*FLEN/8, x4, x1, x2)

inst_19888:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x483325 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec83325; op2val:0x0;
op3val:0xe80007f; valaddr_reg:x3; val_offset:59664*0 + 3*155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59664*0 + 3*155*FLEN/8, x4, x1, x2)

inst_19889:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x483325 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec83325; op2val:0x0;
op3val:0xe8000ff; valaddr_reg:x3; val_offset:59667*0 + 3*155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59667*0 + 3*155*FLEN/8, x4, x1, x2)

inst_19890:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x483325 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec83325; op2val:0x0;
op3val:0xe8001ff; valaddr_reg:x3; val_offset:59670*0 + 3*155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59670*0 + 3*155*FLEN/8, x4, x1, x2)

inst_19891:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x483325 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec83325; op2val:0x0;
op3val:0xe8003ff; valaddr_reg:x3; val_offset:59673*0 + 3*155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59673*0 + 3*155*FLEN/8, x4, x1, x2)

inst_19892:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x483325 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec83325; op2val:0x0;
op3val:0xe8007ff; valaddr_reg:x3; val_offset:59676*0 + 3*155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59676*0 + 3*155*FLEN/8, x4, x1, x2)

inst_19893:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x483325 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec83325; op2val:0x0;
op3val:0xe800fff; valaddr_reg:x3; val_offset:59679*0 + 3*155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59679*0 + 3*155*FLEN/8, x4, x1, x2)

inst_19894:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x483325 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec83325; op2val:0x0;
op3val:0xe801fff; valaddr_reg:x3; val_offset:59682*0 + 3*155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59682*0 + 3*155*FLEN/8, x4, x1, x2)

inst_19895:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x483325 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec83325; op2val:0x0;
op3val:0xe803fff; valaddr_reg:x3; val_offset:59685*0 + 3*155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59685*0 + 3*155*FLEN/8, x4, x1, x2)

inst_19896:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x483325 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec83325; op2val:0x0;
op3val:0xe807fff; valaddr_reg:x3; val_offset:59688*0 + 3*155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59688*0 + 3*155*FLEN/8, x4, x1, x2)

inst_19897:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x483325 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec83325; op2val:0x0;
op3val:0xe80ffff; valaddr_reg:x3; val_offset:59691*0 + 3*155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59691*0 + 3*155*FLEN/8, x4, x1, x2)

inst_19898:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x483325 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec83325; op2val:0x0;
op3val:0xe81ffff; valaddr_reg:x3; val_offset:59694*0 + 3*155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59694*0 + 3*155*FLEN/8, x4, x1, x2)

inst_19899:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x483325 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec83325; op2val:0x0;
op3val:0xe83ffff; valaddr_reg:x3; val_offset:59697*0 + 3*155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59697*0 + 3*155*FLEN/8, x4, x1, x2)

inst_19900:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x483325 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec83325; op2val:0x0;
op3val:0xe87ffff; valaddr_reg:x3; val_offset:59700*0 + 3*155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59700*0 + 3*155*FLEN/8, x4, x1, x2)

inst_19901:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x483325 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec83325; op2val:0x0;
op3val:0xe8fffff; valaddr_reg:x3; val_offset:59703*0 + 3*155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59703*0 + 3*155*FLEN/8, x4, x1, x2)

inst_19902:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x483325 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec83325; op2val:0x0;
op3val:0xe9fffff; valaddr_reg:x3; val_offset:59706*0 + 3*155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59706*0 + 3*155*FLEN/8, x4, x1, x2)

inst_19903:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x483325 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec83325; op2val:0x0;
op3val:0xebfffff; valaddr_reg:x3; val_offset:59709*0 + 3*155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59709*0 + 3*155*FLEN/8, x4, x1, x2)

inst_19904:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x483325 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec83325; op2val:0x0;
op3val:0xec00000; valaddr_reg:x3; val_offset:59712*0 + 3*155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59712*0 + 3*155*FLEN/8, x4, x1, x2)

inst_19905:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x483325 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec83325; op2val:0x0;
op3val:0xee00000; valaddr_reg:x3; val_offset:59715*0 + 3*155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59715*0 + 3*155*FLEN/8, x4, x1, x2)

inst_19906:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x483325 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec83325; op2val:0x0;
op3val:0xef00000; valaddr_reg:x3; val_offset:59718*0 + 3*155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59718*0 + 3*155*FLEN/8, x4, x1, x2)

inst_19907:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x483325 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec83325; op2val:0x0;
op3val:0xef80000; valaddr_reg:x3; val_offset:59721*0 + 3*155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59721*0 + 3*155*FLEN/8, x4, x1, x2)

inst_19908:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x483325 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec83325; op2val:0x0;
op3val:0xefc0000; valaddr_reg:x3; val_offset:59724*0 + 3*155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59724*0 + 3*155*FLEN/8, x4, x1, x2)

inst_19909:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x483325 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec83325; op2val:0x0;
op3val:0xefe0000; valaddr_reg:x3; val_offset:59727*0 + 3*155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59727*0 + 3*155*FLEN/8, x4, x1, x2)

inst_19910:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x483325 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec83325; op2val:0x0;
op3val:0xeff0000; valaddr_reg:x3; val_offset:59730*0 + 3*155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59730*0 + 3*155*FLEN/8, x4, x1, x2)

inst_19911:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x483325 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec83325; op2val:0x0;
op3val:0xeff8000; valaddr_reg:x3; val_offset:59733*0 + 3*155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59733*0 + 3*155*FLEN/8, x4, x1, x2)

inst_19912:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x483325 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec83325; op2val:0x0;
op3val:0xeffc000; valaddr_reg:x3; val_offset:59736*0 + 3*155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59736*0 + 3*155*FLEN/8, x4, x1, x2)

inst_19913:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x483325 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec83325; op2val:0x0;
op3val:0xeffe000; valaddr_reg:x3; val_offset:59739*0 + 3*155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59739*0 + 3*155*FLEN/8, x4, x1, x2)

inst_19914:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x483325 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec83325; op2val:0x0;
op3val:0xefff000; valaddr_reg:x3; val_offset:59742*0 + 3*155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59742*0 + 3*155*FLEN/8, x4, x1, x2)

inst_19915:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x483325 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec83325; op2val:0x0;
op3val:0xefff800; valaddr_reg:x3; val_offset:59745*0 + 3*155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59745*0 + 3*155*FLEN/8, x4, x1, x2)

inst_19916:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x483325 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec83325; op2val:0x0;
op3val:0xefffc00; valaddr_reg:x3; val_offset:59748*0 + 3*155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59748*0 + 3*155*FLEN/8, x4, x1, x2)

inst_19917:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x483325 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec83325; op2val:0x0;
op3val:0xefffe00; valaddr_reg:x3; val_offset:59751*0 + 3*155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59751*0 + 3*155*FLEN/8, x4, x1, x2)

inst_19918:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x483325 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec83325; op2val:0x0;
op3val:0xeffff00; valaddr_reg:x3; val_offset:59754*0 + 3*155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59754*0 + 3*155*FLEN/8, x4, x1, x2)

inst_19919:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x483325 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec83325; op2val:0x0;
op3val:0xeffff80; valaddr_reg:x3; val_offset:59757*0 + 3*155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59757*0 + 3*155*FLEN/8, x4, x1, x2)

inst_19920:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x483325 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec83325; op2val:0x0;
op3val:0xeffffc0; valaddr_reg:x3; val_offset:59760*0 + 3*155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59760*0 + 3*155*FLEN/8, x4, x1, x2)

inst_19921:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x483325 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec83325; op2val:0x0;
op3val:0xeffffe0; valaddr_reg:x3; val_offset:59763*0 + 3*155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59763*0 + 3*155*FLEN/8, x4, x1, x2)

inst_19922:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x483325 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec83325; op2val:0x0;
op3val:0xefffff0; valaddr_reg:x3; val_offset:59766*0 + 3*155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59766*0 + 3*155*FLEN/8, x4, x1, x2)

inst_19923:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x483325 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec83325; op2val:0x0;
op3val:0xefffff8; valaddr_reg:x3; val_offset:59769*0 + 3*155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59769*0 + 3*155*FLEN/8, x4, x1, x2)

inst_19924:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x483325 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec83325; op2val:0x0;
op3val:0xefffffc; valaddr_reg:x3; val_offset:59772*0 + 3*155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59772*0 + 3*155*FLEN/8, x4, x1, x2)

inst_19925:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x483325 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec83325; op2val:0x0;
op3val:0xefffffe; valaddr_reg:x3; val_offset:59775*0 + 3*155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59775*0 + 3*155*FLEN/8, x4, x1, x2)

inst_19926:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x483325 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec83325; op2val:0x0;
op3val:0xeffffff; valaddr_reg:x3; val_offset:59778*0 + 3*155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59778*0 + 3*155*FLEN/8, x4, x1, x2)

inst_19927:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x485e0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x51c511 and fs3 == 0 and fe3 == 0x49 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec85e0d; op2val:0x51c511;
op3val:0x24800000; valaddr_reg:x3; val_offset:59781*0 + 3*155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59781*0 + 3*155*FLEN/8, x4, x1, x2)

inst_19928:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x485e0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x51c511 and fs3 == 0 and fe3 == 0x49 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec85e0d; op2val:0x51c511;
op3val:0x24800001; valaddr_reg:x3; val_offset:59784*0 + 3*155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59784*0 + 3*155*FLEN/8, x4, x1, x2)

inst_19929:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x485e0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x51c511 and fs3 == 0 and fe3 == 0x49 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec85e0d; op2val:0x51c511;
op3val:0x24800003; valaddr_reg:x3; val_offset:59787*0 + 3*155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59787*0 + 3*155*FLEN/8, x4, x1, x2)

inst_19930:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x485e0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x51c511 and fs3 == 0 and fe3 == 0x49 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec85e0d; op2val:0x51c511;
op3val:0x24800007; valaddr_reg:x3; val_offset:59790*0 + 3*155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59790*0 + 3*155*FLEN/8, x4, x1, x2)

inst_19931:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x485e0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x51c511 and fs3 == 0 and fe3 == 0x49 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec85e0d; op2val:0x51c511;
op3val:0x2480000f; valaddr_reg:x3; val_offset:59793*0 + 3*155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59793*0 + 3*155*FLEN/8, x4, x1, x2)

inst_19932:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x485e0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x51c511 and fs3 == 0 and fe3 == 0x49 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec85e0d; op2val:0x51c511;
op3val:0x2480001f; valaddr_reg:x3; val_offset:59796*0 + 3*155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59796*0 + 3*155*FLEN/8, x4, x1, x2)

inst_19933:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x485e0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x51c511 and fs3 == 0 and fe3 == 0x49 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec85e0d; op2val:0x51c511;
op3val:0x2480003f; valaddr_reg:x3; val_offset:59799*0 + 3*155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59799*0 + 3*155*FLEN/8, x4, x1, x2)

inst_19934:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x485e0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x51c511 and fs3 == 0 and fe3 == 0x49 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec85e0d; op2val:0x51c511;
op3val:0x2480007f; valaddr_reg:x3; val_offset:59802*0 + 3*155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59802*0 + 3*155*FLEN/8, x4, x1, x2)

inst_19935:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x485e0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x51c511 and fs3 == 0 and fe3 == 0x49 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec85e0d; op2val:0x51c511;
op3val:0x248000ff; valaddr_reg:x3; val_offset:59805*0 + 3*155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59805*0 + 3*155*FLEN/8, x4, x1, x2)

inst_19936:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x485e0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x51c511 and fs3 == 0 and fe3 == 0x49 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec85e0d; op2val:0x51c511;
op3val:0x248001ff; valaddr_reg:x3; val_offset:59808*0 + 3*155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59808*0 + 3*155*FLEN/8, x4, x1, x2)

inst_19937:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x485e0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x51c511 and fs3 == 0 and fe3 == 0x49 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec85e0d; op2val:0x51c511;
op3val:0x248003ff; valaddr_reg:x3; val_offset:59811*0 + 3*155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59811*0 + 3*155*FLEN/8, x4, x1, x2)

inst_19938:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x485e0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x51c511 and fs3 == 0 and fe3 == 0x49 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec85e0d; op2val:0x51c511;
op3val:0x248007ff; valaddr_reg:x3; val_offset:59814*0 + 3*155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59814*0 + 3*155*FLEN/8, x4, x1, x2)

inst_19939:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x485e0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x51c511 and fs3 == 0 and fe3 == 0x49 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec85e0d; op2val:0x51c511;
op3val:0x24800fff; valaddr_reg:x3; val_offset:59817*0 + 3*155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59817*0 + 3*155*FLEN/8, x4, x1, x2)

inst_19940:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x485e0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x51c511 and fs3 == 0 and fe3 == 0x49 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec85e0d; op2val:0x51c511;
op3val:0x24801fff; valaddr_reg:x3; val_offset:59820*0 + 3*155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59820*0 + 3*155*FLEN/8, x4, x1, x2)

inst_19941:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x485e0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x51c511 and fs3 == 0 and fe3 == 0x49 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec85e0d; op2val:0x51c511;
op3val:0x24803fff; valaddr_reg:x3; val_offset:59823*0 + 3*155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59823*0 + 3*155*FLEN/8, x4, x1, x2)

inst_19942:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x485e0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x51c511 and fs3 == 0 and fe3 == 0x49 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec85e0d; op2val:0x51c511;
op3val:0x24807fff; valaddr_reg:x3; val_offset:59826*0 + 3*155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59826*0 + 3*155*FLEN/8, x4, x1, x2)

inst_19943:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x485e0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x51c511 and fs3 == 0 and fe3 == 0x49 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec85e0d; op2val:0x51c511;
op3val:0x2480ffff; valaddr_reg:x3; val_offset:59829*0 + 3*155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59829*0 + 3*155*FLEN/8, x4, x1, x2)

inst_19944:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x485e0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x51c511 and fs3 == 0 and fe3 == 0x49 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec85e0d; op2val:0x51c511;
op3val:0x2481ffff; valaddr_reg:x3; val_offset:59832*0 + 3*155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59832*0 + 3*155*FLEN/8, x4, x1, x2)

inst_19945:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x485e0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x51c511 and fs3 == 0 and fe3 == 0x49 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec85e0d; op2val:0x51c511;
op3val:0x2483ffff; valaddr_reg:x3; val_offset:59835*0 + 3*155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59835*0 + 3*155*FLEN/8, x4, x1, x2)

inst_19946:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x485e0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x51c511 and fs3 == 0 and fe3 == 0x49 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec85e0d; op2val:0x51c511;
op3val:0x2487ffff; valaddr_reg:x3; val_offset:59838*0 + 3*155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59838*0 + 3*155*FLEN/8, x4, x1, x2)

inst_19947:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x485e0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x51c511 and fs3 == 0 and fe3 == 0x49 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec85e0d; op2val:0x51c511;
op3val:0x248fffff; valaddr_reg:x3; val_offset:59841*0 + 3*155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59841*0 + 3*155*FLEN/8, x4, x1, x2)

inst_19948:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x485e0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x51c511 and fs3 == 0 and fe3 == 0x49 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec85e0d; op2val:0x51c511;
op3val:0x249fffff; valaddr_reg:x3; val_offset:59844*0 + 3*155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59844*0 + 3*155*FLEN/8, x4, x1, x2)

inst_19949:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x485e0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x51c511 and fs3 == 0 and fe3 == 0x49 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec85e0d; op2val:0x51c511;
op3val:0x24bfffff; valaddr_reg:x3; val_offset:59847*0 + 3*155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59847*0 + 3*155*FLEN/8, x4, x1, x2)

inst_19950:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x485e0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x51c511 and fs3 == 0 and fe3 == 0x49 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec85e0d; op2val:0x51c511;
op3val:0x24c00000; valaddr_reg:x3; val_offset:59850*0 + 3*155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59850*0 + 3*155*FLEN/8, x4, x1, x2)

inst_19951:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x485e0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x51c511 and fs3 == 0 and fe3 == 0x49 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec85e0d; op2val:0x51c511;
op3val:0x24e00000; valaddr_reg:x3; val_offset:59853*0 + 3*155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59853*0 + 3*155*FLEN/8, x4, x1, x2)

inst_19952:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x485e0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x51c511 and fs3 == 0 and fe3 == 0x49 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec85e0d; op2val:0x51c511;
op3val:0x24f00000; valaddr_reg:x3; val_offset:59856*0 + 3*155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59856*0 + 3*155*FLEN/8, x4, x1, x2)

inst_19953:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x485e0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x51c511 and fs3 == 0 and fe3 == 0x49 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec85e0d; op2val:0x51c511;
op3val:0x24f80000; valaddr_reg:x3; val_offset:59859*0 + 3*155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59859*0 + 3*155*FLEN/8, x4, x1, x2)

inst_19954:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x485e0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x51c511 and fs3 == 0 and fe3 == 0x49 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec85e0d; op2val:0x51c511;
op3val:0x24fc0000; valaddr_reg:x3; val_offset:59862*0 + 3*155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59862*0 + 3*155*FLEN/8, x4, x1, x2)

inst_19955:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x485e0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x51c511 and fs3 == 0 and fe3 == 0x49 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec85e0d; op2val:0x51c511;
op3val:0x24fe0000; valaddr_reg:x3; val_offset:59865*0 + 3*155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59865*0 + 3*155*FLEN/8, x4, x1, x2)

inst_19956:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x485e0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x51c511 and fs3 == 0 and fe3 == 0x49 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec85e0d; op2val:0x51c511;
op3val:0x24ff0000; valaddr_reg:x3; val_offset:59868*0 + 3*155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59868*0 + 3*155*FLEN/8, x4, x1, x2)

inst_19957:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x485e0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x51c511 and fs3 == 0 and fe3 == 0x49 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec85e0d; op2val:0x51c511;
op3val:0x24ff8000; valaddr_reg:x3; val_offset:59871*0 + 3*155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59871*0 + 3*155*FLEN/8, x4, x1, x2)

inst_19958:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x485e0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x51c511 and fs3 == 0 and fe3 == 0x49 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec85e0d; op2val:0x51c511;
op3val:0x24ffc000; valaddr_reg:x3; val_offset:59874*0 + 3*155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59874*0 + 3*155*FLEN/8, x4, x1, x2)

inst_19959:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x485e0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x51c511 and fs3 == 0 and fe3 == 0x49 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec85e0d; op2val:0x51c511;
op3val:0x24ffe000; valaddr_reg:x3; val_offset:59877*0 + 3*155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59877*0 + 3*155*FLEN/8, x4, x1, x2)

inst_19960:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x485e0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x51c511 and fs3 == 0 and fe3 == 0x49 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec85e0d; op2val:0x51c511;
op3val:0x24fff000; valaddr_reg:x3; val_offset:59880*0 + 3*155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59880*0 + 3*155*FLEN/8, x4, x1, x2)

inst_19961:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x485e0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x51c511 and fs3 == 0 and fe3 == 0x49 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec85e0d; op2val:0x51c511;
op3val:0x24fff800; valaddr_reg:x3; val_offset:59883*0 + 3*155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59883*0 + 3*155*FLEN/8, x4, x1, x2)

inst_19962:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x485e0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x51c511 and fs3 == 0 and fe3 == 0x49 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec85e0d; op2val:0x51c511;
op3val:0x24fffc00; valaddr_reg:x3; val_offset:59886*0 + 3*155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59886*0 + 3*155*FLEN/8, x4, x1, x2)

inst_19963:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x485e0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x51c511 and fs3 == 0 and fe3 == 0x49 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec85e0d; op2val:0x51c511;
op3val:0x24fffe00; valaddr_reg:x3; val_offset:59889*0 + 3*155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59889*0 + 3*155*FLEN/8, x4, x1, x2)

inst_19964:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x485e0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x51c511 and fs3 == 0 and fe3 == 0x49 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec85e0d; op2val:0x51c511;
op3val:0x24ffff00; valaddr_reg:x3; val_offset:59892*0 + 3*155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59892*0 + 3*155*FLEN/8, x4, x1, x2)

inst_19965:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x485e0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x51c511 and fs3 == 0 and fe3 == 0x49 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec85e0d; op2val:0x51c511;
op3val:0x24ffff80; valaddr_reg:x3; val_offset:59895*0 + 3*155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59895*0 + 3*155*FLEN/8, x4, x1, x2)

inst_19966:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x485e0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x51c511 and fs3 == 0 and fe3 == 0x49 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec85e0d; op2val:0x51c511;
op3val:0x24ffffc0; valaddr_reg:x3; val_offset:59898*0 + 3*155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59898*0 + 3*155*FLEN/8, x4, x1, x2)

inst_19967:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x485e0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x51c511 and fs3 == 0 and fe3 == 0x49 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec85e0d; op2val:0x51c511;
op3val:0x24ffffe0; valaddr_reg:x3; val_offset:59901*0 + 3*155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59901*0 + 3*155*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2127011269,32,FLEN)
NAN_BOXED(3223594921,32,FLEN)
NAN_BOXED(4269801216,32,FLEN)
NAN_BOXED(2127011269,32,FLEN)
NAN_BOXED(3223594921,32,FLEN)
NAN_BOXED(4269801344,32,FLEN)
NAN_BOXED(2127011269,32,FLEN)
NAN_BOXED(3223594921,32,FLEN)
NAN_BOXED(4269801408,32,FLEN)
NAN_BOXED(2127011269,32,FLEN)
NAN_BOXED(3223594921,32,FLEN)
NAN_BOXED(4269801440,32,FLEN)
NAN_BOXED(2127011269,32,FLEN)
NAN_BOXED(3223594921,32,FLEN)
NAN_BOXED(4269801456,32,FLEN)
NAN_BOXED(2127011269,32,FLEN)
NAN_BOXED(3223594921,32,FLEN)
NAN_BOXED(4269801464,32,FLEN)
NAN_BOXED(2127011269,32,FLEN)
NAN_BOXED(3223594921,32,FLEN)
NAN_BOXED(4269801468,32,FLEN)
NAN_BOXED(2127011269,32,FLEN)
NAN_BOXED(3223594921,32,FLEN)
NAN_BOXED(4269801470,32,FLEN)
NAN_BOXED(2127011269,32,FLEN)
NAN_BOXED(3223594921,32,FLEN)
NAN_BOXED(4269801471,32,FLEN)
NAN_BOXED(2127011269,32,FLEN)
NAN_BOXED(3223594921,32,FLEN)
NAN_BOXED(4278190081,32,FLEN)
NAN_BOXED(2127011269,32,FLEN)
NAN_BOXED(3223594921,32,FLEN)
NAN_BOXED(4278190083,32,FLEN)
NAN_BOXED(2127011269,32,FLEN)
NAN_BOXED(3223594921,32,FLEN)
NAN_BOXED(4278190087,32,FLEN)
NAN_BOXED(2127011269,32,FLEN)
NAN_BOXED(3223594921,32,FLEN)
NAN_BOXED(4279867801,32,FLEN)
NAN_BOXED(2127011269,32,FLEN)
NAN_BOXED(3223594921,32,FLEN)
NAN_BOXED(4280586825,32,FLEN)
NAN_BOXED(2127011269,32,FLEN)
NAN_BOXED(3223594921,32,FLEN)
NAN_BOXED(4281545523,32,FLEN)
NAN_BOXED(2127011269,32,FLEN)
NAN_BOXED(3223594921,32,FLEN)
NAN_BOXED(4281785197,32,FLEN)
NAN_BOXED(2127011269,32,FLEN)
NAN_BOXED(3223594921,32,FLEN)
NAN_BOXED(4282104763,32,FLEN)
NAN_BOXED(2127011269,32,FLEN)
NAN_BOXED(3223594921,32,FLEN)
NAN_BOXED(4282664004,32,FLEN)
NAN_BOXED(2127011269,32,FLEN)
NAN_BOXED(3223594921,32,FLEN)
NAN_BOXED(4283223244,32,FLEN)
NAN_BOXED(2127011269,32,FLEN)
NAN_BOXED(3223594921,32,FLEN)
NAN_BOXED(4284181942,32,FLEN)
NAN_BOXED(2127011269,32,FLEN)
NAN_BOXED(3223594921,32,FLEN)
NAN_BOXED(4284900966,32,FLEN)
NAN_BOXED(2127011269,32,FLEN)
NAN_BOXED(3223594921,32,FLEN)
NAN_BOXED(4285380315,32,FLEN)
NAN_BOXED(2127011269,32,FLEN)
NAN_BOXED(3223594921,32,FLEN)
NAN_BOXED(4286578680,32,FLEN)
NAN_BOXED(2127011269,32,FLEN)
NAN_BOXED(3223594921,32,FLEN)
NAN_BOXED(4286578684,32,FLEN)
NAN_BOXED(2127011269,32,FLEN)
NAN_BOXED(3223594921,32,FLEN)
NAN_BOXED(4286578686,32,FLEN)
NAN_BOXED(2127049509,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2127049509,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3,32,FLEN)
NAN_BOXED(2127049509,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7,32,FLEN)
NAN_BOXED(2127049509,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1677721,32,FLEN)
NAN_BOXED(2127049509,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2396745,32,FLEN)
NAN_BOXED(2127049509,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3355443,32,FLEN)
NAN_BOXED(2127049509,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3595117,32,FLEN)
NAN_BOXED(2127049509,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3914683,32,FLEN)
NAN_BOXED(2127049509,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4473924,32,FLEN)
NAN_BOXED(2127049509,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5033164,32,FLEN)
NAN_BOXED(2127049509,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5991862,32,FLEN)
NAN_BOXED(2127049509,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(6710886,32,FLEN)
NAN_BOXED(2127049509,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7190235,32,FLEN)
NAN_BOXED(2127049509,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388600,32,FLEN)
NAN_BOXED(2127049509,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388604,32,FLEN)
NAN_BOXED(2127049509,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388606,32,FLEN)
NAN_BOXED(2127049509,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243269632,32,FLEN)
NAN_BOXED(2127049509,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243269633,32,FLEN)
NAN_BOXED(2127049509,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243269635,32,FLEN)
NAN_BOXED(2127049509,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243269639,32,FLEN)
NAN_BOXED(2127049509,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243269647,32,FLEN)
NAN_BOXED(2127049509,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243269663,32,FLEN)
NAN_BOXED(2127049509,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243269695,32,FLEN)
NAN_BOXED(2127049509,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243269759,32,FLEN)
NAN_BOXED(2127049509,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243269887,32,FLEN)
NAN_BOXED(2127049509,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243270143,32,FLEN)
NAN_BOXED(2127049509,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243270655,32,FLEN)
NAN_BOXED(2127049509,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243271679,32,FLEN)
NAN_BOXED(2127049509,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243273727,32,FLEN)
NAN_BOXED(2127049509,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243277823,32,FLEN)
NAN_BOXED(2127049509,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243286015,32,FLEN)
NAN_BOXED(2127049509,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243302399,32,FLEN)
NAN_BOXED(2127049509,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243335167,32,FLEN)
NAN_BOXED(2127049509,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243400703,32,FLEN)
NAN_BOXED(2127049509,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243531775,32,FLEN)
NAN_BOXED(2127049509,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243793919,32,FLEN)
NAN_BOXED(2127049509,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(244318207,32,FLEN)
NAN_BOXED(2127049509,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(245366783,32,FLEN)
NAN_BOXED(2127049509,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(247463935,32,FLEN)
NAN_BOXED(2127049509,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(247463936,32,FLEN)
NAN_BOXED(2127049509,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(249561088,32,FLEN)
NAN_BOXED(2127049509,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(250609664,32,FLEN)
NAN_BOXED(2127049509,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251133952,32,FLEN)
NAN_BOXED(2127049509,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251396096,32,FLEN)
NAN_BOXED(2127049509,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251527168,32,FLEN)
NAN_BOXED(2127049509,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251592704,32,FLEN)
NAN_BOXED(2127049509,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251625472,32,FLEN)
NAN_BOXED(2127049509,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251641856,32,FLEN)
NAN_BOXED(2127049509,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251650048,32,FLEN)
NAN_BOXED(2127049509,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251654144,32,FLEN)
NAN_BOXED(2127049509,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251656192,32,FLEN)
NAN_BOXED(2127049509,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251657216,32,FLEN)
NAN_BOXED(2127049509,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251657728,32,FLEN)
NAN_BOXED(2127049509,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251657984,32,FLEN)
NAN_BOXED(2127049509,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251658112,32,FLEN)
NAN_BOXED(2127049509,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251658176,32,FLEN)
NAN_BOXED(2127049509,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251658208,32,FLEN)
NAN_BOXED(2127049509,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251658224,32,FLEN)
NAN_BOXED(2127049509,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251658232,32,FLEN)
NAN_BOXED(2127049509,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251658236,32,FLEN)
NAN_BOXED(2127049509,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251658238,32,FLEN)
NAN_BOXED(2127049509,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251658239,32,FLEN)
NAN_BOXED(2127060493,32,FLEN)
NAN_BOXED(5358865,32,FLEN)
NAN_BOXED(612368384,32,FLEN)
NAN_BOXED(2127060493,32,FLEN)
NAN_BOXED(5358865,32,FLEN)
NAN_BOXED(612368385,32,FLEN)
NAN_BOXED(2127060493,32,FLEN)
NAN_BOXED(5358865,32,FLEN)
NAN_BOXED(612368387,32,FLEN)
NAN_BOXED(2127060493,32,FLEN)
NAN_BOXED(5358865,32,FLEN)
NAN_BOXED(612368391,32,FLEN)
NAN_BOXED(2127060493,32,FLEN)
NAN_BOXED(5358865,32,FLEN)
NAN_BOXED(612368399,32,FLEN)
NAN_BOXED(2127060493,32,FLEN)
NAN_BOXED(5358865,32,FLEN)
NAN_BOXED(612368415,32,FLEN)
NAN_BOXED(2127060493,32,FLEN)
NAN_BOXED(5358865,32,FLEN)
NAN_BOXED(612368447,32,FLEN)
NAN_BOXED(2127060493,32,FLEN)
NAN_BOXED(5358865,32,FLEN)
NAN_BOXED(612368511,32,FLEN)
NAN_BOXED(2127060493,32,FLEN)
NAN_BOXED(5358865,32,FLEN)
NAN_BOXED(612368639,32,FLEN)
NAN_BOXED(2127060493,32,FLEN)
NAN_BOXED(5358865,32,FLEN)
NAN_BOXED(612368895,32,FLEN)
NAN_BOXED(2127060493,32,FLEN)
NAN_BOXED(5358865,32,FLEN)
NAN_BOXED(612369407,32,FLEN)
NAN_BOXED(2127060493,32,FLEN)
NAN_BOXED(5358865,32,FLEN)
NAN_BOXED(612370431,32,FLEN)
NAN_BOXED(2127060493,32,FLEN)
NAN_BOXED(5358865,32,FLEN)
NAN_BOXED(612372479,32,FLEN)
NAN_BOXED(2127060493,32,FLEN)
NAN_BOXED(5358865,32,FLEN)
NAN_BOXED(612376575,32,FLEN)
NAN_BOXED(2127060493,32,FLEN)
NAN_BOXED(5358865,32,FLEN)
NAN_BOXED(612384767,32,FLEN)
NAN_BOXED(2127060493,32,FLEN)
NAN_BOXED(5358865,32,FLEN)
NAN_BOXED(612401151,32,FLEN)
NAN_BOXED(2127060493,32,FLEN)
NAN_BOXED(5358865,32,FLEN)
NAN_BOXED(612433919,32,FLEN)
NAN_BOXED(2127060493,32,FLEN)
NAN_BOXED(5358865,32,FLEN)
NAN_BOXED(612499455,32,FLEN)
NAN_BOXED(2127060493,32,FLEN)
NAN_BOXED(5358865,32,FLEN)
NAN_BOXED(612630527,32,FLEN)
NAN_BOXED(2127060493,32,FLEN)
NAN_BOXED(5358865,32,FLEN)
NAN_BOXED(612892671,32,FLEN)
NAN_BOXED(2127060493,32,FLEN)
NAN_BOXED(5358865,32,FLEN)
NAN_BOXED(613416959,32,FLEN)
NAN_BOXED(2127060493,32,FLEN)
NAN_BOXED(5358865,32,FLEN)
NAN_BOXED(614465535,32,FLEN)
NAN_BOXED(2127060493,32,FLEN)
NAN_BOXED(5358865,32,FLEN)
NAN_BOXED(616562687,32,FLEN)
NAN_BOXED(2127060493,32,FLEN)
NAN_BOXED(5358865,32,FLEN)
NAN_BOXED(616562688,32,FLEN)
NAN_BOXED(2127060493,32,FLEN)
NAN_BOXED(5358865,32,FLEN)
NAN_BOXED(618659840,32,FLEN)
NAN_BOXED(2127060493,32,FLEN)
NAN_BOXED(5358865,32,FLEN)
NAN_BOXED(619708416,32,FLEN)
NAN_BOXED(2127060493,32,FLEN)
NAN_BOXED(5358865,32,FLEN)
NAN_BOXED(620232704,32,FLEN)
NAN_BOXED(2127060493,32,FLEN)
NAN_BOXED(5358865,32,FLEN)
NAN_BOXED(620494848,32,FLEN)
NAN_BOXED(2127060493,32,FLEN)
NAN_BOXED(5358865,32,FLEN)
NAN_BOXED(620625920,32,FLEN)
NAN_BOXED(2127060493,32,FLEN)
NAN_BOXED(5358865,32,FLEN)
NAN_BOXED(620691456,32,FLEN)
NAN_BOXED(2127060493,32,FLEN)
NAN_BOXED(5358865,32,FLEN)
NAN_BOXED(620724224,32,FLEN)
NAN_BOXED(2127060493,32,FLEN)
NAN_BOXED(5358865,32,FLEN)
NAN_BOXED(620740608,32,FLEN)
NAN_BOXED(2127060493,32,FLEN)
NAN_BOXED(5358865,32,FLEN)
NAN_BOXED(620748800,32,FLEN)
NAN_BOXED(2127060493,32,FLEN)
NAN_BOXED(5358865,32,FLEN)
NAN_BOXED(620752896,32,FLEN)
NAN_BOXED(2127060493,32,FLEN)
NAN_BOXED(5358865,32,FLEN)
NAN_BOXED(620754944,32,FLEN)
NAN_BOXED(2127060493,32,FLEN)
NAN_BOXED(5358865,32,FLEN)
NAN_BOXED(620755968,32,FLEN)
NAN_BOXED(2127060493,32,FLEN)
NAN_BOXED(5358865,32,FLEN)
NAN_BOXED(620756480,32,FLEN)
NAN_BOXED(2127060493,32,FLEN)
NAN_BOXED(5358865,32,FLEN)
NAN_BOXED(620756736,32,FLEN)
NAN_BOXED(2127060493,32,FLEN)
NAN_BOXED(5358865,32,FLEN)
NAN_BOXED(620756864,32,FLEN)
NAN_BOXED(2127060493,32,FLEN)
NAN_BOXED(5358865,32,FLEN)
NAN_BOXED(620756928,32,FLEN)
NAN_BOXED(2127060493,32,FLEN)
NAN_BOXED(5358865,32,FLEN)
NAN_BOXED(620756960,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
