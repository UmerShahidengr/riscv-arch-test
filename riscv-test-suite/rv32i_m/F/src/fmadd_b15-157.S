
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:17:59 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_19968:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x485e0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x51c511 and fs3 == 0 and fe3 == 0x49 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec85e0d; op2val:0x51c511;
op3val:0x24fffff0; valaddr_reg:x3; val_offset:59904*0 + 3*156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59904*0 + 3*156*FLEN/8, x4, x1, x2)

inst_19969:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x485e0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x51c511 and fs3 == 0 and fe3 == 0x49 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec85e0d; op2val:0x51c511;
op3val:0x24fffff8; valaddr_reg:x3; val_offset:59907*0 + 3*156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59907*0 + 3*156*FLEN/8, x4, x1, x2)

inst_19970:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x485e0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x51c511 and fs3 == 0 and fe3 == 0x49 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec85e0d; op2val:0x51c511;
op3val:0x24fffffc; valaddr_reg:x3; val_offset:59910*0 + 3*156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59910*0 + 3*156*FLEN/8, x4, x1, x2)

inst_19971:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x485e0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x51c511 and fs3 == 0 and fe3 == 0x49 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec85e0d; op2val:0x51c511;
op3val:0x24fffffe; valaddr_reg:x3; val_offset:59913*0 + 3*156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59913*0 + 3*156*FLEN/8, x4, x1, x2)

inst_19972:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x485e0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x51c511 and fs3 == 0 and fe3 == 0x49 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec85e0d; op2val:0x51c511;
op3val:0x24ffffff; valaddr_reg:x3; val_offset:59916*0 + 3*156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59916*0 + 3*156*FLEN/8, x4, x1, x2)

inst_19973:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x485e0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x51c511 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec85e0d; op2val:0x51c511;
op3val:0x3f800001; valaddr_reg:x3; val_offset:59919*0 + 3*156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59919*0 + 3*156*FLEN/8, x4, x1, x2)

inst_19974:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x485e0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x51c511 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec85e0d; op2val:0x51c511;
op3val:0x3f800003; valaddr_reg:x3; val_offset:59922*0 + 3*156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59922*0 + 3*156*FLEN/8, x4, x1, x2)

inst_19975:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x485e0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x51c511 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec85e0d; op2val:0x51c511;
op3val:0x3f800007; valaddr_reg:x3; val_offset:59925*0 + 3*156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59925*0 + 3*156*FLEN/8, x4, x1, x2)

inst_19976:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x485e0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x51c511 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec85e0d; op2val:0x51c511;
op3val:0x3f999999; valaddr_reg:x3; val_offset:59928*0 + 3*156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59928*0 + 3*156*FLEN/8, x4, x1, x2)

inst_19977:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x485e0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x51c511 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec85e0d; op2val:0x51c511;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:59931*0 + 3*156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59931*0 + 3*156*FLEN/8, x4, x1, x2)

inst_19978:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x485e0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x51c511 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec85e0d; op2val:0x51c511;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:59934*0 + 3*156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59934*0 + 3*156*FLEN/8, x4, x1, x2)

inst_19979:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x485e0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x51c511 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec85e0d; op2val:0x51c511;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:59937*0 + 3*156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59937*0 + 3*156*FLEN/8, x4, x1, x2)

inst_19980:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x485e0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x51c511 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec85e0d; op2val:0x51c511;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:59940*0 + 3*156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59940*0 + 3*156*FLEN/8, x4, x1, x2)

inst_19981:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x485e0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x51c511 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec85e0d; op2val:0x51c511;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:59943*0 + 3*156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59943*0 + 3*156*FLEN/8, x4, x1, x2)

inst_19982:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x485e0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x51c511 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec85e0d; op2val:0x51c511;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:59946*0 + 3*156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59946*0 + 3*156*FLEN/8, x4, x1, x2)

inst_19983:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x485e0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x51c511 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec85e0d; op2val:0x51c511;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:59949*0 + 3*156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59949*0 + 3*156*FLEN/8, x4, x1, x2)

inst_19984:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x485e0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x51c511 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec85e0d; op2val:0x51c511;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:59952*0 + 3*156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59952*0 + 3*156*FLEN/8, x4, x1, x2)

inst_19985:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x485e0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x51c511 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec85e0d; op2val:0x51c511;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:59955*0 + 3*156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59955*0 + 3*156*FLEN/8, x4, x1, x2)

inst_19986:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x485e0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x51c511 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec85e0d; op2val:0x51c511;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:59958*0 + 3*156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59958*0 + 3*156*FLEN/8, x4, x1, x2)

inst_19987:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x485e0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x51c511 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec85e0d; op2val:0x51c511;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:59961*0 + 3*156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59961*0 + 3*156*FLEN/8, x4, x1, x2)

inst_19988:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x485e0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x51c511 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec85e0d; op2val:0x51c511;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:59964*0 + 3*156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59964*0 + 3*156*FLEN/8, x4, x1, x2)

inst_19989:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48d9ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec8d9ed; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:59967*0 + 3*156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59967*0 + 3*156*FLEN/8, x4, x1, x2)

inst_19990:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48d9ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec8d9ed; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:59970*0 + 3*156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59970*0 + 3*156*FLEN/8, x4, x1, x2)

inst_19991:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48d9ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec8d9ed; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:59973*0 + 3*156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59973*0 + 3*156*FLEN/8, x4, x1, x2)

inst_19992:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48d9ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec8d9ed; op2val:0x0;
op3val:0x199999; valaddr_reg:x3; val_offset:59976*0 + 3*156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59976*0 + 3*156*FLEN/8, x4, x1, x2)

inst_19993:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48d9ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec8d9ed; op2val:0x0;
op3val:0x249249; valaddr_reg:x3; val_offset:59979*0 + 3*156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59979*0 + 3*156*FLEN/8, x4, x1, x2)

inst_19994:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48d9ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec8d9ed; op2val:0x0;
op3val:0x333333; valaddr_reg:x3; val_offset:59982*0 + 3*156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59982*0 + 3*156*FLEN/8, x4, x1, x2)

inst_19995:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48d9ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec8d9ed; op2val:0x0;
op3val:0x36db6d; valaddr_reg:x3; val_offset:59985*0 + 3*156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59985*0 + 3*156*FLEN/8, x4, x1, x2)

inst_19996:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48d9ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec8d9ed; op2val:0x0;
op3val:0x3bbbbb; valaddr_reg:x3; val_offset:59988*0 + 3*156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59988*0 + 3*156*FLEN/8, x4, x1, x2)

inst_19997:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48d9ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec8d9ed; op2val:0x0;
op3val:0x444444; valaddr_reg:x3; val_offset:59991*0 + 3*156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59991*0 + 3*156*FLEN/8, x4, x1, x2)

inst_19998:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48d9ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec8d9ed; op2val:0x0;
op3val:0x4ccccc; valaddr_reg:x3; val_offset:59994*0 + 3*156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59994*0 + 3*156*FLEN/8, x4, x1, x2)

inst_19999:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48d9ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec8d9ed; op2val:0x0;
op3val:0x5b6db6; valaddr_reg:x3; val_offset:59997*0 + 3*156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59997*0 + 3*156*FLEN/8, x4, x1, x2)

inst_20000:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48d9ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec8d9ed; op2val:0x0;
op3val:0x666666; valaddr_reg:x3; val_offset:60000*0 + 3*156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60000*0 + 3*156*FLEN/8, x4, x1, x2)

inst_20001:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48d9ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec8d9ed; op2val:0x0;
op3val:0x6db6db; valaddr_reg:x3; val_offset:60003*0 + 3*156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60003*0 + 3*156*FLEN/8, x4, x1, x2)

inst_20002:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48d9ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec8d9ed; op2val:0x0;
op3val:0x7ffff8; valaddr_reg:x3; val_offset:60006*0 + 3*156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60006*0 + 3*156*FLEN/8, x4, x1, x2)

inst_20003:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48d9ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec8d9ed; op2val:0x0;
op3val:0x7ffffc; valaddr_reg:x3; val_offset:60009*0 + 3*156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60009*0 + 3*156*FLEN/8, x4, x1, x2)

inst_20004:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48d9ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec8d9ed; op2val:0x0;
op3val:0x7ffffe; valaddr_reg:x3; val_offset:60012*0 + 3*156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60012*0 + 3*156*FLEN/8, x4, x1, x2)

inst_20005:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48d9ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec8d9ed; op2val:0x0;
op3val:0x4000000; valaddr_reg:x3; val_offset:60015*0 + 3*156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60015*0 + 3*156*FLEN/8, x4, x1, x2)

inst_20006:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48d9ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec8d9ed; op2val:0x0;
op3val:0x4000001; valaddr_reg:x3; val_offset:60018*0 + 3*156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60018*0 + 3*156*FLEN/8, x4, x1, x2)

inst_20007:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48d9ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec8d9ed; op2val:0x0;
op3val:0x4000003; valaddr_reg:x3; val_offset:60021*0 + 3*156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60021*0 + 3*156*FLEN/8, x4, x1, x2)

inst_20008:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48d9ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec8d9ed; op2val:0x0;
op3val:0x4000007; valaddr_reg:x3; val_offset:60024*0 + 3*156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60024*0 + 3*156*FLEN/8, x4, x1, x2)

inst_20009:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48d9ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec8d9ed; op2val:0x0;
op3val:0x400000f; valaddr_reg:x3; val_offset:60027*0 + 3*156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60027*0 + 3*156*FLEN/8, x4, x1, x2)

inst_20010:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48d9ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec8d9ed; op2val:0x0;
op3val:0x400001f; valaddr_reg:x3; val_offset:60030*0 + 3*156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60030*0 + 3*156*FLEN/8, x4, x1, x2)

inst_20011:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48d9ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec8d9ed; op2val:0x0;
op3val:0x400003f; valaddr_reg:x3; val_offset:60033*0 + 3*156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60033*0 + 3*156*FLEN/8, x4, x1, x2)

inst_20012:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48d9ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec8d9ed; op2val:0x0;
op3val:0x400007f; valaddr_reg:x3; val_offset:60036*0 + 3*156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60036*0 + 3*156*FLEN/8, x4, x1, x2)

inst_20013:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48d9ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec8d9ed; op2val:0x0;
op3val:0x40000ff; valaddr_reg:x3; val_offset:60039*0 + 3*156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60039*0 + 3*156*FLEN/8, x4, x1, x2)

inst_20014:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48d9ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec8d9ed; op2val:0x0;
op3val:0x40001ff; valaddr_reg:x3; val_offset:60042*0 + 3*156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60042*0 + 3*156*FLEN/8, x4, x1, x2)

inst_20015:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48d9ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec8d9ed; op2val:0x0;
op3val:0x40003ff; valaddr_reg:x3; val_offset:60045*0 + 3*156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60045*0 + 3*156*FLEN/8, x4, x1, x2)

inst_20016:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48d9ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec8d9ed; op2val:0x0;
op3val:0x40007ff; valaddr_reg:x3; val_offset:60048*0 + 3*156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60048*0 + 3*156*FLEN/8, x4, x1, x2)

inst_20017:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48d9ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec8d9ed; op2val:0x0;
op3val:0x4000fff; valaddr_reg:x3; val_offset:60051*0 + 3*156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60051*0 + 3*156*FLEN/8, x4, x1, x2)

inst_20018:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48d9ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec8d9ed; op2val:0x0;
op3val:0x4001fff; valaddr_reg:x3; val_offset:60054*0 + 3*156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60054*0 + 3*156*FLEN/8, x4, x1, x2)

inst_20019:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48d9ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec8d9ed; op2val:0x0;
op3val:0x4003fff; valaddr_reg:x3; val_offset:60057*0 + 3*156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60057*0 + 3*156*FLEN/8, x4, x1, x2)

inst_20020:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48d9ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec8d9ed; op2val:0x0;
op3val:0x4007fff; valaddr_reg:x3; val_offset:60060*0 + 3*156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60060*0 + 3*156*FLEN/8, x4, x1, x2)

inst_20021:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48d9ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec8d9ed; op2val:0x0;
op3val:0x400ffff; valaddr_reg:x3; val_offset:60063*0 + 3*156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60063*0 + 3*156*FLEN/8, x4, x1, x2)

inst_20022:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48d9ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec8d9ed; op2val:0x0;
op3val:0x401ffff; valaddr_reg:x3; val_offset:60066*0 + 3*156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60066*0 + 3*156*FLEN/8, x4, x1, x2)

inst_20023:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48d9ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec8d9ed; op2val:0x0;
op3val:0x403ffff; valaddr_reg:x3; val_offset:60069*0 + 3*156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60069*0 + 3*156*FLEN/8, x4, x1, x2)

inst_20024:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48d9ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec8d9ed; op2val:0x0;
op3val:0x407ffff; valaddr_reg:x3; val_offset:60072*0 + 3*156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60072*0 + 3*156*FLEN/8, x4, x1, x2)

inst_20025:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48d9ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec8d9ed; op2val:0x0;
op3val:0x40fffff; valaddr_reg:x3; val_offset:60075*0 + 3*156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60075*0 + 3*156*FLEN/8, x4, x1, x2)

inst_20026:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48d9ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec8d9ed; op2val:0x0;
op3val:0x41fffff; valaddr_reg:x3; val_offset:60078*0 + 3*156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60078*0 + 3*156*FLEN/8, x4, x1, x2)

inst_20027:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48d9ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec8d9ed; op2val:0x0;
op3val:0x43fffff; valaddr_reg:x3; val_offset:60081*0 + 3*156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60081*0 + 3*156*FLEN/8, x4, x1, x2)

inst_20028:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48d9ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec8d9ed; op2val:0x0;
op3val:0x4400000; valaddr_reg:x3; val_offset:60084*0 + 3*156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60084*0 + 3*156*FLEN/8, x4, x1, x2)

inst_20029:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48d9ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec8d9ed; op2val:0x0;
op3val:0x4600000; valaddr_reg:x3; val_offset:60087*0 + 3*156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60087*0 + 3*156*FLEN/8, x4, x1, x2)

inst_20030:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48d9ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec8d9ed; op2val:0x0;
op3val:0x4700000; valaddr_reg:x3; val_offset:60090*0 + 3*156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60090*0 + 3*156*FLEN/8, x4, x1, x2)

inst_20031:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48d9ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec8d9ed; op2val:0x0;
op3val:0x4780000; valaddr_reg:x3; val_offset:60093*0 + 3*156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60093*0 + 3*156*FLEN/8, x4, x1, x2)

inst_20032:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48d9ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec8d9ed; op2val:0x0;
op3val:0x47c0000; valaddr_reg:x3; val_offset:60096*0 + 3*156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60096*0 + 3*156*FLEN/8, x4, x1, x2)

inst_20033:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48d9ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec8d9ed; op2val:0x0;
op3val:0x47e0000; valaddr_reg:x3; val_offset:60099*0 + 3*156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60099*0 + 3*156*FLEN/8, x4, x1, x2)

inst_20034:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48d9ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec8d9ed; op2val:0x0;
op3val:0x47f0000; valaddr_reg:x3; val_offset:60102*0 + 3*156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60102*0 + 3*156*FLEN/8, x4, x1, x2)

inst_20035:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48d9ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec8d9ed; op2val:0x0;
op3val:0x47f8000; valaddr_reg:x3; val_offset:60105*0 + 3*156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60105*0 + 3*156*FLEN/8, x4, x1, x2)

inst_20036:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48d9ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec8d9ed; op2val:0x0;
op3val:0x47fc000; valaddr_reg:x3; val_offset:60108*0 + 3*156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60108*0 + 3*156*FLEN/8, x4, x1, x2)

inst_20037:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48d9ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec8d9ed; op2val:0x0;
op3val:0x47fe000; valaddr_reg:x3; val_offset:60111*0 + 3*156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60111*0 + 3*156*FLEN/8, x4, x1, x2)

inst_20038:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48d9ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec8d9ed; op2val:0x0;
op3val:0x47ff000; valaddr_reg:x3; val_offset:60114*0 + 3*156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60114*0 + 3*156*FLEN/8, x4, x1, x2)

inst_20039:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48d9ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec8d9ed; op2val:0x0;
op3val:0x47ff800; valaddr_reg:x3; val_offset:60117*0 + 3*156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60117*0 + 3*156*FLEN/8, x4, x1, x2)

inst_20040:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48d9ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec8d9ed; op2val:0x0;
op3val:0x47ffc00; valaddr_reg:x3; val_offset:60120*0 + 3*156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60120*0 + 3*156*FLEN/8, x4, x1, x2)

inst_20041:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48d9ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec8d9ed; op2val:0x0;
op3val:0x47ffe00; valaddr_reg:x3; val_offset:60123*0 + 3*156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60123*0 + 3*156*FLEN/8, x4, x1, x2)

inst_20042:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48d9ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec8d9ed; op2val:0x0;
op3val:0x47fff00; valaddr_reg:x3; val_offset:60126*0 + 3*156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60126*0 + 3*156*FLEN/8, x4, x1, x2)

inst_20043:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48d9ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec8d9ed; op2val:0x0;
op3val:0x47fff80; valaddr_reg:x3; val_offset:60129*0 + 3*156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60129*0 + 3*156*FLEN/8, x4, x1, x2)

inst_20044:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48d9ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec8d9ed; op2val:0x0;
op3val:0x47fffc0; valaddr_reg:x3; val_offset:60132*0 + 3*156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60132*0 + 3*156*FLEN/8, x4, x1, x2)

inst_20045:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48d9ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec8d9ed; op2val:0x0;
op3val:0x47fffe0; valaddr_reg:x3; val_offset:60135*0 + 3*156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60135*0 + 3*156*FLEN/8, x4, x1, x2)

inst_20046:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48d9ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec8d9ed; op2val:0x0;
op3val:0x47ffff0; valaddr_reg:x3; val_offset:60138*0 + 3*156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60138*0 + 3*156*FLEN/8, x4, x1, x2)

inst_20047:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48d9ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec8d9ed; op2val:0x0;
op3val:0x47ffff8; valaddr_reg:x3; val_offset:60141*0 + 3*156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60141*0 + 3*156*FLEN/8, x4, x1, x2)

inst_20048:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48d9ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec8d9ed; op2val:0x0;
op3val:0x47ffffc; valaddr_reg:x3; val_offset:60144*0 + 3*156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60144*0 + 3*156*FLEN/8, x4, x1, x2)

inst_20049:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48d9ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec8d9ed; op2val:0x0;
op3val:0x47ffffe; valaddr_reg:x3; val_offset:60147*0 + 3*156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60147*0 + 3*156*FLEN/8, x4, x1, x2)

inst_20050:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48d9ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec8d9ed; op2val:0x0;
op3val:0x47fffff; valaddr_reg:x3; val_offset:60150*0 + 3*156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60150*0 + 3*156*FLEN/8, x4, x1, x2)

inst_20051:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x496fb6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5155fa and fs3 == 0 and fe3 == 0x48 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec96fb6; op2val:0x5155fa;
op3val:0x24000000; valaddr_reg:x3; val_offset:60153*0 + 3*156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60153*0 + 3*156*FLEN/8, x4, x1, x2)

inst_20052:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x496fb6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5155fa and fs3 == 0 and fe3 == 0x48 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec96fb6; op2val:0x5155fa;
op3val:0x24000001; valaddr_reg:x3; val_offset:60156*0 + 3*156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60156*0 + 3*156*FLEN/8, x4, x1, x2)

inst_20053:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x496fb6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5155fa and fs3 == 0 and fe3 == 0x48 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec96fb6; op2val:0x5155fa;
op3val:0x24000003; valaddr_reg:x3; val_offset:60159*0 + 3*156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60159*0 + 3*156*FLEN/8, x4, x1, x2)

inst_20054:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x496fb6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5155fa and fs3 == 0 and fe3 == 0x48 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec96fb6; op2val:0x5155fa;
op3val:0x24000007; valaddr_reg:x3; val_offset:60162*0 + 3*156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60162*0 + 3*156*FLEN/8, x4, x1, x2)

inst_20055:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x496fb6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5155fa and fs3 == 0 and fe3 == 0x48 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec96fb6; op2val:0x5155fa;
op3val:0x2400000f; valaddr_reg:x3; val_offset:60165*0 + 3*156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60165*0 + 3*156*FLEN/8, x4, x1, x2)

inst_20056:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x496fb6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5155fa and fs3 == 0 and fe3 == 0x48 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec96fb6; op2val:0x5155fa;
op3val:0x2400001f; valaddr_reg:x3; val_offset:60168*0 + 3*156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60168*0 + 3*156*FLEN/8, x4, x1, x2)

inst_20057:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x496fb6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5155fa and fs3 == 0 and fe3 == 0x48 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec96fb6; op2val:0x5155fa;
op3val:0x2400003f; valaddr_reg:x3; val_offset:60171*0 + 3*156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60171*0 + 3*156*FLEN/8, x4, x1, x2)

inst_20058:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x496fb6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5155fa and fs3 == 0 and fe3 == 0x48 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec96fb6; op2val:0x5155fa;
op3val:0x2400007f; valaddr_reg:x3; val_offset:60174*0 + 3*156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60174*0 + 3*156*FLEN/8, x4, x1, x2)

inst_20059:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x496fb6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5155fa and fs3 == 0 and fe3 == 0x48 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec96fb6; op2val:0x5155fa;
op3val:0x240000ff; valaddr_reg:x3; val_offset:60177*0 + 3*156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60177*0 + 3*156*FLEN/8, x4, x1, x2)

inst_20060:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x496fb6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5155fa and fs3 == 0 and fe3 == 0x48 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec96fb6; op2val:0x5155fa;
op3val:0x240001ff; valaddr_reg:x3; val_offset:60180*0 + 3*156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60180*0 + 3*156*FLEN/8, x4, x1, x2)

inst_20061:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x496fb6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5155fa and fs3 == 0 and fe3 == 0x48 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec96fb6; op2val:0x5155fa;
op3val:0x240003ff; valaddr_reg:x3; val_offset:60183*0 + 3*156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60183*0 + 3*156*FLEN/8, x4, x1, x2)

inst_20062:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x496fb6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5155fa and fs3 == 0 and fe3 == 0x48 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec96fb6; op2val:0x5155fa;
op3val:0x240007ff; valaddr_reg:x3; val_offset:60186*0 + 3*156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60186*0 + 3*156*FLEN/8, x4, x1, x2)

inst_20063:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x496fb6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5155fa and fs3 == 0 and fe3 == 0x48 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec96fb6; op2val:0x5155fa;
op3val:0x24000fff; valaddr_reg:x3; val_offset:60189*0 + 3*156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60189*0 + 3*156*FLEN/8, x4, x1, x2)

inst_20064:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x496fb6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5155fa and fs3 == 0 and fe3 == 0x48 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec96fb6; op2val:0x5155fa;
op3val:0x24001fff; valaddr_reg:x3; val_offset:60192*0 + 3*156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60192*0 + 3*156*FLEN/8, x4, x1, x2)

inst_20065:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x496fb6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5155fa and fs3 == 0 and fe3 == 0x48 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec96fb6; op2val:0x5155fa;
op3val:0x24003fff; valaddr_reg:x3; val_offset:60195*0 + 3*156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60195*0 + 3*156*FLEN/8, x4, x1, x2)

inst_20066:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x496fb6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5155fa and fs3 == 0 and fe3 == 0x48 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec96fb6; op2val:0x5155fa;
op3val:0x24007fff; valaddr_reg:x3; val_offset:60198*0 + 3*156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60198*0 + 3*156*FLEN/8, x4, x1, x2)

inst_20067:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x496fb6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5155fa and fs3 == 0 and fe3 == 0x48 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec96fb6; op2val:0x5155fa;
op3val:0x2400ffff; valaddr_reg:x3; val_offset:60201*0 + 3*156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60201*0 + 3*156*FLEN/8, x4, x1, x2)

inst_20068:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x496fb6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5155fa and fs3 == 0 and fe3 == 0x48 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec96fb6; op2val:0x5155fa;
op3val:0x2401ffff; valaddr_reg:x3; val_offset:60204*0 + 3*156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60204*0 + 3*156*FLEN/8, x4, x1, x2)

inst_20069:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x496fb6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5155fa and fs3 == 0 and fe3 == 0x48 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec96fb6; op2val:0x5155fa;
op3val:0x2403ffff; valaddr_reg:x3; val_offset:60207*0 + 3*156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60207*0 + 3*156*FLEN/8, x4, x1, x2)

inst_20070:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x496fb6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5155fa and fs3 == 0 and fe3 == 0x48 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec96fb6; op2val:0x5155fa;
op3val:0x2407ffff; valaddr_reg:x3; val_offset:60210*0 + 3*156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60210*0 + 3*156*FLEN/8, x4, x1, x2)

inst_20071:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x496fb6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5155fa and fs3 == 0 and fe3 == 0x48 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec96fb6; op2val:0x5155fa;
op3val:0x240fffff; valaddr_reg:x3; val_offset:60213*0 + 3*156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60213*0 + 3*156*FLEN/8, x4, x1, x2)

inst_20072:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x496fb6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5155fa and fs3 == 0 and fe3 == 0x48 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec96fb6; op2val:0x5155fa;
op3val:0x241fffff; valaddr_reg:x3; val_offset:60216*0 + 3*156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60216*0 + 3*156*FLEN/8, x4, x1, x2)

inst_20073:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x496fb6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5155fa and fs3 == 0 and fe3 == 0x48 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec96fb6; op2val:0x5155fa;
op3val:0x243fffff; valaddr_reg:x3; val_offset:60219*0 + 3*156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60219*0 + 3*156*FLEN/8, x4, x1, x2)

inst_20074:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x496fb6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5155fa and fs3 == 0 and fe3 == 0x48 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec96fb6; op2val:0x5155fa;
op3val:0x24400000; valaddr_reg:x3; val_offset:60222*0 + 3*156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60222*0 + 3*156*FLEN/8, x4, x1, x2)

inst_20075:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x496fb6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5155fa and fs3 == 0 and fe3 == 0x48 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec96fb6; op2val:0x5155fa;
op3val:0x24600000; valaddr_reg:x3; val_offset:60225*0 + 3*156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60225*0 + 3*156*FLEN/8, x4, x1, x2)

inst_20076:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x496fb6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5155fa and fs3 == 0 and fe3 == 0x48 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec96fb6; op2val:0x5155fa;
op3val:0x24700000; valaddr_reg:x3; val_offset:60228*0 + 3*156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60228*0 + 3*156*FLEN/8, x4, x1, x2)

inst_20077:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x496fb6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5155fa and fs3 == 0 and fe3 == 0x48 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec96fb6; op2val:0x5155fa;
op3val:0x24780000; valaddr_reg:x3; val_offset:60231*0 + 3*156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60231*0 + 3*156*FLEN/8, x4, x1, x2)

inst_20078:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x496fb6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5155fa and fs3 == 0 and fe3 == 0x48 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec96fb6; op2val:0x5155fa;
op3val:0x247c0000; valaddr_reg:x3; val_offset:60234*0 + 3*156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60234*0 + 3*156*FLEN/8, x4, x1, x2)

inst_20079:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x496fb6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5155fa and fs3 == 0 and fe3 == 0x48 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec96fb6; op2val:0x5155fa;
op3val:0x247e0000; valaddr_reg:x3; val_offset:60237*0 + 3*156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60237*0 + 3*156*FLEN/8, x4, x1, x2)

inst_20080:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x496fb6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5155fa and fs3 == 0 and fe3 == 0x48 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec96fb6; op2val:0x5155fa;
op3val:0x247f0000; valaddr_reg:x3; val_offset:60240*0 + 3*156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60240*0 + 3*156*FLEN/8, x4, x1, x2)

inst_20081:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x496fb6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5155fa and fs3 == 0 and fe3 == 0x48 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec96fb6; op2val:0x5155fa;
op3val:0x247f8000; valaddr_reg:x3; val_offset:60243*0 + 3*156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60243*0 + 3*156*FLEN/8, x4, x1, x2)

inst_20082:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x496fb6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5155fa and fs3 == 0 and fe3 == 0x48 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec96fb6; op2val:0x5155fa;
op3val:0x247fc000; valaddr_reg:x3; val_offset:60246*0 + 3*156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60246*0 + 3*156*FLEN/8, x4, x1, x2)

inst_20083:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x496fb6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5155fa and fs3 == 0 and fe3 == 0x48 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec96fb6; op2val:0x5155fa;
op3val:0x247fe000; valaddr_reg:x3; val_offset:60249*0 + 3*156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60249*0 + 3*156*FLEN/8, x4, x1, x2)

inst_20084:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x496fb6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5155fa and fs3 == 0 and fe3 == 0x48 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec96fb6; op2val:0x5155fa;
op3val:0x247ff000; valaddr_reg:x3; val_offset:60252*0 + 3*156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60252*0 + 3*156*FLEN/8, x4, x1, x2)

inst_20085:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x496fb6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5155fa and fs3 == 0 and fe3 == 0x48 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec96fb6; op2val:0x5155fa;
op3val:0x247ff800; valaddr_reg:x3; val_offset:60255*0 + 3*156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60255*0 + 3*156*FLEN/8, x4, x1, x2)

inst_20086:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x496fb6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5155fa and fs3 == 0 and fe3 == 0x48 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec96fb6; op2val:0x5155fa;
op3val:0x247ffc00; valaddr_reg:x3; val_offset:60258*0 + 3*156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60258*0 + 3*156*FLEN/8, x4, x1, x2)

inst_20087:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x496fb6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5155fa and fs3 == 0 and fe3 == 0x48 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec96fb6; op2val:0x5155fa;
op3val:0x247ffe00; valaddr_reg:x3; val_offset:60261*0 + 3*156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60261*0 + 3*156*FLEN/8, x4, x1, x2)

inst_20088:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x496fb6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5155fa and fs3 == 0 and fe3 == 0x48 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec96fb6; op2val:0x5155fa;
op3val:0x247fff00; valaddr_reg:x3; val_offset:60264*0 + 3*156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60264*0 + 3*156*FLEN/8, x4, x1, x2)

inst_20089:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x496fb6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5155fa and fs3 == 0 and fe3 == 0x48 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec96fb6; op2val:0x5155fa;
op3val:0x247fff80; valaddr_reg:x3; val_offset:60267*0 + 3*156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60267*0 + 3*156*FLEN/8, x4, x1, x2)

inst_20090:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x496fb6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5155fa and fs3 == 0 and fe3 == 0x48 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec96fb6; op2val:0x5155fa;
op3val:0x247fffc0; valaddr_reg:x3; val_offset:60270*0 + 3*156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60270*0 + 3*156*FLEN/8, x4, x1, x2)

inst_20091:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x496fb6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5155fa and fs3 == 0 and fe3 == 0x48 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec96fb6; op2val:0x5155fa;
op3val:0x247fffe0; valaddr_reg:x3; val_offset:60273*0 + 3*156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60273*0 + 3*156*FLEN/8, x4, x1, x2)

inst_20092:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x496fb6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5155fa and fs3 == 0 and fe3 == 0x48 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec96fb6; op2val:0x5155fa;
op3val:0x247ffff0; valaddr_reg:x3; val_offset:60276*0 + 3*156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60276*0 + 3*156*FLEN/8, x4, x1, x2)

inst_20093:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x496fb6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5155fa and fs3 == 0 and fe3 == 0x48 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec96fb6; op2val:0x5155fa;
op3val:0x247ffff8; valaddr_reg:x3; val_offset:60279*0 + 3*156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60279*0 + 3*156*FLEN/8, x4, x1, x2)

inst_20094:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x496fb6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5155fa and fs3 == 0 and fe3 == 0x48 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec96fb6; op2val:0x5155fa;
op3val:0x247ffffc; valaddr_reg:x3; val_offset:60282*0 + 3*156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60282*0 + 3*156*FLEN/8, x4, x1, x2)

inst_20095:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x496fb6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5155fa and fs3 == 0 and fe3 == 0x48 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec96fb6; op2val:0x5155fa;
op3val:0x247ffffe; valaddr_reg:x3; val_offset:60285*0 + 3*156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60285*0 + 3*156*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2127060493,32,FLEN)
NAN_BOXED(5358865,32,FLEN)
NAN_BOXED(620756976,32,FLEN)
NAN_BOXED(2127060493,32,FLEN)
NAN_BOXED(5358865,32,FLEN)
NAN_BOXED(620756984,32,FLEN)
NAN_BOXED(2127060493,32,FLEN)
NAN_BOXED(5358865,32,FLEN)
NAN_BOXED(620756988,32,FLEN)
NAN_BOXED(2127060493,32,FLEN)
NAN_BOXED(5358865,32,FLEN)
NAN_BOXED(620756990,32,FLEN)
NAN_BOXED(2127060493,32,FLEN)
NAN_BOXED(5358865,32,FLEN)
NAN_BOXED(620756991,32,FLEN)
NAN_BOXED(2127060493,32,FLEN)
NAN_BOXED(5358865,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2127060493,32,FLEN)
NAN_BOXED(5358865,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2127060493,32,FLEN)
NAN_BOXED(5358865,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2127060493,32,FLEN)
NAN_BOXED(5358865,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2127060493,32,FLEN)
NAN_BOXED(5358865,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2127060493,32,FLEN)
NAN_BOXED(5358865,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2127060493,32,FLEN)
NAN_BOXED(5358865,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2127060493,32,FLEN)
NAN_BOXED(5358865,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2127060493,32,FLEN)
NAN_BOXED(5358865,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2127060493,32,FLEN)
NAN_BOXED(5358865,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2127060493,32,FLEN)
NAN_BOXED(5358865,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2127060493,32,FLEN)
NAN_BOXED(5358865,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2127060493,32,FLEN)
NAN_BOXED(5358865,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2127060493,32,FLEN)
NAN_BOXED(5358865,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2127060493,32,FLEN)
NAN_BOXED(5358865,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2127060493,32,FLEN)
NAN_BOXED(5358865,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2127092205,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2127092205,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3,32,FLEN)
NAN_BOXED(2127092205,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7,32,FLEN)
NAN_BOXED(2127092205,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1677721,32,FLEN)
NAN_BOXED(2127092205,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2396745,32,FLEN)
NAN_BOXED(2127092205,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3355443,32,FLEN)
NAN_BOXED(2127092205,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3595117,32,FLEN)
NAN_BOXED(2127092205,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3914683,32,FLEN)
NAN_BOXED(2127092205,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4473924,32,FLEN)
NAN_BOXED(2127092205,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5033164,32,FLEN)
NAN_BOXED(2127092205,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5991862,32,FLEN)
NAN_BOXED(2127092205,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(6710886,32,FLEN)
NAN_BOXED(2127092205,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7190235,32,FLEN)
NAN_BOXED(2127092205,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388600,32,FLEN)
NAN_BOXED(2127092205,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388604,32,FLEN)
NAN_BOXED(2127092205,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388606,32,FLEN)
NAN_BOXED(2127092205,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67108864,32,FLEN)
NAN_BOXED(2127092205,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67108865,32,FLEN)
NAN_BOXED(2127092205,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67108867,32,FLEN)
NAN_BOXED(2127092205,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67108871,32,FLEN)
NAN_BOXED(2127092205,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67108879,32,FLEN)
NAN_BOXED(2127092205,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67108895,32,FLEN)
NAN_BOXED(2127092205,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67108927,32,FLEN)
NAN_BOXED(2127092205,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67108991,32,FLEN)
NAN_BOXED(2127092205,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67109119,32,FLEN)
NAN_BOXED(2127092205,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67109375,32,FLEN)
NAN_BOXED(2127092205,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67109887,32,FLEN)
NAN_BOXED(2127092205,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67110911,32,FLEN)
NAN_BOXED(2127092205,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67112959,32,FLEN)
NAN_BOXED(2127092205,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67117055,32,FLEN)
NAN_BOXED(2127092205,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67125247,32,FLEN)
NAN_BOXED(2127092205,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67141631,32,FLEN)
NAN_BOXED(2127092205,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67174399,32,FLEN)
NAN_BOXED(2127092205,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67239935,32,FLEN)
NAN_BOXED(2127092205,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67371007,32,FLEN)
NAN_BOXED(2127092205,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67633151,32,FLEN)
NAN_BOXED(2127092205,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(68157439,32,FLEN)
NAN_BOXED(2127092205,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(69206015,32,FLEN)
NAN_BOXED(2127092205,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(71303167,32,FLEN)
NAN_BOXED(2127092205,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(71303168,32,FLEN)
NAN_BOXED(2127092205,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(73400320,32,FLEN)
NAN_BOXED(2127092205,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(74448896,32,FLEN)
NAN_BOXED(2127092205,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(74973184,32,FLEN)
NAN_BOXED(2127092205,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75235328,32,FLEN)
NAN_BOXED(2127092205,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75366400,32,FLEN)
NAN_BOXED(2127092205,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75431936,32,FLEN)
NAN_BOXED(2127092205,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75464704,32,FLEN)
NAN_BOXED(2127092205,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75481088,32,FLEN)
NAN_BOXED(2127092205,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75489280,32,FLEN)
NAN_BOXED(2127092205,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75493376,32,FLEN)
NAN_BOXED(2127092205,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75495424,32,FLEN)
NAN_BOXED(2127092205,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75496448,32,FLEN)
NAN_BOXED(2127092205,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75496960,32,FLEN)
NAN_BOXED(2127092205,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75497216,32,FLEN)
NAN_BOXED(2127092205,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75497344,32,FLEN)
NAN_BOXED(2127092205,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75497408,32,FLEN)
NAN_BOXED(2127092205,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75497440,32,FLEN)
NAN_BOXED(2127092205,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75497456,32,FLEN)
NAN_BOXED(2127092205,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75497464,32,FLEN)
NAN_BOXED(2127092205,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75497468,32,FLEN)
NAN_BOXED(2127092205,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75497470,32,FLEN)
NAN_BOXED(2127092205,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75497471,32,FLEN)
NAN_BOXED(2127130550,32,FLEN)
NAN_BOXED(5330426,32,FLEN)
NAN_BOXED(603979776,32,FLEN)
NAN_BOXED(2127130550,32,FLEN)
NAN_BOXED(5330426,32,FLEN)
NAN_BOXED(603979777,32,FLEN)
NAN_BOXED(2127130550,32,FLEN)
NAN_BOXED(5330426,32,FLEN)
NAN_BOXED(603979779,32,FLEN)
NAN_BOXED(2127130550,32,FLEN)
NAN_BOXED(5330426,32,FLEN)
NAN_BOXED(603979783,32,FLEN)
NAN_BOXED(2127130550,32,FLEN)
NAN_BOXED(5330426,32,FLEN)
NAN_BOXED(603979791,32,FLEN)
NAN_BOXED(2127130550,32,FLEN)
NAN_BOXED(5330426,32,FLEN)
NAN_BOXED(603979807,32,FLEN)
NAN_BOXED(2127130550,32,FLEN)
NAN_BOXED(5330426,32,FLEN)
NAN_BOXED(603979839,32,FLEN)
NAN_BOXED(2127130550,32,FLEN)
NAN_BOXED(5330426,32,FLEN)
NAN_BOXED(603979903,32,FLEN)
NAN_BOXED(2127130550,32,FLEN)
NAN_BOXED(5330426,32,FLEN)
NAN_BOXED(603980031,32,FLEN)
NAN_BOXED(2127130550,32,FLEN)
NAN_BOXED(5330426,32,FLEN)
NAN_BOXED(603980287,32,FLEN)
NAN_BOXED(2127130550,32,FLEN)
NAN_BOXED(5330426,32,FLEN)
NAN_BOXED(603980799,32,FLEN)
NAN_BOXED(2127130550,32,FLEN)
NAN_BOXED(5330426,32,FLEN)
NAN_BOXED(603981823,32,FLEN)
NAN_BOXED(2127130550,32,FLEN)
NAN_BOXED(5330426,32,FLEN)
NAN_BOXED(603983871,32,FLEN)
NAN_BOXED(2127130550,32,FLEN)
NAN_BOXED(5330426,32,FLEN)
NAN_BOXED(603987967,32,FLEN)
NAN_BOXED(2127130550,32,FLEN)
NAN_BOXED(5330426,32,FLEN)
NAN_BOXED(603996159,32,FLEN)
NAN_BOXED(2127130550,32,FLEN)
NAN_BOXED(5330426,32,FLEN)
NAN_BOXED(604012543,32,FLEN)
NAN_BOXED(2127130550,32,FLEN)
NAN_BOXED(5330426,32,FLEN)
NAN_BOXED(604045311,32,FLEN)
NAN_BOXED(2127130550,32,FLEN)
NAN_BOXED(5330426,32,FLEN)
NAN_BOXED(604110847,32,FLEN)
NAN_BOXED(2127130550,32,FLEN)
NAN_BOXED(5330426,32,FLEN)
NAN_BOXED(604241919,32,FLEN)
NAN_BOXED(2127130550,32,FLEN)
NAN_BOXED(5330426,32,FLEN)
NAN_BOXED(604504063,32,FLEN)
NAN_BOXED(2127130550,32,FLEN)
NAN_BOXED(5330426,32,FLEN)
NAN_BOXED(605028351,32,FLEN)
NAN_BOXED(2127130550,32,FLEN)
NAN_BOXED(5330426,32,FLEN)
NAN_BOXED(606076927,32,FLEN)
NAN_BOXED(2127130550,32,FLEN)
NAN_BOXED(5330426,32,FLEN)
NAN_BOXED(608174079,32,FLEN)
NAN_BOXED(2127130550,32,FLEN)
NAN_BOXED(5330426,32,FLEN)
NAN_BOXED(608174080,32,FLEN)
NAN_BOXED(2127130550,32,FLEN)
NAN_BOXED(5330426,32,FLEN)
NAN_BOXED(610271232,32,FLEN)
NAN_BOXED(2127130550,32,FLEN)
NAN_BOXED(5330426,32,FLEN)
NAN_BOXED(611319808,32,FLEN)
NAN_BOXED(2127130550,32,FLEN)
NAN_BOXED(5330426,32,FLEN)
NAN_BOXED(611844096,32,FLEN)
NAN_BOXED(2127130550,32,FLEN)
NAN_BOXED(5330426,32,FLEN)
NAN_BOXED(612106240,32,FLEN)
NAN_BOXED(2127130550,32,FLEN)
NAN_BOXED(5330426,32,FLEN)
NAN_BOXED(612237312,32,FLEN)
NAN_BOXED(2127130550,32,FLEN)
NAN_BOXED(5330426,32,FLEN)
NAN_BOXED(612302848,32,FLEN)
NAN_BOXED(2127130550,32,FLEN)
NAN_BOXED(5330426,32,FLEN)
NAN_BOXED(612335616,32,FLEN)
NAN_BOXED(2127130550,32,FLEN)
NAN_BOXED(5330426,32,FLEN)
NAN_BOXED(612352000,32,FLEN)
NAN_BOXED(2127130550,32,FLEN)
NAN_BOXED(5330426,32,FLEN)
NAN_BOXED(612360192,32,FLEN)
NAN_BOXED(2127130550,32,FLEN)
NAN_BOXED(5330426,32,FLEN)
NAN_BOXED(612364288,32,FLEN)
NAN_BOXED(2127130550,32,FLEN)
NAN_BOXED(5330426,32,FLEN)
NAN_BOXED(612366336,32,FLEN)
NAN_BOXED(2127130550,32,FLEN)
NAN_BOXED(5330426,32,FLEN)
NAN_BOXED(612367360,32,FLEN)
NAN_BOXED(2127130550,32,FLEN)
NAN_BOXED(5330426,32,FLEN)
NAN_BOXED(612367872,32,FLEN)
NAN_BOXED(2127130550,32,FLEN)
NAN_BOXED(5330426,32,FLEN)
NAN_BOXED(612368128,32,FLEN)
NAN_BOXED(2127130550,32,FLEN)
NAN_BOXED(5330426,32,FLEN)
NAN_BOXED(612368256,32,FLEN)
NAN_BOXED(2127130550,32,FLEN)
NAN_BOXED(5330426,32,FLEN)
NAN_BOXED(612368320,32,FLEN)
NAN_BOXED(2127130550,32,FLEN)
NAN_BOXED(5330426,32,FLEN)
NAN_BOXED(612368352,32,FLEN)
NAN_BOXED(2127130550,32,FLEN)
NAN_BOXED(5330426,32,FLEN)
NAN_BOXED(612368368,32,FLEN)
NAN_BOXED(2127130550,32,FLEN)
NAN_BOXED(5330426,32,FLEN)
NAN_BOXED(612368376,32,FLEN)
NAN_BOXED(2127130550,32,FLEN)
NAN_BOXED(5330426,32,FLEN)
NAN_BOXED(612368380,32,FLEN)
NAN_BOXED(2127130550,32,FLEN)
NAN_BOXED(5330426,32,FLEN)
NAN_BOXED(612368382,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
