
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:17:59 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_20096:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x496fb6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5155fa and fs3 == 0 and fe3 == 0x48 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec96fb6; op2val:0x5155fa;
op3val:0x247fffff; valaddr_reg:x3; val_offset:60288*0 + 3*157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60288*0 + 3*157*FLEN/8, x4, x1, x2)

inst_20097:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x496fb6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5155fa and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec96fb6; op2val:0x5155fa;
op3val:0x3f800001; valaddr_reg:x3; val_offset:60291*0 + 3*157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60291*0 + 3*157*FLEN/8, x4, x1, x2)

inst_20098:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x496fb6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5155fa and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec96fb6; op2val:0x5155fa;
op3val:0x3f800003; valaddr_reg:x3; val_offset:60294*0 + 3*157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60294*0 + 3*157*FLEN/8, x4, x1, x2)

inst_20099:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x496fb6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5155fa and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec96fb6; op2val:0x5155fa;
op3val:0x3f800007; valaddr_reg:x3; val_offset:60297*0 + 3*157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60297*0 + 3*157*FLEN/8, x4, x1, x2)

inst_20100:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x496fb6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5155fa and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec96fb6; op2val:0x5155fa;
op3val:0x3f999999; valaddr_reg:x3; val_offset:60300*0 + 3*157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60300*0 + 3*157*FLEN/8, x4, x1, x2)

inst_20101:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x496fb6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5155fa and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec96fb6; op2val:0x5155fa;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:60303*0 + 3*157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60303*0 + 3*157*FLEN/8, x4, x1, x2)

inst_20102:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x496fb6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5155fa and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec96fb6; op2val:0x5155fa;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:60306*0 + 3*157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60306*0 + 3*157*FLEN/8, x4, x1, x2)

inst_20103:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x496fb6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5155fa and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec96fb6; op2val:0x5155fa;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:60309*0 + 3*157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60309*0 + 3*157*FLEN/8, x4, x1, x2)

inst_20104:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x496fb6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5155fa and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec96fb6; op2val:0x5155fa;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:60312*0 + 3*157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60312*0 + 3*157*FLEN/8, x4, x1, x2)

inst_20105:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x496fb6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5155fa and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec96fb6; op2val:0x5155fa;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:60315*0 + 3*157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60315*0 + 3*157*FLEN/8, x4, x1, x2)

inst_20106:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x496fb6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5155fa and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec96fb6; op2val:0x5155fa;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:60318*0 + 3*157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60318*0 + 3*157*FLEN/8, x4, x1, x2)

inst_20107:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x496fb6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5155fa and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec96fb6; op2val:0x5155fa;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:60321*0 + 3*157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60321*0 + 3*157*FLEN/8, x4, x1, x2)

inst_20108:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x496fb6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5155fa and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec96fb6; op2val:0x5155fa;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:60324*0 + 3*157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60324*0 + 3*157*FLEN/8, x4, x1, x2)

inst_20109:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x496fb6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5155fa and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec96fb6; op2val:0x5155fa;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:60327*0 + 3*157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60327*0 + 3*157*FLEN/8, x4, x1, x2)

inst_20110:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x496fb6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5155fa and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec96fb6; op2val:0x5155fa;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:60330*0 + 3*157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60330*0 + 3*157*FLEN/8, x4, x1, x2)

inst_20111:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x496fb6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5155fa and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec96fb6; op2val:0x5155fa;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:60333*0 + 3*157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60333*0 + 3*157*FLEN/8, x4, x1, x2)

inst_20112:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x496fb6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5155fa and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec96fb6; op2val:0x5155fa;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:60336*0 + 3*157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60336*0 + 3*157*FLEN/8, x4, x1, x2)

inst_20113:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x49e9c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec9e9c9; op2val:0x80000000;
op3val:0x80000001; valaddr_reg:x3; val_offset:60339*0 + 3*157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60339*0 + 3*157*FLEN/8, x4, x1, x2)

inst_20114:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x49e9c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec9e9c9; op2val:0x80000000;
op3val:0x80000003; valaddr_reg:x3; val_offset:60342*0 + 3*157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60342*0 + 3*157*FLEN/8, x4, x1, x2)

inst_20115:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x49e9c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec9e9c9; op2val:0x80000000;
op3val:0x80000007; valaddr_reg:x3; val_offset:60345*0 + 3*157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60345*0 + 3*157*FLEN/8, x4, x1, x2)

inst_20116:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x49e9c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec9e9c9; op2val:0x80000000;
op3val:0x80199999; valaddr_reg:x3; val_offset:60348*0 + 3*157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60348*0 + 3*157*FLEN/8, x4, x1, x2)

inst_20117:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x49e9c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec9e9c9; op2val:0x80000000;
op3val:0x80249249; valaddr_reg:x3; val_offset:60351*0 + 3*157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60351*0 + 3*157*FLEN/8, x4, x1, x2)

inst_20118:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x49e9c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec9e9c9; op2val:0x80000000;
op3val:0x80333333; valaddr_reg:x3; val_offset:60354*0 + 3*157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60354*0 + 3*157*FLEN/8, x4, x1, x2)

inst_20119:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x49e9c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec9e9c9; op2val:0x80000000;
op3val:0x8036db6d; valaddr_reg:x3; val_offset:60357*0 + 3*157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60357*0 + 3*157*FLEN/8, x4, x1, x2)

inst_20120:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x49e9c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec9e9c9; op2val:0x80000000;
op3val:0x803bbbbb; valaddr_reg:x3; val_offset:60360*0 + 3*157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60360*0 + 3*157*FLEN/8, x4, x1, x2)

inst_20121:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x49e9c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec9e9c9; op2val:0x80000000;
op3val:0x80444444; valaddr_reg:x3; val_offset:60363*0 + 3*157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60363*0 + 3*157*FLEN/8, x4, x1, x2)

inst_20122:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x49e9c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec9e9c9; op2val:0x80000000;
op3val:0x804ccccc; valaddr_reg:x3; val_offset:60366*0 + 3*157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60366*0 + 3*157*FLEN/8, x4, x1, x2)

inst_20123:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x49e9c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec9e9c9; op2val:0x80000000;
op3val:0x805b6db6; valaddr_reg:x3; val_offset:60369*0 + 3*157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60369*0 + 3*157*FLEN/8, x4, x1, x2)

inst_20124:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x49e9c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec9e9c9; op2val:0x80000000;
op3val:0x80666666; valaddr_reg:x3; val_offset:60372*0 + 3*157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60372*0 + 3*157*FLEN/8, x4, x1, x2)

inst_20125:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x49e9c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec9e9c9; op2val:0x80000000;
op3val:0x806db6db; valaddr_reg:x3; val_offset:60375*0 + 3*157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60375*0 + 3*157*FLEN/8, x4, x1, x2)

inst_20126:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x49e9c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec9e9c9; op2val:0x80000000;
op3val:0x807ffff8; valaddr_reg:x3; val_offset:60378*0 + 3*157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60378*0 + 3*157*FLEN/8, x4, x1, x2)

inst_20127:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x49e9c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec9e9c9; op2val:0x80000000;
op3val:0x807ffffc; valaddr_reg:x3; val_offset:60381*0 + 3*157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60381*0 + 3*157*FLEN/8, x4, x1, x2)

inst_20128:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x49e9c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec9e9c9; op2val:0x80000000;
op3val:0x807ffffe; valaddr_reg:x3; val_offset:60384*0 + 3*157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60384*0 + 3*157*FLEN/8, x4, x1, x2)

inst_20129:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x49e9c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec9e9c9; op2val:0x80000000;
op3val:0x88000000; valaddr_reg:x3; val_offset:60387*0 + 3*157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60387*0 + 3*157*FLEN/8, x4, x1, x2)

inst_20130:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x49e9c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec9e9c9; op2val:0x80000000;
op3val:0x88000001; valaddr_reg:x3; val_offset:60390*0 + 3*157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60390*0 + 3*157*FLEN/8, x4, x1, x2)

inst_20131:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x49e9c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec9e9c9; op2val:0x80000000;
op3val:0x88000003; valaddr_reg:x3; val_offset:60393*0 + 3*157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60393*0 + 3*157*FLEN/8, x4, x1, x2)

inst_20132:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x49e9c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec9e9c9; op2val:0x80000000;
op3val:0x88000007; valaddr_reg:x3; val_offset:60396*0 + 3*157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60396*0 + 3*157*FLEN/8, x4, x1, x2)

inst_20133:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x49e9c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec9e9c9; op2val:0x80000000;
op3val:0x8800000f; valaddr_reg:x3; val_offset:60399*0 + 3*157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60399*0 + 3*157*FLEN/8, x4, x1, x2)

inst_20134:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x49e9c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec9e9c9; op2val:0x80000000;
op3val:0x8800001f; valaddr_reg:x3; val_offset:60402*0 + 3*157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60402*0 + 3*157*FLEN/8, x4, x1, x2)

inst_20135:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x49e9c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec9e9c9; op2val:0x80000000;
op3val:0x8800003f; valaddr_reg:x3; val_offset:60405*0 + 3*157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60405*0 + 3*157*FLEN/8, x4, x1, x2)

inst_20136:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x49e9c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec9e9c9; op2val:0x80000000;
op3val:0x8800007f; valaddr_reg:x3; val_offset:60408*0 + 3*157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60408*0 + 3*157*FLEN/8, x4, x1, x2)

inst_20137:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x49e9c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec9e9c9; op2val:0x80000000;
op3val:0x880000ff; valaddr_reg:x3; val_offset:60411*0 + 3*157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60411*0 + 3*157*FLEN/8, x4, x1, x2)

inst_20138:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x49e9c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec9e9c9; op2val:0x80000000;
op3val:0x880001ff; valaddr_reg:x3; val_offset:60414*0 + 3*157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60414*0 + 3*157*FLEN/8, x4, x1, x2)

inst_20139:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x49e9c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec9e9c9; op2val:0x80000000;
op3val:0x880003ff; valaddr_reg:x3; val_offset:60417*0 + 3*157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60417*0 + 3*157*FLEN/8, x4, x1, x2)

inst_20140:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x49e9c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec9e9c9; op2val:0x80000000;
op3val:0x880007ff; valaddr_reg:x3; val_offset:60420*0 + 3*157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60420*0 + 3*157*FLEN/8, x4, x1, x2)

inst_20141:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x49e9c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec9e9c9; op2val:0x80000000;
op3val:0x88000fff; valaddr_reg:x3; val_offset:60423*0 + 3*157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60423*0 + 3*157*FLEN/8, x4, x1, x2)

inst_20142:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x49e9c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec9e9c9; op2val:0x80000000;
op3val:0x88001fff; valaddr_reg:x3; val_offset:60426*0 + 3*157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60426*0 + 3*157*FLEN/8, x4, x1, x2)

inst_20143:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x49e9c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec9e9c9; op2val:0x80000000;
op3val:0x88003fff; valaddr_reg:x3; val_offset:60429*0 + 3*157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60429*0 + 3*157*FLEN/8, x4, x1, x2)

inst_20144:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x49e9c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec9e9c9; op2val:0x80000000;
op3val:0x88007fff; valaddr_reg:x3; val_offset:60432*0 + 3*157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60432*0 + 3*157*FLEN/8, x4, x1, x2)

inst_20145:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x49e9c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec9e9c9; op2val:0x80000000;
op3val:0x8800ffff; valaddr_reg:x3; val_offset:60435*0 + 3*157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60435*0 + 3*157*FLEN/8, x4, x1, x2)

inst_20146:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x49e9c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec9e9c9; op2val:0x80000000;
op3val:0x8801ffff; valaddr_reg:x3; val_offset:60438*0 + 3*157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60438*0 + 3*157*FLEN/8, x4, x1, x2)

inst_20147:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x49e9c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec9e9c9; op2val:0x80000000;
op3val:0x8803ffff; valaddr_reg:x3; val_offset:60441*0 + 3*157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60441*0 + 3*157*FLEN/8, x4, x1, x2)

inst_20148:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x49e9c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec9e9c9; op2val:0x80000000;
op3val:0x8807ffff; valaddr_reg:x3; val_offset:60444*0 + 3*157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60444*0 + 3*157*FLEN/8, x4, x1, x2)

inst_20149:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x49e9c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec9e9c9; op2val:0x80000000;
op3val:0x880fffff; valaddr_reg:x3; val_offset:60447*0 + 3*157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60447*0 + 3*157*FLEN/8, x4, x1, x2)

inst_20150:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x49e9c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec9e9c9; op2val:0x80000000;
op3val:0x881fffff; valaddr_reg:x3; val_offset:60450*0 + 3*157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60450*0 + 3*157*FLEN/8, x4, x1, x2)

inst_20151:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x49e9c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec9e9c9; op2val:0x80000000;
op3val:0x883fffff; valaddr_reg:x3; val_offset:60453*0 + 3*157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60453*0 + 3*157*FLEN/8, x4, x1, x2)

inst_20152:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x49e9c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec9e9c9; op2val:0x80000000;
op3val:0x88400000; valaddr_reg:x3; val_offset:60456*0 + 3*157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60456*0 + 3*157*FLEN/8, x4, x1, x2)

inst_20153:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x49e9c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec9e9c9; op2val:0x80000000;
op3val:0x88600000; valaddr_reg:x3; val_offset:60459*0 + 3*157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60459*0 + 3*157*FLEN/8, x4, x1, x2)

inst_20154:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x49e9c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec9e9c9; op2val:0x80000000;
op3val:0x88700000; valaddr_reg:x3; val_offset:60462*0 + 3*157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60462*0 + 3*157*FLEN/8, x4, x1, x2)

inst_20155:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x49e9c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec9e9c9; op2val:0x80000000;
op3val:0x88780000; valaddr_reg:x3; val_offset:60465*0 + 3*157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60465*0 + 3*157*FLEN/8, x4, x1, x2)

inst_20156:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x49e9c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec9e9c9; op2val:0x80000000;
op3val:0x887c0000; valaddr_reg:x3; val_offset:60468*0 + 3*157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60468*0 + 3*157*FLEN/8, x4, x1, x2)

inst_20157:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x49e9c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec9e9c9; op2val:0x80000000;
op3val:0x887e0000; valaddr_reg:x3; val_offset:60471*0 + 3*157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60471*0 + 3*157*FLEN/8, x4, x1, x2)

inst_20158:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x49e9c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec9e9c9; op2val:0x80000000;
op3val:0x887f0000; valaddr_reg:x3; val_offset:60474*0 + 3*157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60474*0 + 3*157*FLEN/8, x4, x1, x2)

inst_20159:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x49e9c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec9e9c9; op2val:0x80000000;
op3val:0x887f8000; valaddr_reg:x3; val_offset:60477*0 + 3*157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60477*0 + 3*157*FLEN/8, x4, x1, x2)

inst_20160:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x49e9c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec9e9c9; op2val:0x80000000;
op3val:0x887fc000; valaddr_reg:x3; val_offset:60480*0 + 3*157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60480*0 + 3*157*FLEN/8, x4, x1, x2)

inst_20161:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x49e9c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec9e9c9; op2val:0x80000000;
op3val:0x887fe000; valaddr_reg:x3; val_offset:60483*0 + 3*157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60483*0 + 3*157*FLEN/8, x4, x1, x2)

inst_20162:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x49e9c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec9e9c9; op2val:0x80000000;
op3val:0x887ff000; valaddr_reg:x3; val_offset:60486*0 + 3*157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60486*0 + 3*157*FLEN/8, x4, x1, x2)

inst_20163:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x49e9c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec9e9c9; op2val:0x80000000;
op3val:0x887ff800; valaddr_reg:x3; val_offset:60489*0 + 3*157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60489*0 + 3*157*FLEN/8, x4, x1, x2)

inst_20164:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x49e9c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec9e9c9; op2val:0x80000000;
op3val:0x887ffc00; valaddr_reg:x3; val_offset:60492*0 + 3*157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60492*0 + 3*157*FLEN/8, x4, x1, x2)

inst_20165:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x49e9c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec9e9c9; op2val:0x80000000;
op3val:0x887ffe00; valaddr_reg:x3; val_offset:60495*0 + 3*157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60495*0 + 3*157*FLEN/8, x4, x1, x2)

inst_20166:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x49e9c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec9e9c9; op2val:0x80000000;
op3val:0x887fff00; valaddr_reg:x3; val_offset:60498*0 + 3*157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60498*0 + 3*157*FLEN/8, x4, x1, x2)

inst_20167:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x49e9c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec9e9c9; op2val:0x80000000;
op3val:0x887fff80; valaddr_reg:x3; val_offset:60501*0 + 3*157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60501*0 + 3*157*FLEN/8, x4, x1, x2)

inst_20168:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x49e9c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec9e9c9; op2val:0x80000000;
op3val:0x887fffc0; valaddr_reg:x3; val_offset:60504*0 + 3*157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60504*0 + 3*157*FLEN/8, x4, x1, x2)

inst_20169:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x49e9c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec9e9c9; op2val:0x80000000;
op3val:0x887fffe0; valaddr_reg:x3; val_offset:60507*0 + 3*157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60507*0 + 3*157*FLEN/8, x4, x1, x2)

inst_20170:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x49e9c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec9e9c9; op2val:0x80000000;
op3val:0x887ffff0; valaddr_reg:x3; val_offset:60510*0 + 3*157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60510*0 + 3*157*FLEN/8, x4, x1, x2)

inst_20171:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x49e9c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec9e9c9; op2val:0x80000000;
op3val:0x887ffff8; valaddr_reg:x3; val_offset:60513*0 + 3*157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60513*0 + 3*157*FLEN/8, x4, x1, x2)

inst_20172:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x49e9c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec9e9c9; op2val:0x80000000;
op3val:0x887ffffc; valaddr_reg:x3; val_offset:60516*0 + 3*157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60516*0 + 3*157*FLEN/8, x4, x1, x2)

inst_20173:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x49e9c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec9e9c9; op2val:0x80000000;
op3val:0x887ffffe; valaddr_reg:x3; val_offset:60519*0 + 3*157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60519*0 + 3*157*FLEN/8, x4, x1, x2)

inst_20174:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x49e9c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec9e9c9; op2val:0x80000000;
op3val:0x887fffff; valaddr_reg:x3; val_offset:60522*0 + 3*157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60522*0 + 3*157*FLEN/8, x4, x1, x2)

inst_20175:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4a05eb and fs2 == 1 and fe2 == 0x80 and fm2 == 0x223301 and fs3 == 1 and fe3 == 0xe9 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eca05eb; op2val:0xc0223301;
op3val:0xf4800000; valaddr_reg:x3; val_offset:60525*0 + 3*157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60525*0 + 3*157*FLEN/8, x4, x1, x2)

inst_20176:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4a05eb and fs2 == 1 and fe2 == 0x80 and fm2 == 0x223301 and fs3 == 1 and fe3 == 0xe9 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eca05eb; op2val:0xc0223301;
op3val:0xf4800001; valaddr_reg:x3; val_offset:60528*0 + 3*157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60528*0 + 3*157*FLEN/8, x4, x1, x2)

inst_20177:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4a05eb and fs2 == 1 and fe2 == 0x80 and fm2 == 0x223301 and fs3 == 1 and fe3 == 0xe9 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eca05eb; op2val:0xc0223301;
op3val:0xf4800003; valaddr_reg:x3; val_offset:60531*0 + 3*157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60531*0 + 3*157*FLEN/8, x4, x1, x2)

inst_20178:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4a05eb and fs2 == 1 and fe2 == 0x80 and fm2 == 0x223301 and fs3 == 1 and fe3 == 0xe9 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eca05eb; op2val:0xc0223301;
op3val:0xf4800007; valaddr_reg:x3; val_offset:60534*0 + 3*157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60534*0 + 3*157*FLEN/8, x4, x1, x2)

inst_20179:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4a05eb and fs2 == 1 and fe2 == 0x80 and fm2 == 0x223301 and fs3 == 1 and fe3 == 0xe9 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eca05eb; op2val:0xc0223301;
op3val:0xf480000f; valaddr_reg:x3; val_offset:60537*0 + 3*157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60537*0 + 3*157*FLEN/8, x4, x1, x2)

inst_20180:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4a05eb and fs2 == 1 and fe2 == 0x80 and fm2 == 0x223301 and fs3 == 1 and fe3 == 0xe9 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eca05eb; op2val:0xc0223301;
op3val:0xf480001f; valaddr_reg:x3; val_offset:60540*0 + 3*157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60540*0 + 3*157*FLEN/8, x4, x1, x2)

inst_20181:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4a05eb and fs2 == 1 and fe2 == 0x80 and fm2 == 0x223301 and fs3 == 1 and fe3 == 0xe9 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eca05eb; op2val:0xc0223301;
op3val:0xf480003f; valaddr_reg:x3; val_offset:60543*0 + 3*157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60543*0 + 3*157*FLEN/8, x4, x1, x2)

inst_20182:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4a05eb and fs2 == 1 and fe2 == 0x80 and fm2 == 0x223301 and fs3 == 1 and fe3 == 0xe9 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eca05eb; op2val:0xc0223301;
op3val:0xf480007f; valaddr_reg:x3; val_offset:60546*0 + 3*157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60546*0 + 3*157*FLEN/8, x4, x1, x2)

inst_20183:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4a05eb and fs2 == 1 and fe2 == 0x80 and fm2 == 0x223301 and fs3 == 1 and fe3 == 0xe9 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eca05eb; op2val:0xc0223301;
op3val:0xf48000ff; valaddr_reg:x3; val_offset:60549*0 + 3*157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60549*0 + 3*157*FLEN/8, x4, x1, x2)

inst_20184:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4a05eb and fs2 == 1 and fe2 == 0x80 and fm2 == 0x223301 and fs3 == 1 and fe3 == 0xe9 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eca05eb; op2val:0xc0223301;
op3val:0xf48001ff; valaddr_reg:x3; val_offset:60552*0 + 3*157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60552*0 + 3*157*FLEN/8, x4, x1, x2)

inst_20185:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4a05eb and fs2 == 1 and fe2 == 0x80 and fm2 == 0x223301 and fs3 == 1 and fe3 == 0xe9 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eca05eb; op2val:0xc0223301;
op3val:0xf48003ff; valaddr_reg:x3; val_offset:60555*0 + 3*157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60555*0 + 3*157*FLEN/8, x4, x1, x2)

inst_20186:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4a05eb and fs2 == 1 and fe2 == 0x80 and fm2 == 0x223301 and fs3 == 1 and fe3 == 0xe9 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eca05eb; op2val:0xc0223301;
op3val:0xf48007ff; valaddr_reg:x3; val_offset:60558*0 + 3*157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60558*0 + 3*157*FLEN/8, x4, x1, x2)

inst_20187:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4a05eb and fs2 == 1 and fe2 == 0x80 and fm2 == 0x223301 and fs3 == 1 and fe3 == 0xe9 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eca05eb; op2val:0xc0223301;
op3val:0xf4800fff; valaddr_reg:x3; val_offset:60561*0 + 3*157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60561*0 + 3*157*FLEN/8, x4, x1, x2)

inst_20188:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4a05eb and fs2 == 1 and fe2 == 0x80 and fm2 == 0x223301 and fs3 == 1 and fe3 == 0xe9 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eca05eb; op2val:0xc0223301;
op3val:0xf4801fff; valaddr_reg:x3; val_offset:60564*0 + 3*157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60564*0 + 3*157*FLEN/8, x4, x1, x2)

inst_20189:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4a05eb and fs2 == 1 and fe2 == 0x80 and fm2 == 0x223301 and fs3 == 1 and fe3 == 0xe9 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eca05eb; op2val:0xc0223301;
op3val:0xf4803fff; valaddr_reg:x3; val_offset:60567*0 + 3*157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60567*0 + 3*157*FLEN/8, x4, x1, x2)

inst_20190:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4a05eb and fs2 == 1 and fe2 == 0x80 and fm2 == 0x223301 and fs3 == 1 and fe3 == 0xe9 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eca05eb; op2val:0xc0223301;
op3val:0xf4807fff; valaddr_reg:x3; val_offset:60570*0 + 3*157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60570*0 + 3*157*FLEN/8, x4, x1, x2)

inst_20191:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4a05eb and fs2 == 1 and fe2 == 0x80 and fm2 == 0x223301 and fs3 == 1 and fe3 == 0xe9 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eca05eb; op2val:0xc0223301;
op3val:0xf480ffff; valaddr_reg:x3; val_offset:60573*0 + 3*157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60573*0 + 3*157*FLEN/8, x4, x1, x2)

inst_20192:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4a05eb and fs2 == 1 and fe2 == 0x80 and fm2 == 0x223301 and fs3 == 1 and fe3 == 0xe9 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eca05eb; op2val:0xc0223301;
op3val:0xf481ffff; valaddr_reg:x3; val_offset:60576*0 + 3*157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60576*0 + 3*157*FLEN/8, x4, x1, x2)

inst_20193:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4a05eb and fs2 == 1 and fe2 == 0x80 and fm2 == 0x223301 and fs3 == 1 and fe3 == 0xe9 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eca05eb; op2val:0xc0223301;
op3val:0xf483ffff; valaddr_reg:x3; val_offset:60579*0 + 3*157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60579*0 + 3*157*FLEN/8, x4, x1, x2)

inst_20194:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4a05eb and fs2 == 1 and fe2 == 0x80 and fm2 == 0x223301 and fs3 == 1 and fe3 == 0xe9 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eca05eb; op2val:0xc0223301;
op3val:0xf487ffff; valaddr_reg:x3; val_offset:60582*0 + 3*157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60582*0 + 3*157*FLEN/8, x4, x1, x2)

inst_20195:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4a05eb and fs2 == 1 and fe2 == 0x80 and fm2 == 0x223301 and fs3 == 1 and fe3 == 0xe9 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eca05eb; op2val:0xc0223301;
op3val:0xf48fffff; valaddr_reg:x3; val_offset:60585*0 + 3*157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60585*0 + 3*157*FLEN/8, x4, x1, x2)

inst_20196:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4a05eb and fs2 == 1 and fe2 == 0x80 and fm2 == 0x223301 and fs3 == 1 and fe3 == 0xe9 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eca05eb; op2val:0xc0223301;
op3val:0xf49fffff; valaddr_reg:x3; val_offset:60588*0 + 3*157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60588*0 + 3*157*FLEN/8, x4, x1, x2)

inst_20197:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4a05eb and fs2 == 1 and fe2 == 0x80 and fm2 == 0x223301 and fs3 == 1 and fe3 == 0xe9 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eca05eb; op2val:0xc0223301;
op3val:0xf4bfffff; valaddr_reg:x3; val_offset:60591*0 + 3*157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60591*0 + 3*157*FLEN/8, x4, x1, x2)

inst_20198:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4a05eb and fs2 == 1 and fe2 == 0x80 and fm2 == 0x223301 and fs3 == 1 and fe3 == 0xe9 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eca05eb; op2val:0xc0223301;
op3val:0xf4c00000; valaddr_reg:x3; val_offset:60594*0 + 3*157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60594*0 + 3*157*FLEN/8, x4, x1, x2)

inst_20199:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4a05eb and fs2 == 1 and fe2 == 0x80 and fm2 == 0x223301 and fs3 == 1 and fe3 == 0xe9 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eca05eb; op2val:0xc0223301;
op3val:0xf4e00000; valaddr_reg:x3; val_offset:60597*0 + 3*157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60597*0 + 3*157*FLEN/8, x4, x1, x2)

inst_20200:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4a05eb and fs2 == 1 and fe2 == 0x80 and fm2 == 0x223301 and fs3 == 1 and fe3 == 0xe9 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eca05eb; op2val:0xc0223301;
op3val:0xf4f00000; valaddr_reg:x3; val_offset:60600*0 + 3*157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60600*0 + 3*157*FLEN/8, x4, x1, x2)

inst_20201:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4a05eb and fs2 == 1 and fe2 == 0x80 and fm2 == 0x223301 and fs3 == 1 and fe3 == 0xe9 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eca05eb; op2val:0xc0223301;
op3val:0xf4f80000; valaddr_reg:x3; val_offset:60603*0 + 3*157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60603*0 + 3*157*FLEN/8, x4, x1, x2)

inst_20202:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4a05eb and fs2 == 1 and fe2 == 0x80 and fm2 == 0x223301 and fs3 == 1 and fe3 == 0xe9 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eca05eb; op2val:0xc0223301;
op3val:0xf4fc0000; valaddr_reg:x3; val_offset:60606*0 + 3*157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60606*0 + 3*157*FLEN/8, x4, x1, x2)

inst_20203:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4a05eb and fs2 == 1 and fe2 == 0x80 and fm2 == 0x223301 and fs3 == 1 and fe3 == 0xe9 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eca05eb; op2val:0xc0223301;
op3val:0xf4fe0000; valaddr_reg:x3; val_offset:60609*0 + 3*157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60609*0 + 3*157*FLEN/8, x4, x1, x2)

inst_20204:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4a05eb and fs2 == 1 and fe2 == 0x80 and fm2 == 0x223301 and fs3 == 1 and fe3 == 0xe9 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eca05eb; op2val:0xc0223301;
op3val:0xf4ff0000; valaddr_reg:x3; val_offset:60612*0 + 3*157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60612*0 + 3*157*FLEN/8, x4, x1, x2)

inst_20205:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4a05eb and fs2 == 1 and fe2 == 0x80 and fm2 == 0x223301 and fs3 == 1 and fe3 == 0xe9 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eca05eb; op2val:0xc0223301;
op3val:0xf4ff8000; valaddr_reg:x3; val_offset:60615*0 + 3*157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60615*0 + 3*157*FLEN/8, x4, x1, x2)

inst_20206:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4a05eb and fs2 == 1 and fe2 == 0x80 and fm2 == 0x223301 and fs3 == 1 and fe3 == 0xe9 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eca05eb; op2val:0xc0223301;
op3val:0xf4ffc000; valaddr_reg:x3; val_offset:60618*0 + 3*157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60618*0 + 3*157*FLEN/8, x4, x1, x2)

inst_20207:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4a05eb and fs2 == 1 and fe2 == 0x80 and fm2 == 0x223301 and fs3 == 1 and fe3 == 0xe9 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eca05eb; op2val:0xc0223301;
op3val:0xf4ffe000; valaddr_reg:x3; val_offset:60621*0 + 3*157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60621*0 + 3*157*FLEN/8, x4, x1, x2)

inst_20208:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4a05eb and fs2 == 1 and fe2 == 0x80 and fm2 == 0x223301 and fs3 == 1 and fe3 == 0xe9 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eca05eb; op2val:0xc0223301;
op3val:0xf4fff000; valaddr_reg:x3; val_offset:60624*0 + 3*157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60624*0 + 3*157*FLEN/8, x4, x1, x2)

inst_20209:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4a05eb and fs2 == 1 and fe2 == 0x80 and fm2 == 0x223301 and fs3 == 1 and fe3 == 0xe9 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eca05eb; op2val:0xc0223301;
op3val:0xf4fff800; valaddr_reg:x3; val_offset:60627*0 + 3*157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60627*0 + 3*157*FLEN/8, x4, x1, x2)

inst_20210:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4a05eb and fs2 == 1 and fe2 == 0x80 and fm2 == 0x223301 and fs3 == 1 and fe3 == 0xe9 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eca05eb; op2val:0xc0223301;
op3val:0xf4fffc00; valaddr_reg:x3; val_offset:60630*0 + 3*157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60630*0 + 3*157*FLEN/8, x4, x1, x2)

inst_20211:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4a05eb and fs2 == 1 and fe2 == 0x80 and fm2 == 0x223301 and fs3 == 1 and fe3 == 0xe9 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eca05eb; op2val:0xc0223301;
op3val:0xf4fffe00; valaddr_reg:x3; val_offset:60633*0 + 3*157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60633*0 + 3*157*FLEN/8, x4, x1, x2)

inst_20212:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4a05eb and fs2 == 1 and fe2 == 0x80 and fm2 == 0x223301 and fs3 == 1 and fe3 == 0xe9 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eca05eb; op2val:0xc0223301;
op3val:0xf4ffff00; valaddr_reg:x3; val_offset:60636*0 + 3*157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60636*0 + 3*157*FLEN/8, x4, x1, x2)

inst_20213:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4a05eb and fs2 == 1 and fe2 == 0x80 and fm2 == 0x223301 and fs3 == 1 and fe3 == 0xe9 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eca05eb; op2val:0xc0223301;
op3val:0xf4ffff80; valaddr_reg:x3; val_offset:60639*0 + 3*157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60639*0 + 3*157*FLEN/8, x4, x1, x2)

inst_20214:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4a05eb and fs2 == 1 and fe2 == 0x80 and fm2 == 0x223301 and fs3 == 1 and fe3 == 0xe9 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eca05eb; op2val:0xc0223301;
op3val:0xf4ffffc0; valaddr_reg:x3; val_offset:60642*0 + 3*157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60642*0 + 3*157*FLEN/8, x4, x1, x2)

inst_20215:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4a05eb and fs2 == 1 and fe2 == 0x80 and fm2 == 0x223301 and fs3 == 1 and fe3 == 0xe9 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eca05eb; op2val:0xc0223301;
op3val:0xf4ffffe0; valaddr_reg:x3; val_offset:60645*0 + 3*157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60645*0 + 3*157*FLEN/8, x4, x1, x2)

inst_20216:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4a05eb and fs2 == 1 and fe2 == 0x80 and fm2 == 0x223301 and fs3 == 1 and fe3 == 0xe9 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eca05eb; op2val:0xc0223301;
op3val:0xf4fffff0; valaddr_reg:x3; val_offset:60648*0 + 3*157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60648*0 + 3*157*FLEN/8, x4, x1, x2)

inst_20217:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4a05eb and fs2 == 1 and fe2 == 0x80 and fm2 == 0x223301 and fs3 == 1 and fe3 == 0xe9 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eca05eb; op2val:0xc0223301;
op3val:0xf4fffff8; valaddr_reg:x3; val_offset:60651*0 + 3*157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60651*0 + 3*157*FLEN/8, x4, x1, x2)

inst_20218:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4a05eb and fs2 == 1 and fe2 == 0x80 and fm2 == 0x223301 and fs3 == 1 and fe3 == 0xe9 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eca05eb; op2val:0xc0223301;
op3val:0xf4fffffc; valaddr_reg:x3; val_offset:60654*0 + 3*157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60654*0 + 3*157*FLEN/8, x4, x1, x2)

inst_20219:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4a05eb and fs2 == 1 and fe2 == 0x80 and fm2 == 0x223301 and fs3 == 1 and fe3 == 0xe9 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eca05eb; op2val:0xc0223301;
op3val:0xf4fffffe; valaddr_reg:x3; val_offset:60657*0 + 3*157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60657*0 + 3*157*FLEN/8, x4, x1, x2)

inst_20220:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4a05eb and fs2 == 1 and fe2 == 0x80 and fm2 == 0x223301 and fs3 == 1 and fe3 == 0xe9 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eca05eb; op2val:0xc0223301;
op3val:0xf4ffffff; valaddr_reg:x3; val_offset:60660*0 + 3*157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60660*0 + 3*157*FLEN/8, x4, x1, x2)

inst_20221:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4a05eb and fs2 == 1 and fe2 == 0x80 and fm2 == 0x223301 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eca05eb; op2val:0xc0223301;
op3val:0xff000001; valaddr_reg:x3; val_offset:60663*0 + 3*157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60663*0 + 3*157*FLEN/8, x4, x1, x2)

inst_20222:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4a05eb and fs2 == 1 and fe2 == 0x80 and fm2 == 0x223301 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eca05eb; op2val:0xc0223301;
op3val:0xff000003; valaddr_reg:x3; val_offset:60666*0 + 3*157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60666*0 + 3*157*FLEN/8, x4, x1, x2)

inst_20223:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4a05eb and fs2 == 1 and fe2 == 0x80 and fm2 == 0x223301 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eca05eb; op2val:0xc0223301;
op3val:0xff000007; valaddr_reg:x3; val_offset:60669*0 + 3*157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60669*0 + 3*157*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2127130550,32,FLEN)
NAN_BOXED(5330426,32,FLEN)
NAN_BOXED(612368383,32,FLEN)
NAN_BOXED(2127130550,32,FLEN)
NAN_BOXED(5330426,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2127130550,32,FLEN)
NAN_BOXED(5330426,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2127130550,32,FLEN)
NAN_BOXED(5330426,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2127130550,32,FLEN)
NAN_BOXED(5330426,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2127130550,32,FLEN)
NAN_BOXED(5330426,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2127130550,32,FLEN)
NAN_BOXED(5330426,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2127130550,32,FLEN)
NAN_BOXED(5330426,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2127130550,32,FLEN)
NAN_BOXED(5330426,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2127130550,32,FLEN)
NAN_BOXED(5330426,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2127130550,32,FLEN)
NAN_BOXED(5330426,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2127130550,32,FLEN)
NAN_BOXED(5330426,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2127130550,32,FLEN)
NAN_BOXED(5330426,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2127130550,32,FLEN)
NAN_BOXED(5330426,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2127130550,32,FLEN)
NAN_BOXED(5330426,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2127130550,32,FLEN)
NAN_BOXED(5330426,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2127130550,32,FLEN)
NAN_BOXED(5330426,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2127161801,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2127161801,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483651,32,FLEN)
NAN_BOXED(2127161801,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483655,32,FLEN)
NAN_BOXED(2127161801,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149161369,32,FLEN)
NAN_BOXED(2127161801,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149880393,32,FLEN)
NAN_BOXED(2127161801,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2150839091,32,FLEN)
NAN_BOXED(2127161801,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151078765,32,FLEN)
NAN_BOXED(2127161801,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151398331,32,FLEN)
NAN_BOXED(2127161801,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151957572,32,FLEN)
NAN_BOXED(2127161801,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2152516812,32,FLEN)
NAN_BOXED(2127161801,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2153475510,32,FLEN)
NAN_BOXED(2127161801,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154194534,32,FLEN)
NAN_BOXED(2127161801,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154673883,32,FLEN)
NAN_BOXED(2127161801,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872248,32,FLEN)
NAN_BOXED(2127161801,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872252,32,FLEN)
NAN_BOXED(2127161801,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2127161801,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701376,32,FLEN)
NAN_BOXED(2127161801,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701377,32,FLEN)
NAN_BOXED(2127161801,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701379,32,FLEN)
NAN_BOXED(2127161801,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701383,32,FLEN)
NAN_BOXED(2127161801,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701391,32,FLEN)
NAN_BOXED(2127161801,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701407,32,FLEN)
NAN_BOXED(2127161801,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701439,32,FLEN)
NAN_BOXED(2127161801,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701503,32,FLEN)
NAN_BOXED(2127161801,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701631,32,FLEN)
NAN_BOXED(2127161801,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701887,32,FLEN)
NAN_BOXED(2127161801,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281702399,32,FLEN)
NAN_BOXED(2127161801,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281703423,32,FLEN)
NAN_BOXED(2127161801,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281705471,32,FLEN)
NAN_BOXED(2127161801,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281709567,32,FLEN)
NAN_BOXED(2127161801,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281717759,32,FLEN)
NAN_BOXED(2127161801,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281734143,32,FLEN)
NAN_BOXED(2127161801,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281766911,32,FLEN)
NAN_BOXED(2127161801,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281832447,32,FLEN)
NAN_BOXED(2127161801,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281963519,32,FLEN)
NAN_BOXED(2127161801,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2282225663,32,FLEN)
NAN_BOXED(2127161801,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2282749951,32,FLEN)
NAN_BOXED(2127161801,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2283798527,32,FLEN)
NAN_BOXED(2127161801,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2285895679,32,FLEN)
NAN_BOXED(2127161801,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2285895680,32,FLEN)
NAN_BOXED(2127161801,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2287992832,32,FLEN)
NAN_BOXED(2127161801,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2289041408,32,FLEN)
NAN_BOXED(2127161801,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2289565696,32,FLEN)
NAN_BOXED(2127161801,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2289827840,32,FLEN)
NAN_BOXED(2127161801,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2289958912,32,FLEN)
NAN_BOXED(2127161801,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290024448,32,FLEN)
NAN_BOXED(2127161801,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290057216,32,FLEN)
NAN_BOXED(2127161801,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290073600,32,FLEN)
NAN_BOXED(2127161801,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290081792,32,FLEN)
NAN_BOXED(2127161801,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290085888,32,FLEN)
NAN_BOXED(2127161801,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290087936,32,FLEN)
NAN_BOXED(2127161801,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290088960,32,FLEN)
NAN_BOXED(2127161801,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290089472,32,FLEN)
NAN_BOXED(2127161801,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290089728,32,FLEN)
NAN_BOXED(2127161801,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290089856,32,FLEN)
NAN_BOXED(2127161801,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290089920,32,FLEN)
NAN_BOXED(2127161801,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290089952,32,FLEN)
NAN_BOXED(2127161801,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290089968,32,FLEN)
NAN_BOXED(2127161801,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290089976,32,FLEN)
NAN_BOXED(2127161801,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290089980,32,FLEN)
NAN_BOXED(2127161801,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290089982,32,FLEN)
NAN_BOXED(2127161801,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290089983,32,FLEN)
NAN_BOXED(2127169003,32,FLEN)
NAN_BOXED(3223466753,32,FLEN)
NAN_BOXED(4102029312,32,FLEN)
NAN_BOXED(2127169003,32,FLEN)
NAN_BOXED(3223466753,32,FLEN)
NAN_BOXED(4102029313,32,FLEN)
NAN_BOXED(2127169003,32,FLEN)
NAN_BOXED(3223466753,32,FLEN)
NAN_BOXED(4102029315,32,FLEN)
NAN_BOXED(2127169003,32,FLEN)
NAN_BOXED(3223466753,32,FLEN)
NAN_BOXED(4102029319,32,FLEN)
NAN_BOXED(2127169003,32,FLEN)
NAN_BOXED(3223466753,32,FLEN)
NAN_BOXED(4102029327,32,FLEN)
NAN_BOXED(2127169003,32,FLEN)
NAN_BOXED(3223466753,32,FLEN)
NAN_BOXED(4102029343,32,FLEN)
NAN_BOXED(2127169003,32,FLEN)
NAN_BOXED(3223466753,32,FLEN)
NAN_BOXED(4102029375,32,FLEN)
NAN_BOXED(2127169003,32,FLEN)
NAN_BOXED(3223466753,32,FLEN)
NAN_BOXED(4102029439,32,FLEN)
NAN_BOXED(2127169003,32,FLEN)
NAN_BOXED(3223466753,32,FLEN)
NAN_BOXED(4102029567,32,FLEN)
NAN_BOXED(2127169003,32,FLEN)
NAN_BOXED(3223466753,32,FLEN)
NAN_BOXED(4102029823,32,FLEN)
NAN_BOXED(2127169003,32,FLEN)
NAN_BOXED(3223466753,32,FLEN)
NAN_BOXED(4102030335,32,FLEN)
NAN_BOXED(2127169003,32,FLEN)
NAN_BOXED(3223466753,32,FLEN)
NAN_BOXED(4102031359,32,FLEN)
NAN_BOXED(2127169003,32,FLEN)
NAN_BOXED(3223466753,32,FLEN)
NAN_BOXED(4102033407,32,FLEN)
NAN_BOXED(2127169003,32,FLEN)
NAN_BOXED(3223466753,32,FLEN)
NAN_BOXED(4102037503,32,FLEN)
NAN_BOXED(2127169003,32,FLEN)
NAN_BOXED(3223466753,32,FLEN)
NAN_BOXED(4102045695,32,FLEN)
NAN_BOXED(2127169003,32,FLEN)
NAN_BOXED(3223466753,32,FLEN)
NAN_BOXED(4102062079,32,FLEN)
NAN_BOXED(2127169003,32,FLEN)
NAN_BOXED(3223466753,32,FLEN)
NAN_BOXED(4102094847,32,FLEN)
NAN_BOXED(2127169003,32,FLEN)
NAN_BOXED(3223466753,32,FLEN)
NAN_BOXED(4102160383,32,FLEN)
NAN_BOXED(2127169003,32,FLEN)
NAN_BOXED(3223466753,32,FLEN)
NAN_BOXED(4102291455,32,FLEN)
NAN_BOXED(2127169003,32,FLEN)
NAN_BOXED(3223466753,32,FLEN)
NAN_BOXED(4102553599,32,FLEN)
NAN_BOXED(2127169003,32,FLEN)
NAN_BOXED(3223466753,32,FLEN)
NAN_BOXED(4103077887,32,FLEN)
NAN_BOXED(2127169003,32,FLEN)
NAN_BOXED(3223466753,32,FLEN)
NAN_BOXED(4104126463,32,FLEN)
NAN_BOXED(2127169003,32,FLEN)
NAN_BOXED(3223466753,32,FLEN)
NAN_BOXED(4106223615,32,FLEN)
NAN_BOXED(2127169003,32,FLEN)
NAN_BOXED(3223466753,32,FLEN)
NAN_BOXED(4106223616,32,FLEN)
NAN_BOXED(2127169003,32,FLEN)
NAN_BOXED(3223466753,32,FLEN)
NAN_BOXED(4108320768,32,FLEN)
NAN_BOXED(2127169003,32,FLEN)
NAN_BOXED(3223466753,32,FLEN)
NAN_BOXED(4109369344,32,FLEN)
NAN_BOXED(2127169003,32,FLEN)
NAN_BOXED(3223466753,32,FLEN)
NAN_BOXED(4109893632,32,FLEN)
NAN_BOXED(2127169003,32,FLEN)
NAN_BOXED(3223466753,32,FLEN)
NAN_BOXED(4110155776,32,FLEN)
NAN_BOXED(2127169003,32,FLEN)
NAN_BOXED(3223466753,32,FLEN)
NAN_BOXED(4110286848,32,FLEN)
NAN_BOXED(2127169003,32,FLEN)
NAN_BOXED(3223466753,32,FLEN)
NAN_BOXED(4110352384,32,FLEN)
NAN_BOXED(2127169003,32,FLEN)
NAN_BOXED(3223466753,32,FLEN)
NAN_BOXED(4110385152,32,FLEN)
NAN_BOXED(2127169003,32,FLEN)
NAN_BOXED(3223466753,32,FLEN)
NAN_BOXED(4110401536,32,FLEN)
NAN_BOXED(2127169003,32,FLEN)
NAN_BOXED(3223466753,32,FLEN)
NAN_BOXED(4110409728,32,FLEN)
NAN_BOXED(2127169003,32,FLEN)
NAN_BOXED(3223466753,32,FLEN)
NAN_BOXED(4110413824,32,FLEN)
NAN_BOXED(2127169003,32,FLEN)
NAN_BOXED(3223466753,32,FLEN)
NAN_BOXED(4110415872,32,FLEN)
NAN_BOXED(2127169003,32,FLEN)
NAN_BOXED(3223466753,32,FLEN)
NAN_BOXED(4110416896,32,FLEN)
NAN_BOXED(2127169003,32,FLEN)
NAN_BOXED(3223466753,32,FLEN)
NAN_BOXED(4110417408,32,FLEN)
NAN_BOXED(2127169003,32,FLEN)
NAN_BOXED(3223466753,32,FLEN)
NAN_BOXED(4110417664,32,FLEN)
NAN_BOXED(2127169003,32,FLEN)
NAN_BOXED(3223466753,32,FLEN)
NAN_BOXED(4110417792,32,FLEN)
NAN_BOXED(2127169003,32,FLEN)
NAN_BOXED(3223466753,32,FLEN)
NAN_BOXED(4110417856,32,FLEN)
NAN_BOXED(2127169003,32,FLEN)
NAN_BOXED(3223466753,32,FLEN)
NAN_BOXED(4110417888,32,FLEN)
NAN_BOXED(2127169003,32,FLEN)
NAN_BOXED(3223466753,32,FLEN)
NAN_BOXED(4110417904,32,FLEN)
NAN_BOXED(2127169003,32,FLEN)
NAN_BOXED(3223466753,32,FLEN)
NAN_BOXED(4110417912,32,FLEN)
NAN_BOXED(2127169003,32,FLEN)
NAN_BOXED(3223466753,32,FLEN)
NAN_BOXED(4110417916,32,FLEN)
NAN_BOXED(2127169003,32,FLEN)
NAN_BOXED(3223466753,32,FLEN)
NAN_BOXED(4110417918,32,FLEN)
NAN_BOXED(2127169003,32,FLEN)
NAN_BOXED(3223466753,32,FLEN)
NAN_BOXED(4110417919,32,FLEN)
NAN_BOXED(2127169003,32,FLEN)
NAN_BOXED(3223466753,32,FLEN)
NAN_BOXED(4278190081,32,FLEN)
NAN_BOXED(2127169003,32,FLEN)
NAN_BOXED(3223466753,32,FLEN)
NAN_BOXED(4278190083,32,FLEN)
NAN_BOXED(2127169003,32,FLEN)
NAN_BOXED(3223466753,32,FLEN)
NAN_BOXED(4278190087,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
