
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:17:59 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_20480:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4c8122 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecc8122; op2val:0x0;
op3val:0x3bbbbb; valaddr_reg:x3; val_offset:61440*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61440*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20481:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4c8122 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecc8122; op2val:0x0;
op3val:0x444444; valaddr_reg:x3; val_offset:61443*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61443*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20482:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4c8122 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecc8122; op2val:0x0;
op3val:0x4ccccc; valaddr_reg:x3; val_offset:61446*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61446*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20483:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4c8122 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecc8122; op2val:0x0;
op3val:0x5b6db6; valaddr_reg:x3; val_offset:61449*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61449*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20484:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4c8122 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecc8122; op2val:0x0;
op3val:0x666666; valaddr_reg:x3; val_offset:61452*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61452*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20485:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4c8122 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecc8122; op2val:0x0;
op3val:0x6db6db; valaddr_reg:x3; val_offset:61455*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61455*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20486:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4c8122 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecc8122; op2val:0x0;
op3val:0x7ffff8; valaddr_reg:x3; val_offset:61458*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61458*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20487:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4c8122 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecc8122; op2val:0x0;
op3val:0x7ffffc; valaddr_reg:x3; val_offset:61461*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61461*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20488:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4c8122 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecc8122; op2val:0x0;
op3val:0x7ffffe; valaddr_reg:x3; val_offset:61464*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61464*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20489:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4c8122 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecc8122; op2val:0x0;
op3val:0x7000000; valaddr_reg:x3; val_offset:61467*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61467*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20490:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4c8122 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecc8122; op2val:0x0;
op3val:0x7000001; valaddr_reg:x3; val_offset:61470*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61470*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20491:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4c8122 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecc8122; op2val:0x0;
op3val:0x7000003; valaddr_reg:x3; val_offset:61473*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61473*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20492:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4c8122 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecc8122; op2val:0x0;
op3val:0x7000007; valaddr_reg:x3; val_offset:61476*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61476*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20493:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4c8122 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecc8122; op2val:0x0;
op3val:0x700000f; valaddr_reg:x3; val_offset:61479*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61479*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20494:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4c8122 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecc8122; op2val:0x0;
op3val:0x700001f; valaddr_reg:x3; val_offset:61482*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61482*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20495:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4c8122 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecc8122; op2val:0x0;
op3val:0x700003f; valaddr_reg:x3; val_offset:61485*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61485*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20496:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4c8122 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecc8122; op2val:0x0;
op3val:0x700007f; valaddr_reg:x3; val_offset:61488*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61488*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20497:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4c8122 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecc8122; op2val:0x0;
op3val:0x70000ff; valaddr_reg:x3; val_offset:61491*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61491*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20498:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4c8122 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecc8122; op2val:0x0;
op3val:0x70001ff; valaddr_reg:x3; val_offset:61494*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61494*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20499:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4c8122 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecc8122; op2val:0x0;
op3val:0x70003ff; valaddr_reg:x3; val_offset:61497*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61497*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20500:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4c8122 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecc8122; op2val:0x0;
op3val:0x70007ff; valaddr_reg:x3; val_offset:61500*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61500*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20501:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4c8122 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecc8122; op2val:0x0;
op3val:0x7000fff; valaddr_reg:x3; val_offset:61503*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61503*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20502:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4c8122 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecc8122; op2val:0x0;
op3val:0x7001fff; valaddr_reg:x3; val_offset:61506*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61506*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20503:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4c8122 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecc8122; op2val:0x0;
op3val:0x7003fff; valaddr_reg:x3; val_offset:61509*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61509*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20504:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4c8122 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecc8122; op2val:0x0;
op3val:0x7007fff; valaddr_reg:x3; val_offset:61512*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61512*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20505:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4c8122 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecc8122; op2val:0x0;
op3val:0x700ffff; valaddr_reg:x3; val_offset:61515*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61515*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20506:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4c8122 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecc8122; op2val:0x0;
op3val:0x701ffff; valaddr_reg:x3; val_offset:61518*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61518*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20507:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4c8122 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecc8122; op2val:0x0;
op3val:0x703ffff; valaddr_reg:x3; val_offset:61521*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61521*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20508:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4c8122 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecc8122; op2val:0x0;
op3val:0x707ffff; valaddr_reg:x3; val_offset:61524*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61524*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20509:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4c8122 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecc8122; op2val:0x0;
op3val:0x70fffff; valaddr_reg:x3; val_offset:61527*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61527*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20510:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4c8122 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecc8122; op2val:0x0;
op3val:0x71fffff; valaddr_reg:x3; val_offset:61530*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61530*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20511:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4c8122 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecc8122; op2val:0x0;
op3val:0x73fffff; valaddr_reg:x3; val_offset:61533*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61533*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20512:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4c8122 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecc8122; op2val:0x0;
op3val:0x7400000; valaddr_reg:x3; val_offset:61536*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61536*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20513:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4c8122 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecc8122; op2val:0x0;
op3val:0x7600000; valaddr_reg:x3; val_offset:61539*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61539*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20514:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4c8122 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecc8122; op2val:0x0;
op3val:0x7700000; valaddr_reg:x3; val_offset:61542*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61542*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20515:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4c8122 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecc8122; op2val:0x0;
op3val:0x7780000; valaddr_reg:x3; val_offset:61545*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61545*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20516:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4c8122 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecc8122; op2val:0x0;
op3val:0x77c0000; valaddr_reg:x3; val_offset:61548*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61548*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20517:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4c8122 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecc8122; op2val:0x0;
op3val:0x77e0000; valaddr_reg:x3; val_offset:61551*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61551*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20518:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4c8122 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecc8122; op2val:0x0;
op3val:0x77f0000; valaddr_reg:x3; val_offset:61554*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61554*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20519:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4c8122 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecc8122; op2val:0x0;
op3val:0x77f8000; valaddr_reg:x3; val_offset:61557*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61557*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20520:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4c8122 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecc8122; op2val:0x0;
op3val:0x77fc000; valaddr_reg:x3; val_offset:61560*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61560*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20521:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4c8122 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecc8122; op2val:0x0;
op3val:0x77fe000; valaddr_reg:x3; val_offset:61563*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61563*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20522:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4c8122 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecc8122; op2val:0x0;
op3val:0x77ff000; valaddr_reg:x3; val_offset:61566*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61566*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20523:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4c8122 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecc8122; op2val:0x0;
op3val:0x77ff800; valaddr_reg:x3; val_offset:61569*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61569*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20524:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4c8122 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecc8122; op2val:0x0;
op3val:0x77ffc00; valaddr_reg:x3; val_offset:61572*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61572*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20525:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4c8122 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecc8122; op2val:0x0;
op3val:0x77ffe00; valaddr_reg:x3; val_offset:61575*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61575*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20526:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4c8122 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecc8122; op2val:0x0;
op3val:0x77fff00; valaddr_reg:x3; val_offset:61578*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61578*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20527:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4c8122 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecc8122; op2val:0x0;
op3val:0x77fff80; valaddr_reg:x3; val_offset:61581*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61581*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20528:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4c8122 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecc8122; op2val:0x0;
op3val:0x77fffc0; valaddr_reg:x3; val_offset:61584*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61584*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20529:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4c8122 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecc8122; op2val:0x0;
op3val:0x77fffe0; valaddr_reg:x3; val_offset:61587*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61587*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20530:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4c8122 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecc8122; op2val:0x0;
op3val:0x77ffff0; valaddr_reg:x3; val_offset:61590*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61590*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20531:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4c8122 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecc8122; op2val:0x0;
op3val:0x77ffff8; valaddr_reg:x3; val_offset:61593*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61593*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20532:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4c8122 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecc8122; op2val:0x0;
op3val:0x77ffffc; valaddr_reg:x3; val_offset:61596*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61596*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20533:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4c8122 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecc8122; op2val:0x0;
op3val:0x77ffffe; valaddr_reg:x3; val_offset:61599*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61599*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20534:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4c8122 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecc8122; op2val:0x0;
op3val:0x77fffff; valaddr_reg:x3; val_offset:61602*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61602*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20535:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4cc26e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x200819 and fs3 == 0 and fe3 == 0xe5 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eccc26e; op2val:0x40200819;
op3val:0x72800000; valaddr_reg:x3; val_offset:61605*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61605*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20536:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4cc26e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x200819 and fs3 == 0 and fe3 == 0xe5 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eccc26e; op2val:0x40200819;
op3val:0x72800001; valaddr_reg:x3; val_offset:61608*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61608*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20537:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4cc26e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x200819 and fs3 == 0 and fe3 == 0xe5 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eccc26e; op2val:0x40200819;
op3val:0x72800003; valaddr_reg:x3; val_offset:61611*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61611*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20538:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4cc26e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x200819 and fs3 == 0 and fe3 == 0xe5 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eccc26e; op2val:0x40200819;
op3val:0x72800007; valaddr_reg:x3; val_offset:61614*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61614*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20539:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4cc26e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x200819 and fs3 == 0 and fe3 == 0xe5 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eccc26e; op2val:0x40200819;
op3val:0x7280000f; valaddr_reg:x3; val_offset:61617*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61617*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20540:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4cc26e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x200819 and fs3 == 0 and fe3 == 0xe5 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eccc26e; op2val:0x40200819;
op3val:0x7280001f; valaddr_reg:x3; val_offset:61620*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61620*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20541:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4cc26e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x200819 and fs3 == 0 and fe3 == 0xe5 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eccc26e; op2val:0x40200819;
op3val:0x7280003f; valaddr_reg:x3; val_offset:61623*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61623*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20542:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4cc26e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x200819 and fs3 == 0 and fe3 == 0xe5 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eccc26e; op2val:0x40200819;
op3val:0x7280007f; valaddr_reg:x3; val_offset:61626*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61626*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20543:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4cc26e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x200819 and fs3 == 0 and fe3 == 0xe5 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eccc26e; op2val:0x40200819;
op3val:0x728000ff; valaddr_reg:x3; val_offset:61629*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61629*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20544:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4cc26e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x200819 and fs3 == 0 and fe3 == 0xe5 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eccc26e; op2val:0x40200819;
op3val:0x728001ff; valaddr_reg:x3; val_offset:61632*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61632*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20545:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4cc26e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x200819 and fs3 == 0 and fe3 == 0xe5 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eccc26e; op2val:0x40200819;
op3val:0x728003ff; valaddr_reg:x3; val_offset:61635*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61635*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20546:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4cc26e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x200819 and fs3 == 0 and fe3 == 0xe5 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eccc26e; op2val:0x40200819;
op3val:0x728007ff; valaddr_reg:x3; val_offset:61638*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61638*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20547:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4cc26e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x200819 and fs3 == 0 and fe3 == 0xe5 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eccc26e; op2val:0x40200819;
op3val:0x72800fff; valaddr_reg:x3; val_offset:61641*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61641*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20548:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4cc26e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x200819 and fs3 == 0 and fe3 == 0xe5 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eccc26e; op2val:0x40200819;
op3val:0x72801fff; valaddr_reg:x3; val_offset:61644*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61644*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20549:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4cc26e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x200819 and fs3 == 0 and fe3 == 0xe5 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eccc26e; op2val:0x40200819;
op3val:0x72803fff; valaddr_reg:x3; val_offset:61647*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61647*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20550:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4cc26e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x200819 and fs3 == 0 and fe3 == 0xe5 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eccc26e; op2val:0x40200819;
op3val:0x72807fff; valaddr_reg:x3; val_offset:61650*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61650*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20551:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4cc26e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x200819 and fs3 == 0 and fe3 == 0xe5 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eccc26e; op2val:0x40200819;
op3val:0x7280ffff; valaddr_reg:x3; val_offset:61653*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61653*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20552:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4cc26e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x200819 and fs3 == 0 and fe3 == 0xe5 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eccc26e; op2val:0x40200819;
op3val:0x7281ffff; valaddr_reg:x3; val_offset:61656*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61656*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20553:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4cc26e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x200819 and fs3 == 0 and fe3 == 0xe5 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eccc26e; op2val:0x40200819;
op3val:0x7283ffff; valaddr_reg:x3; val_offset:61659*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61659*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20554:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4cc26e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x200819 and fs3 == 0 and fe3 == 0xe5 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eccc26e; op2val:0x40200819;
op3val:0x7287ffff; valaddr_reg:x3; val_offset:61662*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61662*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20555:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4cc26e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x200819 and fs3 == 0 and fe3 == 0xe5 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eccc26e; op2val:0x40200819;
op3val:0x728fffff; valaddr_reg:x3; val_offset:61665*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61665*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20556:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4cc26e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x200819 and fs3 == 0 and fe3 == 0xe5 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eccc26e; op2val:0x40200819;
op3val:0x729fffff; valaddr_reg:x3; val_offset:61668*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61668*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20557:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4cc26e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x200819 and fs3 == 0 and fe3 == 0xe5 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eccc26e; op2val:0x40200819;
op3val:0x72bfffff; valaddr_reg:x3; val_offset:61671*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61671*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20558:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4cc26e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x200819 and fs3 == 0 and fe3 == 0xe5 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eccc26e; op2val:0x40200819;
op3val:0x72c00000; valaddr_reg:x3; val_offset:61674*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61674*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20559:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4cc26e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x200819 and fs3 == 0 and fe3 == 0xe5 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eccc26e; op2val:0x40200819;
op3val:0x72e00000; valaddr_reg:x3; val_offset:61677*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61677*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20560:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4cc26e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x200819 and fs3 == 0 and fe3 == 0xe5 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eccc26e; op2val:0x40200819;
op3val:0x72f00000; valaddr_reg:x3; val_offset:61680*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61680*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20561:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4cc26e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x200819 and fs3 == 0 and fe3 == 0xe5 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eccc26e; op2val:0x40200819;
op3val:0x72f80000; valaddr_reg:x3; val_offset:61683*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61683*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20562:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4cc26e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x200819 and fs3 == 0 and fe3 == 0xe5 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eccc26e; op2val:0x40200819;
op3val:0x72fc0000; valaddr_reg:x3; val_offset:61686*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61686*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20563:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4cc26e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x200819 and fs3 == 0 and fe3 == 0xe5 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eccc26e; op2val:0x40200819;
op3val:0x72fe0000; valaddr_reg:x3; val_offset:61689*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61689*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20564:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4cc26e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x200819 and fs3 == 0 and fe3 == 0xe5 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eccc26e; op2val:0x40200819;
op3val:0x72ff0000; valaddr_reg:x3; val_offset:61692*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61692*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20565:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4cc26e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x200819 and fs3 == 0 and fe3 == 0xe5 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eccc26e; op2val:0x40200819;
op3val:0x72ff8000; valaddr_reg:x3; val_offset:61695*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61695*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20566:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4cc26e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x200819 and fs3 == 0 and fe3 == 0xe5 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eccc26e; op2val:0x40200819;
op3val:0x72ffc000; valaddr_reg:x3; val_offset:61698*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61698*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20567:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4cc26e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x200819 and fs3 == 0 and fe3 == 0xe5 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eccc26e; op2val:0x40200819;
op3val:0x72ffe000; valaddr_reg:x3; val_offset:61701*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61701*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20568:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4cc26e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x200819 and fs3 == 0 and fe3 == 0xe5 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eccc26e; op2val:0x40200819;
op3val:0x72fff000; valaddr_reg:x3; val_offset:61704*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61704*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20569:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4cc26e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x200819 and fs3 == 0 and fe3 == 0xe5 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eccc26e; op2val:0x40200819;
op3val:0x72fff800; valaddr_reg:x3; val_offset:61707*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61707*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20570:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4cc26e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x200819 and fs3 == 0 and fe3 == 0xe5 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eccc26e; op2val:0x40200819;
op3val:0x72fffc00; valaddr_reg:x3; val_offset:61710*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61710*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20571:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4cc26e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x200819 and fs3 == 0 and fe3 == 0xe5 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eccc26e; op2val:0x40200819;
op3val:0x72fffe00; valaddr_reg:x3; val_offset:61713*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61713*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20572:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4cc26e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x200819 and fs3 == 0 and fe3 == 0xe5 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eccc26e; op2val:0x40200819;
op3val:0x72ffff00; valaddr_reg:x3; val_offset:61716*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61716*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20573:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4cc26e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x200819 and fs3 == 0 and fe3 == 0xe5 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eccc26e; op2val:0x40200819;
op3val:0x72ffff80; valaddr_reg:x3; val_offset:61719*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61719*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20574:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4cc26e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x200819 and fs3 == 0 and fe3 == 0xe5 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eccc26e; op2val:0x40200819;
op3val:0x72ffffc0; valaddr_reg:x3; val_offset:61722*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61722*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20575:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4cc26e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x200819 and fs3 == 0 and fe3 == 0xe5 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eccc26e; op2val:0x40200819;
op3val:0x72ffffe0; valaddr_reg:x3; val_offset:61725*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61725*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20576:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4cc26e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x200819 and fs3 == 0 and fe3 == 0xe5 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eccc26e; op2val:0x40200819;
op3val:0x72fffff0; valaddr_reg:x3; val_offset:61728*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61728*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20577:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4cc26e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x200819 and fs3 == 0 and fe3 == 0xe5 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eccc26e; op2val:0x40200819;
op3val:0x72fffff8; valaddr_reg:x3; val_offset:61731*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61731*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20578:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4cc26e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x200819 and fs3 == 0 and fe3 == 0xe5 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eccc26e; op2val:0x40200819;
op3val:0x72fffffc; valaddr_reg:x3; val_offset:61734*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61734*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20579:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4cc26e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x200819 and fs3 == 0 and fe3 == 0xe5 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eccc26e; op2val:0x40200819;
op3val:0x72fffffe; valaddr_reg:x3; val_offset:61737*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61737*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20580:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4cc26e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x200819 and fs3 == 0 and fe3 == 0xe5 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eccc26e; op2val:0x40200819;
op3val:0x72ffffff; valaddr_reg:x3; val_offset:61740*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61740*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20581:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4cc26e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x200819 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eccc26e; op2val:0x40200819;
op3val:0x7f000001; valaddr_reg:x3; val_offset:61743*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61743*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20582:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4cc26e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x200819 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eccc26e; op2val:0x40200819;
op3val:0x7f000003; valaddr_reg:x3; val_offset:61746*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61746*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20583:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4cc26e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x200819 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eccc26e; op2val:0x40200819;
op3val:0x7f000007; valaddr_reg:x3; val_offset:61749*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61749*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20584:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4cc26e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x200819 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eccc26e; op2val:0x40200819;
op3val:0x7f199999; valaddr_reg:x3; val_offset:61752*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61752*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20585:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4cc26e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x200819 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eccc26e; op2val:0x40200819;
op3val:0x7f249249; valaddr_reg:x3; val_offset:61755*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61755*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20586:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4cc26e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x200819 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eccc26e; op2val:0x40200819;
op3val:0x7f333333; valaddr_reg:x3; val_offset:61758*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61758*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20587:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4cc26e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x200819 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eccc26e; op2val:0x40200819;
op3val:0x7f36db6d; valaddr_reg:x3; val_offset:61761*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61761*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20588:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4cc26e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x200819 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eccc26e; op2val:0x40200819;
op3val:0x7f3bbbbb; valaddr_reg:x3; val_offset:61764*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61764*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20589:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4cc26e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x200819 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eccc26e; op2val:0x40200819;
op3val:0x7f444444; valaddr_reg:x3; val_offset:61767*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61767*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20590:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4cc26e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x200819 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eccc26e; op2val:0x40200819;
op3val:0x7f4ccccc; valaddr_reg:x3; val_offset:61770*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61770*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20591:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4cc26e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x200819 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eccc26e; op2val:0x40200819;
op3val:0x7f5b6db6; valaddr_reg:x3; val_offset:61773*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61773*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20592:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4cc26e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x200819 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eccc26e; op2val:0x40200819;
op3val:0x7f666666; valaddr_reg:x3; val_offset:61776*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61776*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20593:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4cc26e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x200819 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eccc26e; op2val:0x40200819;
op3val:0x7f6db6db; valaddr_reg:x3; val_offset:61779*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61779*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20594:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4cc26e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x200819 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eccc26e; op2val:0x40200819;
op3val:0x7f7ffff8; valaddr_reg:x3; val_offset:61782*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61782*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20595:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4cc26e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x200819 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eccc26e; op2val:0x40200819;
op3val:0x7f7ffffc; valaddr_reg:x3; val_offset:61785*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61785*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20596:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4cc26e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x200819 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eccc26e; op2val:0x40200819;
op3val:0x7f7ffffe; valaddr_reg:x3; val_offset:61788*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61788*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20597:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4f7809 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecf7809; op2val:0x80000000;
op3val:0x80000001; valaddr_reg:x3; val_offset:61791*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61791*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20598:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4f7809 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecf7809; op2val:0x80000000;
op3val:0x80000003; valaddr_reg:x3; val_offset:61794*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61794*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20599:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4f7809 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecf7809; op2val:0x80000000;
op3val:0x80000007; valaddr_reg:x3; val_offset:61797*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61797*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20600:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4f7809 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecf7809; op2val:0x80000000;
op3val:0x80199999; valaddr_reg:x3; val_offset:61800*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61800*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20601:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4f7809 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecf7809; op2val:0x80000000;
op3val:0x80249249; valaddr_reg:x3; val_offset:61803*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61803*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20602:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4f7809 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecf7809; op2val:0x80000000;
op3val:0x80333333; valaddr_reg:x3; val_offset:61806*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61806*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20603:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4f7809 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecf7809; op2val:0x80000000;
op3val:0x8036db6d; valaddr_reg:x3; val_offset:61809*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61809*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20604:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4f7809 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecf7809; op2val:0x80000000;
op3val:0x803bbbbb; valaddr_reg:x3; val_offset:61812*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61812*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20605:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4f7809 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecf7809; op2val:0x80000000;
op3val:0x80444444; valaddr_reg:x3; val_offset:61815*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61815*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20606:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4f7809 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecf7809; op2val:0x80000000;
op3val:0x804ccccc; valaddr_reg:x3; val_offset:61818*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61818*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20607:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4f7809 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecf7809; op2val:0x80000000;
op3val:0x805b6db6; valaddr_reg:x3; val_offset:61821*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61821*0 + 3*160*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2127331618,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3914683,32,FLEN)
NAN_BOXED(2127331618,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4473924,32,FLEN)
NAN_BOXED(2127331618,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5033164,32,FLEN)
NAN_BOXED(2127331618,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5991862,32,FLEN)
NAN_BOXED(2127331618,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(6710886,32,FLEN)
NAN_BOXED(2127331618,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7190235,32,FLEN)
NAN_BOXED(2127331618,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388600,32,FLEN)
NAN_BOXED(2127331618,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388604,32,FLEN)
NAN_BOXED(2127331618,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388606,32,FLEN)
NAN_BOXED(2127331618,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117440512,32,FLEN)
NAN_BOXED(2127331618,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117440513,32,FLEN)
NAN_BOXED(2127331618,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117440515,32,FLEN)
NAN_BOXED(2127331618,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117440519,32,FLEN)
NAN_BOXED(2127331618,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117440527,32,FLEN)
NAN_BOXED(2127331618,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117440543,32,FLEN)
NAN_BOXED(2127331618,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117440575,32,FLEN)
NAN_BOXED(2127331618,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117440639,32,FLEN)
NAN_BOXED(2127331618,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117440767,32,FLEN)
NAN_BOXED(2127331618,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117441023,32,FLEN)
NAN_BOXED(2127331618,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117441535,32,FLEN)
NAN_BOXED(2127331618,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117442559,32,FLEN)
NAN_BOXED(2127331618,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117444607,32,FLEN)
NAN_BOXED(2127331618,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117448703,32,FLEN)
NAN_BOXED(2127331618,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117456895,32,FLEN)
NAN_BOXED(2127331618,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117473279,32,FLEN)
NAN_BOXED(2127331618,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117506047,32,FLEN)
NAN_BOXED(2127331618,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117571583,32,FLEN)
NAN_BOXED(2127331618,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117702655,32,FLEN)
NAN_BOXED(2127331618,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117964799,32,FLEN)
NAN_BOXED(2127331618,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(118489087,32,FLEN)
NAN_BOXED(2127331618,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(119537663,32,FLEN)
NAN_BOXED(2127331618,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(121634815,32,FLEN)
NAN_BOXED(2127331618,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(121634816,32,FLEN)
NAN_BOXED(2127331618,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(123731968,32,FLEN)
NAN_BOXED(2127331618,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(124780544,32,FLEN)
NAN_BOXED(2127331618,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125304832,32,FLEN)
NAN_BOXED(2127331618,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125566976,32,FLEN)
NAN_BOXED(2127331618,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125698048,32,FLEN)
NAN_BOXED(2127331618,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125763584,32,FLEN)
NAN_BOXED(2127331618,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125796352,32,FLEN)
NAN_BOXED(2127331618,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125812736,32,FLEN)
NAN_BOXED(2127331618,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125820928,32,FLEN)
NAN_BOXED(2127331618,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125825024,32,FLEN)
NAN_BOXED(2127331618,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125827072,32,FLEN)
NAN_BOXED(2127331618,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125828096,32,FLEN)
NAN_BOXED(2127331618,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125828608,32,FLEN)
NAN_BOXED(2127331618,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125828864,32,FLEN)
NAN_BOXED(2127331618,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125828992,32,FLEN)
NAN_BOXED(2127331618,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125829056,32,FLEN)
NAN_BOXED(2127331618,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125829088,32,FLEN)
NAN_BOXED(2127331618,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125829104,32,FLEN)
NAN_BOXED(2127331618,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125829112,32,FLEN)
NAN_BOXED(2127331618,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125829116,32,FLEN)
NAN_BOXED(2127331618,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125829118,32,FLEN)
NAN_BOXED(2127331618,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125829119,32,FLEN)
NAN_BOXED(2127348334,32,FLEN)
NAN_BOXED(1075841049,32,FLEN)
NAN_BOXED(1920991232,32,FLEN)
NAN_BOXED(2127348334,32,FLEN)
NAN_BOXED(1075841049,32,FLEN)
NAN_BOXED(1920991233,32,FLEN)
NAN_BOXED(2127348334,32,FLEN)
NAN_BOXED(1075841049,32,FLEN)
NAN_BOXED(1920991235,32,FLEN)
NAN_BOXED(2127348334,32,FLEN)
NAN_BOXED(1075841049,32,FLEN)
NAN_BOXED(1920991239,32,FLEN)
NAN_BOXED(2127348334,32,FLEN)
NAN_BOXED(1075841049,32,FLEN)
NAN_BOXED(1920991247,32,FLEN)
NAN_BOXED(2127348334,32,FLEN)
NAN_BOXED(1075841049,32,FLEN)
NAN_BOXED(1920991263,32,FLEN)
NAN_BOXED(2127348334,32,FLEN)
NAN_BOXED(1075841049,32,FLEN)
NAN_BOXED(1920991295,32,FLEN)
NAN_BOXED(2127348334,32,FLEN)
NAN_BOXED(1075841049,32,FLEN)
NAN_BOXED(1920991359,32,FLEN)
NAN_BOXED(2127348334,32,FLEN)
NAN_BOXED(1075841049,32,FLEN)
NAN_BOXED(1920991487,32,FLEN)
NAN_BOXED(2127348334,32,FLEN)
NAN_BOXED(1075841049,32,FLEN)
NAN_BOXED(1920991743,32,FLEN)
NAN_BOXED(2127348334,32,FLEN)
NAN_BOXED(1075841049,32,FLEN)
NAN_BOXED(1920992255,32,FLEN)
NAN_BOXED(2127348334,32,FLEN)
NAN_BOXED(1075841049,32,FLEN)
NAN_BOXED(1920993279,32,FLEN)
NAN_BOXED(2127348334,32,FLEN)
NAN_BOXED(1075841049,32,FLEN)
NAN_BOXED(1920995327,32,FLEN)
NAN_BOXED(2127348334,32,FLEN)
NAN_BOXED(1075841049,32,FLEN)
NAN_BOXED(1920999423,32,FLEN)
NAN_BOXED(2127348334,32,FLEN)
NAN_BOXED(1075841049,32,FLEN)
NAN_BOXED(1921007615,32,FLEN)
NAN_BOXED(2127348334,32,FLEN)
NAN_BOXED(1075841049,32,FLEN)
NAN_BOXED(1921023999,32,FLEN)
NAN_BOXED(2127348334,32,FLEN)
NAN_BOXED(1075841049,32,FLEN)
NAN_BOXED(1921056767,32,FLEN)
NAN_BOXED(2127348334,32,FLEN)
NAN_BOXED(1075841049,32,FLEN)
NAN_BOXED(1921122303,32,FLEN)
NAN_BOXED(2127348334,32,FLEN)
NAN_BOXED(1075841049,32,FLEN)
NAN_BOXED(1921253375,32,FLEN)
NAN_BOXED(2127348334,32,FLEN)
NAN_BOXED(1075841049,32,FLEN)
NAN_BOXED(1921515519,32,FLEN)
NAN_BOXED(2127348334,32,FLEN)
NAN_BOXED(1075841049,32,FLEN)
NAN_BOXED(1922039807,32,FLEN)
NAN_BOXED(2127348334,32,FLEN)
NAN_BOXED(1075841049,32,FLEN)
NAN_BOXED(1923088383,32,FLEN)
NAN_BOXED(2127348334,32,FLEN)
NAN_BOXED(1075841049,32,FLEN)
NAN_BOXED(1925185535,32,FLEN)
NAN_BOXED(2127348334,32,FLEN)
NAN_BOXED(1075841049,32,FLEN)
NAN_BOXED(1925185536,32,FLEN)
NAN_BOXED(2127348334,32,FLEN)
NAN_BOXED(1075841049,32,FLEN)
NAN_BOXED(1927282688,32,FLEN)
NAN_BOXED(2127348334,32,FLEN)
NAN_BOXED(1075841049,32,FLEN)
NAN_BOXED(1928331264,32,FLEN)
NAN_BOXED(2127348334,32,FLEN)
NAN_BOXED(1075841049,32,FLEN)
NAN_BOXED(1928855552,32,FLEN)
NAN_BOXED(2127348334,32,FLEN)
NAN_BOXED(1075841049,32,FLEN)
NAN_BOXED(1929117696,32,FLEN)
NAN_BOXED(2127348334,32,FLEN)
NAN_BOXED(1075841049,32,FLEN)
NAN_BOXED(1929248768,32,FLEN)
NAN_BOXED(2127348334,32,FLEN)
NAN_BOXED(1075841049,32,FLEN)
NAN_BOXED(1929314304,32,FLEN)
NAN_BOXED(2127348334,32,FLEN)
NAN_BOXED(1075841049,32,FLEN)
NAN_BOXED(1929347072,32,FLEN)
NAN_BOXED(2127348334,32,FLEN)
NAN_BOXED(1075841049,32,FLEN)
NAN_BOXED(1929363456,32,FLEN)
NAN_BOXED(2127348334,32,FLEN)
NAN_BOXED(1075841049,32,FLEN)
NAN_BOXED(1929371648,32,FLEN)
NAN_BOXED(2127348334,32,FLEN)
NAN_BOXED(1075841049,32,FLEN)
NAN_BOXED(1929375744,32,FLEN)
NAN_BOXED(2127348334,32,FLEN)
NAN_BOXED(1075841049,32,FLEN)
NAN_BOXED(1929377792,32,FLEN)
NAN_BOXED(2127348334,32,FLEN)
NAN_BOXED(1075841049,32,FLEN)
NAN_BOXED(1929378816,32,FLEN)
NAN_BOXED(2127348334,32,FLEN)
NAN_BOXED(1075841049,32,FLEN)
NAN_BOXED(1929379328,32,FLEN)
NAN_BOXED(2127348334,32,FLEN)
NAN_BOXED(1075841049,32,FLEN)
NAN_BOXED(1929379584,32,FLEN)
NAN_BOXED(2127348334,32,FLEN)
NAN_BOXED(1075841049,32,FLEN)
NAN_BOXED(1929379712,32,FLEN)
NAN_BOXED(2127348334,32,FLEN)
NAN_BOXED(1075841049,32,FLEN)
NAN_BOXED(1929379776,32,FLEN)
NAN_BOXED(2127348334,32,FLEN)
NAN_BOXED(1075841049,32,FLEN)
NAN_BOXED(1929379808,32,FLEN)
NAN_BOXED(2127348334,32,FLEN)
NAN_BOXED(1075841049,32,FLEN)
NAN_BOXED(1929379824,32,FLEN)
NAN_BOXED(2127348334,32,FLEN)
NAN_BOXED(1075841049,32,FLEN)
NAN_BOXED(1929379832,32,FLEN)
NAN_BOXED(2127348334,32,FLEN)
NAN_BOXED(1075841049,32,FLEN)
NAN_BOXED(1929379836,32,FLEN)
NAN_BOXED(2127348334,32,FLEN)
NAN_BOXED(1075841049,32,FLEN)
NAN_BOXED(1929379838,32,FLEN)
NAN_BOXED(2127348334,32,FLEN)
NAN_BOXED(1075841049,32,FLEN)
NAN_BOXED(1929379839,32,FLEN)
NAN_BOXED(2127348334,32,FLEN)
NAN_BOXED(1075841049,32,FLEN)
NAN_BOXED(2130706433,32,FLEN)
NAN_BOXED(2127348334,32,FLEN)
NAN_BOXED(1075841049,32,FLEN)
NAN_BOXED(2130706435,32,FLEN)
NAN_BOXED(2127348334,32,FLEN)
NAN_BOXED(1075841049,32,FLEN)
NAN_BOXED(2130706439,32,FLEN)
NAN_BOXED(2127348334,32,FLEN)
NAN_BOXED(1075841049,32,FLEN)
NAN_BOXED(2132384153,32,FLEN)
NAN_BOXED(2127348334,32,FLEN)
NAN_BOXED(1075841049,32,FLEN)
NAN_BOXED(2133103177,32,FLEN)
NAN_BOXED(2127348334,32,FLEN)
NAN_BOXED(1075841049,32,FLEN)
NAN_BOXED(2134061875,32,FLEN)
NAN_BOXED(2127348334,32,FLEN)
NAN_BOXED(1075841049,32,FLEN)
NAN_BOXED(2134301549,32,FLEN)
NAN_BOXED(2127348334,32,FLEN)
NAN_BOXED(1075841049,32,FLEN)
NAN_BOXED(2134621115,32,FLEN)
NAN_BOXED(2127348334,32,FLEN)
NAN_BOXED(1075841049,32,FLEN)
NAN_BOXED(2135180356,32,FLEN)
NAN_BOXED(2127348334,32,FLEN)
NAN_BOXED(1075841049,32,FLEN)
NAN_BOXED(2135739596,32,FLEN)
NAN_BOXED(2127348334,32,FLEN)
NAN_BOXED(1075841049,32,FLEN)
NAN_BOXED(2136698294,32,FLEN)
NAN_BOXED(2127348334,32,FLEN)
NAN_BOXED(1075841049,32,FLEN)
NAN_BOXED(2137417318,32,FLEN)
NAN_BOXED(2127348334,32,FLEN)
NAN_BOXED(1075841049,32,FLEN)
NAN_BOXED(2137896667,32,FLEN)
NAN_BOXED(2127348334,32,FLEN)
NAN_BOXED(1075841049,32,FLEN)
NAN_BOXED(2139095032,32,FLEN)
NAN_BOXED(2127348334,32,FLEN)
NAN_BOXED(1075841049,32,FLEN)
NAN_BOXED(2139095036,32,FLEN)
NAN_BOXED(2127348334,32,FLEN)
NAN_BOXED(1075841049,32,FLEN)
NAN_BOXED(2139095038,32,FLEN)
NAN_BOXED(2127525897,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2127525897,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483651,32,FLEN)
NAN_BOXED(2127525897,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483655,32,FLEN)
NAN_BOXED(2127525897,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149161369,32,FLEN)
NAN_BOXED(2127525897,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149880393,32,FLEN)
NAN_BOXED(2127525897,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2150839091,32,FLEN)
NAN_BOXED(2127525897,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151078765,32,FLEN)
NAN_BOXED(2127525897,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151398331,32,FLEN)
NAN_BOXED(2127525897,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151957572,32,FLEN)
NAN_BOXED(2127525897,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2152516812,32,FLEN)
NAN_BOXED(2127525897,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2153475510,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
