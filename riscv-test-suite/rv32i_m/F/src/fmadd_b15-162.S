
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:17:59 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_20608:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4f7809 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecf7809; op2val:0x80000000;
op3val:0x80666666; valaddr_reg:x3; val_offset:61824*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61824*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20609:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4f7809 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecf7809; op2val:0x80000000;
op3val:0x806db6db; valaddr_reg:x3; val_offset:61827*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61827*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20610:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4f7809 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecf7809; op2val:0x80000000;
op3val:0x807ffff8; valaddr_reg:x3; val_offset:61830*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61830*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20611:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4f7809 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecf7809; op2val:0x80000000;
op3val:0x807ffffc; valaddr_reg:x3; val_offset:61833*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61833*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20612:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4f7809 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecf7809; op2val:0x80000000;
op3val:0x807ffffe; valaddr_reg:x3; val_offset:61836*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61836*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20613:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4f7809 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecf7809; op2val:0x80000000;
op3val:0x8b800000; valaddr_reg:x3; val_offset:61839*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61839*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20614:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4f7809 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecf7809; op2val:0x80000000;
op3val:0x8b800001; valaddr_reg:x3; val_offset:61842*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61842*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20615:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4f7809 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecf7809; op2val:0x80000000;
op3val:0x8b800003; valaddr_reg:x3; val_offset:61845*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61845*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20616:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4f7809 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecf7809; op2val:0x80000000;
op3val:0x8b800007; valaddr_reg:x3; val_offset:61848*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61848*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20617:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4f7809 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecf7809; op2val:0x80000000;
op3val:0x8b80000f; valaddr_reg:x3; val_offset:61851*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61851*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20618:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4f7809 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecf7809; op2val:0x80000000;
op3val:0x8b80001f; valaddr_reg:x3; val_offset:61854*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61854*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20619:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4f7809 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecf7809; op2val:0x80000000;
op3val:0x8b80003f; valaddr_reg:x3; val_offset:61857*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61857*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20620:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4f7809 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecf7809; op2val:0x80000000;
op3val:0x8b80007f; valaddr_reg:x3; val_offset:61860*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61860*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20621:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4f7809 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecf7809; op2val:0x80000000;
op3val:0x8b8000ff; valaddr_reg:x3; val_offset:61863*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61863*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20622:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4f7809 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecf7809; op2val:0x80000000;
op3val:0x8b8001ff; valaddr_reg:x3; val_offset:61866*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61866*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20623:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4f7809 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecf7809; op2val:0x80000000;
op3val:0x8b8003ff; valaddr_reg:x3; val_offset:61869*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61869*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20624:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4f7809 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecf7809; op2val:0x80000000;
op3val:0x8b8007ff; valaddr_reg:x3; val_offset:61872*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61872*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20625:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4f7809 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecf7809; op2val:0x80000000;
op3val:0x8b800fff; valaddr_reg:x3; val_offset:61875*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61875*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20626:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4f7809 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecf7809; op2val:0x80000000;
op3val:0x8b801fff; valaddr_reg:x3; val_offset:61878*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61878*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20627:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4f7809 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecf7809; op2val:0x80000000;
op3val:0x8b803fff; valaddr_reg:x3; val_offset:61881*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61881*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20628:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4f7809 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecf7809; op2val:0x80000000;
op3val:0x8b807fff; valaddr_reg:x3; val_offset:61884*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61884*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20629:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4f7809 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecf7809; op2val:0x80000000;
op3val:0x8b80ffff; valaddr_reg:x3; val_offset:61887*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61887*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20630:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4f7809 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecf7809; op2val:0x80000000;
op3val:0x8b81ffff; valaddr_reg:x3; val_offset:61890*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61890*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20631:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4f7809 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecf7809; op2val:0x80000000;
op3val:0x8b83ffff; valaddr_reg:x3; val_offset:61893*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61893*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20632:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4f7809 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecf7809; op2val:0x80000000;
op3val:0x8b87ffff; valaddr_reg:x3; val_offset:61896*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61896*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20633:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4f7809 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecf7809; op2val:0x80000000;
op3val:0x8b8fffff; valaddr_reg:x3; val_offset:61899*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61899*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20634:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4f7809 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecf7809; op2val:0x80000000;
op3val:0x8b9fffff; valaddr_reg:x3; val_offset:61902*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61902*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20635:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4f7809 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecf7809; op2val:0x80000000;
op3val:0x8bbfffff; valaddr_reg:x3; val_offset:61905*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61905*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20636:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4f7809 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecf7809; op2val:0x80000000;
op3val:0x8bc00000; valaddr_reg:x3; val_offset:61908*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61908*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20637:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4f7809 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecf7809; op2val:0x80000000;
op3val:0x8be00000; valaddr_reg:x3; val_offset:61911*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61911*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20638:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4f7809 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecf7809; op2val:0x80000000;
op3val:0x8bf00000; valaddr_reg:x3; val_offset:61914*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61914*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20639:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4f7809 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecf7809; op2val:0x80000000;
op3val:0x8bf80000; valaddr_reg:x3; val_offset:61917*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61917*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20640:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4f7809 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecf7809; op2val:0x80000000;
op3val:0x8bfc0000; valaddr_reg:x3; val_offset:61920*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61920*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20641:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4f7809 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecf7809; op2val:0x80000000;
op3val:0x8bfe0000; valaddr_reg:x3; val_offset:61923*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61923*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20642:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4f7809 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecf7809; op2val:0x80000000;
op3val:0x8bff0000; valaddr_reg:x3; val_offset:61926*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61926*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20643:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4f7809 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecf7809; op2val:0x80000000;
op3val:0x8bff8000; valaddr_reg:x3; val_offset:61929*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61929*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20644:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4f7809 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecf7809; op2val:0x80000000;
op3val:0x8bffc000; valaddr_reg:x3; val_offset:61932*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61932*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20645:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4f7809 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecf7809; op2val:0x80000000;
op3val:0x8bffe000; valaddr_reg:x3; val_offset:61935*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61935*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20646:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4f7809 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecf7809; op2val:0x80000000;
op3val:0x8bfff000; valaddr_reg:x3; val_offset:61938*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61938*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20647:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4f7809 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecf7809; op2val:0x80000000;
op3val:0x8bfff800; valaddr_reg:x3; val_offset:61941*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61941*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20648:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4f7809 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecf7809; op2val:0x80000000;
op3val:0x8bfffc00; valaddr_reg:x3; val_offset:61944*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61944*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20649:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4f7809 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecf7809; op2val:0x80000000;
op3val:0x8bfffe00; valaddr_reg:x3; val_offset:61947*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61947*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20650:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4f7809 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecf7809; op2val:0x80000000;
op3val:0x8bffff00; valaddr_reg:x3; val_offset:61950*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61950*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20651:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4f7809 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecf7809; op2val:0x80000000;
op3val:0x8bffff80; valaddr_reg:x3; val_offset:61953*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61953*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20652:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4f7809 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecf7809; op2val:0x80000000;
op3val:0x8bffffc0; valaddr_reg:x3; val_offset:61956*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61956*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20653:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4f7809 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecf7809; op2val:0x80000000;
op3val:0x8bffffe0; valaddr_reg:x3; val_offset:61959*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61959*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20654:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4f7809 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecf7809; op2val:0x80000000;
op3val:0x8bfffff0; valaddr_reg:x3; val_offset:61962*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61962*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20655:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4f7809 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecf7809; op2val:0x80000000;
op3val:0x8bfffff8; valaddr_reg:x3; val_offset:61965*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61965*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20656:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4f7809 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecf7809; op2val:0x80000000;
op3val:0x8bfffffc; valaddr_reg:x3; val_offset:61968*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61968*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20657:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4f7809 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecf7809; op2val:0x80000000;
op3val:0x8bfffffe; valaddr_reg:x3; val_offset:61971*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61971*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20658:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4f7809 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecf7809; op2val:0x80000000;
op3val:0x8bffffff; valaddr_reg:x3; val_offset:61974*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61974*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20659:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x50fc84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4e65bf and fs3 == 0 and fe3 == 0x78 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed0fc84; op2val:0x4e65bf;
op3val:0x3c000000; valaddr_reg:x3; val_offset:61977*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61977*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20660:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x50fc84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4e65bf and fs3 == 0 and fe3 == 0x78 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed0fc84; op2val:0x4e65bf;
op3val:0x3c000001; valaddr_reg:x3; val_offset:61980*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61980*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20661:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x50fc84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4e65bf and fs3 == 0 and fe3 == 0x78 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed0fc84; op2val:0x4e65bf;
op3val:0x3c000003; valaddr_reg:x3; val_offset:61983*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61983*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20662:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x50fc84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4e65bf and fs3 == 0 and fe3 == 0x78 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed0fc84; op2val:0x4e65bf;
op3val:0x3c000007; valaddr_reg:x3; val_offset:61986*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61986*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20663:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x50fc84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4e65bf and fs3 == 0 and fe3 == 0x78 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed0fc84; op2val:0x4e65bf;
op3val:0x3c00000f; valaddr_reg:x3; val_offset:61989*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61989*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20664:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x50fc84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4e65bf and fs3 == 0 and fe3 == 0x78 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed0fc84; op2val:0x4e65bf;
op3val:0x3c00001f; valaddr_reg:x3; val_offset:61992*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61992*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20665:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x50fc84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4e65bf and fs3 == 0 and fe3 == 0x78 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed0fc84; op2val:0x4e65bf;
op3val:0x3c00003f; valaddr_reg:x3; val_offset:61995*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61995*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20666:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x50fc84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4e65bf and fs3 == 0 and fe3 == 0x78 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed0fc84; op2val:0x4e65bf;
op3val:0x3c00007f; valaddr_reg:x3; val_offset:61998*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61998*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20667:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x50fc84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4e65bf and fs3 == 0 and fe3 == 0x78 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed0fc84; op2val:0x4e65bf;
op3val:0x3c0000ff; valaddr_reg:x3; val_offset:62001*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62001*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20668:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x50fc84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4e65bf and fs3 == 0 and fe3 == 0x78 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed0fc84; op2val:0x4e65bf;
op3val:0x3c0001ff; valaddr_reg:x3; val_offset:62004*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62004*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20669:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x50fc84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4e65bf and fs3 == 0 and fe3 == 0x78 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed0fc84; op2val:0x4e65bf;
op3val:0x3c0003ff; valaddr_reg:x3; val_offset:62007*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62007*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20670:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x50fc84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4e65bf and fs3 == 0 and fe3 == 0x78 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed0fc84; op2val:0x4e65bf;
op3val:0x3c0007ff; valaddr_reg:x3; val_offset:62010*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62010*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20671:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x50fc84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4e65bf and fs3 == 0 and fe3 == 0x78 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed0fc84; op2val:0x4e65bf;
op3val:0x3c000fff; valaddr_reg:x3; val_offset:62013*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62013*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20672:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x50fc84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4e65bf and fs3 == 0 and fe3 == 0x78 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed0fc84; op2val:0x4e65bf;
op3val:0x3c001fff; valaddr_reg:x3; val_offset:62016*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62016*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20673:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x50fc84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4e65bf and fs3 == 0 and fe3 == 0x78 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed0fc84; op2val:0x4e65bf;
op3val:0x3c003fff; valaddr_reg:x3; val_offset:62019*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62019*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20674:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x50fc84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4e65bf and fs3 == 0 and fe3 == 0x78 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed0fc84; op2val:0x4e65bf;
op3val:0x3c007fff; valaddr_reg:x3; val_offset:62022*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62022*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20675:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x50fc84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4e65bf and fs3 == 0 and fe3 == 0x78 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed0fc84; op2val:0x4e65bf;
op3val:0x3c00ffff; valaddr_reg:x3; val_offset:62025*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62025*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20676:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x50fc84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4e65bf and fs3 == 0 and fe3 == 0x78 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed0fc84; op2val:0x4e65bf;
op3val:0x3c01ffff; valaddr_reg:x3; val_offset:62028*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62028*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20677:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x50fc84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4e65bf and fs3 == 0 and fe3 == 0x78 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed0fc84; op2val:0x4e65bf;
op3val:0x3c03ffff; valaddr_reg:x3; val_offset:62031*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62031*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20678:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x50fc84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4e65bf and fs3 == 0 and fe3 == 0x78 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed0fc84; op2val:0x4e65bf;
op3val:0x3c07ffff; valaddr_reg:x3; val_offset:62034*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62034*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20679:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x50fc84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4e65bf and fs3 == 0 and fe3 == 0x78 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed0fc84; op2val:0x4e65bf;
op3val:0x3c0fffff; valaddr_reg:x3; val_offset:62037*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62037*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20680:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x50fc84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4e65bf and fs3 == 0 and fe3 == 0x78 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed0fc84; op2val:0x4e65bf;
op3val:0x3c1fffff; valaddr_reg:x3; val_offset:62040*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62040*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20681:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x50fc84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4e65bf and fs3 == 0 and fe3 == 0x78 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed0fc84; op2val:0x4e65bf;
op3val:0x3c3fffff; valaddr_reg:x3; val_offset:62043*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62043*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20682:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x50fc84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4e65bf and fs3 == 0 and fe3 == 0x78 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed0fc84; op2val:0x4e65bf;
op3val:0x3c400000; valaddr_reg:x3; val_offset:62046*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62046*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20683:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x50fc84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4e65bf and fs3 == 0 and fe3 == 0x78 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed0fc84; op2val:0x4e65bf;
op3val:0x3c600000; valaddr_reg:x3; val_offset:62049*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62049*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20684:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x50fc84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4e65bf and fs3 == 0 and fe3 == 0x78 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed0fc84; op2val:0x4e65bf;
op3val:0x3c700000; valaddr_reg:x3; val_offset:62052*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62052*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20685:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x50fc84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4e65bf and fs3 == 0 and fe3 == 0x78 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed0fc84; op2val:0x4e65bf;
op3val:0x3c780000; valaddr_reg:x3; val_offset:62055*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62055*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20686:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x50fc84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4e65bf and fs3 == 0 and fe3 == 0x78 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed0fc84; op2val:0x4e65bf;
op3val:0x3c7c0000; valaddr_reg:x3; val_offset:62058*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62058*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20687:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x50fc84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4e65bf and fs3 == 0 and fe3 == 0x78 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed0fc84; op2val:0x4e65bf;
op3val:0x3c7e0000; valaddr_reg:x3; val_offset:62061*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62061*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20688:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x50fc84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4e65bf and fs3 == 0 and fe3 == 0x78 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed0fc84; op2val:0x4e65bf;
op3val:0x3c7f0000; valaddr_reg:x3; val_offset:62064*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62064*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20689:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x50fc84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4e65bf and fs3 == 0 and fe3 == 0x78 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed0fc84; op2val:0x4e65bf;
op3val:0x3c7f8000; valaddr_reg:x3; val_offset:62067*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62067*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20690:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x50fc84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4e65bf and fs3 == 0 and fe3 == 0x78 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed0fc84; op2val:0x4e65bf;
op3val:0x3c7fc000; valaddr_reg:x3; val_offset:62070*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62070*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20691:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x50fc84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4e65bf and fs3 == 0 and fe3 == 0x78 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed0fc84; op2val:0x4e65bf;
op3val:0x3c7fe000; valaddr_reg:x3; val_offset:62073*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62073*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20692:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x50fc84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4e65bf and fs3 == 0 and fe3 == 0x78 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed0fc84; op2val:0x4e65bf;
op3val:0x3c7ff000; valaddr_reg:x3; val_offset:62076*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62076*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20693:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x50fc84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4e65bf and fs3 == 0 and fe3 == 0x78 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed0fc84; op2val:0x4e65bf;
op3val:0x3c7ff800; valaddr_reg:x3; val_offset:62079*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62079*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20694:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x50fc84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4e65bf and fs3 == 0 and fe3 == 0x78 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed0fc84; op2val:0x4e65bf;
op3val:0x3c7ffc00; valaddr_reg:x3; val_offset:62082*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62082*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20695:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x50fc84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4e65bf and fs3 == 0 and fe3 == 0x78 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed0fc84; op2val:0x4e65bf;
op3val:0x3c7ffe00; valaddr_reg:x3; val_offset:62085*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62085*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20696:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x50fc84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4e65bf and fs3 == 0 and fe3 == 0x78 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed0fc84; op2val:0x4e65bf;
op3val:0x3c7fff00; valaddr_reg:x3; val_offset:62088*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62088*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20697:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x50fc84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4e65bf and fs3 == 0 and fe3 == 0x78 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed0fc84; op2val:0x4e65bf;
op3val:0x3c7fff80; valaddr_reg:x3; val_offset:62091*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62091*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20698:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x50fc84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4e65bf and fs3 == 0 and fe3 == 0x78 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed0fc84; op2val:0x4e65bf;
op3val:0x3c7fffc0; valaddr_reg:x3; val_offset:62094*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62094*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20699:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x50fc84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4e65bf and fs3 == 0 and fe3 == 0x78 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed0fc84; op2val:0x4e65bf;
op3val:0x3c7fffe0; valaddr_reg:x3; val_offset:62097*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62097*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20700:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x50fc84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4e65bf and fs3 == 0 and fe3 == 0x78 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed0fc84; op2val:0x4e65bf;
op3val:0x3c7ffff0; valaddr_reg:x3; val_offset:62100*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62100*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20701:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x50fc84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4e65bf and fs3 == 0 and fe3 == 0x78 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed0fc84; op2val:0x4e65bf;
op3val:0x3c7ffff8; valaddr_reg:x3; val_offset:62103*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62103*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20702:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x50fc84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4e65bf and fs3 == 0 and fe3 == 0x78 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed0fc84; op2val:0x4e65bf;
op3val:0x3c7ffffc; valaddr_reg:x3; val_offset:62106*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62106*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20703:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x50fc84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4e65bf and fs3 == 0 and fe3 == 0x78 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed0fc84; op2val:0x4e65bf;
op3val:0x3c7ffffe; valaddr_reg:x3; val_offset:62109*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62109*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20704:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x50fc84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4e65bf and fs3 == 0 and fe3 == 0x78 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed0fc84; op2val:0x4e65bf;
op3val:0x3c7fffff; valaddr_reg:x3; val_offset:62112*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62112*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20705:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x50fc84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4e65bf and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed0fc84; op2val:0x4e65bf;
op3val:0x3f800001; valaddr_reg:x3; val_offset:62115*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62115*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20706:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x50fc84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4e65bf and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed0fc84; op2val:0x4e65bf;
op3val:0x3f800003; valaddr_reg:x3; val_offset:62118*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62118*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20707:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x50fc84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4e65bf and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed0fc84; op2val:0x4e65bf;
op3val:0x3f800007; valaddr_reg:x3; val_offset:62121*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62121*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20708:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x50fc84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4e65bf and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed0fc84; op2val:0x4e65bf;
op3val:0x3f999999; valaddr_reg:x3; val_offset:62124*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62124*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20709:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x50fc84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4e65bf and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed0fc84; op2val:0x4e65bf;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:62127*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62127*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20710:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x50fc84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4e65bf and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed0fc84; op2val:0x4e65bf;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:62130*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62130*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20711:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x50fc84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4e65bf and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed0fc84; op2val:0x4e65bf;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:62133*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62133*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20712:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x50fc84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4e65bf and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed0fc84; op2val:0x4e65bf;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:62136*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62136*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20713:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x50fc84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4e65bf and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed0fc84; op2val:0x4e65bf;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:62139*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62139*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20714:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x50fc84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4e65bf and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed0fc84; op2val:0x4e65bf;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:62142*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62142*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20715:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x50fc84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4e65bf and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed0fc84; op2val:0x4e65bf;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:62145*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62145*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20716:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x50fc84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4e65bf and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed0fc84; op2val:0x4e65bf;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:62148*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62148*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20717:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x50fc84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4e65bf and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed0fc84; op2val:0x4e65bf;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:62151*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62151*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20718:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x50fc84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4e65bf and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed0fc84; op2val:0x4e65bf;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:62154*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62154*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20719:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x50fc84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4e65bf and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed0fc84; op2val:0x4e65bf;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:62157*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62157*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20720:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x50fc84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4e65bf and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed0fc84; op2val:0x4e65bf;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:62160*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62160*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20721:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x515c22 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1c83e1 and fs3 == 1 and fe3 == 0xdb and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed15c22; op2val:0xc01c83e1;
op3val:0xed800000; valaddr_reg:x3; val_offset:62163*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62163*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20722:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x515c22 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1c83e1 and fs3 == 1 and fe3 == 0xdb and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed15c22; op2val:0xc01c83e1;
op3val:0xed800001; valaddr_reg:x3; val_offset:62166*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62166*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20723:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x515c22 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1c83e1 and fs3 == 1 and fe3 == 0xdb and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed15c22; op2val:0xc01c83e1;
op3val:0xed800003; valaddr_reg:x3; val_offset:62169*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62169*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20724:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x515c22 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1c83e1 and fs3 == 1 and fe3 == 0xdb and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed15c22; op2val:0xc01c83e1;
op3val:0xed800007; valaddr_reg:x3; val_offset:62172*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62172*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20725:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x515c22 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1c83e1 and fs3 == 1 and fe3 == 0xdb and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed15c22; op2val:0xc01c83e1;
op3val:0xed80000f; valaddr_reg:x3; val_offset:62175*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62175*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20726:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x515c22 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1c83e1 and fs3 == 1 and fe3 == 0xdb and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed15c22; op2val:0xc01c83e1;
op3val:0xed80001f; valaddr_reg:x3; val_offset:62178*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62178*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20727:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x515c22 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1c83e1 and fs3 == 1 and fe3 == 0xdb and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed15c22; op2val:0xc01c83e1;
op3val:0xed80003f; valaddr_reg:x3; val_offset:62181*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62181*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20728:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x515c22 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1c83e1 and fs3 == 1 and fe3 == 0xdb and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed15c22; op2val:0xc01c83e1;
op3val:0xed80007f; valaddr_reg:x3; val_offset:62184*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62184*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20729:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x515c22 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1c83e1 and fs3 == 1 and fe3 == 0xdb and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed15c22; op2val:0xc01c83e1;
op3val:0xed8000ff; valaddr_reg:x3; val_offset:62187*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62187*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20730:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x515c22 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1c83e1 and fs3 == 1 and fe3 == 0xdb and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed15c22; op2val:0xc01c83e1;
op3val:0xed8001ff; valaddr_reg:x3; val_offset:62190*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62190*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20731:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x515c22 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1c83e1 and fs3 == 1 and fe3 == 0xdb and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed15c22; op2val:0xc01c83e1;
op3val:0xed8003ff; valaddr_reg:x3; val_offset:62193*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62193*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20732:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x515c22 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1c83e1 and fs3 == 1 and fe3 == 0xdb and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed15c22; op2val:0xc01c83e1;
op3val:0xed8007ff; valaddr_reg:x3; val_offset:62196*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62196*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20733:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x515c22 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1c83e1 and fs3 == 1 and fe3 == 0xdb and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed15c22; op2val:0xc01c83e1;
op3val:0xed800fff; valaddr_reg:x3; val_offset:62199*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62199*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20734:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x515c22 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1c83e1 and fs3 == 1 and fe3 == 0xdb and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed15c22; op2val:0xc01c83e1;
op3val:0xed801fff; valaddr_reg:x3; val_offset:62202*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62202*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20735:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x515c22 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1c83e1 and fs3 == 1 and fe3 == 0xdb and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed15c22; op2val:0xc01c83e1;
op3val:0xed803fff; valaddr_reg:x3; val_offset:62205*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62205*0 + 3*161*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2127525897,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154194534,32,FLEN)
NAN_BOXED(2127525897,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154673883,32,FLEN)
NAN_BOXED(2127525897,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872248,32,FLEN)
NAN_BOXED(2127525897,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872252,32,FLEN)
NAN_BOXED(2127525897,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2127525897,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340421632,32,FLEN)
NAN_BOXED(2127525897,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340421633,32,FLEN)
NAN_BOXED(2127525897,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340421635,32,FLEN)
NAN_BOXED(2127525897,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340421639,32,FLEN)
NAN_BOXED(2127525897,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340421647,32,FLEN)
NAN_BOXED(2127525897,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340421663,32,FLEN)
NAN_BOXED(2127525897,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340421695,32,FLEN)
NAN_BOXED(2127525897,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340421759,32,FLEN)
NAN_BOXED(2127525897,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340421887,32,FLEN)
NAN_BOXED(2127525897,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340422143,32,FLEN)
NAN_BOXED(2127525897,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340422655,32,FLEN)
NAN_BOXED(2127525897,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340423679,32,FLEN)
NAN_BOXED(2127525897,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340425727,32,FLEN)
NAN_BOXED(2127525897,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340429823,32,FLEN)
NAN_BOXED(2127525897,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340438015,32,FLEN)
NAN_BOXED(2127525897,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340454399,32,FLEN)
NAN_BOXED(2127525897,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340487167,32,FLEN)
NAN_BOXED(2127525897,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340552703,32,FLEN)
NAN_BOXED(2127525897,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340683775,32,FLEN)
NAN_BOXED(2127525897,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340945919,32,FLEN)
NAN_BOXED(2127525897,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2341470207,32,FLEN)
NAN_BOXED(2127525897,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2342518783,32,FLEN)
NAN_BOXED(2127525897,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2344615935,32,FLEN)
NAN_BOXED(2127525897,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2344615936,32,FLEN)
NAN_BOXED(2127525897,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2346713088,32,FLEN)
NAN_BOXED(2127525897,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2347761664,32,FLEN)
NAN_BOXED(2127525897,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348285952,32,FLEN)
NAN_BOXED(2127525897,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348548096,32,FLEN)
NAN_BOXED(2127525897,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348679168,32,FLEN)
NAN_BOXED(2127525897,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348744704,32,FLEN)
NAN_BOXED(2127525897,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348777472,32,FLEN)
NAN_BOXED(2127525897,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348793856,32,FLEN)
NAN_BOXED(2127525897,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348802048,32,FLEN)
NAN_BOXED(2127525897,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348806144,32,FLEN)
NAN_BOXED(2127525897,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348808192,32,FLEN)
NAN_BOXED(2127525897,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348809216,32,FLEN)
NAN_BOXED(2127525897,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348809728,32,FLEN)
NAN_BOXED(2127525897,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348809984,32,FLEN)
NAN_BOXED(2127525897,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348810112,32,FLEN)
NAN_BOXED(2127525897,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348810176,32,FLEN)
NAN_BOXED(2127525897,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348810208,32,FLEN)
NAN_BOXED(2127525897,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348810224,32,FLEN)
NAN_BOXED(2127525897,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348810232,32,FLEN)
NAN_BOXED(2127525897,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348810236,32,FLEN)
NAN_BOXED(2127525897,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348810238,32,FLEN)
NAN_BOXED(2127525897,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348810239,32,FLEN)
NAN_BOXED(2127625348,32,FLEN)
NAN_BOXED(5137855,32,FLEN)
NAN_BOXED(1006632960,32,FLEN)
NAN_BOXED(2127625348,32,FLEN)
NAN_BOXED(5137855,32,FLEN)
NAN_BOXED(1006632961,32,FLEN)
NAN_BOXED(2127625348,32,FLEN)
NAN_BOXED(5137855,32,FLEN)
NAN_BOXED(1006632963,32,FLEN)
NAN_BOXED(2127625348,32,FLEN)
NAN_BOXED(5137855,32,FLEN)
NAN_BOXED(1006632967,32,FLEN)
NAN_BOXED(2127625348,32,FLEN)
NAN_BOXED(5137855,32,FLEN)
NAN_BOXED(1006632975,32,FLEN)
NAN_BOXED(2127625348,32,FLEN)
NAN_BOXED(5137855,32,FLEN)
NAN_BOXED(1006632991,32,FLEN)
NAN_BOXED(2127625348,32,FLEN)
NAN_BOXED(5137855,32,FLEN)
NAN_BOXED(1006633023,32,FLEN)
NAN_BOXED(2127625348,32,FLEN)
NAN_BOXED(5137855,32,FLEN)
NAN_BOXED(1006633087,32,FLEN)
NAN_BOXED(2127625348,32,FLEN)
NAN_BOXED(5137855,32,FLEN)
NAN_BOXED(1006633215,32,FLEN)
NAN_BOXED(2127625348,32,FLEN)
NAN_BOXED(5137855,32,FLEN)
NAN_BOXED(1006633471,32,FLEN)
NAN_BOXED(2127625348,32,FLEN)
NAN_BOXED(5137855,32,FLEN)
NAN_BOXED(1006633983,32,FLEN)
NAN_BOXED(2127625348,32,FLEN)
NAN_BOXED(5137855,32,FLEN)
NAN_BOXED(1006635007,32,FLEN)
NAN_BOXED(2127625348,32,FLEN)
NAN_BOXED(5137855,32,FLEN)
NAN_BOXED(1006637055,32,FLEN)
NAN_BOXED(2127625348,32,FLEN)
NAN_BOXED(5137855,32,FLEN)
NAN_BOXED(1006641151,32,FLEN)
NAN_BOXED(2127625348,32,FLEN)
NAN_BOXED(5137855,32,FLEN)
NAN_BOXED(1006649343,32,FLEN)
NAN_BOXED(2127625348,32,FLEN)
NAN_BOXED(5137855,32,FLEN)
NAN_BOXED(1006665727,32,FLEN)
NAN_BOXED(2127625348,32,FLEN)
NAN_BOXED(5137855,32,FLEN)
NAN_BOXED(1006698495,32,FLEN)
NAN_BOXED(2127625348,32,FLEN)
NAN_BOXED(5137855,32,FLEN)
NAN_BOXED(1006764031,32,FLEN)
NAN_BOXED(2127625348,32,FLEN)
NAN_BOXED(5137855,32,FLEN)
NAN_BOXED(1006895103,32,FLEN)
NAN_BOXED(2127625348,32,FLEN)
NAN_BOXED(5137855,32,FLEN)
NAN_BOXED(1007157247,32,FLEN)
NAN_BOXED(2127625348,32,FLEN)
NAN_BOXED(5137855,32,FLEN)
NAN_BOXED(1007681535,32,FLEN)
NAN_BOXED(2127625348,32,FLEN)
NAN_BOXED(5137855,32,FLEN)
NAN_BOXED(1008730111,32,FLEN)
NAN_BOXED(2127625348,32,FLEN)
NAN_BOXED(5137855,32,FLEN)
NAN_BOXED(1010827263,32,FLEN)
NAN_BOXED(2127625348,32,FLEN)
NAN_BOXED(5137855,32,FLEN)
NAN_BOXED(1010827264,32,FLEN)
NAN_BOXED(2127625348,32,FLEN)
NAN_BOXED(5137855,32,FLEN)
NAN_BOXED(1012924416,32,FLEN)
NAN_BOXED(2127625348,32,FLEN)
NAN_BOXED(5137855,32,FLEN)
NAN_BOXED(1013972992,32,FLEN)
NAN_BOXED(2127625348,32,FLEN)
NAN_BOXED(5137855,32,FLEN)
NAN_BOXED(1014497280,32,FLEN)
NAN_BOXED(2127625348,32,FLEN)
NAN_BOXED(5137855,32,FLEN)
NAN_BOXED(1014759424,32,FLEN)
NAN_BOXED(2127625348,32,FLEN)
NAN_BOXED(5137855,32,FLEN)
NAN_BOXED(1014890496,32,FLEN)
NAN_BOXED(2127625348,32,FLEN)
NAN_BOXED(5137855,32,FLEN)
NAN_BOXED(1014956032,32,FLEN)
NAN_BOXED(2127625348,32,FLEN)
NAN_BOXED(5137855,32,FLEN)
NAN_BOXED(1014988800,32,FLEN)
NAN_BOXED(2127625348,32,FLEN)
NAN_BOXED(5137855,32,FLEN)
NAN_BOXED(1015005184,32,FLEN)
NAN_BOXED(2127625348,32,FLEN)
NAN_BOXED(5137855,32,FLEN)
NAN_BOXED(1015013376,32,FLEN)
NAN_BOXED(2127625348,32,FLEN)
NAN_BOXED(5137855,32,FLEN)
NAN_BOXED(1015017472,32,FLEN)
NAN_BOXED(2127625348,32,FLEN)
NAN_BOXED(5137855,32,FLEN)
NAN_BOXED(1015019520,32,FLEN)
NAN_BOXED(2127625348,32,FLEN)
NAN_BOXED(5137855,32,FLEN)
NAN_BOXED(1015020544,32,FLEN)
NAN_BOXED(2127625348,32,FLEN)
NAN_BOXED(5137855,32,FLEN)
NAN_BOXED(1015021056,32,FLEN)
NAN_BOXED(2127625348,32,FLEN)
NAN_BOXED(5137855,32,FLEN)
NAN_BOXED(1015021312,32,FLEN)
NAN_BOXED(2127625348,32,FLEN)
NAN_BOXED(5137855,32,FLEN)
NAN_BOXED(1015021440,32,FLEN)
NAN_BOXED(2127625348,32,FLEN)
NAN_BOXED(5137855,32,FLEN)
NAN_BOXED(1015021504,32,FLEN)
NAN_BOXED(2127625348,32,FLEN)
NAN_BOXED(5137855,32,FLEN)
NAN_BOXED(1015021536,32,FLEN)
NAN_BOXED(2127625348,32,FLEN)
NAN_BOXED(5137855,32,FLEN)
NAN_BOXED(1015021552,32,FLEN)
NAN_BOXED(2127625348,32,FLEN)
NAN_BOXED(5137855,32,FLEN)
NAN_BOXED(1015021560,32,FLEN)
NAN_BOXED(2127625348,32,FLEN)
NAN_BOXED(5137855,32,FLEN)
NAN_BOXED(1015021564,32,FLEN)
NAN_BOXED(2127625348,32,FLEN)
NAN_BOXED(5137855,32,FLEN)
NAN_BOXED(1015021566,32,FLEN)
NAN_BOXED(2127625348,32,FLEN)
NAN_BOXED(5137855,32,FLEN)
NAN_BOXED(1015021567,32,FLEN)
NAN_BOXED(2127625348,32,FLEN)
NAN_BOXED(5137855,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2127625348,32,FLEN)
NAN_BOXED(5137855,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2127625348,32,FLEN)
NAN_BOXED(5137855,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2127625348,32,FLEN)
NAN_BOXED(5137855,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2127625348,32,FLEN)
NAN_BOXED(5137855,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2127625348,32,FLEN)
NAN_BOXED(5137855,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2127625348,32,FLEN)
NAN_BOXED(5137855,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2127625348,32,FLEN)
NAN_BOXED(5137855,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2127625348,32,FLEN)
NAN_BOXED(5137855,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2127625348,32,FLEN)
NAN_BOXED(5137855,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2127625348,32,FLEN)
NAN_BOXED(5137855,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2127625348,32,FLEN)
NAN_BOXED(5137855,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2127625348,32,FLEN)
NAN_BOXED(5137855,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2127625348,32,FLEN)
NAN_BOXED(5137855,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2127625348,32,FLEN)
NAN_BOXED(5137855,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2127625348,32,FLEN)
NAN_BOXED(5137855,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2127649826,32,FLEN)
NAN_BOXED(3223094241,32,FLEN)
NAN_BOXED(3984588800,32,FLEN)
NAN_BOXED(2127649826,32,FLEN)
NAN_BOXED(3223094241,32,FLEN)
NAN_BOXED(3984588801,32,FLEN)
NAN_BOXED(2127649826,32,FLEN)
NAN_BOXED(3223094241,32,FLEN)
NAN_BOXED(3984588803,32,FLEN)
NAN_BOXED(2127649826,32,FLEN)
NAN_BOXED(3223094241,32,FLEN)
NAN_BOXED(3984588807,32,FLEN)
NAN_BOXED(2127649826,32,FLEN)
NAN_BOXED(3223094241,32,FLEN)
NAN_BOXED(3984588815,32,FLEN)
NAN_BOXED(2127649826,32,FLEN)
NAN_BOXED(3223094241,32,FLEN)
NAN_BOXED(3984588831,32,FLEN)
NAN_BOXED(2127649826,32,FLEN)
NAN_BOXED(3223094241,32,FLEN)
NAN_BOXED(3984588863,32,FLEN)
NAN_BOXED(2127649826,32,FLEN)
NAN_BOXED(3223094241,32,FLEN)
NAN_BOXED(3984588927,32,FLEN)
NAN_BOXED(2127649826,32,FLEN)
NAN_BOXED(3223094241,32,FLEN)
NAN_BOXED(3984589055,32,FLEN)
NAN_BOXED(2127649826,32,FLEN)
NAN_BOXED(3223094241,32,FLEN)
NAN_BOXED(3984589311,32,FLEN)
NAN_BOXED(2127649826,32,FLEN)
NAN_BOXED(3223094241,32,FLEN)
NAN_BOXED(3984589823,32,FLEN)
NAN_BOXED(2127649826,32,FLEN)
NAN_BOXED(3223094241,32,FLEN)
NAN_BOXED(3984590847,32,FLEN)
NAN_BOXED(2127649826,32,FLEN)
NAN_BOXED(3223094241,32,FLEN)
NAN_BOXED(3984592895,32,FLEN)
NAN_BOXED(2127649826,32,FLEN)
NAN_BOXED(3223094241,32,FLEN)
NAN_BOXED(3984596991,32,FLEN)
NAN_BOXED(2127649826,32,FLEN)
NAN_BOXED(3223094241,32,FLEN)
NAN_BOXED(3984605183,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
