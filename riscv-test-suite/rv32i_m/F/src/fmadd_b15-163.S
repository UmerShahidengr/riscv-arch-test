
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:17:59 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_20736:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x515c22 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1c83e1 and fs3 == 1 and fe3 == 0xdb and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed15c22; op2val:0xc01c83e1;
op3val:0xed807fff; valaddr_reg:x3; val_offset:62208*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62208*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20737:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x515c22 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1c83e1 and fs3 == 1 and fe3 == 0xdb and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed15c22; op2val:0xc01c83e1;
op3val:0xed80ffff; valaddr_reg:x3; val_offset:62211*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62211*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20738:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x515c22 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1c83e1 and fs3 == 1 and fe3 == 0xdb and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed15c22; op2val:0xc01c83e1;
op3val:0xed81ffff; valaddr_reg:x3; val_offset:62214*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62214*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20739:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x515c22 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1c83e1 and fs3 == 1 and fe3 == 0xdb and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed15c22; op2val:0xc01c83e1;
op3val:0xed83ffff; valaddr_reg:x3; val_offset:62217*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62217*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20740:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x515c22 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1c83e1 and fs3 == 1 and fe3 == 0xdb and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed15c22; op2val:0xc01c83e1;
op3val:0xed87ffff; valaddr_reg:x3; val_offset:62220*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62220*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20741:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x515c22 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1c83e1 and fs3 == 1 and fe3 == 0xdb and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed15c22; op2val:0xc01c83e1;
op3val:0xed8fffff; valaddr_reg:x3; val_offset:62223*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62223*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20742:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x515c22 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1c83e1 and fs3 == 1 and fe3 == 0xdb and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed15c22; op2val:0xc01c83e1;
op3val:0xed9fffff; valaddr_reg:x3; val_offset:62226*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62226*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20743:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x515c22 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1c83e1 and fs3 == 1 and fe3 == 0xdb and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed15c22; op2val:0xc01c83e1;
op3val:0xedbfffff; valaddr_reg:x3; val_offset:62229*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62229*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20744:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x515c22 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1c83e1 and fs3 == 1 and fe3 == 0xdb and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed15c22; op2val:0xc01c83e1;
op3val:0xedc00000; valaddr_reg:x3; val_offset:62232*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62232*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20745:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x515c22 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1c83e1 and fs3 == 1 and fe3 == 0xdb and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed15c22; op2val:0xc01c83e1;
op3val:0xede00000; valaddr_reg:x3; val_offset:62235*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62235*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20746:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x515c22 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1c83e1 and fs3 == 1 and fe3 == 0xdb and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed15c22; op2val:0xc01c83e1;
op3val:0xedf00000; valaddr_reg:x3; val_offset:62238*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62238*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20747:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x515c22 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1c83e1 and fs3 == 1 and fe3 == 0xdb and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed15c22; op2val:0xc01c83e1;
op3val:0xedf80000; valaddr_reg:x3; val_offset:62241*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62241*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20748:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x515c22 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1c83e1 and fs3 == 1 and fe3 == 0xdb and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed15c22; op2val:0xc01c83e1;
op3val:0xedfc0000; valaddr_reg:x3; val_offset:62244*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62244*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20749:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x515c22 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1c83e1 and fs3 == 1 and fe3 == 0xdb and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed15c22; op2val:0xc01c83e1;
op3val:0xedfe0000; valaddr_reg:x3; val_offset:62247*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62247*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20750:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x515c22 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1c83e1 and fs3 == 1 and fe3 == 0xdb and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed15c22; op2val:0xc01c83e1;
op3val:0xedff0000; valaddr_reg:x3; val_offset:62250*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62250*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20751:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x515c22 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1c83e1 and fs3 == 1 and fe3 == 0xdb and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed15c22; op2val:0xc01c83e1;
op3val:0xedff8000; valaddr_reg:x3; val_offset:62253*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62253*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20752:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x515c22 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1c83e1 and fs3 == 1 and fe3 == 0xdb and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed15c22; op2val:0xc01c83e1;
op3val:0xedffc000; valaddr_reg:x3; val_offset:62256*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62256*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20753:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x515c22 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1c83e1 and fs3 == 1 and fe3 == 0xdb and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed15c22; op2val:0xc01c83e1;
op3val:0xedffe000; valaddr_reg:x3; val_offset:62259*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62259*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20754:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x515c22 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1c83e1 and fs3 == 1 and fe3 == 0xdb and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed15c22; op2val:0xc01c83e1;
op3val:0xedfff000; valaddr_reg:x3; val_offset:62262*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62262*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20755:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x515c22 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1c83e1 and fs3 == 1 and fe3 == 0xdb and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed15c22; op2val:0xc01c83e1;
op3val:0xedfff800; valaddr_reg:x3; val_offset:62265*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62265*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20756:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x515c22 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1c83e1 and fs3 == 1 and fe3 == 0xdb and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed15c22; op2val:0xc01c83e1;
op3val:0xedfffc00; valaddr_reg:x3; val_offset:62268*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62268*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20757:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x515c22 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1c83e1 and fs3 == 1 and fe3 == 0xdb and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed15c22; op2val:0xc01c83e1;
op3val:0xedfffe00; valaddr_reg:x3; val_offset:62271*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62271*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20758:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x515c22 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1c83e1 and fs3 == 1 and fe3 == 0xdb and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed15c22; op2val:0xc01c83e1;
op3val:0xedffff00; valaddr_reg:x3; val_offset:62274*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62274*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20759:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x515c22 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1c83e1 and fs3 == 1 and fe3 == 0xdb and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed15c22; op2val:0xc01c83e1;
op3val:0xedffff80; valaddr_reg:x3; val_offset:62277*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62277*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20760:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x515c22 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1c83e1 and fs3 == 1 and fe3 == 0xdb and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed15c22; op2val:0xc01c83e1;
op3val:0xedffffc0; valaddr_reg:x3; val_offset:62280*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62280*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20761:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x515c22 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1c83e1 and fs3 == 1 and fe3 == 0xdb and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed15c22; op2val:0xc01c83e1;
op3val:0xedffffe0; valaddr_reg:x3; val_offset:62283*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62283*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20762:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x515c22 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1c83e1 and fs3 == 1 and fe3 == 0xdb and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed15c22; op2val:0xc01c83e1;
op3val:0xedfffff0; valaddr_reg:x3; val_offset:62286*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62286*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20763:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x515c22 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1c83e1 and fs3 == 1 and fe3 == 0xdb and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed15c22; op2val:0xc01c83e1;
op3val:0xedfffff8; valaddr_reg:x3; val_offset:62289*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62289*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20764:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x515c22 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1c83e1 and fs3 == 1 and fe3 == 0xdb and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed15c22; op2val:0xc01c83e1;
op3val:0xedfffffc; valaddr_reg:x3; val_offset:62292*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62292*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20765:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x515c22 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1c83e1 and fs3 == 1 and fe3 == 0xdb and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed15c22; op2val:0xc01c83e1;
op3val:0xedfffffe; valaddr_reg:x3; val_offset:62295*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62295*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20766:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x515c22 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1c83e1 and fs3 == 1 and fe3 == 0xdb and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed15c22; op2val:0xc01c83e1;
op3val:0xedffffff; valaddr_reg:x3; val_offset:62298*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62298*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20767:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x515c22 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1c83e1 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed15c22; op2val:0xc01c83e1;
op3val:0xff000001; valaddr_reg:x3; val_offset:62301*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62301*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20768:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x515c22 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1c83e1 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed15c22; op2val:0xc01c83e1;
op3val:0xff000003; valaddr_reg:x3; val_offset:62304*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62304*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20769:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x515c22 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1c83e1 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed15c22; op2val:0xc01c83e1;
op3val:0xff000007; valaddr_reg:x3; val_offset:62307*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62307*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20770:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x515c22 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1c83e1 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed15c22; op2val:0xc01c83e1;
op3val:0xff199999; valaddr_reg:x3; val_offset:62310*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62310*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20771:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x515c22 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1c83e1 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed15c22; op2val:0xc01c83e1;
op3val:0xff249249; valaddr_reg:x3; val_offset:62313*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62313*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20772:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x515c22 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1c83e1 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed15c22; op2val:0xc01c83e1;
op3val:0xff333333; valaddr_reg:x3; val_offset:62316*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62316*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20773:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x515c22 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1c83e1 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed15c22; op2val:0xc01c83e1;
op3val:0xff36db6d; valaddr_reg:x3; val_offset:62319*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62319*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20774:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x515c22 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1c83e1 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed15c22; op2val:0xc01c83e1;
op3val:0xff3bbbbb; valaddr_reg:x3; val_offset:62322*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62322*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20775:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x515c22 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1c83e1 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed15c22; op2val:0xc01c83e1;
op3val:0xff444444; valaddr_reg:x3; val_offset:62325*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62325*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20776:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x515c22 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1c83e1 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed15c22; op2val:0xc01c83e1;
op3val:0xff4ccccc; valaddr_reg:x3; val_offset:62328*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62328*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20777:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x515c22 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1c83e1 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed15c22; op2val:0xc01c83e1;
op3val:0xff5b6db6; valaddr_reg:x3; val_offset:62331*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62331*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20778:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x515c22 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1c83e1 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed15c22; op2val:0xc01c83e1;
op3val:0xff666666; valaddr_reg:x3; val_offset:62334*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62334*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20779:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x515c22 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1c83e1 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed15c22; op2val:0xc01c83e1;
op3val:0xff6db6db; valaddr_reg:x3; val_offset:62337*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62337*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20780:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x515c22 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1c83e1 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed15c22; op2val:0xc01c83e1;
op3val:0xff7ffff8; valaddr_reg:x3; val_offset:62340*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62340*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20781:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x515c22 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1c83e1 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed15c22; op2val:0xc01c83e1;
op3val:0xff7ffffc; valaddr_reg:x3; val_offset:62343*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62343*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20782:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x515c22 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1c83e1 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed15c22; op2val:0xc01c83e1;
op3val:0xff7ffffe; valaddr_reg:x3; val_offset:62346*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62346*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20783:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5237a1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed237a1; op2val:0x80000000;
op3val:0x80000001; valaddr_reg:x3; val_offset:62349*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62349*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20784:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5237a1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed237a1; op2val:0x80000000;
op3val:0x80000003; valaddr_reg:x3; val_offset:62352*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62352*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20785:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5237a1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed237a1; op2val:0x80000000;
op3val:0x80000007; valaddr_reg:x3; val_offset:62355*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62355*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20786:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5237a1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed237a1; op2val:0x80000000;
op3val:0x80199999; valaddr_reg:x3; val_offset:62358*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62358*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20787:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5237a1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed237a1; op2val:0x80000000;
op3val:0x80249249; valaddr_reg:x3; val_offset:62361*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62361*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20788:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5237a1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed237a1; op2val:0x80000000;
op3val:0x80333333; valaddr_reg:x3; val_offset:62364*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62364*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20789:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5237a1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed237a1; op2val:0x80000000;
op3val:0x8036db6d; valaddr_reg:x3; val_offset:62367*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62367*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20790:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5237a1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed237a1; op2val:0x80000000;
op3val:0x803bbbbb; valaddr_reg:x3; val_offset:62370*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62370*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20791:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5237a1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed237a1; op2val:0x80000000;
op3val:0x80444444; valaddr_reg:x3; val_offset:62373*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62373*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20792:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5237a1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed237a1; op2val:0x80000000;
op3val:0x804ccccc; valaddr_reg:x3; val_offset:62376*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62376*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20793:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5237a1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed237a1; op2val:0x80000000;
op3val:0x805b6db6; valaddr_reg:x3; val_offset:62379*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62379*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20794:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5237a1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed237a1; op2val:0x80000000;
op3val:0x80666666; valaddr_reg:x3; val_offset:62382*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62382*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20795:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5237a1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed237a1; op2val:0x80000000;
op3val:0x806db6db; valaddr_reg:x3; val_offset:62385*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62385*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20796:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5237a1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed237a1; op2val:0x80000000;
op3val:0x807ffff8; valaddr_reg:x3; val_offset:62388*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62388*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20797:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5237a1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed237a1; op2val:0x80000000;
op3val:0x807ffffc; valaddr_reg:x3; val_offset:62391*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62391*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20798:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5237a1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed237a1; op2val:0x80000000;
op3val:0x807ffffe; valaddr_reg:x3; val_offset:62394*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62394*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20799:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5237a1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed237a1; op2val:0x80000000;
op3val:0x8a800000; valaddr_reg:x3; val_offset:62397*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62397*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20800:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5237a1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed237a1; op2val:0x80000000;
op3val:0x8a800001; valaddr_reg:x3; val_offset:62400*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62400*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20801:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5237a1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed237a1; op2val:0x80000000;
op3val:0x8a800003; valaddr_reg:x3; val_offset:62403*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62403*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20802:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5237a1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed237a1; op2val:0x80000000;
op3val:0x8a800007; valaddr_reg:x3; val_offset:62406*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62406*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20803:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5237a1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed237a1; op2val:0x80000000;
op3val:0x8a80000f; valaddr_reg:x3; val_offset:62409*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62409*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20804:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5237a1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed237a1; op2val:0x80000000;
op3val:0x8a80001f; valaddr_reg:x3; val_offset:62412*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62412*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20805:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5237a1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed237a1; op2val:0x80000000;
op3val:0x8a80003f; valaddr_reg:x3; val_offset:62415*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62415*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20806:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5237a1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed237a1; op2val:0x80000000;
op3val:0x8a80007f; valaddr_reg:x3; val_offset:62418*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62418*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20807:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5237a1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed237a1; op2val:0x80000000;
op3val:0x8a8000ff; valaddr_reg:x3; val_offset:62421*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62421*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20808:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5237a1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed237a1; op2val:0x80000000;
op3val:0x8a8001ff; valaddr_reg:x3; val_offset:62424*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62424*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20809:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5237a1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed237a1; op2val:0x80000000;
op3val:0x8a8003ff; valaddr_reg:x3; val_offset:62427*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62427*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20810:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5237a1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed237a1; op2val:0x80000000;
op3val:0x8a8007ff; valaddr_reg:x3; val_offset:62430*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62430*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20811:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5237a1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed237a1; op2val:0x80000000;
op3val:0x8a800fff; valaddr_reg:x3; val_offset:62433*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62433*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20812:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5237a1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed237a1; op2val:0x80000000;
op3val:0x8a801fff; valaddr_reg:x3; val_offset:62436*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62436*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20813:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5237a1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed237a1; op2val:0x80000000;
op3val:0x8a803fff; valaddr_reg:x3; val_offset:62439*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62439*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20814:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5237a1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed237a1; op2val:0x80000000;
op3val:0x8a807fff; valaddr_reg:x3; val_offset:62442*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62442*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20815:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5237a1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed237a1; op2val:0x80000000;
op3val:0x8a80ffff; valaddr_reg:x3; val_offset:62445*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62445*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20816:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5237a1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed237a1; op2val:0x80000000;
op3val:0x8a81ffff; valaddr_reg:x3; val_offset:62448*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62448*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20817:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5237a1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed237a1; op2val:0x80000000;
op3val:0x8a83ffff; valaddr_reg:x3; val_offset:62451*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62451*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20818:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5237a1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed237a1; op2val:0x80000000;
op3val:0x8a87ffff; valaddr_reg:x3; val_offset:62454*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62454*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20819:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5237a1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed237a1; op2val:0x80000000;
op3val:0x8a8fffff; valaddr_reg:x3; val_offset:62457*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62457*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20820:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5237a1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed237a1; op2val:0x80000000;
op3val:0x8a9fffff; valaddr_reg:x3; val_offset:62460*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62460*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20821:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5237a1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed237a1; op2val:0x80000000;
op3val:0x8abfffff; valaddr_reg:x3; val_offset:62463*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62463*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20822:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5237a1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed237a1; op2val:0x80000000;
op3val:0x8ac00000; valaddr_reg:x3; val_offset:62466*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62466*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20823:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5237a1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed237a1; op2val:0x80000000;
op3val:0x8ae00000; valaddr_reg:x3; val_offset:62469*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62469*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20824:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5237a1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed237a1; op2val:0x80000000;
op3val:0x8af00000; valaddr_reg:x3; val_offset:62472*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62472*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20825:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5237a1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed237a1; op2val:0x80000000;
op3val:0x8af80000; valaddr_reg:x3; val_offset:62475*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62475*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20826:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5237a1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed237a1; op2val:0x80000000;
op3val:0x8afc0000; valaddr_reg:x3; val_offset:62478*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62478*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20827:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5237a1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed237a1; op2val:0x80000000;
op3val:0x8afe0000; valaddr_reg:x3; val_offset:62481*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62481*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20828:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5237a1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed237a1; op2val:0x80000000;
op3val:0x8aff0000; valaddr_reg:x3; val_offset:62484*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62484*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20829:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5237a1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed237a1; op2val:0x80000000;
op3val:0x8aff8000; valaddr_reg:x3; val_offset:62487*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62487*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20830:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5237a1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed237a1; op2val:0x80000000;
op3val:0x8affc000; valaddr_reg:x3; val_offset:62490*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62490*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20831:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5237a1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed237a1; op2val:0x80000000;
op3val:0x8affe000; valaddr_reg:x3; val_offset:62493*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62493*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20832:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5237a1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed237a1; op2val:0x80000000;
op3val:0x8afff000; valaddr_reg:x3; val_offset:62496*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62496*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20833:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5237a1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed237a1; op2val:0x80000000;
op3val:0x8afff800; valaddr_reg:x3; val_offset:62499*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62499*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20834:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5237a1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed237a1; op2val:0x80000000;
op3val:0x8afffc00; valaddr_reg:x3; val_offset:62502*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62502*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20835:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5237a1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed237a1; op2val:0x80000000;
op3val:0x8afffe00; valaddr_reg:x3; val_offset:62505*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62505*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20836:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5237a1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed237a1; op2val:0x80000000;
op3val:0x8affff00; valaddr_reg:x3; val_offset:62508*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62508*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20837:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5237a1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed237a1; op2val:0x80000000;
op3val:0x8affff80; valaddr_reg:x3; val_offset:62511*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62511*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20838:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5237a1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed237a1; op2val:0x80000000;
op3val:0x8affffc0; valaddr_reg:x3; val_offset:62514*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62514*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20839:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5237a1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed237a1; op2val:0x80000000;
op3val:0x8affffe0; valaddr_reg:x3; val_offset:62517*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62517*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20840:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5237a1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed237a1; op2val:0x80000000;
op3val:0x8afffff0; valaddr_reg:x3; val_offset:62520*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62520*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20841:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5237a1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed237a1; op2val:0x80000000;
op3val:0x8afffff8; valaddr_reg:x3; val_offset:62523*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62523*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20842:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5237a1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed237a1; op2val:0x80000000;
op3val:0x8afffffc; valaddr_reg:x3; val_offset:62526*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62526*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20843:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5237a1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed237a1; op2val:0x80000000;
op3val:0x8afffffe; valaddr_reg:x3; val_offset:62529*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62529*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20844:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5237a1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed237a1; op2val:0x80000000;
op3val:0x8affffff; valaddr_reg:x3; val_offset:62532*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62532*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20845:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x529e32 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed29e32; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:62535*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62535*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20846:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x529e32 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed29e32; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:62538*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62538*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20847:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x529e32 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed29e32; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:62541*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62541*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20848:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x529e32 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed29e32; op2val:0x0;
op3val:0x199999; valaddr_reg:x3; val_offset:62544*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62544*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20849:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x529e32 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed29e32; op2val:0x0;
op3val:0x249249; valaddr_reg:x3; val_offset:62547*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62547*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20850:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x529e32 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed29e32; op2val:0x0;
op3val:0x333333; valaddr_reg:x3; val_offset:62550*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62550*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20851:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x529e32 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed29e32; op2val:0x0;
op3val:0x36db6d; valaddr_reg:x3; val_offset:62553*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62553*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20852:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x529e32 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed29e32; op2val:0x0;
op3val:0x3bbbbb; valaddr_reg:x3; val_offset:62556*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62556*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20853:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x529e32 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed29e32; op2val:0x0;
op3val:0x444444; valaddr_reg:x3; val_offset:62559*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62559*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20854:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x529e32 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed29e32; op2val:0x0;
op3val:0x4ccccc; valaddr_reg:x3; val_offset:62562*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62562*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20855:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x529e32 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed29e32; op2val:0x0;
op3val:0x5b6db6; valaddr_reg:x3; val_offset:62565*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62565*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20856:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x529e32 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed29e32; op2val:0x0;
op3val:0x666666; valaddr_reg:x3; val_offset:62568*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62568*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20857:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x529e32 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed29e32; op2val:0x0;
op3val:0x6db6db; valaddr_reg:x3; val_offset:62571*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62571*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20858:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x529e32 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed29e32; op2val:0x0;
op3val:0x7ffff8; valaddr_reg:x3; val_offset:62574*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62574*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20859:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x529e32 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed29e32; op2val:0x0;
op3val:0x7ffffc; valaddr_reg:x3; val_offset:62577*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62577*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20860:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x529e32 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed29e32; op2val:0x0;
op3val:0x7ffffe; valaddr_reg:x3; val_offset:62580*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62580*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20861:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x529e32 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed29e32; op2val:0x0;
op3val:0x1000000; valaddr_reg:x3; val_offset:62583*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62583*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20862:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x529e32 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed29e32; op2val:0x0;
op3val:0x1000001; valaddr_reg:x3; val_offset:62586*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62586*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20863:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x529e32 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed29e32; op2val:0x0;
op3val:0x1000003; valaddr_reg:x3; val_offset:62589*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62589*0 + 3*162*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2127649826,32,FLEN)
NAN_BOXED(3223094241,32,FLEN)
NAN_BOXED(3984621567,32,FLEN)
NAN_BOXED(2127649826,32,FLEN)
NAN_BOXED(3223094241,32,FLEN)
NAN_BOXED(3984654335,32,FLEN)
NAN_BOXED(2127649826,32,FLEN)
NAN_BOXED(3223094241,32,FLEN)
NAN_BOXED(3984719871,32,FLEN)
NAN_BOXED(2127649826,32,FLEN)
NAN_BOXED(3223094241,32,FLEN)
NAN_BOXED(3984850943,32,FLEN)
NAN_BOXED(2127649826,32,FLEN)
NAN_BOXED(3223094241,32,FLEN)
NAN_BOXED(3985113087,32,FLEN)
NAN_BOXED(2127649826,32,FLEN)
NAN_BOXED(3223094241,32,FLEN)
NAN_BOXED(3985637375,32,FLEN)
NAN_BOXED(2127649826,32,FLEN)
NAN_BOXED(3223094241,32,FLEN)
NAN_BOXED(3986685951,32,FLEN)
NAN_BOXED(2127649826,32,FLEN)
NAN_BOXED(3223094241,32,FLEN)
NAN_BOXED(3988783103,32,FLEN)
NAN_BOXED(2127649826,32,FLEN)
NAN_BOXED(3223094241,32,FLEN)
NAN_BOXED(3988783104,32,FLEN)
NAN_BOXED(2127649826,32,FLEN)
NAN_BOXED(3223094241,32,FLEN)
NAN_BOXED(3990880256,32,FLEN)
NAN_BOXED(2127649826,32,FLEN)
NAN_BOXED(3223094241,32,FLEN)
NAN_BOXED(3991928832,32,FLEN)
NAN_BOXED(2127649826,32,FLEN)
NAN_BOXED(3223094241,32,FLEN)
NAN_BOXED(3992453120,32,FLEN)
NAN_BOXED(2127649826,32,FLEN)
NAN_BOXED(3223094241,32,FLEN)
NAN_BOXED(3992715264,32,FLEN)
NAN_BOXED(2127649826,32,FLEN)
NAN_BOXED(3223094241,32,FLEN)
NAN_BOXED(3992846336,32,FLEN)
NAN_BOXED(2127649826,32,FLEN)
NAN_BOXED(3223094241,32,FLEN)
NAN_BOXED(3992911872,32,FLEN)
NAN_BOXED(2127649826,32,FLEN)
NAN_BOXED(3223094241,32,FLEN)
NAN_BOXED(3992944640,32,FLEN)
NAN_BOXED(2127649826,32,FLEN)
NAN_BOXED(3223094241,32,FLEN)
NAN_BOXED(3992961024,32,FLEN)
NAN_BOXED(2127649826,32,FLEN)
NAN_BOXED(3223094241,32,FLEN)
NAN_BOXED(3992969216,32,FLEN)
NAN_BOXED(2127649826,32,FLEN)
NAN_BOXED(3223094241,32,FLEN)
NAN_BOXED(3992973312,32,FLEN)
NAN_BOXED(2127649826,32,FLEN)
NAN_BOXED(3223094241,32,FLEN)
NAN_BOXED(3992975360,32,FLEN)
NAN_BOXED(2127649826,32,FLEN)
NAN_BOXED(3223094241,32,FLEN)
NAN_BOXED(3992976384,32,FLEN)
NAN_BOXED(2127649826,32,FLEN)
NAN_BOXED(3223094241,32,FLEN)
NAN_BOXED(3992976896,32,FLEN)
NAN_BOXED(2127649826,32,FLEN)
NAN_BOXED(3223094241,32,FLEN)
NAN_BOXED(3992977152,32,FLEN)
NAN_BOXED(2127649826,32,FLEN)
NAN_BOXED(3223094241,32,FLEN)
NAN_BOXED(3992977280,32,FLEN)
NAN_BOXED(2127649826,32,FLEN)
NAN_BOXED(3223094241,32,FLEN)
NAN_BOXED(3992977344,32,FLEN)
NAN_BOXED(2127649826,32,FLEN)
NAN_BOXED(3223094241,32,FLEN)
NAN_BOXED(3992977376,32,FLEN)
NAN_BOXED(2127649826,32,FLEN)
NAN_BOXED(3223094241,32,FLEN)
NAN_BOXED(3992977392,32,FLEN)
NAN_BOXED(2127649826,32,FLEN)
NAN_BOXED(3223094241,32,FLEN)
NAN_BOXED(3992977400,32,FLEN)
NAN_BOXED(2127649826,32,FLEN)
NAN_BOXED(3223094241,32,FLEN)
NAN_BOXED(3992977404,32,FLEN)
NAN_BOXED(2127649826,32,FLEN)
NAN_BOXED(3223094241,32,FLEN)
NAN_BOXED(3992977406,32,FLEN)
NAN_BOXED(2127649826,32,FLEN)
NAN_BOXED(3223094241,32,FLEN)
NAN_BOXED(3992977407,32,FLEN)
NAN_BOXED(2127649826,32,FLEN)
NAN_BOXED(3223094241,32,FLEN)
NAN_BOXED(4278190081,32,FLEN)
NAN_BOXED(2127649826,32,FLEN)
NAN_BOXED(3223094241,32,FLEN)
NAN_BOXED(4278190083,32,FLEN)
NAN_BOXED(2127649826,32,FLEN)
NAN_BOXED(3223094241,32,FLEN)
NAN_BOXED(4278190087,32,FLEN)
NAN_BOXED(2127649826,32,FLEN)
NAN_BOXED(3223094241,32,FLEN)
NAN_BOXED(4279867801,32,FLEN)
NAN_BOXED(2127649826,32,FLEN)
NAN_BOXED(3223094241,32,FLEN)
NAN_BOXED(4280586825,32,FLEN)
NAN_BOXED(2127649826,32,FLEN)
NAN_BOXED(3223094241,32,FLEN)
NAN_BOXED(4281545523,32,FLEN)
NAN_BOXED(2127649826,32,FLEN)
NAN_BOXED(3223094241,32,FLEN)
NAN_BOXED(4281785197,32,FLEN)
NAN_BOXED(2127649826,32,FLEN)
NAN_BOXED(3223094241,32,FLEN)
NAN_BOXED(4282104763,32,FLEN)
NAN_BOXED(2127649826,32,FLEN)
NAN_BOXED(3223094241,32,FLEN)
NAN_BOXED(4282664004,32,FLEN)
NAN_BOXED(2127649826,32,FLEN)
NAN_BOXED(3223094241,32,FLEN)
NAN_BOXED(4283223244,32,FLEN)
NAN_BOXED(2127649826,32,FLEN)
NAN_BOXED(3223094241,32,FLEN)
NAN_BOXED(4284181942,32,FLEN)
NAN_BOXED(2127649826,32,FLEN)
NAN_BOXED(3223094241,32,FLEN)
NAN_BOXED(4284900966,32,FLEN)
NAN_BOXED(2127649826,32,FLEN)
NAN_BOXED(3223094241,32,FLEN)
NAN_BOXED(4285380315,32,FLEN)
NAN_BOXED(2127649826,32,FLEN)
NAN_BOXED(3223094241,32,FLEN)
NAN_BOXED(4286578680,32,FLEN)
NAN_BOXED(2127649826,32,FLEN)
NAN_BOXED(3223094241,32,FLEN)
NAN_BOXED(4286578684,32,FLEN)
NAN_BOXED(2127649826,32,FLEN)
NAN_BOXED(3223094241,32,FLEN)
NAN_BOXED(4286578686,32,FLEN)
NAN_BOXED(2127706017,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2127706017,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483651,32,FLEN)
NAN_BOXED(2127706017,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483655,32,FLEN)
NAN_BOXED(2127706017,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149161369,32,FLEN)
NAN_BOXED(2127706017,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149880393,32,FLEN)
NAN_BOXED(2127706017,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2150839091,32,FLEN)
NAN_BOXED(2127706017,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151078765,32,FLEN)
NAN_BOXED(2127706017,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151398331,32,FLEN)
NAN_BOXED(2127706017,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151957572,32,FLEN)
NAN_BOXED(2127706017,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2152516812,32,FLEN)
NAN_BOXED(2127706017,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2153475510,32,FLEN)
NAN_BOXED(2127706017,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154194534,32,FLEN)
NAN_BOXED(2127706017,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154673883,32,FLEN)
NAN_BOXED(2127706017,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872248,32,FLEN)
NAN_BOXED(2127706017,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872252,32,FLEN)
NAN_BOXED(2127706017,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2127706017,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323644416,32,FLEN)
NAN_BOXED(2127706017,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323644417,32,FLEN)
NAN_BOXED(2127706017,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323644419,32,FLEN)
NAN_BOXED(2127706017,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323644423,32,FLEN)
NAN_BOXED(2127706017,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323644431,32,FLEN)
NAN_BOXED(2127706017,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323644447,32,FLEN)
NAN_BOXED(2127706017,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323644479,32,FLEN)
NAN_BOXED(2127706017,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323644543,32,FLEN)
NAN_BOXED(2127706017,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323644671,32,FLEN)
NAN_BOXED(2127706017,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323644927,32,FLEN)
NAN_BOXED(2127706017,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323645439,32,FLEN)
NAN_BOXED(2127706017,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323646463,32,FLEN)
NAN_BOXED(2127706017,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323648511,32,FLEN)
NAN_BOXED(2127706017,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323652607,32,FLEN)
NAN_BOXED(2127706017,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323660799,32,FLEN)
NAN_BOXED(2127706017,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323677183,32,FLEN)
NAN_BOXED(2127706017,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323709951,32,FLEN)
NAN_BOXED(2127706017,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323775487,32,FLEN)
NAN_BOXED(2127706017,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323906559,32,FLEN)
NAN_BOXED(2127706017,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2324168703,32,FLEN)
NAN_BOXED(2127706017,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2324692991,32,FLEN)
NAN_BOXED(2127706017,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2325741567,32,FLEN)
NAN_BOXED(2127706017,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2327838719,32,FLEN)
NAN_BOXED(2127706017,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2327838720,32,FLEN)
NAN_BOXED(2127706017,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2329935872,32,FLEN)
NAN_BOXED(2127706017,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2330984448,32,FLEN)
NAN_BOXED(2127706017,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2331508736,32,FLEN)
NAN_BOXED(2127706017,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2331770880,32,FLEN)
NAN_BOXED(2127706017,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2331901952,32,FLEN)
NAN_BOXED(2127706017,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2331967488,32,FLEN)
NAN_BOXED(2127706017,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332000256,32,FLEN)
NAN_BOXED(2127706017,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332016640,32,FLEN)
NAN_BOXED(2127706017,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332024832,32,FLEN)
NAN_BOXED(2127706017,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332028928,32,FLEN)
NAN_BOXED(2127706017,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332030976,32,FLEN)
NAN_BOXED(2127706017,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332032000,32,FLEN)
NAN_BOXED(2127706017,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332032512,32,FLEN)
NAN_BOXED(2127706017,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332032768,32,FLEN)
NAN_BOXED(2127706017,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332032896,32,FLEN)
NAN_BOXED(2127706017,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332032960,32,FLEN)
NAN_BOXED(2127706017,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332032992,32,FLEN)
NAN_BOXED(2127706017,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332033008,32,FLEN)
NAN_BOXED(2127706017,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332033016,32,FLEN)
NAN_BOXED(2127706017,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332033020,32,FLEN)
NAN_BOXED(2127706017,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332033022,32,FLEN)
NAN_BOXED(2127706017,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332033023,32,FLEN)
NAN_BOXED(2127732274,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2127732274,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3,32,FLEN)
NAN_BOXED(2127732274,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7,32,FLEN)
NAN_BOXED(2127732274,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1677721,32,FLEN)
NAN_BOXED(2127732274,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2396745,32,FLEN)
NAN_BOXED(2127732274,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3355443,32,FLEN)
NAN_BOXED(2127732274,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3595117,32,FLEN)
NAN_BOXED(2127732274,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3914683,32,FLEN)
NAN_BOXED(2127732274,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4473924,32,FLEN)
NAN_BOXED(2127732274,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5033164,32,FLEN)
NAN_BOXED(2127732274,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5991862,32,FLEN)
NAN_BOXED(2127732274,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(6710886,32,FLEN)
NAN_BOXED(2127732274,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7190235,32,FLEN)
NAN_BOXED(2127732274,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388600,32,FLEN)
NAN_BOXED(2127732274,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388604,32,FLEN)
NAN_BOXED(2127732274,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388606,32,FLEN)
NAN_BOXED(2127732274,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777216,32,FLEN)
NAN_BOXED(2127732274,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777217,32,FLEN)
NAN_BOXED(2127732274,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777219,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
