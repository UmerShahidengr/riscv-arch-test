
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:17:59 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_20864:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x529e32 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed29e32; op2val:0x0;
op3val:0x1000007; valaddr_reg:x3; val_offset:62592*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62592*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20865:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x529e32 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed29e32; op2val:0x0;
op3val:0x100000f; valaddr_reg:x3; val_offset:62595*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62595*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20866:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x529e32 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed29e32; op2val:0x0;
op3val:0x100001f; valaddr_reg:x3; val_offset:62598*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62598*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20867:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x529e32 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed29e32; op2val:0x0;
op3val:0x100003f; valaddr_reg:x3; val_offset:62601*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62601*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20868:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x529e32 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed29e32; op2val:0x0;
op3val:0x100007f; valaddr_reg:x3; val_offset:62604*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62604*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20869:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x529e32 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed29e32; op2val:0x0;
op3val:0x10000ff; valaddr_reg:x3; val_offset:62607*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62607*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20870:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x529e32 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed29e32; op2val:0x0;
op3val:0x10001ff; valaddr_reg:x3; val_offset:62610*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62610*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20871:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x529e32 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed29e32; op2val:0x0;
op3val:0x10003ff; valaddr_reg:x3; val_offset:62613*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62613*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20872:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x529e32 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed29e32; op2val:0x0;
op3val:0x10007ff; valaddr_reg:x3; val_offset:62616*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62616*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20873:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x529e32 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed29e32; op2val:0x0;
op3val:0x1000fff; valaddr_reg:x3; val_offset:62619*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62619*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20874:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x529e32 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed29e32; op2val:0x0;
op3val:0x1001fff; valaddr_reg:x3; val_offset:62622*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62622*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20875:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x529e32 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed29e32; op2val:0x0;
op3val:0x1003fff; valaddr_reg:x3; val_offset:62625*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62625*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20876:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x529e32 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed29e32; op2val:0x0;
op3val:0x1007fff; valaddr_reg:x3; val_offset:62628*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62628*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20877:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x529e32 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed29e32; op2val:0x0;
op3val:0x100ffff; valaddr_reg:x3; val_offset:62631*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62631*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20878:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x529e32 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed29e32; op2val:0x0;
op3val:0x101ffff; valaddr_reg:x3; val_offset:62634*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62634*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20879:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x529e32 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed29e32; op2val:0x0;
op3val:0x103ffff; valaddr_reg:x3; val_offset:62637*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62637*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20880:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x529e32 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed29e32; op2val:0x0;
op3val:0x107ffff; valaddr_reg:x3; val_offset:62640*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62640*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20881:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x529e32 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed29e32; op2val:0x0;
op3val:0x10fffff; valaddr_reg:x3; val_offset:62643*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62643*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20882:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x529e32 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed29e32; op2val:0x0;
op3val:0x11fffff; valaddr_reg:x3; val_offset:62646*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62646*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20883:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x529e32 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed29e32; op2val:0x0;
op3val:0x13fffff; valaddr_reg:x3; val_offset:62649*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62649*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20884:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x529e32 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed29e32; op2val:0x0;
op3val:0x1400000; valaddr_reg:x3; val_offset:62652*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62652*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20885:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x529e32 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed29e32; op2val:0x0;
op3val:0x1600000; valaddr_reg:x3; val_offset:62655*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62655*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20886:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x529e32 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed29e32; op2val:0x0;
op3val:0x1700000; valaddr_reg:x3; val_offset:62658*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62658*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20887:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x529e32 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed29e32; op2val:0x0;
op3val:0x1780000; valaddr_reg:x3; val_offset:62661*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62661*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20888:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x529e32 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed29e32; op2val:0x0;
op3val:0x17c0000; valaddr_reg:x3; val_offset:62664*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62664*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20889:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x529e32 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed29e32; op2val:0x0;
op3val:0x17e0000; valaddr_reg:x3; val_offset:62667*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62667*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20890:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x529e32 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed29e32; op2val:0x0;
op3val:0x17f0000; valaddr_reg:x3; val_offset:62670*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62670*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20891:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x529e32 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed29e32; op2val:0x0;
op3val:0x17f8000; valaddr_reg:x3; val_offset:62673*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62673*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20892:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x529e32 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed29e32; op2val:0x0;
op3val:0x17fc000; valaddr_reg:x3; val_offset:62676*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62676*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20893:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x529e32 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed29e32; op2val:0x0;
op3val:0x17fe000; valaddr_reg:x3; val_offset:62679*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62679*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20894:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x529e32 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed29e32; op2val:0x0;
op3val:0x17ff000; valaddr_reg:x3; val_offset:62682*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62682*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20895:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x529e32 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed29e32; op2val:0x0;
op3val:0x17ff800; valaddr_reg:x3; val_offset:62685*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62685*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20896:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x529e32 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed29e32; op2val:0x0;
op3val:0x17ffc00; valaddr_reg:x3; val_offset:62688*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62688*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20897:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x529e32 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed29e32; op2val:0x0;
op3val:0x17ffe00; valaddr_reg:x3; val_offset:62691*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62691*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20898:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x529e32 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed29e32; op2val:0x0;
op3val:0x17fff00; valaddr_reg:x3; val_offset:62694*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62694*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20899:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x529e32 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed29e32; op2val:0x0;
op3val:0x17fff80; valaddr_reg:x3; val_offset:62697*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62697*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20900:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x529e32 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed29e32; op2val:0x0;
op3val:0x17fffc0; valaddr_reg:x3; val_offset:62700*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62700*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20901:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x529e32 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed29e32; op2val:0x0;
op3val:0x17fffe0; valaddr_reg:x3; val_offset:62703*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62703*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20902:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x529e32 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed29e32; op2val:0x0;
op3val:0x17ffff0; valaddr_reg:x3; val_offset:62706*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62706*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20903:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x529e32 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed29e32; op2val:0x0;
op3val:0x17ffff8; valaddr_reg:x3; val_offset:62709*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62709*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20904:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x529e32 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed29e32; op2val:0x0;
op3val:0x17ffffc; valaddr_reg:x3; val_offset:62712*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62712*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20905:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x529e32 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed29e32; op2val:0x0;
op3val:0x17ffffe; valaddr_reg:x3; val_offset:62715*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62715*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20906:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x529e32 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed29e32; op2val:0x0;
op3val:0x17fffff; valaddr_reg:x3; val_offset:62718*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62718*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20907:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52a5d7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4dc773 and fs3 == 1 and fe3 == 0x65 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed2a5d7; op2val:0x804dc773;
op3val:0xb2800000; valaddr_reg:x3; val_offset:62721*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62721*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20908:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52a5d7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4dc773 and fs3 == 1 and fe3 == 0x65 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed2a5d7; op2val:0x804dc773;
op3val:0xb2800001; valaddr_reg:x3; val_offset:62724*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62724*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20909:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52a5d7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4dc773 and fs3 == 1 and fe3 == 0x65 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed2a5d7; op2val:0x804dc773;
op3val:0xb2800003; valaddr_reg:x3; val_offset:62727*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62727*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20910:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52a5d7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4dc773 and fs3 == 1 and fe3 == 0x65 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed2a5d7; op2val:0x804dc773;
op3val:0xb2800007; valaddr_reg:x3; val_offset:62730*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62730*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20911:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52a5d7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4dc773 and fs3 == 1 and fe3 == 0x65 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed2a5d7; op2val:0x804dc773;
op3val:0xb280000f; valaddr_reg:x3; val_offset:62733*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62733*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20912:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52a5d7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4dc773 and fs3 == 1 and fe3 == 0x65 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed2a5d7; op2val:0x804dc773;
op3val:0xb280001f; valaddr_reg:x3; val_offset:62736*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62736*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20913:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52a5d7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4dc773 and fs3 == 1 and fe3 == 0x65 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed2a5d7; op2val:0x804dc773;
op3val:0xb280003f; valaddr_reg:x3; val_offset:62739*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62739*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20914:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52a5d7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4dc773 and fs3 == 1 and fe3 == 0x65 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed2a5d7; op2val:0x804dc773;
op3val:0xb280007f; valaddr_reg:x3; val_offset:62742*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62742*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20915:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52a5d7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4dc773 and fs3 == 1 and fe3 == 0x65 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed2a5d7; op2val:0x804dc773;
op3val:0xb28000ff; valaddr_reg:x3; val_offset:62745*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62745*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20916:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52a5d7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4dc773 and fs3 == 1 and fe3 == 0x65 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed2a5d7; op2val:0x804dc773;
op3val:0xb28001ff; valaddr_reg:x3; val_offset:62748*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62748*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20917:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52a5d7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4dc773 and fs3 == 1 and fe3 == 0x65 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed2a5d7; op2val:0x804dc773;
op3val:0xb28003ff; valaddr_reg:x3; val_offset:62751*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62751*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20918:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52a5d7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4dc773 and fs3 == 1 and fe3 == 0x65 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed2a5d7; op2val:0x804dc773;
op3val:0xb28007ff; valaddr_reg:x3; val_offset:62754*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62754*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20919:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52a5d7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4dc773 and fs3 == 1 and fe3 == 0x65 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed2a5d7; op2val:0x804dc773;
op3val:0xb2800fff; valaddr_reg:x3; val_offset:62757*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62757*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20920:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52a5d7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4dc773 and fs3 == 1 and fe3 == 0x65 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed2a5d7; op2val:0x804dc773;
op3val:0xb2801fff; valaddr_reg:x3; val_offset:62760*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62760*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20921:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52a5d7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4dc773 and fs3 == 1 and fe3 == 0x65 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed2a5d7; op2val:0x804dc773;
op3val:0xb2803fff; valaddr_reg:x3; val_offset:62763*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62763*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20922:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52a5d7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4dc773 and fs3 == 1 and fe3 == 0x65 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed2a5d7; op2val:0x804dc773;
op3val:0xb2807fff; valaddr_reg:x3; val_offset:62766*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62766*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20923:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52a5d7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4dc773 and fs3 == 1 and fe3 == 0x65 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed2a5d7; op2val:0x804dc773;
op3val:0xb280ffff; valaddr_reg:x3; val_offset:62769*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62769*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20924:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52a5d7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4dc773 and fs3 == 1 and fe3 == 0x65 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed2a5d7; op2val:0x804dc773;
op3val:0xb281ffff; valaddr_reg:x3; val_offset:62772*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62772*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20925:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52a5d7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4dc773 and fs3 == 1 and fe3 == 0x65 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed2a5d7; op2val:0x804dc773;
op3val:0xb283ffff; valaddr_reg:x3; val_offset:62775*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62775*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20926:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52a5d7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4dc773 and fs3 == 1 and fe3 == 0x65 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed2a5d7; op2val:0x804dc773;
op3val:0xb287ffff; valaddr_reg:x3; val_offset:62778*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62778*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20927:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52a5d7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4dc773 and fs3 == 1 and fe3 == 0x65 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed2a5d7; op2val:0x804dc773;
op3val:0xb28fffff; valaddr_reg:x3; val_offset:62781*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62781*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20928:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52a5d7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4dc773 and fs3 == 1 and fe3 == 0x65 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed2a5d7; op2val:0x804dc773;
op3val:0xb29fffff; valaddr_reg:x3; val_offset:62784*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62784*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20929:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52a5d7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4dc773 and fs3 == 1 and fe3 == 0x65 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed2a5d7; op2val:0x804dc773;
op3val:0xb2bfffff; valaddr_reg:x3; val_offset:62787*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62787*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20930:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52a5d7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4dc773 and fs3 == 1 and fe3 == 0x65 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed2a5d7; op2val:0x804dc773;
op3val:0xb2c00000; valaddr_reg:x3; val_offset:62790*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62790*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20931:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52a5d7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4dc773 and fs3 == 1 and fe3 == 0x65 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed2a5d7; op2val:0x804dc773;
op3val:0xb2e00000; valaddr_reg:x3; val_offset:62793*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62793*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20932:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52a5d7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4dc773 and fs3 == 1 and fe3 == 0x65 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed2a5d7; op2val:0x804dc773;
op3val:0xb2f00000; valaddr_reg:x3; val_offset:62796*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62796*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20933:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52a5d7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4dc773 and fs3 == 1 and fe3 == 0x65 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed2a5d7; op2val:0x804dc773;
op3val:0xb2f80000; valaddr_reg:x3; val_offset:62799*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62799*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20934:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52a5d7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4dc773 and fs3 == 1 and fe3 == 0x65 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed2a5d7; op2val:0x804dc773;
op3val:0xb2fc0000; valaddr_reg:x3; val_offset:62802*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62802*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20935:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52a5d7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4dc773 and fs3 == 1 and fe3 == 0x65 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed2a5d7; op2val:0x804dc773;
op3val:0xb2fe0000; valaddr_reg:x3; val_offset:62805*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62805*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20936:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52a5d7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4dc773 and fs3 == 1 and fe3 == 0x65 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed2a5d7; op2val:0x804dc773;
op3val:0xb2ff0000; valaddr_reg:x3; val_offset:62808*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62808*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20937:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52a5d7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4dc773 and fs3 == 1 and fe3 == 0x65 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed2a5d7; op2val:0x804dc773;
op3val:0xb2ff8000; valaddr_reg:x3; val_offset:62811*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62811*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20938:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52a5d7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4dc773 and fs3 == 1 and fe3 == 0x65 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed2a5d7; op2val:0x804dc773;
op3val:0xb2ffc000; valaddr_reg:x3; val_offset:62814*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62814*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20939:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52a5d7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4dc773 and fs3 == 1 and fe3 == 0x65 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed2a5d7; op2val:0x804dc773;
op3val:0xb2ffe000; valaddr_reg:x3; val_offset:62817*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62817*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20940:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52a5d7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4dc773 and fs3 == 1 and fe3 == 0x65 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed2a5d7; op2val:0x804dc773;
op3val:0xb2fff000; valaddr_reg:x3; val_offset:62820*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62820*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20941:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52a5d7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4dc773 and fs3 == 1 and fe3 == 0x65 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed2a5d7; op2val:0x804dc773;
op3val:0xb2fff800; valaddr_reg:x3; val_offset:62823*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62823*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20942:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52a5d7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4dc773 and fs3 == 1 and fe3 == 0x65 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed2a5d7; op2val:0x804dc773;
op3val:0xb2fffc00; valaddr_reg:x3; val_offset:62826*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62826*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20943:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52a5d7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4dc773 and fs3 == 1 and fe3 == 0x65 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed2a5d7; op2val:0x804dc773;
op3val:0xb2fffe00; valaddr_reg:x3; val_offset:62829*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62829*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20944:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52a5d7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4dc773 and fs3 == 1 and fe3 == 0x65 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed2a5d7; op2val:0x804dc773;
op3val:0xb2ffff00; valaddr_reg:x3; val_offset:62832*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62832*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20945:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52a5d7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4dc773 and fs3 == 1 and fe3 == 0x65 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed2a5d7; op2val:0x804dc773;
op3val:0xb2ffff80; valaddr_reg:x3; val_offset:62835*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62835*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20946:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52a5d7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4dc773 and fs3 == 1 and fe3 == 0x65 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed2a5d7; op2val:0x804dc773;
op3val:0xb2ffffc0; valaddr_reg:x3; val_offset:62838*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62838*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20947:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52a5d7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4dc773 and fs3 == 1 and fe3 == 0x65 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed2a5d7; op2val:0x804dc773;
op3val:0xb2ffffe0; valaddr_reg:x3; val_offset:62841*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62841*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20948:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52a5d7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4dc773 and fs3 == 1 and fe3 == 0x65 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed2a5d7; op2val:0x804dc773;
op3val:0xb2fffff0; valaddr_reg:x3; val_offset:62844*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62844*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20949:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52a5d7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4dc773 and fs3 == 1 and fe3 == 0x65 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed2a5d7; op2val:0x804dc773;
op3val:0xb2fffff8; valaddr_reg:x3; val_offset:62847*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62847*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20950:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52a5d7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4dc773 and fs3 == 1 and fe3 == 0x65 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed2a5d7; op2val:0x804dc773;
op3val:0xb2fffffc; valaddr_reg:x3; val_offset:62850*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62850*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20951:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52a5d7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4dc773 and fs3 == 1 and fe3 == 0x65 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed2a5d7; op2val:0x804dc773;
op3val:0xb2fffffe; valaddr_reg:x3; val_offset:62853*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62853*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20952:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52a5d7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4dc773 and fs3 == 1 and fe3 == 0x65 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed2a5d7; op2val:0x804dc773;
op3val:0xb2ffffff; valaddr_reg:x3; val_offset:62856*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62856*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20953:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52a5d7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4dc773 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed2a5d7; op2val:0x804dc773;
op3val:0xbf800001; valaddr_reg:x3; val_offset:62859*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62859*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20954:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52a5d7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4dc773 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed2a5d7; op2val:0x804dc773;
op3val:0xbf800003; valaddr_reg:x3; val_offset:62862*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62862*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20955:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52a5d7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4dc773 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed2a5d7; op2val:0x804dc773;
op3val:0xbf800007; valaddr_reg:x3; val_offset:62865*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62865*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20956:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52a5d7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4dc773 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed2a5d7; op2val:0x804dc773;
op3val:0xbf999999; valaddr_reg:x3; val_offset:62868*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62868*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20957:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52a5d7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4dc773 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed2a5d7; op2val:0x804dc773;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:62871*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62871*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20958:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52a5d7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4dc773 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed2a5d7; op2val:0x804dc773;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:62874*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62874*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20959:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52a5d7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4dc773 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed2a5d7; op2val:0x804dc773;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:62877*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62877*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20960:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52a5d7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4dc773 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed2a5d7; op2val:0x804dc773;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:62880*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62880*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20961:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52a5d7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4dc773 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed2a5d7; op2val:0x804dc773;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:62883*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62883*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20962:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52a5d7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4dc773 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed2a5d7; op2val:0x804dc773;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:62886*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62886*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20963:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52a5d7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4dc773 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed2a5d7; op2val:0x804dc773;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:62889*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62889*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20964:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52a5d7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4dc773 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed2a5d7; op2val:0x804dc773;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:62892*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62892*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20965:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52a5d7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4dc773 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed2a5d7; op2val:0x804dc773;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:62895*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62895*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20966:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52a5d7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4dc773 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed2a5d7; op2val:0x804dc773;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:62898*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62898*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20967:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52a5d7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4dc773 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed2a5d7; op2val:0x804dc773;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:62901*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62901*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20968:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52a5d7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4dc773 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed2a5d7; op2val:0x804dc773;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:62904*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62904*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20969:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52df06 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed2df06; op2val:0x0;
op3val:0x800001; valaddr_reg:x3; val_offset:62907*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62907*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20970:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52df06 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed2df06; op2val:0x0;
op3val:0x800003; valaddr_reg:x3; val_offset:62910*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62910*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20971:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52df06 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed2df06; op2val:0x0;
op3val:0x800007; valaddr_reg:x3; val_offset:62913*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62913*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20972:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52df06 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed2df06; op2val:0x0;
op3val:0x999999; valaddr_reg:x3; val_offset:62916*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62916*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20973:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52df06 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed2df06; op2val:0x0;
op3val:0xa49249; valaddr_reg:x3; val_offset:62919*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62919*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20974:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52df06 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed2df06; op2val:0x0;
op3val:0xb33333; valaddr_reg:x3; val_offset:62922*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62922*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20975:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52df06 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed2df06; op2val:0x0;
op3val:0xb6db6d; valaddr_reg:x3; val_offset:62925*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62925*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20976:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52df06 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed2df06; op2val:0x0;
op3val:0xbbbbbb; valaddr_reg:x3; val_offset:62928*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62928*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20977:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52df06 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed2df06; op2val:0x0;
op3val:0xc44444; valaddr_reg:x3; val_offset:62931*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62931*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20978:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52df06 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed2df06; op2val:0x0;
op3val:0xcccccc; valaddr_reg:x3; val_offset:62934*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62934*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20979:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52df06 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed2df06; op2val:0x0;
op3val:0xdb6db6; valaddr_reg:x3; val_offset:62937*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62937*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20980:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52df06 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed2df06; op2val:0x0;
op3val:0xe66666; valaddr_reg:x3; val_offset:62940*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62940*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20981:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52df06 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed2df06; op2val:0x0;
op3val:0xedb6db; valaddr_reg:x3; val_offset:62943*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62943*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20982:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52df06 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed2df06; op2val:0x0;
op3val:0xfffff8; valaddr_reg:x3; val_offset:62946*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62946*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20983:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52df06 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed2df06; op2val:0x0;
op3val:0xfffffc; valaddr_reg:x3; val_offset:62949*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62949*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20984:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52df06 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed2df06; op2val:0x0;
op3val:0xfffffe; valaddr_reg:x3; val_offset:62952*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62952*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20985:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52df06 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed2df06; op2val:0x0;
op3val:0x9000000; valaddr_reg:x3; val_offset:62955*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62955*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20986:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52df06 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed2df06; op2val:0x0;
op3val:0x9000001; valaddr_reg:x3; val_offset:62958*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62958*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20987:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52df06 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed2df06; op2val:0x0;
op3val:0x9000003; valaddr_reg:x3; val_offset:62961*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62961*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20988:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52df06 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed2df06; op2val:0x0;
op3val:0x9000007; valaddr_reg:x3; val_offset:62964*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62964*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20989:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52df06 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed2df06; op2val:0x0;
op3val:0x900000f; valaddr_reg:x3; val_offset:62967*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62967*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20990:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52df06 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed2df06; op2val:0x0;
op3val:0x900001f; valaddr_reg:x3; val_offset:62970*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62970*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20991:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52df06 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed2df06; op2val:0x0;
op3val:0x900003f; valaddr_reg:x3; val_offset:62973*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62973*0 + 3*163*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2127732274,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777223,32,FLEN)
NAN_BOXED(2127732274,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777231,32,FLEN)
NAN_BOXED(2127732274,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777247,32,FLEN)
NAN_BOXED(2127732274,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777279,32,FLEN)
NAN_BOXED(2127732274,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777343,32,FLEN)
NAN_BOXED(2127732274,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777471,32,FLEN)
NAN_BOXED(2127732274,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777727,32,FLEN)
NAN_BOXED(2127732274,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16778239,32,FLEN)
NAN_BOXED(2127732274,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16779263,32,FLEN)
NAN_BOXED(2127732274,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16781311,32,FLEN)
NAN_BOXED(2127732274,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16785407,32,FLEN)
NAN_BOXED(2127732274,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16793599,32,FLEN)
NAN_BOXED(2127732274,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16809983,32,FLEN)
NAN_BOXED(2127732274,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16842751,32,FLEN)
NAN_BOXED(2127732274,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16908287,32,FLEN)
NAN_BOXED(2127732274,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(17039359,32,FLEN)
NAN_BOXED(2127732274,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(17301503,32,FLEN)
NAN_BOXED(2127732274,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(17825791,32,FLEN)
NAN_BOXED(2127732274,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(18874367,32,FLEN)
NAN_BOXED(2127732274,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(20971519,32,FLEN)
NAN_BOXED(2127732274,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(20971520,32,FLEN)
NAN_BOXED(2127732274,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(23068672,32,FLEN)
NAN_BOXED(2127732274,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(24117248,32,FLEN)
NAN_BOXED(2127732274,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(24641536,32,FLEN)
NAN_BOXED(2127732274,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(24903680,32,FLEN)
NAN_BOXED(2127732274,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25034752,32,FLEN)
NAN_BOXED(2127732274,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25100288,32,FLEN)
NAN_BOXED(2127732274,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25133056,32,FLEN)
NAN_BOXED(2127732274,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25149440,32,FLEN)
NAN_BOXED(2127732274,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25157632,32,FLEN)
NAN_BOXED(2127732274,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25161728,32,FLEN)
NAN_BOXED(2127732274,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25163776,32,FLEN)
NAN_BOXED(2127732274,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25164800,32,FLEN)
NAN_BOXED(2127732274,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25165312,32,FLEN)
NAN_BOXED(2127732274,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25165568,32,FLEN)
NAN_BOXED(2127732274,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25165696,32,FLEN)
NAN_BOXED(2127732274,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25165760,32,FLEN)
NAN_BOXED(2127732274,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25165792,32,FLEN)
NAN_BOXED(2127732274,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25165808,32,FLEN)
NAN_BOXED(2127732274,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25165816,32,FLEN)
NAN_BOXED(2127732274,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25165820,32,FLEN)
NAN_BOXED(2127732274,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25165822,32,FLEN)
NAN_BOXED(2127732274,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25165823,32,FLEN)
NAN_BOXED(2127734231,32,FLEN)
NAN_BOXED(2152580979,32,FLEN)
NAN_BOXED(2994733056,32,FLEN)
NAN_BOXED(2127734231,32,FLEN)
NAN_BOXED(2152580979,32,FLEN)
NAN_BOXED(2994733057,32,FLEN)
NAN_BOXED(2127734231,32,FLEN)
NAN_BOXED(2152580979,32,FLEN)
NAN_BOXED(2994733059,32,FLEN)
NAN_BOXED(2127734231,32,FLEN)
NAN_BOXED(2152580979,32,FLEN)
NAN_BOXED(2994733063,32,FLEN)
NAN_BOXED(2127734231,32,FLEN)
NAN_BOXED(2152580979,32,FLEN)
NAN_BOXED(2994733071,32,FLEN)
NAN_BOXED(2127734231,32,FLEN)
NAN_BOXED(2152580979,32,FLEN)
NAN_BOXED(2994733087,32,FLEN)
NAN_BOXED(2127734231,32,FLEN)
NAN_BOXED(2152580979,32,FLEN)
NAN_BOXED(2994733119,32,FLEN)
NAN_BOXED(2127734231,32,FLEN)
NAN_BOXED(2152580979,32,FLEN)
NAN_BOXED(2994733183,32,FLEN)
NAN_BOXED(2127734231,32,FLEN)
NAN_BOXED(2152580979,32,FLEN)
NAN_BOXED(2994733311,32,FLEN)
NAN_BOXED(2127734231,32,FLEN)
NAN_BOXED(2152580979,32,FLEN)
NAN_BOXED(2994733567,32,FLEN)
NAN_BOXED(2127734231,32,FLEN)
NAN_BOXED(2152580979,32,FLEN)
NAN_BOXED(2994734079,32,FLEN)
NAN_BOXED(2127734231,32,FLEN)
NAN_BOXED(2152580979,32,FLEN)
NAN_BOXED(2994735103,32,FLEN)
NAN_BOXED(2127734231,32,FLEN)
NAN_BOXED(2152580979,32,FLEN)
NAN_BOXED(2994737151,32,FLEN)
NAN_BOXED(2127734231,32,FLEN)
NAN_BOXED(2152580979,32,FLEN)
NAN_BOXED(2994741247,32,FLEN)
NAN_BOXED(2127734231,32,FLEN)
NAN_BOXED(2152580979,32,FLEN)
NAN_BOXED(2994749439,32,FLEN)
NAN_BOXED(2127734231,32,FLEN)
NAN_BOXED(2152580979,32,FLEN)
NAN_BOXED(2994765823,32,FLEN)
NAN_BOXED(2127734231,32,FLEN)
NAN_BOXED(2152580979,32,FLEN)
NAN_BOXED(2994798591,32,FLEN)
NAN_BOXED(2127734231,32,FLEN)
NAN_BOXED(2152580979,32,FLEN)
NAN_BOXED(2994864127,32,FLEN)
NAN_BOXED(2127734231,32,FLEN)
NAN_BOXED(2152580979,32,FLEN)
NAN_BOXED(2994995199,32,FLEN)
NAN_BOXED(2127734231,32,FLEN)
NAN_BOXED(2152580979,32,FLEN)
NAN_BOXED(2995257343,32,FLEN)
NAN_BOXED(2127734231,32,FLEN)
NAN_BOXED(2152580979,32,FLEN)
NAN_BOXED(2995781631,32,FLEN)
NAN_BOXED(2127734231,32,FLEN)
NAN_BOXED(2152580979,32,FLEN)
NAN_BOXED(2996830207,32,FLEN)
NAN_BOXED(2127734231,32,FLEN)
NAN_BOXED(2152580979,32,FLEN)
NAN_BOXED(2998927359,32,FLEN)
NAN_BOXED(2127734231,32,FLEN)
NAN_BOXED(2152580979,32,FLEN)
NAN_BOXED(2998927360,32,FLEN)
NAN_BOXED(2127734231,32,FLEN)
NAN_BOXED(2152580979,32,FLEN)
NAN_BOXED(3001024512,32,FLEN)
NAN_BOXED(2127734231,32,FLEN)
NAN_BOXED(2152580979,32,FLEN)
NAN_BOXED(3002073088,32,FLEN)
NAN_BOXED(2127734231,32,FLEN)
NAN_BOXED(2152580979,32,FLEN)
NAN_BOXED(3002597376,32,FLEN)
NAN_BOXED(2127734231,32,FLEN)
NAN_BOXED(2152580979,32,FLEN)
NAN_BOXED(3002859520,32,FLEN)
NAN_BOXED(2127734231,32,FLEN)
NAN_BOXED(2152580979,32,FLEN)
NAN_BOXED(3002990592,32,FLEN)
NAN_BOXED(2127734231,32,FLEN)
NAN_BOXED(2152580979,32,FLEN)
NAN_BOXED(3003056128,32,FLEN)
NAN_BOXED(2127734231,32,FLEN)
NAN_BOXED(2152580979,32,FLEN)
NAN_BOXED(3003088896,32,FLEN)
NAN_BOXED(2127734231,32,FLEN)
NAN_BOXED(2152580979,32,FLEN)
NAN_BOXED(3003105280,32,FLEN)
NAN_BOXED(2127734231,32,FLEN)
NAN_BOXED(2152580979,32,FLEN)
NAN_BOXED(3003113472,32,FLEN)
NAN_BOXED(2127734231,32,FLEN)
NAN_BOXED(2152580979,32,FLEN)
NAN_BOXED(3003117568,32,FLEN)
NAN_BOXED(2127734231,32,FLEN)
NAN_BOXED(2152580979,32,FLEN)
NAN_BOXED(3003119616,32,FLEN)
NAN_BOXED(2127734231,32,FLEN)
NAN_BOXED(2152580979,32,FLEN)
NAN_BOXED(3003120640,32,FLEN)
NAN_BOXED(2127734231,32,FLEN)
NAN_BOXED(2152580979,32,FLEN)
NAN_BOXED(3003121152,32,FLEN)
NAN_BOXED(2127734231,32,FLEN)
NAN_BOXED(2152580979,32,FLEN)
NAN_BOXED(3003121408,32,FLEN)
NAN_BOXED(2127734231,32,FLEN)
NAN_BOXED(2152580979,32,FLEN)
NAN_BOXED(3003121536,32,FLEN)
NAN_BOXED(2127734231,32,FLEN)
NAN_BOXED(2152580979,32,FLEN)
NAN_BOXED(3003121600,32,FLEN)
NAN_BOXED(2127734231,32,FLEN)
NAN_BOXED(2152580979,32,FLEN)
NAN_BOXED(3003121632,32,FLEN)
NAN_BOXED(2127734231,32,FLEN)
NAN_BOXED(2152580979,32,FLEN)
NAN_BOXED(3003121648,32,FLEN)
NAN_BOXED(2127734231,32,FLEN)
NAN_BOXED(2152580979,32,FLEN)
NAN_BOXED(3003121656,32,FLEN)
NAN_BOXED(2127734231,32,FLEN)
NAN_BOXED(2152580979,32,FLEN)
NAN_BOXED(3003121660,32,FLEN)
NAN_BOXED(2127734231,32,FLEN)
NAN_BOXED(2152580979,32,FLEN)
NAN_BOXED(3003121662,32,FLEN)
NAN_BOXED(2127734231,32,FLEN)
NAN_BOXED(2152580979,32,FLEN)
NAN_BOXED(3003121663,32,FLEN)
NAN_BOXED(2127734231,32,FLEN)
NAN_BOXED(2152580979,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2127734231,32,FLEN)
NAN_BOXED(2152580979,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2127734231,32,FLEN)
NAN_BOXED(2152580979,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
NAN_BOXED(2127734231,32,FLEN)
NAN_BOXED(2152580979,32,FLEN)
NAN_BOXED(3214514585,32,FLEN)
NAN_BOXED(2127734231,32,FLEN)
NAN_BOXED(2152580979,32,FLEN)
NAN_BOXED(3215233609,32,FLEN)
NAN_BOXED(2127734231,32,FLEN)
NAN_BOXED(2152580979,32,FLEN)
NAN_BOXED(3216192307,32,FLEN)
NAN_BOXED(2127734231,32,FLEN)
NAN_BOXED(2152580979,32,FLEN)
NAN_BOXED(3216431981,32,FLEN)
NAN_BOXED(2127734231,32,FLEN)
NAN_BOXED(2152580979,32,FLEN)
NAN_BOXED(3216751547,32,FLEN)
NAN_BOXED(2127734231,32,FLEN)
NAN_BOXED(2152580979,32,FLEN)
NAN_BOXED(3217310788,32,FLEN)
NAN_BOXED(2127734231,32,FLEN)
NAN_BOXED(2152580979,32,FLEN)
NAN_BOXED(3217870028,32,FLEN)
NAN_BOXED(2127734231,32,FLEN)
NAN_BOXED(2152580979,32,FLEN)
NAN_BOXED(3218828726,32,FLEN)
NAN_BOXED(2127734231,32,FLEN)
NAN_BOXED(2152580979,32,FLEN)
NAN_BOXED(3219547750,32,FLEN)
NAN_BOXED(2127734231,32,FLEN)
NAN_BOXED(2152580979,32,FLEN)
NAN_BOXED(3220027099,32,FLEN)
NAN_BOXED(2127734231,32,FLEN)
NAN_BOXED(2152580979,32,FLEN)
NAN_BOXED(3221225464,32,FLEN)
NAN_BOXED(2127734231,32,FLEN)
NAN_BOXED(2152580979,32,FLEN)
NAN_BOXED(3221225468,32,FLEN)
NAN_BOXED(2127734231,32,FLEN)
NAN_BOXED(2152580979,32,FLEN)
NAN_BOXED(3221225470,32,FLEN)
NAN_BOXED(2127748870,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(2127748870,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388611,32,FLEN)
NAN_BOXED(2127748870,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388615,32,FLEN)
NAN_BOXED(2127748870,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(10066329,32,FLEN)
NAN_BOXED(2127748870,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(10785353,32,FLEN)
NAN_BOXED(2127748870,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(11744051,32,FLEN)
NAN_BOXED(2127748870,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(11983725,32,FLEN)
NAN_BOXED(2127748870,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(12303291,32,FLEN)
NAN_BOXED(2127748870,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(12862532,32,FLEN)
NAN_BOXED(2127748870,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(13421772,32,FLEN)
NAN_BOXED(2127748870,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(14380470,32,FLEN)
NAN_BOXED(2127748870,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(15099494,32,FLEN)
NAN_BOXED(2127748870,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(15578843,32,FLEN)
NAN_BOXED(2127748870,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777208,32,FLEN)
NAN_BOXED(2127748870,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777212,32,FLEN)
NAN_BOXED(2127748870,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777214,32,FLEN)
NAN_BOXED(2127748870,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(150994944,32,FLEN)
NAN_BOXED(2127748870,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(150994945,32,FLEN)
NAN_BOXED(2127748870,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(150994947,32,FLEN)
NAN_BOXED(2127748870,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(150994951,32,FLEN)
NAN_BOXED(2127748870,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(150994959,32,FLEN)
NAN_BOXED(2127748870,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(150994975,32,FLEN)
NAN_BOXED(2127748870,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(150995007,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
