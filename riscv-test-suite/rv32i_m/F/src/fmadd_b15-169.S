
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:17:59 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_21504:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x595956 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed95956; op2val:0x80000000;
op3val:0x8e7f0000; valaddr_reg:x3; val_offset:64512*0 + 3*168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64512*0 + 3*168*FLEN/8, x4, x1, x2)

inst_21505:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x595956 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed95956; op2val:0x80000000;
op3val:0x8e7f8000; valaddr_reg:x3; val_offset:64515*0 + 3*168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64515*0 + 3*168*FLEN/8, x4, x1, x2)

inst_21506:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x595956 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed95956; op2val:0x80000000;
op3val:0x8e7fc000; valaddr_reg:x3; val_offset:64518*0 + 3*168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64518*0 + 3*168*FLEN/8, x4, x1, x2)

inst_21507:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x595956 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed95956; op2val:0x80000000;
op3val:0x8e7fe000; valaddr_reg:x3; val_offset:64521*0 + 3*168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64521*0 + 3*168*FLEN/8, x4, x1, x2)

inst_21508:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x595956 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed95956; op2val:0x80000000;
op3val:0x8e7ff000; valaddr_reg:x3; val_offset:64524*0 + 3*168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64524*0 + 3*168*FLEN/8, x4, x1, x2)

inst_21509:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x595956 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed95956; op2val:0x80000000;
op3val:0x8e7ff800; valaddr_reg:x3; val_offset:64527*0 + 3*168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64527*0 + 3*168*FLEN/8, x4, x1, x2)

inst_21510:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x595956 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed95956; op2val:0x80000000;
op3val:0x8e7ffc00; valaddr_reg:x3; val_offset:64530*0 + 3*168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64530*0 + 3*168*FLEN/8, x4, x1, x2)

inst_21511:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x595956 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed95956; op2val:0x80000000;
op3val:0x8e7ffe00; valaddr_reg:x3; val_offset:64533*0 + 3*168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64533*0 + 3*168*FLEN/8, x4, x1, x2)

inst_21512:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x595956 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed95956; op2val:0x80000000;
op3val:0x8e7fff00; valaddr_reg:x3; val_offset:64536*0 + 3*168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64536*0 + 3*168*FLEN/8, x4, x1, x2)

inst_21513:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x595956 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed95956; op2val:0x80000000;
op3val:0x8e7fff80; valaddr_reg:x3; val_offset:64539*0 + 3*168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64539*0 + 3*168*FLEN/8, x4, x1, x2)

inst_21514:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x595956 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed95956; op2val:0x80000000;
op3val:0x8e7fffc0; valaddr_reg:x3; val_offset:64542*0 + 3*168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64542*0 + 3*168*FLEN/8, x4, x1, x2)

inst_21515:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x595956 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed95956; op2val:0x80000000;
op3val:0x8e7fffe0; valaddr_reg:x3; val_offset:64545*0 + 3*168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64545*0 + 3*168*FLEN/8, x4, x1, x2)

inst_21516:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x595956 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed95956; op2val:0x80000000;
op3val:0x8e7ffff0; valaddr_reg:x3; val_offset:64548*0 + 3*168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64548*0 + 3*168*FLEN/8, x4, x1, x2)

inst_21517:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x595956 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed95956; op2val:0x80000000;
op3val:0x8e7ffff8; valaddr_reg:x3; val_offset:64551*0 + 3*168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64551*0 + 3*168*FLEN/8, x4, x1, x2)

inst_21518:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x595956 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed95956; op2val:0x80000000;
op3val:0x8e7ffffc; valaddr_reg:x3; val_offset:64554*0 + 3*168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64554*0 + 3*168*FLEN/8, x4, x1, x2)

inst_21519:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x595956 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed95956; op2val:0x80000000;
op3val:0x8e7ffffe; valaddr_reg:x3; val_offset:64557*0 + 3*168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64557*0 + 3*168*FLEN/8, x4, x1, x2)

inst_21520:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x595956 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed95956; op2val:0x80000000;
op3val:0x8e7fffff; valaddr_reg:x3; val_offset:64560*0 + 3*168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64560*0 + 3*168*FLEN/8, x4, x1, x2)

inst_21521:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59e85a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4b3015 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9e85a; op2val:0x804b3015;
op3val:0xbf800001; valaddr_reg:x3; val_offset:64563*0 + 3*168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64563*0 + 3*168*FLEN/8, x4, x1, x2)

inst_21522:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59e85a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4b3015 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9e85a; op2val:0x804b3015;
op3val:0xbf800003; valaddr_reg:x3; val_offset:64566*0 + 3*168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64566*0 + 3*168*FLEN/8, x4, x1, x2)

inst_21523:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59e85a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4b3015 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9e85a; op2val:0x804b3015;
op3val:0xbf800007; valaddr_reg:x3; val_offset:64569*0 + 3*168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64569*0 + 3*168*FLEN/8, x4, x1, x2)

inst_21524:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59e85a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4b3015 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9e85a; op2val:0x804b3015;
op3val:0xbf999999; valaddr_reg:x3; val_offset:64572*0 + 3*168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64572*0 + 3*168*FLEN/8, x4, x1, x2)

inst_21525:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59e85a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4b3015 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9e85a; op2val:0x804b3015;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:64575*0 + 3*168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64575*0 + 3*168*FLEN/8, x4, x1, x2)

inst_21526:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59e85a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4b3015 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9e85a; op2val:0x804b3015;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:64578*0 + 3*168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64578*0 + 3*168*FLEN/8, x4, x1, x2)

inst_21527:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59e85a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4b3015 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9e85a; op2val:0x804b3015;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:64581*0 + 3*168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64581*0 + 3*168*FLEN/8, x4, x1, x2)

inst_21528:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59e85a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4b3015 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9e85a; op2val:0x804b3015;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:64584*0 + 3*168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64584*0 + 3*168*FLEN/8, x4, x1, x2)

inst_21529:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59e85a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4b3015 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9e85a; op2val:0x804b3015;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:64587*0 + 3*168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64587*0 + 3*168*FLEN/8, x4, x1, x2)

inst_21530:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59e85a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4b3015 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9e85a; op2val:0x804b3015;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:64590*0 + 3*168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64590*0 + 3*168*FLEN/8, x4, x1, x2)

inst_21531:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59e85a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4b3015 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9e85a; op2val:0x804b3015;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:64593*0 + 3*168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64593*0 + 3*168*FLEN/8, x4, x1, x2)

inst_21532:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59e85a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4b3015 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9e85a; op2val:0x804b3015;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:64596*0 + 3*168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64596*0 + 3*168*FLEN/8, x4, x1, x2)

inst_21533:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59e85a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4b3015 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9e85a; op2val:0x804b3015;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:64599*0 + 3*168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64599*0 + 3*168*FLEN/8, x4, x1, x2)

inst_21534:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59e85a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4b3015 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9e85a; op2val:0x804b3015;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:64602*0 + 3*168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64602*0 + 3*168*FLEN/8, x4, x1, x2)

inst_21535:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59e85a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4b3015 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9e85a; op2val:0x804b3015;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:64605*0 + 3*168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64605*0 + 3*168*FLEN/8, x4, x1, x2)

inst_21536:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59e85a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4b3015 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9e85a; op2val:0x804b3015;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:64608*0 + 3*168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64608*0 + 3*168*FLEN/8, x4, x1, x2)

inst_21537:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59e85a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4b3015 and fs3 == 1 and fe3 == 0x8c and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9e85a; op2val:0x804b3015;
op3val:0xc6000000; valaddr_reg:x3; val_offset:64611*0 + 3*168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64611*0 + 3*168*FLEN/8, x4, x1, x2)

inst_21538:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59e85a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4b3015 and fs3 == 1 and fe3 == 0x8c and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9e85a; op2val:0x804b3015;
op3val:0xc6000001; valaddr_reg:x3; val_offset:64614*0 + 3*168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64614*0 + 3*168*FLEN/8, x4, x1, x2)

inst_21539:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59e85a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4b3015 and fs3 == 1 and fe3 == 0x8c and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9e85a; op2val:0x804b3015;
op3val:0xc6000003; valaddr_reg:x3; val_offset:64617*0 + 3*168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64617*0 + 3*168*FLEN/8, x4, x1, x2)

inst_21540:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59e85a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4b3015 and fs3 == 1 and fe3 == 0x8c and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9e85a; op2val:0x804b3015;
op3val:0xc6000007; valaddr_reg:x3; val_offset:64620*0 + 3*168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64620*0 + 3*168*FLEN/8, x4, x1, x2)

inst_21541:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59e85a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4b3015 and fs3 == 1 and fe3 == 0x8c and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9e85a; op2val:0x804b3015;
op3val:0xc600000f; valaddr_reg:x3; val_offset:64623*0 + 3*168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64623*0 + 3*168*FLEN/8, x4, x1, x2)

inst_21542:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59e85a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4b3015 and fs3 == 1 and fe3 == 0x8c and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9e85a; op2val:0x804b3015;
op3val:0xc600001f; valaddr_reg:x3; val_offset:64626*0 + 3*168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64626*0 + 3*168*FLEN/8, x4, x1, x2)

inst_21543:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59e85a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4b3015 and fs3 == 1 and fe3 == 0x8c and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9e85a; op2val:0x804b3015;
op3val:0xc600003f; valaddr_reg:x3; val_offset:64629*0 + 3*168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64629*0 + 3*168*FLEN/8, x4, x1, x2)

inst_21544:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59e85a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4b3015 and fs3 == 1 and fe3 == 0x8c and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9e85a; op2val:0x804b3015;
op3val:0xc600007f; valaddr_reg:x3; val_offset:64632*0 + 3*168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64632*0 + 3*168*FLEN/8, x4, x1, x2)

inst_21545:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59e85a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4b3015 and fs3 == 1 and fe3 == 0x8c and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9e85a; op2val:0x804b3015;
op3val:0xc60000ff; valaddr_reg:x3; val_offset:64635*0 + 3*168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64635*0 + 3*168*FLEN/8, x4, x1, x2)

inst_21546:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59e85a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4b3015 and fs3 == 1 and fe3 == 0x8c and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9e85a; op2val:0x804b3015;
op3val:0xc60001ff; valaddr_reg:x3; val_offset:64638*0 + 3*168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64638*0 + 3*168*FLEN/8, x4, x1, x2)

inst_21547:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59e85a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4b3015 and fs3 == 1 and fe3 == 0x8c and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9e85a; op2val:0x804b3015;
op3val:0xc60003ff; valaddr_reg:x3; val_offset:64641*0 + 3*168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64641*0 + 3*168*FLEN/8, x4, x1, x2)

inst_21548:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59e85a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4b3015 and fs3 == 1 and fe3 == 0x8c and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9e85a; op2val:0x804b3015;
op3val:0xc60007ff; valaddr_reg:x3; val_offset:64644*0 + 3*168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64644*0 + 3*168*FLEN/8, x4, x1, x2)

inst_21549:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59e85a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4b3015 and fs3 == 1 and fe3 == 0x8c and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9e85a; op2val:0x804b3015;
op3val:0xc6000fff; valaddr_reg:x3; val_offset:64647*0 + 3*168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64647*0 + 3*168*FLEN/8, x4, x1, x2)

inst_21550:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59e85a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4b3015 and fs3 == 1 and fe3 == 0x8c and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9e85a; op2val:0x804b3015;
op3val:0xc6001fff; valaddr_reg:x3; val_offset:64650*0 + 3*168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64650*0 + 3*168*FLEN/8, x4, x1, x2)

inst_21551:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59e85a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4b3015 and fs3 == 1 and fe3 == 0x8c and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9e85a; op2val:0x804b3015;
op3val:0xc6003fff; valaddr_reg:x3; val_offset:64653*0 + 3*168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64653*0 + 3*168*FLEN/8, x4, x1, x2)

inst_21552:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59e85a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4b3015 and fs3 == 1 and fe3 == 0x8c and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9e85a; op2val:0x804b3015;
op3val:0xc6007fff; valaddr_reg:x3; val_offset:64656*0 + 3*168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64656*0 + 3*168*FLEN/8, x4, x1, x2)

inst_21553:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59e85a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4b3015 and fs3 == 1 and fe3 == 0x8c and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9e85a; op2val:0x804b3015;
op3val:0xc600ffff; valaddr_reg:x3; val_offset:64659*0 + 3*168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64659*0 + 3*168*FLEN/8, x4, x1, x2)

inst_21554:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59e85a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4b3015 and fs3 == 1 and fe3 == 0x8c and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9e85a; op2val:0x804b3015;
op3val:0xc601ffff; valaddr_reg:x3; val_offset:64662*0 + 3*168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64662*0 + 3*168*FLEN/8, x4, x1, x2)

inst_21555:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59e85a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4b3015 and fs3 == 1 and fe3 == 0x8c and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9e85a; op2val:0x804b3015;
op3val:0xc603ffff; valaddr_reg:x3; val_offset:64665*0 + 3*168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64665*0 + 3*168*FLEN/8, x4, x1, x2)

inst_21556:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59e85a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4b3015 and fs3 == 1 and fe3 == 0x8c and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9e85a; op2val:0x804b3015;
op3val:0xc607ffff; valaddr_reg:x3; val_offset:64668*0 + 3*168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64668*0 + 3*168*FLEN/8, x4, x1, x2)

inst_21557:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59e85a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4b3015 and fs3 == 1 and fe3 == 0x8c and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9e85a; op2val:0x804b3015;
op3val:0xc60fffff; valaddr_reg:x3; val_offset:64671*0 + 3*168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64671*0 + 3*168*FLEN/8, x4, x1, x2)

inst_21558:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59e85a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4b3015 and fs3 == 1 and fe3 == 0x8c and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9e85a; op2val:0x804b3015;
op3val:0xc61fffff; valaddr_reg:x3; val_offset:64674*0 + 3*168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64674*0 + 3*168*FLEN/8, x4, x1, x2)

inst_21559:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59e85a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4b3015 and fs3 == 1 and fe3 == 0x8c and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9e85a; op2val:0x804b3015;
op3val:0xc63fffff; valaddr_reg:x3; val_offset:64677*0 + 3*168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64677*0 + 3*168*FLEN/8, x4, x1, x2)

inst_21560:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59e85a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4b3015 and fs3 == 1 and fe3 == 0x8c and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9e85a; op2val:0x804b3015;
op3val:0xc6400000; valaddr_reg:x3; val_offset:64680*0 + 3*168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64680*0 + 3*168*FLEN/8, x4, x1, x2)

inst_21561:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59e85a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4b3015 and fs3 == 1 and fe3 == 0x8c and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9e85a; op2val:0x804b3015;
op3val:0xc6600000; valaddr_reg:x3; val_offset:64683*0 + 3*168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64683*0 + 3*168*FLEN/8, x4, x1, x2)

inst_21562:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59e85a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4b3015 and fs3 == 1 and fe3 == 0x8c and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9e85a; op2val:0x804b3015;
op3val:0xc6700000; valaddr_reg:x3; val_offset:64686*0 + 3*168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64686*0 + 3*168*FLEN/8, x4, x1, x2)

inst_21563:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59e85a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4b3015 and fs3 == 1 and fe3 == 0x8c and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9e85a; op2val:0x804b3015;
op3val:0xc6780000; valaddr_reg:x3; val_offset:64689*0 + 3*168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64689*0 + 3*168*FLEN/8, x4, x1, x2)

inst_21564:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59e85a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4b3015 and fs3 == 1 and fe3 == 0x8c and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9e85a; op2val:0x804b3015;
op3val:0xc67c0000; valaddr_reg:x3; val_offset:64692*0 + 3*168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64692*0 + 3*168*FLEN/8, x4, x1, x2)

inst_21565:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59e85a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4b3015 and fs3 == 1 and fe3 == 0x8c and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9e85a; op2val:0x804b3015;
op3val:0xc67e0000; valaddr_reg:x3; val_offset:64695*0 + 3*168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64695*0 + 3*168*FLEN/8, x4, x1, x2)

inst_21566:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59e85a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4b3015 and fs3 == 1 and fe3 == 0x8c and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9e85a; op2val:0x804b3015;
op3val:0xc67f0000; valaddr_reg:x3; val_offset:64698*0 + 3*168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64698*0 + 3*168*FLEN/8, x4, x1, x2)

inst_21567:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59e85a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4b3015 and fs3 == 1 and fe3 == 0x8c and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9e85a; op2val:0x804b3015;
op3val:0xc67f8000; valaddr_reg:x3; val_offset:64701*0 + 3*168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64701*0 + 3*168*FLEN/8, x4, x1, x2)

inst_21568:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59e85a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4b3015 and fs3 == 1 and fe3 == 0x8c and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9e85a; op2val:0x804b3015;
op3val:0xc67fc000; valaddr_reg:x3; val_offset:64704*0 + 3*168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64704*0 + 3*168*FLEN/8, x4, x1, x2)

inst_21569:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59e85a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4b3015 and fs3 == 1 and fe3 == 0x8c and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9e85a; op2val:0x804b3015;
op3val:0xc67fe000; valaddr_reg:x3; val_offset:64707*0 + 3*168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64707*0 + 3*168*FLEN/8, x4, x1, x2)

inst_21570:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59e85a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4b3015 and fs3 == 1 and fe3 == 0x8c and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9e85a; op2val:0x804b3015;
op3val:0xc67ff000; valaddr_reg:x3; val_offset:64710*0 + 3*168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64710*0 + 3*168*FLEN/8, x4, x1, x2)

inst_21571:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59e85a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4b3015 and fs3 == 1 and fe3 == 0x8c and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9e85a; op2val:0x804b3015;
op3val:0xc67ff800; valaddr_reg:x3; val_offset:64713*0 + 3*168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64713*0 + 3*168*FLEN/8, x4, x1, x2)

inst_21572:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59e85a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4b3015 and fs3 == 1 and fe3 == 0x8c and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9e85a; op2val:0x804b3015;
op3val:0xc67ffc00; valaddr_reg:x3; val_offset:64716*0 + 3*168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64716*0 + 3*168*FLEN/8, x4, x1, x2)

inst_21573:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59e85a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4b3015 and fs3 == 1 and fe3 == 0x8c and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9e85a; op2val:0x804b3015;
op3val:0xc67ffe00; valaddr_reg:x3; val_offset:64719*0 + 3*168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64719*0 + 3*168*FLEN/8, x4, x1, x2)

inst_21574:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59e85a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4b3015 and fs3 == 1 and fe3 == 0x8c and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9e85a; op2val:0x804b3015;
op3val:0xc67fff00; valaddr_reg:x3; val_offset:64722*0 + 3*168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64722*0 + 3*168*FLEN/8, x4, x1, x2)

inst_21575:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59e85a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4b3015 and fs3 == 1 and fe3 == 0x8c and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9e85a; op2val:0x804b3015;
op3val:0xc67fff80; valaddr_reg:x3; val_offset:64725*0 + 3*168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64725*0 + 3*168*FLEN/8, x4, x1, x2)

inst_21576:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59e85a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4b3015 and fs3 == 1 and fe3 == 0x8c and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9e85a; op2val:0x804b3015;
op3val:0xc67fffc0; valaddr_reg:x3; val_offset:64728*0 + 3*168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64728*0 + 3*168*FLEN/8, x4, x1, x2)

inst_21577:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59e85a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4b3015 and fs3 == 1 and fe3 == 0x8c and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9e85a; op2val:0x804b3015;
op3val:0xc67fffe0; valaddr_reg:x3; val_offset:64731*0 + 3*168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64731*0 + 3*168*FLEN/8, x4, x1, x2)

inst_21578:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59e85a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4b3015 and fs3 == 1 and fe3 == 0x8c and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9e85a; op2val:0x804b3015;
op3val:0xc67ffff0; valaddr_reg:x3; val_offset:64734*0 + 3*168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64734*0 + 3*168*FLEN/8, x4, x1, x2)

inst_21579:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59e85a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4b3015 and fs3 == 1 and fe3 == 0x8c and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9e85a; op2val:0x804b3015;
op3val:0xc67ffff8; valaddr_reg:x3; val_offset:64737*0 + 3*168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64737*0 + 3*168*FLEN/8, x4, x1, x2)

inst_21580:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59e85a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4b3015 and fs3 == 1 and fe3 == 0x8c and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9e85a; op2val:0x804b3015;
op3val:0xc67ffffc; valaddr_reg:x3; val_offset:64740*0 + 3*168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64740*0 + 3*168*FLEN/8, x4, x1, x2)

inst_21581:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59e85a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4b3015 and fs3 == 1 and fe3 == 0x8c and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9e85a; op2val:0x804b3015;
op3val:0xc67ffffe; valaddr_reg:x3; val_offset:64743*0 + 3*168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64743*0 + 3*168*FLEN/8, x4, x1, x2)

inst_21582:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59e85a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4b3015 and fs3 == 1 and fe3 == 0x8c and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9e85a; op2val:0x804b3015;
op3val:0xc67fffff; valaddr_reg:x3; val_offset:64746*0 + 3*168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64746*0 + 3*168*FLEN/8, x4, x1, x2)

inst_21583:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59e8cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4b2fed and fs3 == 1 and fe3 == 0x53 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9e8cc; op2val:0x804b2fed;
op3val:0xa9800000; valaddr_reg:x3; val_offset:64749*0 + 3*168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64749*0 + 3*168*FLEN/8, x4, x1, x2)

inst_21584:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59e8cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4b2fed and fs3 == 1 and fe3 == 0x53 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9e8cc; op2val:0x804b2fed;
op3val:0xa9800001; valaddr_reg:x3; val_offset:64752*0 + 3*168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64752*0 + 3*168*FLEN/8, x4, x1, x2)

inst_21585:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59e8cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4b2fed and fs3 == 1 and fe3 == 0x53 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9e8cc; op2val:0x804b2fed;
op3val:0xa9800003; valaddr_reg:x3; val_offset:64755*0 + 3*168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64755*0 + 3*168*FLEN/8, x4, x1, x2)

inst_21586:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59e8cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4b2fed and fs3 == 1 and fe3 == 0x53 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9e8cc; op2val:0x804b2fed;
op3val:0xa9800007; valaddr_reg:x3; val_offset:64758*0 + 3*168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64758*0 + 3*168*FLEN/8, x4, x1, x2)

inst_21587:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59e8cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4b2fed and fs3 == 1 and fe3 == 0x53 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9e8cc; op2val:0x804b2fed;
op3val:0xa980000f; valaddr_reg:x3; val_offset:64761*0 + 3*168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64761*0 + 3*168*FLEN/8, x4, x1, x2)

inst_21588:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59e8cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4b2fed and fs3 == 1 and fe3 == 0x53 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9e8cc; op2val:0x804b2fed;
op3val:0xa980001f; valaddr_reg:x3; val_offset:64764*0 + 3*168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64764*0 + 3*168*FLEN/8, x4, x1, x2)

inst_21589:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59e8cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4b2fed and fs3 == 1 and fe3 == 0x53 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9e8cc; op2val:0x804b2fed;
op3val:0xa980003f; valaddr_reg:x3; val_offset:64767*0 + 3*168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64767*0 + 3*168*FLEN/8, x4, x1, x2)

inst_21590:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59e8cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4b2fed and fs3 == 1 and fe3 == 0x53 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9e8cc; op2val:0x804b2fed;
op3val:0xa980007f; valaddr_reg:x3; val_offset:64770*0 + 3*168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64770*0 + 3*168*FLEN/8, x4, x1, x2)

inst_21591:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59e8cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4b2fed and fs3 == 1 and fe3 == 0x53 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9e8cc; op2val:0x804b2fed;
op3val:0xa98000ff; valaddr_reg:x3; val_offset:64773*0 + 3*168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64773*0 + 3*168*FLEN/8, x4, x1, x2)

inst_21592:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59e8cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4b2fed and fs3 == 1 and fe3 == 0x53 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9e8cc; op2val:0x804b2fed;
op3val:0xa98001ff; valaddr_reg:x3; val_offset:64776*0 + 3*168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64776*0 + 3*168*FLEN/8, x4, x1, x2)

inst_21593:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59e8cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4b2fed and fs3 == 1 and fe3 == 0x53 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9e8cc; op2val:0x804b2fed;
op3val:0xa98003ff; valaddr_reg:x3; val_offset:64779*0 + 3*168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64779*0 + 3*168*FLEN/8, x4, x1, x2)

inst_21594:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59e8cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4b2fed and fs3 == 1 and fe3 == 0x53 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9e8cc; op2val:0x804b2fed;
op3val:0xa98007ff; valaddr_reg:x3; val_offset:64782*0 + 3*168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64782*0 + 3*168*FLEN/8, x4, x1, x2)

inst_21595:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59e8cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4b2fed and fs3 == 1 and fe3 == 0x53 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9e8cc; op2val:0x804b2fed;
op3val:0xa9800fff; valaddr_reg:x3; val_offset:64785*0 + 3*168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64785*0 + 3*168*FLEN/8, x4, x1, x2)

inst_21596:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59e8cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4b2fed and fs3 == 1 and fe3 == 0x53 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9e8cc; op2val:0x804b2fed;
op3val:0xa9801fff; valaddr_reg:x3; val_offset:64788*0 + 3*168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64788*0 + 3*168*FLEN/8, x4, x1, x2)

inst_21597:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59e8cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4b2fed and fs3 == 1 and fe3 == 0x53 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9e8cc; op2val:0x804b2fed;
op3val:0xa9803fff; valaddr_reg:x3; val_offset:64791*0 + 3*168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64791*0 + 3*168*FLEN/8, x4, x1, x2)

inst_21598:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59e8cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4b2fed and fs3 == 1 and fe3 == 0x53 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9e8cc; op2val:0x804b2fed;
op3val:0xa9807fff; valaddr_reg:x3; val_offset:64794*0 + 3*168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64794*0 + 3*168*FLEN/8, x4, x1, x2)

inst_21599:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59e8cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4b2fed and fs3 == 1 and fe3 == 0x53 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9e8cc; op2val:0x804b2fed;
op3val:0xa980ffff; valaddr_reg:x3; val_offset:64797*0 + 3*168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64797*0 + 3*168*FLEN/8, x4, x1, x2)

inst_21600:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59e8cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4b2fed and fs3 == 1 and fe3 == 0x53 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9e8cc; op2val:0x804b2fed;
op3val:0xa981ffff; valaddr_reg:x3; val_offset:64800*0 + 3*168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64800*0 + 3*168*FLEN/8, x4, x1, x2)

inst_21601:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59e8cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4b2fed and fs3 == 1 and fe3 == 0x53 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9e8cc; op2val:0x804b2fed;
op3val:0xa983ffff; valaddr_reg:x3; val_offset:64803*0 + 3*168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64803*0 + 3*168*FLEN/8, x4, x1, x2)

inst_21602:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59e8cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4b2fed and fs3 == 1 and fe3 == 0x53 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9e8cc; op2val:0x804b2fed;
op3val:0xa987ffff; valaddr_reg:x3; val_offset:64806*0 + 3*168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64806*0 + 3*168*FLEN/8, x4, x1, x2)

inst_21603:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59e8cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4b2fed and fs3 == 1 and fe3 == 0x53 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9e8cc; op2val:0x804b2fed;
op3val:0xa98fffff; valaddr_reg:x3; val_offset:64809*0 + 3*168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64809*0 + 3*168*FLEN/8, x4, x1, x2)

inst_21604:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59e8cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4b2fed and fs3 == 1 and fe3 == 0x53 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9e8cc; op2val:0x804b2fed;
op3val:0xa99fffff; valaddr_reg:x3; val_offset:64812*0 + 3*168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64812*0 + 3*168*FLEN/8, x4, x1, x2)

inst_21605:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59e8cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4b2fed and fs3 == 1 and fe3 == 0x53 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9e8cc; op2val:0x804b2fed;
op3val:0xa9bfffff; valaddr_reg:x3; val_offset:64815*0 + 3*168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64815*0 + 3*168*FLEN/8, x4, x1, x2)

inst_21606:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59e8cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4b2fed and fs3 == 1 and fe3 == 0x53 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9e8cc; op2val:0x804b2fed;
op3val:0xa9c00000; valaddr_reg:x3; val_offset:64818*0 + 3*168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64818*0 + 3*168*FLEN/8, x4, x1, x2)

inst_21607:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59e8cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4b2fed and fs3 == 1 and fe3 == 0x53 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9e8cc; op2val:0x804b2fed;
op3val:0xa9e00000; valaddr_reg:x3; val_offset:64821*0 + 3*168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64821*0 + 3*168*FLEN/8, x4, x1, x2)

inst_21608:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59e8cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4b2fed and fs3 == 1 and fe3 == 0x53 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9e8cc; op2val:0x804b2fed;
op3val:0xa9f00000; valaddr_reg:x3; val_offset:64824*0 + 3*168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64824*0 + 3*168*FLEN/8, x4, x1, x2)

inst_21609:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59e8cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4b2fed and fs3 == 1 and fe3 == 0x53 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9e8cc; op2val:0x804b2fed;
op3val:0xa9f80000; valaddr_reg:x3; val_offset:64827*0 + 3*168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64827*0 + 3*168*FLEN/8, x4, x1, x2)

inst_21610:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59e8cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4b2fed and fs3 == 1 and fe3 == 0x53 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9e8cc; op2val:0x804b2fed;
op3val:0xa9fc0000; valaddr_reg:x3; val_offset:64830*0 + 3*168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64830*0 + 3*168*FLEN/8, x4, x1, x2)

inst_21611:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59e8cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4b2fed and fs3 == 1 and fe3 == 0x53 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9e8cc; op2val:0x804b2fed;
op3val:0xa9fe0000; valaddr_reg:x3; val_offset:64833*0 + 3*168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64833*0 + 3*168*FLEN/8, x4, x1, x2)

inst_21612:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59e8cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4b2fed and fs3 == 1 and fe3 == 0x53 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9e8cc; op2val:0x804b2fed;
op3val:0xa9ff0000; valaddr_reg:x3; val_offset:64836*0 + 3*168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64836*0 + 3*168*FLEN/8, x4, x1, x2)

inst_21613:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59e8cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4b2fed and fs3 == 1 and fe3 == 0x53 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9e8cc; op2val:0x804b2fed;
op3val:0xa9ff8000; valaddr_reg:x3; val_offset:64839*0 + 3*168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64839*0 + 3*168*FLEN/8, x4, x1, x2)

inst_21614:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59e8cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4b2fed and fs3 == 1 and fe3 == 0x53 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9e8cc; op2val:0x804b2fed;
op3val:0xa9ffc000; valaddr_reg:x3; val_offset:64842*0 + 3*168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64842*0 + 3*168*FLEN/8, x4, x1, x2)

inst_21615:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59e8cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4b2fed and fs3 == 1 and fe3 == 0x53 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9e8cc; op2val:0x804b2fed;
op3val:0xa9ffe000; valaddr_reg:x3; val_offset:64845*0 + 3*168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64845*0 + 3*168*FLEN/8, x4, x1, x2)

inst_21616:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59e8cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4b2fed and fs3 == 1 and fe3 == 0x53 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9e8cc; op2val:0x804b2fed;
op3val:0xa9fff000; valaddr_reg:x3; val_offset:64848*0 + 3*168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64848*0 + 3*168*FLEN/8, x4, x1, x2)

inst_21617:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59e8cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4b2fed and fs3 == 1 and fe3 == 0x53 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9e8cc; op2val:0x804b2fed;
op3val:0xa9fff800; valaddr_reg:x3; val_offset:64851*0 + 3*168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64851*0 + 3*168*FLEN/8, x4, x1, x2)

inst_21618:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59e8cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4b2fed and fs3 == 1 and fe3 == 0x53 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9e8cc; op2val:0x804b2fed;
op3val:0xa9fffc00; valaddr_reg:x3; val_offset:64854*0 + 3*168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64854*0 + 3*168*FLEN/8, x4, x1, x2)

inst_21619:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59e8cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4b2fed and fs3 == 1 and fe3 == 0x53 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9e8cc; op2val:0x804b2fed;
op3val:0xa9fffe00; valaddr_reg:x3; val_offset:64857*0 + 3*168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64857*0 + 3*168*FLEN/8, x4, x1, x2)

inst_21620:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59e8cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4b2fed and fs3 == 1 and fe3 == 0x53 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9e8cc; op2val:0x804b2fed;
op3val:0xa9ffff00; valaddr_reg:x3; val_offset:64860*0 + 3*168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64860*0 + 3*168*FLEN/8, x4, x1, x2)

inst_21621:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59e8cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4b2fed and fs3 == 1 and fe3 == 0x53 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9e8cc; op2val:0x804b2fed;
op3val:0xa9ffff80; valaddr_reg:x3; val_offset:64863*0 + 3*168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64863*0 + 3*168*FLEN/8, x4, x1, x2)

inst_21622:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59e8cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4b2fed and fs3 == 1 and fe3 == 0x53 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9e8cc; op2val:0x804b2fed;
op3val:0xa9ffffc0; valaddr_reg:x3; val_offset:64866*0 + 3*168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64866*0 + 3*168*FLEN/8, x4, x1, x2)

inst_21623:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59e8cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4b2fed and fs3 == 1 and fe3 == 0x53 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9e8cc; op2val:0x804b2fed;
op3val:0xa9ffffe0; valaddr_reg:x3; val_offset:64869*0 + 3*168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64869*0 + 3*168*FLEN/8, x4, x1, x2)

inst_21624:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59e8cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4b2fed and fs3 == 1 and fe3 == 0x53 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9e8cc; op2val:0x804b2fed;
op3val:0xa9fffff0; valaddr_reg:x3; val_offset:64872*0 + 3*168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64872*0 + 3*168*FLEN/8, x4, x1, x2)

inst_21625:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59e8cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4b2fed and fs3 == 1 and fe3 == 0x53 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9e8cc; op2val:0x804b2fed;
op3val:0xa9fffff8; valaddr_reg:x3; val_offset:64875*0 + 3*168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64875*0 + 3*168*FLEN/8, x4, x1, x2)

inst_21626:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59e8cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4b2fed and fs3 == 1 and fe3 == 0x53 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9e8cc; op2val:0x804b2fed;
op3val:0xa9fffffc; valaddr_reg:x3; val_offset:64878*0 + 3*168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64878*0 + 3*168*FLEN/8, x4, x1, x2)

inst_21627:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59e8cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4b2fed and fs3 == 1 and fe3 == 0x53 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9e8cc; op2val:0x804b2fed;
op3val:0xa9fffffe; valaddr_reg:x3; val_offset:64881*0 + 3*168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64881*0 + 3*168*FLEN/8, x4, x1, x2)

inst_21628:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59e8cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4b2fed and fs3 == 1 and fe3 == 0x53 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9e8cc; op2val:0x804b2fed;
op3val:0xa9ffffff; valaddr_reg:x3; val_offset:64884*0 + 3*168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64884*0 + 3*168*FLEN/8, x4, x1, x2)

inst_21629:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59e8cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4b2fed and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9e8cc; op2val:0x804b2fed;
op3val:0xbf800001; valaddr_reg:x3; val_offset:64887*0 + 3*168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64887*0 + 3*168*FLEN/8, x4, x1, x2)

inst_21630:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59e8cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4b2fed and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9e8cc; op2val:0x804b2fed;
op3val:0xbf800003; valaddr_reg:x3; val_offset:64890*0 + 3*168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64890*0 + 3*168*FLEN/8, x4, x1, x2)

inst_21631:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59e8cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4b2fed and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9e8cc; op2val:0x804b2fed;
op3val:0xbf800007; valaddr_reg:x3; val_offset:64893*0 + 3*168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64893*0 + 3*168*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2128173398,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390687744,32,FLEN)
NAN_BOXED(2128173398,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390720512,32,FLEN)
NAN_BOXED(2128173398,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390736896,32,FLEN)
NAN_BOXED(2128173398,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390745088,32,FLEN)
NAN_BOXED(2128173398,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390749184,32,FLEN)
NAN_BOXED(2128173398,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390751232,32,FLEN)
NAN_BOXED(2128173398,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390752256,32,FLEN)
NAN_BOXED(2128173398,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390752768,32,FLEN)
NAN_BOXED(2128173398,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390753024,32,FLEN)
NAN_BOXED(2128173398,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390753152,32,FLEN)
NAN_BOXED(2128173398,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390753216,32,FLEN)
NAN_BOXED(2128173398,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390753248,32,FLEN)
NAN_BOXED(2128173398,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390753264,32,FLEN)
NAN_BOXED(2128173398,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390753272,32,FLEN)
NAN_BOXED(2128173398,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390753276,32,FLEN)
NAN_BOXED(2128173398,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390753278,32,FLEN)
NAN_BOXED(2128173398,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390753279,32,FLEN)
NAN_BOXED(2128210010,32,FLEN)
NAN_BOXED(2152411157,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2128210010,32,FLEN)
NAN_BOXED(2152411157,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2128210010,32,FLEN)
NAN_BOXED(2152411157,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
NAN_BOXED(2128210010,32,FLEN)
NAN_BOXED(2152411157,32,FLEN)
NAN_BOXED(3214514585,32,FLEN)
NAN_BOXED(2128210010,32,FLEN)
NAN_BOXED(2152411157,32,FLEN)
NAN_BOXED(3215233609,32,FLEN)
NAN_BOXED(2128210010,32,FLEN)
NAN_BOXED(2152411157,32,FLEN)
NAN_BOXED(3216192307,32,FLEN)
NAN_BOXED(2128210010,32,FLEN)
NAN_BOXED(2152411157,32,FLEN)
NAN_BOXED(3216431981,32,FLEN)
NAN_BOXED(2128210010,32,FLEN)
NAN_BOXED(2152411157,32,FLEN)
NAN_BOXED(3216751547,32,FLEN)
NAN_BOXED(2128210010,32,FLEN)
NAN_BOXED(2152411157,32,FLEN)
NAN_BOXED(3217310788,32,FLEN)
NAN_BOXED(2128210010,32,FLEN)
NAN_BOXED(2152411157,32,FLEN)
NAN_BOXED(3217870028,32,FLEN)
NAN_BOXED(2128210010,32,FLEN)
NAN_BOXED(2152411157,32,FLEN)
NAN_BOXED(3218828726,32,FLEN)
NAN_BOXED(2128210010,32,FLEN)
NAN_BOXED(2152411157,32,FLEN)
NAN_BOXED(3219547750,32,FLEN)
NAN_BOXED(2128210010,32,FLEN)
NAN_BOXED(2152411157,32,FLEN)
NAN_BOXED(3220027099,32,FLEN)
NAN_BOXED(2128210010,32,FLEN)
NAN_BOXED(2152411157,32,FLEN)
NAN_BOXED(3221225464,32,FLEN)
NAN_BOXED(2128210010,32,FLEN)
NAN_BOXED(2152411157,32,FLEN)
NAN_BOXED(3221225468,32,FLEN)
NAN_BOXED(2128210010,32,FLEN)
NAN_BOXED(2152411157,32,FLEN)
NAN_BOXED(3221225470,32,FLEN)
NAN_BOXED(2128210010,32,FLEN)
NAN_BOXED(2152411157,32,FLEN)
NAN_BOXED(3321888768,32,FLEN)
NAN_BOXED(2128210010,32,FLEN)
NAN_BOXED(2152411157,32,FLEN)
NAN_BOXED(3321888769,32,FLEN)
NAN_BOXED(2128210010,32,FLEN)
NAN_BOXED(2152411157,32,FLEN)
NAN_BOXED(3321888771,32,FLEN)
NAN_BOXED(2128210010,32,FLEN)
NAN_BOXED(2152411157,32,FLEN)
NAN_BOXED(3321888775,32,FLEN)
NAN_BOXED(2128210010,32,FLEN)
NAN_BOXED(2152411157,32,FLEN)
NAN_BOXED(3321888783,32,FLEN)
NAN_BOXED(2128210010,32,FLEN)
NAN_BOXED(2152411157,32,FLEN)
NAN_BOXED(3321888799,32,FLEN)
NAN_BOXED(2128210010,32,FLEN)
NAN_BOXED(2152411157,32,FLEN)
NAN_BOXED(3321888831,32,FLEN)
NAN_BOXED(2128210010,32,FLEN)
NAN_BOXED(2152411157,32,FLEN)
NAN_BOXED(3321888895,32,FLEN)
NAN_BOXED(2128210010,32,FLEN)
NAN_BOXED(2152411157,32,FLEN)
NAN_BOXED(3321889023,32,FLEN)
NAN_BOXED(2128210010,32,FLEN)
NAN_BOXED(2152411157,32,FLEN)
NAN_BOXED(3321889279,32,FLEN)
NAN_BOXED(2128210010,32,FLEN)
NAN_BOXED(2152411157,32,FLEN)
NAN_BOXED(3321889791,32,FLEN)
NAN_BOXED(2128210010,32,FLEN)
NAN_BOXED(2152411157,32,FLEN)
NAN_BOXED(3321890815,32,FLEN)
NAN_BOXED(2128210010,32,FLEN)
NAN_BOXED(2152411157,32,FLEN)
NAN_BOXED(3321892863,32,FLEN)
NAN_BOXED(2128210010,32,FLEN)
NAN_BOXED(2152411157,32,FLEN)
NAN_BOXED(3321896959,32,FLEN)
NAN_BOXED(2128210010,32,FLEN)
NAN_BOXED(2152411157,32,FLEN)
NAN_BOXED(3321905151,32,FLEN)
NAN_BOXED(2128210010,32,FLEN)
NAN_BOXED(2152411157,32,FLEN)
NAN_BOXED(3321921535,32,FLEN)
NAN_BOXED(2128210010,32,FLEN)
NAN_BOXED(2152411157,32,FLEN)
NAN_BOXED(3321954303,32,FLEN)
NAN_BOXED(2128210010,32,FLEN)
NAN_BOXED(2152411157,32,FLEN)
NAN_BOXED(3322019839,32,FLEN)
NAN_BOXED(2128210010,32,FLEN)
NAN_BOXED(2152411157,32,FLEN)
NAN_BOXED(3322150911,32,FLEN)
NAN_BOXED(2128210010,32,FLEN)
NAN_BOXED(2152411157,32,FLEN)
NAN_BOXED(3322413055,32,FLEN)
NAN_BOXED(2128210010,32,FLEN)
NAN_BOXED(2152411157,32,FLEN)
NAN_BOXED(3322937343,32,FLEN)
NAN_BOXED(2128210010,32,FLEN)
NAN_BOXED(2152411157,32,FLEN)
NAN_BOXED(3323985919,32,FLEN)
NAN_BOXED(2128210010,32,FLEN)
NAN_BOXED(2152411157,32,FLEN)
NAN_BOXED(3326083071,32,FLEN)
NAN_BOXED(2128210010,32,FLEN)
NAN_BOXED(2152411157,32,FLEN)
NAN_BOXED(3326083072,32,FLEN)
NAN_BOXED(2128210010,32,FLEN)
NAN_BOXED(2152411157,32,FLEN)
NAN_BOXED(3328180224,32,FLEN)
NAN_BOXED(2128210010,32,FLEN)
NAN_BOXED(2152411157,32,FLEN)
NAN_BOXED(3329228800,32,FLEN)
NAN_BOXED(2128210010,32,FLEN)
NAN_BOXED(2152411157,32,FLEN)
NAN_BOXED(3329753088,32,FLEN)
NAN_BOXED(2128210010,32,FLEN)
NAN_BOXED(2152411157,32,FLEN)
NAN_BOXED(3330015232,32,FLEN)
NAN_BOXED(2128210010,32,FLEN)
NAN_BOXED(2152411157,32,FLEN)
NAN_BOXED(3330146304,32,FLEN)
NAN_BOXED(2128210010,32,FLEN)
NAN_BOXED(2152411157,32,FLEN)
NAN_BOXED(3330211840,32,FLEN)
NAN_BOXED(2128210010,32,FLEN)
NAN_BOXED(2152411157,32,FLEN)
NAN_BOXED(3330244608,32,FLEN)
NAN_BOXED(2128210010,32,FLEN)
NAN_BOXED(2152411157,32,FLEN)
NAN_BOXED(3330260992,32,FLEN)
NAN_BOXED(2128210010,32,FLEN)
NAN_BOXED(2152411157,32,FLEN)
NAN_BOXED(3330269184,32,FLEN)
NAN_BOXED(2128210010,32,FLEN)
NAN_BOXED(2152411157,32,FLEN)
NAN_BOXED(3330273280,32,FLEN)
NAN_BOXED(2128210010,32,FLEN)
NAN_BOXED(2152411157,32,FLEN)
NAN_BOXED(3330275328,32,FLEN)
NAN_BOXED(2128210010,32,FLEN)
NAN_BOXED(2152411157,32,FLEN)
NAN_BOXED(3330276352,32,FLEN)
NAN_BOXED(2128210010,32,FLEN)
NAN_BOXED(2152411157,32,FLEN)
NAN_BOXED(3330276864,32,FLEN)
NAN_BOXED(2128210010,32,FLEN)
NAN_BOXED(2152411157,32,FLEN)
NAN_BOXED(3330277120,32,FLEN)
NAN_BOXED(2128210010,32,FLEN)
NAN_BOXED(2152411157,32,FLEN)
NAN_BOXED(3330277248,32,FLEN)
NAN_BOXED(2128210010,32,FLEN)
NAN_BOXED(2152411157,32,FLEN)
NAN_BOXED(3330277312,32,FLEN)
NAN_BOXED(2128210010,32,FLEN)
NAN_BOXED(2152411157,32,FLEN)
NAN_BOXED(3330277344,32,FLEN)
NAN_BOXED(2128210010,32,FLEN)
NAN_BOXED(2152411157,32,FLEN)
NAN_BOXED(3330277360,32,FLEN)
NAN_BOXED(2128210010,32,FLEN)
NAN_BOXED(2152411157,32,FLEN)
NAN_BOXED(3330277368,32,FLEN)
NAN_BOXED(2128210010,32,FLEN)
NAN_BOXED(2152411157,32,FLEN)
NAN_BOXED(3330277372,32,FLEN)
NAN_BOXED(2128210010,32,FLEN)
NAN_BOXED(2152411157,32,FLEN)
NAN_BOXED(3330277374,32,FLEN)
NAN_BOXED(2128210010,32,FLEN)
NAN_BOXED(2152411157,32,FLEN)
NAN_BOXED(3330277375,32,FLEN)
NAN_BOXED(2128210124,32,FLEN)
NAN_BOXED(2152411117,32,FLEN)
NAN_BOXED(2843738112,32,FLEN)
NAN_BOXED(2128210124,32,FLEN)
NAN_BOXED(2152411117,32,FLEN)
NAN_BOXED(2843738113,32,FLEN)
NAN_BOXED(2128210124,32,FLEN)
NAN_BOXED(2152411117,32,FLEN)
NAN_BOXED(2843738115,32,FLEN)
NAN_BOXED(2128210124,32,FLEN)
NAN_BOXED(2152411117,32,FLEN)
NAN_BOXED(2843738119,32,FLEN)
NAN_BOXED(2128210124,32,FLEN)
NAN_BOXED(2152411117,32,FLEN)
NAN_BOXED(2843738127,32,FLEN)
NAN_BOXED(2128210124,32,FLEN)
NAN_BOXED(2152411117,32,FLEN)
NAN_BOXED(2843738143,32,FLEN)
NAN_BOXED(2128210124,32,FLEN)
NAN_BOXED(2152411117,32,FLEN)
NAN_BOXED(2843738175,32,FLEN)
NAN_BOXED(2128210124,32,FLEN)
NAN_BOXED(2152411117,32,FLEN)
NAN_BOXED(2843738239,32,FLEN)
NAN_BOXED(2128210124,32,FLEN)
NAN_BOXED(2152411117,32,FLEN)
NAN_BOXED(2843738367,32,FLEN)
NAN_BOXED(2128210124,32,FLEN)
NAN_BOXED(2152411117,32,FLEN)
NAN_BOXED(2843738623,32,FLEN)
NAN_BOXED(2128210124,32,FLEN)
NAN_BOXED(2152411117,32,FLEN)
NAN_BOXED(2843739135,32,FLEN)
NAN_BOXED(2128210124,32,FLEN)
NAN_BOXED(2152411117,32,FLEN)
NAN_BOXED(2843740159,32,FLEN)
NAN_BOXED(2128210124,32,FLEN)
NAN_BOXED(2152411117,32,FLEN)
NAN_BOXED(2843742207,32,FLEN)
NAN_BOXED(2128210124,32,FLEN)
NAN_BOXED(2152411117,32,FLEN)
NAN_BOXED(2843746303,32,FLEN)
NAN_BOXED(2128210124,32,FLEN)
NAN_BOXED(2152411117,32,FLEN)
NAN_BOXED(2843754495,32,FLEN)
NAN_BOXED(2128210124,32,FLEN)
NAN_BOXED(2152411117,32,FLEN)
NAN_BOXED(2843770879,32,FLEN)
NAN_BOXED(2128210124,32,FLEN)
NAN_BOXED(2152411117,32,FLEN)
NAN_BOXED(2843803647,32,FLEN)
NAN_BOXED(2128210124,32,FLEN)
NAN_BOXED(2152411117,32,FLEN)
NAN_BOXED(2843869183,32,FLEN)
NAN_BOXED(2128210124,32,FLEN)
NAN_BOXED(2152411117,32,FLEN)
NAN_BOXED(2844000255,32,FLEN)
NAN_BOXED(2128210124,32,FLEN)
NAN_BOXED(2152411117,32,FLEN)
NAN_BOXED(2844262399,32,FLEN)
NAN_BOXED(2128210124,32,FLEN)
NAN_BOXED(2152411117,32,FLEN)
NAN_BOXED(2844786687,32,FLEN)
NAN_BOXED(2128210124,32,FLEN)
NAN_BOXED(2152411117,32,FLEN)
NAN_BOXED(2845835263,32,FLEN)
NAN_BOXED(2128210124,32,FLEN)
NAN_BOXED(2152411117,32,FLEN)
NAN_BOXED(2847932415,32,FLEN)
NAN_BOXED(2128210124,32,FLEN)
NAN_BOXED(2152411117,32,FLEN)
NAN_BOXED(2847932416,32,FLEN)
NAN_BOXED(2128210124,32,FLEN)
NAN_BOXED(2152411117,32,FLEN)
NAN_BOXED(2850029568,32,FLEN)
NAN_BOXED(2128210124,32,FLEN)
NAN_BOXED(2152411117,32,FLEN)
NAN_BOXED(2851078144,32,FLEN)
NAN_BOXED(2128210124,32,FLEN)
NAN_BOXED(2152411117,32,FLEN)
NAN_BOXED(2851602432,32,FLEN)
NAN_BOXED(2128210124,32,FLEN)
NAN_BOXED(2152411117,32,FLEN)
NAN_BOXED(2851864576,32,FLEN)
NAN_BOXED(2128210124,32,FLEN)
NAN_BOXED(2152411117,32,FLEN)
NAN_BOXED(2851995648,32,FLEN)
NAN_BOXED(2128210124,32,FLEN)
NAN_BOXED(2152411117,32,FLEN)
NAN_BOXED(2852061184,32,FLEN)
NAN_BOXED(2128210124,32,FLEN)
NAN_BOXED(2152411117,32,FLEN)
NAN_BOXED(2852093952,32,FLEN)
NAN_BOXED(2128210124,32,FLEN)
NAN_BOXED(2152411117,32,FLEN)
NAN_BOXED(2852110336,32,FLEN)
NAN_BOXED(2128210124,32,FLEN)
NAN_BOXED(2152411117,32,FLEN)
NAN_BOXED(2852118528,32,FLEN)
NAN_BOXED(2128210124,32,FLEN)
NAN_BOXED(2152411117,32,FLEN)
NAN_BOXED(2852122624,32,FLEN)
NAN_BOXED(2128210124,32,FLEN)
NAN_BOXED(2152411117,32,FLEN)
NAN_BOXED(2852124672,32,FLEN)
NAN_BOXED(2128210124,32,FLEN)
NAN_BOXED(2152411117,32,FLEN)
NAN_BOXED(2852125696,32,FLEN)
NAN_BOXED(2128210124,32,FLEN)
NAN_BOXED(2152411117,32,FLEN)
NAN_BOXED(2852126208,32,FLEN)
NAN_BOXED(2128210124,32,FLEN)
NAN_BOXED(2152411117,32,FLEN)
NAN_BOXED(2852126464,32,FLEN)
NAN_BOXED(2128210124,32,FLEN)
NAN_BOXED(2152411117,32,FLEN)
NAN_BOXED(2852126592,32,FLEN)
NAN_BOXED(2128210124,32,FLEN)
NAN_BOXED(2152411117,32,FLEN)
NAN_BOXED(2852126656,32,FLEN)
NAN_BOXED(2128210124,32,FLEN)
NAN_BOXED(2152411117,32,FLEN)
NAN_BOXED(2852126688,32,FLEN)
NAN_BOXED(2128210124,32,FLEN)
NAN_BOXED(2152411117,32,FLEN)
NAN_BOXED(2852126704,32,FLEN)
NAN_BOXED(2128210124,32,FLEN)
NAN_BOXED(2152411117,32,FLEN)
NAN_BOXED(2852126712,32,FLEN)
NAN_BOXED(2128210124,32,FLEN)
NAN_BOXED(2152411117,32,FLEN)
NAN_BOXED(2852126716,32,FLEN)
NAN_BOXED(2128210124,32,FLEN)
NAN_BOXED(2152411117,32,FLEN)
NAN_BOXED(2852126718,32,FLEN)
NAN_BOXED(2128210124,32,FLEN)
NAN_BOXED(2152411117,32,FLEN)
NAN_BOXED(2852126719,32,FLEN)
NAN_BOXED(2128210124,32,FLEN)
NAN_BOXED(2152411117,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2128210124,32,FLEN)
NAN_BOXED(2152411117,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2128210124,32,FLEN)
NAN_BOXED(2152411117,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
