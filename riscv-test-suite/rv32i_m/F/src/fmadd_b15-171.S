
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:17:59 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_21760:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5aca86 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4ae25b and fs3 == 0 and fe3 == 0x88 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edaca86; op2val:0x4ae25b;
op3val:0x447fff00; valaddr_reg:x3; val_offset:65280*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65280*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21761:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5aca86 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4ae25b and fs3 == 0 and fe3 == 0x88 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edaca86; op2val:0x4ae25b;
op3val:0x447fff80; valaddr_reg:x3; val_offset:65283*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65283*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21762:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5aca86 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4ae25b and fs3 == 0 and fe3 == 0x88 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edaca86; op2val:0x4ae25b;
op3val:0x447fffc0; valaddr_reg:x3; val_offset:65286*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65286*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21763:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5aca86 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4ae25b and fs3 == 0 and fe3 == 0x88 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edaca86; op2val:0x4ae25b;
op3val:0x447fffe0; valaddr_reg:x3; val_offset:65289*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65289*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21764:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5aca86 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4ae25b and fs3 == 0 and fe3 == 0x88 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edaca86; op2val:0x4ae25b;
op3val:0x447ffff0; valaddr_reg:x3; val_offset:65292*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65292*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21765:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5aca86 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4ae25b and fs3 == 0 and fe3 == 0x88 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edaca86; op2val:0x4ae25b;
op3val:0x447ffff8; valaddr_reg:x3; val_offset:65295*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65295*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21766:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5aca86 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4ae25b and fs3 == 0 and fe3 == 0x88 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edaca86; op2val:0x4ae25b;
op3val:0x447ffffc; valaddr_reg:x3; val_offset:65298*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65298*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21767:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5aca86 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4ae25b and fs3 == 0 and fe3 == 0x88 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edaca86; op2val:0x4ae25b;
op3val:0x447ffffe; valaddr_reg:x3; val_offset:65301*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65301*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21768:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5aca86 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4ae25b and fs3 == 0 and fe3 == 0x88 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edaca86; op2val:0x4ae25b;
op3val:0x447fffff; valaddr_reg:x3; val_offset:65304*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65304*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21769:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5afb7d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edafb7d; op2val:0x80000000;
op3val:0x80000001; valaddr_reg:x3; val_offset:65307*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65307*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21770:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5afb7d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edafb7d; op2val:0x80000000;
op3val:0x80000003; valaddr_reg:x3; val_offset:65310*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65310*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21771:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5afb7d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edafb7d; op2val:0x80000000;
op3val:0x80000007; valaddr_reg:x3; val_offset:65313*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65313*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21772:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5afb7d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edafb7d; op2val:0x80000000;
op3val:0x80199999; valaddr_reg:x3; val_offset:65316*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65316*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21773:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5afb7d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edafb7d; op2val:0x80000000;
op3val:0x80249249; valaddr_reg:x3; val_offset:65319*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65319*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21774:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5afb7d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edafb7d; op2val:0x80000000;
op3val:0x80333333; valaddr_reg:x3; val_offset:65322*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65322*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21775:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5afb7d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edafb7d; op2val:0x80000000;
op3val:0x8036db6d; valaddr_reg:x3; val_offset:65325*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65325*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21776:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5afb7d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edafb7d; op2val:0x80000000;
op3val:0x803bbbbb; valaddr_reg:x3; val_offset:65328*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65328*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21777:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5afb7d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edafb7d; op2val:0x80000000;
op3val:0x80444444; valaddr_reg:x3; val_offset:65331*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65331*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21778:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5afb7d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edafb7d; op2val:0x80000000;
op3val:0x804ccccc; valaddr_reg:x3; val_offset:65334*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65334*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21779:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5afb7d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edafb7d; op2val:0x80000000;
op3val:0x805b6db6; valaddr_reg:x3; val_offset:65337*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65337*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21780:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5afb7d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edafb7d; op2val:0x80000000;
op3val:0x80666666; valaddr_reg:x3; val_offset:65340*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65340*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21781:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5afb7d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edafb7d; op2val:0x80000000;
op3val:0x806db6db; valaddr_reg:x3; val_offset:65343*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65343*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21782:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5afb7d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edafb7d; op2val:0x80000000;
op3val:0x807ffff8; valaddr_reg:x3; val_offset:65346*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65346*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21783:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5afb7d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edafb7d; op2val:0x80000000;
op3val:0x807ffffc; valaddr_reg:x3; val_offset:65349*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65349*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21784:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5afb7d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edafb7d; op2val:0x80000000;
op3val:0x807ffffe; valaddr_reg:x3; val_offset:65352*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65352*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21785:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5afb7d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edafb7d; op2val:0x80000000;
op3val:0x8b000000; valaddr_reg:x3; val_offset:65355*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65355*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21786:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5afb7d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edafb7d; op2val:0x80000000;
op3val:0x8b000001; valaddr_reg:x3; val_offset:65358*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65358*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21787:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5afb7d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edafb7d; op2val:0x80000000;
op3val:0x8b000003; valaddr_reg:x3; val_offset:65361*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65361*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21788:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5afb7d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edafb7d; op2val:0x80000000;
op3val:0x8b000007; valaddr_reg:x3; val_offset:65364*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65364*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21789:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5afb7d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edafb7d; op2val:0x80000000;
op3val:0x8b00000f; valaddr_reg:x3; val_offset:65367*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65367*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21790:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5afb7d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edafb7d; op2val:0x80000000;
op3val:0x8b00001f; valaddr_reg:x3; val_offset:65370*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65370*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21791:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5afb7d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edafb7d; op2val:0x80000000;
op3val:0x8b00003f; valaddr_reg:x3; val_offset:65373*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65373*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21792:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5afb7d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edafb7d; op2val:0x80000000;
op3val:0x8b00007f; valaddr_reg:x3; val_offset:65376*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65376*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21793:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5afb7d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edafb7d; op2val:0x80000000;
op3val:0x8b0000ff; valaddr_reg:x3; val_offset:65379*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65379*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21794:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5afb7d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edafb7d; op2val:0x80000000;
op3val:0x8b0001ff; valaddr_reg:x3; val_offset:65382*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65382*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21795:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5afb7d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edafb7d; op2val:0x80000000;
op3val:0x8b0003ff; valaddr_reg:x3; val_offset:65385*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65385*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21796:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5afb7d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edafb7d; op2val:0x80000000;
op3val:0x8b0007ff; valaddr_reg:x3; val_offset:65388*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65388*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21797:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5afb7d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edafb7d; op2val:0x80000000;
op3val:0x8b000fff; valaddr_reg:x3; val_offset:65391*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65391*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21798:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5afb7d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edafb7d; op2val:0x80000000;
op3val:0x8b001fff; valaddr_reg:x3; val_offset:65394*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65394*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21799:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5afb7d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edafb7d; op2val:0x80000000;
op3val:0x8b003fff; valaddr_reg:x3; val_offset:65397*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65397*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21800:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5afb7d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edafb7d; op2val:0x80000000;
op3val:0x8b007fff; valaddr_reg:x3; val_offset:65400*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65400*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21801:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5afb7d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edafb7d; op2val:0x80000000;
op3val:0x8b00ffff; valaddr_reg:x3; val_offset:65403*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65403*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21802:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5afb7d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edafb7d; op2val:0x80000000;
op3val:0x8b01ffff; valaddr_reg:x3; val_offset:65406*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65406*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21803:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5afb7d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edafb7d; op2val:0x80000000;
op3val:0x8b03ffff; valaddr_reg:x3; val_offset:65409*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65409*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21804:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5afb7d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edafb7d; op2val:0x80000000;
op3val:0x8b07ffff; valaddr_reg:x3; val_offset:65412*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65412*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21805:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5afb7d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edafb7d; op2val:0x80000000;
op3val:0x8b0fffff; valaddr_reg:x3; val_offset:65415*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65415*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21806:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5afb7d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edafb7d; op2val:0x80000000;
op3val:0x8b1fffff; valaddr_reg:x3; val_offset:65418*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65418*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21807:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5afb7d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edafb7d; op2val:0x80000000;
op3val:0x8b3fffff; valaddr_reg:x3; val_offset:65421*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65421*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21808:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5afb7d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edafb7d; op2val:0x80000000;
op3val:0x8b400000; valaddr_reg:x3; val_offset:65424*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65424*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21809:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5afb7d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edafb7d; op2val:0x80000000;
op3val:0x8b600000; valaddr_reg:x3; val_offset:65427*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65427*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21810:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5afb7d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edafb7d; op2val:0x80000000;
op3val:0x8b700000; valaddr_reg:x3; val_offset:65430*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65430*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21811:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5afb7d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edafb7d; op2val:0x80000000;
op3val:0x8b780000; valaddr_reg:x3; val_offset:65433*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65433*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21812:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5afb7d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edafb7d; op2val:0x80000000;
op3val:0x8b7c0000; valaddr_reg:x3; val_offset:65436*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65436*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21813:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5afb7d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edafb7d; op2val:0x80000000;
op3val:0x8b7e0000; valaddr_reg:x3; val_offset:65439*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65439*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21814:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5afb7d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edafb7d; op2val:0x80000000;
op3val:0x8b7f0000; valaddr_reg:x3; val_offset:65442*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65442*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21815:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5afb7d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edafb7d; op2val:0x80000000;
op3val:0x8b7f8000; valaddr_reg:x3; val_offset:65445*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65445*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21816:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5afb7d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edafb7d; op2val:0x80000000;
op3val:0x8b7fc000; valaddr_reg:x3; val_offset:65448*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65448*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21817:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5afb7d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edafb7d; op2val:0x80000000;
op3val:0x8b7fe000; valaddr_reg:x3; val_offset:65451*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65451*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21818:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5afb7d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edafb7d; op2val:0x80000000;
op3val:0x8b7ff000; valaddr_reg:x3; val_offset:65454*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65454*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21819:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5afb7d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edafb7d; op2val:0x80000000;
op3val:0x8b7ff800; valaddr_reg:x3; val_offset:65457*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65457*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21820:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5afb7d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edafb7d; op2val:0x80000000;
op3val:0x8b7ffc00; valaddr_reg:x3; val_offset:65460*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65460*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21821:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5afb7d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edafb7d; op2val:0x80000000;
op3val:0x8b7ffe00; valaddr_reg:x3; val_offset:65463*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65463*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21822:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5afb7d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edafb7d; op2val:0x80000000;
op3val:0x8b7fff00; valaddr_reg:x3; val_offset:65466*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65466*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21823:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5afb7d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edafb7d; op2val:0x80000000;
op3val:0x8b7fff80; valaddr_reg:x3; val_offset:65469*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65469*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21824:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5afb7d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edafb7d; op2val:0x80000000;
op3val:0x8b7fffc0; valaddr_reg:x3; val_offset:65472*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65472*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21825:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5afb7d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edafb7d; op2val:0x80000000;
op3val:0x8b7fffe0; valaddr_reg:x3; val_offset:65475*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65475*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21826:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5afb7d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edafb7d; op2val:0x80000000;
op3val:0x8b7ffff0; valaddr_reg:x3; val_offset:65478*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65478*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21827:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5afb7d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edafb7d; op2val:0x80000000;
op3val:0x8b7ffff8; valaddr_reg:x3; val_offset:65481*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65481*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21828:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5afb7d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edafb7d; op2val:0x80000000;
op3val:0x8b7ffffc; valaddr_reg:x3; val_offset:65484*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65484*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21829:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5afb7d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edafb7d; op2val:0x80000000;
op3val:0x8b7ffffe; valaddr_reg:x3; val_offset:65487*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65487*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21830:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5afb7d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edafb7d; op2val:0x80000000;
op3val:0x8b7fffff; valaddr_reg:x3; val_offset:65490*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65490*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21831:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5b91e9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edb91e9; op2val:0x80000000;
op3val:0x80800001; valaddr_reg:x3; val_offset:65493*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65493*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21832:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5b91e9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edb91e9; op2val:0x80000000;
op3val:0x80800003; valaddr_reg:x3; val_offset:65496*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65496*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21833:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5b91e9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edb91e9; op2val:0x80000000;
op3val:0x80800007; valaddr_reg:x3; val_offset:65499*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65499*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21834:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5b91e9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edb91e9; op2val:0x80000000;
op3val:0x80999999; valaddr_reg:x3; val_offset:65502*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65502*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21835:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5b91e9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edb91e9; op2val:0x80000000;
op3val:0x80a49249; valaddr_reg:x3; val_offset:65505*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65505*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21836:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5b91e9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edb91e9; op2val:0x80000000;
op3val:0x80b33333; valaddr_reg:x3; val_offset:65508*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65508*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21837:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5b91e9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edb91e9; op2val:0x80000000;
op3val:0x80b6db6d; valaddr_reg:x3; val_offset:65511*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65511*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21838:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5b91e9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edb91e9; op2val:0x80000000;
op3val:0x80bbbbbb; valaddr_reg:x3; val_offset:65514*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65514*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21839:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5b91e9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edb91e9; op2val:0x80000000;
op3val:0x80c44444; valaddr_reg:x3; val_offset:65517*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65517*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21840:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5b91e9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edb91e9; op2val:0x80000000;
op3val:0x80cccccc; valaddr_reg:x3; val_offset:65520*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65520*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21841:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5b91e9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edb91e9; op2val:0x80000000;
op3val:0x80db6db6; valaddr_reg:x3; val_offset:65523*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65523*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21842:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5b91e9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edb91e9; op2val:0x80000000;
op3val:0x80e66666; valaddr_reg:x3; val_offset:65526*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65526*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21843:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5b91e9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edb91e9; op2val:0x80000000;
op3val:0x80edb6db; valaddr_reg:x3; val_offset:65529*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65529*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21844:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5b91e9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edb91e9; op2val:0x80000000;
op3val:0x80fffff8; valaddr_reg:x3; val_offset:65532*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65532*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21845:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5b91e9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edb91e9; op2val:0x80000000;
op3val:0x80fffffc; valaddr_reg:x3; val_offset:65535*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65535*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21846:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5b91e9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edb91e9; op2val:0x80000000;
op3val:0x80fffffe; valaddr_reg:x3; val_offset:65538*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65538*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21847:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5b91e9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edb91e9; op2val:0x80000000;
op3val:0x88800000; valaddr_reg:x3; val_offset:65541*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65541*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21848:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5b91e9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edb91e9; op2val:0x80000000;
op3val:0x88800001; valaddr_reg:x3; val_offset:65544*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65544*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21849:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5b91e9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edb91e9; op2val:0x80000000;
op3val:0x88800003; valaddr_reg:x3; val_offset:65547*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65547*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21850:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5b91e9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edb91e9; op2val:0x80000000;
op3val:0x88800007; valaddr_reg:x3; val_offset:65550*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65550*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21851:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5b91e9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edb91e9; op2val:0x80000000;
op3val:0x8880000f; valaddr_reg:x3; val_offset:65553*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65553*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21852:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5b91e9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edb91e9; op2val:0x80000000;
op3val:0x8880001f; valaddr_reg:x3; val_offset:65556*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65556*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21853:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5b91e9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edb91e9; op2val:0x80000000;
op3val:0x8880003f; valaddr_reg:x3; val_offset:65559*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65559*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21854:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5b91e9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edb91e9; op2val:0x80000000;
op3val:0x8880007f; valaddr_reg:x3; val_offset:65562*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65562*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21855:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5b91e9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edb91e9; op2val:0x80000000;
op3val:0x888000ff; valaddr_reg:x3; val_offset:65565*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65565*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21856:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5b91e9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edb91e9; op2val:0x80000000;
op3val:0x888001ff; valaddr_reg:x3; val_offset:65568*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65568*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21857:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5b91e9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edb91e9; op2val:0x80000000;
op3val:0x888003ff; valaddr_reg:x3; val_offset:65571*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65571*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21858:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5b91e9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edb91e9; op2val:0x80000000;
op3val:0x888007ff; valaddr_reg:x3; val_offset:65574*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65574*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21859:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5b91e9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edb91e9; op2val:0x80000000;
op3val:0x88800fff; valaddr_reg:x3; val_offset:65577*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65577*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21860:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5b91e9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edb91e9; op2val:0x80000000;
op3val:0x88801fff; valaddr_reg:x3; val_offset:65580*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65580*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21861:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5b91e9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edb91e9; op2val:0x80000000;
op3val:0x88803fff; valaddr_reg:x3; val_offset:65583*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65583*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21862:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5b91e9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edb91e9; op2val:0x80000000;
op3val:0x88807fff; valaddr_reg:x3; val_offset:65586*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65586*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21863:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5b91e9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edb91e9; op2val:0x80000000;
op3val:0x8880ffff; valaddr_reg:x3; val_offset:65589*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65589*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21864:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5b91e9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edb91e9; op2val:0x80000000;
op3val:0x8881ffff; valaddr_reg:x3; val_offset:65592*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65592*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21865:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5b91e9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edb91e9; op2val:0x80000000;
op3val:0x8883ffff; valaddr_reg:x3; val_offset:65595*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65595*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21866:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5b91e9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edb91e9; op2val:0x80000000;
op3val:0x8887ffff; valaddr_reg:x3; val_offset:65598*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65598*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21867:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5b91e9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edb91e9; op2val:0x80000000;
op3val:0x888fffff; valaddr_reg:x3; val_offset:65601*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65601*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21868:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5b91e9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edb91e9; op2val:0x80000000;
op3val:0x889fffff; valaddr_reg:x3; val_offset:65604*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65604*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21869:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5b91e9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edb91e9; op2val:0x80000000;
op3val:0x88bfffff; valaddr_reg:x3; val_offset:65607*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65607*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21870:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5b91e9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edb91e9; op2val:0x80000000;
op3val:0x88c00000; valaddr_reg:x3; val_offset:65610*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65610*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21871:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5b91e9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edb91e9; op2val:0x80000000;
op3val:0x88e00000; valaddr_reg:x3; val_offset:65613*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65613*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21872:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5b91e9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edb91e9; op2val:0x80000000;
op3val:0x88f00000; valaddr_reg:x3; val_offset:65616*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65616*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21873:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5b91e9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edb91e9; op2val:0x80000000;
op3val:0x88f80000; valaddr_reg:x3; val_offset:65619*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65619*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21874:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5b91e9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edb91e9; op2val:0x80000000;
op3val:0x88fc0000; valaddr_reg:x3; val_offset:65622*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65622*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21875:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5b91e9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edb91e9; op2val:0x80000000;
op3val:0x88fe0000; valaddr_reg:x3; val_offset:65625*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65625*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21876:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5b91e9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edb91e9; op2val:0x80000000;
op3val:0x88ff0000; valaddr_reg:x3; val_offset:65628*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65628*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21877:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5b91e9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edb91e9; op2val:0x80000000;
op3val:0x88ff8000; valaddr_reg:x3; val_offset:65631*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65631*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21878:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5b91e9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edb91e9; op2val:0x80000000;
op3val:0x88ffc000; valaddr_reg:x3; val_offset:65634*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65634*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21879:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5b91e9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edb91e9; op2val:0x80000000;
op3val:0x88ffe000; valaddr_reg:x3; val_offset:65637*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65637*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21880:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5b91e9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edb91e9; op2val:0x80000000;
op3val:0x88fff000; valaddr_reg:x3; val_offset:65640*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65640*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21881:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5b91e9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edb91e9; op2val:0x80000000;
op3val:0x88fff800; valaddr_reg:x3; val_offset:65643*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65643*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21882:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5b91e9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edb91e9; op2val:0x80000000;
op3val:0x88fffc00; valaddr_reg:x3; val_offset:65646*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65646*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21883:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5b91e9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edb91e9; op2val:0x80000000;
op3val:0x88fffe00; valaddr_reg:x3; val_offset:65649*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65649*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21884:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5b91e9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edb91e9; op2val:0x80000000;
op3val:0x88ffff00; valaddr_reg:x3; val_offset:65652*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65652*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21885:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5b91e9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edb91e9; op2val:0x80000000;
op3val:0x88ffff80; valaddr_reg:x3; val_offset:65655*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65655*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21886:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5b91e9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edb91e9; op2val:0x80000000;
op3val:0x88ffffc0; valaddr_reg:x3; val_offset:65658*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65658*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21887:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5b91e9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edb91e9; op2val:0x80000000;
op3val:0x88ffffe0; valaddr_reg:x3; val_offset:65661*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65661*0 + 3*170*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2128267910,32,FLEN)
NAN_BOXED(4907611,32,FLEN)
NAN_BOXED(1149239040,32,FLEN)
NAN_BOXED(2128267910,32,FLEN)
NAN_BOXED(4907611,32,FLEN)
NAN_BOXED(1149239168,32,FLEN)
NAN_BOXED(2128267910,32,FLEN)
NAN_BOXED(4907611,32,FLEN)
NAN_BOXED(1149239232,32,FLEN)
NAN_BOXED(2128267910,32,FLEN)
NAN_BOXED(4907611,32,FLEN)
NAN_BOXED(1149239264,32,FLEN)
NAN_BOXED(2128267910,32,FLEN)
NAN_BOXED(4907611,32,FLEN)
NAN_BOXED(1149239280,32,FLEN)
NAN_BOXED(2128267910,32,FLEN)
NAN_BOXED(4907611,32,FLEN)
NAN_BOXED(1149239288,32,FLEN)
NAN_BOXED(2128267910,32,FLEN)
NAN_BOXED(4907611,32,FLEN)
NAN_BOXED(1149239292,32,FLEN)
NAN_BOXED(2128267910,32,FLEN)
NAN_BOXED(4907611,32,FLEN)
NAN_BOXED(1149239294,32,FLEN)
NAN_BOXED(2128267910,32,FLEN)
NAN_BOXED(4907611,32,FLEN)
NAN_BOXED(1149239295,32,FLEN)
NAN_BOXED(2128280445,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2128280445,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483651,32,FLEN)
NAN_BOXED(2128280445,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483655,32,FLEN)
NAN_BOXED(2128280445,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149161369,32,FLEN)
NAN_BOXED(2128280445,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149880393,32,FLEN)
NAN_BOXED(2128280445,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2150839091,32,FLEN)
NAN_BOXED(2128280445,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151078765,32,FLEN)
NAN_BOXED(2128280445,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151398331,32,FLEN)
NAN_BOXED(2128280445,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151957572,32,FLEN)
NAN_BOXED(2128280445,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2152516812,32,FLEN)
NAN_BOXED(2128280445,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2153475510,32,FLEN)
NAN_BOXED(2128280445,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154194534,32,FLEN)
NAN_BOXED(2128280445,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154673883,32,FLEN)
NAN_BOXED(2128280445,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872248,32,FLEN)
NAN_BOXED(2128280445,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872252,32,FLEN)
NAN_BOXED(2128280445,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2128280445,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332033024,32,FLEN)
NAN_BOXED(2128280445,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332033025,32,FLEN)
NAN_BOXED(2128280445,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332033027,32,FLEN)
NAN_BOXED(2128280445,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332033031,32,FLEN)
NAN_BOXED(2128280445,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332033039,32,FLEN)
NAN_BOXED(2128280445,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332033055,32,FLEN)
NAN_BOXED(2128280445,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332033087,32,FLEN)
NAN_BOXED(2128280445,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332033151,32,FLEN)
NAN_BOXED(2128280445,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332033279,32,FLEN)
NAN_BOXED(2128280445,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332033535,32,FLEN)
NAN_BOXED(2128280445,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332034047,32,FLEN)
NAN_BOXED(2128280445,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332035071,32,FLEN)
NAN_BOXED(2128280445,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332037119,32,FLEN)
NAN_BOXED(2128280445,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332041215,32,FLEN)
NAN_BOXED(2128280445,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332049407,32,FLEN)
NAN_BOXED(2128280445,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332065791,32,FLEN)
NAN_BOXED(2128280445,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332098559,32,FLEN)
NAN_BOXED(2128280445,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332164095,32,FLEN)
NAN_BOXED(2128280445,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332295167,32,FLEN)
NAN_BOXED(2128280445,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332557311,32,FLEN)
NAN_BOXED(2128280445,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2333081599,32,FLEN)
NAN_BOXED(2128280445,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2334130175,32,FLEN)
NAN_BOXED(2128280445,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2336227327,32,FLEN)
NAN_BOXED(2128280445,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2336227328,32,FLEN)
NAN_BOXED(2128280445,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2338324480,32,FLEN)
NAN_BOXED(2128280445,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2339373056,32,FLEN)
NAN_BOXED(2128280445,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2339897344,32,FLEN)
NAN_BOXED(2128280445,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340159488,32,FLEN)
NAN_BOXED(2128280445,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340290560,32,FLEN)
NAN_BOXED(2128280445,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340356096,32,FLEN)
NAN_BOXED(2128280445,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340388864,32,FLEN)
NAN_BOXED(2128280445,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340405248,32,FLEN)
NAN_BOXED(2128280445,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340413440,32,FLEN)
NAN_BOXED(2128280445,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340417536,32,FLEN)
NAN_BOXED(2128280445,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340419584,32,FLEN)
NAN_BOXED(2128280445,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340420608,32,FLEN)
NAN_BOXED(2128280445,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340421120,32,FLEN)
NAN_BOXED(2128280445,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340421376,32,FLEN)
NAN_BOXED(2128280445,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340421504,32,FLEN)
NAN_BOXED(2128280445,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340421568,32,FLEN)
NAN_BOXED(2128280445,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340421600,32,FLEN)
NAN_BOXED(2128280445,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340421616,32,FLEN)
NAN_BOXED(2128280445,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340421624,32,FLEN)
NAN_BOXED(2128280445,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340421628,32,FLEN)
NAN_BOXED(2128280445,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340421630,32,FLEN)
NAN_BOXED(2128280445,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340421631,32,FLEN)
NAN_BOXED(2128318953,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872257,32,FLEN)
NAN_BOXED(2128318953,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872259,32,FLEN)
NAN_BOXED(2128318953,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872263,32,FLEN)
NAN_BOXED(2128318953,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2157549977,32,FLEN)
NAN_BOXED(2128318953,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2158269001,32,FLEN)
NAN_BOXED(2128318953,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2159227699,32,FLEN)
NAN_BOXED(2128318953,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2159467373,32,FLEN)
NAN_BOXED(2128318953,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2159786939,32,FLEN)
NAN_BOXED(2128318953,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2160346180,32,FLEN)
NAN_BOXED(2128318953,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2160905420,32,FLEN)
NAN_BOXED(2128318953,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2161864118,32,FLEN)
NAN_BOXED(2128318953,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2162583142,32,FLEN)
NAN_BOXED(2128318953,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2163062491,32,FLEN)
NAN_BOXED(2128318953,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260856,32,FLEN)
NAN_BOXED(2128318953,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260860,32,FLEN)
NAN_BOXED(2128318953,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260862,32,FLEN)
NAN_BOXED(2128318953,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290089984,32,FLEN)
NAN_BOXED(2128318953,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290089985,32,FLEN)
NAN_BOXED(2128318953,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290089987,32,FLEN)
NAN_BOXED(2128318953,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290089991,32,FLEN)
NAN_BOXED(2128318953,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290089999,32,FLEN)
NAN_BOXED(2128318953,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290090015,32,FLEN)
NAN_BOXED(2128318953,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290090047,32,FLEN)
NAN_BOXED(2128318953,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290090111,32,FLEN)
NAN_BOXED(2128318953,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290090239,32,FLEN)
NAN_BOXED(2128318953,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290090495,32,FLEN)
NAN_BOXED(2128318953,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290091007,32,FLEN)
NAN_BOXED(2128318953,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290092031,32,FLEN)
NAN_BOXED(2128318953,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290094079,32,FLEN)
NAN_BOXED(2128318953,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290098175,32,FLEN)
NAN_BOXED(2128318953,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290106367,32,FLEN)
NAN_BOXED(2128318953,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290122751,32,FLEN)
NAN_BOXED(2128318953,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290155519,32,FLEN)
NAN_BOXED(2128318953,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290221055,32,FLEN)
NAN_BOXED(2128318953,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290352127,32,FLEN)
NAN_BOXED(2128318953,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290614271,32,FLEN)
NAN_BOXED(2128318953,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2291138559,32,FLEN)
NAN_BOXED(2128318953,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2292187135,32,FLEN)
NAN_BOXED(2128318953,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2294284287,32,FLEN)
NAN_BOXED(2128318953,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2294284288,32,FLEN)
NAN_BOXED(2128318953,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2296381440,32,FLEN)
NAN_BOXED(2128318953,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2297430016,32,FLEN)
NAN_BOXED(2128318953,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2297954304,32,FLEN)
NAN_BOXED(2128318953,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298216448,32,FLEN)
NAN_BOXED(2128318953,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298347520,32,FLEN)
NAN_BOXED(2128318953,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298413056,32,FLEN)
NAN_BOXED(2128318953,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298445824,32,FLEN)
NAN_BOXED(2128318953,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298462208,32,FLEN)
NAN_BOXED(2128318953,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298470400,32,FLEN)
NAN_BOXED(2128318953,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298474496,32,FLEN)
NAN_BOXED(2128318953,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298476544,32,FLEN)
NAN_BOXED(2128318953,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298477568,32,FLEN)
NAN_BOXED(2128318953,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298478080,32,FLEN)
NAN_BOXED(2128318953,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298478336,32,FLEN)
NAN_BOXED(2128318953,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298478464,32,FLEN)
NAN_BOXED(2128318953,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298478528,32,FLEN)
NAN_BOXED(2128318953,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298478560,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
