
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:17:59 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_21888:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5b91e9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edb91e9; op2val:0x80000000;
op3val:0x88fffff0; valaddr_reg:x3; val_offset:65664*0 + 3*171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65664*0 + 3*171*FLEN/8, x4, x1, x2)

inst_21889:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5b91e9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edb91e9; op2val:0x80000000;
op3val:0x88fffff8; valaddr_reg:x3; val_offset:65667*0 + 3*171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65667*0 + 3*171*FLEN/8, x4, x1, x2)

inst_21890:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5b91e9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edb91e9; op2val:0x80000000;
op3val:0x88fffffc; valaddr_reg:x3; val_offset:65670*0 + 3*171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65670*0 + 3*171*FLEN/8, x4, x1, x2)

inst_21891:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5b91e9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edb91e9; op2val:0x80000000;
op3val:0x88fffffe; valaddr_reg:x3; val_offset:65673*0 + 3*171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65673*0 + 3*171*FLEN/8, x4, x1, x2)

inst_21892:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5b91e9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edb91e9; op2val:0x80000000;
op3val:0x88ffffff; valaddr_reg:x3; val_offset:65676*0 + 3*171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65676*0 + 3*171*FLEN/8, x4, x1, x2)

inst_21893:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c68b4 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x14ab47 and fs3 == 1 and fe3 == 0xfd and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc68b4; op2val:0xc014ab47;
op3val:0xfe800000; valaddr_reg:x3; val_offset:65679*0 + 3*171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65679*0 + 3*171*FLEN/8, x4, x1, x2)

inst_21894:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c68b4 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x14ab47 and fs3 == 1 and fe3 == 0xfd and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc68b4; op2val:0xc014ab47;
op3val:0xfe800001; valaddr_reg:x3; val_offset:65682*0 + 3*171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65682*0 + 3*171*FLEN/8, x4, x1, x2)

inst_21895:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c68b4 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x14ab47 and fs3 == 1 and fe3 == 0xfd and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc68b4; op2val:0xc014ab47;
op3val:0xfe800003; valaddr_reg:x3; val_offset:65685*0 + 3*171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65685*0 + 3*171*FLEN/8, x4, x1, x2)

inst_21896:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c68b4 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x14ab47 and fs3 == 1 and fe3 == 0xfd and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc68b4; op2val:0xc014ab47;
op3val:0xfe800007; valaddr_reg:x3; val_offset:65688*0 + 3*171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65688*0 + 3*171*FLEN/8, x4, x1, x2)

inst_21897:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c68b4 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x14ab47 and fs3 == 1 and fe3 == 0xfd and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc68b4; op2val:0xc014ab47;
op3val:0xfe80000f; valaddr_reg:x3; val_offset:65691*0 + 3*171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65691*0 + 3*171*FLEN/8, x4, x1, x2)

inst_21898:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c68b4 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x14ab47 and fs3 == 1 and fe3 == 0xfd and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc68b4; op2val:0xc014ab47;
op3val:0xfe80001f; valaddr_reg:x3; val_offset:65694*0 + 3*171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65694*0 + 3*171*FLEN/8, x4, x1, x2)

inst_21899:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c68b4 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x14ab47 and fs3 == 1 and fe3 == 0xfd and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc68b4; op2val:0xc014ab47;
op3val:0xfe80003f; valaddr_reg:x3; val_offset:65697*0 + 3*171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65697*0 + 3*171*FLEN/8, x4, x1, x2)

inst_21900:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c68b4 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x14ab47 and fs3 == 1 and fe3 == 0xfd and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc68b4; op2val:0xc014ab47;
op3val:0xfe80007f; valaddr_reg:x3; val_offset:65700*0 + 3*171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65700*0 + 3*171*FLEN/8, x4, x1, x2)

inst_21901:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c68b4 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x14ab47 and fs3 == 1 and fe3 == 0xfd and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc68b4; op2val:0xc014ab47;
op3val:0xfe8000ff; valaddr_reg:x3; val_offset:65703*0 + 3*171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65703*0 + 3*171*FLEN/8, x4, x1, x2)

inst_21902:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c68b4 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x14ab47 and fs3 == 1 and fe3 == 0xfd and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc68b4; op2val:0xc014ab47;
op3val:0xfe8001ff; valaddr_reg:x3; val_offset:65706*0 + 3*171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65706*0 + 3*171*FLEN/8, x4, x1, x2)

inst_21903:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c68b4 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x14ab47 and fs3 == 1 and fe3 == 0xfd and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc68b4; op2val:0xc014ab47;
op3val:0xfe8003ff; valaddr_reg:x3; val_offset:65709*0 + 3*171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65709*0 + 3*171*FLEN/8, x4, x1, x2)

inst_21904:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c68b4 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x14ab47 and fs3 == 1 and fe3 == 0xfd and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc68b4; op2val:0xc014ab47;
op3val:0xfe8007ff; valaddr_reg:x3; val_offset:65712*0 + 3*171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65712*0 + 3*171*FLEN/8, x4, x1, x2)

inst_21905:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c68b4 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x14ab47 and fs3 == 1 and fe3 == 0xfd and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc68b4; op2val:0xc014ab47;
op3val:0xfe800fff; valaddr_reg:x3; val_offset:65715*0 + 3*171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65715*0 + 3*171*FLEN/8, x4, x1, x2)

inst_21906:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c68b4 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x14ab47 and fs3 == 1 and fe3 == 0xfd and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc68b4; op2val:0xc014ab47;
op3val:0xfe801fff; valaddr_reg:x3; val_offset:65718*0 + 3*171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65718*0 + 3*171*FLEN/8, x4, x1, x2)

inst_21907:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c68b4 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x14ab47 and fs3 == 1 and fe3 == 0xfd and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc68b4; op2val:0xc014ab47;
op3val:0xfe803fff; valaddr_reg:x3; val_offset:65721*0 + 3*171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65721*0 + 3*171*FLEN/8, x4, x1, x2)

inst_21908:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c68b4 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x14ab47 and fs3 == 1 and fe3 == 0xfd and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc68b4; op2val:0xc014ab47;
op3val:0xfe807fff; valaddr_reg:x3; val_offset:65724*0 + 3*171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65724*0 + 3*171*FLEN/8, x4, x1, x2)

inst_21909:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c68b4 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x14ab47 and fs3 == 1 and fe3 == 0xfd and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc68b4; op2val:0xc014ab47;
op3val:0xfe80ffff; valaddr_reg:x3; val_offset:65727*0 + 3*171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65727*0 + 3*171*FLEN/8, x4, x1, x2)

inst_21910:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c68b4 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x14ab47 and fs3 == 1 and fe3 == 0xfd and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc68b4; op2val:0xc014ab47;
op3val:0xfe81ffff; valaddr_reg:x3; val_offset:65730*0 + 3*171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65730*0 + 3*171*FLEN/8, x4, x1, x2)

inst_21911:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c68b4 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x14ab47 and fs3 == 1 and fe3 == 0xfd and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc68b4; op2val:0xc014ab47;
op3val:0xfe83ffff; valaddr_reg:x3; val_offset:65733*0 + 3*171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65733*0 + 3*171*FLEN/8, x4, x1, x2)

inst_21912:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c68b4 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x14ab47 and fs3 == 1 and fe3 == 0xfd and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc68b4; op2val:0xc014ab47;
op3val:0xfe87ffff; valaddr_reg:x3; val_offset:65736*0 + 3*171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65736*0 + 3*171*FLEN/8, x4, x1, x2)

inst_21913:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c68b4 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x14ab47 and fs3 == 1 and fe3 == 0xfd and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc68b4; op2val:0xc014ab47;
op3val:0xfe8fffff; valaddr_reg:x3; val_offset:65739*0 + 3*171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65739*0 + 3*171*FLEN/8, x4, x1, x2)

inst_21914:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c68b4 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x14ab47 and fs3 == 1 and fe3 == 0xfd and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc68b4; op2val:0xc014ab47;
op3val:0xfe9fffff; valaddr_reg:x3; val_offset:65742*0 + 3*171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65742*0 + 3*171*FLEN/8, x4, x1, x2)

inst_21915:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c68b4 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x14ab47 and fs3 == 1 and fe3 == 0xfd and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc68b4; op2val:0xc014ab47;
op3val:0xfebfffff; valaddr_reg:x3; val_offset:65745*0 + 3*171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65745*0 + 3*171*FLEN/8, x4, x1, x2)

inst_21916:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c68b4 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x14ab47 and fs3 == 1 and fe3 == 0xfd and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc68b4; op2val:0xc014ab47;
op3val:0xfec00000; valaddr_reg:x3; val_offset:65748*0 + 3*171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65748*0 + 3*171*FLEN/8, x4, x1, x2)

inst_21917:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c68b4 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x14ab47 and fs3 == 1 and fe3 == 0xfd and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc68b4; op2val:0xc014ab47;
op3val:0xfee00000; valaddr_reg:x3; val_offset:65751*0 + 3*171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65751*0 + 3*171*FLEN/8, x4, x1, x2)

inst_21918:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c68b4 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x14ab47 and fs3 == 1 and fe3 == 0xfd and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc68b4; op2val:0xc014ab47;
op3val:0xfef00000; valaddr_reg:x3; val_offset:65754*0 + 3*171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65754*0 + 3*171*FLEN/8, x4, x1, x2)

inst_21919:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c68b4 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x14ab47 and fs3 == 1 and fe3 == 0xfd and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc68b4; op2val:0xc014ab47;
op3val:0xfef80000; valaddr_reg:x3; val_offset:65757*0 + 3*171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65757*0 + 3*171*FLEN/8, x4, x1, x2)

inst_21920:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c68b4 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x14ab47 and fs3 == 1 and fe3 == 0xfd and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc68b4; op2val:0xc014ab47;
op3val:0xfefc0000; valaddr_reg:x3; val_offset:65760*0 + 3*171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65760*0 + 3*171*FLEN/8, x4, x1, x2)

inst_21921:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c68b4 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x14ab47 and fs3 == 1 and fe3 == 0xfd and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc68b4; op2val:0xc014ab47;
op3val:0xfefe0000; valaddr_reg:x3; val_offset:65763*0 + 3*171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65763*0 + 3*171*FLEN/8, x4, x1, x2)

inst_21922:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c68b4 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x14ab47 and fs3 == 1 and fe3 == 0xfd and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc68b4; op2val:0xc014ab47;
op3val:0xfeff0000; valaddr_reg:x3; val_offset:65766*0 + 3*171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65766*0 + 3*171*FLEN/8, x4, x1, x2)

inst_21923:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c68b4 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x14ab47 and fs3 == 1 and fe3 == 0xfd and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc68b4; op2val:0xc014ab47;
op3val:0xfeff8000; valaddr_reg:x3; val_offset:65769*0 + 3*171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65769*0 + 3*171*FLEN/8, x4, x1, x2)

inst_21924:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c68b4 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x14ab47 and fs3 == 1 and fe3 == 0xfd and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc68b4; op2val:0xc014ab47;
op3val:0xfeffc000; valaddr_reg:x3; val_offset:65772*0 + 3*171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65772*0 + 3*171*FLEN/8, x4, x1, x2)

inst_21925:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c68b4 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x14ab47 and fs3 == 1 and fe3 == 0xfd and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc68b4; op2val:0xc014ab47;
op3val:0xfeffe000; valaddr_reg:x3; val_offset:65775*0 + 3*171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65775*0 + 3*171*FLEN/8, x4, x1, x2)

inst_21926:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c68b4 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x14ab47 and fs3 == 1 and fe3 == 0xfd and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc68b4; op2val:0xc014ab47;
op3val:0xfefff000; valaddr_reg:x3; val_offset:65778*0 + 3*171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65778*0 + 3*171*FLEN/8, x4, x1, x2)

inst_21927:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c68b4 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x14ab47 and fs3 == 1 and fe3 == 0xfd and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc68b4; op2val:0xc014ab47;
op3val:0xfefff800; valaddr_reg:x3; val_offset:65781*0 + 3*171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65781*0 + 3*171*FLEN/8, x4, x1, x2)

inst_21928:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c68b4 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x14ab47 and fs3 == 1 and fe3 == 0xfd and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc68b4; op2val:0xc014ab47;
op3val:0xfefffc00; valaddr_reg:x3; val_offset:65784*0 + 3*171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65784*0 + 3*171*FLEN/8, x4, x1, x2)

inst_21929:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c68b4 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x14ab47 and fs3 == 1 and fe3 == 0xfd and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc68b4; op2val:0xc014ab47;
op3val:0xfefffe00; valaddr_reg:x3; val_offset:65787*0 + 3*171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65787*0 + 3*171*FLEN/8, x4, x1, x2)

inst_21930:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c68b4 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x14ab47 and fs3 == 1 and fe3 == 0xfd and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc68b4; op2val:0xc014ab47;
op3val:0xfeffff00; valaddr_reg:x3; val_offset:65790*0 + 3*171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65790*0 + 3*171*FLEN/8, x4, x1, x2)

inst_21931:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c68b4 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x14ab47 and fs3 == 1 and fe3 == 0xfd and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc68b4; op2val:0xc014ab47;
op3val:0xfeffff80; valaddr_reg:x3; val_offset:65793*0 + 3*171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65793*0 + 3*171*FLEN/8, x4, x1, x2)

inst_21932:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c68b4 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x14ab47 and fs3 == 1 and fe3 == 0xfd and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc68b4; op2val:0xc014ab47;
op3val:0xfeffffc0; valaddr_reg:x3; val_offset:65796*0 + 3*171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65796*0 + 3*171*FLEN/8, x4, x1, x2)

inst_21933:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c68b4 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x14ab47 and fs3 == 1 and fe3 == 0xfd and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc68b4; op2val:0xc014ab47;
op3val:0xfeffffe0; valaddr_reg:x3; val_offset:65799*0 + 3*171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65799*0 + 3*171*FLEN/8, x4, x1, x2)

inst_21934:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c68b4 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x14ab47 and fs3 == 1 and fe3 == 0xfd and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc68b4; op2val:0xc014ab47;
op3val:0xfefffff0; valaddr_reg:x3; val_offset:65802*0 + 3*171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65802*0 + 3*171*FLEN/8, x4, x1, x2)

inst_21935:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c68b4 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x14ab47 and fs3 == 1 and fe3 == 0xfd and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc68b4; op2val:0xc014ab47;
op3val:0xfefffff8; valaddr_reg:x3; val_offset:65805*0 + 3*171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65805*0 + 3*171*FLEN/8, x4, x1, x2)

inst_21936:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c68b4 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x14ab47 and fs3 == 1 and fe3 == 0xfd and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc68b4; op2val:0xc014ab47;
op3val:0xfefffffc; valaddr_reg:x3; val_offset:65808*0 + 3*171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65808*0 + 3*171*FLEN/8, x4, x1, x2)

inst_21937:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c68b4 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x14ab47 and fs3 == 1 and fe3 == 0xfd and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc68b4; op2val:0xc014ab47;
op3val:0xfefffffe; valaddr_reg:x3; val_offset:65811*0 + 3*171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65811*0 + 3*171*FLEN/8, x4, x1, x2)

inst_21938:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c68b4 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x14ab47 and fs3 == 1 and fe3 == 0xfd and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc68b4; op2val:0xc014ab47;
op3val:0xfeffffff; valaddr_reg:x3; val_offset:65814*0 + 3*171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65814*0 + 3*171*FLEN/8, x4, x1, x2)

inst_21939:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c68b4 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x14ab47 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc68b4; op2val:0xc014ab47;
op3val:0xff000001; valaddr_reg:x3; val_offset:65817*0 + 3*171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65817*0 + 3*171*FLEN/8, x4, x1, x2)

inst_21940:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c68b4 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x14ab47 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc68b4; op2val:0xc014ab47;
op3val:0xff000003; valaddr_reg:x3; val_offset:65820*0 + 3*171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65820*0 + 3*171*FLEN/8, x4, x1, x2)

inst_21941:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c68b4 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x14ab47 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc68b4; op2val:0xc014ab47;
op3val:0xff000007; valaddr_reg:x3; val_offset:65823*0 + 3*171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65823*0 + 3*171*FLEN/8, x4, x1, x2)

inst_21942:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c68b4 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x14ab47 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc68b4; op2val:0xc014ab47;
op3val:0xff199999; valaddr_reg:x3; val_offset:65826*0 + 3*171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65826*0 + 3*171*FLEN/8, x4, x1, x2)

inst_21943:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c68b4 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x14ab47 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc68b4; op2val:0xc014ab47;
op3val:0xff249249; valaddr_reg:x3; val_offset:65829*0 + 3*171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65829*0 + 3*171*FLEN/8, x4, x1, x2)

inst_21944:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c68b4 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x14ab47 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc68b4; op2val:0xc014ab47;
op3val:0xff333333; valaddr_reg:x3; val_offset:65832*0 + 3*171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65832*0 + 3*171*FLEN/8, x4, x1, x2)

inst_21945:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c68b4 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x14ab47 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc68b4; op2val:0xc014ab47;
op3val:0xff36db6d; valaddr_reg:x3; val_offset:65835*0 + 3*171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65835*0 + 3*171*FLEN/8, x4, x1, x2)

inst_21946:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c68b4 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x14ab47 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc68b4; op2val:0xc014ab47;
op3val:0xff3bbbbb; valaddr_reg:x3; val_offset:65838*0 + 3*171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65838*0 + 3*171*FLEN/8, x4, x1, x2)

inst_21947:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c68b4 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x14ab47 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc68b4; op2val:0xc014ab47;
op3val:0xff444444; valaddr_reg:x3; val_offset:65841*0 + 3*171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65841*0 + 3*171*FLEN/8, x4, x1, x2)

inst_21948:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c68b4 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x14ab47 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc68b4; op2val:0xc014ab47;
op3val:0xff4ccccc; valaddr_reg:x3; val_offset:65844*0 + 3*171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65844*0 + 3*171*FLEN/8, x4, x1, x2)

inst_21949:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c68b4 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x14ab47 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc68b4; op2val:0xc014ab47;
op3val:0xff5b6db6; valaddr_reg:x3; val_offset:65847*0 + 3*171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65847*0 + 3*171*FLEN/8, x4, x1, x2)

inst_21950:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c68b4 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x14ab47 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc68b4; op2val:0xc014ab47;
op3val:0xff666666; valaddr_reg:x3; val_offset:65850*0 + 3*171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65850*0 + 3*171*FLEN/8, x4, x1, x2)

inst_21951:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c68b4 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x14ab47 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc68b4; op2val:0xc014ab47;
op3val:0xff6db6db; valaddr_reg:x3; val_offset:65853*0 + 3*171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65853*0 + 3*171*FLEN/8, x4, x1, x2)

inst_21952:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c68b4 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x14ab47 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc68b4; op2val:0xc014ab47;
op3val:0xff7ffff8; valaddr_reg:x3; val_offset:65856*0 + 3*171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65856*0 + 3*171*FLEN/8, x4, x1, x2)

inst_21953:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c68b4 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x14ab47 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc68b4; op2val:0xc014ab47;
op3val:0xff7ffffc; valaddr_reg:x3; val_offset:65859*0 + 3*171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65859*0 + 3*171*FLEN/8, x4, x1, x2)

inst_21954:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c68b4 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x14ab47 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc68b4; op2val:0xc014ab47;
op3val:0xff7ffffe; valaddr_reg:x3; val_offset:65862*0 + 3*171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65862*0 + 3*171*FLEN/8, x4, x1, x2)

inst_21955:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5d0ccb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edd0ccb; op2val:0x80000000;
op3val:0x80000001; valaddr_reg:x3; val_offset:65865*0 + 3*171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65865*0 + 3*171*FLEN/8, x4, x1, x2)

inst_21956:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5d0ccb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edd0ccb; op2val:0x80000000;
op3val:0x80000003; valaddr_reg:x3; val_offset:65868*0 + 3*171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65868*0 + 3*171*FLEN/8, x4, x1, x2)

inst_21957:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5d0ccb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edd0ccb; op2val:0x80000000;
op3val:0x80000007; valaddr_reg:x3; val_offset:65871*0 + 3*171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65871*0 + 3*171*FLEN/8, x4, x1, x2)

inst_21958:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5d0ccb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edd0ccb; op2val:0x80000000;
op3val:0x80199999; valaddr_reg:x3; val_offset:65874*0 + 3*171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65874*0 + 3*171*FLEN/8, x4, x1, x2)

inst_21959:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5d0ccb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edd0ccb; op2val:0x80000000;
op3val:0x80249249; valaddr_reg:x3; val_offset:65877*0 + 3*171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65877*0 + 3*171*FLEN/8, x4, x1, x2)

inst_21960:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5d0ccb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edd0ccb; op2val:0x80000000;
op3val:0x80333333; valaddr_reg:x3; val_offset:65880*0 + 3*171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65880*0 + 3*171*FLEN/8, x4, x1, x2)

inst_21961:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5d0ccb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edd0ccb; op2val:0x80000000;
op3val:0x8036db6d; valaddr_reg:x3; val_offset:65883*0 + 3*171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65883*0 + 3*171*FLEN/8, x4, x1, x2)

inst_21962:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5d0ccb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edd0ccb; op2val:0x80000000;
op3val:0x803bbbbb; valaddr_reg:x3; val_offset:65886*0 + 3*171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65886*0 + 3*171*FLEN/8, x4, x1, x2)

inst_21963:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5d0ccb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edd0ccb; op2val:0x80000000;
op3val:0x80444444; valaddr_reg:x3; val_offset:65889*0 + 3*171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65889*0 + 3*171*FLEN/8, x4, x1, x2)

inst_21964:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5d0ccb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edd0ccb; op2val:0x80000000;
op3val:0x804ccccc; valaddr_reg:x3; val_offset:65892*0 + 3*171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65892*0 + 3*171*FLEN/8, x4, x1, x2)

inst_21965:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5d0ccb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edd0ccb; op2val:0x80000000;
op3val:0x805b6db6; valaddr_reg:x3; val_offset:65895*0 + 3*171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65895*0 + 3*171*FLEN/8, x4, x1, x2)

inst_21966:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5d0ccb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edd0ccb; op2val:0x80000000;
op3val:0x80666666; valaddr_reg:x3; val_offset:65898*0 + 3*171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65898*0 + 3*171*FLEN/8, x4, x1, x2)

inst_21967:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5d0ccb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edd0ccb; op2val:0x80000000;
op3val:0x806db6db; valaddr_reg:x3; val_offset:65901*0 + 3*171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65901*0 + 3*171*FLEN/8, x4, x1, x2)

inst_21968:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5d0ccb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edd0ccb; op2val:0x80000000;
op3val:0x807ffff8; valaddr_reg:x3; val_offset:65904*0 + 3*171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65904*0 + 3*171*FLEN/8, x4, x1, x2)

inst_21969:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5d0ccb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edd0ccb; op2val:0x80000000;
op3val:0x807ffffc; valaddr_reg:x3; val_offset:65907*0 + 3*171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65907*0 + 3*171*FLEN/8, x4, x1, x2)

inst_21970:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5d0ccb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edd0ccb; op2val:0x80000000;
op3val:0x807ffffe; valaddr_reg:x3; val_offset:65910*0 + 3*171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65910*0 + 3*171*FLEN/8, x4, x1, x2)

inst_21971:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5d0ccb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edd0ccb; op2val:0x80000000;
op3val:0x8f000000; valaddr_reg:x3; val_offset:65913*0 + 3*171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65913*0 + 3*171*FLEN/8, x4, x1, x2)

inst_21972:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5d0ccb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edd0ccb; op2val:0x80000000;
op3val:0x8f000001; valaddr_reg:x3; val_offset:65916*0 + 3*171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65916*0 + 3*171*FLEN/8, x4, x1, x2)

inst_21973:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5d0ccb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edd0ccb; op2val:0x80000000;
op3val:0x8f000003; valaddr_reg:x3; val_offset:65919*0 + 3*171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65919*0 + 3*171*FLEN/8, x4, x1, x2)

inst_21974:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5d0ccb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edd0ccb; op2val:0x80000000;
op3val:0x8f000007; valaddr_reg:x3; val_offset:65922*0 + 3*171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65922*0 + 3*171*FLEN/8, x4, x1, x2)

inst_21975:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5d0ccb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edd0ccb; op2val:0x80000000;
op3val:0x8f00000f; valaddr_reg:x3; val_offset:65925*0 + 3*171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65925*0 + 3*171*FLEN/8, x4, x1, x2)

inst_21976:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5d0ccb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edd0ccb; op2val:0x80000000;
op3val:0x8f00001f; valaddr_reg:x3; val_offset:65928*0 + 3*171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65928*0 + 3*171*FLEN/8, x4, x1, x2)

inst_21977:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5d0ccb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edd0ccb; op2val:0x80000000;
op3val:0x8f00003f; valaddr_reg:x3; val_offset:65931*0 + 3*171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65931*0 + 3*171*FLEN/8, x4, x1, x2)

inst_21978:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5d0ccb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edd0ccb; op2val:0x80000000;
op3val:0x8f00007f; valaddr_reg:x3; val_offset:65934*0 + 3*171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65934*0 + 3*171*FLEN/8, x4, x1, x2)

inst_21979:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5d0ccb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edd0ccb; op2val:0x80000000;
op3val:0x8f0000ff; valaddr_reg:x3; val_offset:65937*0 + 3*171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65937*0 + 3*171*FLEN/8, x4, x1, x2)

inst_21980:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5d0ccb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edd0ccb; op2val:0x80000000;
op3val:0x8f0001ff; valaddr_reg:x3; val_offset:65940*0 + 3*171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65940*0 + 3*171*FLEN/8, x4, x1, x2)

inst_21981:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5d0ccb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edd0ccb; op2val:0x80000000;
op3val:0x8f0003ff; valaddr_reg:x3; val_offset:65943*0 + 3*171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65943*0 + 3*171*FLEN/8, x4, x1, x2)

inst_21982:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5d0ccb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edd0ccb; op2val:0x80000000;
op3val:0x8f0007ff; valaddr_reg:x3; val_offset:65946*0 + 3*171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65946*0 + 3*171*FLEN/8, x4, x1, x2)

inst_21983:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5d0ccb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edd0ccb; op2val:0x80000000;
op3val:0x8f000fff; valaddr_reg:x3; val_offset:65949*0 + 3*171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65949*0 + 3*171*FLEN/8, x4, x1, x2)

inst_21984:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5d0ccb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edd0ccb; op2val:0x80000000;
op3val:0x8f001fff; valaddr_reg:x3; val_offset:65952*0 + 3*171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65952*0 + 3*171*FLEN/8, x4, x1, x2)

inst_21985:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5d0ccb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edd0ccb; op2val:0x80000000;
op3val:0x8f003fff; valaddr_reg:x3; val_offset:65955*0 + 3*171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65955*0 + 3*171*FLEN/8, x4, x1, x2)

inst_21986:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5d0ccb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edd0ccb; op2val:0x80000000;
op3val:0x8f007fff; valaddr_reg:x3; val_offset:65958*0 + 3*171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65958*0 + 3*171*FLEN/8, x4, x1, x2)

inst_21987:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5d0ccb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edd0ccb; op2val:0x80000000;
op3val:0x8f00ffff; valaddr_reg:x3; val_offset:65961*0 + 3*171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65961*0 + 3*171*FLEN/8, x4, x1, x2)

inst_21988:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5d0ccb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edd0ccb; op2val:0x80000000;
op3val:0x8f01ffff; valaddr_reg:x3; val_offset:65964*0 + 3*171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65964*0 + 3*171*FLEN/8, x4, x1, x2)

inst_21989:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5d0ccb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edd0ccb; op2val:0x80000000;
op3val:0x8f03ffff; valaddr_reg:x3; val_offset:65967*0 + 3*171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65967*0 + 3*171*FLEN/8, x4, x1, x2)

inst_21990:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5d0ccb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edd0ccb; op2val:0x80000000;
op3val:0x8f07ffff; valaddr_reg:x3; val_offset:65970*0 + 3*171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65970*0 + 3*171*FLEN/8, x4, x1, x2)

inst_21991:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5d0ccb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edd0ccb; op2val:0x80000000;
op3val:0x8f0fffff; valaddr_reg:x3; val_offset:65973*0 + 3*171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65973*0 + 3*171*FLEN/8, x4, x1, x2)

inst_21992:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5d0ccb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edd0ccb; op2val:0x80000000;
op3val:0x8f1fffff; valaddr_reg:x3; val_offset:65976*0 + 3*171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65976*0 + 3*171*FLEN/8, x4, x1, x2)

inst_21993:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5d0ccb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edd0ccb; op2val:0x80000000;
op3val:0x8f3fffff; valaddr_reg:x3; val_offset:65979*0 + 3*171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65979*0 + 3*171*FLEN/8, x4, x1, x2)

inst_21994:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5d0ccb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edd0ccb; op2val:0x80000000;
op3val:0x8f400000; valaddr_reg:x3; val_offset:65982*0 + 3*171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65982*0 + 3*171*FLEN/8, x4, x1, x2)

inst_21995:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5d0ccb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edd0ccb; op2val:0x80000000;
op3val:0x8f600000; valaddr_reg:x3; val_offset:65985*0 + 3*171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65985*0 + 3*171*FLEN/8, x4, x1, x2)

inst_21996:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5d0ccb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edd0ccb; op2val:0x80000000;
op3val:0x8f700000; valaddr_reg:x3; val_offset:65988*0 + 3*171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65988*0 + 3*171*FLEN/8, x4, x1, x2)

inst_21997:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5d0ccb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edd0ccb; op2val:0x80000000;
op3val:0x8f780000; valaddr_reg:x3; val_offset:65991*0 + 3*171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65991*0 + 3*171*FLEN/8, x4, x1, x2)

inst_21998:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5d0ccb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edd0ccb; op2val:0x80000000;
op3val:0x8f7c0000; valaddr_reg:x3; val_offset:65994*0 + 3*171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65994*0 + 3*171*FLEN/8, x4, x1, x2)

inst_21999:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5d0ccb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edd0ccb; op2val:0x80000000;
op3val:0x8f7e0000; valaddr_reg:x3; val_offset:65997*0 + 3*171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65997*0 + 3*171*FLEN/8, x4, x1, x2)

inst_22000:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5d0ccb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edd0ccb; op2val:0x80000000;
op3val:0x8f7f0000; valaddr_reg:x3; val_offset:66000*0 + 3*171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66000*0 + 3*171*FLEN/8, x4, x1, x2)

inst_22001:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5d0ccb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edd0ccb; op2val:0x80000000;
op3val:0x8f7f8000; valaddr_reg:x3; val_offset:66003*0 + 3*171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66003*0 + 3*171*FLEN/8, x4, x1, x2)

inst_22002:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5d0ccb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edd0ccb; op2val:0x80000000;
op3val:0x8f7fc000; valaddr_reg:x3; val_offset:66006*0 + 3*171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66006*0 + 3*171*FLEN/8, x4, x1, x2)

inst_22003:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5d0ccb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edd0ccb; op2val:0x80000000;
op3val:0x8f7fe000; valaddr_reg:x3; val_offset:66009*0 + 3*171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66009*0 + 3*171*FLEN/8, x4, x1, x2)

inst_22004:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5d0ccb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edd0ccb; op2val:0x80000000;
op3val:0x8f7ff000; valaddr_reg:x3; val_offset:66012*0 + 3*171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66012*0 + 3*171*FLEN/8, x4, x1, x2)

inst_22005:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5d0ccb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edd0ccb; op2val:0x80000000;
op3val:0x8f7ff800; valaddr_reg:x3; val_offset:66015*0 + 3*171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66015*0 + 3*171*FLEN/8, x4, x1, x2)

inst_22006:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5d0ccb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edd0ccb; op2val:0x80000000;
op3val:0x8f7ffc00; valaddr_reg:x3; val_offset:66018*0 + 3*171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66018*0 + 3*171*FLEN/8, x4, x1, x2)

inst_22007:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5d0ccb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edd0ccb; op2val:0x80000000;
op3val:0x8f7ffe00; valaddr_reg:x3; val_offset:66021*0 + 3*171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66021*0 + 3*171*FLEN/8, x4, x1, x2)

inst_22008:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5d0ccb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edd0ccb; op2val:0x80000000;
op3val:0x8f7fff00; valaddr_reg:x3; val_offset:66024*0 + 3*171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66024*0 + 3*171*FLEN/8, x4, x1, x2)

inst_22009:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5d0ccb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edd0ccb; op2val:0x80000000;
op3val:0x8f7fff80; valaddr_reg:x3; val_offset:66027*0 + 3*171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66027*0 + 3*171*FLEN/8, x4, x1, x2)

inst_22010:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5d0ccb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edd0ccb; op2val:0x80000000;
op3val:0x8f7fffc0; valaddr_reg:x3; val_offset:66030*0 + 3*171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66030*0 + 3*171*FLEN/8, x4, x1, x2)

inst_22011:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5d0ccb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edd0ccb; op2val:0x80000000;
op3val:0x8f7fffe0; valaddr_reg:x3; val_offset:66033*0 + 3*171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66033*0 + 3*171*FLEN/8, x4, x1, x2)

inst_22012:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5d0ccb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edd0ccb; op2val:0x80000000;
op3val:0x8f7ffff0; valaddr_reg:x3; val_offset:66036*0 + 3*171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66036*0 + 3*171*FLEN/8, x4, x1, x2)

inst_22013:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5d0ccb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edd0ccb; op2val:0x80000000;
op3val:0x8f7ffff8; valaddr_reg:x3; val_offset:66039*0 + 3*171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66039*0 + 3*171*FLEN/8, x4, x1, x2)

inst_22014:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5d0ccb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edd0ccb; op2val:0x80000000;
op3val:0x8f7ffffc; valaddr_reg:x3; val_offset:66042*0 + 3*171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66042*0 + 3*171*FLEN/8, x4, x1, x2)

inst_22015:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5d0ccb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edd0ccb; op2val:0x80000000;
op3val:0x8f7ffffe; valaddr_reg:x3; val_offset:66045*0 + 3*171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66045*0 + 3*171*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2128318953,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298478576,32,FLEN)
NAN_BOXED(2128318953,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298478584,32,FLEN)
NAN_BOXED(2128318953,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298478588,32,FLEN)
NAN_BOXED(2128318953,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298478590,32,FLEN)
NAN_BOXED(2128318953,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298478591,32,FLEN)
NAN_BOXED(2128373940,32,FLEN)
NAN_BOXED(3222580039,32,FLEN)
NAN_BOXED(4269801472,32,FLEN)
NAN_BOXED(2128373940,32,FLEN)
NAN_BOXED(3222580039,32,FLEN)
NAN_BOXED(4269801473,32,FLEN)
NAN_BOXED(2128373940,32,FLEN)
NAN_BOXED(3222580039,32,FLEN)
NAN_BOXED(4269801475,32,FLEN)
NAN_BOXED(2128373940,32,FLEN)
NAN_BOXED(3222580039,32,FLEN)
NAN_BOXED(4269801479,32,FLEN)
NAN_BOXED(2128373940,32,FLEN)
NAN_BOXED(3222580039,32,FLEN)
NAN_BOXED(4269801487,32,FLEN)
NAN_BOXED(2128373940,32,FLEN)
NAN_BOXED(3222580039,32,FLEN)
NAN_BOXED(4269801503,32,FLEN)
NAN_BOXED(2128373940,32,FLEN)
NAN_BOXED(3222580039,32,FLEN)
NAN_BOXED(4269801535,32,FLEN)
NAN_BOXED(2128373940,32,FLEN)
NAN_BOXED(3222580039,32,FLEN)
NAN_BOXED(4269801599,32,FLEN)
NAN_BOXED(2128373940,32,FLEN)
NAN_BOXED(3222580039,32,FLEN)
NAN_BOXED(4269801727,32,FLEN)
NAN_BOXED(2128373940,32,FLEN)
NAN_BOXED(3222580039,32,FLEN)
NAN_BOXED(4269801983,32,FLEN)
NAN_BOXED(2128373940,32,FLEN)
NAN_BOXED(3222580039,32,FLEN)
NAN_BOXED(4269802495,32,FLEN)
NAN_BOXED(2128373940,32,FLEN)
NAN_BOXED(3222580039,32,FLEN)
NAN_BOXED(4269803519,32,FLEN)
NAN_BOXED(2128373940,32,FLEN)
NAN_BOXED(3222580039,32,FLEN)
NAN_BOXED(4269805567,32,FLEN)
NAN_BOXED(2128373940,32,FLEN)
NAN_BOXED(3222580039,32,FLEN)
NAN_BOXED(4269809663,32,FLEN)
NAN_BOXED(2128373940,32,FLEN)
NAN_BOXED(3222580039,32,FLEN)
NAN_BOXED(4269817855,32,FLEN)
NAN_BOXED(2128373940,32,FLEN)
NAN_BOXED(3222580039,32,FLEN)
NAN_BOXED(4269834239,32,FLEN)
NAN_BOXED(2128373940,32,FLEN)
NAN_BOXED(3222580039,32,FLEN)
NAN_BOXED(4269867007,32,FLEN)
NAN_BOXED(2128373940,32,FLEN)
NAN_BOXED(3222580039,32,FLEN)
NAN_BOXED(4269932543,32,FLEN)
NAN_BOXED(2128373940,32,FLEN)
NAN_BOXED(3222580039,32,FLEN)
NAN_BOXED(4270063615,32,FLEN)
NAN_BOXED(2128373940,32,FLEN)
NAN_BOXED(3222580039,32,FLEN)
NAN_BOXED(4270325759,32,FLEN)
NAN_BOXED(2128373940,32,FLEN)
NAN_BOXED(3222580039,32,FLEN)
NAN_BOXED(4270850047,32,FLEN)
NAN_BOXED(2128373940,32,FLEN)
NAN_BOXED(3222580039,32,FLEN)
NAN_BOXED(4271898623,32,FLEN)
NAN_BOXED(2128373940,32,FLEN)
NAN_BOXED(3222580039,32,FLEN)
NAN_BOXED(4273995775,32,FLEN)
NAN_BOXED(2128373940,32,FLEN)
NAN_BOXED(3222580039,32,FLEN)
NAN_BOXED(4273995776,32,FLEN)
NAN_BOXED(2128373940,32,FLEN)
NAN_BOXED(3222580039,32,FLEN)
NAN_BOXED(4276092928,32,FLEN)
NAN_BOXED(2128373940,32,FLEN)
NAN_BOXED(3222580039,32,FLEN)
NAN_BOXED(4277141504,32,FLEN)
NAN_BOXED(2128373940,32,FLEN)
NAN_BOXED(3222580039,32,FLEN)
NAN_BOXED(4277665792,32,FLEN)
NAN_BOXED(2128373940,32,FLEN)
NAN_BOXED(3222580039,32,FLEN)
NAN_BOXED(4277927936,32,FLEN)
NAN_BOXED(2128373940,32,FLEN)
NAN_BOXED(3222580039,32,FLEN)
NAN_BOXED(4278059008,32,FLEN)
NAN_BOXED(2128373940,32,FLEN)
NAN_BOXED(3222580039,32,FLEN)
NAN_BOXED(4278124544,32,FLEN)
NAN_BOXED(2128373940,32,FLEN)
NAN_BOXED(3222580039,32,FLEN)
NAN_BOXED(4278157312,32,FLEN)
NAN_BOXED(2128373940,32,FLEN)
NAN_BOXED(3222580039,32,FLEN)
NAN_BOXED(4278173696,32,FLEN)
NAN_BOXED(2128373940,32,FLEN)
NAN_BOXED(3222580039,32,FLEN)
NAN_BOXED(4278181888,32,FLEN)
NAN_BOXED(2128373940,32,FLEN)
NAN_BOXED(3222580039,32,FLEN)
NAN_BOXED(4278185984,32,FLEN)
NAN_BOXED(2128373940,32,FLEN)
NAN_BOXED(3222580039,32,FLEN)
NAN_BOXED(4278188032,32,FLEN)
NAN_BOXED(2128373940,32,FLEN)
NAN_BOXED(3222580039,32,FLEN)
NAN_BOXED(4278189056,32,FLEN)
NAN_BOXED(2128373940,32,FLEN)
NAN_BOXED(3222580039,32,FLEN)
NAN_BOXED(4278189568,32,FLEN)
NAN_BOXED(2128373940,32,FLEN)
NAN_BOXED(3222580039,32,FLEN)
NAN_BOXED(4278189824,32,FLEN)
NAN_BOXED(2128373940,32,FLEN)
NAN_BOXED(3222580039,32,FLEN)
NAN_BOXED(4278189952,32,FLEN)
NAN_BOXED(2128373940,32,FLEN)
NAN_BOXED(3222580039,32,FLEN)
NAN_BOXED(4278190016,32,FLEN)
NAN_BOXED(2128373940,32,FLEN)
NAN_BOXED(3222580039,32,FLEN)
NAN_BOXED(4278190048,32,FLEN)
NAN_BOXED(2128373940,32,FLEN)
NAN_BOXED(3222580039,32,FLEN)
NAN_BOXED(4278190064,32,FLEN)
NAN_BOXED(2128373940,32,FLEN)
NAN_BOXED(3222580039,32,FLEN)
NAN_BOXED(4278190072,32,FLEN)
NAN_BOXED(2128373940,32,FLEN)
NAN_BOXED(3222580039,32,FLEN)
NAN_BOXED(4278190076,32,FLEN)
NAN_BOXED(2128373940,32,FLEN)
NAN_BOXED(3222580039,32,FLEN)
NAN_BOXED(4278190078,32,FLEN)
NAN_BOXED(2128373940,32,FLEN)
NAN_BOXED(3222580039,32,FLEN)
NAN_BOXED(4278190079,32,FLEN)
NAN_BOXED(2128373940,32,FLEN)
NAN_BOXED(3222580039,32,FLEN)
NAN_BOXED(4278190081,32,FLEN)
NAN_BOXED(2128373940,32,FLEN)
NAN_BOXED(3222580039,32,FLEN)
NAN_BOXED(4278190083,32,FLEN)
NAN_BOXED(2128373940,32,FLEN)
NAN_BOXED(3222580039,32,FLEN)
NAN_BOXED(4278190087,32,FLEN)
NAN_BOXED(2128373940,32,FLEN)
NAN_BOXED(3222580039,32,FLEN)
NAN_BOXED(4279867801,32,FLEN)
NAN_BOXED(2128373940,32,FLEN)
NAN_BOXED(3222580039,32,FLEN)
NAN_BOXED(4280586825,32,FLEN)
NAN_BOXED(2128373940,32,FLEN)
NAN_BOXED(3222580039,32,FLEN)
NAN_BOXED(4281545523,32,FLEN)
NAN_BOXED(2128373940,32,FLEN)
NAN_BOXED(3222580039,32,FLEN)
NAN_BOXED(4281785197,32,FLEN)
NAN_BOXED(2128373940,32,FLEN)
NAN_BOXED(3222580039,32,FLEN)
NAN_BOXED(4282104763,32,FLEN)
NAN_BOXED(2128373940,32,FLEN)
NAN_BOXED(3222580039,32,FLEN)
NAN_BOXED(4282664004,32,FLEN)
NAN_BOXED(2128373940,32,FLEN)
NAN_BOXED(3222580039,32,FLEN)
NAN_BOXED(4283223244,32,FLEN)
NAN_BOXED(2128373940,32,FLEN)
NAN_BOXED(3222580039,32,FLEN)
NAN_BOXED(4284181942,32,FLEN)
NAN_BOXED(2128373940,32,FLEN)
NAN_BOXED(3222580039,32,FLEN)
NAN_BOXED(4284900966,32,FLEN)
NAN_BOXED(2128373940,32,FLEN)
NAN_BOXED(3222580039,32,FLEN)
NAN_BOXED(4285380315,32,FLEN)
NAN_BOXED(2128373940,32,FLEN)
NAN_BOXED(3222580039,32,FLEN)
NAN_BOXED(4286578680,32,FLEN)
NAN_BOXED(2128373940,32,FLEN)
NAN_BOXED(3222580039,32,FLEN)
NAN_BOXED(4286578684,32,FLEN)
NAN_BOXED(2128373940,32,FLEN)
NAN_BOXED(3222580039,32,FLEN)
NAN_BOXED(4286578686,32,FLEN)
NAN_BOXED(2128415947,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2128415947,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483651,32,FLEN)
NAN_BOXED(2128415947,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483655,32,FLEN)
NAN_BOXED(2128415947,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149161369,32,FLEN)
NAN_BOXED(2128415947,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149880393,32,FLEN)
NAN_BOXED(2128415947,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2150839091,32,FLEN)
NAN_BOXED(2128415947,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151078765,32,FLEN)
NAN_BOXED(2128415947,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151398331,32,FLEN)
NAN_BOXED(2128415947,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151957572,32,FLEN)
NAN_BOXED(2128415947,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2152516812,32,FLEN)
NAN_BOXED(2128415947,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2153475510,32,FLEN)
NAN_BOXED(2128415947,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154194534,32,FLEN)
NAN_BOXED(2128415947,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154673883,32,FLEN)
NAN_BOXED(2128415947,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872248,32,FLEN)
NAN_BOXED(2128415947,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872252,32,FLEN)
NAN_BOXED(2128415947,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2128415947,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399141888,32,FLEN)
NAN_BOXED(2128415947,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399141889,32,FLEN)
NAN_BOXED(2128415947,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399141891,32,FLEN)
NAN_BOXED(2128415947,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399141895,32,FLEN)
NAN_BOXED(2128415947,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399141903,32,FLEN)
NAN_BOXED(2128415947,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399141919,32,FLEN)
NAN_BOXED(2128415947,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399141951,32,FLEN)
NAN_BOXED(2128415947,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399142015,32,FLEN)
NAN_BOXED(2128415947,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399142143,32,FLEN)
NAN_BOXED(2128415947,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399142399,32,FLEN)
NAN_BOXED(2128415947,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399142911,32,FLEN)
NAN_BOXED(2128415947,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399143935,32,FLEN)
NAN_BOXED(2128415947,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399145983,32,FLEN)
NAN_BOXED(2128415947,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399150079,32,FLEN)
NAN_BOXED(2128415947,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399158271,32,FLEN)
NAN_BOXED(2128415947,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399174655,32,FLEN)
NAN_BOXED(2128415947,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399207423,32,FLEN)
NAN_BOXED(2128415947,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399272959,32,FLEN)
NAN_BOXED(2128415947,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399404031,32,FLEN)
NAN_BOXED(2128415947,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399666175,32,FLEN)
NAN_BOXED(2128415947,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2400190463,32,FLEN)
NAN_BOXED(2128415947,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2401239039,32,FLEN)
NAN_BOXED(2128415947,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2403336191,32,FLEN)
NAN_BOXED(2128415947,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2403336192,32,FLEN)
NAN_BOXED(2128415947,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2405433344,32,FLEN)
NAN_BOXED(2128415947,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2406481920,32,FLEN)
NAN_BOXED(2128415947,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407006208,32,FLEN)
NAN_BOXED(2128415947,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407268352,32,FLEN)
NAN_BOXED(2128415947,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407399424,32,FLEN)
NAN_BOXED(2128415947,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407464960,32,FLEN)
NAN_BOXED(2128415947,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407497728,32,FLEN)
NAN_BOXED(2128415947,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407514112,32,FLEN)
NAN_BOXED(2128415947,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407522304,32,FLEN)
NAN_BOXED(2128415947,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407526400,32,FLEN)
NAN_BOXED(2128415947,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407528448,32,FLEN)
NAN_BOXED(2128415947,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407529472,32,FLEN)
NAN_BOXED(2128415947,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407529984,32,FLEN)
NAN_BOXED(2128415947,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407530240,32,FLEN)
NAN_BOXED(2128415947,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407530368,32,FLEN)
NAN_BOXED(2128415947,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407530432,32,FLEN)
NAN_BOXED(2128415947,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407530464,32,FLEN)
NAN_BOXED(2128415947,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407530480,32,FLEN)
NAN_BOXED(2128415947,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407530488,32,FLEN)
NAN_BOXED(2128415947,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407530492,32,FLEN)
NAN_BOXED(2128415947,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407530494,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
