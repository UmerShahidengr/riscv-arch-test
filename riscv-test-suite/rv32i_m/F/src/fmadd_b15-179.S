
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:17:59 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_22784:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x650cd9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4787b9 and fs3 == 0 and fe3 == 0x81 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee50cd9; op2val:0x4787b9;
op3val:0x4080007f; valaddr_reg:x3; val_offset:68352*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68352*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22785:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x650cd9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4787b9 and fs3 == 0 and fe3 == 0x81 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee50cd9; op2val:0x4787b9;
op3val:0x408000ff; valaddr_reg:x3; val_offset:68355*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68355*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22786:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x650cd9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4787b9 and fs3 == 0 and fe3 == 0x81 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee50cd9; op2val:0x4787b9;
op3val:0x408001ff; valaddr_reg:x3; val_offset:68358*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68358*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22787:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x650cd9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4787b9 and fs3 == 0 and fe3 == 0x81 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee50cd9; op2val:0x4787b9;
op3val:0x408003ff; valaddr_reg:x3; val_offset:68361*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68361*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22788:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x650cd9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4787b9 and fs3 == 0 and fe3 == 0x81 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee50cd9; op2val:0x4787b9;
op3val:0x408007ff; valaddr_reg:x3; val_offset:68364*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68364*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22789:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x650cd9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4787b9 and fs3 == 0 and fe3 == 0x81 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee50cd9; op2val:0x4787b9;
op3val:0x40800fff; valaddr_reg:x3; val_offset:68367*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68367*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22790:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x650cd9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4787b9 and fs3 == 0 and fe3 == 0x81 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee50cd9; op2val:0x4787b9;
op3val:0x40801fff; valaddr_reg:x3; val_offset:68370*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68370*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22791:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x650cd9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4787b9 and fs3 == 0 and fe3 == 0x81 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee50cd9; op2val:0x4787b9;
op3val:0x40803fff; valaddr_reg:x3; val_offset:68373*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68373*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22792:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x650cd9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4787b9 and fs3 == 0 and fe3 == 0x81 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee50cd9; op2val:0x4787b9;
op3val:0x40807fff; valaddr_reg:x3; val_offset:68376*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68376*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22793:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x650cd9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4787b9 and fs3 == 0 and fe3 == 0x81 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee50cd9; op2val:0x4787b9;
op3val:0x4080ffff; valaddr_reg:x3; val_offset:68379*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68379*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22794:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x650cd9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4787b9 and fs3 == 0 and fe3 == 0x81 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee50cd9; op2val:0x4787b9;
op3val:0x4081ffff; valaddr_reg:x3; val_offset:68382*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68382*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22795:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x650cd9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4787b9 and fs3 == 0 and fe3 == 0x81 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee50cd9; op2val:0x4787b9;
op3val:0x4083ffff; valaddr_reg:x3; val_offset:68385*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68385*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22796:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x650cd9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4787b9 and fs3 == 0 and fe3 == 0x81 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee50cd9; op2val:0x4787b9;
op3val:0x4087ffff; valaddr_reg:x3; val_offset:68388*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68388*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22797:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x650cd9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4787b9 and fs3 == 0 and fe3 == 0x81 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee50cd9; op2val:0x4787b9;
op3val:0x408fffff; valaddr_reg:x3; val_offset:68391*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68391*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22798:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x650cd9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4787b9 and fs3 == 0 and fe3 == 0x81 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee50cd9; op2val:0x4787b9;
op3val:0x409fffff; valaddr_reg:x3; val_offset:68394*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68394*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22799:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x650cd9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4787b9 and fs3 == 0 and fe3 == 0x81 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee50cd9; op2val:0x4787b9;
op3val:0x40bfffff; valaddr_reg:x3; val_offset:68397*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68397*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22800:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x650cd9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4787b9 and fs3 == 0 and fe3 == 0x81 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee50cd9; op2val:0x4787b9;
op3val:0x40c00000; valaddr_reg:x3; val_offset:68400*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68400*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22801:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x650cd9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4787b9 and fs3 == 0 and fe3 == 0x81 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee50cd9; op2val:0x4787b9;
op3val:0x40e00000; valaddr_reg:x3; val_offset:68403*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68403*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22802:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x650cd9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4787b9 and fs3 == 0 and fe3 == 0x81 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee50cd9; op2val:0x4787b9;
op3val:0x40f00000; valaddr_reg:x3; val_offset:68406*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68406*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22803:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x650cd9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4787b9 and fs3 == 0 and fe3 == 0x81 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee50cd9; op2val:0x4787b9;
op3val:0x40f80000; valaddr_reg:x3; val_offset:68409*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68409*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22804:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x650cd9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4787b9 and fs3 == 0 and fe3 == 0x81 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee50cd9; op2val:0x4787b9;
op3val:0x40fc0000; valaddr_reg:x3; val_offset:68412*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68412*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22805:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x650cd9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4787b9 and fs3 == 0 and fe3 == 0x81 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee50cd9; op2val:0x4787b9;
op3val:0x40fe0000; valaddr_reg:x3; val_offset:68415*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68415*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22806:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x650cd9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4787b9 and fs3 == 0 and fe3 == 0x81 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee50cd9; op2val:0x4787b9;
op3val:0x40ff0000; valaddr_reg:x3; val_offset:68418*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68418*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22807:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x650cd9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4787b9 and fs3 == 0 and fe3 == 0x81 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee50cd9; op2val:0x4787b9;
op3val:0x40ff8000; valaddr_reg:x3; val_offset:68421*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68421*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22808:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x650cd9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4787b9 and fs3 == 0 and fe3 == 0x81 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee50cd9; op2val:0x4787b9;
op3val:0x40ffc000; valaddr_reg:x3; val_offset:68424*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68424*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22809:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x650cd9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4787b9 and fs3 == 0 and fe3 == 0x81 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee50cd9; op2val:0x4787b9;
op3val:0x40ffe000; valaddr_reg:x3; val_offset:68427*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68427*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22810:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x650cd9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4787b9 and fs3 == 0 and fe3 == 0x81 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee50cd9; op2val:0x4787b9;
op3val:0x40fff000; valaddr_reg:x3; val_offset:68430*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68430*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22811:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x650cd9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4787b9 and fs3 == 0 and fe3 == 0x81 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee50cd9; op2val:0x4787b9;
op3val:0x40fff800; valaddr_reg:x3; val_offset:68433*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68433*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22812:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x650cd9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4787b9 and fs3 == 0 and fe3 == 0x81 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee50cd9; op2val:0x4787b9;
op3val:0x40fffc00; valaddr_reg:x3; val_offset:68436*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68436*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22813:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x650cd9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4787b9 and fs3 == 0 and fe3 == 0x81 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee50cd9; op2val:0x4787b9;
op3val:0x40fffe00; valaddr_reg:x3; val_offset:68439*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68439*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22814:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x650cd9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4787b9 and fs3 == 0 and fe3 == 0x81 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee50cd9; op2val:0x4787b9;
op3val:0x40ffff00; valaddr_reg:x3; val_offset:68442*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68442*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22815:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x650cd9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4787b9 and fs3 == 0 and fe3 == 0x81 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee50cd9; op2val:0x4787b9;
op3val:0x40ffff80; valaddr_reg:x3; val_offset:68445*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68445*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22816:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x650cd9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4787b9 and fs3 == 0 and fe3 == 0x81 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee50cd9; op2val:0x4787b9;
op3val:0x40ffffc0; valaddr_reg:x3; val_offset:68448*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68448*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22817:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x650cd9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4787b9 and fs3 == 0 and fe3 == 0x81 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee50cd9; op2val:0x4787b9;
op3val:0x40ffffe0; valaddr_reg:x3; val_offset:68451*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68451*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22818:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x650cd9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4787b9 and fs3 == 0 and fe3 == 0x81 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee50cd9; op2val:0x4787b9;
op3val:0x40fffff0; valaddr_reg:x3; val_offset:68454*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68454*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22819:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x650cd9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4787b9 and fs3 == 0 and fe3 == 0x81 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee50cd9; op2val:0x4787b9;
op3val:0x40fffff8; valaddr_reg:x3; val_offset:68457*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68457*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22820:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x650cd9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4787b9 and fs3 == 0 and fe3 == 0x81 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee50cd9; op2val:0x4787b9;
op3val:0x40fffffc; valaddr_reg:x3; val_offset:68460*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68460*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22821:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x650cd9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4787b9 and fs3 == 0 and fe3 == 0x81 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee50cd9; op2val:0x4787b9;
op3val:0x40fffffe; valaddr_reg:x3; val_offset:68463*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68463*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22822:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x650cd9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4787b9 and fs3 == 0 and fe3 == 0x81 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee50cd9; op2val:0x4787b9;
op3val:0x40ffffff; valaddr_reg:x3; val_offset:68466*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68466*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22823:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x651716 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0f090d and fs3 == 0 and fe3 == 0xcb and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee51716; op2val:0x400f090d;
op3val:0x65800000; valaddr_reg:x3; val_offset:68469*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68469*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22824:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x651716 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0f090d and fs3 == 0 and fe3 == 0xcb and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee51716; op2val:0x400f090d;
op3val:0x65800001; valaddr_reg:x3; val_offset:68472*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68472*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22825:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x651716 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0f090d and fs3 == 0 and fe3 == 0xcb and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee51716; op2val:0x400f090d;
op3val:0x65800003; valaddr_reg:x3; val_offset:68475*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68475*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22826:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x651716 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0f090d and fs3 == 0 and fe3 == 0xcb and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee51716; op2val:0x400f090d;
op3val:0x65800007; valaddr_reg:x3; val_offset:68478*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68478*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22827:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x651716 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0f090d and fs3 == 0 and fe3 == 0xcb and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee51716; op2val:0x400f090d;
op3val:0x6580000f; valaddr_reg:x3; val_offset:68481*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68481*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22828:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x651716 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0f090d and fs3 == 0 and fe3 == 0xcb and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee51716; op2val:0x400f090d;
op3val:0x6580001f; valaddr_reg:x3; val_offset:68484*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68484*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22829:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x651716 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0f090d and fs3 == 0 and fe3 == 0xcb and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee51716; op2val:0x400f090d;
op3val:0x6580003f; valaddr_reg:x3; val_offset:68487*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68487*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22830:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x651716 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0f090d and fs3 == 0 and fe3 == 0xcb and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee51716; op2val:0x400f090d;
op3val:0x6580007f; valaddr_reg:x3; val_offset:68490*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68490*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22831:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x651716 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0f090d and fs3 == 0 and fe3 == 0xcb and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee51716; op2val:0x400f090d;
op3val:0x658000ff; valaddr_reg:x3; val_offset:68493*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68493*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22832:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x651716 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0f090d and fs3 == 0 and fe3 == 0xcb and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee51716; op2val:0x400f090d;
op3val:0x658001ff; valaddr_reg:x3; val_offset:68496*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68496*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22833:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x651716 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0f090d and fs3 == 0 and fe3 == 0xcb and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee51716; op2val:0x400f090d;
op3val:0x658003ff; valaddr_reg:x3; val_offset:68499*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68499*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22834:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x651716 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0f090d and fs3 == 0 and fe3 == 0xcb and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee51716; op2val:0x400f090d;
op3val:0x658007ff; valaddr_reg:x3; val_offset:68502*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68502*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22835:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x651716 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0f090d and fs3 == 0 and fe3 == 0xcb and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee51716; op2val:0x400f090d;
op3val:0x65800fff; valaddr_reg:x3; val_offset:68505*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68505*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22836:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x651716 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0f090d and fs3 == 0 and fe3 == 0xcb and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee51716; op2val:0x400f090d;
op3val:0x65801fff; valaddr_reg:x3; val_offset:68508*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68508*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22837:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x651716 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0f090d and fs3 == 0 and fe3 == 0xcb and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee51716; op2val:0x400f090d;
op3val:0x65803fff; valaddr_reg:x3; val_offset:68511*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68511*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22838:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x651716 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0f090d and fs3 == 0 and fe3 == 0xcb and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee51716; op2val:0x400f090d;
op3val:0x65807fff; valaddr_reg:x3; val_offset:68514*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68514*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22839:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x651716 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0f090d and fs3 == 0 and fe3 == 0xcb and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee51716; op2val:0x400f090d;
op3val:0x6580ffff; valaddr_reg:x3; val_offset:68517*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68517*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22840:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x651716 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0f090d and fs3 == 0 and fe3 == 0xcb and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee51716; op2val:0x400f090d;
op3val:0x6581ffff; valaddr_reg:x3; val_offset:68520*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68520*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22841:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x651716 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0f090d and fs3 == 0 and fe3 == 0xcb and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee51716; op2val:0x400f090d;
op3val:0x6583ffff; valaddr_reg:x3; val_offset:68523*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68523*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22842:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x651716 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0f090d and fs3 == 0 and fe3 == 0xcb and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee51716; op2val:0x400f090d;
op3val:0x6587ffff; valaddr_reg:x3; val_offset:68526*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68526*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22843:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x651716 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0f090d and fs3 == 0 and fe3 == 0xcb and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee51716; op2val:0x400f090d;
op3val:0x658fffff; valaddr_reg:x3; val_offset:68529*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68529*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22844:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x651716 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0f090d and fs3 == 0 and fe3 == 0xcb and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee51716; op2val:0x400f090d;
op3val:0x659fffff; valaddr_reg:x3; val_offset:68532*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68532*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22845:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x651716 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0f090d and fs3 == 0 and fe3 == 0xcb and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee51716; op2val:0x400f090d;
op3val:0x65bfffff; valaddr_reg:x3; val_offset:68535*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68535*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22846:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x651716 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0f090d and fs3 == 0 and fe3 == 0xcb and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee51716; op2val:0x400f090d;
op3val:0x65c00000; valaddr_reg:x3; val_offset:68538*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68538*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22847:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x651716 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0f090d and fs3 == 0 and fe3 == 0xcb and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee51716; op2val:0x400f090d;
op3val:0x65e00000; valaddr_reg:x3; val_offset:68541*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68541*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22848:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x651716 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0f090d and fs3 == 0 and fe3 == 0xcb and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee51716; op2val:0x400f090d;
op3val:0x65f00000; valaddr_reg:x3; val_offset:68544*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68544*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22849:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x651716 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0f090d and fs3 == 0 and fe3 == 0xcb and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee51716; op2val:0x400f090d;
op3val:0x65f80000; valaddr_reg:x3; val_offset:68547*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68547*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22850:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x651716 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0f090d and fs3 == 0 and fe3 == 0xcb and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee51716; op2val:0x400f090d;
op3val:0x65fc0000; valaddr_reg:x3; val_offset:68550*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68550*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22851:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x651716 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0f090d and fs3 == 0 and fe3 == 0xcb and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee51716; op2val:0x400f090d;
op3val:0x65fe0000; valaddr_reg:x3; val_offset:68553*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68553*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22852:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x651716 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0f090d and fs3 == 0 and fe3 == 0xcb and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee51716; op2val:0x400f090d;
op3val:0x65ff0000; valaddr_reg:x3; val_offset:68556*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68556*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22853:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x651716 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0f090d and fs3 == 0 and fe3 == 0xcb and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee51716; op2val:0x400f090d;
op3val:0x65ff8000; valaddr_reg:x3; val_offset:68559*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68559*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22854:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x651716 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0f090d and fs3 == 0 and fe3 == 0xcb and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee51716; op2val:0x400f090d;
op3val:0x65ffc000; valaddr_reg:x3; val_offset:68562*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68562*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22855:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x651716 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0f090d and fs3 == 0 and fe3 == 0xcb and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee51716; op2val:0x400f090d;
op3val:0x65ffe000; valaddr_reg:x3; val_offset:68565*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68565*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22856:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x651716 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0f090d and fs3 == 0 and fe3 == 0xcb and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee51716; op2val:0x400f090d;
op3val:0x65fff000; valaddr_reg:x3; val_offset:68568*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68568*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22857:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x651716 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0f090d and fs3 == 0 and fe3 == 0xcb and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee51716; op2val:0x400f090d;
op3val:0x65fff800; valaddr_reg:x3; val_offset:68571*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68571*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22858:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x651716 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0f090d and fs3 == 0 and fe3 == 0xcb and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee51716; op2val:0x400f090d;
op3val:0x65fffc00; valaddr_reg:x3; val_offset:68574*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68574*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22859:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x651716 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0f090d and fs3 == 0 and fe3 == 0xcb and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee51716; op2val:0x400f090d;
op3val:0x65fffe00; valaddr_reg:x3; val_offset:68577*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68577*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22860:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x651716 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0f090d and fs3 == 0 and fe3 == 0xcb and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee51716; op2val:0x400f090d;
op3val:0x65ffff00; valaddr_reg:x3; val_offset:68580*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68580*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22861:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x651716 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0f090d and fs3 == 0 and fe3 == 0xcb and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee51716; op2val:0x400f090d;
op3val:0x65ffff80; valaddr_reg:x3; val_offset:68583*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68583*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22862:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x651716 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0f090d and fs3 == 0 and fe3 == 0xcb and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee51716; op2val:0x400f090d;
op3val:0x65ffffc0; valaddr_reg:x3; val_offset:68586*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68586*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22863:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x651716 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0f090d and fs3 == 0 and fe3 == 0xcb and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee51716; op2val:0x400f090d;
op3val:0x65ffffe0; valaddr_reg:x3; val_offset:68589*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68589*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22864:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x651716 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0f090d and fs3 == 0 and fe3 == 0xcb and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee51716; op2val:0x400f090d;
op3val:0x65fffff0; valaddr_reg:x3; val_offset:68592*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68592*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22865:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x651716 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0f090d and fs3 == 0 and fe3 == 0xcb and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee51716; op2val:0x400f090d;
op3val:0x65fffff8; valaddr_reg:x3; val_offset:68595*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68595*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22866:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x651716 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0f090d and fs3 == 0 and fe3 == 0xcb and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee51716; op2val:0x400f090d;
op3val:0x65fffffc; valaddr_reg:x3; val_offset:68598*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68598*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22867:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x651716 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0f090d and fs3 == 0 and fe3 == 0xcb and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee51716; op2val:0x400f090d;
op3val:0x65fffffe; valaddr_reg:x3; val_offset:68601*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68601*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22868:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x651716 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0f090d and fs3 == 0 and fe3 == 0xcb and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee51716; op2val:0x400f090d;
op3val:0x65ffffff; valaddr_reg:x3; val_offset:68604*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68604*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22869:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x651716 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0f090d and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee51716; op2val:0x400f090d;
op3val:0x7f000001; valaddr_reg:x3; val_offset:68607*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68607*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22870:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x651716 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0f090d and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee51716; op2val:0x400f090d;
op3val:0x7f000003; valaddr_reg:x3; val_offset:68610*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68610*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22871:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x651716 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0f090d and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee51716; op2val:0x400f090d;
op3val:0x7f000007; valaddr_reg:x3; val_offset:68613*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68613*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22872:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x651716 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0f090d and fs3 == 0 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee51716; op2val:0x400f090d;
op3val:0x7f199999; valaddr_reg:x3; val_offset:68616*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68616*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22873:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x651716 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0f090d and fs3 == 0 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee51716; op2val:0x400f090d;
op3val:0x7f249249; valaddr_reg:x3; val_offset:68619*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68619*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22874:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x651716 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0f090d and fs3 == 0 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee51716; op2val:0x400f090d;
op3val:0x7f333333; valaddr_reg:x3; val_offset:68622*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68622*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22875:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x651716 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0f090d and fs3 == 0 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee51716; op2val:0x400f090d;
op3val:0x7f36db6d; valaddr_reg:x3; val_offset:68625*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68625*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22876:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x651716 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0f090d and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee51716; op2val:0x400f090d;
op3val:0x7f3bbbbb; valaddr_reg:x3; val_offset:68628*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68628*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22877:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x651716 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0f090d and fs3 == 0 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee51716; op2val:0x400f090d;
op3val:0x7f444444; valaddr_reg:x3; val_offset:68631*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68631*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22878:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x651716 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0f090d and fs3 == 0 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee51716; op2val:0x400f090d;
op3val:0x7f4ccccc; valaddr_reg:x3; val_offset:68634*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68634*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22879:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x651716 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0f090d and fs3 == 0 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee51716; op2val:0x400f090d;
op3val:0x7f5b6db6; valaddr_reg:x3; val_offset:68637*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68637*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22880:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x651716 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0f090d and fs3 == 0 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee51716; op2val:0x400f090d;
op3val:0x7f666666; valaddr_reg:x3; val_offset:68640*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68640*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22881:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x651716 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0f090d and fs3 == 0 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee51716; op2val:0x400f090d;
op3val:0x7f6db6db; valaddr_reg:x3; val_offset:68643*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68643*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22882:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x651716 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0f090d and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee51716; op2val:0x400f090d;
op3val:0x7f7ffff8; valaddr_reg:x3; val_offset:68646*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68646*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22883:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x651716 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0f090d and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee51716; op2val:0x400f090d;
op3val:0x7f7ffffc; valaddr_reg:x3; val_offset:68649*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68649*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22884:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x651716 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0f090d and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee51716; op2val:0x400f090d;
op3val:0x7f7ffffe; valaddr_reg:x3; val_offset:68652*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68652*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22885:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x667462 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee67462; op2val:0x80000000;
op3val:0x80000001; valaddr_reg:x3; val_offset:68655*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68655*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22886:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x667462 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee67462; op2val:0x80000000;
op3val:0x80000003; valaddr_reg:x3; val_offset:68658*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68658*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22887:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x667462 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee67462; op2val:0x80000000;
op3val:0x80000007; valaddr_reg:x3; val_offset:68661*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68661*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22888:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x667462 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee67462; op2val:0x80000000;
op3val:0x80199999; valaddr_reg:x3; val_offset:68664*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68664*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22889:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x667462 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee67462; op2val:0x80000000;
op3val:0x80249249; valaddr_reg:x3; val_offset:68667*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68667*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22890:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x667462 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee67462; op2val:0x80000000;
op3val:0x80333333; valaddr_reg:x3; val_offset:68670*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68670*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22891:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x667462 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee67462; op2val:0x80000000;
op3val:0x8036db6d; valaddr_reg:x3; val_offset:68673*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68673*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22892:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x667462 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee67462; op2val:0x80000000;
op3val:0x803bbbbb; valaddr_reg:x3; val_offset:68676*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68676*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22893:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x667462 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee67462; op2val:0x80000000;
op3val:0x80444444; valaddr_reg:x3; val_offset:68679*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68679*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22894:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x667462 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee67462; op2val:0x80000000;
op3val:0x804ccccc; valaddr_reg:x3; val_offset:68682*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68682*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22895:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x667462 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee67462; op2val:0x80000000;
op3val:0x805b6db6; valaddr_reg:x3; val_offset:68685*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68685*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22896:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x667462 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee67462; op2val:0x80000000;
op3val:0x80666666; valaddr_reg:x3; val_offset:68688*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68688*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22897:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x667462 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee67462; op2val:0x80000000;
op3val:0x806db6db; valaddr_reg:x3; val_offset:68691*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68691*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22898:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x667462 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee67462; op2val:0x80000000;
op3val:0x807ffff8; valaddr_reg:x3; val_offset:68694*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68694*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22899:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x667462 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee67462; op2val:0x80000000;
op3val:0x807ffffc; valaddr_reg:x3; val_offset:68697*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68697*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22900:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x667462 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee67462; op2val:0x80000000;
op3val:0x807ffffe; valaddr_reg:x3; val_offset:68700*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68700*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22901:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x667462 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee67462; op2val:0x80000000;
op3val:0x82800000; valaddr_reg:x3; val_offset:68703*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68703*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22902:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x667462 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee67462; op2val:0x80000000;
op3val:0x82800001; valaddr_reg:x3; val_offset:68706*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68706*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22903:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x667462 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee67462; op2val:0x80000000;
op3val:0x82800003; valaddr_reg:x3; val_offset:68709*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68709*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22904:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x667462 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee67462; op2val:0x80000000;
op3val:0x82800007; valaddr_reg:x3; val_offset:68712*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68712*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22905:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x667462 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee67462; op2val:0x80000000;
op3val:0x8280000f; valaddr_reg:x3; val_offset:68715*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68715*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22906:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x667462 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee67462; op2val:0x80000000;
op3val:0x8280001f; valaddr_reg:x3; val_offset:68718*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68718*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22907:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x667462 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee67462; op2val:0x80000000;
op3val:0x8280003f; valaddr_reg:x3; val_offset:68721*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68721*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22908:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x667462 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee67462; op2val:0x80000000;
op3val:0x8280007f; valaddr_reg:x3; val_offset:68724*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68724*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22909:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x667462 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee67462; op2val:0x80000000;
op3val:0x828000ff; valaddr_reg:x3; val_offset:68727*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68727*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22910:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x667462 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee67462; op2val:0x80000000;
op3val:0x828001ff; valaddr_reg:x3; val_offset:68730*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68730*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22911:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x667462 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee67462; op2val:0x80000000;
op3val:0x828003ff; valaddr_reg:x3; val_offset:68733*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68733*0 + 3*178*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2128940249,32,FLEN)
NAN_BOXED(4687801,32,FLEN)
NAN_BOXED(1082130559,32,FLEN)
NAN_BOXED(2128940249,32,FLEN)
NAN_BOXED(4687801,32,FLEN)
NAN_BOXED(1082130687,32,FLEN)
NAN_BOXED(2128940249,32,FLEN)
NAN_BOXED(4687801,32,FLEN)
NAN_BOXED(1082130943,32,FLEN)
NAN_BOXED(2128940249,32,FLEN)
NAN_BOXED(4687801,32,FLEN)
NAN_BOXED(1082131455,32,FLEN)
NAN_BOXED(2128940249,32,FLEN)
NAN_BOXED(4687801,32,FLEN)
NAN_BOXED(1082132479,32,FLEN)
NAN_BOXED(2128940249,32,FLEN)
NAN_BOXED(4687801,32,FLEN)
NAN_BOXED(1082134527,32,FLEN)
NAN_BOXED(2128940249,32,FLEN)
NAN_BOXED(4687801,32,FLEN)
NAN_BOXED(1082138623,32,FLEN)
NAN_BOXED(2128940249,32,FLEN)
NAN_BOXED(4687801,32,FLEN)
NAN_BOXED(1082146815,32,FLEN)
NAN_BOXED(2128940249,32,FLEN)
NAN_BOXED(4687801,32,FLEN)
NAN_BOXED(1082163199,32,FLEN)
NAN_BOXED(2128940249,32,FLEN)
NAN_BOXED(4687801,32,FLEN)
NAN_BOXED(1082195967,32,FLEN)
NAN_BOXED(2128940249,32,FLEN)
NAN_BOXED(4687801,32,FLEN)
NAN_BOXED(1082261503,32,FLEN)
NAN_BOXED(2128940249,32,FLEN)
NAN_BOXED(4687801,32,FLEN)
NAN_BOXED(1082392575,32,FLEN)
NAN_BOXED(2128940249,32,FLEN)
NAN_BOXED(4687801,32,FLEN)
NAN_BOXED(1082654719,32,FLEN)
NAN_BOXED(2128940249,32,FLEN)
NAN_BOXED(4687801,32,FLEN)
NAN_BOXED(1083179007,32,FLEN)
NAN_BOXED(2128940249,32,FLEN)
NAN_BOXED(4687801,32,FLEN)
NAN_BOXED(1084227583,32,FLEN)
NAN_BOXED(2128940249,32,FLEN)
NAN_BOXED(4687801,32,FLEN)
NAN_BOXED(1086324735,32,FLEN)
NAN_BOXED(2128940249,32,FLEN)
NAN_BOXED(4687801,32,FLEN)
NAN_BOXED(1086324736,32,FLEN)
NAN_BOXED(2128940249,32,FLEN)
NAN_BOXED(4687801,32,FLEN)
NAN_BOXED(1088421888,32,FLEN)
NAN_BOXED(2128940249,32,FLEN)
NAN_BOXED(4687801,32,FLEN)
NAN_BOXED(1089470464,32,FLEN)
NAN_BOXED(2128940249,32,FLEN)
NAN_BOXED(4687801,32,FLEN)
NAN_BOXED(1089994752,32,FLEN)
NAN_BOXED(2128940249,32,FLEN)
NAN_BOXED(4687801,32,FLEN)
NAN_BOXED(1090256896,32,FLEN)
NAN_BOXED(2128940249,32,FLEN)
NAN_BOXED(4687801,32,FLEN)
NAN_BOXED(1090387968,32,FLEN)
NAN_BOXED(2128940249,32,FLEN)
NAN_BOXED(4687801,32,FLEN)
NAN_BOXED(1090453504,32,FLEN)
NAN_BOXED(2128940249,32,FLEN)
NAN_BOXED(4687801,32,FLEN)
NAN_BOXED(1090486272,32,FLEN)
NAN_BOXED(2128940249,32,FLEN)
NAN_BOXED(4687801,32,FLEN)
NAN_BOXED(1090502656,32,FLEN)
NAN_BOXED(2128940249,32,FLEN)
NAN_BOXED(4687801,32,FLEN)
NAN_BOXED(1090510848,32,FLEN)
NAN_BOXED(2128940249,32,FLEN)
NAN_BOXED(4687801,32,FLEN)
NAN_BOXED(1090514944,32,FLEN)
NAN_BOXED(2128940249,32,FLEN)
NAN_BOXED(4687801,32,FLEN)
NAN_BOXED(1090516992,32,FLEN)
NAN_BOXED(2128940249,32,FLEN)
NAN_BOXED(4687801,32,FLEN)
NAN_BOXED(1090518016,32,FLEN)
NAN_BOXED(2128940249,32,FLEN)
NAN_BOXED(4687801,32,FLEN)
NAN_BOXED(1090518528,32,FLEN)
NAN_BOXED(2128940249,32,FLEN)
NAN_BOXED(4687801,32,FLEN)
NAN_BOXED(1090518784,32,FLEN)
NAN_BOXED(2128940249,32,FLEN)
NAN_BOXED(4687801,32,FLEN)
NAN_BOXED(1090518912,32,FLEN)
NAN_BOXED(2128940249,32,FLEN)
NAN_BOXED(4687801,32,FLEN)
NAN_BOXED(1090518976,32,FLEN)
NAN_BOXED(2128940249,32,FLEN)
NAN_BOXED(4687801,32,FLEN)
NAN_BOXED(1090519008,32,FLEN)
NAN_BOXED(2128940249,32,FLEN)
NAN_BOXED(4687801,32,FLEN)
NAN_BOXED(1090519024,32,FLEN)
NAN_BOXED(2128940249,32,FLEN)
NAN_BOXED(4687801,32,FLEN)
NAN_BOXED(1090519032,32,FLEN)
NAN_BOXED(2128940249,32,FLEN)
NAN_BOXED(4687801,32,FLEN)
NAN_BOXED(1090519036,32,FLEN)
NAN_BOXED(2128940249,32,FLEN)
NAN_BOXED(4687801,32,FLEN)
NAN_BOXED(1090519038,32,FLEN)
NAN_BOXED(2128940249,32,FLEN)
NAN_BOXED(4687801,32,FLEN)
NAN_BOXED(1090519039,32,FLEN)
NAN_BOXED(2128942870,32,FLEN)
NAN_BOXED(1074727181,32,FLEN)
NAN_BOXED(1702887424,32,FLEN)
NAN_BOXED(2128942870,32,FLEN)
NAN_BOXED(1074727181,32,FLEN)
NAN_BOXED(1702887425,32,FLEN)
NAN_BOXED(2128942870,32,FLEN)
NAN_BOXED(1074727181,32,FLEN)
NAN_BOXED(1702887427,32,FLEN)
NAN_BOXED(2128942870,32,FLEN)
NAN_BOXED(1074727181,32,FLEN)
NAN_BOXED(1702887431,32,FLEN)
NAN_BOXED(2128942870,32,FLEN)
NAN_BOXED(1074727181,32,FLEN)
NAN_BOXED(1702887439,32,FLEN)
NAN_BOXED(2128942870,32,FLEN)
NAN_BOXED(1074727181,32,FLEN)
NAN_BOXED(1702887455,32,FLEN)
NAN_BOXED(2128942870,32,FLEN)
NAN_BOXED(1074727181,32,FLEN)
NAN_BOXED(1702887487,32,FLEN)
NAN_BOXED(2128942870,32,FLEN)
NAN_BOXED(1074727181,32,FLEN)
NAN_BOXED(1702887551,32,FLEN)
NAN_BOXED(2128942870,32,FLEN)
NAN_BOXED(1074727181,32,FLEN)
NAN_BOXED(1702887679,32,FLEN)
NAN_BOXED(2128942870,32,FLEN)
NAN_BOXED(1074727181,32,FLEN)
NAN_BOXED(1702887935,32,FLEN)
NAN_BOXED(2128942870,32,FLEN)
NAN_BOXED(1074727181,32,FLEN)
NAN_BOXED(1702888447,32,FLEN)
NAN_BOXED(2128942870,32,FLEN)
NAN_BOXED(1074727181,32,FLEN)
NAN_BOXED(1702889471,32,FLEN)
NAN_BOXED(2128942870,32,FLEN)
NAN_BOXED(1074727181,32,FLEN)
NAN_BOXED(1702891519,32,FLEN)
NAN_BOXED(2128942870,32,FLEN)
NAN_BOXED(1074727181,32,FLEN)
NAN_BOXED(1702895615,32,FLEN)
NAN_BOXED(2128942870,32,FLEN)
NAN_BOXED(1074727181,32,FLEN)
NAN_BOXED(1702903807,32,FLEN)
NAN_BOXED(2128942870,32,FLEN)
NAN_BOXED(1074727181,32,FLEN)
NAN_BOXED(1702920191,32,FLEN)
NAN_BOXED(2128942870,32,FLEN)
NAN_BOXED(1074727181,32,FLEN)
NAN_BOXED(1702952959,32,FLEN)
NAN_BOXED(2128942870,32,FLEN)
NAN_BOXED(1074727181,32,FLEN)
NAN_BOXED(1703018495,32,FLEN)
NAN_BOXED(2128942870,32,FLEN)
NAN_BOXED(1074727181,32,FLEN)
NAN_BOXED(1703149567,32,FLEN)
NAN_BOXED(2128942870,32,FLEN)
NAN_BOXED(1074727181,32,FLEN)
NAN_BOXED(1703411711,32,FLEN)
NAN_BOXED(2128942870,32,FLEN)
NAN_BOXED(1074727181,32,FLEN)
NAN_BOXED(1703935999,32,FLEN)
NAN_BOXED(2128942870,32,FLEN)
NAN_BOXED(1074727181,32,FLEN)
NAN_BOXED(1704984575,32,FLEN)
NAN_BOXED(2128942870,32,FLEN)
NAN_BOXED(1074727181,32,FLEN)
NAN_BOXED(1707081727,32,FLEN)
NAN_BOXED(2128942870,32,FLEN)
NAN_BOXED(1074727181,32,FLEN)
NAN_BOXED(1707081728,32,FLEN)
NAN_BOXED(2128942870,32,FLEN)
NAN_BOXED(1074727181,32,FLEN)
NAN_BOXED(1709178880,32,FLEN)
NAN_BOXED(2128942870,32,FLEN)
NAN_BOXED(1074727181,32,FLEN)
NAN_BOXED(1710227456,32,FLEN)
NAN_BOXED(2128942870,32,FLEN)
NAN_BOXED(1074727181,32,FLEN)
NAN_BOXED(1710751744,32,FLEN)
NAN_BOXED(2128942870,32,FLEN)
NAN_BOXED(1074727181,32,FLEN)
NAN_BOXED(1711013888,32,FLEN)
NAN_BOXED(2128942870,32,FLEN)
NAN_BOXED(1074727181,32,FLEN)
NAN_BOXED(1711144960,32,FLEN)
NAN_BOXED(2128942870,32,FLEN)
NAN_BOXED(1074727181,32,FLEN)
NAN_BOXED(1711210496,32,FLEN)
NAN_BOXED(2128942870,32,FLEN)
NAN_BOXED(1074727181,32,FLEN)
NAN_BOXED(1711243264,32,FLEN)
NAN_BOXED(2128942870,32,FLEN)
NAN_BOXED(1074727181,32,FLEN)
NAN_BOXED(1711259648,32,FLEN)
NAN_BOXED(2128942870,32,FLEN)
NAN_BOXED(1074727181,32,FLEN)
NAN_BOXED(1711267840,32,FLEN)
NAN_BOXED(2128942870,32,FLEN)
NAN_BOXED(1074727181,32,FLEN)
NAN_BOXED(1711271936,32,FLEN)
NAN_BOXED(2128942870,32,FLEN)
NAN_BOXED(1074727181,32,FLEN)
NAN_BOXED(1711273984,32,FLEN)
NAN_BOXED(2128942870,32,FLEN)
NAN_BOXED(1074727181,32,FLEN)
NAN_BOXED(1711275008,32,FLEN)
NAN_BOXED(2128942870,32,FLEN)
NAN_BOXED(1074727181,32,FLEN)
NAN_BOXED(1711275520,32,FLEN)
NAN_BOXED(2128942870,32,FLEN)
NAN_BOXED(1074727181,32,FLEN)
NAN_BOXED(1711275776,32,FLEN)
NAN_BOXED(2128942870,32,FLEN)
NAN_BOXED(1074727181,32,FLEN)
NAN_BOXED(1711275904,32,FLEN)
NAN_BOXED(2128942870,32,FLEN)
NAN_BOXED(1074727181,32,FLEN)
NAN_BOXED(1711275968,32,FLEN)
NAN_BOXED(2128942870,32,FLEN)
NAN_BOXED(1074727181,32,FLEN)
NAN_BOXED(1711276000,32,FLEN)
NAN_BOXED(2128942870,32,FLEN)
NAN_BOXED(1074727181,32,FLEN)
NAN_BOXED(1711276016,32,FLEN)
NAN_BOXED(2128942870,32,FLEN)
NAN_BOXED(1074727181,32,FLEN)
NAN_BOXED(1711276024,32,FLEN)
NAN_BOXED(2128942870,32,FLEN)
NAN_BOXED(1074727181,32,FLEN)
NAN_BOXED(1711276028,32,FLEN)
NAN_BOXED(2128942870,32,FLEN)
NAN_BOXED(1074727181,32,FLEN)
NAN_BOXED(1711276030,32,FLEN)
NAN_BOXED(2128942870,32,FLEN)
NAN_BOXED(1074727181,32,FLEN)
NAN_BOXED(1711276031,32,FLEN)
NAN_BOXED(2128942870,32,FLEN)
NAN_BOXED(1074727181,32,FLEN)
NAN_BOXED(2130706433,32,FLEN)
NAN_BOXED(2128942870,32,FLEN)
NAN_BOXED(1074727181,32,FLEN)
NAN_BOXED(2130706435,32,FLEN)
NAN_BOXED(2128942870,32,FLEN)
NAN_BOXED(1074727181,32,FLEN)
NAN_BOXED(2130706439,32,FLEN)
NAN_BOXED(2128942870,32,FLEN)
NAN_BOXED(1074727181,32,FLEN)
NAN_BOXED(2132384153,32,FLEN)
NAN_BOXED(2128942870,32,FLEN)
NAN_BOXED(1074727181,32,FLEN)
NAN_BOXED(2133103177,32,FLEN)
NAN_BOXED(2128942870,32,FLEN)
NAN_BOXED(1074727181,32,FLEN)
NAN_BOXED(2134061875,32,FLEN)
NAN_BOXED(2128942870,32,FLEN)
NAN_BOXED(1074727181,32,FLEN)
NAN_BOXED(2134301549,32,FLEN)
NAN_BOXED(2128942870,32,FLEN)
NAN_BOXED(1074727181,32,FLEN)
NAN_BOXED(2134621115,32,FLEN)
NAN_BOXED(2128942870,32,FLEN)
NAN_BOXED(1074727181,32,FLEN)
NAN_BOXED(2135180356,32,FLEN)
NAN_BOXED(2128942870,32,FLEN)
NAN_BOXED(1074727181,32,FLEN)
NAN_BOXED(2135739596,32,FLEN)
NAN_BOXED(2128942870,32,FLEN)
NAN_BOXED(1074727181,32,FLEN)
NAN_BOXED(2136698294,32,FLEN)
NAN_BOXED(2128942870,32,FLEN)
NAN_BOXED(1074727181,32,FLEN)
NAN_BOXED(2137417318,32,FLEN)
NAN_BOXED(2128942870,32,FLEN)
NAN_BOXED(1074727181,32,FLEN)
NAN_BOXED(2137896667,32,FLEN)
NAN_BOXED(2128942870,32,FLEN)
NAN_BOXED(1074727181,32,FLEN)
NAN_BOXED(2139095032,32,FLEN)
NAN_BOXED(2128942870,32,FLEN)
NAN_BOXED(1074727181,32,FLEN)
NAN_BOXED(2139095036,32,FLEN)
NAN_BOXED(2128942870,32,FLEN)
NAN_BOXED(1074727181,32,FLEN)
NAN_BOXED(2139095038,32,FLEN)
NAN_BOXED(2129032290,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2129032290,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483651,32,FLEN)
NAN_BOXED(2129032290,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483655,32,FLEN)
NAN_BOXED(2129032290,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149161369,32,FLEN)
NAN_BOXED(2129032290,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149880393,32,FLEN)
NAN_BOXED(2129032290,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2150839091,32,FLEN)
NAN_BOXED(2129032290,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151078765,32,FLEN)
NAN_BOXED(2129032290,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151398331,32,FLEN)
NAN_BOXED(2129032290,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151957572,32,FLEN)
NAN_BOXED(2129032290,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2152516812,32,FLEN)
NAN_BOXED(2129032290,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2153475510,32,FLEN)
NAN_BOXED(2129032290,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154194534,32,FLEN)
NAN_BOXED(2129032290,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154673883,32,FLEN)
NAN_BOXED(2129032290,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872248,32,FLEN)
NAN_BOXED(2129032290,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872252,32,FLEN)
NAN_BOXED(2129032290,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2129032290,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189426688,32,FLEN)
NAN_BOXED(2129032290,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189426689,32,FLEN)
NAN_BOXED(2129032290,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189426691,32,FLEN)
NAN_BOXED(2129032290,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189426695,32,FLEN)
NAN_BOXED(2129032290,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189426703,32,FLEN)
NAN_BOXED(2129032290,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189426719,32,FLEN)
NAN_BOXED(2129032290,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189426751,32,FLEN)
NAN_BOXED(2129032290,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189426815,32,FLEN)
NAN_BOXED(2129032290,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189426943,32,FLEN)
NAN_BOXED(2129032290,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189427199,32,FLEN)
NAN_BOXED(2129032290,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189427711,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
