
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:17:59 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_2176:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x3b85b9 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x2ebde8 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d3b85b9; op2val:0x1aebde8;
op3val:0x3f800fff; valaddr_reg:x3; val_offset:6528*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6528*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2177:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x3b85b9 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x2ebde8 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d3b85b9; op2val:0x1aebde8;
op3val:0x3f801fff; valaddr_reg:x3; val_offset:6531*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6531*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2178:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x3b85b9 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x2ebde8 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d3b85b9; op2val:0x1aebde8;
op3val:0x3f803fff; valaddr_reg:x3; val_offset:6534*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6534*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2179:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x3b85b9 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x2ebde8 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d3b85b9; op2val:0x1aebde8;
op3val:0x3f807fff; valaddr_reg:x3; val_offset:6537*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6537*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2180:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x3b85b9 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x2ebde8 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d3b85b9; op2val:0x1aebde8;
op3val:0x3f80ffff; valaddr_reg:x3; val_offset:6540*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6540*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2181:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x3b85b9 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x2ebde8 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d3b85b9; op2val:0x1aebde8;
op3val:0x3f81ffff; valaddr_reg:x3; val_offset:6543*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6543*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2182:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x3b85b9 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x2ebde8 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d3b85b9; op2val:0x1aebde8;
op3val:0x3f83ffff; valaddr_reg:x3; val_offset:6546*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6546*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2183:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x3b85b9 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x2ebde8 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d3b85b9; op2val:0x1aebde8;
op3val:0x3f87ffff; valaddr_reg:x3; val_offset:6549*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6549*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2184:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x3b85b9 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x2ebde8 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d3b85b9; op2val:0x1aebde8;
op3val:0x3f8fffff; valaddr_reg:x3; val_offset:6552*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6552*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2185:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x3b85b9 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x2ebde8 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d3b85b9; op2val:0x1aebde8;
op3val:0x3f999999; valaddr_reg:x3; val_offset:6555*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6555*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2186:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x3b85b9 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x2ebde8 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d3b85b9; op2val:0x1aebde8;
op3val:0x3f9fffff; valaddr_reg:x3; val_offset:6558*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6558*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2187:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x3b85b9 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x2ebde8 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d3b85b9; op2val:0x1aebde8;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:6561*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6561*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2188:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x3b85b9 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x2ebde8 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d3b85b9; op2val:0x1aebde8;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:6564*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6564*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2189:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x3b85b9 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x2ebde8 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d3b85b9; op2val:0x1aebde8;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:6567*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6567*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2190:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x3b85b9 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x2ebde8 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d3b85b9; op2val:0x1aebde8;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:6570*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6570*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2191:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x3b85b9 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x2ebde8 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d3b85b9; op2val:0x1aebde8;
op3val:0x3fbfffff; valaddr_reg:x3; val_offset:6573*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6573*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2192:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x3b85b9 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x2ebde8 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d3b85b9; op2val:0x1aebde8;
op3val:0x3fc00000; valaddr_reg:x3; val_offset:6576*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6576*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2193:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x3b85b9 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x2ebde8 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d3b85b9; op2val:0x1aebde8;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:6579*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6579*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2194:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x3b85b9 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x2ebde8 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d3b85b9; op2val:0x1aebde8;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:6582*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6582*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2195:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x3b85b9 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x2ebde8 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d3b85b9; op2val:0x1aebde8;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:6585*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6585*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2196:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x3b85b9 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x2ebde8 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d3b85b9; op2val:0x1aebde8;
op3val:0x3fe00000; valaddr_reg:x3; val_offset:6588*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6588*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2197:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x3b85b9 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x2ebde8 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d3b85b9; op2val:0x1aebde8;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:6591*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6591*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2198:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x3b85b9 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x2ebde8 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d3b85b9; op2val:0x1aebde8;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:6594*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6594*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2199:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x3b85b9 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x2ebde8 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d3b85b9; op2val:0x1aebde8;
op3val:0x3ff00000; valaddr_reg:x3; val_offset:6597*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6597*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2200:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x3b85b9 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x2ebde8 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d3b85b9; op2val:0x1aebde8;
op3val:0x3ff80000; valaddr_reg:x3; val_offset:6600*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6600*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2201:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x3b85b9 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x2ebde8 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d3b85b9; op2val:0x1aebde8;
op3val:0x3ffc0000; valaddr_reg:x3; val_offset:6603*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6603*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2202:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x3b85b9 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x2ebde8 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d3b85b9; op2val:0x1aebde8;
op3val:0x3ffe0000; valaddr_reg:x3; val_offset:6606*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6606*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2203:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x3b85b9 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x2ebde8 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d3b85b9; op2val:0x1aebde8;
op3val:0x3fff0000; valaddr_reg:x3; val_offset:6609*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6609*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2204:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x3b85b9 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x2ebde8 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d3b85b9; op2val:0x1aebde8;
op3val:0x3fff8000; valaddr_reg:x3; val_offset:6612*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6612*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2205:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x3b85b9 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x2ebde8 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d3b85b9; op2val:0x1aebde8;
op3val:0x3fffc000; valaddr_reg:x3; val_offset:6615*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6615*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2206:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x3b85b9 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x2ebde8 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d3b85b9; op2val:0x1aebde8;
op3val:0x3fffe000; valaddr_reg:x3; val_offset:6618*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6618*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2207:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x3b85b9 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x2ebde8 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d3b85b9; op2val:0x1aebde8;
op3val:0x3ffff000; valaddr_reg:x3; val_offset:6621*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6621*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2208:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x3b85b9 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x2ebde8 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d3b85b9; op2val:0x1aebde8;
op3val:0x3ffff800; valaddr_reg:x3; val_offset:6624*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6624*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2209:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x3b85b9 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x2ebde8 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d3b85b9; op2val:0x1aebde8;
op3val:0x3ffffc00; valaddr_reg:x3; val_offset:6627*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6627*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2210:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x3b85b9 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x2ebde8 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d3b85b9; op2val:0x1aebde8;
op3val:0x3ffffe00; valaddr_reg:x3; val_offset:6630*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6630*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2211:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x3b85b9 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x2ebde8 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d3b85b9; op2val:0x1aebde8;
op3val:0x3fffff00; valaddr_reg:x3; val_offset:6633*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6633*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2212:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x3b85b9 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x2ebde8 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d3b85b9; op2val:0x1aebde8;
op3val:0x3fffff80; valaddr_reg:x3; val_offset:6636*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6636*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2213:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x3b85b9 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x2ebde8 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d3b85b9; op2val:0x1aebde8;
op3val:0x3fffffc0; valaddr_reg:x3; val_offset:6639*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6639*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2214:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x3b85b9 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x2ebde8 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d3b85b9; op2val:0x1aebde8;
op3val:0x3fffffe0; valaddr_reg:x3; val_offset:6642*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6642*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2215:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x3b85b9 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x2ebde8 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d3b85b9; op2val:0x1aebde8;
op3val:0x3ffffff0; valaddr_reg:x3; val_offset:6645*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6645*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2216:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x3b85b9 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x2ebde8 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d3b85b9; op2val:0x1aebde8;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:6648*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6648*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2217:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x3b85b9 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x2ebde8 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d3b85b9; op2val:0x1aebde8;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:6651*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6651*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2218:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x3b85b9 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x2ebde8 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d3b85b9; op2val:0x1aebde8;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:6654*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6654*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2219:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x3b85b9 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x2ebde8 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d3b85b9; op2val:0x1aebde8;
op3val:0x3fffffff; valaddr_reg:x3; val_offset:6657*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6657*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2220:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x3ba71d and fs2 == 0 and fe2 == 0x03 and fm2 == 0x2e9ed0 and fs3 == 0 and fe3 == 0x76 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d3ba71d; op2val:0x1ae9ed0;
op3val:0x3b000000; valaddr_reg:x3; val_offset:6660*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6660*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2221:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x3ba71d and fs2 == 0 and fe2 == 0x03 and fm2 == 0x2e9ed0 and fs3 == 0 and fe3 == 0x76 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d3ba71d; op2val:0x1ae9ed0;
op3val:0x3b000001; valaddr_reg:x3; val_offset:6663*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6663*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2222:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x3ba71d and fs2 == 0 and fe2 == 0x03 and fm2 == 0x2e9ed0 and fs3 == 0 and fe3 == 0x76 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d3ba71d; op2val:0x1ae9ed0;
op3val:0x3b000003; valaddr_reg:x3; val_offset:6666*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6666*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2223:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x3ba71d and fs2 == 0 and fe2 == 0x03 and fm2 == 0x2e9ed0 and fs3 == 0 and fe3 == 0x76 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d3ba71d; op2val:0x1ae9ed0;
op3val:0x3b000007; valaddr_reg:x3; val_offset:6669*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6669*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2224:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x3ba71d and fs2 == 0 and fe2 == 0x03 and fm2 == 0x2e9ed0 and fs3 == 0 and fe3 == 0x76 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d3ba71d; op2val:0x1ae9ed0;
op3val:0x3b00000f; valaddr_reg:x3; val_offset:6672*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6672*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2225:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x3ba71d and fs2 == 0 and fe2 == 0x03 and fm2 == 0x2e9ed0 and fs3 == 0 and fe3 == 0x76 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d3ba71d; op2val:0x1ae9ed0;
op3val:0x3b00001f; valaddr_reg:x3; val_offset:6675*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6675*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2226:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x3ba71d and fs2 == 0 and fe2 == 0x03 and fm2 == 0x2e9ed0 and fs3 == 0 and fe3 == 0x76 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d3ba71d; op2val:0x1ae9ed0;
op3val:0x3b00003f; valaddr_reg:x3; val_offset:6678*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6678*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2227:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x3ba71d and fs2 == 0 and fe2 == 0x03 and fm2 == 0x2e9ed0 and fs3 == 0 and fe3 == 0x76 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d3ba71d; op2val:0x1ae9ed0;
op3val:0x3b00007f; valaddr_reg:x3; val_offset:6681*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6681*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2228:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x3ba71d and fs2 == 0 and fe2 == 0x03 and fm2 == 0x2e9ed0 and fs3 == 0 and fe3 == 0x76 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d3ba71d; op2val:0x1ae9ed0;
op3val:0x3b0000ff; valaddr_reg:x3; val_offset:6684*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6684*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2229:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x3ba71d and fs2 == 0 and fe2 == 0x03 and fm2 == 0x2e9ed0 and fs3 == 0 and fe3 == 0x76 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d3ba71d; op2val:0x1ae9ed0;
op3val:0x3b0001ff; valaddr_reg:x3; val_offset:6687*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6687*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2230:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x3ba71d and fs2 == 0 and fe2 == 0x03 and fm2 == 0x2e9ed0 and fs3 == 0 and fe3 == 0x76 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d3ba71d; op2val:0x1ae9ed0;
op3val:0x3b0003ff; valaddr_reg:x3; val_offset:6690*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6690*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2231:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x3ba71d and fs2 == 0 and fe2 == 0x03 and fm2 == 0x2e9ed0 and fs3 == 0 and fe3 == 0x76 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d3ba71d; op2val:0x1ae9ed0;
op3val:0x3b0007ff; valaddr_reg:x3; val_offset:6693*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6693*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2232:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x3ba71d and fs2 == 0 and fe2 == 0x03 and fm2 == 0x2e9ed0 and fs3 == 0 and fe3 == 0x76 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d3ba71d; op2val:0x1ae9ed0;
op3val:0x3b000fff; valaddr_reg:x3; val_offset:6696*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6696*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2233:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x3ba71d and fs2 == 0 and fe2 == 0x03 and fm2 == 0x2e9ed0 and fs3 == 0 and fe3 == 0x76 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d3ba71d; op2val:0x1ae9ed0;
op3val:0x3b001fff; valaddr_reg:x3; val_offset:6699*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6699*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2234:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x3ba71d and fs2 == 0 and fe2 == 0x03 and fm2 == 0x2e9ed0 and fs3 == 0 and fe3 == 0x76 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d3ba71d; op2val:0x1ae9ed0;
op3val:0x3b003fff; valaddr_reg:x3; val_offset:6702*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6702*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2235:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x3ba71d and fs2 == 0 and fe2 == 0x03 and fm2 == 0x2e9ed0 and fs3 == 0 and fe3 == 0x76 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d3ba71d; op2val:0x1ae9ed0;
op3val:0x3b007fff; valaddr_reg:x3; val_offset:6705*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6705*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2236:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x3ba71d and fs2 == 0 and fe2 == 0x03 and fm2 == 0x2e9ed0 and fs3 == 0 and fe3 == 0x76 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d3ba71d; op2val:0x1ae9ed0;
op3val:0x3b00ffff; valaddr_reg:x3; val_offset:6708*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6708*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2237:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x3ba71d and fs2 == 0 and fe2 == 0x03 and fm2 == 0x2e9ed0 and fs3 == 0 and fe3 == 0x76 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d3ba71d; op2val:0x1ae9ed0;
op3val:0x3b01ffff; valaddr_reg:x3; val_offset:6711*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6711*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2238:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x3ba71d and fs2 == 0 and fe2 == 0x03 and fm2 == 0x2e9ed0 and fs3 == 0 and fe3 == 0x76 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d3ba71d; op2val:0x1ae9ed0;
op3val:0x3b03ffff; valaddr_reg:x3; val_offset:6714*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6714*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2239:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x3ba71d and fs2 == 0 and fe2 == 0x03 and fm2 == 0x2e9ed0 and fs3 == 0 and fe3 == 0x76 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d3ba71d; op2val:0x1ae9ed0;
op3val:0x3b07ffff; valaddr_reg:x3; val_offset:6717*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6717*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2240:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x3ba71d and fs2 == 0 and fe2 == 0x03 and fm2 == 0x2e9ed0 and fs3 == 0 and fe3 == 0x76 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d3ba71d; op2val:0x1ae9ed0;
op3val:0x3b0fffff; valaddr_reg:x3; val_offset:6720*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6720*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2241:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x3ba71d and fs2 == 0 and fe2 == 0x03 and fm2 == 0x2e9ed0 and fs3 == 0 and fe3 == 0x76 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d3ba71d; op2val:0x1ae9ed0;
op3val:0x3b1fffff; valaddr_reg:x3; val_offset:6723*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6723*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2242:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x3ba71d and fs2 == 0 and fe2 == 0x03 and fm2 == 0x2e9ed0 and fs3 == 0 and fe3 == 0x76 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d3ba71d; op2val:0x1ae9ed0;
op3val:0x3b3fffff; valaddr_reg:x3; val_offset:6726*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6726*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2243:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x3ba71d and fs2 == 0 and fe2 == 0x03 and fm2 == 0x2e9ed0 and fs3 == 0 and fe3 == 0x76 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d3ba71d; op2val:0x1ae9ed0;
op3val:0x3b400000; valaddr_reg:x3; val_offset:6729*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6729*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2244:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x3ba71d and fs2 == 0 and fe2 == 0x03 and fm2 == 0x2e9ed0 and fs3 == 0 and fe3 == 0x76 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d3ba71d; op2val:0x1ae9ed0;
op3val:0x3b600000; valaddr_reg:x3; val_offset:6732*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6732*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2245:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x3ba71d and fs2 == 0 and fe2 == 0x03 and fm2 == 0x2e9ed0 and fs3 == 0 and fe3 == 0x76 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d3ba71d; op2val:0x1ae9ed0;
op3val:0x3b700000; valaddr_reg:x3; val_offset:6735*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6735*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2246:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x3ba71d and fs2 == 0 and fe2 == 0x03 and fm2 == 0x2e9ed0 and fs3 == 0 and fe3 == 0x76 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d3ba71d; op2val:0x1ae9ed0;
op3val:0x3b780000; valaddr_reg:x3; val_offset:6738*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6738*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2247:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x3ba71d and fs2 == 0 and fe2 == 0x03 and fm2 == 0x2e9ed0 and fs3 == 0 and fe3 == 0x76 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d3ba71d; op2val:0x1ae9ed0;
op3val:0x3b7c0000; valaddr_reg:x3; val_offset:6741*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6741*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2248:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x3ba71d and fs2 == 0 and fe2 == 0x03 and fm2 == 0x2e9ed0 and fs3 == 0 and fe3 == 0x76 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d3ba71d; op2val:0x1ae9ed0;
op3val:0x3b7e0000; valaddr_reg:x3; val_offset:6744*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6744*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2249:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x3ba71d and fs2 == 0 and fe2 == 0x03 and fm2 == 0x2e9ed0 and fs3 == 0 and fe3 == 0x76 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d3ba71d; op2val:0x1ae9ed0;
op3val:0x3b7f0000; valaddr_reg:x3; val_offset:6747*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6747*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2250:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x3ba71d and fs2 == 0 and fe2 == 0x03 and fm2 == 0x2e9ed0 and fs3 == 0 and fe3 == 0x76 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d3ba71d; op2val:0x1ae9ed0;
op3val:0x3b7f8000; valaddr_reg:x3; val_offset:6750*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6750*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2251:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x3ba71d and fs2 == 0 and fe2 == 0x03 and fm2 == 0x2e9ed0 and fs3 == 0 and fe3 == 0x76 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d3ba71d; op2val:0x1ae9ed0;
op3val:0x3b7fc000; valaddr_reg:x3; val_offset:6753*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6753*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2252:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x3ba71d and fs2 == 0 and fe2 == 0x03 and fm2 == 0x2e9ed0 and fs3 == 0 and fe3 == 0x76 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d3ba71d; op2val:0x1ae9ed0;
op3val:0x3b7fe000; valaddr_reg:x3; val_offset:6756*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6756*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2253:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x3ba71d and fs2 == 0 and fe2 == 0x03 and fm2 == 0x2e9ed0 and fs3 == 0 and fe3 == 0x76 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d3ba71d; op2val:0x1ae9ed0;
op3val:0x3b7ff000; valaddr_reg:x3; val_offset:6759*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6759*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2254:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x3ba71d and fs2 == 0 and fe2 == 0x03 and fm2 == 0x2e9ed0 and fs3 == 0 and fe3 == 0x76 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d3ba71d; op2val:0x1ae9ed0;
op3val:0x3b7ff800; valaddr_reg:x3; val_offset:6762*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6762*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2255:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x3ba71d and fs2 == 0 and fe2 == 0x03 and fm2 == 0x2e9ed0 and fs3 == 0 and fe3 == 0x76 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d3ba71d; op2val:0x1ae9ed0;
op3val:0x3b7ffc00; valaddr_reg:x3; val_offset:6765*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6765*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2256:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x3ba71d and fs2 == 0 and fe2 == 0x03 and fm2 == 0x2e9ed0 and fs3 == 0 and fe3 == 0x76 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d3ba71d; op2val:0x1ae9ed0;
op3val:0x3b7ffe00; valaddr_reg:x3; val_offset:6768*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6768*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2257:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x3ba71d and fs2 == 0 and fe2 == 0x03 and fm2 == 0x2e9ed0 and fs3 == 0 and fe3 == 0x76 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d3ba71d; op2val:0x1ae9ed0;
op3val:0x3b7fff00; valaddr_reg:x3; val_offset:6771*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6771*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2258:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x3ba71d and fs2 == 0 and fe2 == 0x03 and fm2 == 0x2e9ed0 and fs3 == 0 and fe3 == 0x76 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d3ba71d; op2val:0x1ae9ed0;
op3val:0x3b7fff80; valaddr_reg:x3; val_offset:6774*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6774*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2259:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x3ba71d and fs2 == 0 and fe2 == 0x03 and fm2 == 0x2e9ed0 and fs3 == 0 and fe3 == 0x76 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d3ba71d; op2val:0x1ae9ed0;
op3val:0x3b7fffc0; valaddr_reg:x3; val_offset:6777*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6777*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2260:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x3ba71d and fs2 == 0 and fe2 == 0x03 and fm2 == 0x2e9ed0 and fs3 == 0 and fe3 == 0x76 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d3ba71d; op2val:0x1ae9ed0;
op3val:0x3b7fffe0; valaddr_reg:x3; val_offset:6780*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6780*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2261:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x3ba71d and fs2 == 0 and fe2 == 0x03 and fm2 == 0x2e9ed0 and fs3 == 0 and fe3 == 0x76 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d3ba71d; op2val:0x1ae9ed0;
op3val:0x3b7ffff0; valaddr_reg:x3; val_offset:6783*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6783*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2262:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x3ba71d and fs2 == 0 and fe2 == 0x03 and fm2 == 0x2e9ed0 and fs3 == 0 and fe3 == 0x76 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d3ba71d; op2val:0x1ae9ed0;
op3val:0x3b7ffff8; valaddr_reg:x3; val_offset:6786*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6786*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2263:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x3ba71d and fs2 == 0 and fe2 == 0x03 and fm2 == 0x2e9ed0 and fs3 == 0 and fe3 == 0x76 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d3ba71d; op2val:0x1ae9ed0;
op3val:0x3b7ffffc; valaddr_reg:x3; val_offset:6789*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6789*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2264:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x3ba71d and fs2 == 0 and fe2 == 0x03 and fm2 == 0x2e9ed0 and fs3 == 0 and fe3 == 0x76 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d3ba71d; op2val:0x1ae9ed0;
op3val:0x3b7ffffe; valaddr_reg:x3; val_offset:6792*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6792*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2265:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x3ba71d and fs2 == 0 and fe2 == 0x03 and fm2 == 0x2e9ed0 and fs3 == 0 and fe3 == 0x76 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d3ba71d; op2val:0x1ae9ed0;
op3val:0x3b7fffff; valaddr_reg:x3; val_offset:6795*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6795*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2266:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x3ba71d and fs2 == 0 and fe2 == 0x03 and fm2 == 0x2e9ed0 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d3ba71d; op2val:0x1ae9ed0;
op3val:0x3f800001; valaddr_reg:x3; val_offset:6798*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6798*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2267:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x3ba71d and fs2 == 0 and fe2 == 0x03 and fm2 == 0x2e9ed0 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d3ba71d; op2val:0x1ae9ed0;
op3val:0x3f800003; valaddr_reg:x3; val_offset:6801*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6801*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2268:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x3ba71d and fs2 == 0 and fe2 == 0x03 and fm2 == 0x2e9ed0 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d3ba71d; op2val:0x1ae9ed0;
op3val:0x3f800007; valaddr_reg:x3; val_offset:6804*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6804*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2269:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x3ba71d and fs2 == 0 and fe2 == 0x03 and fm2 == 0x2e9ed0 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d3ba71d; op2val:0x1ae9ed0;
op3val:0x3f999999; valaddr_reg:x3; val_offset:6807*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6807*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2270:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x3ba71d and fs2 == 0 and fe2 == 0x03 and fm2 == 0x2e9ed0 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d3ba71d; op2val:0x1ae9ed0;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:6810*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6810*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2271:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x3ba71d and fs2 == 0 and fe2 == 0x03 and fm2 == 0x2e9ed0 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d3ba71d; op2val:0x1ae9ed0;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:6813*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6813*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2272:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x3ba71d and fs2 == 0 and fe2 == 0x03 and fm2 == 0x2e9ed0 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d3ba71d; op2val:0x1ae9ed0;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:6816*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6816*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2273:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x3ba71d and fs2 == 0 and fe2 == 0x03 and fm2 == 0x2e9ed0 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d3ba71d; op2val:0x1ae9ed0;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:6819*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6819*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2274:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x3ba71d and fs2 == 0 and fe2 == 0x03 and fm2 == 0x2e9ed0 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d3ba71d; op2val:0x1ae9ed0;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:6822*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6822*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2275:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x3ba71d and fs2 == 0 and fe2 == 0x03 and fm2 == 0x2e9ed0 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d3ba71d; op2val:0x1ae9ed0;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:6825*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6825*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2276:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x3ba71d and fs2 == 0 and fe2 == 0x03 and fm2 == 0x2e9ed0 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d3ba71d; op2val:0x1ae9ed0;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:6828*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6828*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2277:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x3ba71d and fs2 == 0 and fe2 == 0x03 and fm2 == 0x2e9ed0 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d3ba71d; op2val:0x1ae9ed0;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:6831*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6831*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2278:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x3ba71d and fs2 == 0 and fe2 == 0x03 and fm2 == 0x2e9ed0 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d3ba71d; op2val:0x1ae9ed0;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:6834*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6834*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2279:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x3ba71d and fs2 == 0 and fe2 == 0x03 and fm2 == 0x2e9ed0 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d3ba71d; op2val:0x1ae9ed0;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:6837*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6837*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2280:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x3ba71d and fs2 == 0 and fe2 == 0x03 and fm2 == 0x2e9ed0 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d3ba71d; op2val:0x1ae9ed0;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:6840*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6840*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2281:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x3ba71d and fs2 == 0 and fe2 == 0x03 and fm2 == 0x2e9ed0 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d3ba71d; op2val:0x1ae9ed0;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:6843*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6843*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2282:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x3bdf28 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d3bdf28; op2val:0x80000000;
op3val:0x80000000; valaddr_reg:x3; val_offset:6846*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6846*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2283:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x3bdf28 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d3bdf28; op2val:0x80000000;
op3val:0x80000001; valaddr_reg:x3; val_offset:6849*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6849*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2284:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x3bdf28 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d3bdf28; op2val:0x80000000;
op3val:0x80000003; valaddr_reg:x3; val_offset:6852*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6852*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2285:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x3bdf28 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d3bdf28; op2val:0x80000000;
op3val:0x80000007; valaddr_reg:x3; val_offset:6855*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6855*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2286:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x3bdf28 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d3bdf28; op2val:0x80000000;
op3val:0x8000000f; valaddr_reg:x3; val_offset:6858*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6858*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2287:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x3bdf28 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d3bdf28; op2val:0x80000000;
op3val:0x8000001f; valaddr_reg:x3; val_offset:6861*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6861*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2288:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x3bdf28 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d3bdf28; op2val:0x80000000;
op3val:0x8000003f; valaddr_reg:x3; val_offset:6864*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6864*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2289:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x3bdf28 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d3bdf28; op2val:0x80000000;
op3val:0x8000007f; valaddr_reg:x3; val_offset:6867*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6867*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2290:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x3bdf28 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d3bdf28; op2val:0x80000000;
op3val:0x800000ff; valaddr_reg:x3; val_offset:6870*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6870*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2291:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x3bdf28 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d3bdf28; op2val:0x80000000;
op3val:0x800001ff; valaddr_reg:x3; val_offset:6873*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6873*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2292:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x3bdf28 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d3bdf28; op2val:0x80000000;
op3val:0x800003ff; valaddr_reg:x3; val_offset:6876*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6876*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2293:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x3bdf28 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d3bdf28; op2val:0x80000000;
op3val:0x800007ff; valaddr_reg:x3; val_offset:6879*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6879*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2294:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x3bdf28 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d3bdf28; op2val:0x80000000;
op3val:0x80000fff; valaddr_reg:x3; val_offset:6882*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6882*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2295:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x3bdf28 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d3bdf28; op2val:0x80000000;
op3val:0x80001fff; valaddr_reg:x3; val_offset:6885*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6885*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2296:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x3bdf28 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d3bdf28; op2val:0x80000000;
op3val:0x80003fff; valaddr_reg:x3; val_offset:6888*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6888*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2297:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x3bdf28 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d3bdf28; op2val:0x80000000;
op3val:0x80007fff; valaddr_reg:x3; val_offset:6891*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6891*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2298:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x3bdf28 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d3bdf28; op2val:0x80000000;
op3val:0x8000ffff; valaddr_reg:x3; val_offset:6894*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6894*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2299:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x3bdf28 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d3bdf28; op2val:0x80000000;
op3val:0x8001ffff; valaddr_reg:x3; val_offset:6897*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6897*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2300:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x3bdf28 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d3bdf28; op2val:0x80000000;
op3val:0x8003ffff; valaddr_reg:x3; val_offset:6900*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6900*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2301:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x3bdf28 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d3bdf28; op2val:0x80000000;
op3val:0x8007ffff; valaddr_reg:x3; val_offset:6903*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6903*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2302:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x3bdf28 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d3bdf28; op2val:0x80000000;
op3val:0x800fffff; valaddr_reg:x3; val_offset:6906*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6906*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2303:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x3bdf28 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d3bdf28; op2val:0x80000000;
op3val:0x80199999; valaddr_reg:x3; val_offset:6909*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6909*0 + 3*17*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2101052857,32,FLEN)
NAN_BOXED(28229096,32,FLEN)
NAN_BOXED(1065357311,32,FLEN)
NAN_BOXED(2101052857,32,FLEN)
NAN_BOXED(28229096,32,FLEN)
NAN_BOXED(1065361407,32,FLEN)
NAN_BOXED(2101052857,32,FLEN)
NAN_BOXED(28229096,32,FLEN)
NAN_BOXED(1065369599,32,FLEN)
NAN_BOXED(2101052857,32,FLEN)
NAN_BOXED(28229096,32,FLEN)
NAN_BOXED(1065385983,32,FLEN)
NAN_BOXED(2101052857,32,FLEN)
NAN_BOXED(28229096,32,FLEN)
NAN_BOXED(1065418751,32,FLEN)
NAN_BOXED(2101052857,32,FLEN)
NAN_BOXED(28229096,32,FLEN)
NAN_BOXED(1065484287,32,FLEN)
NAN_BOXED(2101052857,32,FLEN)
NAN_BOXED(28229096,32,FLEN)
NAN_BOXED(1065615359,32,FLEN)
NAN_BOXED(2101052857,32,FLEN)
NAN_BOXED(28229096,32,FLEN)
NAN_BOXED(1065877503,32,FLEN)
NAN_BOXED(2101052857,32,FLEN)
NAN_BOXED(28229096,32,FLEN)
NAN_BOXED(1066401791,32,FLEN)
NAN_BOXED(2101052857,32,FLEN)
NAN_BOXED(28229096,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2101052857,32,FLEN)
NAN_BOXED(28229096,32,FLEN)
NAN_BOXED(1067450367,32,FLEN)
NAN_BOXED(2101052857,32,FLEN)
NAN_BOXED(28229096,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2101052857,32,FLEN)
NAN_BOXED(28229096,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2101052857,32,FLEN)
NAN_BOXED(28229096,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2101052857,32,FLEN)
NAN_BOXED(28229096,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2101052857,32,FLEN)
NAN_BOXED(28229096,32,FLEN)
NAN_BOXED(1069547519,32,FLEN)
NAN_BOXED(2101052857,32,FLEN)
NAN_BOXED(28229096,32,FLEN)
NAN_BOXED(1069547520,32,FLEN)
NAN_BOXED(2101052857,32,FLEN)
NAN_BOXED(28229096,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2101052857,32,FLEN)
NAN_BOXED(28229096,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2101052857,32,FLEN)
NAN_BOXED(28229096,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2101052857,32,FLEN)
NAN_BOXED(28229096,32,FLEN)
NAN_BOXED(1071644672,32,FLEN)
NAN_BOXED(2101052857,32,FLEN)
NAN_BOXED(28229096,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2101052857,32,FLEN)
NAN_BOXED(28229096,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2101052857,32,FLEN)
NAN_BOXED(28229096,32,FLEN)
NAN_BOXED(1072693248,32,FLEN)
NAN_BOXED(2101052857,32,FLEN)
NAN_BOXED(28229096,32,FLEN)
NAN_BOXED(1073217536,32,FLEN)
NAN_BOXED(2101052857,32,FLEN)
NAN_BOXED(28229096,32,FLEN)
NAN_BOXED(1073479680,32,FLEN)
NAN_BOXED(2101052857,32,FLEN)
NAN_BOXED(28229096,32,FLEN)
NAN_BOXED(1073610752,32,FLEN)
NAN_BOXED(2101052857,32,FLEN)
NAN_BOXED(28229096,32,FLEN)
NAN_BOXED(1073676288,32,FLEN)
NAN_BOXED(2101052857,32,FLEN)
NAN_BOXED(28229096,32,FLEN)
NAN_BOXED(1073709056,32,FLEN)
NAN_BOXED(2101052857,32,FLEN)
NAN_BOXED(28229096,32,FLEN)
NAN_BOXED(1073725440,32,FLEN)
NAN_BOXED(2101052857,32,FLEN)
NAN_BOXED(28229096,32,FLEN)
NAN_BOXED(1073733632,32,FLEN)
NAN_BOXED(2101052857,32,FLEN)
NAN_BOXED(28229096,32,FLEN)
NAN_BOXED(1073737728,32,FLEN)
NAN_BOXED(2101052857,32,FLEN)
NAN_BOXED(28229096,32,FLEN)
NAN_BOXED(1073739776,32,FLEN)
NAN_BOXED(2101052857,32,FLEN)
NAN_BOXED(28229096,32,FLEN)
NAN_BOXED(1073740800,32,FLEN)
NAN_BOXED(2101052857,32,FLEN)
NAN_BOXED(28229096,32,FLEN)
NAN_BOXED(1073741312,32,FLEN)
NAN_BOXED(2101052857,32,FLEN)
NAN_BOXED(28229096,32,FLEN)
NAN_BOXED(1073741568,32,FLEN)
NAN_BOXED(2101052857,32,FLEN)
NAN_BOXED(28229096,32,FLEN)
NAN_BOXED(1073741696,32,FLEN)
NAN_BOXED(2101052857,32,FLEN)
NAN_BOXED(28229096,32,FLEN)
NAN_BOXED(1073741760,32,FLEN)
NAN_BOXED(2101052857,32,FLEN)
NAN_BOXED(28229096,32,FLEN)
NAN_BOXED(1073741792,32,FLEN)
NAN_BOXED(2101052857,32,FLEN)
NAN_BOXED(28229096,32,FLEN)
NAN_BOXED(1073741808,32,FLEN)
NAN_BOXED(2101052857,32,FLEN)
NAN_BOXED(28229096,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2101052857,32,FLEN)
NAN_BOXED(28229096,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2101052857,32,FLEN)
NAN_BOXED(28229096,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2101052857,32,FLEN)
NAN_BOXED(28229096,32,FLEN)
NAN_BOXED(1073741823,32,FLEN)
NAN_BOXED(2101061405,32,FLEN)
NAN_BOXED(28221136,32,FLEN)
NAN_BOXED(989855744,32,FLEN)
NAN_BOXED(2101061405,32,FLEN)
NAN_BOXED(28221136,32,FLEN)
NAN_BOXED(989855745,32,FLEN)
NAN_BOXED(2101061405,32,FLEN)
NAN_BOXED(28221136,32,FLEN)
NAN_BOXED(989855747,32,FLEN)
NAN_BOXED(2101061405,32,FLEN)
NAN_BOXED(28221136,32,FLEN)
NAN_BOXED(989855751,32,FLEN)
NAN_BOXED(2101061405,32,FLEN)
NAN_BOXED(28221136,32,FLEN)
NAN_BOXED(989855759,32,FLEN)
NAN_BOXED(2101061405,32,FLEN)
NAN_BOXED(28221136,32,FLEN)
NAN_BOXED(989855775,32,FLEN)
NAN_BOXED(2101061405,32,FLEN)
NAN_BOXED(28221136,32,FLEN)
NAN_BOXED(989855807,32,FLEN)
NAN_BOXED(2101061405,32,FLEN)
NAN_BOXED(28221136,32,FLEN)
NAN_BOXED(989855871,32,FLEN)
NAN_BOXED(2101061405,32,FLEN)
NAN_BOXED(28221136,32,FLEN)
NAN_BOXED(989855999,32,FLEN)
NAN_BOXED(2101061405,32,FLEN)
NAN_BOXED(28221136,32,FLEN)
NAN_BOXED(989856255,32,FLEN)
NAN_BOXED(2101061405,32,FLEN)
NAN_BOXED(28221136,32,FLEN)
NAN_BOXED(989856767,32,FLEN)
NAN_BOXED(2101061405,32,FLEN)
NAN_BOXED(28221136,32,FLEN)
NAN_BOXED(989857791,32,FLEN)
NAN_BOXED(2101061405,32,FLEN)
NAN_BOXED(28221136,32,FLEN)
NAN_BOXED(989859839,32,FLEN)
NAN_BOXED(2101061405,32,FLEN)
NAN_BOXED(28221136,32,FLEN)
NAN_BOXED(989863935,32,FLEN)
NAN_BOXED(2101061405,32,FLEN)
NAN_BOXED(28221136,32,FLEN)
NAN_BOXED(989872127,32,FLEN)
NAN_BOXED(2101061405,32,FLEN)
NAN_BOXED(28221136,32,FLEN)
NAN_BOXED(989888511,32,FLEN)
NAN_BOXED(2101061405,32,FLEN)
NAN_BOXED(28221136,32,FLEN)
NAN_BOXED(989921279,32,FLEN)
NAN_BOXED(2101061405,32,FLEN)
NAN_BOXED(28221136,32,FLEN)
NAN_BOXED(989986815,32,FLEN)
NAN_BOXED(2101061405,32,FLEN)
NAN_BOXED(28221136,32,FLEN)
NAN_BOXED(990117887,32,FLEN)
NAN_BOXED(2101061405,32,FLEN)
NAN_BOXED(28221136,32,FLEN)
NAN_BOXED(990380031,32,FLEN)
NAN_BOXED(2101061405,32,FLEN)
NAN_BOXED(28221136,32,FLEN)
NAN_BOXED(990904319,32,FLEN)
NAN_BOXED(2101061405,32,FLEN)
NAN_BOXED(28221136,32,FLEN)
NAN_BOXED(991952895,32,FLEN)
NAN_BOXED(2101061405,32,FLEN)
NAN_BOXED(28221136,32,FLEN)
NAN_BOXED(994050047,32,FLEN)
NAN_BOXED(2101061405,32,FLEN)
NAN_BOXED(28221136,32,FLEN)
NAN_BOXED(994050048,32,FLEN)
NAN_BOXED(2101061405,32,FLEN)
NAN_BOXED(28221136,32,FLEN)
NAN_BOXED(996147200,32,FLEN)
NAN_BOXED(2101061405,32,FLEN)
NAN_BOXED(28221136,32,FLEN)
NAN_BOXED(997195776,32,FLEN)
NAN_BOXED(2101061405,32,FLEN)
NAN_BOXED(28221136,32,FLEN)
NAN_BOXED(997720064,32,FLEN)
NAN_BOXED(2101061405,32,FLEN)
NAN_BOXED(28221136,32,FLEN)
NAN_BOXED(997982208,32,FLEN)
NAN_BOXED(2101061405,32,FLEN)
NAN_BOXED(28221136,32,FLEN)
NAN_BOXED(998113280,32,FLEN)
NAN_BOXED(2101061405,32,FLEN)
NAN_BOXED(28221136,32,FLEN)
NAN_BOXED(998178816,32,FLEN)
NAN_BOXED(2101061405,32,FLEN)
NAN_BOXED(28221136,32,FLEN)
NAN_BOXED(998211584,32,FLEN)
NAN_BOXED(2101061405,32,FLEN)
NAN_BOXED(28221136,32,FLEN)
NAN_BOXED(998227968,32,FLEN)
NAN_BOXED(2101061405,32,FLEN)
NAN_BOXED(28221136,32,FLEN)
NAN_BOXED(998236160,32,FLEN)
NAN_BOXED(2101061405,32,FLEN)
NAN_BOXED(28221136,32,FLEN)
NAN_BOXED(998240256,32,FLEN)
NAN_BOXED(2101061405,32,FLEN)
NAN_BOXED(28221136,32,FLEN)
NAN_BOXED(998242304,32,FLEN)
NAN_BOXED(2101061405,32,FLEN)
NAN_BOXED(28221136,32,FLEN)
NAN_BOXED(998243328,32,FLEN)
NAN_BOXED(2101061405,32,FLEN)
NAN_BOXED(28221136,32,FLEN)
NAN_BOXED(998243840,32,FLEN)
NAN_BOXED(2101061405,32,FLEN)
NAN_BOXED(28221136,32,FLEN)
NAN_BOXED(998244096,32,FLEN)
NAN_BOXED(2101061405,32,FLEN)
NAN_BOXED(28221136,32,FLEN)
NAN_BOXED(998244224,32,FLEN)
NAN_BOXED(2101061405,32,FLEN)
NAN_BOXED(28221136,32,FLEN)
NAN_BOXED(998244288,32,FLEN)
NAN_BOXED(2101061405,32,FLEN)
NAN_BOXED(28221136,32,FLEN)
NAN_BOXED(998244320,32,FLEN)
NAN_BOXED(2101061405,32,FLEN)
NAN_BOXED(28221136,32,FLEN)
NAN_BOXED(998244336,32,FLEN)
NAN_BOXED(2101061405,32,FLEN)
NAN_BOXED(28221136,32,FLEN)
NAN_BOXED(998244344,32,FLEN)
NAN_BOXED(2101061405,32,FLEN)
NAN_BOXED(28221136,32,FLEN)
NAN_BOXED(998244348,32,FLEN)
NAN_BOXED(2101061405,32,FLEN)
NAN_BOXED(28221136,32,FLEN)
NAN_BOXED(998244350,32,FLEN)
NAN_BOXED(2101061405,32,FLEN)
NAN_BOXED(28221136,32,FLEN)
NAN_BOXED(998244351,32,FLEN)
NAN_BOXED(2101061405,32,FLEN)
NAN_BOXED(28221136,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2101061405,32,FLEN)
NAN_BOXED(28221136,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2101061405,32,FLEN)
NAN_BOXED(28221136,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2101061405,32,FLEN)
NAN_BOXED(28221136,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2101061405,32,FLEN)
NAN_BOXED(28221136,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2101061405,32,FLEN)
NAN_BOXED(28221136,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2101061405,32,FLEN)
NAN_BOXED(28221136,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2101061405,32,FLEN)
NAN_BOXED(28221136,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2101061405,32,FLEN)
NAN_BOXED(28221136,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2101061405,32,FLEN)
NAN_BOXED(28221136,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2101061405,32,FLEN)
NAN_BOXED(28221136,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2101061405,32,FLEN)
NAN_BOXED(28221136,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2101061405,32,FLEN)
NAN_BOXED(28221136,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2101061405,32,FLEN)
NAN_BOXED(28221136,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2101061405,32,FLEN)
NAN_BOXED(28221136,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2101061405,32,FLEN)
NAN_BOXED(28221136,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2101075752,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2101075752,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2101075752,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483651,32,FLEN)
NAN_BOXED(2101075752,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483655,32,FLEN)
NAN_BOXED(2101075752,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483663,32,FLEN)
NAN_BOXED(2101075752,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483679,32,FLEN)
NAN_BOXED(2101075752,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483711,32,FLEN)
NAN_BOXED(2101075752,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483775,32,FLEN)
NAN_BOXED(2101075752,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483903,32,FLEN)
NAN_BOXED(2101075752,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147484159,32,FLEN)
NAN_BOXED(2101075752,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147484671,32,FLEN)
NAN_BOXED(2101075752,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147485695,32,FLEN)
NAN_BOXED(2101075752,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147487743,32,FLEN)
NAN_BOXED(2101075752,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147491839,32,FLEN)
NAN_BOXED(2101075752,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147500031,32,FLEN)
NAN_BOXED(2101075752,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147516415,32,FLEN)
NAN_BOXED(2101075752,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147549183,32,FLEN)
NAN_BOXED(2101075752,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147614719,32,FLEN)
NAN_BOXED(2101075752,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147745791,32,FLEN)
NAN_BOXED(2101075752,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2148007935,32,FLEN)
NAN_BOXED(2101075752,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2148532223,32,FLEN)
NAN_BOXED(2101075752,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149161369,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
