
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:17:59 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_23296:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x68837a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4676f6 and fs3 == 0 and fe3 == 0x70 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee8837a; op2val:0x4676f6;
op3val:0x387fffc0; valaddr_reg:x3; val_offset:69888*0 + 3*182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69888*0 + 3*182*FLEN/8, x4, x1, x2)

inst_23297:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x68837a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4676f6 and fs3 == 0 and fe3 == 0x70 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee8837a; op2val:0x4676f6;
op3val:0x387fffe0; valaddr_reg:x3; val_offset:69891*0 + 3*182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69891*0 + 3*182*FLEN/8, x4, x1, x2)

inst_23298:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x68837a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4676f6 and fs3 == 0 and fe3 == 0x70 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee8837a; op2val:0x4676f6;
op3val:0x387ffff0; valaddr_reg:x3; val_offset:69894*0 + 3*182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69894*0 + 3*182*FLEN/8, x4, x1, x2)

inst_23299:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x68837a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4676f6 and fs3 == 0 and fe3 == 0x70 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee8837a; op2val:0x4676f6;
op3val:0x387ffff8; valaddr_reg:x3; val_offset:69897*0 + 3*182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69897*0 + 3*182*FLEN/8, x4, x1, x2)

inst_23300:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x68837a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4676f6 and fs3 == 0 and fe3 == 0x70 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee8837a; op2val:0x4676f6;
op3val:0x387ffffc; valaddr_reg:x3; val_offset:69900*0 + 3*182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69900*0 + 3*182*FLEN/8, x4, x1, x2)

inst_23301:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x68837a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4676f6 and fs3 == 0 and fe3 == 0x70 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee8837a; op2val:0x4676f6;
op3val:0x387ffffe; valaddr_reg:x3; val_offset:69903*0 + 3*182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69903*0 + 3*182*FLEN/8, x4, x1, x2)

inst_23302:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x68837a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4676f6 and fs3 == 0 and fe3 == 0x70 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee8837a; op2val:0x4676f6;
op3val:0x387fffff; valaddr_reg:x3; val_offset:69906*0 + 3*182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69906*0 + 3*182*FLEN/8, x4, x1, x2)

inst_23303:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x68837a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4676f6 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee8837a; op2val:0x4676f6;
op3val:0x3f800001; valaddr_reg:x3; val_offset:69909*0 + 3*182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69909*0 + 3*182*FLEN/8, x4, x1, x2)

inst_23304:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x68837a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4676f6 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee8837a; op2val:0x4676f6;
op3val:0x3f800003; valaddr_reg:x3; val_offset:69912*0 + 3*182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69912*0 + 3*182*FLEN/8, x4, x1, x2)

inst_23305:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x68837a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4676f6 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee8837a; op2val:0x4676f6;
op3val:0x3f800007; valaddr_reg:x3; val_offset:69915*0 + 3*182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69915*0 + 3*182*FLEN/8, x4, x1, x2)

inst_23306:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x68837a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4676f6 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee8837a; op2val:0x4676f6;
op3val:0x3f999999; valaddr_reg:x3; val_offset:69918*0 + 3*182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69918*0 + 3*182*FLEN/8, x4, x1, x2)

inst_23307:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x68837a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4676f6 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee8837a; op2val:0x4676f6;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:69921*0 + 3*182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69921*0 + 3*182*FLEN/8, x4, x1, x2)

inst_23308:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x68837a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4676f6 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee8837a; op2val:0x4676f6;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:69924*0 + 3*182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69924*0 + 3*182*FLEN/8, x4, x1, x2)

inst_23309:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x68837a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4676f6 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee8837a; op2val:0x4676f6;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:69927*0 + 3*182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69927*0 + 3*182*FLEN/8, x4, x1, x2)

inst_23310:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x68837a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4676f6 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee8837a; op2val:0x4676f6;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:69930*0 + 3*182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69930*0 + 3*182*FLEN/8, x4, x1, x2)

inst_23311:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x68837a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4676f6 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee8837a; op2val:0x4676f6;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:69933*0 + 3*182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69933*0 + 3*182*FLEN/8, x4, x1, x2)

inst_23312:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x68837a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4676f6 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee8837a; op2val:0x4676f6;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:69936*0 + 3*182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69936*0 + 3*182*FLEN/8, x4, x1, x2)

inst_23313:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x68837a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4676f6 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee8837a; op2val:0x4676f6;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:69939*0 + 3*182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69939*0 + 3*182*FLEN/8, x4, x1, x2)

inst_23314:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x68837a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4676f6 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee8837a; op2val:0x4676f6;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:69942*0 + 3*182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69942*0 + 3*182*FLEN/8, x4, x1, x2)

inst_23315:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x68837a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4676f6 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee8837a; op2val:0x4676f6;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:69945*0 + 3*182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69945*0 + 3*182*FLEN/8, x4, x1, x2)

inst_23316:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x68837a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4676f6 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee8837a; op2val:0x4676f6;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:69948*0 + 3*182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69948*0 + 3*182*FLEN/8, x4, x1, x2)

inst_23317:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x68837a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4676f6 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee8837a; op2val:0x4676f6;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:69951*0 + 3*182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69951*0 + 3*182*FLEN/8, x4, x1, x2)

inst_23318:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x68837a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4676f6 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee8837a; op2val:0x4676f6;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:69954*0 + 3*182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69954*0 + 3*182*FLEN/8, x4, x1, x2)

inst_23319:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6940c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee940c9; op2val:0x80000000;
op3val:0x80000001; valaddr_reg:x3; val_offset:69957*0 + 3*182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69957*0 + 3*182*FLEN/8, x4, x1, x2)

inst_23320:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6940c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee940c9; op2val:0x80000000;
op3val:0x80000003; valaddr_reg:x3; val_offset:69960*0 + 3*182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69960*0 + 3*182*FLEN/8, x4, x1, x2)

inst_23321:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6940c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee940c9; op2val:0x80000000;
op3val:0x80000007; valaddr_reg:x3; val_offset:69963*0 + 3*182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69963*0 + 3*182*FLEN/8, x4, x1, x2)

inst_23322:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6940c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee940c9; op2val:0x80000000;
op3val:0x80199999; valaddr_reg:x3; val_offset:69966*0 + 3*182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69966*0 + 3*182*FLEN/8, x4, x1, x2)

inst_23323:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6940c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee940c9; op2val:0x80000000;
op3val:0x80249249; valaddr_reg:x3; val_offset:69969*0 + 3*182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69969*0 + 3*182*FLEN/8, x4, x1, x2)

inst_23324:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6940c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee940c9; op2val:0x80000000;
op3val:0x80333333; valaddr_reg:x3; val_offset:69972*0 + 3*182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69972*0 + 3*182*FLEN/8, x4, x1, x2)

inst_23325:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6940c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee940c9; op2val:0x80000000;
op3val:0x8036db6d; valaddr_reg:x3; val_offset:69975*0 + 3*182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69975*0 + 3*182*FLEN/8, x4, x1, x2)

inst_23326:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6940c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee940c9; op2val:0x80000000;
op3val:0x803bbbbb; valaddr_reg:x3; val_offset:69978*0 + 3*182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69978*0 + 3*182*FLEN/8, x4, x1, x2)

inst_23327:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6940c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee940c9; op2val:0x80000000;
op3val:0x80444444; valaddr_reg:x3; val_offset:69981*0 + 3*182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69981*0 + 3*182*FLEN/8, x4, x1, x2)

inst_23328:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6940c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee940c9; op2val:0x80000000;
op3val:0x804ccccc; valaddr_reg:x3; val_offset:69984*0 + 3*182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69984*0 + 3*182*FLEN/8, x4, x1, x2)

inst_23329:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6940c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee940c9; op2val:0x80000000;
op3val:0x805b6db6; valaddr_reg:x3; val_offset:69987*0 + 3*182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69987*0 + 3*182*FLEN/8, x4, x1, x2)

inst_23330:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6940c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee940c9; op2val:0x80000000;
op3val:0x80666666; valaddr_reg:x3; val_offset:69990*0 + 3*182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69990*0 + 3*182*FLEN/8, x4, x1, x2)

inst_23331:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6940c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee940c9; op2val:0x80000000;
op3val:0x806db6db; valaddr_reg:x3; val_offset:69993*0 + 3*182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69993*0 + 3*182*FLEN/8, x4, x1, x2)

inst_23332:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6940c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee940c9; op2val:0x80000000;
op3val:0x807ffff8; valaddr_reg:x3; val_offset:69996*0 + 3*182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69996*0 + 3*182*FLEN/8, x4, x1, x2)

inst_23333:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6940c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee940c9; op2val:0x80000000;
op3val:0x807ffffc; valaddr_reg:x3; val_offset:69999*0 + 3*182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69999*0 + 3*182*FLEN/8, x4, x1, x2)

inst_23334:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6940c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee940c9; op2val:0x80000000;
op3val:0x807ffffe; valaddr_reg:x3; val_offset:70002*0 + 3*182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70002*0 + 3*182*FLEN/8, x4, x1, x2)

inst_23335:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6940c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee940c9; op2val:0x80000000;
op3val:0x87800000; valaddr_reg:x3; val_offset:70005*0 + 3*182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70005*0 + 3*182*FLEN/8, x4, x1, x2)

inst_23336:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6940c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee940c9; op2val:0x80000000;
op3val:0x87800001; valaddr_reg:x3; val_offset:70008*0 + 3*182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70008*0 + 3*182*FLEN/8, x4, x1, x2)

inst_23337:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6940c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee940c9; op2val:0x80000000;
op3val:0x87800003; valaddr_reg:x3; val_offset:70011*0 + 3*182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70011*0 + 3*182*FLEN/8, x4, x1, x2)

inst_23338:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6940c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee940c9; op2val:0x80000000;
op3val:0x87800007; valaddr_reg:x3; val_offset:70014*0 + 3*182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70014*0 + 3*182*FLEN/8, x4, x1, x2)

inst_23339:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6940c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee940c9; op2val:0x80000000;
op3val:0x8780000f; valaddr_reg:x3; val_offset:70017*0 + 3*182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70017*0 + 3*182*FLEN/8, x4, x1, x2)

inst_23340:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6940c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee940c9; op2val:0x80000000;
op3val:0x8780001f; valaddr_reg:x3; val_offset:70020*0 + 3*182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70020*0 + 3*182*FLEN/8, x4, x1, x2)

inst_23341:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6940c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee940c9; op2val:0x80000000;
op3val:0x8780003f; valaddr_reg:x3; val_offset:70023*0 + 3*182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70023*0 + 3*182*FLEN/8, x4, x1, x2)

inst_23342:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6940c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee940c9; op2val:0x80000000;
op3val:0x8780007f; valaddr_reg:x3; val_offset:70026*0 + 3*182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70026*0 + 3*182*FLEN/8, x4, x1, x2)

inst_23343:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6940c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee940c9; op2val:0x80000000;
op3val:0x878000ff; valaddr_reg:x3; val_offset:70029*0 + 3*182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70029*0 + 3*182*FLEN/8, x4, x1, x2)

inst_23344:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6940c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee940c9; op2val:0x80000000;
op3val:0x878001ff; valaddr_reg:x3; val_offset:70032*0 + 3*182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70032*0 + 3*182*FLEN/8, x4, x1, x2)

inst_23345:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6940c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee940c9; op2val:0x80000000;
op3val:0x878003ff; valaddr_reg:x3; val_offset:70035*0 + 3*182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70035*0 + 3*182*FLEN/8, x4, x1, x2)

inst_23346:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6940c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee940c9; op2val:0x80000000;
op3val:0x878007ff; valaddr_reg:x3; val_offset:70038*0 + 3*182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70038*0 + 3*182*FLEN/8, x4, x1, x2)

inst_23347:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6940c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee940c9; op2val:0x80000000;
op3val:0x87800fff; valaddr_reg:x3; val_offset:70041*0 + 3*182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70041*0 + 3*182*FLEN/8, x4, x1, x2)

inst_23348:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6940c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee940c9; op2val:0x80000000;
op3val:0x87801fff; valaddr_reg:x3; val_offset:70044*0 + 3*182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70044*0 + 3*182*FLEN/8, x4, x1, x2)

inst_23349:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6940c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee940c9; op2val:0x80000000;
op3val:0x87803fff; valaddr_reg:x3; val_offset:70047*0 + 3*182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70047*0 + 3*182*FLEN/8, x4, x1, x2)

inst_23350:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6940c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee940c9; op2val:0x80000000;
op3val:0x87807fff; valaddr_reg:x3; val_offset:70050*0 + 3*182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70050*0 + 3*182*FLEN/8, x4, x1, x2)

inst_23351:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6940c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee940c9; op2val:0x80000000;
op3val:0x8780ffff; valaddr_reg:x3; val_offset:70053*0 + 3*182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70053*0 + 3*182*FLEN/8, x4, x1, x2)

inst_23352:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6940c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee940c9; op2val:0x80000000;
op3val:0x8781ffff; valaddr_reg:x3; val_offset:70056*0 + 3*182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70056*0 + 3*182*FLEN/8, x4, x1, x2)

inst_23353:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6940c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee940c9; op2val:0x80000000;
op3val:0x8783ffff; valaddr_reg:x3; val_offset:70059*0 + 3*182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70059*0 + 3*182*FLEN/8, x4, x1, x2)

inst_23354:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6940c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee940c9; op2val:0x80000000;
op3val:0x8787ffff; valaddr_reg:x3; val_offset:70062*0 + 3*182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70062*0 + 3*182*FLEN/8, x4, x1, x2)

inst_23355:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6940c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee940c9; op2val:0x80000000;
op3val:0x878fffff; valaddr_reg:x3; val_offset:70065*0 + 3*182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70065*0 + 3*182*FLEN/8, x4, x1, x2)

inst_23356:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6940c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee940c9; op2val:0x80000000;
op3val:0x879fffff; valaddr_reg:x3; val_offset:70068*0 + 3*182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70068*0 + 3*182*FLEN/8, x4, x1, x2)

inst_23357:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6940c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee940c9; op2val:0x80000000;
op3val:0x87bfffff; valaddr_reg:x3; val_offset:70071*0 + 3*182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70071*0 + 3*182*FLEN/8, x4, x1, x2)

inst_23358:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6940c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee940c9; op2val:0x80000000;
op3val:0x87c00000; valaddr_reg:x3; val_offset:70074*0 + 3*182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70074*0 + 3*182*FLEN/8, x4, x1, x2)

inst_23359:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6940c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee940c9; op2val:0x80000000;
op3val:0x87e00000; valaddr_reg:x3; val_offset:70077*0 + 3*182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70077*0 + 3*182*FLEN/8, x4, x1, x2)

inst_23360:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6940c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee940c9; op2val:0x80000000;
op3val:0x87f00000; valaddr_reg:x3; val_offset:70080*0 + 3*182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70080*0 + 3*182*FLEN/8, x4, x1, x2)

inst_23361:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6940c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee940c9; op2val:0x80000000;
op3val:0x87f80000; valaddr_reg:x3; val_offset:70083*0 + 3*182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70083*0 + 3*182*FLEN/8, x4, x1, x2)

inst_23362:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6940c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee940c9; op2val:0x80000000;
op3val:0x87fc0000; valaddr_reg:x3; val_offset:70086*0 + 3*182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70086*0 + 3*182*FLEN/8, x4, x1, x2)

inst_23363:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6940c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee940c9; op2val:0x80000000;
op3val:0x87fe0000; valaddr_reg:x3; val_offset:70089*0 + 3*182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70089*0 + 3*182*FLEN/8, x4, x1, x2)

inst_23364:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6940c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee940c9; op2val:0x80000000;
op3val:0x87ff0000; valaddr_reg:x3; val_offset:70092*0 + 3*182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70092*0 + 3*182*FLEN/8, x4, x1, x2)

inst_23365:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6940c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee940c9; op2val:0x80000000;
op3val:0x87ff8000; valaddr_reg:x3; val_offset:70095*0 + 3*182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70095*0 + 3*182*FLEN/8, x4, x1, x2)

inst_23366:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6940c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee940c9; op2val:0x80000000;
op3val:0x87ffc000; valaddr_reg:x3; val_offset:70098*0 + 3*182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70098*0 + 3*182*FLEN/8, x4, x1, x2)

inst_23367:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6940c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee940c9; op2val:0x80000000;
op3val:0x87ffe000; valaddr_reg:x3; val_offset:70101*0 + 3*182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70101*0 + 3*182*FLEN/8, x4, x1, x2)

inst_23368:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6940c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee940c9; op2val:0x80000000;
op3val:0x87fff000; valaddr_reg:x3; val_offset:70104*0 + 3*182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70104*0 + 3*182*FLEN/8, x4, x1, x2)

inst_23369:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6940c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee940c9; op2val:0x80000000;
op3val:0x87fff800; valaddr_reg:x3; val_offset:70107*0 + 3*182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70107*0 + 3*182*FLEN/8, x4, x1, x2)

inst_23370:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6940c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee940c9; op2val:0x80000000;
op3val:0x87fffc00; valaddr_reg:x3; val_offset:70110*0 + 3*182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70110*0 + 3*182*FLEN/8, x4, x1, x2)

inst_23371:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6940c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee940c9; op2val:0x80000000;
op3val:0x87fffe00; valaddr_reg:x3; val_offset:70113*0 + 3*182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70113*0 + 3*182*FLEN/8, x4, x1, x2)

inst_23372:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6940c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee940c9; op2val:0x80000000;
op3val:0x87ffff00; valaddr_reg:x3; val_offset:70116*0 + 3*182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70116*0 + 3*182*FLEN/8, x4, x1, x2)

inst_23373:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6940c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee940c9; op2val:0x80000000;
op3val:0x87ffff80; valaddr_reg:x3; val_offset:70119*0 + 3*182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70119*0 + 3*182*FLEN/8, x4, x1, x2)

inst_23374:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6940c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee940c9; op2val:0x80000000;
op3val:0x87ffffc0; valaddr_reg:x3; val_offset:70122*0 + 3*182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70122*0 + 3*182*FLEN/8, x4, x1, x2)

inst_23375:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6940c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee940c9; op2val:0x80000000;
op3val:0x87ffffe0; valaddr_reg:x3; val_offset:70125*0 + 3*182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70125*0 + 3*182*FLEN/8, x4, x1, x2)

inst_23376:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6940c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee940c9; op2val:0x80000000;
op3val:0x87fffff0; valaddr_reg:x3; val_offset:70128*0 + 3*182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70128*0 + 3*182*FLEN/8, x4, x1, x2)

inst_23377:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6940c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee940c9; op2val:0x80000000;
op3val:0x87fffff8; valaddr_reg:x3; val_offset:70131*0 + 3*182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70131*0 + 3*182*FLEN/8, x4, x1, x2)

inst_23378:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6940c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee940c9; op2val:0x80000000;
op3val:0x87fffffc; valaddr_reg:x3; val_offset:70134*0 + 3*182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70134*0 + 3*182*FLEN/8, x4, x1, x2)

inst_23379:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6940c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee940c9; op2val:0x80000000;
op3val:0x87fffffe; valaddr_reg:x3; val_offset:70137*0 + 3*182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70137*0 + 3*182*FLEN/8, x4, x1, x2)

inst_23380:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6940c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee940c9; op2val:0x80000000;
op3val:0x87ffffff; valaddr_reg:x3; val_offset:70140*0 + 3*182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70140*0 + 3*182*FLEN/8, x4, x1, x2)

inst_23381:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x695129 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4638d7 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee95129; op2val:0x804638d7;
op3val:0xbf800001; valaddr_reg:x3; val_offset:70143*0 + 3*182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70143*0 + 3*182*FLEN/8, x4, x1, x2)

inst_23382:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x695129 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4638d7 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee95129; op2val:0x804638d7;
op3val:0xbf800003; valaddr_reg:x3; val_offset:70146*0 + 3*182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70146*0 + 3*182*FLEN/8, x4, x1, x2)

inst_23383:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x695129 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4638d7 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee95129; op2val:0x804638d7;
op3val:0xbf800007; valaddr_reg:x3; val_offset:70149*0 + 3*182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70149*0 + 3*182*FLEN/8, x4, x1, x2)

inst_23384:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x695129 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4638d7 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee95129; op2val:0x804638d7;
op3val:0xbf999999; valaddr_reg:x3; val_offset:70152*0 + 3*182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70152*0 + 3*182*FLEN/8, x4, x1, x2)

inst_23385:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x695129 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4638d7 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee95129; op2val:0x804638d7;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:70155*0 + 3*182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70155*0 + 3*182*FLEN/8, x4, x1, x2)

inst_23386:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x695129 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4638d7 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee95129; op2val:0x804638d7;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:70158*0 + 3*182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70158*0 + 3*182*FLEN/8, x4, x1, x2)

inst_23387:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x695129 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4638d7 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee95129; op2val:0x804638d7;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:70161*0 + 3*182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70161*0 + 3*182*FLEN/8, x4, x1, x2)

inst_23388:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x695129 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4638d7 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee95129; op2val:0x804638d7;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:70164*0 + 3*182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70164*0 + 3*182*FLEN/8, x4, x1, x2)

inst_23389:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x695129 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4638d7 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee95129; op2val:0x804638d7;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:70167*0 + 3*182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70167*0 + 3*182*FLEN/8, x4, x1, x2)

inst_23390:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x695129 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4638d7 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee95129; op2val:0x804638d7;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:70170*0 + 3*182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70170*0 + 3*182*FLEN/8, x4, x1, x2)

inst_23391:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x695129 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4638d7 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee95129; op2val:0x804638d7;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:70173*0 + 3*182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70173*0 + 3*182*FLEN/8, x4, x1, x2)

inst_23392:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x695129 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4638d7 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee95129; op2val:0x804638d7;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:70176*0 + 3*182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70176*0 + 3*182*FLEN/8, x4, x1, x2)

inst_23393:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x695129 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4638d7 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee95129; op2val:0x804638d7;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:70179*0 + 3*182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70179*0 + 3*182*FLEN/8, x4, x1, x2)

inst_23394:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x695129 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4638d7 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee95129; op2val:0x804638d7;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:70182*0 + 3*182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70182*0 + 3*182*FLEN/8, x4, x1, x2)

inst_23395:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x695129 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4638d7 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee95129; op2val:0x804638d7;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:70185*0 + 3*182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70185*0 + 3*182*FLEN/8, x4, x1, x2)

inst_23396:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x695129 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4638d7 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee95129; op2val:0x804638d7;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:70188*0 + 3*182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70188*0 + 3*182*FLEN/8, x4, x1, x2)

inst_23397:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x695129 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4638d7 and fs3 == 1 and fe3 == 0x90 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee95129; op2val:0x804638d7;
op3val:0xc8000000; valaddr_reg:x3; val_offset:70191*0 + 3*182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70191*0 + 3*182*FLEN/8, x4, x1, x2)

inst_23398:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x695129 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4638d7 and fs3 == 1 and fe3 == 0x90 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee95129; op2val:0x804638d7;
op3val:0xc8000001; valaddr_reg:x3; val_offset:70194*0 + 3*182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70194*0 + 3*182*FLEN/8, x4, x1, x2)

inst_23399:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x695129 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4638d7 and fs3 == 1 and fe3 == 0x90 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee95129; op2val:0x804638d7;
op3val:0xc8000003; valaddr_reg:x3; val_offset:70197*0 + 3*182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70197*0 + 3*182*FLEN/8, x4, x1, x2)

inst_23400:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x695129 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4638d7 and fs3 == 1 and fe3 == 0x90 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee95129; op2val:0x804638d7;
op3val:0xc8000007; valaddr_reg:x3; val_offset:70200*0 + 3*182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70200*0 + 3*182*FLEN/8, x4, x1, x2)

inst_23401:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x695129 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4638d7 and fs3 == 1 and fe3 == 0x90 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee95129; op2val:0x804638d7;
op3val:0xc800000f; valaddr_reg:x3; val_offset:70203*0 + 3*182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70203*0 + 3*182*FLEN/8, x4, x1, x2)

inst_23402:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x695129 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4638d7 and fs3 == 1 and fe3 == 0x90 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee95129; op2val:0x804638d7;
op3val:0xc800001f; valaddr_reg:x3; val_offset:70206*0 + 3*182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70206*0 + 3*182*FLEN/8, x4, x1, x2)

inst_23403:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x695129 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4638d7 and fs3 == 1 and fe3 == 0x90 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee95129; op2val:0x804638d7;
op3val:0xc800003f; valaddr_reg:x3; val_offset:70209*0 + 3*182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70209*0 + 3*182*FLEN/8, x4, x1, x2)

inst_23404:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x695129 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4638d7 and fs3 == 1 and fe3 == 0x90 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee95129; op2val:0x804638d7;
op3val:0xc800007f; valaddr_reg:x3; val_offset:70212*0 + 3*182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70212*0 + 3*182*FLEN/8, x4, x1, x2)

inst_23405:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x695129 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4638d7 and fs3 == 1 and fe3 == 0x90 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee95129; op2val:0x804638d7;
op3val:0xc80000ff; valaddr_reg:x3; val_offset:70215*0 + 3*182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70215*0 + 3*182*FLEN/8, x4, x1, x2)

inst_23406:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x695129 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4638d7 and fs3 == 1 and fe3 == 0x90 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee95129; op2val:0x804638d7;
op3val:0xc80001ff; valaddr_reg:x3; val_offset:70218*0 + 3*182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70218*0 + 3*182*FLEN/8, x4, x1, x2)

inst_23407:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x695129 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4638d7 and fs3 == 1 and fe3 == 0x90 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee95129; op2val:0x804638d7;
op3val:0xc80003ff; valaddr_reg:x3; val_offset:70221*0 + 3*182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70221*0 + 3*182*FLEN/8, x4, x1, x2)

inst_23408:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x695129 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4638d7 and fs3 == 1 and fe3 == 0x90 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee95129; op2val:0x804638d7;
op3val:0xc80007ff; valaddr_reg:x3; val_offset:70224*0 + 3*182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70224*0 + 3*182*FLEN/8, x4, x1, x2)

inst_23409:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x695129 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4638d7 and fs3 == 1 and fe3 == 0x90 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee95129; op2val:0x804638d7;
op3val:0xc8000fff; valaddr_reg:x3; val_offset:70227*0 + 3*182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70227*0 + 3*182*FLEN/8, x4, x1, x2)

inst_23410:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x695129 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4638d7 and fs3 == 1 and fe3 == 0x90 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee95129; op2val:0x804638d7;
op3val:0xc8001fff; valaddr_reg:x3; val_offset:70230*0 + 3*182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70230*0 + 3*182*FLEN/8, x4, x1, x2)

inst_23411:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x695129 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4638d7 and fs3 == 1 and fe3 == 0x90 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee95129; op2val:0x804638d7;
op3val:0xc8003fff; valaddr_reg:x3; val_offset:70233*0 + 3*182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70233*0 + 3*182*FLEN/8, x4, x1, x2)

inst_23412:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x695129 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4638d7 and fs3 == 1 and fe3 == 0x90 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee95129; op2val:0x804638d7;
op3val:0xc8007fff; valaddr_reg:x3; val_offset:70236*0 + 3*182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70236*0 + 3*182*FLEN/8, x4, x1, x2)

inst_23413:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x695129 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4638d7 and fs3 == 1 and fe3 == 0x90 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee95129; op2val:0x804638d7;
op3val:0xc800ffff; valaddr_reg:x3; val_offset:70239*0 + 3*182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70239*0 + 3*182*FLEN/8, x4, x1, x2)

inst_23414:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x695129 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4638d7 and fs3 == 1 and fe3 == 0x90 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee95129; op2val:0x804638d7;
op3val:0xc801ffff; valaddr_reg:x3; val_offset:70242*0 + 3*182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70242*0 + 3*182*FLEN/8, x4, x1, x2)

inst_23415:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x695129 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4638d7 and fs3 == 1 and fe3 == 0x90 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee95129; op2val:0x804638d7;
op3val:0xc803ffff; valaddr_reg:x3; val_offset:70245*0 + 3*182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70245*0 + 3*182*FLEN/8, x4, x1, x2)

inst_23416:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x695129 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4638d7 and fs3 == 1 and fe3 == 0x90 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee95129; op2val:0x804638d7;
op3val:0xc807ffff; valaddr_reg:x3; val_offset:70248*0 + 3*182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70248*0 + 3*182*FLEN/8, x4, x1, x2)

inst_23417:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x695129 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4638d7 and fs3 == 1 and fe3 == 0x90 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee95129; op2val:0x804638d7;
op3val:0xc80fffff; valaddr_reg:x3; val_offset:70251*0 + 3*182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70251*0 + 3*182*FLEN/8, x4, x1, x2)

inst_23418:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x695129 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4638d7 and fs3 == 1 and fe3 == 0x90 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee95129; op2val:0x804638d7;
op3val:0xc81fffff; valaddr_reg:x3; val_offset:70254*0 + 3*182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70254*0 + 3*182*FLEN/8, x4, x1, x2)

inst_23419:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x695129 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4638d7 and fs3 == 1 and fe3 == 0x90 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee95129; op2val:0x804638d7;
op3val:0xc83fffff; valaddr_reg:x3; val_offset:70257*0 + 3*182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70257*0 + 3*182*FLEN/8, x4, x1, x2)

inst_23420:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x695129 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4638d7 and fs3 == 1 and fe3 == 0x90 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee95129; op2val:0x804638d7;
op3val:0xc8400000; valaddr_reg:x3; val_offset:70260*0 + 3*182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70260*0 + 3*182*FLEN/8, x4, x1, x2)

inst_23421:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x695129 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4638d7 and fs3 == 1 and fe3 == 0x90 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee95129; op2val:0x804638d7;
op3val:0xc8600000; valaddr_reg:x3; val_offset:70263*0 + 3*182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70263*0 + 3*182*FLEN/8, x4, x1, x2)

inst_23422:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x695129 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4638d7 and fs3 == 1 and fe3 == 0x90 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee95129; op2val:0x804638d7;
op3val:0xc8700000; valaddr_reg:x3; val_offset:70266*0 + 3*182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70266*0 + 3*182*FLEN/8, x4, x1, x2)

inst_23423:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x695129 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4638d7 and fs3 == 1 and fe3 == 0x90 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee95129; op2val:0x804638d7;
op3val:0xc8780000; valaddr_reg:x3; val_offset:70269*0 + 3*182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70269*0 + 3*182*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2129167226,32,FLEN)
NAN_BOXED(4617974,32,FLEN)
NAN_BOXED(947912640,32,FLEN)
NAN_BOXED(2129167226,32,FLEN)
NAN_BOXED(4617974,32,FLEN)
NAN_BOXED(947912672,32,FLEN)
NAN_BOXED(2129167226,32,FLEN)
NAN_BOXED(4617974,32,FLEN)
NAN_BOXED(947912688,32,FLEN)
NAN_BOXED(2129167226,32,FLEN)
NAN_BOXED(4617974,32,FLEN)
NAN_BOXED(947912696,32,FLEN)
NAN_BOXED(2129167226,32,FLEN)
NAN_BOXED(4617974,32,FLEN)
NAN_BOXED(947912700,32,FLEN)
NAN_BOXED(2129167226,32,FLEN)
NAN_BOXED(4617974,32,FLEN)
NAN_BOXED(947912702,32,FLEN)
NAN_BOXED(2129167226,32,FLEN)
NAN_BOXED(4617974,32,FLEN)
NAN_BOXED(947912703,32,FLEN)
NAN_BOXED(2129167226,32,FLEN)
NAN_BOXED(4617974,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2129167226,32,FLEN)
NAN_BOXED(4617974,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2129167226,32,FLEN)
NAN_BOXED(4617974,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2129167226,32,FLEN)
NAN_BOXED(4617974,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2129167226,32,FLEN)
NAN_BOXED(4617974,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2129167226,32,FLEN)
NAN_BOXED(4617974,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2129167226,32,FLEN)
NAN_BOXED(4617974,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2129167226,32,FLEN)
NAN_BOXED(4617974,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2129167226,32,FLEN)
NAN_BOXED(4617974,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2129167226,32,FLEN)
NAN_BOXED(4617974,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2129167226,32,FLEN)
NAN_BOXED(4617974,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2129167226,32,FLEN)
NAN_BOXED(4617974,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2129167226,32,FLEN)
NAN_BOXED(4617974,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2129167226,32,FLEN)
NAN_BOXED(4617974,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2129167226,32,FLEN)
NAN_BOXED(4617974,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2129167226,32,FLEN)
NAN_BOXED(4617974,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2129215689,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2129215689,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483651,32,FLEN)
NAN_BOXED(2129215689,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483655,32,FLEN)
NAN_BOXED(2129215689,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149161369,32,FLEN)
NAN_BOXED(2129215689,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149880393,32,FLEN)
NAN_BOXED(2129215689,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2150839091,32,FLEN)
NAN_BOXED(2129215689,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151078765,32,FLEN)
NAN_BOXED(2129215689,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151398331,32,FLEN)
NAN_BOXED(2129215689,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151957572,32,FLEN)
NAN_BOXED(2129215689,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2152516812,32,FLEN)
NAN_BOXED(2129215689,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2153475510,32,FLEN)
NAN_BOXED(2129215689,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154194534,32,FLEN)
NAN_BOXED(2129215689,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154673883,32,FLEN)
NAN_BOXED(2129215689,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872248,32,FLEN)
NAN_BOXED(2129215689,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872252,32,FLEN)
NAN_BOXED(2129215689,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2129215689,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2273312768,32,FLEN)
NAN_BOXED(2129215689,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2273312769,32,FLEN)
NAN_BOXED(2129215689,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2273312771,32,FLEN)
NAN_BOXED(2129215689,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2273312775,32,FLEN)
NAN_BOXED(2129215689,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2273312783,32,FLEN)
NAN_BOXED(2129215689,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2273312799,32,FLEN)
NAN_BOXED(2129215689,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2273312831,32,FLEN)
NAN_BOXED(2129215689,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2273312895,32,FLEN)
NAN_BOXED(2129215689,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2273313023,32,FLEN)
NAN_BOXED(2129215689,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2273313279,32,FLEN)
NAN_BOXED(2129215689,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2273313791,32,FLEN)
NAN_BOXED(2129215689,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2273314815,32,FLEN)
NAN_BOXED(2129215689,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2273316863,32,FLEN)
NAN_BOXED(2129215689,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2273320959,32,FLEN)
NAN_BOXED(2129215689,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2273329151,32,FLEN)
NAN_BOXED(2129215689,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2273345535,32,FLEN)
NAN_BOXED(2129215689,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2273378303,32,FLEN)
NAN_BOXED(2129215689,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2273443839,32,FLEN)
NAN_BOXED(2129215689,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2273574911,32,FLEN)
NAN_BOXED(2129215689,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2273837055,32,FLEN)
NAN_BOXED(2129215689,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2274361343,32,FLEN)
NAN_BOXED(2129215689,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2275409919,32,FLEN)
NAN_BOXED(2129215689,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2277507071,32,FLEN)
NAN_BOXED(2129215689,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2277507072,32,FLEN)
NAN_BOXED(2129215689,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2279604224,32,FLEN)
NAN_BOXED(2129215689,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2280652800,32,FLEN)
NAN_BOXED(2129215689,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281177088,32,FLEN)
NAN_BOXED(2129215689,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281439232,32,FLEN)
NAN_BOXED(2129215689,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281570304,32,FLEN)
NAN_BOXED(2129215689,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281635840,32,FLEN)
NAN_BOXED(2129215689,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281668608,32,FLEN)
NAN_BOXED(2129215689,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281684992,32,FLEN)
NAN_BOXED(2129215689,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281693184,32,FLEN)
NAN_BOXED(2129215689,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281697280,32,FLEN)
NAN_BOXED(2129215689,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281699328,32,FLEN)
NAN_BOXED(2129215689,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281700352,32,FLEN)
NAN_BOXED(2129215689,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281700864,32,FLEN)
NAN_BOXED(2129215689,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701120,32,FLEN)
NAN_BOXED(2129215689,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701248,32,FLEN)
NAN_BOXED(2129215689,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701312,32,FLEN)
NAN_BOXED(2129215689,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701344,32,FLEN)
NAN_BOXED(2129215689,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701360,32,FLEN)
NAN_BOXED(2129215689,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701368,32,FLEN)
NAN_BOXED(2129215689,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701372,32,FLEN)
NAN_BOXED(2129215689,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701374,32,FLEN)
NAN_BOXED(2129215689,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701375,32,FLEN)
NAN_BOXED(2129219881,32,FLEN)
NAN_BOXED(2152085719,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2129219881,32,FLEN)
NAN_BOXED(2152085719,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2129219881,32,FLEN)
NAN_BOXED(2152085719,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
NAN_BOXED(2129219881,32,FLEN)
NAN_BOXED(2152085719,32,FLEN)
NAN_BOXED(3214514585,32,FLEN)
NAN_BOXED(2129219881,32,FLEN)
NAN_BOXED(2152085719,32,FLEN)
NAN_BOXED(3215233609,32,FLEN)
NAN_BOXED(2129219881,32,FLEN)
NAN_BOXED(2152085719,32,FLEN)
NAN_BOXED(3216192307,32,FLEN)
NAN_BOXED(2129219881,32,FLEN)
NAN_BOXED(2152085719,32,FLEN)
NAN_BOXED(3216431981,32,FLEN)
NAN_BOXED(2129219881,32,FLEN)
NAN_BOXED(2152085719,32,FLEN)
NAN_BOXED(3216751547,32,FLEN)
NAN_BOXED(2129219881,32,FLEN)
NAN_BOXED(2152085719,32,FLEN)
NAN_BOXED(3217310788,32,FLEN)
NAN_BOXED(2129219881,32,FLEN)
NAN_BOXED(2152085719,32,FLEN)
NAN_BOXED(3217870028,32,FLEN)
NAN_BOXED(2129219881,32,FLEN)
NAN_BOXED(2152085719,32,FLEN)
NAN_BOXED(3218828726,32,FLEN)
NAN_BOXED(2129219881,32,FLEN)
NAN_BOXED(2152085719,32,FLEN)
NAN_BOXED(3219547750,32,FLEN)
NAN_BOXED(2129219881,32,FLEN)
NAN_BOXED(2152085719,32,FLEN)
NAN_BOXED(3220027099,32,FLEN)
NAN_BOXED(2129219881,32,FLEN)
NAN_BOXED(2152085719,32,FLEN)
NAN_BOXED(3221225464,32,FLEN)
NAN_BOXED(2129219881,32,FLEN)
NAN_BOXED(2152085719,32,FLEN)
NAN_BOXED(3221225468,32,FLEN)
NAN_BOXED(2129219881,32,FLEN)
NAN_BOXED(2152085719,32,FLEN)
NAN_BOXED(3221225470,32,FLEN)
NAN_BOXED(2129219881,32,FLEN)
NAN_BOXED(2152085719,32,FLEN)
NAN_BOXED(3355443200,32,FLEN)
NAN_BOXED(2129219881,32,FLEN)
NAN_BOXED(2152085719,32,FLEN)
NAN_BOXED(3355443201,32,FLEN)
NAN_BOXED(2129219881,32,FLEN)
NAN_BOXED(2152085719,32,FLEN)
NAN_BOXED(3355443203,32,FLEN)
NAN_BOXED(2129219881,32,FLEN)
NAN_BOXED(2152085719,32,FLEN)
NAN_BOXED(3355443207,32,FLEN)
NAN_BOXED(2129219881,32,FLEN)
NAN_BOXED(2152085719,32,FLEN)
NAN_BOXED(3355443215,32,FLEN)
NAN_BOXED(2129219881,32,FLEN)
NAN_BOXED(2152085719,32,FLEN)
NAN_BOXED(3355443231,32,FLEN)
NAN_BOXED(2129219881,32,FLEN)
NAN_BOXED(2152085719,32,FLEN)
NAN_BOXED(3355443263,32,FLEN)
NAN_BOXED(2129219881,32,FLEN)
NAN_BOXED(2152085719,32,FLEN)
NAN_BOXED(3355443327,32,FLEN)
NAN_BOXED(2129219881,32,FLEN)
NAN_BOXED(2152085719,32,FLEN)
NAN_BOXED(3355443455,32,FLEN)
NAN_BOXED(2129219881,32,FLEN)
NAN_BOXED(2152085719,32,FLEN)
NAN_BOXED(3355443711,32,FLEN)
NAN_BOXED(2129219881,32,FLEN)
NAN_BOXED(2152085719,32,FLEN)
NAN_BOXED(3355444223,32,FLEN)
NAN_BOXED(2129219881,32,FLEN)
NAN_BOXED(2152085719,32,FLEN)
NAN_BOXED(3355445247,32,FLEN)
NAN_BOXED(2129219881,32,FLEN)
NAN_BOXED(2152085719,32,FLEN)
NAN_BOXED(3355447295,32,FLEN)
NAN_BOXED(2129219881,32,FLEN)
NAN_BOXED(2152085719,32,FLEN)
NAN_BOXED(3355451391,32,FLEN)
NAN_BOXED(2129219881,32,FLEN)
NAN_BOXED(2152085719,32,FLEN)
NAN_BOXED(3355459583,32,FLEN)
NAN_BOXED(2129219881,32,FLEN)
NAN_BOXED(2152085719,32,FLEN)
NAN_BOXED(3355475967,32,FLEN)
NAN_BOXED(2129219881,32,FLEN)
NAN_BOXED(2152085719,32,FLEN)
NAN_BOXED(3355508735,32,FLEN)
NAN_BOXED(2129219881,32,FLEN)
NAN_BOXED(2152085719,32,FLEN)
NAN_BOXED(3355574271,32,FLEN)
NAN_BOXED(2129219881,32,FLEN)
NAN_BOXED(2152085719,32,FLEN)
NAN_BOXED(3355705343,32,FLEN)
NAN_BOXED(2129219881,32,FLEN)
NAN_BOXED(2152085719,32,FLEN)
NAN_BOXED(3355967487,32,FLEN)
NAN_BOXED(2129219881,32,FLEN)
NAN_BOXED(2152085719,32,FLEN)
NAN_BOXED(3356491775,32,FLEN)
NAN_BOXED(2129219881,32,FLEN)
NAN_BOXED(2152085719,32,FLEN)
NAN_BOXED(3357540351,32,FLEN)
NAN_BOXED(2129219881,32,FLEN)
NAN_BOXED(2152085719,32,FLEN)
NAN_BOXED(3359637503,32,FLEN)
NAN_BOXED(2129219881,32,FLEN)
NAN_BOXED(2152085719,32,FLEN)
NAN_BOXED(3359637504,32,FLEN)
NAN_BOXED(2129219881,32,FLEN)
NAN_BOXED(2152085719,32,FLEN)
NAN_BOXED(3361734656,32,FLEN)
NAN_BOXED(2129219881,32,FLEN)
NAN_BOXED(2152085719,32,FLEN)
NAN_BOXED(3362783232,32,FLEN)
NAN_BOXED(2129219881,32,FLEN)
NAN_BOXED(2152085719,32,FLEN)
NAN_BOXED(3363307520,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
