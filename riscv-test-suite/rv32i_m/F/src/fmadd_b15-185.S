
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:17:59 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_23552:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a26e3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea26e3; op2val:0x0;
op3val:0x3ffc000; valaddr_reg:x3; val_offset:70656*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70656*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23553:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a26e3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea26e3; op2val:0x0;
op3val:0x3ffe000; valaddr_reg:x3; val_offset:70659*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70659*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23554:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a26e3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea26e3; op2val:0x0;
op3val:0x3fff000; valaddr_reg:x3; val_offset:70662*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70662*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23555:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a26e3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea26e3; op2val:0x0;
op3val:0x3fff800; valaddr_reg:x3; val_offset:70665*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70665*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23556:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a26e3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea26e3; op2val:0x0;
op3val:0x3fffc00; valaddr_reg:x3; val_offset:70668*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70668*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23557:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a26e3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea26e3; op2val:0x0;
op3val:0x3fffe00; valaddr_reg:x3; val_offset:70671*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70671*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23558:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a26e3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea26e3; op2val:0x0;
op3val:0x3ffff00; valaddr_reg:x3; val_offset:70674*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70674*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23559:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a26e3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea26e3; op2val:0x0;
op3val:0x3ffff80; valaddr_reg:x3; val_offset:70677*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70677*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23560:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a26e3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea26e3; op2val:0x0;
op3val:0x3ffffc0; valaddr_reg:x3; val_offset:70680*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70680*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23561:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a26e3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea26e3; op2val:0x0;
op3val:0x3ffffe0; valaddr_reg:x3; val_offset:70683*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70683*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23562:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a26e3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea26e3; op2val:0x0;
op3val:0x3fffff0; valaddr_reg:x3; val_offset:70686*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70686*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23563:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a26e3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea26e3; op2val:0x0;
op3val:0x3fffff8; valaddr_reg:x3; val_offset:70689*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70689*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23564:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a26e3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea26e3; op2val:0x0;
op3val:0x3fffffc; valaddr_reg:x3; val_offset:70692*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70692*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23565:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a26e3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea26e3; op2val:0x0;
op3val:0x3fffffe; valaddr_reg:x3; val_offset:70695*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70695*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23566:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a26e3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea26e3; op2val:0x0;
op3val:0x3ffffff; valaddr_reg:x3; val_offset:70698*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70698*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23567:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a4935 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea4935; op2val:0x0;
op3val:0x800001; valaddr_reg:x3; val_offset:70701*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70701*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23568:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a4935 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea4935; op2val:0x0;
op3val:0x800003; valaddr_reg:x3; val_offset:70704*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70704*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23569:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a4935 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea4935; op2val:0x0;
op3val:0x800007; valaddr_reg:x3; val_offset:70707*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70707*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23570:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a4935 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea4935; op2val:0x0;
op3val:0x999999; valaddr_reg:x3; val_offset:70710*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70710*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23571:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a4935 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea4935; op2val:0x0;
op3val:0xa49249; valaddr_reg:x3; val_offset:70713*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70713*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23572:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a4935 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea4935; op2val:0x0;
op3val:0xb33333; valaddr_reg:x3; val_offset:70716*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70716*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23573:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a4935 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea4935; op2val:0x0;
op3val:0xb6db6d; valaddr_reg:x3; val_offset:70719*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70719*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23574:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a4935 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea4935; op2val:0x0;
op3val:0xbbbbbb; valaddr_reg:x3; val_offset:70722*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70722*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23575:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a4935 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea4935; op2val:0x0;
op3val:0xc44444; valaddr_reg:x3; val_offset:70725*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70725*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23576:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a4935 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea4935; op2val:0x0;
op3val:0xcccccc; valaddr_reg:x3; val_offset:70728*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70728*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23577:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a4935 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea4935; op2val:0x0;
op3val:0xdb6db6; valaddr_reg:x3; val_offset:70731*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70731*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23578:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a4935 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea4935; op2val:0x0;
op3val:0xe66666; valaddr_reg:x3; val_offset:70734*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70734*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23579:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a4935 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea4935; op2val:0x0;
op3val:0xedb6db; valaddr_reg:x3; val_offset:70737*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70737*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23580:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a4935 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea4935; op2val:0x0;
op3val:0xfffff8; valaddr_reg:x3; val_offset:70740*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70740*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23581:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a4935 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea4935; op2val:0x0;
op3val:0xfffffc; valaddr_reg:x3; val_offset:70743*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70743*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23582:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a4935 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea4935; op2val:0x0;
op3val:0xfffffe; valaddr_reg:x3; val_offset:70746*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70746*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23583:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a4935 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea4935; op2val:0x0;
op3val:0xc000000; valaddr_reg:x3; val_offset:70749*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70749*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23584:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a4935 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea4935; op2val:0x0;
op3val:0xc000001; valaddr_reg:x3; val_offset:70752*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70752*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23585:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a4935 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea4935; op2val:0x0;
op3val:0xc000003; valaddr_reg:x3; val_offset:70755*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70755*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23586:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a4935 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea4935; op2val:0x0;
op3val:0xc000007; valaddr_reg:x3; val_offset:70758*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70758*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23587:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a4935 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea4935; op2val:0x0;
op3val:0xc00000f; valaddr_reg:x3; val_offset:70761*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70761*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23588:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a4935 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea4935; op2val:0x0;
op3val:0xc00001f; valaddr_reg:x3; val_offset:70764*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70764*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23589:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a4935 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea4935; op2val:0x0;
op3val:0xc00003f; valaddr_reg:x3; val_offset:70767*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70767*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23590:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a4935 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea4935; op2val:0x0;
op3val:0xc00007f; valaddr_reg:x3; val_offset:70770*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70770*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23591:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a4935 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea4935; op2val:0x0;
op3val:0xc0000ff; valaddr_reg:x3; val_offset:70773*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70773*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23592:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a4935 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea4935; op2val:0x0;
op3val:0xc0001ff; valaddr_reg:x3; val_offset:70776*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70776*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23593:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a4935 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea4935; op2val:0x0;
op3val:0xc0003ff; valaddr_reg:x3; val_offset:70779*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70779*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23594:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a4935 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea4935; op2val:0x0;
op3val:0xc0007ff; valaddr_reg:x3; val_offset:70782*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70782*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23595:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a4935 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea4935; op2val:0x0;
op3val:0xc000fff; valaddr_reg:x3; val_offset:70785*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70785*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23596:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a4935 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea4935; op2val:0x0;
op3val:0xc001fff; valaddr_reg:x3; val_offset:70788*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70788*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23597:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a4935 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea4935; op2val:0x0;
op3val:0xc003fff; valaddr_reg:x3; val_offset:70791*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70791*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23598:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a4935 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea4935; op2val:0x0;
op3val:0xc007fff; valaddr_reg:x3; val_offset:70794*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70794*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23599:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a4935 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea4935; op2val:0x0;
op3val:0xc00ffff; valaddr_reg:x3; val_offset:70797*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70797*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23600:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a4935 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea4935; op2val:0x0;
op3val:0xc01ffff; valaddr_reg:x3; val_offset:70800*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70800*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23601:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a4935 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea4935; op2val:0x0;
op3val:0xc03ffff; valaddr_reg:x3; val_offset:70803*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70803*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23602:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a4935 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea4935; op2val:0x0;
op3val:0xc07ffff; valaddr_reg:x3; val_offset:70806*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70806*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23603:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a4935 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea4935; op2val:0x0;
op3val:0xc0fffff; valaddr_reg:x3; val_offset:70809*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70809*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23604:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a4935 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea4935; op2val:0x0;
op3val:0xc1fffff; valaddr_reg:x3; val_offset:70812*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70812*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23605:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a4935 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea4935; op2val:0x0;
op3val:0xc3fffff; valaddr_reg:x3; val_offset:70815*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70815*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23606:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a4935 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea4935; op2val:0x0;
op3val:0xc400000; valaddr_reg:x3; val_offset:70818*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70818*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23607:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a4935 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea4935; op2val:0x0;
op3val:0xc600000; valaddr_reg:x3; val_offset:70821*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70821*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23608:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a4935 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea4935; op2val:0x0;
op3val:0xc700000; valaddr_reg:x3; val_offset:70824*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70824*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23609:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a4935 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea4935; op2val:0x0;
op3val:0xc780000; valaddr_reg:x3; val_offset:70827*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70827*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23610:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a4935 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea4935; op2val:0x0;
op3val:0xc7c0000; valaddr_reg:x3; val_offset:70830*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70830*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23611:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a4935 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea4935; op2val:0x0;
op3val:0xc7e0000; valaddr_reg:x3; val_offset:70833*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70833*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23612:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a4935 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea4935; op2val:0x0;
op3val:0xc7f0000; valaddr_reg:x3; val_offset:70836*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70836*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23613:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a4935 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea4935; op2val:0x0;
op3val:0xc7f8000; valaddr_reg:x3; val_offset:70839*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70839*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23614:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a4935 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea4935; op2val:0x0;
op3val:0xc7fc000; valaddr_reg:x3; val_offset:70842*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70842*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23615:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a4935 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea4935; op2val:0x0;
op3val:0xc7fe000; valaddr_reg:x3; val_offset:70845*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70845*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23616:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a4935 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea4935; op2val:0x0;
op3val:0xc7ff000; valaddr_reg:x3; val_offset:70848*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70848*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23617:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a4935 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea4935; op2val:0x0;
op3val:0xc7ff800; valaddr_reg:x3; val_offset:70851*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70851*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23618:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a4935 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea4935; op2val:0x0;
op3val:0xc7ffc00; valaddr_reg:x3; val_offset:70854*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70854*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23619:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a4935 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea4935; op2val:0x0;
op3val:0xc7ffe00; valaddr_reg:x3; val_offset:70857*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70857*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23620:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a4935 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea4935; op2val:0x0;
op3val:0xc7fff00; valaddr_reg:x3; val_offset:70860*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70860*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23621:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a4935 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea4935; op2val:0x0;
op3val:0xc7fff80; valaddr_reg:x3; val_offset:70863*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70863*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23622:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a4935 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea4935; op2val:0x0;
op3val:0xc7fffc0; valaddr_reg:x3; val_offset:70866*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70866*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23623:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a4935 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea4935; op2val:0x0;
op3val:0xc7fffe0; valaddr_reg:x3; val_offset:70869*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70869*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23624:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a4935 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea4935; op2val:0x0;
op3val:0xc7ffff0; valaddr_reg:x3; val_offset:70872*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70872*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23625:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a4935 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea4935; op2val:0x0;
op3val:0xc7ffff8; valaddr_reg:x3; val_offset:70875*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70875*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23626:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a4935 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea4935; op2val:0x0;
op3val:0xc7ffffc; valaddr_reg:x3; val_offset:70878*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70878*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23627:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a4935 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea4935; op2val:0x0;
op3val:0xc7ffffe; valaddr_reg:x3; val_offset:70881*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70881*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23628:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a4935 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea4935; op2val:0x0;
op3val:0xc7fffff; valaddr_reg:x3; val_offset:70884*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70884*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23629:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a4ac5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x45ee07 and fs3 == 1 and fe3 == 0x3f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea4ac5; op2val:0x8045ee07;
op3val:0x9f800000; valaddr_reg:x3; val_offset:70887*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70887*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23630:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a4ac5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x45ee07 and fs3 == 1 and fe3 == 0x3f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea4ac5; op2val:0x8045ee07;
op3val:0x9f800001; valaddr_reg:x3; val_offset:70890*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70890*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23631:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a4ac5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x45ee07 and fs3 == 1 and fe3 == 0x3f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea4ac5; op2val:0x8045ee07;
op3val:0x9f800003; valaddr_reg:x3; val_offset:70893*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70893*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23632:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a4ac5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x45ee07 and fs3 == 1 and fe3 == 0x3f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea4ac5; op2val:0x8045ee07;
op3val:0x9f800007; valaddr_reg:x3; val_offset:70896*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70896*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23633:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a4ac5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x45ee07 and fs3 == 1 and fe3 == 0x3f and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea4ac5; op2val:0x8045ee07;
op3val:0x9f80000f; valaddr_reg:x3; val_offset:70899*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70899*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23634:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a4ac5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x45ee07 and fs3 == 1 and fe3 == 0x3f and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea4ac5; op2val:0x8045ee07;
op3val:0x9f80001f; valaddr_reg:x3; val_offset:70902*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70902*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23635:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a4ac5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x45ee07 and fs3 == 1 and fe3 == 0x3f and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea4ac5; op2val:0x8045ee07;
op3val:0x9f80003f; valaddr_reg:x3; val_offset:70905*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70905*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23636:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a4ac5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x45ee07 and fs3 == 1 and fe3 == 0x3f and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea4ac5; op2val:0x8045ee07;
op3val:0x9f80007f; valaddr_reg:x3; val_offset:70908*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70908*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23637:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a4ac5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x45ee07 and fs3 == 1 and fe3 == 0x3f and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea4ac5; op2val:0x8045ee07;
op3val:0x9f8000ff; valaddr_reg:x3; val_offset:70911*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70911*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23638:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a4ac5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x45ee07 and fs3 == 1 and fe3 == 0x3f and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea4ac5; op2val:0x8045ee07;
op3val:0x9f8001ff; valaddr_reg:x3; val_offset:70914*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70914*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23639:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a4ac5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x45ee07 and fs3 == 1 and fe3 == 0x3f and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea4ac5; op2val:0x8045ee07;
op3val:0x9f8003ff; valaddr_reg:x3; val_offset:70917*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70917*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23640:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a4ac5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x45ee07 and fs3 == 1 and fe3 == 0x3f and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea4ac5; op2val:0x8045ee07;
op3val:0x9f8007ff; valaddr_reg:x3; val_offset:70920*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70920*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23641:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a4ac5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x45ee07 and fs3 == 1 and fe3 == 0x3f and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea4ac5; op2val:0x8045ee07;
op3val:0x9f800fff; valaddr_reg:x3; val_offset:70923*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70923*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23642:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a4ac5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x45ee07 and fs3 == 1 and fe3 == 0x3f and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea4ac5; op2val:0x8045ee07;
op3val:0x9f801fff; valaddr_reg:x3; val_offset:70926*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70926*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23643:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a4ac5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x45ee07 and fs3 == 1 and fe3 == 0x3f and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea4ac5; op2val:0x8045ee07;
op3val:0x9f803fff; valaddr_reg:x3; val_offset:70929*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70929*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23644:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a4ac5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x45ee07 and fs3 == 1 and fe3 == 0x3f and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea4ac5; op2val:0x8045ee07;
op3val:0x9f807fff; valaddr_reg:x3; val_offset:70932*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70932*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23645:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a4ac5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x45ee07 and fs3 == 1 and fe3 == 0x3f and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea4ac5; op2val:0x8045ee07;
op3val:0x9f80ffff; valaddr_reg:x3; val_offset:70935*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70935*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23646:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a4ac5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x45ee07 and fs3 == 1 and fe3 == 0x3f and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea4ac5; op2val:0x8045ee07;
op3val:0x9f81ffff; valaddr_reg:x3; val_offset:70938*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70938*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23647:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a4ac5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x45ee07 and fs3 == 1 and fe3 == 0x3f and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea4ac5; op2val:0x8045ee07;
op3val:0x9f83ffff; valaddr_reg:x3; val_offset:70941*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70941*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23648:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a4ac5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x45ee07 and fs3 == 1 and fe3 == 0x3f and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea4ac5; op2val:0x8045ee07;
op3val:0x9f87ffff; valaddr_reg:x3; val_offset:70944*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70944*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23649:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a4ac5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x45ee07 and fs3 == 1 and fe3 == 0x3f and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea4ac5; op2val:0x8045ee07;
op3val:0x9f8fffff; valaddr_reg:x3; val_offset:70947*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70947*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23650:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a4ac5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x45ee07 and fs3 == 1 and fe3 == 0x3f and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea4ac5; op2val:0x8045ee07;
op3val:0x9f9fffff; valaddr_reg:x3; val_offset:70950*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70950*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23651:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a4ac5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x45ee07 and fs3 == 1 and fe3 == 0x3f and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea4ac5; op2val:0x8045ee07;
op3val:0x9fbfffff; valaddr_reg:x3; val_offset:70953*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70953*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23652:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a4ac5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x45ee07 and fs3 == 1 and fe3 == 0x3f and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea4ac5; op2val:0x8045ee07;
op3val:0x9fc00000; valaddr_reg:x3; val_offset:70956*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70956*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23653:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a4ac5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x45ee07 and fs3 == 1 and fe3 == 0x3f and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea4ac5; op2val:0x8045ee07;
op3val:0x9fe00000; valaddr_reg:x3; val_offset:70959*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70959*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23654:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a4ac5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x45ee07 and fs3 == 1 and fe3 == 0x3f and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea4ac5; op2val:0x8045ee07;
op3val:0x9ff00000; valaddr_reg:x3; val_offset:70962*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70962*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23655:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a4ac5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x45ee07 and fs3 == 1 and fe3 == 0x3f and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea4ac5; op2val:0x8045ee07;
op3val:0x9ff80000; valaddr_reg:x3; val_offset:70965*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70965*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23656:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a4ac5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x45ee07 and fs3 == 1 and fe3 == 0x3f and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea4ac5; op2val:0x8045ee07;
op3val:0x9ffc0000; valaddr_reg:x3; val_offset:70968*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70968*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23657:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a4ac5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x45ee07 and fs3 == 1 and fe3 == 0x3f and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea4ac5; op2val:0x8045ee07;
op3val:0x9ffe0000; valaddr_reg:x3; val_offset:70971*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70971*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23658:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a4ac5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x45ee07 and fs3 == 1 and fe3 == 0x3f and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea4ac5; op2val:0x8045ee07;
op3val:0x9fff0000; valaddr_reg:x3; val_offset:70974*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70974*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23659:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a4ac5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x45ee07 and fs3 == 1 and fe3 == 0x3f and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea4ac5; op2val:0x8045ee07;
op3val:0x9fff8000; valaddr_reg:x3; val_offset:70977*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70977*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23660:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a4ac5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x45ee07 and fs3 == 1 and fe3 == 0x3f and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea4ac5; op2val:0x8045ee07;
op3val:0x9fffc000; valaddr_reg:x3; val_offset:70980*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70980*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23661:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a4ac5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x45ee07 and fs3 == 1 and fe3 == 0x3f and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea4ac5; op2val:0x8045ee07;
op3val:0x9fffe000; valaddr_reg:x3; val_offset:70983*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70983*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23662:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a4ac5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x45ee07 and fs3 == 1 and fe3 == 0x3f and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea4ac5; op2val:0x8045ee07;
op3val:0x9ffff000; valaddr_reg:x3; val_offset:70986*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70986*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23663:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a4ac5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x45ee07 and fs3 == 1 and fe3 == 0x3f and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea4ac5; op2val:0x8045ee07;
op3val:0x9ffff800; valaddr_reg:x3; val_offset:70989*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70989*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23664:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a4ac5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x45ee07 and fs3 == 1 and fe3 == 0x3f and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea4ac5; op2val:0x8045ee07;
op3val:0x9ffffc00; valaddr_reg:x3; val_offset:70992*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70992*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23665:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a4ac5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x45ee07 and fs3 == 1 and fe3 == 0x3f and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea4ac5; op2val:0x8045ee07;
op3val:0x9ffffe00; valaddr_reg:x3; val_offset:70995*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70995*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23666:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a4ac5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x45ee07 and fs3 == 1 and fe3 == 0x3f and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea4ac5; op2val:0x8045ee07;
op3val:0x9fffff00; valaddr_reg:x3; val_offset:70998*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70998*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23667:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a4ac5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x45ee07 and fs3 == 1 and fe3 == 0x3f and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea4ac5; op2val:0x8045ee07;
op3val:0x9fffff80; valaddr_reg:x3; val_offset:71001*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71001*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23668:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a4ac5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x45ee07 and fs3 == 1 and fe3 == 0x3f and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea4ac5; op2val:0x8045ee07;
op3val:0x9fffffc0; valaddr_reg:x3; val_offset:71004*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71004*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23669:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a4ac5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x45ee07 and fs3 == 1 and fe3 == 0x3f and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea4ac5; op2val:0x8045ee07;
op3val:0x9fffffe0; valaddr_reg:x3; val_offset:71007*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71007*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23670:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a4ac5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x45ee07 and fs3 == 1 and fe3 == 0x3f and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea4ac5; op2val:0x8045ee07;
op3val:0x9ffffff0; valaddr_reg:x3; val_offset:71010*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71010*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23671:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a4ac5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x45ee07 and fs3 == 1 and fe3 == 0x3f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea4ac5; op2val:0x8045ee07;
op3val:0x9ffffff8; valaddr_reg:x3; val_offset:71013*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71013*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23672:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a4ac5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x45ee07 and fs3 == 1 and fe3 == 0x3f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea4ac5; op2val:0x8045ee07;
op3val:0x9ffffffc; valaddr_reg:x3; val_offset:71016*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71016*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23673:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a4ac5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x45ee07 and fs3 == 1 and fe3 == 0x3f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea4ac5; op2val:0x8045ee07;
op3val:0x9ffffffe; valaddr_reg:x3; val_offset:71019*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71019*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23674:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a4ac5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x45ee07 and fs3 == 1 and fe3 == 0x3f and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea4ac5; op2val:0x8045ee07;
op3val:0x9fffffff; valaddr_reg:x3; val_offset:71022*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71022*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23675:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a4ac5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x45ee07 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea4ac5; op2val:0x8045ee07;
op3val:0xbf800001; valaddr_reg:x3; val_offset:71025*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71025*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23676:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a4ac5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x45ee07 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea4ac5; op2val:0x8045ee07;
op3val:0xbf800003; valaddr_reg:x3; val_offset:71028*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71028*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23677:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a4ac5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x45ee07 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea4ac5; op2val:0x8045ee07;
op3val:0xbf800007; valaddr_reg:x3; val_offset:71031*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71031*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23678:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a4ac5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x45ee07 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea4ac5; op2val:0x8045ee07;
op3val:0xbf999999; valaddr_reg:x3; val_offset:71034*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71034*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23679:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a4ac5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x45ee07 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea4ac5; op2val:0x8045ee07;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:71037*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71037*0 + 3*184*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2129274595,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67092480,32,FLEN)
NAN_BOXED(2129274595,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67100672,32,FLEN)
NAN_BOXED(2129274595,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67104768,32,FLEN)
NAN_BOXED(2129274595,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67106816,32,FLEN)
NAN_BOXED(2129274595,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67107840,32,FLEN)
NAN_BOXED(2129274595,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67108352,32,FLEN)
NAN_BOXED(2129274595,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67108608,32,FLEN)
NAN_BOXED(2129274595,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67108736,32,FLEN)
NAN_BOXED(2129274595,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67108800,32,FLEN)
NAN_BOXED(2129274595,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67108832,32,FLEN)
NAN_BOXED(2129274595,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67108848,32,FLEN)
NAN_BOXED(2129274595,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67108856,32,FLEN)
NAN_BOXED(2129274595,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67108860,32,FLEN)
NAN_BOXED(2129274595,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67108862,32,FLEN)
NAN_BOXED(2129274595,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67108863,32,FLEN)
NAN_BOXED(2129283381,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(2129283381,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388611,32,FLEN)
NAN_BOXED(2129283381,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388615,32,FLEN)
NAN_BOXED(2129283381,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(10066329,32,FLEN)
NAN_BOXED(2129283381,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(10785353,32,FLEN)
NAN_BOXED(2129283381,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(11744051,32,FLEN)
NAN_BOXED(2129283381,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(11983725,32,FLEN)
NAN_BOXED(2129283381,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(12303291,32,FLEN)
NAN_BOXED(2129283381,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(12862532,32,FLEN)
NAN_BOXED(2129283381,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(13421772,32,FLEN)
NAN_BOXED(2129283381,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(14380470,32,FLEN)
NAN_BOXED(2129283381,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(15099494,32,FLEN)
NAN_BOXED(2129283381,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(15578843,32,FLEN)
NAN_BOXED(2129283381,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777208,32,FLEN)
NAN_BOXED(2129283381,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777212,32,FLEN)
NAN_BOXED(2129283381,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777214,32,FLEN)
NAN_BOXED(2129283381,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(201326592,32,FLEN)
NAN_BOXED(2129283381,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(201326593,32,FLEN)
NAN_BOXED(2129283381,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(201326595,32,FLEN)
NAN_BOXED(2129283381,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(201326599,32,FLEN)
NAN_BOXED(2129283381,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(201326607,32,FLEN)
NAN_BOXED(2129283381,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(201326623,32,FLEN)
NAN_BOXED(2129283381,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(201326655,32,FLEN)
NAN_BOXED(2129283381,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(201326719,32,FLEN)
NAN_BOXED(2129283381,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(201326847,32,FLEN)
NAN_BOXED(2129283381,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(201327103,32,FLEN)
NAN_BOXED(2129283381,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(201327615,32,FLEN)
NAN_BOXED(2129283381,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(201328639,32,FLEN)
NAN_BOXED(2129283381,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(201330687,32,FLEN)
NAN_BOXED(2129283381,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(201334783,32,FLEN)
NAN_BOXED(2129283381,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(201342975,32,FLEN)
NAN_BOXED(2129283381,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(201359359,32,FLEN)
NAN_BOXED(2129283381,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(201392127,32,FLEN)
NAN_BOXED(2129283381,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(201457663,32,FLEN)
NAN_BOXED(2129283381,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(201588735,32,FLEN)
NAN_BOXED(2129283381,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(201850879,32,FLEN)
NAN_BOXED(2129283381,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(202375167,32,FLEN)
NAN_BOXED(2129283381,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(203423743,32,FLEN)
NAN_BOXED(2129283381,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(205520895,32,FLEN)
NAN_BOXED(2129283381,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(205520896,32,FLEN)
NAN_BOXED(2129283381,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(207618048,32,FLEN)
NAN_BOXED(2129283381,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(208666624,32,FLEN)
NAN_BOXED(2129283381,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209190912,32,FLEN)
NAN_BOXED(2129283381,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209453056,32,FLEN)
NAN_BOXED(2129283381,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209584128,32,FLEN)
NAN_BOXED(2129283381,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209649664,32,FLEN)
NAN_BOXED(2129283381,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209682432,32,FLEN)
NAN_BOXED(2129283381,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209698816,32,FLEN)
NAN_BOXED(2129283381,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209707008,32,FLEN)
NAN_BOXED(2129283381,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209711104,32,FLEN)
NAN_BOXED(2129283381,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209713152,32,FLEN)
NAN_BOXED(2129283381,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209714176,32,FLEN)
NAN_BOXED(2129283381,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209714688,32,FLEN)
NAN_BOXED(2129283381,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209714944,32,FLEN)
NAN_BOXED(2129283381,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209715072,32,FLEN)
NAN_BOXED(2129283381,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209715136,32,FLEN)
NAN_BOXED(2129283381,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209715168,32,FLEN)
NAN_BOXED(2129283381,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209715184,32,FLEN)
NAN_BOXED(2129283381,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209715192,32,FLEN)
NAN_BOXED(2129283381,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209715196,32,FLEN)
NAN_BOXED(2129283381,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209715198,32,FLEN)
NAN_BOXED(2129283381,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209715199,32,FLEN)
NAN_BOXED(2129283781,32,FLEN)
NAN_BOXED(2152066567,32,FLEN)
NAN_BOXED(2675965952,32,FLEN)
NAN_BOXED(2129283781,32,FLEN)
NAN_BOXED(2152066567,32,FLEN)
NAN_BOXED(2675965953,32,FLEN)
NAN_BOXED(2129283781,32,FLEN)
NAN_BOXED(2152066567,32,FLEN)
NAN_BOXED(2675965955,32,FLEN)
NAN_BOXED(2129283781,32,FLEN)
NAN_BOXED(2152066567,32,FLEN)
NAN_BOXED(2675965959,32,FLEN)
NAN_BOXED(2129283781,32,FLEN)
NAN_BOXED(2152066567,32,FLEN)
NAN_BOXED(2675965967,32,FLEN)
NAN_BOXED(2129283781,32,FLEN)
NAN_BOXED(2152066567,32,FLEN)
NAN_BOXED(2675965983,32,FLEN)
NAN_BOXED(2129283781,32,FLEN)
NAN_BOXED(2152066567,32,FLEN)
NAN_BOXED(2675966015,32,FLEN)
NAN_BOXED(2129283781,32,FLEN)
NAN_BOXED(2152066567,32,FLEN)
NAN_BOXED(2675966079,32,FLEN)
NAN_BOXED(2129283781,32,FLEN)
NAN_BOXED(2152066567,32,FLEN)
NAN_BOXED(2675966207,32,FLEN)
NAN_BOXED(2129283781,32,FLEN)
NAN_BOXED(2152066567,32,FLEN)
NAN_BOXED(2675966463,32,FLEN)
NAN_BOXED(2129283781,32,FLEN)
NAN_BOXED(2152066567,32,FLEN)
NAN_BOXED(2675966975,32,FLEN)
NAN_BOXED(2129283781,32,FLEN)
NAN_BOXED(2152066567,32,FLEN)
NAN_BOXED(2675967999,32,FLEN)
NAN_BOXED(2129283781,32,FLEN)
NAN_BOXED(2152066567,32,FLEN)
NAN_BOXED(2675970047,32,FLEN)
NAN_BOXED(2129283781,32,FLEN)
NAN_BOXED(2152066567,32,FLEN)
NAN_BOXED(2675974143,32,FLEN)
NAN_BOXED(2129283781,32,FLEN)
NAN_BOXED(2152066567,32,FLEN)
NAN_BOXED(2675982335,32,FLEN)
NAN_BOXED(2129283781,32,FLEN)
NAN_BOXED(2152066567,32,FLEN)
NAN_BOXED(2675998719,32,FLEN)
NAN_BOXED(2129283781,32,FLEN)
NAN_BOXED(2152066567,32,FLEN)
NAN_BOXED(2676031487,32,FLEN)
NAN_BOXED(2129283781,32,FLEN)
NAN_BOXED(2152066567,32,FLEN)
NAN_BOXED(2676097023,32,FLEN)
NAN_BOXED(2129283781,32,FLEN)
NAN_BOXED(2152066567,32,FLEN)
NAN_BOXED(2676228095,32,FLEN)
NAN_BOXED(2129283781,32,FLEN)
NAN_BOXED(2152066567,32,FLEN)
NAN_BOXED(2676490239,32,FLEN)
NAN_BOXED(2129283781,32,FLEN)
NAN_BOXED(2152066567,32,FLEN)
NAN_BOXED(2677014527,32,FLEN)
NAN_BOXED(2129283781,32,FLEN)
NAN_BOXED(2152066567,32,FLEN)
NAN_BOXED(2678063103,32,FLEN)
NAN_BOXED(2129283781,32,FLEN)
NAN_BOXED(2152066567,32,FLEN)
NAN_BOXED(2680160255,32,FLEN)
NAN_BOXED(2129283781,32,FLEN)
NAN_BOXED(2152066567,32,FLEN)
NAN_BOXED(2680160256,32,FLEN)
NAN_BOXED(2129283781,32,FLEN)
NAN_BOXED(2152066567,32,FLEN)
NAN_BOXED(2682257408,32,FLEN)
NAN_BOXED(2129283781,32,FLEN)
NAN_BOXED(2152066567,32,FLEN)
NAN_BOXED(2683305984,32,FLEN)
NAN_BOXED(2129283781,32,FLEN)
NAN_BOXED(2152066567,32,FLEN)
NAN_BOXED(2683830272,32,FLEN)
NAN_BOXED(2129283781,32,FLEN)
NAN_BOXED(2152066567,32,FLEN)
NAN_BOXED(2684092416,32,FLEN)
NAN_BOXED(2129283781,32,FLEN)
NAN_BOXED(2152066567,32,FLEN)
NAN_BOXED(2684223488,32,FLEN)
NAN_BOXED(2129283781,32,FLEN)
NAN_BOXED(2152066567,32,FLEN)
NAN_BOXED(2684289024,32,FLEN)
NAN_BOXED(2129283781,32,FLEN)
NAN_BOXED(2152066567,32,FLEN)
NAN_BOXED(2684321792,32,FLEN)
NAN_BOXED(2129283781,32,FLEN)
NAN_BOXED(2152066567,32,FLEN)
NAN_BOXED(2684338176,32,FLEN)
NAN_BOXED(2129283781,32,FLEN)
NAN_BOXED(2152066567,32,FLEN)
NAN_BOXED(2684346368,32,FLEN)
NAN_BOXED(2129283781,32,FLEN)
NAN_BOXED(2152066567,32,FLEN)
NAN_BOXED(2684350464,32,FLEN)
NAN_BOXED(2129283781,32,FLEN)
NAN_BOXED(2152066567,32,FLEN)
NAN_BOXED(2684352512,32,FLEN)
NAN_BOXED(2129283781,32,FLEN)
NAN_BOXED(2152066567,32,FLEN)
NAN_BOXED(2684353536,32,FLEN)
NAN_BOXED(2129283781,32,FLEN)
NAN_BOXED(2152066567,32,FLEN)
NAN_BOXED(2684354048,32,FLEN)
NAN_BOXED(2129283781,32,FLEN)
NAN_BOXED(2152066567,32,FLEN)
NAN_BOXED(2684354304,32,FLEN)
NAN_BOXED(2129283781,32,FLEN)
NAN_BOXED(2152066567,32,FLEN)
NAN_BOXED(2684354432,32,FLEN)
NAN_BOXED(2129283781,32,FLEN)
NAN_BOXED(2152066567,32,FLEN)
NAN_BOXED(2684354496,32,FLEN)
NAN_BOXED(2129283781,32,FLEN)
NAN_BOXED(2152066567,32,FLEN)
NAN_BOXED(2684354528,32,FLEN)
NAN_BOXED(2129283781,32,FLEN)
NAN_BOXED(2152066567,32,FLEN)
NAN_BOXED(2684354544,32,FLEN)
NAN_BOXED(2129283781,32,FLEN)
NAN_BOXED(2152066567,32,FLEN)
NAN_BOXED(2684354552,32,FLEN)
NAN_BOXED(2129283781,32,FLEN)
NAN_BOXED(2152066567,32,FLEN)
NAN_BOXED(2684354556,32,FLEN)
NAN_BOXED(2129283781,32,FLEN)
NAN_BOXED(2152066567,32,FLEN)
NAN_BOXED(2684354558,32,FLEN)
NAN_BOXED(2129283781,32,FLEN)
NAN_BOXED(2152066567,32,FLEN)
NAN_BOXED(2684354559,32,FLEN)
NAN_BOXED(2129283781,32,FLEN)
NAN_BOXED(2152066567,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2129283781,32,FLEN)
NAN_BOXED(2152066567,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2129283781,32,FLEN)
NAN_BOXED(2152066567,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
NAN_BOXED(2129283781,32,FLEN)
NAN_BOXED(2152066567,32,FLEN)
NAN_BOXED(3214514585,32,FLEN)
NAN_BOXED(2129283781,32,FLEN)
NAN_BOXED(2152066567,32,FLEN)
NAN_BOXED(3215233609,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
