
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:17:59 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_23680:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a4ac5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x45ee07 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea4ac5; op2val:0x8045ee07;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:71040*0 + 3*185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71040*0 + 3*185*FLEN/8, x4, x1, x2)

inst_23681:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a4ac5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x45ee07 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea4ac5; op2val:0x8045ee07;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:71043*0 + 3*185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71043*0 + 3*185*FLEN/8, x4, x1, x2)

inst_23682:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a4ac5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x45ee07 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea4ac5; op2val:0x8045ee07;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:71046*0 + 3*185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71046*0 + 3*185*FLEN/8, x4, x1, x2)

inst_23683:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a4ac5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x45ee07 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea4ac5; op2val:0x8045ee07;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:71049*0 + 3*185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71049*0 + 3*185*FLEN/8, x4, x1, x2)

inst_23684:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a4ac5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x45ee07 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea4ac5; op2val:0x8045ee07;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:71052*0 + 3*185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71052*0 + 3*185*FLEN/8, x4, x1, x2)

inst_23685:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a4ac5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x45ee07 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea4ac5; op2val:0x8045ee07;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:71055*0 + 3*185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71055*0 + 3*185*FLEN/8, x4, x1, x2)

inst_23686:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a4ac5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x45ee07 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea4ac5; op2val:0x8045ee07;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:71058*0 + 3*185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71058*0 + 3*185*FLEN/8, x4, x1, x2)

inst_23687:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a4ac5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x45ee07 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea4ac5; op2val:0x8045ee07;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:71061*0 + 3*185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71061*0 + 3*185*FLEN/8, x4, x1, x2)

inst_23688:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a4ac5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x45ee07 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea4ac5; op2val:0x8045ee07;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:71064*0 + 3*185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71064*0 + 3*185*FLEN/8, x4, x1, x2)

inst_23689:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a4ac5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x45ee07 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea4ac5; op2val:0x8045ee07;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:71067*0 + 3*185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71067*0 + 3*185*FLEN/8, x4, x1, x2)

inst_23690:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a4ac5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x45ee07 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea4ac5; op2val:0x8045ee07;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:71070*0 + 3*185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71070*0 + 3*185*FLEN/8, x4, x1, x2)

inst_23691:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6aeb85 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeaeb85; op2val:0x0;
op3val:0x800001; valaddr_reg:x3; val_offset:71073*0 + 3*185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71073*0 + 3*185*FLEN/8, x4, x1, x2)

inst_23692:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6aeb85 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeaeb85; op2val:0x0;
op3val:0x800003; valaddr_reg:x3; val_offset:71076*0 + 3*185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71076*0 + 3*185*FLEN/8, x4, x1, x2)

inst_23693:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6aeb85 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeaeb85; op2val:0x0;
op3val:0x800007; valaddr_reg:x3; val_offset:71079*0 + 3*185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71079*0 + 3*185*FLEN/8, x4, x1, x2)

inst_23694:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6aeb85 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeaeb85; op2val:0x0;
op3val:0x999999; valaddr_reg:x3; val_offset:71082*0 + 3*185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71082*0 + 3*185*FLEN/8, x4, x1, x2)

inst_23695:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6aeb85 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeaeb85; op2val:0x0;
op3val:0xa49249; valaddr_reg:x3; val_offset:71085*0 + 3*185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71085*0 + 3*185*FLEN/8, x4, x1, x2)

inst_23696:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6aeb85 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeaeb85; op2val:0x0;
op3val:0xb33333; valaddr_reg:x3; val_offset:71088*0 + 3*185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71088*0 + 3*185*FLEN/8, x4, x1, x2)

inst_23697:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6aeb85 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeaeb85; op2val:0x0;
op3val:0xb6db6d; valaddr_reg:x3; val_offset:71091*0 + 3*185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71091*0 + 3*185*FLEN/8, x4, x1, x2)

inst_23698:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6aeb85 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeaeb85; op2val:0x0;
op3val:0xbbbbbb; valaddr_reg:x3; val_offset:71094*0 + 3*185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71094*0 + 3*185*FLEN/8, x4, x1, x2)

inst_23699:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6aeb85 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeaeb85; op2val:0x0;
op3val:0xc44444; valaddr_reg:x3; val_offset:71097*0 + 3*185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71097*0 + 3*185*FLEN/8, x4, x1, x2)

inst_23700:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6aeb85 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeaeb85; op2val:0x0;
op3val:0xcccccc; valaddr_reg:x3; val_offset:71100*0 + 3*185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71100*0 + 3*185*FLEN/8, x4, x1, x2)

inst_23701:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6aeb85 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeaeb85; op2val:0x0;
op3val:0xdb6db6; valaddr_reg:x3; val_offset:71103*0 + 3*185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71103*0 + 3*185*FLEN/8, x4, x1, x2)

inst_23702:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6aeb85 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeaeb85; op2val:0x0;
op3val:0xe66666; valaddr_reg:x3; val_offset:71106*0 + 3*185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71106*0 + 3*185*FLEN/8, x4, x1, x2)

inst_23703:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6aeb85 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeaeb85; op2val:0x0;
op3val:0xedb6db; valaddr_reg:x3; val_offset:71109*0 + 3*185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71109*0 + 3*185*FLEN/8, x4, x1, x2)

inst_23704:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6aeb85 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeaeb85; op2val:0x0;
op3val:0xfffff8; valaddr_reg:x3; val_offset:71112*0 + 3*185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71112*0 + 3*185*FLEN/8, x4, x1, x2)

inst_23705:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6aeb85 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeaeb85; op2val:0x0;
op3val:0xfffffc; valaddr_reg:x3; val_offset:71115*0 + 3*185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71115*0 + 3*185*FLEN/8, x4, x1, x2)

inst_23706:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6aeb85 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeaeb85; op2val:0x0;
op3val:0xfffffe; valaddr_reg:x3; val_offset:71118*0 + 3*185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71118*0 + 3*185*FLEN/8, x4, x1, x2)

inst_23707:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6aeb85 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeaeb85; op2val:0x0;
op3val:0x4800000; valaddr_reg:x3; val_offset:71121*0 + 3*185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71121*0 + 3*185*FLEN/8, x4, x1, x2)

inst_23708:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6aeb85 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeaeb85; op2val:0x0;
op3val:0x4800001; valaddr_reg:x3; val_offset:71124*0 + 3*185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71124*0 + 3*185*FLEN/8, x4, x1, x2)

inst_23709:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6aeb85 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeaeb85; op2val:0x0;
op3val:0x4800003; valaddr_reg:x3; val_offset:71127*0 + 3*185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71127*0 + 3*185*FLEN/8, x4, x1, x2)

inst_23710:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6aeb85 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeaeb85; op2val:0x0;
op3val:0x4800007; valaddr_reg:x3; val_offset:71130*0 + 3*185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71130*0 + 3*185*FLEN/8, x4, x1, x2)

inst_23711:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6aeb85 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeaeb85; op2val:0x0;
op3val:0x480000f; valaddr_reg:x3; val_offset:71133*0 + 3*185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71133*0 + 3*185*FLEN/8, x4, x1, x2)

inst_23712:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6aeb85 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeaeb85; op2val:0x0;
op3val:0x480001f; valaddr_reg:x3; val_offset:71136*0 + 3*185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71136*0 + 3*185*FLEN/8, x4, x1, x2)

inst_23713:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6aeb85 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeaeb85; op2val:0x0;
op3val:0x480003f; valaddr_reg:x3; val_offset:71139*0 + 3*185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71139*0 + 3*185*FLEN/8, x4, x1, x2)

inst_23714:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6aeb85 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeaeb85; op2val:0x0;
op3val:0x480007f; valaddr_reg:x3; val_offset:71142*0 + 3*185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71142*0 + 3*185*FLEN/8, x4, x1, x2)

inst_23715:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6aeb85 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeaeb85; op2val:0x0;
op3val:0x48000ff; valaddr_reg:x3; val_offset:71145*0 + 3*185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71145*0 + 3*185*FLEN/8, x4, x1, x2)

inst_23716:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6aeb85 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeaeb85; op2val:0x0;
op3val:0x48001ff; valaddr_reg:x3; val_offset:71148*0 + 3*185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71148*0 + 3*185*FLEN/8, x4, x1, x2)

inst_23717:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6aeb85 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeaeb85; op2val:0x0;
op3val:0x48003ff; valaddr_reg:x3; val_offset:71151*0 + 3*185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71151*0 + 3*185*FLEN/8, x4, x1, x2)

inst_23718:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6aeb85 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeaeb85; op2val:0x0;
op3val:0x48007ff; valaddr_reg:x3; val_offset:71154*0 + 3*185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71154*0 + 3*185*FLEN/8, x4, x1, x2)

inst_23719:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6aeb85 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeaeb85; op2val:0x0;
op3val:0x4800fff; valaddr_reg:x3; val_offset:71157*0 + 3*185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71157*0 + 3*185*FLEN/8, x4, x1, x2)

inst_23720:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6aeb85 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeaeb85; op2val:0x0;
op3val:0x4801fff; valaddr_reg:x3; val_offset:71160*0 + 3*185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71160*0 + 3*185*FLEN/8, x4, x1, x2)

inst_23721:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6aeb85 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeaeb85; op2val:0x0;
op3val:0x4803fff; valaddr_reg:x3; val_offset:71163*0 + 3*185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71163*0 + 3*185*FLEN/8, x4, x1, x2)

inst_23722:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6aeb85 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeaeb85; op2val:0x0;
op3val:0x4807fff; valaddr_reg:x3; val_offset:71166*0 + 3*185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71166*0 + 3*185*FLEN/8, x4, x1, x2)

inst_23723:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6aeb85 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeaeb85; op2val:0x0;
op3val:0x480ffff; valaddr_reg:x3; val_offset:71169*0 + 3*185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71169*0 + 3*185*FLEN/8, x4, x1, x2)

inst_23724:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6aeb85 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeaeb85; op2val:0x0;
op3val:0x481ffff; valaddr_reg:x3; val_offset:71172*0 + 3*185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71172*0 + 3*185*FLEN/8, x4, x1, x2)

inst_23725:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6aeb85 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeaeb85; op2val:0x0;
op3val:0x483ffff; valaddr_reg:x3; val_offset:71175*0 + 3*185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71175*0 + 3*185*FLEN/8, x4, x1, x2)

inst_23726:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6aeb85 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeaeb85; op2val:0x0;
op3val:0x487ffff; valaddr_reg:x3; val_offset:71178*0 + 3*185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71178*0 + 3*185*FLEN/8, x4, x1, x2)

inst_23727:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6aeb85 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeaeb85; op2val:0x0;
op3val:0x48fffff; valaddr_reg:x3; val_offset:71181*0 + 3*185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71181*0 + 3*185*FLEN/8, x4, x1, x2)

inst_23728:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6aeb85 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeaeb85; op2val:0x0;
op3val:0x49fffff; valaddr_reg:x3; val_offset:71184*0 + 3*185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71184*0 + 3*185*FLEN/8, x4, x1, x2)

inst_23729:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6aeb85 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeaeb85; op2val:0x0;
op3val:0x4bfffff; valaddr_reg:x3; val_offset:71187*0 + 3*185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71187*0 + 3*185*FLEN/8, x4, x1, x2)

inst_23730:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6aeb85 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeaeb85; op2val:0x0;
op3val:0x4c00000; valaddr_reg:x3; val_offset:71190*0 + 3*185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71190*0 + 3*185*FLEN/8, x4, x1, x2)

inst_23731:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6aeb85 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeaeb85; op2val:0x0;
op3val:0x4e00000; valaddr_reg:x3; val_offset:71193*0 + 3*185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71193*0 + 3*185*FLEN/8, x4, x1, x2)

inst_23732:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6aeb85 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeaeb85; op2val:0x0;
op3val:0x4f00000; valaddr_reg:x3; val_offset:71196*0 + 3*185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71196*0 + 3*185*FLEN/8, x4, x1, x2)

inst_23733:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6aeb85 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeaeb85; op2val:0x0;
op3val:0x4f80000; valaddr_reg:x3; val_offset:71199*0 + 3*185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71199*0 + 3*185*FLEN/8, x4, x1, x2)

inst_23734:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6aeb85 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeaeb85; op2val:0x0;
op3val:0x4fc0000; valaddr_reg:x3; val_offset:71202*0 + 3*185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71202*0 + 3*185*FLEN/8, x4, x1, x2)

inst_23735:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6aeb85 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeaeb85; op2val:0x0;
op3val:0x4fe0000; valaddr_reg:x3; val_offset:71205*0 + 3*185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71205*0 + 3*185*FLEN/8, x4, x1, x2)

inst_23736:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6aeb85 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeaeb85; op2val:0x0;
op3val:0x4ff0000; valaddr_reg:x3; val_offset:71208*0 + 3*185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71208*0 + 3*185*FLEN/8, x4, x1, x2)

inst_23737:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6aeb85 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeaeb85; op2val:0x0;
op3val:0x4ff8000; valaddr_reg:x3; val_offset:71211*0 + 3*185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71211*0 + 3*185*FLEN/8, x4, x1, x2)

inst_23738:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6aeb85 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeaeb85; op2val:0x0;
op3val:0x4ffc000; valaddr_reg:x3; val_offset:71214*0 + 3*185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71214*0 + 3*185*FLEN/8, x4, x1, x2)

inst_23739:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6aeb85 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeaeb85; op2val:0x0;
op3val:0x4ffe000; valaddr_reg:x3; val_offset:71217*0 + 3*185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71217*0 + 3*185*FLEN/8, x4, x1, x2)

inst_23740:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6aeb85 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeaeb85; op2val:0x0;
op3val:0x4fff000; valaddr_reg:x3; val_offset:71220*0 + 3*185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71220*0 + 3*185*FLEN/8, x4, x1, x2)

inst_23741:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6aeb85 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeaeb85; op2val:0x0;
op3val:0x4fff800; valaddr_reg:x3; val_offset:71223*0 + 3*185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71223*0 + 3*185*FLEN/8, x4, x1, x2)

inst_23742:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6aeb85 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeaeb85; op2val:0x0;
op3val:0x4fffc00; valaddr_reg:x3; val_offset:71226*0 + 3*185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71226*0 + 3*185*FLEN/8, x4, x1, x2)

inst_23743:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6aeb85 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeaeb85; op2val:0x0;
op3val:0x4fffe00; valaddr_reg:x3; val_offset:71229*0 + 3*185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71229*0 + 3*185*FLEN/8, x4, x1, x2)

inst_23744:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6aeb85 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeaeb85; op2val:0x0;
op3val:0x4ffff00; valaddr_reg:x3; val_offset:71232*0 + 3*185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71232*0 + 3*185*FLEN/8, x4, x1, x2)

inst_23745:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6aeb85 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeaeb85; op2val:0x0;
op3val:0x4ffff80; valaddr_reg:x3; val_offset:71235*0 + 3*185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71235*0 + 3*185*FLEN/8, x4, x1, x2)

inst_23746:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6aeb85 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeaeb85; op2val:0x0;
op3val:0x4ffffc0; valaddr_reg:x3; val_offset:71238*0 + 3*185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71238*0 + 3*185*FLEN/8, x4, x1, x2)

inst_23747:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6aeb85 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeaeb85; op2val:0x0;
op3val:0x4ffffe0; valaddr_reg:x3; val_offset:71241*0 + 3*185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71241*0 + 3*185*FLEN/8, x4, x1, x2)

inst_23748:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6aeb85 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeaeb85; op2val:0x0;
op3val:0x4fffff0; valaddr_reg:x3; val_offset:71244*0 + 3*185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71244*0 + 3*185*FLEN/8, x4, x1, x2)

inst_23749:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6aeb85 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeaeb85; op2val:0x0;
op3val:0x4fffff8; valaddr_reg:x3; val_offset:71247*0 + 3*185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71247*0 + 3*185*FLEN/8, x4, x1, x2)

inst_23750:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6aeb85 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeaeb85; op2val:0x0;
op3val:0x4fffffc; valaddr_reg:x3; val_offset:71250*0 + 3*185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71250*0 + 3*185*FLEN/8, x4, x1, x2)

inst_23751:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6aeb85 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeaeb85; op2val:0x0;
op3val:0x4fffffe; valaddr_reg:x3; val_offset:71253*0 + 3*185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71253*0 + 3*185*FLEN/8, x4, x1, x2)

inst_23752:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6aeb85 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeaeb85; op2val:0x0;
op3val:0x4ffffff; valaddr_reg:x3; val_offset:71256*0 + 3*185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71256*0 + 3*185*FLEN/8, x4, x1, x2)

inst_23753:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6b0823 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x45b5b0 and fs3 == 1 and fe3 == 0x72 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeb0823; op2val:0x8045b5b0;
op3val:0xb9000000; valaddr_reg:x3; val_offset:71259*0 + 3*185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71259*0 + 3*185*FLEN/8, x4, x1, x2)

inst_23754:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6b0823 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x45b5b0 and fs3 == 1 and fe3 == 0x72 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeb0823; op2val:0x8045b5b0;
op3val:0xb9000001; valaddr_reg:x3; val_offset:71262*0 + 3*185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71262*0 + 3*185*FLEN/8, x4, x1, x2)

inst_23755:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6b0823 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x45b5b0 and fs3 == 1 and fe3 == 0x72 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeb0823; op2val:0x8045b5b0;
op3val:0xb9000003; valaddr_reg:x3; val_offset:71265*0 + 3*185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71265*0 + 3*185*FLEN/8, x4, x1, x2)

inst_23756:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6b0823 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x45b5b0 and fs3 == 1 and fe3 == 0x72 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeb0823; op2val:0x8045b5b0;
op3val:0xb9000007; valaddr_reg:x3; val_offset:71268*0 + 3*185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71268*0 + 3*185*FLEN/8, x4, x1, x2)

inst_23757:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6b0823 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x45b5b0 and fs3 == 1 and fe3 == 0x72 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeb0823; op2val:0x8045b5b0;
op3val:0xb900000f; valaddr_reg:x3; val_offset:71271*0 + 3*185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71271*0 + 3*185*FLEN/8, x4, x1, x2)

inst_23758:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6b0823 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x45b5b0 and fs3 == 1 and fe3 == 0x72 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeb0823; op2val:0x8045b5b0;
op3val:0xb900001f; valaddr_reg:x3; val_offset:71274*0 + 3*185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71274*0 + 3*185*FLEN/8, x4, x1, x2)

inst_23759:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6b0823 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x45b5b0 and fs3 == 1 and fe3 == 0x72 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeb0823; op2val:0x8045b5b0;
op3val:0xb900003f; valaddr_reg:x3; val_offset:71277*0 + 3*185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71277*0 + 3*185*FLEN/8, x4, x1, x2)

inst_23760:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6b0823 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x45b5b0 and fs3 == 1 and fe3 == 0x72 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeb0823; op2val:0x8045b5b0;
op3val:0xb900007f; valaddr_reg:x3; val_offset:71280*0 + 3*185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71280*0 + 3*185*FLEN/8, x4, x1, x2)

inst_23761:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6b0823 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x45b5b0 and fs3 == 1 and fe3 == 0x72 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeb0823; op2val:0x8045b5b0;
op3val:0xb90000ff; valaddr_reg:x3; val_offset:71283*0 + 3*185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71283*0 + 3*185*FLEN/8, x4, x1, x2)

inst_23762:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6b0823 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x45b5b0 and fs3 == 1 and fe3 == 0x72 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeb0823; op2val:0x8045b5b0;
op3val:0xb90001ff; valaddr_reg:x3; val_offset:71286*0 + 3*185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71286*0 + 3*185*FLEN/8, x4, x1, x2)

inst_23763:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6b0823 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x45b5b0 and fs3 == 1 and fe3 == 0x72 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeb0823; op2val:0x8045b5b0;
op3val:0xb90003ff; valaddr_reg:x3; val_offset:71289*0 + 3*185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71289*0 + 3*185*FLEN/8, x4, x1, x2)

inst_23764:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6b0823 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x45b5b0 and fs3 == 1 and fe3 == 0x72 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeb0823; op2val:0x8045b5b0;
op3val:0xb90007ff; valaddr_reg:x3; val_offset:71292*0 + 3*185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71292*0 + 3*185*FLEN/8, x4, x1, x2)

inst_23765:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6b0823 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x45b5b0 and fs3 == 1 and fe3 == 0x72 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeb0823; op2val:0x8045b5b0;
op3val:0xb9000fff; valaddr_reg:x3; val_offset:71295*0 + 3*185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71295*0 + 3*185*FLEN/8, x4, x1, x2)

inst_23766:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6b0823 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x45b5b0 and fs3 == 1 and fe3 == 0x72 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeb0823; op2val:0x8045b5b0;
op3val:0xb9001fff; valaddr_reg:x3; val_offset:71298*0 + 3*185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71298*0 + 3*185*FLEN/8, x4, x1, x2)

inst_23767:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6b0823 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x45b5b0 and fs3 == 1 and fe3 == 0x72 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeb0823; op2val:0x8045b5b0;
op3val:0xb9003fff; valaddr_reg:x3; val_offset:71301*0 + 3*185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71301*0 + 3*185*FLEN/8, x4, x1, x2)

inst_23768:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6b0823 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x45b5b0 and fs3 == 1 and fe3 == 0x72 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeb0823; op2val:0x8045b5b0;
op3val:0xb9007fff; valaddr_reg:x3; val_offset:71304*0 + 3*185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71304*0 + 3*185*FLEN/8, x4, x1, x2)

inst_23769:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6b0823 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x45b5b0 and fs3 == 1 and fe3 == 0x72 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeb0823; op2val:0x8045b5b0;
op3val:0xb900ffff; valaddr_reg:x3; val_offset:71307*0 + 3*185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71307*0 + 3*185*FLEN/8, x4, x1, x2)

inst_23770:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6b0823 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x45b5b0 and fs3 == 1 and fe3 == 0x72 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeb0823; op2val:0x8045b5b0;
op3val:0xb901ffff; valaddr_reg:x3; val_offset:71310*0 + 3*185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71310*0 + 3*185*FLEN/8, x4, x1, x2)

inst_23771:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6b0823 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x45b5b0 and fs3 == 1 and fe3 == 0x72 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeb0823; op2val:0x8045b5b0;
op3val:0xb903ffff; valaddr_reg:x3; val_offset:71313*0 + 3*185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71313*0 + 3*185*FLEN/8, x4, x1, x2)

inst_23772:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6b0823 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x45b5b0 and fs3 == 1 and fe3 == 0x72 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeb0823; op2val:0x8045b5b0;
op3val:0xb907ffff; valaddr_reg:x3; val_offset:71316*0 + 3*185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71316*0 + 3*185*FLEN/8, x4, x1, x2)

inst_23773:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6b0823 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x45b5b0 and fs3 == 1 and fe3 == 0x72 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeb0823; op2val:0x8045b5b0;
op3val:0xb90fffff; valaddr_reg:x3; val_offset:71319*0 + 3*185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71319*0 + 3*185*FLEN/8, x4, x1, x2)

inst_23774:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6b0823 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x45b5b0 and fs3 == 1 and fe3 == 0x72 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeb0823; op2val:0x8045b5b0;
op3val:0xb91fffff; valaddr_reg:x3; val_offset:71322*0 + 3*185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71322*0 + 3*185*FLEN/8, x4, x1, x2)

inst_23775:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6b0823 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x45b5b0 and fs3 == 1 and fe3 == 0x72 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeb0823; op2val:0x8045b5b0;
op3val:0xb93fffff; valaddr_reg:x3; val_offset:71325*0 + 3*185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71325*0 + 3*185*FLEN/8, x4, x1, x2)

inst_23776:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6b0823 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x45b5b0 and fs3 == 1 and fe3 == 0x72 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeb0823; op2val:0x8045b5b0;
op3val:0xb9400000; valaddr_reg:x3; val_offset:71328*0 + 3*185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71328*0 + 3*185*FLEN/8, x4, x1, x2)

inst_23777:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6b0823 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x45b5b0 and fs3 == 1 and fe3 == 0x72 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeb0823; op2val:0x8045b5b0;
op3val:0xb9600000; valaddr_reg:x3; val_offset:71331*0 + 3*185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71331*0 + 3*185*FLEN/8, x4, x1, x2)

inst_23778:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6b0823 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x45b5b0 and fs3 == 1 and fe3 == 0x72 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeb0823; op2val:0x8045b5b0;
op3val:0xb9700000; valaddr_reg:x3; val_offset:71334*0 + 3*185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71334*0 + 3*185*FLEN/8, x4, x1, x2)

inst_23779:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6b0823 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x45b5b0 and fs3 == 1 and fe3 == 0x72 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeb0823; op2val:0x8045b5b0;
op3val:0xb9780000; valaddr_reg:x3; val_offset:71337*0 + 3*185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71337*0 + 3*185*FLEN/8, x4, x1, x2)

inst_23780:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6b0823 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x45b5b0 and fs3 == 1 and fe3 == 0x72 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeb0823; op2val:0x8045b5b0;
op3val:0xb97c0000; valaddr_reg:x3; val_offset:71340*0 + 3*185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71340*0 + 3*185*FLEN/8, x4, x1, x2)

inst_23781:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6b0823 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x45b5b0 and fs3 == 1 and fe3 == 0x72 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeb0823; op2val:0x8045b5b0;
op3val:0xb97e0000; valaddr_reg:x3; val_offset:71343*0 + 3*185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71343*0 + 3*185*FLEN/8, x4, x1, x2)

inst_23782:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6b0823 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x45b5b0 and fs3 == 1 and fe3 == 0x72 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeb0823; op2val:0x8045b5b0;
op3val:0xb97f0000; valaddr_reg:x3; val_offset:71346*0 + 3*185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71346*0 + 3*185*FLEN/8, x4, x1, x2)

inst_23783:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6b0823 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x45b5b0 and fs3 == 1 and fe3 == 0x72 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeb0823; op2val:0x8045b5b0;
op3val:0xb97f8000; valaddr_reg:x3; val_offset:71349*0 + 3*185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71349*0 + 3*185*FLEN/8, x4, x1, x2)

inst_23784:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6b0823 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x45b5b0 and fs3 == 1 and fe3 == 0x72 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeb0823; op2val:0x8045b5b0;
op3val:0xb97fc000; valaddr_reg:x3; val_offset:71352*0 + 3*185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71352*0 + 3*185*FLEN/8, x4, x1, x2)

inst_23785:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6b0823 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x45b5b0 and fs3 == 1 and fe3 == 0x72 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeb0823; op2val:0x8045b5b0;
op3val:0xb97fe000; valaddr_reg:x3; val_offset:71355*0 + 3*185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71355*0 + 3*185*FLEN/8, x4, x1, x2)

inst_23786:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6b0823 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x45b5b0 and fs3 == 1 and fe3 == 0x72 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeb0823; op2val:0x8045b5b0;
op3val:0xb97ff000; valaddr_reg:x3; val_offset:71358*0 + 3*185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71358*0 + 3*185*FLEN/8, x4, x1, x2)

inst_23787:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6b0823 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x45b5b0 and fs3 == 1 and fe3 == 0x72 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeb0823; op2val:0x8045b5b0;
op3val:0xb97ff800; valaddr_reg:x3; val_offset:71361*0 + 3*185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71361*0 + 3*185*FLEN/8, x4, x1, x2)

inst_23788:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6b0823 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x45b5b0 and fs3 == 1 and fe3 == 0x72 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeb0823; op2val:0x8045b5b0;
op3val:0xb97ffc00; valaddr_reg:x3; val_offset:71364*0 + 3*185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71364*0 + 3*185*FLEN/8, x4, x1, x2)

inst_23789:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6b0823 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x45b5b0 and fs3 == 1 and fe3 == 0x72 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeb0823; op2val:0x8045b5b0;
op3val:0xb97ffe00; valaddr_reg:x3; val_offset:71367*0 + 3*185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71367*0 + 3*185*FLEN/8, x4, x1, x2)

inst_23790:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6b0823 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x45b5b0 and fs3 == 1 and fe3 == 0x72 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeb0823; op2val:0x8045b5b0;
op3val:0xb97fff00; valaddr_reg:x3; val_offset:71370*0 + 3*185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71370*0 + 3*185*FLEN/8, x4, x1, x2)

inst_23791:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6b0823 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x45b5b0 and fs3 == 1 and fe3 == 0x72 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeb0823; op2val:0x8045b5b0;
op3val:0xb97fff80; valaddr_reg:x3; val_offset:71373*0 + 3*185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71373*0 + 3*185*FLEN/8, x4, x1, x2)

inst_23792:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6b0823 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x45b5b0 and fs3 == 1 and fe3 == 0x72 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeb0823; op2val:0x8045b5b0;
op3val:0xb97fffc0; valaddr_reg:x3; val_offset:71376*0 + 3*185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71376*0 + 3*185*FLEN/8, x4, x1, x2)

inst_23793:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6b0823 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x45b5b0 and fs3 == 1 and fe3 == 0x72 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeb0823; op2val:0x8045b5b0;
op3val:0xb97fffe0; valaddr_reg:x3; val_offset:71379*0 + 3*185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71379*0 + 3*185*FLEN/8, x4, x1, x2)

inst_23794:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6b0823 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x45b5b0 and fs3 == 1 and fe3 == 0x72 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeb0823; op2val:0x8045b5b0;
op3val:0xb97ffff0; valaddr_reg:x3; val_offset:71382*0 + 3*185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71382*0 + 3*185*FLEN/8, x4, x1, x2)

inst_23795:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6b0823 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x45b5b0 and fs3 == 1 and fe3 == 0x72 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeb0823; op2val:0x8045b5b0;
op3val:0xb97ffff8; valaddr_reg:x3; val_offset:71385*0 + 3*185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71385*0 + 3*185*FLEN/8, x4, x1, x2)

inst_23796:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6b0823 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x45b5b0 and fs3 == 1 and fe3 == 0x72 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeb0823; op2val:0x8045b5b0;
op3val:0xb97ffffc; valaddr_reg:x3; val_offset:71388*0 + 3*185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71388*0 + 3*185*FLEN/8, x4, x1, x2)

inst_23797:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6b0823 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x45b5b0 and fs3 == 1 and fe3 == 0x72 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeb0823; op2val:0x8045b5b0;
op3val:0xb97ffffe; valaddr_reg:x3; val_offset:71391*0 + 3*185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71391*0 + 3*185*FLEN/8, x4, x1, x2)

inst_23798:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6b0823 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x45b5b0 and fs3 == 1 and fe3 == 0x72 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeb0823; op2val:0x8045b5b0;
op3val:0xb97fffff; valaddr_reg:x3; val_offset:71394*0 + 3*185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71394*0 + 3*185*FLEN/8, x4, x1, x2)

inst_23799:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6b0823 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x45b5b0 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeb0823; op2val:0x8045b5b0;
op3val:0xbf800001; valaddr_reg:x3; val_offset:71397*0 + 3*185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71397*0 + 3*185*FLEN/8, x4, x1, x2)

inst_23800:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6b0823 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x45b5b0 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeb0823; op2val:0x8045b5b0;
op3val:0xbf800003; valaddr_reg:x3; val_offset:71400*0 + 3*185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71400*0 + 3*185*FLEN/8, x4, x1, x2)

inst_23801:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6b0823 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x45b5b0 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeb0823; op2val:0x8045b5b0;
op3val:0xbf800007; valaddr_reg:x3; val_offset:71403*0 + 3*185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71403*0 + 3*185*FLEN/8, x4, x1, x2)

inst_23802:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6b0823 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x45b5b0 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeb0823; op2val:0x8045b5b0;
op3val:0xbf999999; valaddr_reg:x3; val_offset:71406*0 + 3*185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71406*0 + 3*185*FLEN/8, x4, x1, x2)

inst_23803:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6b0823 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x45b5b0 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeb0823; op2val:0x8045b5b0;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:71409*0 + 3*185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71409*0 + 3*185*FLEN/8, x4, x1, x2)

inst_23804:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6b0823 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x45b5b0 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeb0823; op2val:0x8045b5b0;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:71412*0 + 3*185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71412*0 + 3*185*FLEN/8, x4, x1, x2)

inst_23805:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6b0823 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x45b5b0 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeb0823; op2val:0x8045b5b0;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:71415*0 + 3*185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71415*0 + 3*185*FLEN/8, x4, x1, x2)

inst_23806:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6b0823 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x45b5b0 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeb0823; op2val:0x8045b5b0;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:71418*0 + 3*185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71418*0 + 3*185*FLEN/8, x4, x1, x2)

inst_23807:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6b0823 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x45b5b0 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeb0823; op2val:0x8045b5b0;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:71421*0 + 3*185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71421*0 + 3*185*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2129283781,32,FLEN)
NAN_BOXED(2152066567,32,FLEN)
NAN_BOXED(3216192307,32,FLEN)
NAN_BOXED(2129283781,32,FLEN)
NAN_BOXED(2152066567,32,FLEN)
NAN_BOXED(3216431981,32,FLEN)
NAN_BOXED(2129283781,32,FLEN)
NAN_BOXED(2152066567,32,FLEN)
NAN_BOXED(3216751547,32,FLEN)
NAN_BOXED(2129283781,32,FLEN)
NAN_BOXED(2152066567,32,FLEN)
NAN_BOXED(3217310788,32,FLEN)
NAN_BOXED(2129283781,32,FLEN)
NAN_BOXED(2152066567,32,FLEN)
NAN_BOXED(3217870028,32,FLEN)
NAN_BOXED(2129283781,32,FLEN)
NAN_BOXED(2152066567,32,FLEN)
NAN_BOXED(3218828726,32,FLEN)
NAN_BOXED(2129283781,32,FLEN)
NAN_BOXED(2152066567,32,FLEN)
NAN_BOXED(3219547750,32,FLEN)
NAN_BOXED(2129283781,32,FLEN)
NAN_BOXED(2152066567,32,FLEN)
NAN_BOXED(3220027099,32,FLEN)
NAN_BOXED(2129283781,32,FLEN)
NAN_BOXED(2152066567,32,FLEN)
NAN_BOXED(3221225464,32,FLEN)
NAN_BOXED(2129283781,32,FLEN)
NAN_BOXED(2152066567,32,FLEN)
NAN_BOXED(3221225468,32,FLEN)
NAN_BOXED(2129283781,32,FLEN)
NAN_BOXED(2152066567,32,FLEN)
NAN_BOXED(3221225470,32,FLEN)
NAN_BOXED(2129324933,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(2129324933,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388611,32,FLEN)
NAN_BOXED(2129324933,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388615,32,FLEN)
NAN_BOXED(2129324933,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(10066329,32,FLEN)
NAN_BOXED(2129324933,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(10785353,32,FLEN)
NAN_BOXED(2129324933,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(11744051,32,FLEN)
NAN_BOXED(2129324933,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(11983725,32,FLEN)
NAN_BOXED(2129324933,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(12303291,32,FLEN)
NAN_BOXED(2129324933,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(12862532,32,FLEN)
NAN_BOXED(2129324933,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(13421772,32,FLEN)
NAN_BOXED(2129324933,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(14380470,32,FLEN)
NAN_BOXED(2129324933,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(15099494,32,FLEN)
NAN_BOXED(2129324933,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(15578843,32,FLEN)
NAN_BOXED(2129324933,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777208,32,FLEN)
NAN_BOXED(2129324933,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777212,32,FLEN)
NAN_BOXED(2129324933,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777214,32,FLEN)
NAN_BOXED(2129324933,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75497472,32,FLEN)
NAN_BOXED(2129324933,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75497473,32,FLEN)
NAN_BOXED(2129324933,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75497475,32,FLEN)
NAN_BOXED(2129324933,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75497479,32,FLEN)
NAN_BOXED(2129324933,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75497487,32,FLEN)
NAN_BOXED(2129324933,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75497503,32,FLEN)
NAN_BOXED(2129324933,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75497535,32,FLEN)
NAN_BOXED(2129324933,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75497599,32,FLEN)
NAN_BOXED(2129324933,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75497727,32,FLEN)
NAN_BOXED(2129324933,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75497983,32,FLEN)
NAN_BOXED(2129324933,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75498495,32,FLEN)
NAN_BOXED(2129324933,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75499519,32,FLEN)
NAN_BOXED(2129324933,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75501567,32,FLEN)
NAN_BOXED(2129324933,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75505663,32,FLEN)
NAN_BOXED(2129324933,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75513855,32,FLEN)
NAN_BOXED(2129324933,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75530239,32,FLEN)
NAN_BOXED(2129324933,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75563007,32,FLEN)
NAN_BOXED(2129324933,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75628543,32,FLEN)
NAN_BOXED(2129324933,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75759615,32,FLEN)
NAN_BOXED(2129324933,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(76021759,32,FLEN)
NAN_BOXED(2129324933,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(76546047,32,FLEN)
NAN_BOXED(2129324933,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(77594623,32,FLEN)
NAN_BOXED(2129324933,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(79691775,32,FLEN)
NAN_BOXED(2129324933,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(79691776,32,FLEN)
NAN_BOXED(2129324933,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(81788928,32,FLEN)
NAN_BOXED(2129324933,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(82837504,32,FLEN)
NAN_BOXED(2129324933,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83361792,32,FLEN)
NAN_BOXED(2129324933,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83623936,32,FLEN)
NAN_BOXED(2129324933,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83755008,32,FLEN)
NAN_BOXED(2129324933,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83820544,32,FLEN)
NAN_BOXED(2129324933,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83853312,32,FLEN)
NAN_BOXED(2129324933,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83869696,32,FLEN)
NAN_BOXED(2129324933,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83877888,32,FLEN)
NAN_BOXED(2129324933,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83881984,32,FLEN)
NAN_BOXED(2129324933,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83884032,32,FLEN)
NAN_BOXED(2129324933,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83885056,32,FLEN)
NAN_BOXED(2129324933,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83885568,32,FLEN)
NAN_BOXED(2129324933,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83885824,32,FLEN)
NAN_BOXED(2129324933,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83885952,32,FLEN)
NAN_BOXED(2129324933,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83886016,32,FLEN)
NAN_BOXED(2129324933,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83886048,32,FLEN)
NAN_BOXED(2129324933,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83886064,32,FLEN)
NAN_BOXED(2129324933,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83886072,32,FLEN)
NAN_BOXED(2129324933,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83886076,32,FLEN)
NAN_BOXED(2129324933,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83886078,32,FLEN)
NAN_BOXED(2129324933,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83886079,32,FLEN)
NAN_BOXED(2129332259,32,FLEN)
NAN_BOXED(2152052144,32,FLEN)
NAN_BOXED(3103784960,32,FLEN)
NAN_BOXED(2129332259,32,FLEN)
NAN_BOXED(2152052144,32,FLEN)
NAN_BOXED(3103784961,32,FLEN)
NAN_BOXED(2129332259,32,FLEN)
NAN_BOXED(2152052144,32,FLEN)
NAN_BOXED(3103784963,32,FLEN)
NAN_BOXED(2129332259,32,FLEN)
NAN_BOXED(2152052144,32,FLEN)
NAN_BOXED(3103784967,32,FLEN)
NAN_BOXED(2129332259,32,FLEN)
NAN_BOXED(2152052144,32,FLEN)
NAN_BOXED(3103784975,32,FLEN)
NAN_BOXED(2129332259,32,FLEN)
NAN_BOXED(2152052144,32,FLEN)
NAN_BOXED(3103784991,32,FLEN)
NAN_BOXED(2129332259,32,FLEN)
NAN_BOXED(2152052144,32,FLEN)
NAN_BOXED(3103785023,32,FLEN)
NAN_BOXED(2129332259,32,FLEN)
NAN_BOXED(2152052144,32,FLEN)
NAN_BOXED(3103785087,32,FLEN)
NAN_BOXED(2129332259,32,FLEN)
NAN_BOXED(2152052144,32,FLEN)
NAN_BOXED(3103785215,32,FLEN)
NAN_BOXED(2129332259,32,FLEN)
NAN_BOXED(2152052144,32,FLEN)
NAN_BOXED(3103785471,32,FLEN)
NAN_BOXED(2129332259,32,FLEN)
NAN_BOXED(2152052144,32,FLEN)
NAN_BOXED(3103785983,32,FLEN)
NAN_BOXED(2129332259,32,FLEN)
NAN_BOXED(2152052144,32,FLEN)
NAN_BOXED(3103787007,32,FLEN)
NAN_BOXED(2129332259,32,FLEN)
NAN_BOXED(2152052144,32,FLEN)
NAN_BOXED(3103789055,32,FLEN)
NAN_BOXED(2129332259,32,FLEN)
NAN_BOXED(2152052144,32,FLEN)
NAN_BOXED(3103793151,32,FLEN)
NAN_BOXED(2129332259,32,FLEN)
NAN_BOXED(2152052144,32,FLEN)
NAN_BOXED(3103801343,32,FLEN)
NAN_BOXED(2129332259,32,FLEN)
NAN_BOXED(2152052144,32,FLEN)
NAN_BOXED(3103817727,32,FLEN)
NAN_BOXED(2129332259,32,FLEN)
NAN_BOXED(2152052144,32,FLEN)
NAN_BOXED(3103850495,32,FLEN)
NAN_BOXED(2129332259,32,FLEN)
NAN_BOXED(2152052144,32,FLEN)
NAN_BOXED(3103916031,32,FLEN)
NAN_BOXED(2129332259,32,FLEN)
NAN_BOXED(2152052144,32,FLEN)
NAN_BOXED(3104047103,32,FLEN)
NAN_BOXED(2129332259,32,FLEN)
NAN_BOXED(2152052144,32,FLEN)
NAN_BOXED(3104309247,32,FLEN)
NAN_BOXED(2129332259,32,FLEN)
NAN_BOXED(2152052144,32,FLEN)
NAN_BOXED(3104833535,32,FLEN)
NAN_BOXED(2129332259,32,FLEN)
NAN_BOXED(2152052144,32,FLEN)
NAN_BOXED(3105882111,32,FLEN)
NAN_BOXED(2129332259,32,FLEN)
NAN_BOXED(2152052144,32,FLEN)
NAN_BOXED(3107979263,32,FLEN)
NAN_BOXED(2129332259,32,FLEN)
NAN_BOXED(2152052144,32,FLEN)
NAN_BOXED(3107979264,32,FLEN)
NAN_BOXED(2129332259,32,FLEN)
NAN_BOXED(2152052144,32,FLEN)
NAN_BOXED(3110076416,32,FLEN)
NAN_BOXED(2129332259,32,FLEN)
NAN_BOXED(2152052144,32,FLEN)
NAN_BOXED(3111124992,32,FLEN)
NAN_BOXED(2129332259,32,FLEN)
NAN_BOXED(2152052144,32,FLEN)
NAN_BOXED(3111649280,32,FLEN)
NAN_BOXED(2129332259,32,FLEN)
NAN_BOXED(2152052144,32,FLEN)
NAN_BOXED(3111911424,32,FLEN)
NAN_BOXED(2129332259,32,FLEN)
NAN_BOXED(2152052144,32,FLEN)
NAN_BOXED(3112042496,32,FLEN)
NAN_BOXED(2129332259,32,FLEN)
NAN_BOXED(2152052144,32,FLEN)
NAN_BOXED(3112108032,32,FLEN)
NAN_BOXED(2129332259,32,FLEN)
NAN_BOXED(2152052144,32,FLEN)
NAN_BOXED(3112140800,32,FLEN)
NAN_BOXED(2129332259,32,FLEN)
NAN_BOXED(2152052144,32,FLEN)
NAN_BOXED(3112157184,32,FLEN)
NAN_BOXED(2129332259,32,FLEN)
NAN_BOXED(2152052144,32,FLEN)
NAN_BOXED(3112165376,32,FLEN)
NAN_BOXED(2129332259,32,FLEN)
NAN_BOXED(2152052144,32,FLEN)
NAN_BOXED(3112169472,32,FLEN)
NAN_BOXED(2129332259,32,FLEN)
NAN_BOXED(2152052144,32,FLEN)
NAN_BOXED(3112171520,32,FLEN)
NAN_BOXED(2129332259,32,FLEN)
NAN_BOXED(2152052144,32,FLEN)
NAN_BOXED(3112172544,32,FLEN)
NAN_BOXED(2129332259,32,FLEN)
NAN_BOXED(2152052144,32,FLEN)
NAN_BOXED(3112173056,32,FLEN)
NAN_BOXED(2129332259,32,FLEN)
NAN_BOXED(2152052144,32,FLEN)
NAN_BOXED(3112173312,32,FLEN)
NAN_BOXED(2129332259,32,FLEN)
NAN_BOXED(2152052144,32,FLEN)
NAN_BOXED(3112173440,32,FLEN)
NAN_BOXED(2129332259,32,FLEN)
NAN_BOXED(2152052144,32,FLEN)
NAN_BOXED(3112173504,32,FLEN)
NAN_BOXED(2129332259,32,FLEN)
NAN_BOXED(2152052144,32,FLEN)
NAN_BOXED(3112173536,32,FLEN)
NAN_BOXED(2129332259,32,FLEN)
NAN_BOXED(2152052144,32,FLEN)
NAN_BOXED(3112173552,32,FLEN)
NAN_BOXED(2129332259,32,FLEN)
NAN_BOXED(2152052144,32,FLEN)
NAN_BOXED(3112173560,32,FLEN)
NAN_BOXED(2129332259,32,FLEN)
NAN_BOXED(2152052144,32,FLEN)
NAN_BOXED(3112173564,32,FLEN)
NAN_BOXED(2129332259,32,FLEN)
NAN_BOXED(2152052144,32,FLEN)
NAN_BOXED(3112173566,32,FLEN)
NAN_BOXED(2129332259,32,FLEN)
NAN_BOXED(2152052144,32,FLEN)
NAN_BOXED(3112173567,32,FLEN)
NAN_BOXED(2129332259,32,FLEN)
NAN_BOXED(2152052144,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2129332259,32,FLEN)
NAN_BOXED(2152052144,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2129332259,32,FLEN)
NAN_BOXED(2152052144,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
NAN_BOXED(2129332259,32,FLEN)
NAN_BOXED(2152052144,32,FLEN)
NAN_BOXED(3214514585,32,FLEN)
NAN_BOXED(2129332259,32,FLEN)
NAN_BOXED(2152052144,32,FLEN)
NAN_BOXED(3215233609,32,FLEN)
NAN_BOXED(2129332259,32,FLEN)
NAN_BOXED(2152052144,32,FLEN)
NAN_BOXED(3216192307,32,FLEN)
NAN_BOXED(2129332259,32,FLEN)
NAN_BOXED(2152052144,32,FLEN)
NAN_BOXED(3216431981,32,FLEN)
NAN_BOXED(2129332259,32,FLEN)
NAN_BOXED(2152052144,32,FLEN)
NAN_BOXED(3216751547,32,FLEN)
NAN_BOXED(2129332259,32,FLEN)
NAN_BOXED(2152052144,32,FLEN)
NAN_BOXED(3217310788,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
