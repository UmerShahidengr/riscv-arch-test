
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:17:59 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_23936:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6d982c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x09ea6a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eed982c; op2val:0xc009ea6a;
op3val:0xff7ffff8; valaddr_reg:x3; val_offset:71808*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71808*0 + 3*187*FLEN/8, x4, x1, x2)

inst_23937:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6d982c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x09ea6a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eed982c; op2val:0xc009ea6a;
op3val:0xff7ffffc; valaddr_reg:x3; val_offset:71811*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71811*0 + 3*187*FLEN/8, x4, x1, x2)

inst_23938:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6d982c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x09ea6a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eed982c; op2val:0xc009ea6a;
op3val:0xff7ffffe; valaddr_reg:x3; val_offset:71814*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71814*0 + 3*187*FLEN/8, x4, x1, x2)

inst_23939:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6e4f75 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x44c02c and fs3 == 0 and fe3 == 0x79 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eee4f75; op2val:0x44c02c;
op3val:0x3c800000; valaddr_reg:x3; val_offset:71817*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71817*0 + 3*187*FLEN/8, x4, x1, x2)

inst_23940:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6e4f75 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x44c02c and fs3 == 0 and fe3 == 0x79 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eee4f75; op2val:0x44c02c;
op3val:0x3c800001; valaddr_reg:x3; val_offset:71820*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71820*0 + 3*187*FLEN/8, x4, x1, x2)

inst_23941:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6e4f75 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x44c02c and fs3 == 0 and fe3 == 0x79 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eee4f75; op2val:0x44c02c;
op3val:0x3c800003; valaddr_reg:x3; val_offset:71823*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71823*0 + 3*187*FLEN/8, x4, x1, x2)

inst_23942:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6e4f75 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x44c02c and fs3 == 0 and fe3 == 0x79 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eee4f75; op2val:0x44c02c;
op3val:0x3c800007; valaddr_reg:x3; val_offset:71826*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71826*0 + 3*187*FLEN/8, x4, x1, x2)

inst_23943:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6e4f75 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x44c02c and fs3 == 0 and fe3 == 0x79 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eee4f75; op2val:0x44c02c;
op3val:0x3c80000f; valaddr_reg:x3; val_offset:71829*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71829*0 + 3*187*FLEN/8, x4, x1, x2)

inst_23944:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6e4f75 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x44c02c and fs3 == 0 and fe3 == 0x79 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eee4f75; op2val:0x44c02c;
op3val:0x3c80001f; valaddr_reg:x3; val_offset:71832*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71832*0 + 3*187*FLEN/8, x4, x1, x2)

inst_23945:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6e4f75 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x44c02c and fs3 == 0 and fe3 == 0x79 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eee4f75; op2val:0x44c02c;
op3val:0x3c80003f; valaddr_reg:x3; val_offset:71835*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71835*0 + 3*187*FLEN/8, x4, x1, x2)

inst_23946:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6e4f75 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x44c02c and fs3 == 0 and fe3 == 0x79 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eee4f75; op2val:0x44c02c;
op3val:0x3c80007f; valaddr_reg:x3; val_offset:71838*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71838*0 + 3*187*FLEN/8, x4, x1, x2)

inst_23947:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6e4f75 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x44c02c and fs3 == 0 and fe3 == 0x79 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eee4f75; op2val:0x44c02c;
op3val:0x3c8000ff; valaddr_reg:x3; val_offset:71841*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71841*0 + 3*187*FLEN/8, x4, x1, x2)

inst_23948:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6e4f75 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x44c02c and fs3 == 0 and fe3 == 0x79 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eee4f75; op2val:0x44c02c;
op3val:0x3c8001ff; valaddr_reg:x3; val_offset:71844*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71844*0 + 3*187*FLEN/8, x4, x1, x2)

inst_23949:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6e4f75 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x44c02c and fs3 == 0 and fe3 == 0x79 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eee4f75; op2val:0x44c02c;
op3val:0x3c8003ff; valaddr_reg:x3; val_offset:71847*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71847*0 + 3*187*FLEN/8, x4, x1, x2)

inst_23950:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6e4f75 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x44c02c and fs3 == 0 and fe3 == 0x79 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eee4f75; op2val:0x44c02c;
op3val:0x3c8007ff; valaddr_reg:x3; val_offset:71850*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71850*0 + 3*187*FLEN/8, x4, x1, x2)

inst_23951:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6e4f75 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x44c02c and fs3 == 0 and fe3 == 0x79 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eee4f75; op2val:0x44c02c;
op3val:0x3c800fff; valaddr_reg:x3; val_offset:71853*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71853*0 + 3*187*FLEN/8, x4, x1, x2)

inst_23952:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6e4f75 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x44c02c and fs3 == 0 and fe3 == 0x79 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eee4f75; op2val:0x44c02c;
op3val:0x3c801fff; valaddr_reg:x3; val_offset:71856*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71856*0 + 3*187*FLEN/8, x4, x1, x2)

inst_23953:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6e4f75 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x44c02c and fs3 == 0 and fe3 == 0x79 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eee4f75; op2val:0x44c02c;
op3val:0x3c803fff; valaddr_reg:x3; val_offset:71859*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71859*0 + 3*187*FLEN/8, x4, x1, x2)

inst_23954:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6e4f75 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x44c02c and fs3 == 0 and fe3 == 0x79 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eee4f75; op2val:0x44c02c;
op3val:0x3c807fff; valaddr_reg:x3; val_offset:71862*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71862*0 + 3*187*FLEN/8, x4, x1, x2)

inst_23955:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6e4f75 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x44c02c and fs3 == 0 and fe3 == 0x79 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eee4f75; op2val:0x44c02c;
op3val:0x3c80ffff; valaddr_reg:x3; val_offset:71865*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71865*0 + 3*187*FLEN/8, x4, x1, x2)

inst_23956:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6e4f75 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x44c02c and fs3 == 0 and fe3 == 0x79 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eee4f75; op2val:0x44c02c;
op3val:0x3c81ffff; valaddr_reg:x3; val_offset:71868*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71868*0 + 3*187*FLEN/8, x4, x1, x2)

inst_23957:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6e4f75 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x44c02c and fs3 == 0 and fe3 == 0x79 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eee4f75; op2val:0x44c02c;
op3val:0x3c83ffff; valaddr_reg:x3; val_offset:71871*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71871*0 + 3*187*FLEN/8, x4, x1, x2)

inst_23958:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6e4f75 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x44c02c and fs3 == 0 and fe3 == 0x79 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eee4f75; op2val:0x44c02c;
op3val:0x3c87ffff; valaddr_reg:x3; val_offset:71874*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71874*0 + 3*187*FLEN/8, x4, x1, x2)

inst_23959:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6e4f75 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x44c02c and fs3 == 0 and fe3 == 0x79 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eee4f75; op2val:0x44c02c;
op3val:0x3c8fffff; valaddr_reg:x3; val_offset:71877*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71877*0 + 3*187*FLEN/8, x4, x1, x2)

inst_23960:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6e4f75 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x44c02c and fs3 == 0 and fe3 == 0x79 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eee4f75; op2val:0x44c02c;
op3val:0x3c9fffff; valaddr_reg:x3; val_offset:71880*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71880*0 + 3*187*FLEN/8, x4, x1, x2)

inst_23961:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6e4f75 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x44c02c and fs3 == 0 and fe3 == 0x79 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eee4f75; op2val:0x44c02c;
op3val:0x3cbfffff; valaddr_reg:x3; val_offset:71883*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71883*0 + 3*187*FLEN/8, x4, x1, x2)

inst_23962:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6e4f75 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x44c02c and fs3 == 0 and fe3 == 0x79 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eee4f75; op2val:0x44c02c;
op3val:0x3cc00000; valaddr_reg:x3; val_offset:71886*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71886*0 + 3*187*FLEN/8, x4, x1, x2)

inst_23963:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6e4f75 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x44c02c and fs3 == 0 and fe3 == 0x79 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eee4f75; op2val:0x44c02c;
op3val:0x3ce00000; valaddr_reg:x3; val_offset:71889*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71889*0 + 3*187*FLEN/8, x4, x1, x2)

inst_23964:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6e4f75 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x44c02c and fs3 == 0 and fe3 == 0x79 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eee4f75; op2val:0x44c02c;
op3val:0x3cf00000; valaddr_reg:x3; val_offset:71892*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71892*0 + 3*187*FLEN/8, x4, x1, x2)

inst_23965:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6e4f75 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x44c02c and fs3 == 0 and fe3 == 0x79 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eee4f75; op2val:0x44c02c;
op3val:0x3cf80000; valaddr_reg:x3; val_offset:71895*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71895*0 + 3*187*FLEN/8, x4, x1, x2)

inst_23966:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6e4f75 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x44c02c and fs3 == 0 and fe3 == 0x79 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eee4f75; op2val:0x44c02c;
op3val:0x3cfc0000; valaddr_reg:x3; val_offset:71898*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71898*0 + 3*187*FLEN/8, x4, x1, x2)

inst_23967:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6e4f75 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x44c02c and fs3 == 0 and fe3 == 0x79 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eee4f75; op2val:0x44c02c;
op3val:0x3cfe0000; valaddr_reg:x3; val_offset:71901*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71901*0 + 3*187*FLEN/8, x4, x1, x2)

inst_23968:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6e4f75 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x44c02c and fs3 == 0 and fe3 == 0x79 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eee4f75; op2val:0x44c02c;
op3val:0x3cff0000; valaddr_reg:x3; val_offset:71904*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71904*0 + 3*187*FLEN/8, x4, x1, x2)

inst_23969:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6e4f75 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x44c02c and fs3 == 0 and fe3 == 0x79 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eee4f75; op2val:0x44c02c;
op3val:0x3cff8000; valaddr_reg:x3; val_offset:71907*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71907*0 + 3*187*FLEN/8, x4, x1, x2)

inst_23970:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6e4f75 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x44c02c and fs3 == 0 and fe3 == 0x79 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eee4f75; op2val:0x44c02c;
op3val:0x3cffc000; valaddr_reg:x3; val_offset:71910*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71910*0 + 3*187*FLEN/8, x4, x1, x2)

inst_23971:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6e4f75 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x44c02c and fs3 == 0 and fe3 == 0x79 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eee4f75; op2val:0x44c02c;
op3val:0x3cffe000; valaddr_reg:x3; val_offset:71913*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71913*0 + 3*187*FLEN/8, x4, x1, x2)

inst_23972:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6e4f75 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x44c02c and fs3 == 0 and fe3 == 0x79 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eee4f75; op2val:0x44c02c;
op3val:0x3cfff000; valaddr_reg:x3; val_offset:71916*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71916*0 + 3*187*FLEN/8, x4, x1, x2)

inst_23973:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6e4f75 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x44c02c and fs3 == 0 and fe3 == 0x79 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eee4f75; op2val:0x44c02c;
op3val:0x3cfff800; valaddr_reg:x3; val_offset:71919*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71919*0 + 3*187*FLEN/8, x4, x1, x2)

inst_23974:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6e4f75 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x44c02c and fs3 == 0 and fe3 == 0x79 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eee4f75; op2val:0x44c02c;
op3val:0x3cfffc00; valaddr_reg:x3; val_offset:71922*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71922*0 + 3*187*FLEN/8, x4, x1, x2)

inst_23975:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6e4f75 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x44c02c and fs3 == 0 and fe3 == 0x79 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eee4f75; op2val:0x44c02c;
op3val:0x3cfffe00; valaddr_reg:x3; val_offset:71925*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71925*0 + 3*187*FLEN/8, x4, x1, x2)

inst_23976:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6e4f75 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x44c02c and fs3 == 0 and fe3 == 0x79 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eee4f75; op2val:0x44c02c;
op3val:0x3cffff00; valaddr_reg:x3; val_offset:71928*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71928*0 + 3*187*FLEN/8, x4, x1, x2)

inst_23977:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6e4f75 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x44c02c and fs3 == 0 and fe3 == 0x79 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eee4f75; op2val:0x44c02c;
op3val:0x3cffff80; valaddr_reg:x3; val_offset:71931*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71931*0 + 3*187*FLEN/8, x4, x1, x2)

inst_23978:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6e4f75 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x44c02c and fs3 == 0 and fe3 == 0x79 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eee4f75; op2val:0x44c02c;
op3val:0x3cffffc0; valaddr_reg:x3; val_offset:71934*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71934*0 + 3*187*FLEN/8, x4, x1, x2)

inst_23979:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6e4f75 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x44c02c and fs3 == 0 and fe3 == 0x79 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eee4f75; op2val:0x44c02c;
op3val:0x3cffffe0; valaddr_reg:x3; val_offset:71937*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71937*0 + 3*187*FLEN/8, x4, x1, x2)

inst_23980:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6e4f75 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x44c02c and fs3 == 0 and fe3 == 0x79 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eee4f75; op2val:0x44c02c;
op3val:0x3cfffff0; valaddr_reg:x3; val_offset:71940*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71940*0 + 3*187*FLEN/8, x4, x1, x2)

inst_23981:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6e4f75 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x44c02c and fs3 == 0 and fe3 == 0x79 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eee4f75; op2val:0x44c02c;
op3val:0x3cfffff8; valaddr_reg:x3; val_offset:71943*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71943*0 + 3*187*FLEN/8, x4, x1, x2)

inst_23982:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6e4f75 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x44c02c and fs3 == 0 and fe3 == 0x79 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eee4f75; op2val:0x44c02c;
op3val:0x3cfffffc; valaddr_reg:x3; val_offset:71946*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71946*0 + 3*187*FLEN/8, x4, x1, x2)

inst_23983:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6e4f75 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x44c02c and fs3 == 0 and fe3 == 0x79 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eee4f75; op2val:0x44c02c;
op3val:0x3cfffffe; valaddr_reg:x3; val_offset:71949*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71949*0 + 3*187*FLEN/8, x4, x1, x2)

inst_23984:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6e4f75 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x44c02c and fs3 == 0 and fe3 == 0x79 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eee4f75; op2val:0x44c02c;
op3val:0x3cffffff; valaddr_reg:x3; val_offset:71952*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71952*0 + 3*187*FLEN/8, x4, x1, x2)

inst_23985:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6e4f75 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x44c02c and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eee4f75; op2val:0x44c02c;
op3val:0x3f800001; valaddr_reg:x3; val_offset:71955*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71955*0 + 3*187*FLEN/8, x4, x1, x2)

inst_23986:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6e4f75 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x44c02c and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eee4f75; op2val:0x44c02c;
op3val:0x3f800003; valaddr_reg:x3; val_offset:71958*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71958*0 + 3*187*FLEN/8, x4, x1, x2)

inst_23987:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6e4f75 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x44c02c and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eee4f75; op2val:0x44c02c;
op3val:0x3f800007; valaddr_reg:x3; val_offset:71961*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71961*0 + 3*187*FLEN/8, x4, x1, x2)

inst_23988:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6e4f75 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x44c02c and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eee4f75; op2val:0x44c02c;
op3val:0x3f999999; valaddr_reg:x3; val_offset:71964*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71964*0 + 3*187*FLEN/8, x4, x1, x2)

inst_23989:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6e4f75 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x44c02c and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eee4f75; op2val:0x44c02c;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:71967*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71967*0 + 3*187*FLEN/8, x4, x1, x2)

inst_23990:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6e4f75 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x44c02c and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eee4f75; op2val:0x44c02c;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:71970*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71970*0 + 3*187*FLEN/8, x4, x1, x2)

inst_23991:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6e4f75 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x44c02c and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eee4f75; op2val:0x44c02c;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:71973*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71973*0 + 3*187*FLEN/8, x4, x1, x2)

inst_23992:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6e4f75 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x44c02c and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eee4f75; op2val:0x44c02c;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:71976*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71976*0 + 3*187*FLEN/8, x4, x1, x2)

inst_23993:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6e4f75 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x44c02c and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eee4f75; op2val:0x44c02c;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:71979*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71979*0 + 3*187*FLEN/8, x4, x1, x2)

inst_23994:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6e4f75 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x44c02c and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eee4f75; op2val:0x44c02c;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:71982*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71982*0 + 3*187*FLEN/8, x4, x1, x2)

inst_23995:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6e4f75 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x44c02c and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eee4f75; op2val:0x44c02c;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:71985*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71985*0 + 3*187*FLEN/8, x4, x1, x2)

inst_23996:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6e4f75 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x44c02c and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eee4f75; op2val:0x44c02c;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:71988*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71988*0 + 3*187*FLEN/8, x4, x1, x2)

inst_23997:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6e4f75 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x44c02c and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eee4f75; op2val:0x44c02c;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:71991*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71991*0 + 3*187*FLEN/8, x4, x1, x2)

inst_23998:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6e4f75 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x44c02c and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eee4f75; op2val:0x44c02c;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:71994*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71994*0 + 3*187*FLEN/8, x4, x1, x2)

inst_23999:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6e4f75 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x44c02c and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eee4f75; op2val:0x44c02c;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:71997*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71997*0 + 3*187*FLEN/8, x4, x1, x2)

inst_24000:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6e4f75 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x44c02c and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eee4f75; op2val:0x44c02c;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:72000*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72000*0 + 3*187*FLEN/8, x4, x1, x2)

inst_24001:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6edcc4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeedcc4; op2val:0x0;
op3val:0x800001; valaddr_reg:x3; val_offset:72003*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72003*0 + 3*187*FLEN/8, x4, x1, x2)

inst_24002:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6edcc4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeedcc4; op2val:0x0;
op3val:0x800003; valaddr_reg:x3; val_offset:72006*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72006*0 + 3*187*FLEN/8, x4, x1, x2)

inst_24003:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6edcc4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeedcc4; op2val:0x0;
op3val:0x800007; valaddr_reg:x3; val_offset:72009*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72009*0 + 3*187*FLEN/8, x4, x1, x2)

inst_24004:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6edcc4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeedcc4; op2val:0x0;
op3val:0x999999; valaddr_reg:x3; val_offset:72012*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72012*0 + 3*187*FLEN/8, x4, x1, x2)

inst_24005:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6edcc4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeedcc4; op2val:0x0;
op3val:0xa49249; valaddr_reg:x3; val_offset:72015*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72015*0 + 3*187*FLEN/8, x4, x1, x2)

inst_24006:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6edcc4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeedcc4; op2val:0x0;
op3val:0xb33333; valaddr_reg:x3; val_offset:72018*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72018*0 + 3*187*FLEN/8, x4, x1, x2)

inst_24007:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6edcc4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeedcc4; op2val:0x0;
op3val:0xb6db6d; valaddr_reg:x3; val_offset:72021*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72021*0 + 3*187*FLEN/8, x4, x1, x2)

inst_24008:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6edcc4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeedcc4; op2val:0x0;
op3val:0xbbbbbb; valaddr_reg:x3; val_offset:72024*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72024*0 + 3*187*FLEN/8, x4, x1, x2)

inst_24009:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6edcc4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeedcc4; op2val:0x0;
op3val:0xc44444; valaddr_reg:x3; val_offset:72027*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72027*0 + 3*187*FLEN/8, x4, x1, x2)

inst_24010:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6edcc4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeedcc4; op2val:0x0;
op3val:0xcccccc; valaddr_reg:x3; val_offset:72030*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72030*0 + 3*187*FLEN/8, x4, x1, x2)

inst_24011:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6edcc4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeedcc4; op2val:0x0;
op3val:0xdb6db6; valaddr_reg:x3; val_offset:72033*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72033*0 + 3*187*FLEN/8, x4, x1, x2)

inst_24012:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6edcc4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeedcc4; op2val:0x0;
op3val:0xe66666; valaddr_reg:x3; val_offset:72036*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72036*0 + 3*187*FLEN/8, x4, x1, x2)

inst_24013:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6edcc4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeedcc4; op2val:0x0;
op3val:0xedb6db; valaddr_reg:x3; val_offset:72039*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72039*0 + 3*187*FLEN/8, x4, x1, x2)

inst_24014:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6edcc4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeedcc4; op2val:0x0;
op3val:0xfffff8; valaddr_reg:x3; val_offset:72042*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72042*0 + 3*187*FLEN/8, x4, x1, x2)

inst_24015:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6edcc4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeedcc4; op2val:0x0;
op3val:0xfffffc; valaddr_reg:x3; val_offset:72045*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72045*0 + 3*187*FLEN/8, x4, x1, x2)

inst_24016:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6edcc4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeedcc4; op2val:0x0;
op3val:0xfffffe; valaddr_reg:x3; val_offset:72048*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72048*0 + 3*187*FLEN/8, x4, x1, x2)

inst_24017:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6edcc4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeedcc4; op2val:0x0;
op3val:0xf000000; valaddr_reg:x3; val_offset:72051*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72051*0 + 3*187*FLEN/8, x4, x1, x2)

inst_24018:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6edcc4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeedcc4; op2val:0x0;
op3val:0xf000001; valaddr_reg:x3; val_offset:72054*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72054*0 + 3*187*FLEN/8, x4, x1, x2)

inst_24019:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6edcc4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeedcc4; op2val:0x0;
op3val:0xf000003; valaddr_reg:x3; val_offset:72057*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72057*0 + 3*187*FLEN/8, x4, x1, x2)

inst_24020:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6edcc4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeedcc4; op2val:0x0;
op3val:0xf000007; valaddr_reg:x3; val_offset:72060*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72060*0 + 3*187*FLEN/8, x4, x1, x2)

inst_24021:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6edcc4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeedcc4; op2val:0x0;
op3val:0xf00000f; valaddr_reg:x3; val_offset:72063*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72063*0 + 3*187*FLEN/8, x4, x1, x2)

inst_24022:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6edcc4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeedcc4; op2val:0x0;
op3val:0xf00001f; valaddr_reg:x3; val_offset:72066*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72066*0 + 3*187*FLEN/8, x4, x1, x2)

inst_24023:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6edcc4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeedcc4; op2val:0x0;
op3val:0xf00003f; valaddr_reg:x3; val_offset:72069*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72069*0 + 3*187*FLEN/8, x4, x1, x2)

inst_24024:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6edcc4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeedcc4; op2val:0x0;
op3val:0xf00007f; valaddr_reg:x3; val_offset:72072*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72072*0 + 3*187*FLEN/8, x4, x1, x2)

inst_24025:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6edcc4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeedcc4; op2val:0x0;
op3val:0xf0000ff; valaddr_reg:x3; val_offset:72075*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72075*0 + 3*187*FLEN/8, x4, x1, x2)

inst_24026:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6edcc4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeedcc4; op2val:0x0;
op3val:0xf0001ff; valaddr_reg:x3; val_offset:72078*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72078*0 + 3*187*FLEN/8, x4, x1, x2)

inst_24027:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6edcc4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeedcc4; op2val:0x0;
op3val:0xf0003ff; valaddr_reg:x3; val_offset:72081*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72081*0 + 3*187*FLEN/8, x4, x1, x2)

inst_24028:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6edcc4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeedcc4; op2val:0x0;
op3val:0xf0007ff; valaddr_reg:x3; val_offset:72084*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72084*0 + 3*187*FLEN/8, x4, x1, x2)

inst_24029:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6edcc4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeedcc4; op2val:0x0;
op3val:0xf000fff; valaddr_reg:x3; val_offset:72087*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72087*0 + 3*187*FLEN/8, x4, x1, x2)

inst_24030:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6edcc4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeedcc4; op2val:0x0;
op3val:0xf001fff; valaddr_reg:x3; val_offset:72090*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72090*0 + 3*187*FLEN/8, x4, x1, x2)

inst_24031:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6edcc4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeedcc4; op2val:0x0;
op3val:0xf003fff; valaddr_reg:x3; val_offset:72093*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72093*0 + 3*187*FLEN/8, x4, x1, x2)

inst_24032:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6edcc4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeedcc4; op2val:0x0;
op3val:0xf007fff; valaddr_reg:x3; val_offset:72096*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72096*0 + 3*187*FLEN/8, x4, x1, x2)

inst_24033:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6edcc4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeedcc4; op2val:0x0;
op3val:0xf00ffff; valaddr_reg:x3; val_offset:72099*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72099*0 + 3*187*FLEN/8, x4, x1, x2)

inst_24034:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6edcc4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeedcc4; op2val:0x0;
op3val:0xf01ffff; valaddr_reg:x3; val_offset:72102*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72102*0 + 3*187*FLEN/8, x4, x1, x2)

inst_24035:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6edcc4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeedcc4; op2val:0x0;
op3val:0xf03ffff; valaddr_reg:x3; val_offset:72105*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72105*0 + 3*187*FLEN/8, x4, x1, x2)

inst_24036:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6edcc4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeedcc4; op2val:0x0;
op3val:0xf07ffff; valaddr_reg:x3; val_offset:72108*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72108*0 + 3*187*FLEN/8, x4, x1, x2)

inst_24037:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6edcc4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeedcc4; op2val:0x0;
op3val:0xf0fffff; valaddr_reg:x3; val_offset:72111*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72111*0 + 3*187*FLEN/8, x4, x1, x2)

inst_24038:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6edcc4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeedcc4; op2val:0x0;
op3val:0xf1fffff; valaddr_reg:x3; val_offset:72114*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72114*0 + 3*187*FLEN/8, x4, x1, x2)

inst_24039:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6edcc4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeedcc4; op2val:0x0;
op3val:0xf3fffff; valaddr_reg:x3; val_offset:72117*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72117*0 + 3*187*FLEN/8, x4, x1, x2)

inst_24040:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6edcc4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeedcc4; op2val:0x0;
op3val:0xf400000; valaddr_reg:x3; val_offset:72120*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72120*0 + 3*187*FLEN/8, x4, x1, x2)

inst_24041:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6edcc4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeedcc4; op2val:0x0;
op3val:0xf600000; valaddr_reg:x3; val_offset:72123*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72123*0 + 3*187*FLEN/8, x4, x1, x2)

inst_24042:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6edcc4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeedcc4; op2val:0x0;
op3val:0xf700000; valaddr_reg:x3; val_offset:72126*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72126*0 + 3*187*FLEN/8, x4, x1, x2)

inst_24043:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6edcc4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeedcc4; op2val:0x0;
op3val:0xf780000; valaddr_reg:x3; val_offset:72129*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72129*0 + 3*187*FLEN/8, x4, x1, x2)

inst_24044:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6edcc4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeedcc4; op2val:0x0;
op3val:0xf7c0000; valaddr_reg:x3; val_offset:72132*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72132*0 + 3*187*FLEN/8, x4, x1, x2)

inst_24045:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6edcc4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeedcc4; op2val:0x0;
op3val:0xf7e0000; valaddr_reg:x3; val_offset:72135*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72135*0 + 3*187*FLEN/8, x4, x1, x2)

inst_24046:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6edcc4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeedcc4; op2val:0x0;
op3val:0xf7f0000; valaddr_reg:x3; val_offset:72138*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72138*0 + 3*187*FLEN/8, x4, x1, x2)

inst_24047:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6edcc4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeedcc4; op2val:0x0;
op3val:0xf7f8000; valaddr_reg:x3; val_offset:72141*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72141*0 + 3*187*FLEN/8, x4, x1, x2)

inst_24048:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6edcc4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeedcc4; op2val:0x0;
op3val:0xf7fc000; valaddr_reg:x3; val_offset:72144*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72144*0 + 3*187*FLEN/8, x4, x1, x2)

inst_24049:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6edcc4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeedcc4; op2val:0x0;
op3val:0xf7fe000; valaddr_reg:x3; val_offset:72147*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72147*0 + 3*187*FLEN/8, x4, x1, x2)

inst_24050:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6edcc4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeedcc4; op2val:0x0;
op3val:0xf7ff000; valaddr_reg:x3; val_offset:72150*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72150*0 + 3*187*FLEN/8, x4, x1, x2)

inst_24051:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6edcc4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeedcc4; op2val:0x0;
op3val:0xf7ff800; valaddr_reg:x3; val_offset:72153*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72153*0 + 3*187*FLEN/8, x4, x1, x2)

inst_24052:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6edcc4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeedcc4; op2val:0x0;
op3val:0xf7ffc00; valaddr_reg:x3; val_offset:72156*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72156*0 + 3*187*FLEN/8, x4, x1, x2)

inst_24053:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6edcc4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeedcc4; op2val:0x0;
op3val:0xf7ffe00; valaddr_reg:x3; val_offset:72159*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72159*0 + 3*187*FLEN/8, x4, x1, x2)

inst_24054:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6edcc4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeedcc4; op2val:0x0;
op3val:0xf7fff00; valaddr_reg:x3; val_offset:72162*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72162*0 + 3*187*FLEN/8, x4, x1, x2)

inst_24055:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6edcc4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeedcc4; op2val:0x0;
op3val:0xf7fff80; valaddr_reg:x3; val_offset:72165*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72165*0 + 3*187*FLEN/8, x4, x1, x2)

inst_24056:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6edcc4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeedcc4; op2val:0x0;
op3val:0xf7fffc0; valaddr_reg:x3; val_offset:72168*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72168*0 + 3*187*FLEN/8, x4, x1, x2)

inst_24057:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6edcc4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeedcc4; op2val:0x0;
op3val:0xf7fffe0; valaddr_reg:x3; val_offset:72171*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72171*0 + 3*187*FLEN/8, x4, x1, x2)

inst_24058:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6edcc4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeedcc4; op2val:0x0;
op3val:0xf7ffff0; valaddr_reg:x3; val_offset:72174*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72174*0 + 3*187*FLEN/8, x4, x1, x2)

inst_24059:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6edcc4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeedcc4; op2val:0x0;
op3val:0xf7ffff8; valaddr_reg:x3; val_offset:72177*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72177*0 + 3*187*FLEN/8, x4, x1, x2)

inst_24060:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6edcc4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeedcc4; op2val:0x0;
op3val:0xf7ffffc; valaddr_reg:x3; val_offset:72180*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72180*0 + 3*187*FLEN/8, x4, x1, x2)

inst_24061:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6edcc4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeedcc4; op2val:0x0;
op3val:0xf7ffffe; valaddr_reg:x3; val_offset:72183*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72183*0 + 3*187*FLEN/8, x4, x1, x2)

inst_24062:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6edcc4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeedcc4; op2val:0x0;
op3val:0xf7fffff; valaddr_reg:x3; val_offset:72186*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72186*0 + 3*187*FLEN/8, x4, x1, x2)

inst_24063:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6f6431 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eef6431; op2val:0x80000000;
op3val:0x80000001; valaddr_reg:x3; val_offset:72189*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72189*0 + 3*187*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2129500204,32,FLEN)
NAN_BOXED(3221875306,32,FLEN)
NAN_BOXED(4286578680,32,FLEN)
NAN_BOXED(2129500204,32,FLEN)
NAN_BOXED(3221875306,32,FLEN)
NAN_BOXED(4286578684,32,FLEN)
NAN_BOXED(2129500204,32,FLEN)
NAN_BOXED(3221875306,32,FLEN)
NAN_BOXED(4286578686,32,FLEN)
NAN_BOXED(2129547125,32,FLEN)
NAN_BOXED(4505644,32,FLEN)
NAN_BOXED(1015021568,32,FLEN)
NAN_BOXED(2129547125,32,FLEN)
NAN_BOXED(4505644,32,FLEN)
NAN_BOXED(1015021569,32,FLEN)
NAN_BOXED(2129547125,32,FLEN)
NAN_BOXED(4505644,32,FLEN)
NAN_BOXED(1015021571,32,FLEN)
NAN_BOXED(2129547125,32,FLEN)
NAN_BOXED(4505644,32,FLEN)
NAN_BOXED(1015021575,32,FLEN)
NAN_BOXED(2129547125,32,FLEN)
NAN_BOXED(4505644,32,FLEN)
NAN_BOXED(1015021583,32,FLEN)
NAN_BOXED(2129547125,32,FLEN)
NAN_BOXED(4505644,32,FLEN)
NAN_BOXED(1015021599,32,FLEN)
NAN_BOXED(2129547125,32,FLEN)
NAN_BOXED(4505644,32,FLEN)
NAN_BOXED(1015021631,32,FLEN)
NAN_BOXED(2129547125,32,FLEN)
NAN_BOXED(4505644,32,FLEN)
NAN_BOXED(1015021695,32,FLEN)
NAN_BOXED(2129547125,32,FLEN)
NAN_BOXED(4505644,32,FLEN)
NAN_BOXED(1015021823,32,FLEN)
NAN_BOXED(2129547125,32,FLEN)
NAN_BOXED(4505644,32,FLEN)
NAN_BOXED(1015022079,32,FLEN)
NAN_BOXED(2129547125,32,FLEN)
NAN_BOXED(4505644,32,FLEN)
NAN_BOXED(1015022591,32,FLEN)
NAN_BOXED(2129547125,32,FLEN)
NAN_BOXED(4505644,32,FLEN)
NAN_BOXED(1015023615,32,FLEN)
NAN_BOXED(2129547125,32,FLEN)
NAN_BOXED(4505644,32,FLEN)
NAN_BOXED(1015025663,32,FLEN)
NAN_BOXED(2129547125,32,FLEN)
NAN_BOXED(4505644,32,FLEN)
NAN_BOXED(1015029759,32,FLEN)
NAN_BOXED(2129547125,32,FLEN)
NAN_BOXED(4505644,32,FLEN)
NAN_BOXED(1015037951,32,FLEN)
NAN_BOXED(2129547125,32,FLEN)
NAN_BOXED(4505644,32,FLEN)
NAN_BOXED(1015054335,32,FLEN)
NAN_BOXED(2129547125,32,FLEN)
NAN_BOXED(4505644,32,FLEN)
NAN_BOXED(1015087103,32,FLEN)
NAN_BOXED(2129547125,32,FLEN)
NAN_BOXED(4505644,32,FLEN)
NAN_BOXED(1015152639,32,FLEN)
NAN_BOXED(2129547125,32,FLEN)
NAN_BOXED(4505644,32,FLEN)
NAN_BOXED(1015283711,32,FLEN)
NAN_BOXED(2129547125,32,FLEN)
NAN_BOXED(4505644,32,FLEN)
NAN_BOXED(1015545855,32,FLEN)
NAN_BOXED(2129547125,32,FLEN)
NAN_BOXED(4505644,32,FLEN)
NAN_BOXED(1016070143,32,FLEN)
NAN_BOXED(2129547125,32,FLEN)
NAN_BOXED(4505644,32,FLEN)
NAN_BOXED(1017118719,32,FLEN)
NAN_BOXED(2129547125,32,FLEN)
NAN_BOXED(4505644,32,FLEN)
NAN_BOXED(1019215871,32,FLEN)
NAN_BOXED(2129547125,32,FLEN)
NAN_BOXED(4505644,32,FLEN)
NAN_BOXED(1019215872,32,FLEN)
NAN_BOXED(2129547125,32,FLEN)
NAN_BOXED(4505644,32,FLEN)
NAN_BOXED(1021313024,32,FLEN)
NAN_BOXED(2129547125,32,FLEN)
NAN_BOXED(4505644,32,FLEN)
NAN_BOXED(1022361600,32,FLEN)
NAN_BOXED(2129547125,32,FLEN)
NAN_BOXED(4505644,32,FLEN)
NAN_BOXED(1022885888,32,FLEN)
NAN_BOXED(2129547125,32,FLEN)
NAN_BOXED(4505644,32,FLEN)
NAN_BOXED(1023148032,32,FLEN)
NAN_BOXED(2129547125,32,FLEN)
NAN_BOXED(4505644,32,FLEN)
NAN_BOXED(1023279104,32,FLEN)
NAN_BOXED(2129547125,32,FLEN)
NAN_BOXED(4505644,32,FLEN)
NAN_BOXED(1023344640,32,FLEN)
NAN_BOXED(2129547125,32,FLEN)
NAN_BOXED(4505644,32,FLEN)
NAN_BOXED(1023377408,32,FLEN)
NAN_BOXED(2129547125,32,FLEN)
NAN_BOXED(4505644,32,FLEN)
NAN_BOXED(1023393792,32,FLEN)
NAN_BOXED(2129547125,32,FLEN)
NAN_BOXED(4505644,32,FLEN)
NAN_BOXED(1023401984,32,FLEN)
NAN_BOXED(2129547125,32,FLEN)
NAN_BOXED(4505644,32,FLEN)
NAN_BOXED(1023406080,32,FLEN)
NAN_BOXED(2129547125,32,FLEN)
NAN_BOXED(4505644,32,FLEN)
NAN_BOXED(1023408128,32,FLEN)
NAN_BOXED(2129547125,32,FLEN)
NAN_BOXED(4505644,32,FLEN)
NAN_BOXED(1023409152,32,FLEN)
NAN_BOXED(2129547125,32,FLEN)
NAN_BOXED(4505644,32,FLEN)
NAN_BOXED(1023409664,32,FLEN)
NAN_BOXED(2129547125,32,FLEN)
NAN_BOXED(4505644,32,FLEN)
NAN_BOXED(1023409920,32,FLEN)
NAN_BOXED(2129547125,32,FLEN)
NAN_BOXED(4505644,32,FLEN)
NAN_BOXED(1023410048,32,FLEN)
NAN_BOXED(2129547125,32,FLEN)
NAN_BOXED(4505644,32,FLEN)
NAN_BOXED(1023410112,32,FLEN)
NAN_BOXED(2129547125,32,FLEN)
NAN_BOXED(4505644,32,FLEN)
NAN_BOXED(1023410144,32,FLEN)
NAN_BOXED(2129547125,32,FLEN)
NAN_BOXED(4505644,32,FLEN)
NAN_BOXED(1023410160,32,FLEN)
NAN_BOXED(2129547125,32,FLEN)
NAN_BOXED(4505644,32,FLEN)
NAN_BOXED(1023410168,32,FLEN)
NAN_BOXED(2129547125,32,FLEN)
NAN_BOXED(4505644,32,FLEN)
NAN_BOXED(1023410172,32,FLEN)
NAN_BOXED(2129547125,32,FLEN)
NAN_BOXED(4505644,32,FLEN)
NAN_BOXED(1023410174,32,FLEN)
NAN_BOXED(2129547125,32,FLEN)
NAN_BOXED(4505644,32,FLEN)
NAN_BOXED(1023410175,32,FLEN)
NAN_BOXED(2129547125,32,FLEN)
NAN_BOXED(4505644,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2129547125,32,FLEN)
NAN_BOXED(4505644,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2129547125,32,FLEN)
NAN_BOXED(4505644,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2129547125,32,FLEN)
NAN_BOXED(4505644,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2129547125,32,FLEN)
NAN_BOXED(4505644,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2129547125,32,FLEN)
NAN_BOXED(4505644,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2129547125,32,FLEN)
NAN_BOXED(4505644,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2129547125,32,FLEN)
NAN_BOXED(4505644,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2129547125,32,FLEN)
NAN_BOXED(4505644,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2129547125,32,FLEN)
NAN_BOXED(4505644,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2129547125,32,FLEN)
NAN_BOXED(4505644,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2129547125,32,FLEN)
NAN_BOXED(4505644,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2129547125,32,FLEN)
NAN_BOXED(4505644,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2129547125,32,FLEN)
NAN_BOXED(4505644,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2129547125,32,FLEN)
NAN_BOXED(4505644,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2129547125,32,FLEN)
NAN_BOXED(4505644,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2129583300,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(2129583300,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388611,32,FLEN)
NAN_BOXED(2129583300,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388615,32,FLEN)
NAN_BOXED(2129583300,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(10066329,32,FLEN)
NAN_BOXED(2129583300,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(10785353,32,FLEN)
NAN_BOXED(2129583300,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(11744051,32,FLEN)
NAN_BOXED(2129583300,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(11983725,32,FLEN)
NAN_BOXED(2129583300,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(12303291,32,FLEN)
NAN_BOXED(2129583300,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(12862532,32,FLEN)
NAN_BOXED(2129583300,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(13421772,32,FLEN)
NAN_BOXED(2129583300,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(14380470,32,FLEN)
NAN_BOXED(2129583300,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(15099494,32,FLEN)
NAN_BOXED(2129583300,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(15578843,32,FLEN)
NAN_BOXED(2129583300,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777208,32,FLEN)
NAN_BOXED(2129583300,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777212,32,FLEN)
NAN_BOXED(2129583300,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777214,32,FLEN)
NAN_BOXED(2129583300,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251658240,32,FLEN)
NAN_BOXED(2129583300,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251658241,32,FLEN)
NAN_BOXED(2129583300,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251658243,32,FLEN)
NAN_BOXED(2129583300,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251658247,32,FLEN)
NAN_BOXED(2129583300,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251658255,32,FLEN)
NAN_BOXED(2129583300,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251658271,32,FLEN)
NAN_BOXED(2129583300,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251658303,32,FLEN)
NAN_BOXED(2129583300,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251658367,32,FLEN)
NAN_BOXED(2129583300,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251658495,32,FLEN)
NAN_BOXED(2129583300,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251658751,32,FLEN)
NAN_BOXED(2129583300,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251659263,32,FLEN)
NAN_BOXED(2129583300,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251660287,32,FLEN)
NAN_BOXED(2129583300,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251662335,32,FLEN)
NAN_BOXED(2129583300,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251666431,32,FLEN)
NAN_BOXED(2129583300,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251674623,32,FLEN)
NAN_BOXED(2129583300,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251691007,32,FLEN)
NAN_BOXED(2129583300,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251723775,32,FLEN)
NAN_BOXED(2129583300,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251789311,32,FLEN)
NAN_BOXED(2129583300,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251920383,32,FLEN)
NAN_BOXED(2129583300,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(252182527,32,FLEN)
NAN_BOXED(2129583300,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(252706815,32,FLEN)
NAN_BOXED(2129583300,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(253755391,32,FLEN)
NAN_BOXED(2129583300,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(255852543,32,FLEN)
NAN_BOXED(2129583300,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(255852544,32,FLEN)
NAN_BOXED(2129583300,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(257949696,32,FLEN)
NAN_BOXED(2129583300,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(258998272,32,FLEN)
NAN_BOXED(2129583300,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(259522560,32,FLEN)
NAN_BOXED(2129583300,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(259784704,32,FLEN)
NAN_BOXED(2129583300,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(259915776,32,FLEN)
NAN_BOXED(2129583300,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(259981312,32,FLEN)
NAN_BOXED(2129583300,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260014080,32,FLEN)
NAN_BOXED(2129583300,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260030464,32,FLEN)
NAN_BOXED(2129583300,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260038656,32,FLEN)
NAN_BOXED(2129583300,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260042752,32,FLEN)
NAN_BOXED(2129583300,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260044800,32,FLEN)
NAN_BOXED(2129583300,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260045824,32,FLEN)
NAN_BOXED(2129583300,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260046336,32,FLEN)
NAN_BOXED(2129583300,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260046592,32,FLEN)
NAN_BOXED(2129583300,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260046720,32,FLEN)
NAN_BOXED(2129583300,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260046784,32,FLEN)
NAN_BOXED(2129583300,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260046816,32,FLEN)
NAN_BOXED(2129583300,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260046832,32,FLEN)
NAN_BOXED(2129583300,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260046840,32,FLEN)
NAN_BOXED(2129583300,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260046844,32,FLEN)
NAN_BOXED(2129583300,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260046846,32,FLEN)
NAN_BOXED(2129583300,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260046847,32,FLEN)
NAN_BOXED(2129617969,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
