
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:17:59 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_24192:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x70d256 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x081147 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef0d256; op2val:0xc0081147;
op3val:0xff00001f; valaddr_reg:x3; val_offset:72576*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72576*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24193:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x70d256 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x081147 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef0d256; op2val:0xc0081147;
op3val:0xff00003f; valaddr_reg:x3; val_offset:72579*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72579*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24194:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x70d256 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x081147 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef0d256; op2val:0xc0081147;
op3val:0xff00007f; valaddr_reg:x3; val_offset:72582*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72582*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24195:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x70d256 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x081147 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef0d256; op2val:0xc0081147;
op3val:0xff0000ff; valaddr_reg:x3; val_offset:72585*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72585*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24196:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x70d256 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x081147 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef0d256; op2val:0xc0081147;
op3val:0xff0001ff; valaddr_reg:x3; val_offset:72588*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72588*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24197:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x70d256 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x081147 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef0d256; op2val:0xc0081147;
op3val:0xff0003ff; valaddr_reg:x3; val_offset:72591*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72591*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24198:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x70d256 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x081147 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef0d256; op2val:0xc0081147;
op3val:0xff0007ff; valaddr_reg:x3; val_offset:72594*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72594*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24199:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x70d256 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x081147 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef0d256; op2val:0xc0081147;
op3val:0xff000fff; valaddr_reg:x3; val_offset:72597*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72597*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24200:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x70d256 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x081147 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef0d256; op2val:0xc0081147;
op3val:0xff001fff; valaddr_reg:x3; val_offset:72600*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72600*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24201:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x70d256 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x081147 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef0d256; op2val:0xc0081147;
op3val:0xff003fff; valaddr_reg:x3; val_offset:72603*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72603*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24202:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x70d256 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x081147 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef0d256; op2val:0xc0081147;
op3val:0xff007fff; valaddr_reg:x3; val_offset:72606*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72606*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24203:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x70d256 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x081147 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef0d256; op2val:0xc0081147;
op3val:0xff00ffff; valaddr_reg:x3; val_offset:72609*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72609*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24204:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x70d256 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x081147 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef0d256; op2val:0xc0081147;
op3val:0xff01ffff; valaddr_reg:x3; val_offset:72612*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72612*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24205:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x70d256 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x081147 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef0d256; op2val:0xc0081147;
op3val:0xff03ffff; valaddr_reg:x3; val_offset:72615*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72615*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24206:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x70d256 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x081147 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef0d256; op2val:0xc0081147;
op3val:0xff07ffff; valaddr_reg:x3; val_offset:72618*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72618*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24207:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x70d256 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x081147 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef0d256; op2val:0xc0081147;
op3val:0xff0fffff; valaddr_reg:x3; val_offset:72621*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72621*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24208:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x70d256 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x081147 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef0d256; op2val:0xc0081147;
op3val:0xff199999; valaddr_reg:x3; val_offset:72624*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72624*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24209:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x70d256 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x081147 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef0d256; op2val:0xc0081147;
op3val:0xff1fffff; valaddr_reg:x3; val_offset:72627*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72627*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24210:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x70d256 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x081147 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef0d256; op2val:0xc0081147;
op3val:0xff249249; valaddr_reg:x3; val_offset:72630*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72630*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24211:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x70d256 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x081147 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef0d256; op2val:0xc0081147;
op3val:0xff333333; valaddr_reg:x3; val_offset:72633*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72633*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24212:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x70d256 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x081147 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef0d256; op2val:0xc0081147;
op3val:0xff36db6d; valaddr_reg:x3; val_offset:72636*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72636*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24213:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x70d256 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x081147 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef0d256; op2val:0xc0081147;
op3val:0xff3bbbbb; valaddr_reg:x3; val_offset:72639*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72639*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24214:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x70d256 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x081147 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef0d256; op2val:0xc0081147;
op3val:0xff3fffff; valaddr_reg:x3; val_offset:72642*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72642*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24215:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x70d256 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x081147 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef0d256; op2val:0xc0081147;
op3val:0xff400000; valaddr_reg:x3; val_offset:72645*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72645*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24216:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x70d256 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x081147 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef0d256; op2val:0xc0081147;
op3val:0xff444444; valaddr_reg:x3; val_offset:72648*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72648*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24217:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x70d256 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x081147 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef0d256; op2val:0xc0081147;
op3val:0xff4ccccc; valaddr_reg:x3; val_offset:72651*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72651*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24218:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x70d256 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x081147 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef0d256; op2val:0xc0081147;
op3val:0xff5b6db6; valaddr_reg:x3; val_offset:72654*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72654*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24219:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x70d256 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x081147 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef0d256; op2val:0xc0081147;
op3val:0xff600000; valaddr_reg:x3; val_offset:72657*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72657*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24220:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x70d256 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x081147 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef0d256; op2val:0xc0081147;
op3val:0xff666666; valaddr_reg:x3; val_offset:72660*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72660*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24221:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x70d256 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x081147 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef0d256; op2val:0xc0081147;
op3val:0xff6db6db; valaddr_reg:x3; val_offset:72663*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72663*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24222:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x70d256 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x081147 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef0d256; op2val:0xc0081147;
op3val:0xff700000; valaddr_reg:x3; val_offset:72666*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72666*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24223:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x70d256 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x081147 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef0d256; op2val:0xc0081147;
op3val:0xff780000; valaddr_reg:x3; val_offset:72669*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72669*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24224:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x70d256 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x081147 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef0d256; op2val:0xc0081147;
op3val:0xff7c0000; valaddr_reg:x3; val_offset:72672*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72672*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24225:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x70d256 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x081147 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef0d256; op2val:0xc0081147;
op3val:0xff7e0000; valaddr_reg:x3; val_offset:72675*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72675*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24226:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x70d256 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x081147 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef0d256; op2val:0xc0081147;
op3val:0xff7f0000; valaddr_reg:x3; val_offset:72678*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72678*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24227:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x70d256 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x081147 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef0d256; op2val:0xc0081147;
op3val:0xff7f8000; valaddr_reg:x3; val_offset:72681*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72681*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24228:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x70d256 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x081147 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef0d256; op2val:0xc0081147;
op3val:0xff7fc000; valaddr_reg:x3; val_offset:72684*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72684*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24229:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x70d256 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x081147 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef0d256; op2val:0xc0081147;
op3val:0xff7fe000; valaddr_reg:x3; val_offset:72687*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72687*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24230:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x70d256 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x081147 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef0d256; op2val:0xc0081147;
op3val:0xff7ff000; valaddr_reg:x3; val_offset:72690*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72690*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24231:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x70d256 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x081147 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef0d256; op2val:0xc0081147;
op3val:0xff7ff800; valaddr_reg:x3; val_offset:72693*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72693*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24232:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x70d256 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x081147 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef0d256; op2val:0xc0081147;
op3val:0xff7ffc00; valaddr_reg:x3; val_offset:72696*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72696*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24233:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x70d256 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x081147 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef0d256; op2val:0xc0081147;
op3val:0xff7ffe00; valaddr_reg:x3; val_offset:72699*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72699*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24234:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x70d256 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x081147 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef0d256; op2val:0xc0081147;
op3val:0xff7fff00; valaddr_reg:x3; val_offset:72702*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72702*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24235:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x70d256 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x081147 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef0d256; op2val:0xc0081147;
op3val:0xff7fff80; valaddr_reg:x3; val_offset:72705*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72705*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24236:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x70d256 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x081147 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef0d256; op2val:0xc0081147;
op3val:0xff7fffc0; valaddr_reg:x3; val_offset:72708*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72708*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24237:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x70d256 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x081147 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef0d256; op2val:0xc0081147;
op3val:0xff7fffe0; valaddr_reg:x3; val_offset:72711*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72711*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24238:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x70d256 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x081147 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef0d256; op2val:0xc0081147;
op3val:0xff7ffff0; valaddr_reg:x3; val_offset:72714*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72714*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24239:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x70d256 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x081147 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef0d256; op2val:0xc0081147;
op3val:0xff7ffff8; valaddr_reg:x3; val_offset:72717*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72717*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24240:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x70d256 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x081147 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef0d256; op2val:0xc0081147;
op3val:0xff7ffffc; valaddr_reg:x3; val_offset:72720*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72720*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24241:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x70d256 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x081147 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef0d256; op2val:0xc0081147;
op3val:0xff7ffffe; valaddr_reg:x3; val_offset:72723*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72723*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24242:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x70d256 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x081147 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef0d256; op2val:0xc0081147;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:72726*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72726*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24243:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x71036e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x43fac8 and fs3 == 1 and fe3 == 0x7b and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef1036e; op2val:0x8043fac8;
op3val:0xbd800000; valaddr_reg:x3; val_offset:72729*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72729*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24244:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x71036e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x43fac8 and fs3 == 1 and fe3 == 0x7b and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef1036e; op2val:0x8043fac8;
op3val:0xbd800001; valaddr_reg:x3; val_offset:72732*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72732*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24245:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x71036e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x43fac8 and fs3 == 1 and fe3 == 0x7b and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef1036e; op2val:0x8043fac8;
op3val:0xbd800003; valaddr_reg:x3; val_offset:72735*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72735*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24246:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x71036e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x43fac8 and fs3 == 1 and fe3 == 0x7b and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef1036e; op2val:0x8043fac8;
op3val:0xbd800007; valaddr_reg:x3; val_offset:72738*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72738*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24247:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x71036e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x43fac8 and fs3 == 1 and fe3 == 0x7b and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef1036e; op2val:0x8043fac8;
op3val:0xbd80000f; valaddr_reg:x3; val_offset:72741*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72741*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24248:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x71036e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x43fac8 and fs3 == 1 and fe3 == 0x7b and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef1036e; op2val:0x8043fac8;
op3val:0xbd80001f; valaddr_reg:x3; val_offset:72744*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72744*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24249:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x71036e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x43fac8 and fs3 == 1 and fe3 == 0x7b and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef1036e; op2val:0x8043fac8;
op3val:0xbd80003f; valaddr_reg:x3; val_offset:72747*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72747*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24250:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x71036e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x43fac8 and fs3 == 1 and fe3 == 0x7b and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef1036e; op2val:0x8043fac8;
op3val:0xbd80007f; valaddr_reg:x3; val_offset:72750*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72750*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24251:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x71036e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x43fac8 and fs3 == 1 and fe3 == 0x7b and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef1036e; op2val:0x8043fac8;
op3val:0xbd8000ff; valaddr_reg:x3; val_offset:72753*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72753*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24252:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x71036e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x43fac8 and fs3 == 1 and fe3 == 0x7b and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef1036e; op2val:0x8043fac8;
op3val:0xbd8001ff; valaddr_reg:x3; val_offset:72756*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72756*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24253:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x71036e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x43fac8 and fs3 == 1 and fe3 == 0x7b and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef1036e; op2val:0x8043fac8;
op3val:0xbd8003ff; valaddr_reg:x3; val_offset:72759*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72759*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24254:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x71036e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x43fac8 and fs3 == 1 and fe3 == 0x7b and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef1036e; op2val:0x8043fac8;
op3val:0xbd8007ff; valaddr_reg:x3; val_offset:72762*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72762*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24255:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x71036e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x43fac8 and fs3 == 1 and fe3 == 0x7b and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef1036e; op2val:0x8043fac8;
op3val:0xbd800fff; valaddr_reg:x3; val_offset:72765*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72765*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24256:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x71036e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x43fac8 and fs3 == 1 and fe3 == 0x7b and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef1036e; op2val:0x8043fac8;
op3val:0xbd801fff; valaddr_reg:x3; val_offset:72768*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72768*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24257:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x71036e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x43fac8 and fs3 == 1 and fe3 == 0x7b and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef1036e; op2val:0x8043fac8;
op3val:0xbd803fff; valaddr_reg:x3; val_offset:72771*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72771*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24258:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x71036e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x43fac8 and fs3 == 1 and fe3 == 0x7b and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef1036e; op2val:0x8043fac8;
op3val:0xbd807fff; valaddr_reg:x3; val_offset:72774*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72774*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24259:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x71036e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x43fac8 and fs3 == 1 and fe3 == 0x7b and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef1036e; op2val:0x8043fac8;
op3val:0xbd80ffff; valaddr_reg:x3; val_offset:72777*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72777*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24260:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x71036e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x43fac8 and fs3 == 1 and fe3 == 0x7b and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef1036e; op2val:0x8043fac8;
op3val:0xbd81ffff; valaddr_reg:x3; val_offset:72780*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72780*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24261:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x71036e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x43fac8 and fs3 == 1 and fe3 == 0x7b and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef1036e; op2val:0x8043fac8;
op3val:0xbd83ffff; valaddr_reg:x3; val_offset:72783*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72783*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24262:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x71036e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x43fac8 and fs3 == 1 and fe3 == 0x7b and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef1036e; op2val:0x8043fac8;
op3val:0xbd87ffff; valaddr_reg:x3; val_offset:72786*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72786*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24263:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x71036e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x43fac8 and fs3 == 1 and fe3 == 0x7b and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef1036e; op2val:0x8043fac8;
op3val:0xbd8fffff; valaddr_reg:x3; val_offset:72789*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72789*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24264:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x71036e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x43fac8 and fs3 == 1 and fe3 == 0x7b and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef1036e; op2val:0x8043fac8;
op3val:0xbd9fffff; valaddr_reg:x3; val_offset:72792*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72792*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24265:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x71036e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x43fac8 and fs3 == 1 and fe3 == 0x7b and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef1036e; op2val:0x8043fac8;
op3val:0xbdbfffff; valaddr_reg:x3; val_offset:72795*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72795*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24266:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x71036e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x43fac8 and fs3 == 1 and fe3 == 0x7b and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef1036e; op2val:0x8043fac8;
op3val:0xbdc00000; valaddr_reg:x3; val_offset:72798*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72798*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24267:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x71036e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x43fac8 and fs3 == 1 and fe3 == 0x7b and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef1036e; op2val:0x8043fac8;
op3val:0xbde00000; valaddr_reg:x3; val_offset:72801*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72801*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24268:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x71036e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x43fac8 and fs3 == 1 and fe3 == 0x7b and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef1036e; op2val:0x8043fac8;
op3val:0xbdf00000; valaddr_reg:x3; val_offset:72804*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72804*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24269:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x71036e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x43fac8 and fs3 == 1 and fe3 == 0x7b and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef1036e; op2val:0x8043fac8;
op3val:0xbdf80000; valaddr_reg:x3; val_offset:72807*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72807*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24270:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x71036e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x43fac8 and fs3 == 1 and fe3 == 0x7b and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef1036e; op2val:0x8043fac8;
op3val:0xbdfc0000; valaddr_reg:x3; val_offset:72810*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72810*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24271:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x71036e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x43fac8 and fs3 == 1 and fe3 == 0x7b and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef1036e; op2val:0x8043fac8;
op3val:0xbdfe0000; valaddr_reg:x3; val_offset:72813*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72813*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24272:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x71036e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x43fac8 and fs3 == 1 and fe3 == 0x7b and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef1036e; op2val:0x8043fac8;
op3val:0xbdff0000; valaddr_reg:x3; val_offset:72816*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72816*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24273:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x71036e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x43fac8 and fs3 == 1 and fe3 == 0x7b and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef1036e; op2val:0x8043fac8;
op3val:0xbdff8000; valaddr_reg:x3; val_offset:72819*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72819*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24274:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x71036e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x43fac8 and fs3 == 1 and fe3 == 0x7b and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef1036e; op2val:0x8043fac8;
op3val:0xbdffc000; valaddr_reg:x3; val_offset:72822*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72822*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24275:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x71036e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x43fac8 and fs3 == 1 and fe3 == 0x7b and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef1036e; op2val:0x8043fac8;
op3val:0xbdffe000; valaddr_reg:x3; val_offset:72825*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72825*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24276:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x71036e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x43fac8 and fs3 == 1 and fe3 == 0x7b and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef1036e; op2val:0x8043fac8;
op3val:0xbdfff000; valaddr_reg:x3; val_offset:72828*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72828*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24277:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x71036e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x43fac8 and fs3 == 1 and fe3 == 0x7b and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef1036e; op2val:0x8043fac8;
op3val:0xbdfff800; valaddr_reg:x3; val_offset:72831*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72831*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24278:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x71036e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x43fac8 and fs3 == 1 and fe3 == 0x7b and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef1036e; op2val:0x8043fac8;
op3val:0xbdfffc00; valaddr_reg:x3; val_offset:72834*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72834*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24279:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x71036e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x43fac8 and fs3 == 1 and fe3 == 0x7b and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef1036e; op2val:0x8043fac8;
op3val:0xbdfffe00; valaddr_reg:x3; val_offset:72837*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72837*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24280:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x71036e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x43fac8 and fs3 == 1 and fe3 == 0x7b and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef1036e; op2val:0x8043fac8;
op3val:0xbdffff00; valaddr_reg:x3; val_offset:72840*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72840*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24281:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x71036e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x43fac8 and fs3 == 1 and fe3 == 0x7b and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef1036e; op2val:0x8043fac8;
op3val:0xbdffff80; valaddr_reg:x3; val_offset:72843*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72843*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24282:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x71036e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x43fac8 and fs3 == 1 and fe3 == 0x7b and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef1036e; op2val:0x8043fac8;
op3val:0xbdffffc0; valaddr_reg:x3; val_offset:72846*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72846*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24283:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x71036e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x43fac8 and fs3 == 1 and fe3 == 0x7b and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef1036e; op2val:0x8043fac8;
op3val:0xbdffffe0; valaddr_reg:x3; val_offset:72849*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72849*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24284:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x71036e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x43fac8 and fs3 == 1 and fe3 == 0x7b and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef1036e; op2val:0x8043fac8;
op3val:0xbdfffff0; valaddr_reg:x3; val_offset:72852*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72852*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24285:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x71036e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x43fac8 and fs3 == 1 and fe3 == 0x7b and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef1036e; op2val:0x8043fac8;
op3val:0xbdfffff8; valaddr_reg:x3; val_offset:72855*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72855*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24286:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x71036e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x43fac8 and fs3 == 1 and fe3 == 0x7b and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef1036e; op2val:0x8043fac8;
op3val:0xbdfffffc; valaddr_reg:x3; val_offset:72858*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72858*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24287:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x71036e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x43fac8 and fs3 == 1 and fe3 == 0x7b and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef1036e; op2val:0x8043fac8;
op3val:0xbdfffffe; valaddr_reg:x3; val_offset:72861*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72861*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24288:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x71036e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x43fac8 and fs3 == 1 and fe3 == 0x7b and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef1036e; op2val:0x8043fac8;
op3val:0xbdffffff; valaddr_reg:x3; val_offset:72864*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72864*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24289:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x71036e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x43fac8 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef1036e; op2val:0x8043fac8;
op3val:0xbf800001; valaddr_reg:x3; val_offset:72867*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72867*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24290:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x71036e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x43fac8 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef1036e; op2val:0x8043fac8;
op3val:0xbf800003; valaddr_reg:x3; val_offset:72870*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72870*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24291:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x71036e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x43fac8 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef1036e; op2val:0x8043fac8;
op3val:0xbf800007; valaddr_reg:x3; val_offset:72873*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72873*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24292:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x71036e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x43fac8 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef1036e; op2val:0x8043fac8;
op3val:0xbf999999; valaddr_reg:x3; val_offset:72876*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72876*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24293:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x71036e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x43fac8 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef1036e; op2val:0x8043fac8;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:72879*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72879*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24294:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x71036e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x43fac8 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef1036e; op2val:0x8043fac8;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:72882*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72882*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24295:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x71036e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x43fac8 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef1036e; op2val:0x8043fac8;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:72885*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72885*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24296:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x71036e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x43fac8 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef1036e; op2val:0x8043fac8;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:72888*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72888*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24297:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x71036e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x43fac8 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef1036e; op2val:0x8043fac8;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:72891*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72891*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24298:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x71036e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x43fac8 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef1036e; op2val:0x8043fac8;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:72894*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72894*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24299:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x71036e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x43fac8 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef1036e; op2val:0x8043fac8;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:72897*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72897*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24300:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x71036e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x43fac8 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef1036e; op2val:0x8043fac8;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:72900*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72900*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24301:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x71036e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x43fac8 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef1036e; op2val:0x8043fac8;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:72903*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72903*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24302:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x71036e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x43fac8 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef1036e; op2val:0x8043fac8;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:72906*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72906*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24303:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x71036e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x43fac8 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef1036e; op2val:0x8043fac8;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:72909*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72909*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24304:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x71036e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x43fac8 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef1036e; op2val:0x8043fac8;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:72912*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72912*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24305:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x718162 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x07aea7 and fs3 == 1 and fe3 == 0xda and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef18162; op2val:0xc007aea7;
op3val:0xed000000; valaddr_reg:x3; val_offset:72915*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72915*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24306:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x718162 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x07aea7 and fs3 == 1 and fe3 == 0xda and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef18162; op2val:0xc007aea7;
op3val:0xed000001; valaddr_reg:x3; val_offset:72918*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72918*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24307:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x718162 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x07aea7 and fs3 == 1 and fe3 == 0xda and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef18162; op2val:0xc007aea7;
op3val:0xed000003; valaddr_reg:x3; val_offset:72921*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72921*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24308:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x718162 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x07aea7 and fs3 == 1 and fe3 == 0xda and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef18162; op2val:0xc007aea7;
op3val:0xed000007; valaddr_reg:x3; val_offset:72924*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72924*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24309:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x718162 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x07aea7 and fs3 == 1 and fe3 == 0xda and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef18162; op2val:0xc007aea7;
op3val:0xed00000f; valaddr_reg:x3; val_offset:72927*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72927*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24310:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x718162 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x07aea7 and fs3 == 1 and fe3 == 0xda and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef18162; op2val:0xc007aea7;
op3val:0xed00001f; valaddr_reg:x3; val_offset:72930*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72930*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24311:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x718162 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x07aea7 and fs3 == 1 and fe3 == 0xda and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef18162; op2val:0xc007aea7;
op3val:0xed00003f; valaddr_reg:x3; val_offset:72933*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72933*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24312:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x718162 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x07aea7 and fs3 == 1 and fe3 == 0xda and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef18162; op2val:0xc007aea7;
op3val:0xed00007f; valaddr_reg:x3; val_offset:72936*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72936*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24313:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x718162 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x07aea7 and fs3 == 1 and fe3 == 0xda and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef18162; op2val:0xc007aea7;
op3val:0xed0000ff; valaddr_reg:x3; val_offset:72939*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72939*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24314:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x718162 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x07aea7 and fs3 == 1 and fe3 == 0xda and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef18162; op2val:0xc007aea7;
op3val:0xed0001ff; valaddr_reg:x3; val_offset:72942*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72942*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24315:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x718162 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x07aea7 and fs3 == 1 and fe3 == 0xda and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef18162; op2val:0xc007aea7;
op3val:0xed0003ff; valaddr_reg:x3; val_offset:72945*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72945*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24316:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x718162 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x07aea7 and fs3 == 1 and fe3 == 0xda and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef18162; op2val:0xc007aea7;
op3val:0xed0007ff; valaddr_reg:x3; val_offset:72948*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72948*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24317:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x718162 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x07aea7 and fs3 == 1 and fe3 == 0xda and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef18162; op2val:0xc007aea7;
op3val:0xed000fff; valaddr_reg:x3; val_offset:72951*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72951*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24318:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x718162 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x07aea7 and fs3 == 1 and fe3 == 0xda and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef18162; op2val:0xc007aea7;
op3val:0xed001fff; valaddr_reg:x3; val_offset:72954*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72954*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24319:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x718162 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x07aea7 and fs3 == 1 and fe3 == 0xda and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef18162; op2val:0xc007aea7;
op3val:0xed003fff; valaddr_reg:x3; val_offset:72957*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72957*0 + 3*189*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2129711702,32,FLEN)
NAN_BOXED(3221754183,32,FLEN)
NAN_BOXED(4278190111,32,FLEN)
NAN_BOXED(2129711702,32,FLEN)
NAN_BOXED(3221754183,32,FLEN)
NAN_BOXED(4278190143,32,FLEN)
NAN_BOXED(2129711702,32,FLEN)
NAN_BOXED(3221754183,32,FLEN)
NAN_BOXED(4278190207,32,FLEN)
NAN_BOXED(2129711702,32,FLEN)
NAN_BOXED(3221754183,32,FLEN)
NAN_BOXED(4278190335,32,FLEN)
NAN_BOXED(2129711702,32,FLEN)
NAN_BOXED(3221754183,32,FLEN)
NAN_BOXED(4278190591,32,FLEN)
NAN_BOXED(2129711702,32,FLEN)
NAN_BOXED(3221754183,32,FLEN)
NAN_BOXED(4278191103,32,FLEN)
NAN_BOXED(2129711702,32,FLEN)
NAN_BOXED(3221754183,32,FLEN)
NAN_BOXED(4278192127,32,FLEN)
NAN_BOXED(2129711702,32,FLEN)
NAN_BOXED(3221754183,32,FLEN)
NAN_BOXED(4278194175,32,FLEN)
NAN_BOXED(2129711702,32,FLEN)
NAN_BOXED(3221754183,32,FLEN)
NAN_BOXED(4278198271,32,FLEN)
NAN_BOXED(2129711702,32,FLEN)
NAN_BOXED(3221754183,32,FLEN)
NAN_BOXED(4278206463,32,FLEN)
NAN_BOXED(2129711702,32,FLEN)
NAN_BOXED(3221754183,32,FLEN)
NAN_BOXED(4278222847,32,FLEN)
NAN_BOXED(2129711702,32,FLEN)
NAN_BOXED(3221754183,32,FLEN)
NAN_BOXED(4278255615,32,FLEN)
NAN_BOXED(2129711702,32,FLEN)
NAN_BOXED(3221754183,32,FLEN)
NAN_BOXED(4278321151,32,FLEN)
NAN_BOXED(2129711702,32,FLEN)
NAN_BOXED(3221754183,32,FLEN)
NAN_BOXED(4278452223,32,FLEN)
NAN_BOXED(2129711702,32,FLEN)
NAN_BOXED(3221754183,32,FLEN)
NAN_BOXED(4278714367,32,FLEN)
NAN_BOXED(2129711702,32,FLEN)
NAN_BOXED(3221754183,32,FLEN)
NAN_BOXED(4279238655,32,FLEN)
NAN_BOXED(2129711702,32,FLEN)
NAN_BOXED(3221754183,32,FLEN)
NAN_BOXED(4279867801,32,FLEN)
NAN_BOXED(2129711702,32,FLEN)
NAN_BOXED(3221754183,32,FLEN)
NAN_BOXED(4280287231,32,FLEN)
NAN_BOXED(2129711702,32,FLEN)
NAN_BOXED(3221754183,32,FLEN)
NAN_BOXED(4280586825,32,FLEN)
NAN_BOXED(2129711702,32,FLEN)
NAN_BOXED(3221754183,32,FLEN)
NAN_BOXED(4281545523,32,FLEN)
NAN_BOXED(2129711702,32,FLEN)
NAN_BOXED(3221754183,32,FLEN)
NAN_BOXED(4281785197,32,FLEN)
NAN_BOXED(2129711702,32,FLEN)
NAN_BOXED(3221754183,32,FLEN)
NAN_BOXED(4282104763,32,FLEN)
NAN_BOXED(2129711702,32,FLEN)
NAN_BOXED(3221754183,32,FLEN)
NAN_BOXED(4282384383,32,FLEN)
NAN_BOXED(2129711702,32,FLEN)
NAN_BOXED(3221754183,32,FLEN)
NAN_BOXED(4282384384,32,FLEN)
NAN_BOXED(2129711702,32,FLEN)
NAN_BOXED(3221754183,32,FLEN)
NAN_BOXED(4282664004,32,FLEN)
NAN_BOXED(2129711702,32,FLEN)
NAN_BOXED(3221754183,32,FLEN)
NAN_BOXED(4283223244,32,FLEN)
NAN_BOXED(2129711702,32,FLEN)
NAN_BOXED(3221754183,32,FLEN)
NAN_BOXED(4284181942,32,FLEN)
NAN_BOXED(2129711702,32,FLEN)
NAN_BOXED(3221754183,32,FLEN)
NAN_BOXED(4284481536,32,FLEN)
NAN_BOXED(2129711702,32,FLEN)
NAN_BOXED(3221754183,32,FLEN)
NAN_BOXED(4284900966,32,FLEN)
NAN_BOXED(2129711702,32,FLEN)
NAN_BOXED(3221754183,32,FLEN)
NAN_BOXED(4285380315,32,FLEN)
NAN_BOXED(2129711702,32,FLEN)
NAN_BOXED(3221754183,32,FLEN)
NAN_BOXED(4285530112,32,FLEN)
NAN_BOXED(2129711702,32,FLEN)
NAN_BOXED(3221754183,32,FLEN)
NAN_BOXED(4286054400,32,FLEN)
NAN_BOXED(2129711702,32,FLEN)
NAN_BOXED(3221754183,32,FLEN)
NAN_BOXED(4286316544,32,FLEN)
NAN_BOXED(2129711702,32,FLEN)
NAN_BOXED(3221754183,32,FLEN)
NAN_BOXED(4286447616,32,FLEN)
NAN_BOXED(2129711702,32,FLEN)
NAN_BOXED(3221754183,32,FLEN)
NAN_BOXED(4286513152,32,FLEN)
NAN_BOXED(2129711702,32,FLEN)
NAN_BOXED(3221754183,32,FLEN)
NAN_BOXED(4286545920,32,FLEN)
NAN_BOXED(2129711702,32,FLEN)
NAN_BOXED(3221754183,32,FLEN)
NAN_BOXED(4286562304,32,FLEN)
NAN_BOXED(2129711702,32,FLEN)
NAN_BOXED(3221754183,32,FLEN)
NAN_BOXED(4286570496,32,FLEN)
NAN_BOXED(2129711702,32,FLEN)
NAN_BOXED(3221754183,32,FLEN)
NAN_BOXED(4286574592,32,FLEN)
NAN_BOXED(2129711702,32,FLEN)
NAN_BOXED(3221754183,32,FLEN)
NAN_BOXED(4286576640,32,FLEN)
NAN_BOXED(2129711702,32,FLEN)
NAN_BOXED(3221754183,32,FLEN)
NAN_BOXED(4286577664,32,FLEN)
NAN_BOXED(2129711702,32,FLEN)
NAN_BOXED(3221754183,32,FLEN)
NAN_BOXED(4286578176,32,FLEN)
NAN_BOXED(2129711702,32,FLEN)
NAN_BOXED(3221754183,32,FLEN)
NAN_BOXED(4286578432,32,FLEN)
NAN_BOXED(2129711702,32,FLEN)
NAN_BOXED(3221754183,32,FLEN)
NAN_BOXED(4286578560,32,FLEN)
NAN_BOXED(2129711702,32,FLEN)
NAN_BOXED(3221754183,32,FLEN)
NAN_BOXED(4286578624,32,FLEN)
NAN_BOXED(2129711702,32,FLEN)
NAN_BOXED(3221754183,32,FLEN)
NAN_BOXED(4286578656,32,FLEN)
NAN_BOXED(2129711702,32,FLEN)
NAN_BOXED(3221754183,32,FLEN)
NAN_BOXED(4286578672,32,FLEN)
NAN_BOXED(2129711702,32,FLEN)
NAN_BOXED(3221754183,32,FLEN)
NAN_BOXED(4286578680,32,FLEN)
NAN_BOXED(2129711702,32,FLEN)
NAN_BOXED(3221754183,32,FLEN)
NAN_BOXED(4286578684,32,FLEN)
NAN_BOXED(2129711702,32,FLEN)
NAN_BOXED(3221754183,32,FLEN)
NAN_BOXED(4286578686,32,FLEN)
NAN_BOXED(2129711702,32,FLEN)
NAN_BOXED(3221754183,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(2129724270,32,FLEN)
NAN_BOXED(2151938760,32,FLEN)
NAN_BOXED(3179282432,32,FLEN)
NAN_BOXED(2129724270,32,FLEN)
NAN_BOXED(2151938760,32,FLEN)
NAN_BOXED(3179282433,32,FLEN)
NAN_BOXED(2129724270,32,FLEN)
NAN_BOXED(2151938760,32,FLEN)
NAN_BOXED(3179282435,32,FLEN)
NAN_BOXED(2129724270,32,FLEN)
NAN_BOXED(2151938760,32,FLEN)
NAN_BOXED(3179282439,32,FLEN)
NAN_BOXED(2129724270,32,FLEN)
NAN_BOXED(2151938760,32,FLEN)
NAN_BOXED(3179282447,32,FLEN)
NAN_BOXED(2129724270,32,FLEN)
NAN_BOXED(2151938760,32,FLEN)
NAN_BOXED(3179282463,32,FLEN)
NAN_BOXED(2129724270,32,FLEN)
NAN_BOXED(2151938760,32,FLEN)
NAN_BOXED(3179282495,32,FLEN)
NAN_BOXED(2129724270,32,FLEN)
NAN_BOXED(2151938760,32,FLEN)
NAN_BOXED(3179282559,32,FLEN)
NAN_BOXED(2129724270,32,FLEN)
NAN_BOXED(2151938760,32,FLEN)
NAN_BOXED(3179282687,32,FLEN)
NAN_BOXED(2129724270,32,FLEN)
NAN_BOXED(2151938760,32,FLEN)
NAN_BOXED(3179282943,32,FLEN)
NAN_BOXED(2129724270,32,FLEN)
NAN_BOXED(2151938760,32,FLEN)
NAN_BOXED(3179283455,32,FLEN)
NAN_BOXED(2129724270,32,FLEN)
NAN_BOXED(2151938760,32,FLEN)
NAN_BOXED(3179284479,32,FLEN)
NAN_BOXED(2129724270,32,FLEN)
NAN_BOXED(2151938760,32,FLEN)
NAN_BOXED(3179286527,32,FLEN)
NAN_BOXED(2129724270,32,FLEN)
NAN_BOXED(2151938760,32,FLEN)
NAN_BOXED(3179290623,32,FLEN)
NAN_BOXED(2129724270,32,FLEN)
NAN_BOXED(2151938760,32,FLEN)
NAN_BOXED(3179298815,32,FLEN)
NAN_BOXED(2129724270,32,FLEN)
NAN_BOXED(2151938760,32,FLEN)
NAN_BOXED(3179315199,32,FLEN)
NAN_BOXED(2129724270,32,FLEN)
NAN_BOXED(2151938760,32,FLEN)
NAN_BOXED(3179347967,32,FLEN)
NAN_BOXED(2129724270,32,FLEN)
NAN_BOXED(2151938760,32,FLEN)
NAN_BOXED(3179413503,32,FLEN)
NAN_BOXED(2129724270,32,FLEN)
NAN_BOXED(2151938760,32,FLEN)
NAN_BOXED(3179544575,32,FLEN)
NAN_BOXED(2129724270,32,FLEN)
NAN_BOXED(2151938760,32,FLEN)
NAN_BOXED(3179806719,32,FLEN)
NAN_BOXED(2129724270,32,FLEN)
NAN_BOXED(2151938760,32,FLEN)
NAN_BOXED(3180331007,32,FLEN)
NAN_BOXED(2129724270,32,FLEN)
NAN_BOXED(2151938760,32,FLEN)
NAN_BOXED(3181379583,32,FLEN)
NAN_BOXED(2129724270,32,FLEN)
NAN_BOXED(2151938760,32,FLEN)
NAN_BOXED(3183476735,32,FLEN)
NAN_BOXED(2129724270,32,FLEN)
NAN_BOXED(2151938760,32,FLEN)
NAN_BOXED(3183476736,32,FLEN)
NAN_BOXED(2129724270,32,FLEN)
NAN_BOXED(2151938760,32,FLEN)
NAN_BOXED(3185573888,32,FLEN)
NAN_BOXED(2129724270,32,FLEN)
NAN_BOXED(2151938760,32,FLEN)
NAN_BOXED(3186622464,32,FLEN)
NAN_BOXED(2129724270,32,FLEN)
NAN_BOXED(2151938760,32,FLEN)
NAN_BOXED(3187146752,32,FLEN)
NAN_BOXED(2129724270,32,FLEN)
NAN_BOXED(2151938760,32,FLEN)
NAN_BOXED(3187408896,32,FLEN)
NAN_BOXED(2129724270,32,FLEN)
NAN_BOXED(2151938760,32,FLEN)
NAN_BOXED(3187539968,32,FLEN)
NAN_BOXED(2129724270,32,FLEN)
NAN_BOXED(2151938760,32,FLEN)
NAN_BOXED(3187605504,32,FLEN)
NAN_BOXED(2129724270,32,FLEN)
NAN_BOXED(2151938760,32,FLEN)
NAN_BOXED(3187638272,32,FLEN)
NAN_BOXED(2129724270,32,FLEN)
NAN_BOXED(2151938760,32,FLEN)
NAN_BOXED(3187654656,32,FLEN)
NAN_BOXED(2129724270,32,FLEN)
NAN_BOXED(2151938760,32,FLEN)
NAN_BOXED(3187662848,32,FLEN)
NAN_BOXED(2129724270,32,FLEN)
NAN_BOXED(2151938760,32,FLEN)
NAN_BOXED(3187666944,32,FLEN)
NAN_BOXED(2129724270,32,FLEN)
NAN_BOXED(2151938760,32,FLEN)
NAN_BOXED(3187668992,32,FLEN)
NAN_BOXED(2129724270,32,FLEN)
NAN_BOXED(2151938760,32,FLEN)
NAN_BOXED(3187670016,32,FLEN)
NAN_BOXED(2129724270,32,FLEN)
NAN_BOXED(2151938760,32,FLEN)
NAN_BOXED(3187670528,32,FLEN)
NAN_BOXED(2129724270,32,FLEN)
NAN_BOXED(2151938760,32,FLEN)
NAN_BOXED(3187670784,32,FLEN)
NAN_BOXED(2129724270,32,FLEN)
NAN_BOXED(2151938760,32,FLEN)
NAN_BOXED(3187670912,32,FLEN)
NAN_BOXED(2129724270,32,FLEN)
NAN_BOXED(2151938760,32,FLEN)
NAN_BOXED(3187670976,32,FLEN)
NAN_BOXED(2129724270,32,FLEN)
NAN_BOXED(2151938760,32,FLEN)
NAN_BOXED(3187671008,32,FLEN)
NAN_BOXED(2129724270,32,FLEN)
NAN_BOXED(2151938760,32,FLEN)
NAN_BOXED(3187671024,32,FLEN)
NAN_BOXED(2129724270,32,FLEN)
NAN_BOXED(2151938760,32,FLEN)
NAN_BOXED(3187671032,32,FLEN)
NAN_BOXED(2129724270,32,FLEN)
NAN_BOXED(2151938760,32,FLEN)
NAN_BOXED(3187671036,32,FLEN)
NAN_BOXED(2129724270,32,FLEN)
NAN_BOXED(2151938760,32,FLEN)
NAN_BOXED(3187671038,32,FLEN)
NAN_BOXED(2129724270,32,FLEN)
NAN_BOXED(2151938760,32,FLEN)
NAN_BOXED(3187671039,32,FLEN)
NAN_BOXED(2129724270,32,FLEN)
NAN_BOXED(2151938760,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2129724270,32,FLEN)
NAN_BOXED(2151938760,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2129724270,32,FLEN)
NAN_BOXED(2151938760,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
NAN_BOXED(2129724270,32,FLEN)
NAN_BOXED(2151938760,32,FLEN)
NAN_BOXED(3214514585,32,FLEN)
NAN_BOXED(2129724270,32,FLEN)
NAN_BOXED(2151938760,32,FLEN)
NAN_BOXED(3215233609,32,FLEN)
NAN_BOXED(2129724270,32,FLEN)
NAN_BOXED(2151938760,32,FLEN)
NAN_BOXED(3216192307,32,FLEN)
NAN_BOXED(2129724270,32,FLEN)
NAN_BOXED(2151938760,32,FLEN)
NAN_BOXED(3216431981,32,FLEN)
NAN_BOXED(2129724270,32,FLEN)
NAN_BOXED(2151938760,32,FLEN)
NAN_BOXED(3216751547,32,FLEN)
NAN_BOXED(2129724270,32,FLEN)
NAN_BOXED(2151938760,32,FLEN)
NAN_BOXED(3217310788,32,FLEN)
NAN_BOXED(2129724270,32,FLEN)
NAN_BOXED(2151938760,32,FLEN)
NAN_BOXED(3217870028,32,FLEN)
NAN_BOXED(2129724270,32,FLEN)
NAN_BOXED(2151938760,32,FLEN)
NAN_BOXED(3218828726,32,FLEN)
NAN_BOXED(2129724270,32,FLEN)
NAN_BOXED(2151938760,32,FLEN)
NAN_BOXED(3219547750,32,FLEN)
NAN_BOXED(2129724270,32,FLEN)
NAN_BOXED(2151938760,32,FLEN)
NAN_BOXED(3220027099,32,FLEN)
NAN_BOXED(2129724270,32,FLEN)
NAN_BOXED(2151938760,32,FLEN)
NAN_BOXED(3221225464,32,FLEN)
NAN_BOXED(2129724270,32,FLEN)
NAN_BOXED(2151938760,32,FLEN)
NAN_BOXED(3221225468,32,FLEN)
NAN_BOXED(2129724270,32,FLEN)
NAN_BOXED(2151938760,32,FLEN)
NAN_BOXED(3221225470,32,FLEN)
NAN_BOXED(2129756514,32,FLEN)
NAN_BOXED(3221728935,32,FLEN)
NAN_BOXED(3976200192,32,FLEN)
NAN_BOXED(2129756514,32,FLEN)
NAN_BOXED(3221728935,32,FLEN)
NAN_BOXED(3976200193,32,FLEN)
NAN_BOXED(2129756514,32,FLEN)
NAN_BOXED(3221728935,32,FLEN)
NAN_BOXED(3976200195,32,FLEN)
NAN_BOXED(2129756514,32,FLEN)
NAN_BOXED(3221728935,32,FLEN)
NAN_BOXED(3976200199,32,FLEN)
NAN_BOXED(2129756514,32,FLEN)
NAN_BOXED(3221728935,32,FLEN)
NAN_BOXED(3976200207,32,FLEN)
NAN_BOXED(2129756514,32,FLEN)
NAN_BOXED(3221728935,32,FLEN)
NAN_BOXED(3976200223,32,FLEN)
NAN_BOXED(2129756514,32,FLEN)
NAN_BOXED(3221728935,32,FLEN)
NAN_BOXED(3976200255,32,FLEN)
NAN_BOXED(2129756514,32,FLEN)
NAN_BOXED(3221728935,32,FLEN)
NAN_BOXED(3976200319,32,FLEN)
NAN_BOXED(2129756514,32,FLEN)
NAN_BOXED(3221728935,32,FLEN)
NAN_BOXED(3976200447,32,FLEN)
NAN_BOXED(2129756514,32,FLEN)
NAN_BOXED(3221728935,32,FLEN)
NAN_BOXED(3976200703,32,FLEN)
NAN_BOXED(2129756514,32,FLEN)
NAN_BOXED(3221728935,32,FLEN)
NAN_BOXED(3976201215,32,FLEN)
NAN_BOXED(2129756514,32,FLEN)
NAN_BOXED(3221728935,32,FLEN)
NAN_BOXED(3976202239,32,FLEN)
NAN_BOXED(2129756514,32,FLEN)
NAN_BOXED(3221728935,32,FLEN)
NAN_BOXED(3976204287,32,FLEN)
NAN_BOXED(2129756514,32,FLEN)
NAN_BOXED(3221728935,32,FLEN)
NAN_BOXED(3976208383,32,FLEN)
NAN_BOXED(2129756514,32,FLEN)
NAN_BOXED(3221728935,32,FLEN)
NAN_BOXED(3976216575,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
