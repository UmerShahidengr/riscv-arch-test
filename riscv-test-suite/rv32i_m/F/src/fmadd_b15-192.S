
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:17:59 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_24448:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x72cedb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef2cedb; op2val:0x0;
op3val:0xd000007; valaddr_reg:x3; val_offset:73344*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73344*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24449:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x72cedb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef2cedb; op2val:0x0;
op3val:0xd00000f; valaddr_reg:x3; val_offset:73347*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73347*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24450:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x72cedb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef2cedb; op2val:0x0;
op3val:0xd00001f; valaddr_reg:x3; val_offset:73350*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73350*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24451:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x72cedb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef2cedb; op2val:0x0;
op3val:0xd00003f; valaddr_reg:x3; val_offset:73353*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73353*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24452:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x72cedb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef2cedb; op2val:0x0;
op3val:0xd00007f; valaddr_reg:x3; val_offset:73356*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73356*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24453:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x72cedb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef2cedb; op2val:0x0;
op3val:0xd0000ff; valaddr_reg:x3; val_offset:73359*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73359*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24454:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x72cedb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef2cedb; op2val:0x0;
op3val:0xd0001ff; valaddr_reg:x3; val_offset:73362*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73362*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24455:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x72cedb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef2cedb; op2val:0x0;
op3val:0xd0003ff; valaddr_reg:x3; val_offset:73365*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73365*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24456:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x72cedb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef2cedb; op2val:0x0;
op3val:0xd0007ff; valaddr_reg:x3; val_offset:73368*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73368*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24457:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x72cedb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef2cedb; op2val:0x0;
op3val:0xd000fff; valaddr_reg:x3; val_offset:73371*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73371*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24458:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x72cedb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef2cedb; op2val:0x0;
op3val:0xd001fff; valaddr_reg:x3; val_offset:73374*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73374*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24459:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x72cedb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef2cedb; op2val:0x0;
op3val:0xd003fff; valaddr_reg:x3; val_offset:73377*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73377*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24460:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x72cedb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef2cedb; op2val:0x0;
op3val:0xd007fff; valaddr_reg:x3; val_offset:73380*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73380*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24461:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x72cedb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef2cedb; op2val:0x0;
op3val:0xd00ffff; valaddr_reg:x3; val_offset:73383*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73383*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24462:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x72cedb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef2cedb; op2val:0x0;
op3val:0xd01ffff; valaddr_reg:x3; val_offset:73386*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73386*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24463:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x72cedb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef2cedb; op2val:0x0;
op3val:0xd03ffff; valaddr_reg:x3; val_offset:73389*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73389*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24464:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x72cedb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef2cedb; op2val:0x0;
op3val:0xd07ffff; valaddr_reg:x3; val_offset:73392*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73392*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24465:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x72cedb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef2cedb; op2val:0x0;
op3val:0xd0fffff; valaddr_reg:x3; val_offset:73395*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73395*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24466:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x72cedb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef2cedb; op2val:0x0;
op3val:0xd1fffff; valaddr_reg:x3; val_offset:73398*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73398*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24467:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x72cedb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef2cedb; op2val:0x0;
op3val:0xd3fffff; valaddr_reg:x3; val_offset:73401*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73401*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24468:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x72cedb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef2cedb; op2val:0x0;
op3val:0xd400000; valaddr_reg:x3; val_offset:73404*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73404*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24469:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x72cedb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef2cedb; op2val:0x0;
op3val:0xd600000; valaddr_reg:x3; val_offset:73407*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73407*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24470:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x72cedb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef2cedb; op2val:0x0;
op3val:0xd700000; valaddr_reg:x3; val_offset:73410*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73410*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24471:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x72cedb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef2cedb; op2val:0x0;
op3val:0xd780000; valaddr_reg:x3; val_offset:73413*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73413*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24472:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x72cedb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef2cedb; op2val:0x0;
op3val:0xd7c0000; valaddr_reg:x3; val_offset:73416*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73416*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24473:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x72cedb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef2cedb; op2val:0x0;
op3val:0xd7e0000; valaddr_reg:x3; val_offset:73419*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73419*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24474:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x72cedb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef2cedb; op2val:0x0;
op3val:0xd7f0000; valaddr_reg:x3; val_offset:73422*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73422*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24475:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x72cedb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef2cedb; op2val:0x0;
op3val:0xd7f8000; valaddr_reg:x3; val_offset:73425*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73425*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24476:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x72cedb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef2cedb; op2val:0x0;
op3val:0xd7fc000; valaddr_reg:x3; val_offset:73428*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73428*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24477:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x72cedb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef2cedb; op2val:0x0;
op3val:0xd7fe000; valaddr_reg:x3; val_offset:73431*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73431*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24478:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x72cedb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef2cedb; op2val:0x0;
op3val:0xd7ff000; valaddr_reg:x3; val_offset:73434*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73434*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24479:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x72cedb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef2cedb; op2val:0x0;
op3val:0xd7ff800; valaddr_reg:x3; val_offset:73437*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73437*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24480:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x72cedb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef2cedb; op2val:0x0;
op3val:0xd7ffc00; valaddr_reg:x3; val_offset:73440*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73440*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24481:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x72cedb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef2cedb; op2val:0x0;
op3val:0xd7ffe00; valaddr_reg:x3; val_offset:73443*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73443*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24482:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x72cedb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef2cedb; op2val:0x0;
op3val:0xd7fff00; valaddr_reg:x3; val_offset:73446*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73446*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24483:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x72cedb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef2cedb; op2val:0x0;
op3val:0xd7fff80; valaddr_reg:x3; val_offset:73449*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73449*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24484:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x72cedb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef2cedb; op2val:0x0;
op3val:0xd7fffc0; valaddr_reg:x3; val_offset:73452*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73452*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24485:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x72cedb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef2cedb; op2val:0x0;
op3val:0xd7fffe0; valaddr_reg:x3; val_offset:73455*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73455*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24486:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x72cedb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef2cedb; op2val:0x0;
op3val:0xd7ffff0; valaddr_reg:x3; val_offset:73458*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73458*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24487:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x72cedb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef2cedb; op2val:0x0;
op3val:0xd7ffff8; valaddr_reg:x3; val_offset:73461*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73461*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24488:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x72cedb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef2cedb; op2val:0x0;
op3val:0xd7ffffc; valaddr_reg:x3; val_offset:73464*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73464*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24489:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x72cedb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef2cedb; op2val:0x0;
op3val:0xd7ffffe; valaddr_reg:x3; val_offset:73467*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73467*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24490:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x72cedb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef2cedb; op2val:0x0;
op3val:0xd7fffff; valaddr_reg:x3; val_offset:73470*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73470*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24491:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x72fcb4 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x06dad8 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef2fcb4; op2val:0x4006dad8;
op3val:0x7e000000; valaddr_reg:x3; val_offset:73473*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73473*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24492:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x72fcb4 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x06dad8 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef2fcb4; op2val:0x4006dad8;
op3val:0x7e000001; valaddr_reg:x3; val_offset:73476*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73476*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24493:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x72fcb4 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x06dad8 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef2fcb4; op2val:0x4006dad8;
op3val:0x7e000003; valaddr_reg:x3; val_offset:73479*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73479*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24494:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x72fcb4 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x06dad8 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef2fcb4; op2val:0x4006dad8;
op3val:0x7e000007; valaddr_reg:x3; val_offset:73482*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73482*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24495:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x72fcb4 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x06dad8 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef2fcb4; op2val:0x4006dad8;
op3val:0x7e00000f; valaddr_reg:x3; val_offset:73485*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73485*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24496:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x72fcb4 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x06dad8 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef2fcb4; op2val:0x4006dad8;
op3val:0x7e00001f; valaddr_reg:x3; val_offset:73488*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73488*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24497:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x72fcb4 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x06dad8 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef2fcb4; op2val:0x4006dad8;
op3val:0x7e00003f; valaddr_reg:x3; val_offset:73491*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73491*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24498:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x72fcb4 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x06dad8 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef2fcb4; op2val:0x4006dad8;
op3val:0x7e00007f; valaddr_reg:x3; val_offset:73494*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73494*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24499:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x72fcb4 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x06dad8 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef2fcb4; op2val:0x4006dad8;
op3val:0x7e0000ff; valaddr_reg:x3; val_offset:73497*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73497*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24500:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x72fcb4 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x06dad8 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef2fcb4; op2val:0x4006dad8;
op3val:0x7e0001ff; valaddr_reg:x3; val_offset:73500*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73500*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24501:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x72fcb4 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x06dad8 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef2fcb4; op2val:0x4006dad8;
op3val:0x7e0003ff; valaddr_reg:x3; val_offset:73503*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73503*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24502:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x72fcb4 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x06dad8 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef2fcb4; op2val:0x4006dad8;
op3val:0x7e0007ff; valaddr_reg:x3; val_offset:73506*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73506*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24503:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x72fcb4 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x06dad8 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef2fcb4; op2val:0x4006dad8;
op3val:0x7e000fff; valaddr_reg:x3; val_offset:73509*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73509*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24504:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x72fcb4 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x06dad8 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef2fcb4; op2val:0x4006dad8;
op3val:0x7e001fff; valaddr_reg:x3; val_offset:73512*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73512*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24505:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x72fcb4 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x06dad8 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef2fcb4; op2val:0x4006dad8;
op3val:0x7e003fff; valaddr_reg:x3; val_offset:73515*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73515*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24506:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x72fcb4 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x06dad8 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef2fcb4; op2val:0x4006dad8;
op3val:0x7e007fff; valaddr_reg:x3; val_offset:73518*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73518*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24507:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x72fcb4 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x06dad8 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef2fcb4; op2val:0x4006dad8;
op3val:0x7e00ffff; valaddr_reg:x3; val_offset:73521*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73521*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24508:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x72fcb4 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x06dad8 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef2fcb4; op2val:0x4006dad8;
op3val:0x7e01ffff; valaddr_reg:x3; val_offset:73524*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73524*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24509:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x72fcb4 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x06dad8 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef2fcb4; op2val:0x4006dad8;
op3val:0x7e03ffff; valaddr_reg:x3; val_offset:73527*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73527*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24510:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x72fcb4 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x06dad8 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef2fcb4; op2val:0x4006dad8;
op3val:0x7e07ffff; valaddr_reg:x3; val_offset:73530*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73530*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24511:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x72fcb4 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x06dad8 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef2fcb4; op2val:0x4006dad8;
op3val:0x7e0fffff; valaddr_reg:x3; val_offset:73533*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73533*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24512:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x72fcb4 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x06dad8 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef2fcb4; op2val:0x4006dad8;
op3val:0x7e1fffff; valaddr_reg:x3; val_offset:73536*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73536*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24513:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x72fcb4 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x06dad8 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef2fcb4; op2val:0x4006dad8;
op3val:0x7e3fffff; valaddr_reg:x3; val_offset:73539*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73539*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24514:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x72fcb4 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x06dad8 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef2fcb4; op2val:0x4006dad8;
op3val:0x7e400000; valaddr_reg:x3; val_offset:73542*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73542*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24515:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x72fcb4 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x06dad8 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef2fcb4; op2val:0x4006dad8;
op3val:0x7e600000; valaddr_reg:x3; val_offset:73545*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73545*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24516:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x72fcb4 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x06dad8 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef2fcb4; op2val:0x4006dad8;
op3val:0x7e700000; valaddr_reg:x3; val_offset:73548*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73548*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24517:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x72fcb4 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x06dad8 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef2fcb4; op2val:0x4006dad8;
op3val:0x7e780000; valaddr_reg:x3; val_offset:73551*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73551*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24518:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x72fcb4 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x06dad8 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef2fcb4; op2val:0x4006dad8;
op3val:0x7e7c0000; valaddr_reg:x3; val_offset:73554*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73554*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24519:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x72fcb4 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x06dad8 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef2fcb4; op2val:0x4006dad8;
op3val:0x7e7e0000; valaddr_reg:x3; val_offset:73557*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73557*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24520:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x72fcb4 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x06dad8 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef2fcb4; op2val:0x4006dad8;
op3val:0x7e7f0000; valaddr_reg:x3; val_offset:73560*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73560*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24521:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x72fcb4 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x06dad8 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef2fcb4; op2val:0x4006dad8;
op3val:0x7e7f8000; valaddr_reg:x3; val_offset:73563*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73563*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24522:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x72fcb4 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x06dad8 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef2fcb4; op2val:0x4006dad8;
op3val:0x7e7fc000; valaddr_reg:x3; val_offset:73566*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73566*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24523:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x72fcb4 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x06dad8 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef2fcb4; op2val:0x4006dad8;
op3val:0x7e7fe000; valaddr_reg:x3; val_offset:73569*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73569*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24524:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x72fcb4 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x06dad8 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef2fcb4; op2val:0x4006dad8;
op3val:0x7e7ff000; valaddr_reg:x3; val_offset:73572*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73572*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24525:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x72fcb4 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x06dad8 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef2fcb4; op2val:0x4006dad8;
op3val:0x7e7ff800; valaddr_reg:x3; val_offset:73575*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73575*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24526:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x72fcb4 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x06dad8 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef2fcb4; op2val:0x4006dad8;
op3val:0x7e7ffc00; valaddr_reg:x3; val_offset:73578*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73578*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24527:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x72fcb4 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x06dad8 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef2fcb4; op2val:0x4006dad8;
op3val:0x7e7ffe00; valaddr_reg:x3; val_offset:73581*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73581*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24528:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x72fcb4 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x06dad8 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef2fcb4; op2val:0x4006dad8;
op3val:0x7e7fff00; valaddr_reg:x3; val_offset:73584*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73584*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24529:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x72fcb4 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x06dad8 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef2fcb4; op2val:0x4006dad8;
op3val:0x7e7fff80; valaddr_reg:x3; val_offset:73587*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73587*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24530:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x72fcb4 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x06dad8 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef2fcb4; op2val:0x4006dad8;
op3val:0x7e7fffc0; valaddr_reg:x3; val_offset:73590*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73590*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24531:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x72fcb4 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x06dad8 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef2fcb4; op2val:0x4006dad8;
op3val:0x7e7fffe0; valaddr_reg:x3; val_offset:73593*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73593*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24532:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x72fcb4 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x06dad8 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef2fcb4; op2val:0x4006dad8;
op3val:0x7e7ffff0; valaddr_reg:x3; val_offset:73596*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73596*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24533:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x72fcb4 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x06dad8 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef2fcb4; op2val:0x4006dad8;
op3val:0x7e7ffff8; valaddr_reg:x3; val_offset:73599*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73599*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24534:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x72fcb4 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x06dad8 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef2fcb4; op2val:0x4006dad8;
op3val:0x7e7ffffc; valaddr_reg:x3; val_offset:73602*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73602*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24535:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x72fcb4 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x06dad8 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef2fcb4; op2val:0x4006dad8;
op3val:0x7e7ffffe; valaddr_reg:x3; val_offset:73605*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73605*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24536:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x72fcb4 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x06dad8 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef2fcb4; op2val:0x4006dad8;
op3val:0x7e7fffff; valaddr_reg:x3; val_offset:73608*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73608*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24537:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x72fcb4 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x06dad8 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef2fcb4; op2val:0x4006dad8;
op3val:0x7f000001; valaddr_reg:x3; val_offset:73611*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73611*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24538:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x72fcb4 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x06dad8 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef2fcb4; op2val:0x4006dad8;
op3val:0x7f000003; valaddr_reg:x3; val_offset:73614*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73614*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24539:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x72fcb4 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x06dad8 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef2fcb4; op2val:0x4006dad8;
op3val:0x7f000007; valaddr_reg:x3; val_offset:73617*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73617*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24540:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x72fcb4 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x06dad8 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef2fcb4; op2val:0x4006dad8;
op3val:0x7f199999; valaddr_reg:x3; val_offset:73620*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73620*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24541:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x72fcb4 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x06dad8 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef2fcb4; op2val:0x4006dad8;
op3val:0x7f249249; valaddr_reg:x3; val_offset:73623*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73623*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24542:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x72fcb4 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x06dad8 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef2fcb4; op2val:0x4006dad8;
op3val:0x7f333333; valaddr_reg:x3; val_offset:73626*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73626*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24543:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x72fcb4 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x06dad8 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef2fcb4; op2val:0x4006dad8;
op3val:0x7f36db6d; valaddr_reg:x3; val_offset:73629*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73629*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24544:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x72fcb4 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x06dad8 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef2fcb4; op2val:0x4006dad8;
op3val:0x7f3bbbbb; valaddr_reg:x3; val_offset:73632*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73632*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24545:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x72fcb4 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x06dad8 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef2fcb4; op2val:0x4006dad8;
op3val:0x7f444444; valaddr_reg:x3; val_offset:73635*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73635*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24546:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x72fcb4 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x06dad8 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef2fcb4; op2val:0x4006dad8;
op3val:0x7f4ccccc; valaddr_reg:x3; val_offset:73638*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73638*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24547:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x72fcb4 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x06dad8 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef2fcb4; op2val:0x4006dad8;
op3val:0x7f5b6db6; valaddr_reg:x3; val_offset:73641*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73641*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24548:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x72fcb4 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x06dad8 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef2fcb4; op2val:0x4006dad8;
op3val:0x7f666666; valaddr_reg:x3; val_offset:73644*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73644*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24549:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x72fcb4 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x06dad8 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef2fcb4; op2val:0x4006dad8;
op3val:0x7f6db6db; valaddr_reg:x3; val_offset:73647*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73647*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24550:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x72fcb4 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x06dad8 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef2fcb4; op2val:0x4006dad8;
op3val:0x7f7ffff8; valaddr_reg:x3; val_offset:73650*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73650*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24551:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x72fcb4 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x06dad8 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef2fcb4; op2val:0x4006dad8;
op3val:0x7f7ffffc; valaddr_reg:x3; val_offset:73653*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73653*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24552:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x72fcb4 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x06dad8 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef2fcb4; op2val:0x4006dad8;
op3val:0x7f7ffffe; valaddr_reg:x3; val_offset:73656*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73656*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24553:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x738906 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x434693 and fs3 == 0 and fe3 == 0x65 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef38906; op2val:0x434693;
op3val:0x32800000; valaddr_reg:x3; val_offset:73659*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73659*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24554:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x738906 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x434693 and fs3 == 0 and fe3 == 0x65 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef38906; op2val:0x434693;
op3val:0x32800001; valaddr_reg:x3; val_offset:73662*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73662*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24555:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x738906 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x434693 and fs3 == 0 and fe3 == 0x65 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef38906; op2val:0x434693;
op3val:0x32800003; valaddr_reg:x3; val_offset:73665*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73665*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24556:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x738906 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x434693 and fs3 == 0 and fe3 == 0x65 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef38906; op2val:0x434693;
op3val:0x32800007; valaddr_reg:x3; val_offset:73668*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73668*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24557:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x738906 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x434693 and fs3 == 0 and fe3 == 0x65 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef38906; op2val:0x434693;
op3val:0x3280000f; valaddr_reg:x3; val_offset:73671*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73671*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24558:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x738906 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x434693 and fs3 == 0 and fe3 == 0x65 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef38906; op2val:0x434693;
op3val:0x3280001f; valaddr_reg:x3; val_offset:73674*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73674*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24559:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x738906 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x434693 and fs3 == 0 and fe3 == 0x65 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef38906; op2val:0x434693;
op3val:0x3280003f; valaddr_reg:x3; val_offset:73677*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73677*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24560:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x738906 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x434693 and fs3 == 0 and fe3 == 0x65 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef38906; op2val:0x434693;
op3val:0x3280007f; valaddr_reg:x3; val_offset:73680*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73680*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24561:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x738906 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x434693 and fs3 == 0 and fe3 == 0x65 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef38906; op2val:0x434693;
op3val:0x328000ff; valaddr_reg:x3; val_offset:73683*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73683*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24562:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x738906 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x434693 and fs3 == 0 and fe3 == 0x65 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef38906; op2val:0x434693;
op3val:0x328001ff; valaddr_reg:x3; val_offset:73686*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73686*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24563:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x738906 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x434693 and fs3 == 0 and fe3 == 0x65 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef38906; op2val:0x434693;
op3val:0x328003ff; valaddr_reg:x3; val_offset:73689*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73689*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24564:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x738906 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x434693 and fs3 == 0 and fe3 == 0x65 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef38906; op2val:0x434693;
op3val:0x328007ff; valaddr_reg:x3; val_offset:73692*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73692*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24565:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x738906 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x434693 and fs3 == 0 and fe3 == 0x65 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef38906; op2val:0x434693;
op3val:0x32800fff; valaddr_reg:x3; val_offset:73695*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73695*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24566:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x738906 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x434693 and fs3 == 0 and fe3 == 0x65 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef38906; op2val:0x434693;
op3val:0x32801fff; valaddr_reg:x3; val_offset:73698*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73698*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24567:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x738906 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x434693 and fs3 == 0 and fe3 == 0x65 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef38906; op2val:0x434693;
op3val:0x32803fff; valaddr_reg:x3; val_offset:73701*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73701*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24568:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x738906 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x434693 and fs3 == 0 and fe3 == 0x65 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef38906; op2val:0x434693;
op3val:0x32807fff; valaddr_reg:x3; val_offset:73704*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73704*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24569:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x738906 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x434693 and fs3 == 0 and fe3 == 0x65 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef38906; op2val:0x434693;
op3val:0x3280ffff; valaddr_reg:x3; val_offset:73707*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73707*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24570:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x738906 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x434693 and fs3 == 0 and fe3 == 0x65 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef38906; op2val:0x434693;
op3val:0x3281ffff; valaddr_reg:x3; val_offset:73710*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73710*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24571:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x738906 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x434693 and fs3 == 0 and fe3 == 0x65 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef38906; op2val:0x434693;
op3val:0x3283ffff; valaddr_reg:x3; val_offset:73713*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73713*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24572:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x738906 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x434693 and fs3 == 0 and fe3 == 0x65 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef38906; op2val:0x434693;
op3val:0x3287ffff; valaddr_reg:x3; val_offset:73716*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73716*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24573:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x738906 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x434693 and fs3 == 0 and fe3 == 0x65 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef38906; op2val:0x434693;
op3val:0x328fffff; valaddr_reg:x3; val_offset:73719*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73719*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24574:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x738906 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x434693 and fs3 == 0 and fe3 == 0x65 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef38906; op2val:0x434693;
op3val:0x329fffff; valaddr_reg:x3; val_offset:73722*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73722*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24575:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x738906 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x434693 and fs3 == 0 and fe3 == 0x65 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef38906; op2val:0x434693;
op3val:0x32bfffff; valaddr_reg:x3; val_offset:73725*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73725*0 + 3*191*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2129841883,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218103815,32,FLEN)
NAN_BOXED(2129841883,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218103823,32,FLEN)
NAN_BOXED(2129841883,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218103839,32,FLEN)
NAN_BOXED(2129841883,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218103871,32,FLEN)
NAN_BOXED(2129841883,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218103935,32,FLEN)
NAN_BOXED(2129841883,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218104063,32,FLEN)
NAN_BOXED(2129841883,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218104319,32,FLEN)
NAN_BOXED(2129841883,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218104831,32,FLEN)
NAN_BOXED(2129841883,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218105855,32,FLEN)
NAN_BOXED(2129841883,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218107903,32,FLEN)
NAN_BOXED(2129841883,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218111999,32,FLEN)
NAN_BOXED(2129841883,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218120191,32,FLEN)
NAN_BOXED(2129841883,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218136575,32,FLEN)
NAN_BOXED(2129841883,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218169343,32,FLEN)
NAN_BOXED(2129841883,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218234879,32,FLEN)
NAN_BOXED(2129841883,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218365951,32,FLEN)
NAN_BOXED(2129841883,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218628095,32,FLEN)
NAN_BOXED(2129841883,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(219152383,32,FLEN)
NAN_BOXED(2129841883,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(220200959,32,FLEN)
NAN_BOXED(2129841883,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(222298111,32,FLEN)
NAN_BOXED(2129841883,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(222298112,32,FLEN)
NAN_BOXED(2129841883,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(224395264,32,FLEN)
NAN_BOXED(2129841883,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(225443840,32,FLEN)
NAN_BOXED(2129841883,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(225968128,32,FLEN)
NAN_BOXED(2129841883,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226230272,32,FLEN)
NAN_BOXED(2129841883,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226361344,32,FLEN)
NAN_BOXED(2129841883,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226426880,32,FLEN)
NAN_BOXED(2129841883,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226459648,32,FLEN)
NAN_BOXED(2129841883,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226476032,32,FLEN)
NAN_BOXED(2129841883,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226484224,32,FLEN)
NAN_BOXED(2129841883,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226488320,32,FLEN)
NAN_BOXED(2129841883,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226490368,32,FLEN)
NAN_BOXED(2129841883,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226491392,32,FLEN)
NAN_BOXED(2129841883,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226491904,32,FLEN)
NAN_BOXED(2129841883,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226492160,32,FLEN)
NAN_BOXED(2129841883,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226492288,32,FLEN)
NAN_BOXED(2129841883,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226492352,32,FLEN)
NAN_BOXED(2129841883,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226492384,32,FLEN)
NAN_BOXED(2129841883,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226492400,32,FLEN)
NAN_BOXED(2129841883,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226492408,32,FLEN)
NAN_BOXED(2129841883,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226492412,32,FLEN)
NAN_BOXED(2129841883,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226492414,32,FLEN)
NAN_BOXED(2129841883,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226492415,32,FLEN)
NAN_BOXED(2129853620,32,FLEN)
NAN_BOXED(1074191064,32,FLEN)
NAN_BOXED(2113929216,32,FLEN)
NAN_BOXED(2129853620,32,FLEN)
NAN_BOXED(1074191064,32,FLEN)
NAN_BOXED(2113929217,32,FLEN)
NAN_BOXED(2129853620,32,FLEN)
NAN_BOXED(1074191064,32,FLEN)
NAN_BOXED(2113929219,32,FLEN)
NAN_BOXED(2129853620,32,FLEN)
NAN_BOXED(1074191064,32,FLEN)
NAN_BOXED(2113929223,32,FLEN)
NAN_BOXED(2129853620,32,FLEN)
NAN_BOXED(1074191064,32,FLEN)
NAN_BOXED(2113929231,32,FLEN)
NAN_BOXED(2129853620,32,FLEN)
NAN_BOXED(1074191064,32,FLEN)
NAN_BOXED(2113929247,32,FLEN)
NAN_BOXED(2129853620,32,FLEN)
NAN_BOXED(1074191064,32,FLEN)
NAN_BOXED(2113929279,32,FLEN)
NAN_BOXED(2129853620,32,FLEN)
NAN_BOXED(1074191064,32,FLEN)
NAN_BOXED(2113929343,32,FLEN)
NAN_BOXED(2129853620,32,FLEN)
NAN_BOXED(1074191064,32,FLEN)
NAN_BOXED(2113929471,32,FLEN)
NAN_BOXED(2129853620,32,FLEN)
NAN_BOXED(1074191064,32,FLEN)
NAN_BOXED(2113929727,32,FLEN)
NAN_BOXED(2129853620,32,FLEN)
NAN_BOXED(1074191064,32,FLEN)
NAN_BOXED(2113930239,32,FLEN)
NAN_BOXED(2129853620,32,FLEN)
NAN_BOXED(1074191064,32,FLEN)
NAN_BOXED(2113931263,32,FLEN)
NAN_BOXED(2129853620,32,FLEN)
NAN_BOXED(1074191064,32,FLEN)
NAN_BOXED(2113933311,32,FLEN)
NAN_BOXED(2129853620,32,FLEN)
NAN_BOXED(1074191064,32,FLEN)
NAN_BOXED(2113937407,32,FLEN)
NAN_BOXED(2129853620,32,FLEN)
NAN_BOXED(1074191064,32,FLEN)
NAN_BOXED(2113945599,32,FLEN)
NAN_BOXED(2129853620,32,FLEN)
NAN_BOXED(1074191064,32,FLEN)
NAN_BOXED(2113961983,32,FLEN)
NAN_BOXED(2129853620,32,FLEN)
NAN_BOXED(1074191064,32,FLEN)
NAN_BOXED(2113994751,32,FLEN)
NAN_BOXED(2129853620,32,FLEN)
NAN_BOXED(1074191064,32,FLEN)
NAN_BOXED(2114060287,32,FLEN)
NAN_BOXED(2129853620,32,FLEN)
NAN_BOXED(1074191064,32,FLEN)
NAN_BOXED(2114191359,32,FLEN)
NAN_BOXED(2129853620,32,FLEN)
NAN_BOXED(1074191064,32,FLEN)
NAN_BOXED(2114453503,32,FLEN)
NAN_BOXED(2129853620,32,FLEN)
NAN_BOXED(1074191064,32,FLEN)
NAN_BOXED(2114977791,32,FLEN)
NAN_BOXED(2129853620,32,FLEN)
NAN_BOXED(1074191064,32,FLEN)
NAN_BOXED(2116026367,32,FLEN)
NAN_BOXED(2129853620,32,FLEN)
NAN_BOXED(1074191064,32,FLEN)
NAN_BOXED(2118123519,32,FLEN)
NAN_BOXED(2129853620,32,FLEN)
NAN_BOXED(1074191064,32,FLEN)
NAN_BOXED(2118123520,32,FLEN)
NAN_BOXED(2129853620,32,FLEN)
NAN_BOXED(1074191064,32,FLEN)
NAN_BOXED(2120220672,32,FLEN)
NAN_BOXED(2129853620,32,FLEN)
NAN_BOXED(1074191064,32,FLEN)
NAN_BOXED(2121269248,32,FLEN)
NAN_BOXED(2129853620,32,FLEN)
NAN_BOXED(1074191064,32,FLEN)
NAN_BOXED(2121793536,32,FLEN)
NAN_BOXED(2129853620,32,FLEN)
NAN_BOXED(1074191064,32,FLEN)
NAN_BOXED(2122055680,32,FLEN)
NAN_BOXED(2129853620,32,FLEN)
NAN_BOXED(1074191064,32,FLEN)
NAN_BOXED(2122186752,32,FLEN)
NAN_BOXED(2129853620,32,FLEN)
NAN_BOXED(1074191064,32,FLEN)
NAN_BOXED(2122252288,32,FLEN)
NAN_BOXED(2129853620,32,FLEN)
NAN_BOXED(1074191064,32,FLEN)
NAN_BOXED(2122285056,32,FLEN)
NAN_BOXED(2129853620,32,FLEN)
NAN_BOXED(1074191064,32,FLEN)
NAN_BOXED(2122301440,32,FLEN)
NAN_BOXED(2129853620,32,FLEN)
NAN_BOXED(1074191064,32,FLEN)
NAN_BOXED(2122309632,32,FLEN)
NAN_BOXED(2129853620,32,FLEN)
NAN_BOXED(1074191064,32,FLEN)
NAN_BOXED(2122313728,32,FLEN)
NAN_BOXED(2129853620,32,FLEN)
NAN_BOXED(1074191064,32,FLEN)
NAN_BOXED(2122315776,32,FLEN)
NAN_BOXED(2129853620,32,FLEN)
NAN_BOXED(1074191064,32,FLEN)
NAN_BOXED(2122316800,32,FLEN)
NAN_BOXED(2129853620,32,FLEN)
NAN_BOXED(1074191064,32,FLEN)
NAN_BOXED(2122317312,32,FLEN)
NAN_BOXED(2129853620,32,FLEN)
NAN_BOXED(1074191064,32,FLEN)
NAN_BOXED(2122317568,32,FLEN)
NAN_BOXED(2129853620,32,FLEN)
NAN_BOXED(1074191064,32,FLEN)
NAN_BOXED(2122317696,32,FLEN)
NAN_BOXED(2129853620,32,FLEN)
NAN_BOXED(1074191064,32,FLEN)
NAN_BOXED(2122317760,32,FLEN)
NAN_BOXED(2129853620,32,FLEN)
NAN_BOXED(1074191064,32,FLEN)
NAN_BOXED(2122317792,32,FLEN)
NAN_BOXED(2129853620,32,FLEN)
NAN_BOXED(1074191064,32,FLEN)
NAN_BOXED(2122317808,32,FLEN)
NAN_BOXED(2129853620,32,FLEN)
NAN_BOXED(1074191064,32,FLEN)
NAN_BOXED(2122317816,32,FLEN)
NAN_BOXED(2129853620,32,FLEN)
NAN_BOXED(1074191064,32,FLEN)
NAN_BOXED(2122317820,32,FLEN)
NAN_BOXED(2129853620,32,FLEN)
NAN_BOXED(1074191064,32,FLEN)
NAN_BOXED(2122317822,32,FLEN)
NAN_BOXED(2129853620,32,FLEN)
NAN_BOXED(1074191064,32,FLEN)
NAN_BOXED(2122317823,32,FLEN)
NAN_BOXED(2129853620,32,FLEN)
NAN_BOXED(1074191064,32,FLEN)
NAN_BOXED(2130706433,32,FLEN)
NAN_BOXED(2129853620,32,FLEN)
NAN_BOXED(1074191064,32,FLEN)
NAN_BOXED(2130706435,32,FLEN)
NAN_BOXED(2129853620,32,FLEN)
NAN_BOXED(1074191064,32,FLEN)
NAN_BOXED(2130706439,32,FLEN)
NAN_BOXED(2129853620,32,FLEN)
NAN_BOXED(1074191064,32,FLEN)
NAN_BOXED(2132384153,32,FLEN)
NAN_BOXED(2129853620,32,FLEN)
NAN_BOXED(1074191064,32,FLEN)
NAN_BOXED(2133103177,32,FLEN)
NAN_BOXED(2129853620,32,FLEN)
NAN_BOXED(1074191064,32,FLEN)
NAN_BOXED(2134061875,32,FLEN)
NAN_BOXED(2129853620,32,FLEN)
NAN_BOXED(1074191064,32,FLEN)
NAN_BOXED(2134301549,32,FLEN)
NAN_BOXED(2129853620,32,FLEN)
NAN_BOXED(1074191064,32,FLEN)
NAN_BOXED(2134621115,32,FLEN)
NAN_BOXED(2129853620,32,FLEN)
NAN_BOXED(1074191064,32,FLEN)
NAN_BOXED(2135180356,32,FLEN)
NAN_BOXED(2129853620,32,FLEN)
NAN_BOXED(1074191064,32,FLEN)
NAN_BOXED(2135739596,32,FLEN)
NAN_BOXED(2129853620,32,FLEN)
NAN_BOXED(1074191064,32,FLEN)
NAN_BOXED(2136698294,32,FLEN)
NAN_BOXED(2129853620,32,FLEN)
NAN_BOXED(1074191064,32,FLEN)
NAN_BOXED(2137417318,32,FLEN)
NAN_BOXED(2129853620,32,FLEN)
NAN_BOXED(1074191064,32,FLEN)
NAN_BOXED(2137896667,32,FLEN)
NAN_BOXED(2129853620,32,FLEN)
NAN_BOXED(1074191064,32,FLEN)
NAN_BOXED(2139095032,32,FLEN)
NAN_BOXED(2129853620,32,FLEN)
NAN_BOXED(1074191064,32,FLEN)
NAN_BOXED(2139095036,32,FLEN)
NAN_BOXED(2129853620,32,FLEN)
NAN_BOXED(1074191064,32,FLEN)
NAN_BOXED(2139095038,32,FLEN)
NAN_BOXED(2129889542,32,FLEN)
NAN_BOXED(4408979,32,FLEN)
NAN_BOXED(847249408,32,FLEN)
NAN_BOXED(2129889542,32,FLEN)
NAN_BOXED(4408979,32,FLEN)
NAN_BOXED(847249409,32,FLEN)
NAN_BOXED(2129889542,32,FLEN)
NAN_BOXED(4408979,32,FLEN)
NAN_BOXED(847249411,32,FLEN)
NAN_BOXED(2129889542,32,FLEN)
NAN_BOXED(4408979,32,FLEN)
NAN_BOXED(847249415,32,FLEN)
NAN_BOXED(2129889542,32,FLEN)
NAN_BOXED(4408979,32,FLEN)
NAN_BOXED(847249423,32,FLEN)
NAN_BOXED(2129889542,32,FLEN)
NAN_BOXED(4408979,32,FLEN)
NAN_BOXED(847249439,32,FLEN)
NAN_BOXED(2129889542,32,FLEN)
NAN_BOXED(4408979,32,FLEN)
NAN_BOXED(847249471,32,FLEN)
NAN_BOXED(2129889542,32,FLEN)
NAN_BOXED(4408979,32,FLEN)
NAN_BOXED(847249535,32,FLEN)
NAN_BOXED(2129889542,32,FLEN)
NAN_BOXED(4408979,32,FLEN)
NAN_BOXED(847249663,32,FLEN)
NAN_BOXED(2129889542,32,FLEN)
NAN_BOXED(4408979,32,FLEN)
NAN_BOXED(847249919,32,FLEN)
NAN_BOXED(2129889542,32,FLEN)
NAN_BOXED(4408979,32,FLEN)
NAN_BOXED(847250431,32,FLEN)
NAN_BOXED(2129889542,32,FLEN)
NAN_BOXED(4408979,32,FLEN)
NAN_BOXED(847251455,32,FLEN)
NAN_BOXED(2129889542,32,FLEN)
NAN_BOXED(4408979,32,FLEN)
NAN_BOXED(847253503,32,FLEN)
NAN_BOXED(2129889542,32,FLEN)
NAN_BOXED(4408979,32,FLEN)
NAN_BOXED(847257599,32,FLEN)
NAN_BOXED(2129889542,32,FLEN)
NAN_BOXED(4408979,32,FLEN)
NAN_BOXED(847265791,32,FLEN)
NAN_BOXED(2129889542,32,FLEN)
NAN_BOXED(4408979,32,FLEN)
NAN_BOXED(847282175,32,FLEN)
NAN_BOXED(2129889542,32,FLEN)
NAN_BOXED(4408979,32,FLEN)
NAN_BOXED(847314943,32,FLEN)
NAN_BOXED(2129889542,32,FLEN)
NAN_BOXED(4408979,32,FLEN)
NAN_BOXED(847380479,32,FLEN)
NAN_BOXED(2129889542,32,FLEN)
NAN_BOXED(4408979,32,FLEN)
NAN_BOXED(847511551,32,FLEN)
NAN_BOXED(2129889542,32,FLEN)
NAN_BOXED(4408979,32,FLEN)
NAN_BOXED(847773695,32,FLEN)
NAN_BOXED(2129889542,32,FLEN)
NAN_BOXED(4408979,32,FLEN)
NAN_BOXED(848297983,32,FLEN)
NAN_BOXED(2129889542,32,FLEN)
NAN_BOXED(4408979,32,FLEN)
NAN_BOXED(849346559,32,FLEN)
NAN_BOXED(2129889542,32,FLEN)
NAN_BOXED(4408979,32,FLEN)
NAN_BOXED(851443711,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
