
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:17:59 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_24704:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74b97b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x05e5c0 and fs3 == 1 and fe3 == 0xd1 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4b97b; op2val:0xc005e5c0;
op3val:0xe8fc0000; valaddr_reg:x3; val_offset:74112*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74112*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24705:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74b97b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x05e5c0 and fs3 == 1 and fe3 == 0xd1 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4b97b; op2val:0xc005e5c0;
op3val:0xe8fe0000; valaddr_reg:x3; val_offset:74115*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74115*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24706:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74b97b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x05e5c0 and fs3 == 1 and fe3 == 0xd1 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4b97b; op2val:0xc005e5c0;
op3val:0xe8ff0000; valaddr_reg:x3; val_offset:74118*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74118*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24707:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74b97b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x05e5c0 and fs3 == 1 and fe3 == 0xd1 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4b97b; op2val:0xc005e5c0;
op3val:0xe8ff8000; valaddr_reg:x3; val_offset:74121*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74121*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24708:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74b97b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x05e5c0 and fs3 == 1 and fe3 == 0xd1 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4b97b; op2val:0xc005e5c0;
op3val:0xe8ffc000; valaddr_reg:x3; val_offset:74124*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74124*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24709:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74b97b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x05e5c0 and fs3 == 1 and fe3 == 0xd1 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4b97b; op2val:0xc005e5c0;
op3val:0xe8ffe000; valaddr_reg:x3; val_offset:74127*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74127*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24710:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74b97b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x05e5c0 and fs3 == 1 and fe3 == 0xd1 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4b97b; op2val:0xc005e5c0;
op3val:0xe8fff000; valaddr_reg:x3; val_offset:74130*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74130*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24711:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74b97b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x05e5c0 and fs3 == 1 and fe3 == 0xd1 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4b97b; op2val:0xc005e5c0;
op3val:0xe8fff800; valaddr_reg:x3; val_offset:74133*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74133*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24712:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74b97b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x05e5c0 and fs3 == 1 and fe3 == 0xd1 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4b97b; op2val:0xc005e5c0;
op3val:0xe8fffc00; valaddr_reg:x3; val_offset:74136*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74136*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24713:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74b97b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x05e5c0 and fs3 == 1 and fe3 == 0xd1 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4b97b; op2val:0xc005e5c0;
op3val:0xe8fffe00; valaddr_reg:x3; val_offset:74139*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74139*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24714:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74b97b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x05e5c0 and fs3 == 1 and fe3 == 0xd1 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4b97b; op2val:0xc005e5c0;
op3val:0xe8ffff00; valaddr_reg:x3; val_offset:74142*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74142*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24715:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74b97b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x05e5c0 and fs3 == 1 and fe3 == 0xd1 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4b97b; op2val:0xc005e5c0;
op3val:0xe8ffff80; valaddr_reg:x3; val_offset:74145*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74145*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24716:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74b97b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x05e5c0 and fs3 == 1 and fe3 == 0xd1 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4b97b; op2val:0xc005e5c0;
op3val:0xe8ffffc0; valaddr_reg:x3; val_offset:74148*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74148*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24717:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74b97b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x05e5c0 and fs3 == 1 and fe3 == 0xd1 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4b97b; op2val:0xc005e5c0;
op3val:0xe8ffffe0; valaddr_reg:x3; val_offset:74151*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74151*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24718:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74b97b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x05e5c0 and fs3 == 1 and fe3 == 0xd1 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4b97b; op2val:0xc005e5c0;
op3val:0xe8fffff0; valaddr_reg:x3; val_offset:74154*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74154*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24719:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74b97b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x05e5c0 and fs3 == 1 and fe3 == 0xd1 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4b97b; op2val:0xc005e5c0;
op3val:0xe8fffff8; valaddr_reg:x3; val_offset:74157*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74157*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24720:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74b97b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x05e5c0 and fs3 == 1 and fe3 == 0xd1 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4b97b; op2val:0xc005e5c0;
op3val:0xe8fffffc; valaddr_reg:x3; val_offset:74160*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74160*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24721:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74b97b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x05e5c0 and fs3 == 1 and fe3 == 0xd1 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4b97b; op2val:0xc005e5c0;
op3val:0xe8fffffe; valaddr_reg:x3; val_offset:74163*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74163*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24722:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74b97b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x05e5c0 and fs3 == 1 and fe3 == 0xd1 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4b97b; op2val:0xc005e5c0;
op3val:0xe8ffffff; valaddr_reg:x3; val_offset:74166*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74166*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24723:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74b97b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x05e5c0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4b97b; op2val:0xc005e5c0;
op3val:0xff000001; valaddr_reg:x3; val_offset:74169*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74169*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24724:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74b97b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x05e5c0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4b97b; op2val:0xc005e5c0;
op3val:0xff000003; valaddr_reg:x3; val_offset:74172*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74172*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24725:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74b97b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x05e5c0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4b97b; op2val:0xc005e5c0;
op3val:0xff000007; valaddr_reg:x3; val_offset:74175*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74175*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24726:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74b97b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x05e5c0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4b97b; op2val:0xc005e5c0;
op3val:0xff199999; valaddr_reg:x3; val_offset:74178*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74178*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24727:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74b97b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x05e5c0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4b97b; op2val:0xc005e5c0;
op3val:0xff249249; valaddr_reg:x3; val_offset:74181*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74181*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24728:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74b97b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x05e5c0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4b97b; op2val:0xc005e5c0;
op3val:0xff333333; valaddr_reg:x3; val_offset:74184*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74184*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24729:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74b97b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x05e5c0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4b97b; op2val:0xc005e5c0;
op3val:0xff36db6d; valaddr_reg:x3; val_offset:74187*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74187*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24730:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74b97b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x05e5c0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4b97b; op2val:0xc005e5c0;
op3val:0xff3bbbbb; valaddr_reg:x3; val_offset:74190*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74190*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24731:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74b97b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x05e5c0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4b97b; op2val:0xc005e5c0;
op3val:0xff444444; valaddr_reg:x3; val_offset:74193*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74193*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24732:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74b97b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x05e5c0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4b97b; op2val:0xc005e5c0;
op3val:0xff4ccccc; valaddr_reg:x3; val_offset:74196*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74196*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24733:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74b97b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x05e5c0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4b97b; op2val:0xc005e5c0;
op3val:0xff5b6db6; valaddr_reg:x3; val_offset:74199*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74199*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24734:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74b97b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x05e5c0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4b97b; op2val:0xc005e5c0;
op3val:0xff666666; valaddr_reg:x3; val_offset:74202*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74202*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24735:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74b97b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x05e5c0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4b97b; op2val:0xc005e5c0;
op3val:0xff6db6db; valaddr_reg:x3; val_offset:74205*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74205*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24736:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74b97b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x05e5c0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4b97b; op2val:0xc005e5c0;
op3val:0xff7ffff8; valaddr_reg:x3; val_offset:74208*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74208*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24737:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74b97b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x05e5c0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4b97b; op2val:0xc005e5c0;
op3val:0xff7ffffc; valaddr_reg:x3; val_offset:74211*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74211*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24738:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74b97b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x05e5c0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4b97b; op2val:0xc005e5c0;
op3val:0xff7ffffe; valaddr_reg:x3; val_offset:74214*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74214*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24739:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7521af and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef521af; op2val:0x0;
op3val:0x0; valaddr_reg:x3; val_offset:74217*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74217*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24740:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7521af and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef521af; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:74220*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74220*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24741:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7521af and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef521af; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:74223*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74223*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24742:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7521af and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef521af; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:74226*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74226*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24743:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7521af and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef521af; op2val:0x0;
op3val:0xf; valaddr_reg:x3; val_offset:74229*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74229*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24744:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7521af and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef521af; op2val:0x0;
op3val:0x1f; valaddr_reg:x3; val_offset:74232*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74232*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24745:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7521af and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef521af; op2val:0x0;
op3val:0x3f; valaddr_reg:x3; val_offset:74235*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74235*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24746:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7521af and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef521af; op2val:0x0;
op3val:0x7f; valaddr_reg:x3; val_offset:74238*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74238*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24747:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7521af and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef521af; op2val:0x0;
op3val:0xff; valaddr_reg:x3; val_offset:74241*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74241*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24748:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7521af and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef521af; op2val:0x0;
op3val:0x1ff; valaddr_reg:x3; val_offset:74244*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74244*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24749:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7521af and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef521af; op2val:0x0;
op3val:0x3ff; valaddr_reg:x3; val_offset:74247*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74247*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24750:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7521af and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef521af; op2val:0x0;
op3val:0x7ff; valaddr_reg:x3; val_offset:74250*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74250*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24751:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7521af and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef521af; op2val:0x0;
op3val:0xfff; valaddr_reg:x3; val_offset:74253*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74253*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24752:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7521af and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef521af; op2val:0x0;
op3val:0x1fff; valaddr_reg:x3; val_offset:74256*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74256*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24753:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7521af and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef521af; op2val:0x0;
op3val:0x3fff; valaddr_reg:x3; val_offset:74259*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74259*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24754:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7521af and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef521af; op2val:0x0;
op3val:0x7fff; valaddr_reg:x3; val_offset:74262*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74262*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24755:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7521af and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef521af; op2val:0x0;
op3val:0xffff; valaddr_reg:x3; val_offset:74265*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74265*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24756:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7521af and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef521af; op2val:0x0;
op3val:0x1ffff; valaddr_reg:x3; val_offset:74268*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74268*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24757:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7521af and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef521af; op2val:0x0;
op3val:0x3ffff; valaddr_reg:x3; val_offset:74271*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74271*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24758:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7521af and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef521af; op2val:0x0;
op3val:0x7ffff; valaddr_reg:x3; val_offset:74274*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74274*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24759:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7521af and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef521af; op2val:0x0;
op3val:0xfffff; valaddr_reg:x3; val_offset:74277*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74277*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24760:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7521af and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef521af; op2val:0x0;
op3val:0x199999; valaddr_reg:x3; val_offset:74280*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74280*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24761:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7521af and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef521af; op2val:0x0;
op3val:0x1fffff; valaddr_reg:x3; val_offset:74283*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74283*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24762:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7521af and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef521af; op2val:0x0;
op3val:0x249249; valaddr_reg:x3; val_offset:74286*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74286*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24763:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7521af and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef521af; op2val:0x0;
op3val:0x333333; valaddr_reg:x3; val_offset:74289*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74289*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24764:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7521af and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef521af; op2val:0x0;
op3val:0x36db6d; valaddr_reg:x3; val_offset:74292*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74292*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24765:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7521af and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef521af; op2val:0x0;
op3val:0x3bbbbb; valaddr_reg:x3; val_offset:74295*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74295*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24766:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7521af and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef521af; op2val:0x0;
op3val:0x3fffff; valaddr_reg:x3; val_offset:74298*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74298*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24767:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7521af and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef521af; op2val:0x0;
op3val:0x400000; valaddr_reg:x3; val_offset:74301*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74301*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24768:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7521af and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef521af; op2val:0x0;
op3val:0x444444; valaddr_reg:x3; val_offset:74304*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74304*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24769:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7521af and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef521af; op2val:0x0;
op3val:0x4ccccc; valaddr_reg:x3; val_offset:74307*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74307*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24770:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7521af and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef521af; op2val:0x0;
op3val:0x5b6db6; valaddr_reg:x3; val_offset:74310*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74310*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24771:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7521af and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef521af; op2val:0x0;
op3val:0x600000; valaddr_reg:x3; val_offset:74313*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74313*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24772:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7521af and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef521af; op2val:0x0;
op3val:0x666666; valaddr_reg:x3; val_offset:74316*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74316*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24773:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7521af and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef521af; op2val:0x0;
op3val:0x6db6db; valaddr_reg:x3; val_offset:74319*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74319*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24774:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7521af and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef521af; op2val:0x0;
op3val:0x700000; valaddr_reg:x3; val_offset:74322*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74322*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24775:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7521af and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef521af; op2val:0x0;
op3val:0x780000; valaddr_reg:x3; val_offset:74325*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74325*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24776:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7521af and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef521af; op2val:0x0;
op3val:0x7c0000; valaddr_reg:x3; val_offset:74328*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74328*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24777:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7521af and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef521af; op2val:0x0;
op3val:0x7e0000; valaddr_reg:x3; val_offset:74331*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74331*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24778:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7521af and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef521af; op2val:0x0;
op3val:0x7f0000; valaddr_reg:x3; val_offset:74334*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74334*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24779:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7521af and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef521af; op2val:0x0;
op3val:0x7f8000; valaddr_reg:x3; val_offset:74337*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74337*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24780:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7521af and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef521af; op2val:0x0;
op3val:0x7fc000; valaddr_reg:x3; val_offset:74340*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74340*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24781:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7521af and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef521af; op2val:0x0;
op3val:0x7fe000; valaddr_reg:x3; val_offset:74343*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74343*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24782:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7521af and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef521af; op2val:0x0;
op3val:0x7ff000; valaddr_reg:x3; val_offset:74346*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74346*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24783:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7521af and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef521af; op2val:0x0;
op3val:0x7ff800; valaddr_reg:x3; val_offset:74349*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74349*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24784:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7521af and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef521af; op2val:0x0;
op3val:0x7ffc00; valaddr_reg:x3; val_offset:74352*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74352*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24785:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7521af and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef521af; op2val:0x0;
op3val:0x7ffe00; valaddr_reg:x3; val_offset:74355*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74355*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24786:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7521af and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef521af; op2val:0x0;
op3val:0x7fff00; valaddr_reg:x3; val_offset:74358*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74358*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24787:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7521af and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef521af; op2val:0x0;
op3val:0x7fff80; valaddr_reg:x3; val_offset:74361*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74361*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24788:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7521af and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef521af; op2val:0x0;
op3val:0x7fffc0; valaddr_reg:x3; val_offset:74364*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74364*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24789:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7521af and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef521af; op2val:0x0;
op3val:0x7fffe0; valaddr_reg:x3; val_offset:74367*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74367*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24790:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7521af and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef521af; op2val:0x0;
op3val:0x7ffff0; valaddr_reg:x3; val_offset:74370*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74370*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24791:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7521af and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef521af; op2val:0x0;
op3val:0x7ffff8; valaddr_reg:x3; val_offset:74373*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74373*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24792:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7521af and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef521af; op2val:0x0;
op3val:0x7ffffc; valaddr_reg:x3; val_offset:74376*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74376*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24793:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7521af and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef521af; op2val:0x0;
op3val:0x7ffffe; valaddr_reg:x3; val_offset:74379*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74379*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24794:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7521af and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef521af; op2val:0x0;
op3val:0x7fffff; valaddr_reg:x3; val_offset:74382*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74382*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24795:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75544f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5544f; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:74385*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74385*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24796:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75544f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5544f; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:74388*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74388*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24797:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75544f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5544f; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:74391*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74391*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24798:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75544f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5544f; op2val:0x0;
op3val:0x199999; valaddr_reg:x3; val_offset:74394*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74394*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24799:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75544f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5544f; op2val:0x0;
op3val:0x249249; valaddr_reg:x3; val_offset:74397*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74397*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24800:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75544f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5544f; op2val:0x0;
op3val:0x333333; valaddr_reg:x3; val_offset:74400*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74400*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24801:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75544f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5544f; op2val:0x0;
op3val:0x36db6d; valaddr_reg:x3; val_offset:74403*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74403*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24802:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75544f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5544f; op2val:0x0;
op3val:0x3bbbbb; valaddr_reg:x3; val_offset:74406*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74406*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24803:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75544f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5544f; op2val:0x0;
op3val:0x444444; valaddr_reg:x3; val_offset:74409*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74409*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24804:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75544f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5544f; op2val:0x0;
op3val:0x4ccccc; valaddr_reg:x3; val_offset:74412*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74412*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24805:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75544f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5544f; op2val:0x0;
op3val:0x5b6db6; valaddr_reg:x3; val_offset:74415*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74415*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24806:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75544f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5544f; op2val:0x0;
op3val:0x666666; valaddr_reg:x3; val_offset:74418*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74418*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24807:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75544f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5544f; op2val:0x0;
op3val:0x6db6db; valaddr_reg:x3; val_offset:74421*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74421*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24808:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75544f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5544f; op2val:0x0;
op3val:0x7ffff8; valaddr_reg:x3; val_offset:74424*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74424*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24809:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75544f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5544f; op2val:0x0;
op3val:0x7ffffc; valaddr_reg:x3; val_offset:74427*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74427*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24810:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75544f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5544f; op2val:0x0;
op3val:0x7ffffe; valaddr_reg:x3; val_offset:74430*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74430*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24811:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75544f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5544f; op2val:0x0;
op3val:0xe800000; valaddr_reg:x3; val_offset:74433*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74433*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24812:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75544f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5544f; op2val:0x0;
op3val:0xe800001; valaddr_reg:x3; val_offset:74436*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74436*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24813:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75544f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5544f; op2val:0x0;
op3val:0xe800003; valaddr_reg:x3; val_offset:74439*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74439*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24814:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75544f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5544f; op2val:0x0;
op3val:0xe800007; valaddr_reg:x3; val_offset:74442*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74442*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24815:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75544f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5544f; op2val:0x0;
op3val:0xe80000f; valaddr_reg:x3; val_offset:74445*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74445*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24816:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75544f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5544f; op2val:0x0;
op3val:0xe80001f; valaddr_reg:x3; val_offset:74448*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74448*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24817:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75544f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5544f; op2val:0x0;
op3val:0xe80003f; valaddr_reg:x3; val_offset:74451*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74451*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24818:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75544f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5544f; op2val:0x0;
op3val:0xe80007f; valaddr_reg:x3; val_offset:74454*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74454*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24819:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75544f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5544f; op2val:0x0;
op3val:0xe8000ff; valaddr_reg:x3; val_offset:74457*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74457*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24820:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75544f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5544f; op2val:0x0;
op3val:0xe8001ff; valaddr_reg:x3; val_offset:74460*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74460*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24821:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75544f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5544f; op2val:0x0;
op3val:0xe8003ff; valaddr_reg:x3; val_offset:74463*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74463*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24822:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75544f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5544f; op2val:0x0;
op3val:0xe8007ff; valaddr_reg:x3; val_offset:74466*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74466*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24823:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75544f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5544f; op2val:0x0;
op3val:0xe800fff; valaddr_reg:x3; val_offset:74469*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74469*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24824:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75544f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5544f; op2val:0x0;
op3val:0xe801fff; valaddr_reg:x3; val_offset:74472*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74472*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24825:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75544f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5544f; op2val:0x0;
op3val:0xe803fff; valaddr_reg:x3; val_offset:74475*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74475*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24826:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75544f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5544f; op2val:0x0;
op3val:0xe807fff; valaddr_reg:x3; val_offset:74478*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74478*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24827:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75544f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5544f; op2val:0x0;
op3val:0xe80ffff; valaddr_reg:x3; val_offset:74481*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74481*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24828:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75544f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5544f; op2val:0x0;
op3val:0xe81ffff; valaddr_reg:x3; val_offset:74484*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74484*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24829:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75544f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5544f; op2val:0x0;
op3val:0xe83ffff; valaddr_reg:x3; val_offset:74487*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74487*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24830:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75544f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5544f; op2val:0x0;
op3val:0xe87ffff; valaddr_reg:x3; val_offset:74490*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74490*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24831:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75544f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5544f; op2val:0x0;
op3val:0xe8fffff; valaddr_reg:x3; val_offset:74493*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74493*0 + 3*193*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2129967483,32,FLEN)
NAN_BOXED(3221611968,32,FLEN)
NAN_BOXED(3908829184,32,FLEN)
NAN_BOXED(2129967483,32,FLEN)
NAN_BOXED(3221611968,32,FLEN)
NAN_BOXED(3908960256,32,FLEN)
NAN_BOXED(2129967483,32,FLEN)
NAN_BOXED(3221611968,32,FLEN)
NAN_BOXED(3909025792,32,FLEN)
NAN_BOXED(2129967483,32,FLEN)
NAN_BOXED(3221611968,32,FLEN)
NAN_BOXED(3909058560,32,FLEN)
NAN_BOXED(2129967483,32,FLEN)
NAN_BOXED(3221611968,32,FLEN)
NAN_BOXED(3909074944,32,FLEN)
NAN_BOXED(2129967483,32,FLEN)
NAN_BOXED(3221611968,32,FLEN)
NAN_BOXED(3909083136,32,FLEN)
NAN_BOXED(2129967483,32,FLEN)
NAN_BOXED(3221611968,32,FLEN)
NAN_BOXED(3909087232,32,FLEN)
NAN_BOXED(2129967483,32,FLEN)
NAN_BOXED(3221611968,32,FLEN)
NAN_BOXED(3909089280,32,FLEN)
NAN_BOXED(2129967483,32,FLEN)
NAN_BOXED(3221611968,32,FLEN)
NAN_BOXED(3909090304,32,FLEN)
NAN_BOXED(2129967483,32,FLEN)
NAN_BOXED(3221611968,32,FLEN)
NAN_BOXED(3909090816,32,FLEN)
NAN_BOXED(2129967483,32,FLEN)
NAN_BOXED(3221611968,32,FLEN)
NAN_BOXED(3909091072,32,FLEN)
NAN_BOXED(2129967483,32,FLEN)
NAN_BOXED(3221611968,32,FLEN)
NAN_BOXED(3909091200,32,FLEN)
NAN_BOXED(2129967483,32,FLEN)
NAN_BOXED(3221611968,32,FLEN)
NAN_BOXED(3909091264,32,FLEN)
NAN_BOXED(2129967483,32,FLEN)
NAN_BOXED(3221611968,32,FLEN)
NAN_BOXED(3909091296,32,FLEN)
NAN_BOXED(2129967483,32,FLEN)
NAN_BOXED(3221611968,32,FLEN)
NAN_BOXED(3909091312,32,FLEN)
NAN_BOXED(2129967483,32,FLEN)
NAN_BOXED(3221611968,32,FLEN)
NAN_BOXED(3909091320,32,FLEN)
NAN_BOXED(2129967483,32,FLEN)
NAN_BOXED(3221611968,32,FLEN)
NAN_BOXED(3909091324,32,FLEN)
NAN_BOXED(2129967483,32,FLEN)
NAN_BOXED(3221611968,32,FLEN)
NAN_BOXED(3909091326,32,FLEN)
NAN_BOXED(2129967483,32,FLEN)
NAN_BOXED(3221611968,32,FLEN)
NAN_BOXED(3909091327,32,FLEN)
NAN_BOXED(2129967483,32,FLEN)
NAN_BOXED(3221611968,32,FLEN)
NAN_BOXED(4278190081,32,FLEN)
NAN_BOXED(2129967483,32,FLEN)
NAN_BOXED(3221611968,32,FLEN)
NAN_BOXED(4278190083,32,FLEN)
NAN_BOXED(2129967483,32,FLEN)
NAN_BOXED(3221611968,32,FLEN)
NAN_BOXED(4278190087,32,FLEN)
NAN_BOXED(2129967483,32,FLEN)
NAN_BOXED(3221611968,32,FLEN)
NAN_BOXED(4279867801,32,FLEN)
NAN_BOXED(2129967483,32,FLEN)
NAN_BOXED(3221611968,32,FLEN)
NAN_BOXED(4280586825,32,FLEN)
NAN_BOXED(2129967483,32,FLEN)
NAN_BOXED(3221611968,32,FLEN)
NAN_BOXED(4281545523,32,FLEN)
NAN_BOXED(2129967483,32,FLEN)
NAN_BOXED(3221611968,32,FLEN)
NAN_BOXED(4281785197,32,FLEN)
NAN_BOXED(2129967483,32,FLEN)
NAN_BOXED(3221611968,32,FLEN)
NAN_BOXED(4282104763,32,FLEN)
NAN_BOXED(2129967483,32,FLEN)
NAN_BOXED(3221611968,32,FLEN)
NAN_BOXED(4282664004,32,FLEN)
NAN_BOXED(2129967483,32,FLEN)
NAN_BOXED(3221611968,32,FLEN)
NAN_BOXED(4283223244,32,FLEN)
NAN_BOXED(2129967483,32,FLEN)
NAN_BOXED(3221611968,32,FLEN)
NAN_BOXED(4284181942,32,FLEN)
NAN_BOXED(2129967483,32,FLEN)
NAN_BOXED(3221611968,32,FLEN)
NAN_BOXED(4284900966,32,FLEN)
NAN_BOXED(2129967483,32,FLEN)
NAN_BOXED(3221611968,32,FLEN)
NAN_BOXED(4285380315,32,FLEN)
NAN_BOXED(2129967483,32,FLEN)
NAN_BOXED(3221611968,32,FLEN)
NAN_BOXED(4286578680,32,FLEN)
NAN_BOXED(2129967483,32,FLEN)
NAN_BOXED(3221611968,32,FLEN)
NAN_BOXED(4286578684,32,FLEN)
NAN_BOXED(2129967483,32,FLEN)
NAN_BOXED(3221611968,32,FLEN)
NAN_BOXED(4286578686,32,FLEN)
NAN_BOXED(2129994159,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2129994159,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2129994159,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3,32,FLEN)
NAN_BOXED(2129994159,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7,32,FLEN)
NAN_BOXED(2129994159,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(15,32,FLEN)
NAN_BOXED(2129994159,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(31,32,FLEN)
NAN_BOXED(2129994159,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(63,32,FLEN)
NAN_BOXED(2129994159,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(127,32,FLEN)
NAN_BOXED(2129994159,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(255,32,FLEN)
NAN_BOXED(2129994159,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(511,32,FLEN)
NAN_BOXED(2129994159,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1023,32,FLEN)
NAN_BOXED(2129994159,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2047,32,FLEN)
NAN_BOXED(2129994159,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4095,32,FLEN)
NAN_BOXED(2129994159,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8191,32,FLEN)
NAN_BOXED(2129994159,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16383,32,FLEN)
NAN_BOXED(2129994159,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(32767,32,FLEN)
NAN_BOXED(2129994159,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(65535,32,FLEN)
NAN_BOXED(2129994159,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(131071,32,FLEN)
NAN_BOXED(2129994159,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(262143,32,FLEN)
NAN_BOXED(2129994159,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(524287,32,FLEN)
NAN_BOXED(2129994159,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1048575,32,FLEN)
NAN_BOXED(2129994159,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1677721,32,FLEN)
NAN_BOXED(2129994159,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2097151,32,FLEN)
NAN_BOXED(2129994159,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2396745,32,FLEN)
NAN_BOXED(2129994159,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3355443,32,FLEN)
NAN_BOXED(2129994159,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3595117,32,FLEN)
NAN_BOXED(2129994159,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3914683,32,FLEN)
NAN_BOXED(2129994159,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4194303,32,FLEN)
NAN_BOXED(2129994159,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4194304,32,FLEN)
NAN_BOXED(2129994159,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4473924,32,FLEN)
NAN_BOXED(2129994159,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5033164,32,FLEN)
NAN_BOXED(2129994159,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5991862,32,FLEN)
NAN_BOXED(2129994159,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(6291456,32,FLEN)
NAN_BOXED(2129994159,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(6710886,32,FLEN)
NAN_BOXED(2129994159,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7190235,32,FLEN)
NAN_BOXED(2129994159,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7340032,32,FLEN)
NAN_BOXED(2129994159,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7864320,32,FLEN)
NAN_BOXED(2129994159,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8126464,32,FLEN)
NAN_BOXED(2129994159,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8257536,32,FLEN)
NAN_BOXED(2129994159,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8323072,32,FLEN)
NAN_BOXED(2129994159,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8355840,32,FLEN)
NAN_BOXED(2129994159,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8372224,32,FLEN)
NAN_BOXED(2129994159,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8380416,32,FLEN)
NAN_BOXED(2129994159,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8384512,32,FLEN)
NAN_BOXED(2129994159,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8386560,32,FLEN)
NAN_BOXED(2129994159,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8387584,32,FLEN)
NAN_BOXED(2129994159,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388096,32,FLEN)
NAN_BOXED(2129994159,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388352,32,FLEN)
NAN_BOXED(2129994159,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388480,32,FLEN)
NAN_BOXED(2129994159,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388544,32,FLEN)
NAN_BOXED(2129994159,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388576,32,FLEN)
NAN_BOXED(2129994159,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388592,32,FLEN)
NAN_BOXED(2129994159,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388600,32,FLEN)
NAN_BOXED(2129994159,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388604,32,FLEN)
NAN_BOXED(2129994159,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388606,32,FLEN)
NAN_BOXED(2129994159,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(2130007119,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2130007119,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3,32,FLEN)
NAN_BOXED(2130007119,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7,32,FLEN)
NAN_BOXED(2130007119,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1677721,32,FLEN)
NAN_BOXED(2130007119,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2396745,32,FLEN)
NAN_BOXED(2130007119,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3355443,32,FLEN)
NAN_BOXED(2130007119,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3595117,32,FLEN)
NAN_BOXED(2130007119,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3914683,32,FLEN)
NAN_BOXED(2130007119,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4473924,32,FLEN)
NAN_BOXED(2130007119,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5033164,32,FLEN)
NAN_BOXED(2130007119,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5991862,32,FLEN)
NAN_BOXED(2130007119,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(6710886,32,FLEN)
NAN_BOXED(2130007119,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7190235,32,FLEN)
NAN_BOXED(2130007119,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388600,32,FLEN)
NAN_BOXED(2130007119,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388604,32,FLEN)
NAN_BOXED(2130007119,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388606,32,FLEN)
NAN_BOXED(2130007119,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243269632,32,FLEN)
NAN_BOXED(2130007119,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243269633,32,FLEN)
NAN_BOXED(2130007119,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243269635,32,FLEN)
NAN_BOXED(2130007119,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243269639,32,FLEN)
NAN_BOXED(2130007119,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243269647,32,FLEN)
NAN_BOXED(2130007119,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243269663,32,FLEN)
NAN_BOXED(2130007119,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243269695,32,FLEN)
NAN_BOXED(2130007119,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243269759,32,FLEN)
NAN_BOXED(2130007119,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243269887,32,FLEN)
NAN_BOXED(2130007119,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243270143,32,FLEN)
NAN_BOXED(2130007119,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243270655,32,FLEN)
NAN_BOXED(2130007119,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243271679,32,FLEN)
NAN_BOXED(2130007119,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243273727,32,FLEN)
NAN_BOXED(2130007119,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243277823,32,FLEN)
NAN_BOXED(2130007119,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243286015,32,FLEN)
NAN_BOXED(2130007119,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243302399,32,FLEN)
NAN_BOXED(2130007119,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243335167,32,FLEN)
NAN_BOXED(2130007119,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243400703,32,FLEN)
NAN_BOXED(2130007119,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243531775,32,FLEN)
NAN_BOXED(2130007119,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243793919,32,FLEN)
NAN_BOXED(2130007119,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(244318207,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
