
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:17:59 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_25088:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7759e0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x423ce2 and fs3 == 1 and fe3 == 0x92 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef759e0; op2val:0x80423ce2;
op3val:0xc97f0000; valaddr_reg:x3; val_offset:75264*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75264*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25089:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7759e0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x423ce2 and fs3 == 1 and fe3 == 0x92 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef759e0; op2val:0x80423ce2;
op3val:0xc97f8000; valaddr_reg:x3; val_offset:75267*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75267*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25090:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7759e0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x423ce2 and fs3 == 1 and fe3 == 0x92 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef759e0; op2val:0x80423ce2;
op3val:0xc97fc000; valaddr_reg:x3; val_offset:75270*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75270*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25091:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7759e0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x423ce2 and fs3 == 1 and fe3 == 0x92 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef759e0; op2val:0x80423ce2;
op3val:0xc97fe000; valaddr_reg:x3; val_offset:75273*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75273*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25092:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7759e0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x423ce2 and fs3 == 1 and fe3 == 0x92 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef759e0; op2val:0x80423ce2;
op3val:0xc97ff000; valaddr_reg:x3; val_offset:75276*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75276*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25093:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7759e0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x423ce2 and fs3 == 1 and fe3 == 0x92 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef759e0; op2val:0x80423ce2;
op3val:0xc97ff800; valaddr_reg:x3; val_offset:75279*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75279*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25094:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7759e0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x423ce2 and fs3 == 1 and fe3 == 0x92 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef759e0; op2val:0x80423ce2;
op3val:0xc97ffc00; valaddr_reg:x3; val_offset:75282*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75282*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25095:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7759e0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x423ce2 and fs3 == 1 and fe3 == 0x92 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef759e0; op2val:0x80423ce2;
op3val:0xc97ffe00; valaddr_reg:x3; val_offset:75285*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75285*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25096:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7759e0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x423ce2 and fs3 == 1 and fe3 == 0x92 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef759e0; op2val:0x80423ce2;
op3val:0xc97fff00; valaddr_reg:x3; val_offset:75288*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75288*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25097:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7759e0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x423ce2 and fs3 == 1 and fe3 == 0x92 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef759e0; op2val:0x80423ce2;
op3val:0xc97fff80; valaddr_reg:x3; val_offset:75291*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75291*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25098:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7759e0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x423ce2 and fs3 == 1 and fe3 == 0x92 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef759e0; op2val:0x80423ce2;
op3val:0xc97fffc0; valaddr_reg:x3; val_offset:75294*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75294*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25099:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7759e0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x423ce2 and fs3 == 1 and fe3 == 0x92 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef759e0; op2val:0x80423ce2;
op3val:0xc97fffe0; valaddr_reg:x3; val_offset:75297*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75297*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25100:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7759e0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x423ce2 and fs3 == 1 and fe3 == 0x92 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef759e0; op2val:0x80423ce2;
op3val:0xc97ffff0; valaddr_reg:x3; val_offset:75300*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75300*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25101:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7759e0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x423ce2 and fs3 == 1 and fe3 == 0x92 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef759e0; op2val:0x80423ce2;
op3val:0xc97ffff8; valaddr_reg:x3; val_offset:75303*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75303*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25102:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7759e0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x423ce2 and fs3 == 1 and fe3 == 0x92 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef759e0; op2val:0x80423ce2;
op3val:0xc97ffffc; valaddr_reg:x3; val_offset:75306*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75306*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25103:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7759e0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x423ce2 and fs3 == 1 and fe3 == 0x92 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef759e0; op2val:0x80423ce2;
op3val:0xc97ffffe; valaddr_reg:x3; val_offset:75309*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75309*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25104:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7759e0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x423ce2 and fs3 == 1 and fe3 == 0x92 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef759e0; op2val:0x80423ce2;
op3val:0xc97fffff; valaddr_reg:x3; val_offset:75312*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75312*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25105:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77a83e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4227ec and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7a83e; op2val:0x804227ec;
op3val:0xbf800001; valaddr_reg:x3; val_offset:75315*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75315*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25106:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77a83e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4227ec and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7a83e; op2val:0x804227ec;
op3val:0xbf800003; valaddr_reg:x3; val_offset:75318*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75318*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25107:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77a83e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4227ec and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7a83e; op2val:0x804227ec;
op3val:0xbf800007; valaddr_reg:x3; val_offset:75321*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75321*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25108:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77a83e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4227ec and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7a83e; op2val:0x804227ec;
op3val:0xbf999999; valaddr_reg:x3; val_offset:75324*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75324*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25109:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77a83e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4227ec and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7a83e; op2val:0x804227ec;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:75327*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75327*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25110:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77a83e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4227ec and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7a83e; op2val:0x804227ec;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:75330*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75330*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25111:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77a83e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4227ec and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7a83e; op2val:0x804227ec;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:75333*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75333*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25112:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77a83e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4227ec and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7a83e; op2val:0x804227ec;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:75336*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75336*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25113:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77a83e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4227ec and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7a83e; op2val:0x804227ec;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:75339*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75339*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25114:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77a83e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4227ec and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7a83e; op2val:0x804227ec;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:75342*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75342*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25115:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77a83e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4227ec and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7a83e; op2val:0x804227ec;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:75345*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75345*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25116:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77a83e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4227ec and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7a83e; op2val:0x804227ec;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:75348*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75348*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25117:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77a83e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4227ec and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7a83e; op2val:0x804227ec;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:75351*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75351*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25118:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77a83e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4227ec and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7a83e; op2val:0x804227ec;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:75354*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75354*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25119:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77a83e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4227ec and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7a83e; op2val:0x804227ec;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:75357*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75357*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25120:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77a83e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4227ec and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7a83e; op2val:0x804227ec;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:75360*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75360*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25121:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77a83e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4227ec and fs3 == 1 and fe3 == 0x83 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7a83e; op2val:0x804227ec;
op3val:0xc1800000; valaddr_reg:x3; val_offset:75363*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75363*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25122:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77a83e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4227ec and fs3 == 1 and fe3 == 0x83 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7a83e; op2val:0x804227ec;
op3val:0xc1800001; valaddr_reg:x3; val_offset:75366*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75366*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25123:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77a83e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4227ec and fs3 == 1 and fe3 == 0x83 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7a83e; op2val:0x804227ec;
op3val:0xc1800003; valaddr_reg:x3; val_offset:75369*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75369*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25124:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77a83e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4227ec and fs3 == 1 and fe3 == 0x83 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7a83e; op2val:0x804227ec;
op3val:0xc1800007; valaddr_reg:x3; val_offset:75372*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75372*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25125:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77a83e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4227ec and fs3 == 1 and fe3 == 0x83 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7a83e; op2val:0x804227ec;
op3val:0xc180000f; valaddr_reg:x3; val_offset:75375*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75375*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25126:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77a83e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4227ec and fs3 == 1 and fe3 == 0x83 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7a83e; op2val:0x804227ec;
op3val:0xc180001f; valaddr_reg:x3; val_offset:75378*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75378*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25127:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77a83e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4227ec and fs3 == 1 and fe3 == 0x83 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7a83e; op2val:0x804227ec;
op3val:0xc180003f; valaddr_reg:x3; val_offset:75381*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75381*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25128:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77a83e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4227ec and fs3 == 1 and fe3 == 0x83 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7a83e; op2val:0x804227ec;
op3val:0xc180007f; valaddr_reg:x3; val_offset:75384*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75384*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25129:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77a83e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4227ec and fs3 == 1 and fe3 == 0x83 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7a83e; op2val:0x804227ec;
op3val:0xc18000ff; valaddr_reg:x3; val_offset:75387*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75387*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25130:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77a83e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4227ec and fs3 == 1 and fe3 == 0x83 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7a83e; op2val:0x804227ec;
op3val:0xc18001ff; valaddr_reg:x3; val_offset:75390*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75390*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25131:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77a83e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4227ec and fs3 == 1 and fe3 == 0x83 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7a83e; op2val:0x804227ec;
op3val:0xc18003ff; valaddr_reg:x3; val_offset:75393*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75393*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25132:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77a83e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4227ec and fs3 == 1 and fe3 == 0x83 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7a83e; op2val:0x804227ec;
op3val:0xc18007ff; valaddr_reg:x3; val_offset:75396*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75396*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25133:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77a83e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4227ec and fs3 == 1 and fe3 == 0x83 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7a83e; op2val:0x804227ec;
op3val:0xc1800fff; valaddr_reg:x3; val_offset:75399*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75399*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25134:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77a83e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4227ec and fs3 == 1 and fe3 == 0x83 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7a83e; op2val:0x804227ec;
op3val:0xc1801fff; valaddr_reg:x3; val_offset:75402*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75402*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25135:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77a83e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4227ec and fs3 == 1 and fe3 == 0x83 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7a83e; op2val:0x804227ec;
op3val:0xc1803fff; valaddr_reg:x3; val_offset:75405*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75405*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25136:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77a83e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4227ec and fs3 == 1 and fe3 == 0x83 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7a83e; op2val:0x804227ec;
op3val:0xc1807fff; valaddr_reg:x3; val_offset:75408*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75408*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25137:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77a83e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4227ec and fs3 == 1 and fe3 == 0x83 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7a83e; op2val:0x804227ec;
op3val:0xc180ffff; valaddr_reg:x3; val_offset:75411*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75411*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25138:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77a83e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4227ec and fs3 == 1 and fe3 == 0x83 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7a83e; op2val:0x804227ec;
op3val:0xc181ffff; valaddr_reg:x3; val_offset:75414*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75414*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25139:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77a83e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4227ec and fs3 == 1 and fe3 == 0x83 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7a83e; op2val:0x804227ec;
op3val:0xc183ffff; valaddr_reg:x3; val_offset:75417*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75417*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25140:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77a83e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4227ec and fs3 == 1 and fe3 == 0x83 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7a83e; op2val:0x804227ec;
op3val:0xc187ffff; valaddr_reg:x3; val_offset:75420*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75420*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25141:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77a83e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4227ec and fs3 == 1 and fe3 == 0x83 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7a83e; op2val:0x804227ec;
op3val:0xc18fffff; valaddr_reg:x3; val_offset:75423*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75423*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25142:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77a83e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4227ec and fs3 == 1 and fe3 == 0x83 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7a83e; op2val:0x804227ec;
op3val:0xc19fffff; valaddr_reg:x3; val_offset:75426*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75426*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25143:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77a83e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4227ec and fs3 == 1 and fe3 == 0x83 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7a83e; op2val:0x804227ec;
op3val:0xc1bfffff; valaddr_reg:x3; val_offset:75429*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75429*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25144:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77a83e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4227ec and fs3 == 1 and fe3 == 0x83 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7a83e; op2val:0x804227ec;
op3val:0xc1c00000; valaddr_reg:x3; val_offset:75432*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75432*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25145:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77a83e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4227ec and fs3 == 1 and fe3 == 0x83 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7a83e; op2val:0x804227ec;
op3val:0xc1e00000; valaddr_reg:x3; val_offset:75435*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75435*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25146:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77a83e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4227ec and fs3 == 1 and fe3 == 0x83 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7a83e; op2val:0x804227ec;
op3val:0xc1f00000; valaddr_reg:x3; val_offset:75438*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75438*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25147:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77a83e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4227ec and fs3 == 1 and fe3 == 0x83 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7a83e; op2val:0x804227ec;
op3val:0xc1f80000; valaddr_reg:x3; val_offset:75441*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75441*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25148:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77a83e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4227ec and fs3 == 1 and fe3 == 0x83 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7a83e; op2val:0x804227ec;
op3val:0xc1fc0000; valaddr_reg:x3; val_offset:75444*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75444*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25149:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77a83e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4227ec and fs3 == 1 and fe3 == 0x83 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7a83e; op2val:0x804227ec;
op3val:0xc1fe0000; valaddr_reg:x3; val_offset:75447*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75447*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25150:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77a83e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4227ec and fs3 == 1 and fe3 == 0x83 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7a83e; op2val:0x804227ec;
op3val:0xc1ff0000; valaddr_reg:x3; val_offset:75450*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75450*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25151:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77a83e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4227ec and fs3 == 1 and fe3 == 0x83 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7a83e; op2val:0x804227ec;
op3val:0xc1ff8000; valaddr_reg:x3; val_offset:75453*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75453*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25152:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77a83e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4227ec and fs3 == 1 and fe3 == 0x83 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7a83e; op2val:0x804227ec;
op3val:0xc1ffc000; valaddr_reg:x3; val_offset:75456*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75456*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25153:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77a83e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4227ec and fs3 == 1 and fe3 == 0x83 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7a83e; op2val:0x804227ec;
op3val:0xc1ffe000; valaddr_reg:x3; val_offset:75459*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75459*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25154:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77a83e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4227ec and fs3 == 1 and fe3 == 0x83 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7a83e; op2val:0x804227ec;
op3val:0xc1fff000; valaddr_reg:x3; val_offset:75462*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75462*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25155:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77a83e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4227ec and fs3 == 1 and fe3 == 0x83 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7a83e; op2val:0x804227ec;
op3val:0xc1fff800; valaddr_reg:x3; val_offset:75465*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75465*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25156:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77a83e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4227ec and fs3 == 1 and fe3 == 0x83 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7a83e; op2val:0x804227ec;
op3val:0xc1fffc00; valaddr_reg:x3; val_offset:75468*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75468*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25157:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77a83e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4227ec and fs3 == 1 and fe3 == 0x83 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7a83e; op2val:0x804227ec;
op3val:0xc1fffe00; valaddr_reg:x3; val_offset:75471*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75471*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25158:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77a83e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4227ec and fs3 == 1 and fe3 == 0x83 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7a83e; op2val:0x804227ec;
op3val:0xc1ffff00; valaddr_reg:x3; val_offset:75474*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75474*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25159:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77a83e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4227ec and fs3 == 1 and fe3 == 0x83 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7a83e; op2val:0x804227ec;
op3val:0xc1ffff80; valaddr_reg:x3; val_offset:75477*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75477*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25160:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77a83e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4227ec and fs3 == 1 and fe3 == 0x83 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7a83e; op2val:0x804227ec;
op3val:0xc1ffffc0; valaddr_reg:x3; val_offset:75480*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75480*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25161:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77a83e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4227ec and fs3 == 1 and fe3 == 0x83 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7a83e; op2val:0x804227ec;
op3val:0xc1ffffe0; valaddr_reg:x3; val_offset:75483*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75483*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25162:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77a83e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4227ec and fs3 == 1 and fe3 == 0x83 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7a83e; op2val:0x804227ec;
op3val:0xc1fffff0; valaddr_reg:x3; val_offset:75486*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75486*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25163:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77a83e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4227ec and fs3 == 1 and fe3 == 0x83 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7a83e; op2val:0x804227ec;
op3val:0xc1fffff8; valaddr_reg:x3; val_offset:75489*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75489*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25164:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77a83e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4227ec and fs3 == 1 and fe3 == 0x83 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7a83e; op2val:0x804227ec;
op3val:0xc1fffffc; valaddr_reg:x3; val_offset:75492*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75492*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25165:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77a83e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4227ec and fs3 == 1 and fe3 == 0x83 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7a83e; op2val:0x804227ec;
op3val:0xc1fffffe; valaddr_reg:x3; val_offset:75495*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75495*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25166:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77a83e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4227ec and fs3 == 1 and fe3 == 0x83 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7a83e; op2val:0x804227ec;
op3val:0xc1ffffff; valaddr_reg:x3; val_offset:75498*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75498*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25167:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7930c1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41bfb8 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef930c1; op2val:0x41bfb8;
op3val:0x3f800001; valaddr_reg:x3; val_offset:75501*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75501*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25168:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7930c1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41bfb8 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef930c1; op2val:0x41bfb8;
op3val:0x3f800003; valaddr_reg:x3; val_offset:75504*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75504*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25169:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7930c1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41bfb8 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef930c1; op2val:0x41bfb8;
op3val:0x3f800007; valaddr_reg:x3; val_offset:75507*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75507*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25170:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7930c1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41bfb8 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef930c1; op2val:0x41bfb8;
op3val:0x3f999999; valaddr_reg:x3; val_offset:75510*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75510*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25171:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7930c1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41bfb8 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef930c1; op2val:0x41bfb8;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:75513*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75513*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25172:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7930c1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41bfb8 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef930c1; op2val:0x41bfb8;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:75516*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75516*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25173:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7930c1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41bfb8 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef930c1; op2val:0x41bfb8;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:75519*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75519*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25174:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7930c1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41bfb8 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef930c1; op2val:0x41bfb8;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:75522*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75522*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25175:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7930c1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41bfb8 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef930c1; op2val:0x41bfb8;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:75525*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75525*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25176:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7930c1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41bfb8 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef930c1; op2val:0x41bfb8;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:75528*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75528*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25177:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7930c1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41bfb8 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef930c1; op2val:0x41bfb8;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:75531*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75531*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25178:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7930c1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41bfb8 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef930c1; op2val:0x41bfb8;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:75534*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75534*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25179:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7930c1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41bfb8 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef930c1; op2val:0x41bfb8;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:75537*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75537*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25180:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7930c1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41bfb8 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef930c1; op2val:0x41bfb8;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:75540*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75540*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25181:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7930c1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41bfb8 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef930c1; op2val:0x41bfb8;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:75543*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75543*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25182:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7930c1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41bfb8 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef930c1; op2val:0x41bfb8;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:75546*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75546*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25183:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7930c1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41bfb8 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef930c1; op2val:0x41bfb8;
op3val:0x4c000000; valaddr_reg:x3; val_offset:75549*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75549*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25184:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7930c1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41bfb8 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef930c1; op2val:0x41bfb8;
op3val:0x4c000001; valaddr_reg:x3; val_offset:75552*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75552*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25185:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7930c1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41bfb8 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef930c1; op2val:0x41bfb8;
op3val:0x4c000003; valaddr_reg:x3; val_offset:75555*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75555*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25186:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7930c1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41bfb8 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef930c1; op2val:0x41bfb8;
op3val:0x4c000007; valaddr_reg:x3; val_offset:75558*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75558*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25187:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7930c1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41bfb8 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef930c1; op2val:0x41bfb8;
op3val:0x4c00000f; valaddr_reg:x3; val_offset:75561*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75561*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25188:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7930c1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41bfb8 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef930c1; op2val:0x41bfb8;
op3val:0x4c00001f; valaddr_reg:x3; val_offset:75564*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75564*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25189:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7930c1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41bfb8 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef930c1; op2val:0x41bfb8;
op3val:0x4c00003f; valaddr_reg:x3; val_offset:75567*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75567*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25190:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7930c1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41bfb8 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef930c1; op2val:0x41bfb8;
op3val:0x4c00007f; valaddr_reg:x3; val_offset:75570*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75570*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25191:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7930c1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41bfb8 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef930c1; op2val:0x41bfb8;
op3val:0x4c0000ff; valaddr_reg:x3; val_offset:75573*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75573*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25192:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7930c1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41bfb8 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef930c1; op2val:0x41bfb8;
op3val:0x4c0001ff; valaddr_reg:x3; val_offset:75576*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75576*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25193:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7930c1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41bfb8 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef930c1; op2val:0x41bfb8;
op3val:0x4c0003ff; valaddr_reg:x3; val_offset:75579*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75579*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25194:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7930c1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41bfb8 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef930c1; op2val:0x41bfb8;
op3val:0x4c0007ff; valaddr_reg:x3; val_offset:75582*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75582*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25195:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7930c1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41bfb8 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef930c1; op2val:0x41bfb8;
op3val:0x4c000fff; valaddr_reg:x3; val_offset:75585*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75585*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25196:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7930c1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41bfb8 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef930c1; op2val:0x41bfb8;
op3val:0x4c001fff; valaddr_reg:x3; val_offset:75588*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75588*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25197:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7930c1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41bfb8 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef930c1; op2val:0x41bfb8;
op3val:0x4c003fff; valaddr_reg:x3; val_offset:75591*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75591*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25198:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7930c1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41bfb8 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef930c1; op2val:0x41bfb8;
op3val:0x4c007fff; valaddr_reg:x3; val_offset:75594*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75594*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25199:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7930c1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41bfb8 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef930c1; op2val:0x41bfb8;
op3val:0x4c00ffff; valaddr_reg:x3; val_offset:75597*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75597*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25200:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7930c1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41bfb8 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef930c1; op2val:0x41bfb8;
op3val:0x4c01ffff; valaddr_reg:x3; val_offset:75600*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75600*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25201:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7930c1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41bfb8 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef930c1; op2val:0x41bfb8;
op3val:0x4c03ffff; valaddr_reg:x3; val_offset:75603*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75603*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25202:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7930c1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41bfb8 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef930c1; op2val:0x41bfb8;
op3val:0x4c07ffff; valaddr_reg:x3; val_offset:75606*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75606*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25203:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7930c1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41bfb8 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef930c1; op2val:0x41bfb8;
op3val:0x4c0fffff; valaddr_reg:x3; val_offset:75609*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75609*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25204:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7930c1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41bfb8 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef930c1; op2val:0x41bfb8;
op3val:0x4c1fffff; valaddr_reg:x3; val_offset:75612*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75612*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25205:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7930c1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41bfb8 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef930c1; op2val:0x41bfb8;
op3val:0x4c3fffff; valaddr_reg:x3; val_offset:75615*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75615*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25206:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7930c1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41bfb8 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef930c1; op2val:0x41bfb8;
op3val:0x4c400000; valaddr_reg:x3; val_offset:75618*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75618*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25207:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7930c1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41bfb8 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef930c1; op2val:0x41bfb8;
op3val:0x4c600000; valaddr_reg:x3; val_offset:75621*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75621*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25208:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7930c1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41bfb8 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef930c1; op2val:0x41bfb8;
op3val:0x4c700000; valaddr_reg:x3; val_offset:75624*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75624*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25209:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7930c1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41bfb8 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef930c1; op2val:0x41bfb8;
op3val:0x4c780000; valaddr_reg:x3; val_offset:75627*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75627*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25210:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7930c1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41bfb8 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef930c1; op2val:0x41bfb8;
op3val:0x4c7c0000; valaddr_reg:x3; val_offset:75630*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75630*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25211:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7930c1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41bfb8 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef930c1; op2val:0x41bfb8;
op3val:0x4c7e0000; valaddr_reg:x3; val_offset:75633*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75633*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25212:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7930c1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41bfb8 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef930c1; op2val:0x41bfb8;
op3val:0x4c7f0000; valaddr_reg:x3; val_offset:75636*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75636*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25213:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7930c1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41bfb8 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef930c1; op2val:0x41bfb8;
op3val:0x4c7f8000; valaddr_reg:x3; val_offset:75639*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75639*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25214:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7930c1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41bfb8 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef930c1; op2val:0x41bfb8;
op3val:0x4c7fc000; valaddr_reg:x3; val_offset:75642*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75642*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25215:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7930c1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41bfb8 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef930c1; op2val:0x41bfb8;
op3val:0x4c7fe000; valaddr_reg:x3; val_offset:75645*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75645*0 + 3*196*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2130139616,32,FLEN)
NAN_BOXED(2151824610,32,FLEN)
NAN_BOXED(3380543488,32,FLEN)
NAN_BOXED(2130139616,32,FLEN)
NAN_BOXED(2151824610,32,FLEN)
NAN_BOXED(3380576256,32,FLEN)
NAN_BOXED(2130139616,32,FLEN)
NAN_BOXED(2151824610,32,FLEN)
NAN_BOXED(3380592640,32,FLEN)
NAN_BOXED(2130139616,32,FLEN)
NAN_BOXED(2151824610,32,FLEN)
NAN_BOXED(3380600832,32,FLEN)
NAN_BOXED(2130139616,32,FLEN)
NAN_BOXED(2151824610,32,FLEN)
NAN_BOXED(3380604928,32,FLEN)
NAN_BOXED(2130139616,32,FLEN)
NAN_BOXED(2151824610,32,FLEN)
NAN_BOXED(3380606976,32,FLEN)
NAN_BOXED(2130139616,32,FLEN)
NAN_BOXED(2151824610,32,FLEN)
NAN_BOXED(3380608000,32,FLEN)
NAN_BOXED(2130139616,32,FLEN)
NAN_BOXED(2151824610,32,FLEN)
NAN_BOXED(3380608512,32,FLEN)
NAN_BOXED(2130139616,32,FLEN)
NAN_BOXED(2151824610,32,FLEN)
NAN_BOXED(3380608768,32,FLEN)
NAN_BOXED(2130139616,32,FLEN)
NAN_BOXED(2151824610,32,FLEN)
NAN_BOXED(3380608896,32,FLEN)
NAN_BOXED(2130139616,32,FLEN)
NAN_BOXED(2151824610,32,FLEN)
NAN_BOXED(3380608960,32,FLEN)
NAN_BOXED(2130139616,32,FLEN)
NAN_BOXED(2151824610,32,FLEN)
NAN_BOXED(3380608992,32,FLEN)
NAN_BOXED(2130139616,32,FLEN)
NAN_BOXED(2151824610,32,FLEN)
NAN_BOXED(3380609008,32,FLEN)
NAN_BOXED(2130139616,32,FLEN)
NAN_BOXED(2151824610,32,FLEN)
NAN_BOXED(3380609016,32,FLEN)
NAN_BOXED(2130139616,32,FLEN)
NAN_BOXED(2151824610,32,FLEN)
NAN_BOXED(3380609020,32,FLEN)
NAN_BOXED(2130139616,32,FLEN)
NAN_BOXED(2151824610,32,FLEN)
NAN_BOXED(3380609022,32,FLEN)
NAN_BOXED(2130139616,32,FLEN)
NAN_BOXED(2151824610,32,FLEN)
NAN_BOXED(3380609023,32,FLEN)
NAN_BOXED(2130159678,32,FLEN)
NAN_BOXED(2151819244,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2130159678,32,FLEN)
NAN_BOXED(2151819244,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2130159678,32,FLEN)
NAN_BOXED(2151819244,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
NAN_BOXED(2130159678,32,FLEN)
NAN_BOXED(2151819244,32,FLEN)
NAN_BOXED(3214514585,32,FLEN)
NAN_BOXED(2130159678,32,FLEN)
NAN_BOXED(2151819244,32,FLEN)
NAN_BOXED(3215233609,32,FLEN)
NAN_BOXED(2130159678,32,FLEN)
NAN_BOXED(2151819244,32,FLEN)
NAN_BOXED(3216192307,32,FLEN)
NAN_BOXED(2130159678,32,FLEN)
NAN_BOXED(2151819244,32,FLEN)
NAN_BOXED(3216431981,32,FLEN)
NAN_BOXED(2130159678,32,FLEN)
NAN_BOXED(2151819244,32,FLEN)
NAN_BOXED(3216751547,32,FLEN)
NAN_BOXED(2130159678,32,FLEN)
NAN_BOXED(2151819244,32,FLEN)
NAN_BOXED(3217310788,32,FLEN)
NAN_BOXED(2130159678,32,FLEN)
NAN_BOXED(2151819244,32,FLEN)
NAN_BOXED(3217870028,32,FLEN)
NAN_BOXED(2130159678,32,FLEN)
NAN_BOXED(2151819244,32,FLEN)
NAN_BOXED(3218828726,32,FLEN)
NAN_BOXED(2130159678,32,FLEN)
NAN_BOXED(2151819244,32,FLEN)
NAN_BOXED(3219547750,32,FLEN)
NAN_BOXED(2130159678,32,FLEN)
NAN_BOXED(2151819244,32,FLEN)
NAN_BOXED(3220027099,32,FLEN)
NAN_BOXED(2130159678,32,FLEN)
NAN_BOXED(2151819244,32,FLEN)
NAN_BOXED(3221225464,32,FLEN)
NAN_BOXED(2130159678,32,FLEN)
NAN_BOXED(2151819244,32,FLEN)
NAN_BOXED(3221225468,32,FLEN)
NAN_BOXED(2130159678,32,FLEN)
NAN_BOXED(2151819244,32,FLEN)
NAN_BOXED(3221225470,32,FLEN)
NAN_BOXED(2130159678,32,FLEN)
NAN_BOXED(2151819244,32,FLEN)
NAN_BOXED(3246391296,32,FLEN)
NAN_BOXED(2130159678,32,FLEN)
NAN_BOXED(2151819244,32,FLEN)
NAN_BOXED(3246391297,32,FLEN)
NAN_BOXED(2130159678,32,FLEN)
NAN_BOXED(2151819244,32,FLEN)
NAN_BOXED(3246391299,32,FLEN)
NAN_BOXED(2130159678,32,FLEN)
NAN_BOXED(2151819244,32,FLEN)
NAN_BOXED(3246391303,32,FLEN)
NAN_BOXED(2130159678,32,FLEN)
NAN_BOXED(2151819244,32,FLEN)
NAN_BOXED(3246391311,32,FLEN)
NAN_BOXED(2130159678,32,FLEN)
NAN_BOXED(2151819244,32,FLEN)
NAN_BOXED(3246391327,32,FLEN)
NAN_BOXED(2130159678,32,FLEN)
NAN_BOXED(2151819244,32,FLEN)
NAN_BOXED(3246391359,32,FLEN)
NAN_BOXED(2130159678,32,FLEN)
NAN_BOXED(2151819244,32,FLEN)
NAN_BOXED(3246391423,32,FLEN)
NAN_BOXED(2130159678,32,FLEN)
NAN_BOXED(2151819244,32,FLEN)
NAN_BOXED(3246391551,32,FLEN)
NAN_BOXED(2130159678,32,FLEN)
NAN_BOXED(2151819244,32,FLEN)
NAN_BOXED(3246391807,32,FLEN)
NAN_BOXED(2130159678,32,FLEN)
NAN_BOXED(2151819244,32,FLEN)
NAN_BOXED(3246392319,32,FLEN)
NAN_BOXED(2130159678,32,FLEN)
NAN_BOXED(2151819244,32,FLEN)
NAN_BOXED(3246393343,32,FLEN)
NAN_BOXED(2130159678,32,FLEN)
NAN_BOXED(2151819244,32,FLEN)
NAN_BOXED(3246395391,32,FLEN)
NAN_BOXED(2130159678,32,FLEN)
NAN_BOXED(2151819244,32,FLEN)
NAN_BOXED(3246399487,32,FLEN)
NAN_BOXED(2130159678,32,FLEN)
NAN_BOXED(2151819244,32,FLEN)
NAN_BOXED(3246407679,32,FLEN)
NAN_BOXED(2130159678,32,FLEN)
NAN_BOXED(2151819244,32,FLEN)
NAN_BOXED(3246424063,32,FLEN)
NAN_BOXED(2130159678,32,FLEN)
NAN_BOXED(2151819244,32,FLEN)
NAN_BOXED(3246456831,32,FLEN)
NAN_BOXED(2130159678,32,FLEN)
NAN_BOXED(2151819244,32,FLEN)
NAN_BOXED(3246522367,32,FLEN)
NAN_BOXED(2130159678,32,FLEN)
NAN_BOXED(2151819244,32,FLEN)
NAN_BOXED(3246653439,32,FLEN)
NAN_BOXED(2130159678,32,FLEN)
NAN_BOXED(2151819244,32,FLEN)
NAN_BOXED(3246915583,32,FLEN)
NAN_BOXED(2130159678,32,FLEN)
NAN_BOXED(2151819244,32,FLEN)
NAN_BOXED(3247439871,32,FLEN)
NAN_BOXED(2130159678,32,FLEN)
NAN_BOXED(2151819244,32,FLEN)
NAN_BOXED(3248488447,32,FLEN)
NAN_BOXED(2130159678,32,FLEN)
NAN_BOXED(2151819244,32,FLEN)
NAN_BOXED(3250585599,32,FLEN)
NAN_BOXED(2130159678,32,FLEN)
NAN_BOXED(2151819244,32,FLEN)
NAN_BOXED(3250585600,32,FLEN)
NAN_BOXED(2130159678,32,FLEN)
NAN_BOXED(2151819244,32,FLEN)
NAN_BOXED(3252682752,32,FLEN)
NAN_BOXED(2130159678,32,FLEN)
NAN_BOXED(2151819244,32,FLEN)
NAN_BOXED(3253731328,32,FLEN)
NAN_BOXED(2130159678,32,FLEN)
NAN_BOXED(2151819244,32,FLEN)
NAN_BOXED(3254255616,32,FLEN)
NAN_BOXED(2130159678,32,FLEN)
NAN_BOXED(2151819244,32,FLEN)
NAN_BOXED(3254517760,32,FLEN)
NAN_BOXED(2130159678,32,FLEN)
NAN_BOXED(2151819244,32,FLEN)
NAN_BOXED(3254648832,32,FLEN)
NAN_BOXED(2130159678,32,FLEN)
NAN_BOXED(2151819244,32,FLEN)
NAN_BOXED(3254714368,32,FLEN)
NAN_BOXED(2130159678,32,FLEN)
NAN_BOXED(2151819244,32,FLEN)
NAN_BOXED(3254747136,32,FLEN)
NAN_BOXED(2130159678,32,FLEN)
NAN_BOXED(2151819244,32,FLEN)
NAN_BOXED(3254763520,32,FLEN)
NAN_BOXED(2130159678,32,FLEN)
NAN_BOXED(2151819244,32,FLEN)
NAN_BOXED(3254771712,32,FLEN)
NAN_BOXED(2130159678,32,FLEN)
NAN_BOXED(2151819244,32,FLEN)
NAN_BOXED(3254775808,32,FLEN)
NAN_BOXED(2130159678,32,FLEN)
NAN_BOXED(2151819244,32,FLEN)
NAN_BOXED(3254777856,32,FLEN)
NAN_BOXED(2130159678,32,FLEN)
NAN_BOXED(2151819244,32,FLEN)
NAN_BOXED(3254778880,32,FLEN)
NAN_BOXED(2130159678,32,FLEN)
NAN_BOXED(2151819244,32,FLEN)
NAN_BOXED(3254779392,32,FLEN)
NAN_BOXED(2130159678,32,FLEN)
NAN_BOXED(2151819244,32,FLEN)
NAN_BOXED(3254779648,32,FLEN)
NAN_BOXED(2130159678,32,FLEN)
NAN_BOXED(2151819244,32,FLEN)
NAN_BOXED(3254779776,32,FLEN)
NAN_BOXED(2130159678,32,FLEN)
NAN_BOXED(2151819244,32,FLEN)
NAN_BOXED(3254779840,32,FLEN)
NAN_BOXED(2130159678,32,FLEN)
NAN_BOXED(2151819244,32,FLEN)
NAN_BOXED(3254779872,32,FLEN)
NAN_BOXED(2130159678,32,FLEN)
NAN_BOXED(2151819244,32,FLEN)
NAN_BOXED(3254779888,32,FLEN)
NAN_BOXED(2130159678,32,FLEN)
NAN_BOXED(2151819244,32,FLEN)
NAN_BOXED(3254779896,32,FLEN)
NAN_BOXED(2130159678,32,FLEN)
NAN_BOXED(2151819244,32,FLEN)
NAN_BOXED(3254779900,32,FLEN)
NAN_BOXED(2130159678,32,FLEN)
NAN_BOXED(2151819244,32,FLEN)
NAN_BOXED(3254779902,32,FLEN)
NAN_BOXED(2130159678,32,FLEN)
NAN_BOXED(2151819244,32,FLEN)
NAN_BOXED(3254779903,32,FLEN)
NAN_BOXED(2130260161,32,FLEN)
NAN_BOXED(4308920,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2130260161,32,FLEN)
NAN_BOXED(4308920,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2130260161,32,FLEN)
NAN_BOXED(4308920,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2130260161,32,FLEN)
NAN_BOXED(4308920,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2130260161,32,FLEN)
NAN_BOXED(4308920,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2130260161,32,FLEN)
NAN_BOXED(4308920,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2130260161,32,FLEN)
NAN_BOXED(4308920,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2130260161,32,FLEN)
NAN_BOXED(4308920,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2130260161,32,FLEN)
NAN_BOXED(4308920,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2130260161,32,FLEN)
NAN_BOXED(4308920,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2130260161,32,FLEN)
NAN_BOXED(4308920,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2130260161,32,FLEN)
NAN_BOXED(4308920,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2130260161,32,FLEN)
NAN_BOXED(4308920,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2130260161,32,FLEN)
NAN_BOXED(4308920,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2130260161,32,FLEN)
NAN_BOXED(4308920,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2130260161,32,FLEN)
NAN_BOXED(4308920,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2130260161,32,FLEN)
NAN_BOXED(4308920,32,FLEN)
NAN_BOXED(1275068416,32,FLEN)
NAN_BOXED(2130260161,32,FLEN)
NAN_BOXED(4308920,32,FLEN)
NAN_BOXED(1275068417,32,FLEN)
NAN_BOXED(2130260161,32,FLEN)
NAN_BOXED(4308920,32,FLEN)
NAN_BOXED(1275068419,32,FLEN)
NAN_BOXED(2130260161,32,FLEN)
NAN_BOXED(4308920,32,FLEN)
NAN_BOXED(1275068423,32,FLEN)
NAN_BOXED(2130260161,32,FLEN)
NAN_BOXED(4308920,32,FLEN)
NAN_BOXED(1275068431,32,FLEN)
NAN_BOXED(2130260161,32,FLEN)
NAN_BOXED(4308920,32,FLEN)
NAN_BOXED(1275068447,32,FLEN)
NAN_BOXED(2130260161,32,FLEN)
NAN_BOXED(4308920,32,FLEN)
NAN_BOXED(1275068479,32,FLEN)
NAN_BOXED(2130260161,32,FLEN)
NAN_BOXED(4308920,32,FLEN)
NAN_BOXED(1275068543,32,FLEN)
NAN_BOXED(2130260161,32,FLEN)
NAN_BOXED(4308920,32,FLEN)
NAN_BOXED(1275068671,32,FLEN)
NAN_BOXED(2130260161,32,FLEN)
NAN_BOXED(4308920,32,FLEN)
NAN_BOXED(1275068927,32,FLEN)
NAN_BOXED(2130260161,32,FLEN)
NAN_BOXED(4308920,32,FLEN)
NAN_BOXED(1275069439,32,FLEN)
NAN_BOXED(2130260161,32,FLEN)
NAN_BOXED(4308920,32,FLEN)
NAN_BOXED(1275070463,32,FLEN)
NAN_BOXED(2130260161,32,FLEN)
NAN_BOXED(4308920,32,FLEN)
NAN_BOXED(1275072511,32,FLEN)
NAN_BOXED(2130260161,32,FLEN)
NAN_BOXED(4308920,32,FLEN)
NAN_BOXED(1275076607,32,FLEN)
NAN_BOXED(2130260161,32,FLEN)
NAN_BOXED(4308920,32,FLEN)
NAN_BOXED(1275084799,32,FLEN)
NAN_BOXED(2130260161,32,FLEN)
NAN_BOXED(4308920,32,FLEN)
NAN_BOXED(1275101183,32,FLEN)
NAN_BOXED(2130260161,32,FLEN)
NAN_BOXED(4308920,32,FLEN)
NAN_BOXED(1275133951,32,FLEN)
NAN_BOXED(2130260161,32,FLEN)
NAN_BOXED(4308920,32,FLEN)
NAN_BOXED(1275199487,32,FLEN)
NAN_BOXED(2130260161,32,FLEN)
NAN_BOXED(4308920,32,FLEN)
NAN_BOXED(1275330559,32,FLEN)
NAN_BOXED(2130260161,32,FLEN)
NAN_BOXED(4308920,32,FLEN)
NAN_BOXED(1275592703,32,FLEN)
NAN_BOXED(2130260161,32,FLEN)
NAN_BOXED(4308920,32,FLEN)
NAN_BOXED(1276116991,32,FLEN)
NAN_BOXED(2130260161,32,FLEN)
NAN_BOXED(4308920,32,FLEN)
NAN_BOXED(1277165567,32,FLEN)
NAN_BOXED(2130260161,32,FLEN)
NAN_BOXED(4308920,32,FLEN)
NAN_BOXED(1279262719,32,FLEN)
NAN_BOXED(2130260161,32,FLEN)
NAN_BOXED(4308920,32,FLEN)
NAN_BOXED(1279262720,32,FLEN)
NAN_BOXED(2130260161,32,FLEN)
NAN_BOXED(4308920,32,FLEN)
NAN_BOXED(1281359872,32,FLEN)
NAN_BOXED(2130260161,32,FLEN)
NAN_BOXED(4308920,32,FLEN)
NAN_BOXED(1282408448,32,FLEN)
NAN_BOXED(2130260161,32,FLEN)
NAN_BOXED(4308920,32,FLEN)
NAN_BOXED(1282932736,32,FLEN)
NAN_BOXED(2130260161,32,FLEN)
NAN_BOXED(4308920,32,FLEN)
NAN_BOXED(1283194880,32,FLEN)
NAN_BOXED(2130260161,32,FLEN)
NAN_BOXED(4308920,32,FLEN)
NAN_BOXED(1283325952,32,FLEN)
NAN_BOXED(2130260161,32,FLEN)
NAN_BOXED(4308920,32,FLEN)
NAN_BOXED(1283391488,32,FLEN)
NAN_BOXED(2130260161,32,FLEN)
NAN_BOXED(4308920,32,FLEN)
NAN_BOXED(1283424256,32,FLEN)
NAN_BOXED(2130260161,32,FLEN)
NAN_BOXED(4308920,32,FLEN)
NAN_BOXED(1283440640,32,FLEN)
NAN_BOXED(2130260161,32,FLEN)
NAN_BOXED(4308920,32,FLEN)
NAN_BOXED(1283448832,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
