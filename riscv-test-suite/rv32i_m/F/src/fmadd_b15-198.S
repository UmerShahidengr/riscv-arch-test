
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:17:59 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_25216:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7930c1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41bfb8 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef930c1; op2val:0x41bfb8;
op3val:0x4c7ff000; valaddr_reg:x3; val_offset:75648*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75648*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25217:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7930c1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41bfb8 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef930c1; op2val:0x41bfb8;
op3val:0x4c7ff800; valaddr_reg:x3; val_offset:75651*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75651*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25218:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7930c1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41bfb8 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef930c1; op2val:0x41bfb8;
op3val:0x4c7ffc00; valaddr_reg:x3; val_offset:75654*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75654*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25219:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7930c1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41bfb8 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef930c1; op2val:0x41bfb8;
op3val:0x4c7ffe00; valaddr_reg:x3; val_offset:75657*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75657*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25220:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7930c1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41bfb8 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef930c1; op2val:0x41bfb8;
op3val:0x4c7fff00; valaddr_reg:x3; val_offset:75660*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75660*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25221:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7930c1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41bfb8 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef930c1; op2val:0x41bfb8;
op3val:0x4c7fff80; valaddr_reg:x3; val_offset:75663*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75663*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25222:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7930c1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41bfb8 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef930c1; op2val:0x41bfb8;
op3val:0x4c7fffc0; valaddr_reg:x3; val_offset:75666*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75666*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25223:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7930c1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41bfb8 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef930c1; op2val:0x41bfb8;
op3val:0x4c7fffe0; valaddr_reg:x3; val_offset:75669*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75669*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25224:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7930c1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41bfb8 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef930c1; op2val:0x41bfb8;
op3val:0x4c7ffff0; valaddr_reg:x3; val_offset:75672*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75672*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25225:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7930c1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41bfb8 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef930c1; op2val:0x41bfb8;
op3val:0x4c7ffff8; valaddr_reg:x3; val_offset:75675*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75675*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25226:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7930c1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41bfb8 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef930c1; op2val:0x41bfb8;
op3val:0x4c7ffffc; valaddr_reg:x3; val_offset:75678*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75678*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25227:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7930c1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41bfb8 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef930c1; op2val:0x41bfb8;
op3val:0x4c7ffffe; valaddr_reg:x3; val_offset:75681*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75681*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25228:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7930c1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41bfb8 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef930c1; op2val:0x41bfb8;
op3val:0x4c7fffff; valaddr_reg:x3; val_offset:75684*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75684*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25229:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7af83f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x414864 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efaf83f; op2val:0x80414864;
op3val:0xbf800001; valaddr_reg:x3; val_offset:75687*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75687*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25230:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7af83f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x414864 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efaf83f; op2val:0x80414864;
op3val:0xbf800003; valaddr_reg:x3; val_offset:75690*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75690*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25231:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7af83f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x414864 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efaf83f; op2val:0x80414864;
op3val:0xbf800007; valaddr_reg:x3; val_offset:75693*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75693*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25232:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7af83f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x414864 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efaf83f; op2val:0x80414864;
op3val:0xbf999999; valaddr_reg:x3; val_offset:75696*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75696*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25233:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7af83f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x414864 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efaf83f; op2val:0x80414864;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:75699*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75699*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25234:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7af83f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x414864 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efaf83f; op2val:0x80414864;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:75702*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75702*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25235:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7af83f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x414864 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efaf83f; op2val:0x80414864;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:75705*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75705*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25236:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7af83f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x414864 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efaf83f; op2val:0x80414864;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:75708*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75708*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25237:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7af83f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x414864 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efaf83f; op2val:0x80414864;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:75711*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75711*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25238:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7af83f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x414864 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efaf83f; op2val:0x80414864;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:75714*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75714*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25239:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7af83f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x414864 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efaf83f; op2val:0x80414864;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:75717*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75717*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25240:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7af83f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x414864 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efaf83f; op2val:0x80414864;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:75720*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75720*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25241:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7af83f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x414864 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efaf83f; op2val:0x80414864;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:75723*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75723*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25242:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7af83f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x414864 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efaf83f; op2val:0x80414864;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:75726*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75726*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25243:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7af83f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x414864 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efaf83f; op2val:0x80414864;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:75729*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75729*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25244:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7af83f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x414864 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efaf83f; op2val:0x80414864;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:75732*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75732*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25245:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7af83f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x414864 and fs3 == 1 and fe3 == 0x81 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efaf83f; op2val:0x80414864;
op3val:0xc0800000; valaddr_reg:x3; val_offset:75735*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75735*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25246:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7af83f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x414864 and fs3 == 1 and fe3 == 0x81 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efaf83f; op2val:0x80414864;
op3val:0xc0800001; valaddr_reg:x3; val_offset:75738*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75738*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25247:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7af83f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x414864 and fs3 == 1 and fe3 == 0x81 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efaf83f; op2val:0x80414864;
op3val:0xc0800003; valaddr_reg:x3; val_offset:75741*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75741*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25248:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7af83f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x414864 and fs3 == 1 and fe3 == 0x81 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efaf83f; op2val:0x80414864;
op3val:0xc0800007; valaddr_reg:x3; val_offset:75744*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75744*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25249:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7af83f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x414864 and fs3 == 1 and fe3 == 0x81 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efaf83f; op2val:0x80414864;
op3val:0xc080000f; valaddr_reg:x3; val_offset:75747*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75747*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25250:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7af83f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x414864 and fs3 == 1 and fe3 == 0x81 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efaf83f; op2val:0x80414864;
op3val:0xc080001f; valaddr_reg:x3; val_offset:75750*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75750*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25251:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7af83f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x414864 and fs3 == 1 and fe3 == 0x81 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efaf83f; op2val:0x80414864;
op3val:0xc080003f; valaddr_reg:x3; val_offset:75753*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75753*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25252:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7af83f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x414864 and fs3 == 1 and fe3 == 0x81 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efaf83f; op2val:0x80414864;
op3val:0xc080007f; valaddr_reg:x3; val_offset:75756*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75756*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25253:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7af83f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x414864 and fs3 == 1 and fe3 == 0x81 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efaf83f; op2val:0x80414864;
op3val:0xc08000ff; valaddr_reg:x3; val_offset:75759*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75759*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25254:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7af83f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x414864 and fs3 == 1 and fe3 == 0x81 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efaf83f; op2val:0x80414864;
op3val:0xc08001ff; valaddr_reg:x3; val_offset:75762*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75762*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25255:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7af83f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x414864 and fs3 == 1 and fe3 == 0x81 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efaf83f; op2val:0x80414864;
op3val:0xc08003ff; valaddr_reg:x3; val_offset:75765*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75765*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25256:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7af83f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x414864 and fs3 == 1 and fe3 == 0x81 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efaf83f; op2val:0x80414864;
op3val:0xc08007ff; valaddr_reg:x3; val_offset:75768*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75768*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25257:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7af83f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x414864 and fs3 == 1 and fe3 == 0x81 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efaf83f; op2val:0x80414864;
op3val:0xc0800fff; valaddr_reg:x3; val_offset:75771*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75771*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25258:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7af83f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x414864 and fs3 == 1 and fe3 == 0x81 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efaf83f; op2val:0x80414864;
op3val:0xc0801fff; valaddr_reg:x3; val_offset:75774*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75774*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25259:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7af83f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x414864 and fs3 == 1 and fe3 == 0x81 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efaf83f; op2val:0x80414864;
op3val:0xc0803fff; valaddr_reg:x3; val_offset:75777*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75777*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25260:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7af83f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x414864 and fs3 == 1 and fe3 == 0x81 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efaf83f; op2val:0x80414864;
op3val:0xc0807fff; valaddr_reg:x3; val_offset:75780*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75780*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25261:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7af83f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x414864 and fs3 == 1 and fe3 == 0x81 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efaf83f; op2val:0x80414864;
op3val:0xc080ffff; valaddr_reg:x3; val_offset:75783*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75783*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25262:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7af83f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x414864 and fs3 == 1 and fe3 == 0x81 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efaf83f; op2val:0x80414864;
op3val:0xc081ffff; valaddr_reg:x3; val_offset:75786*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75786*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25263:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7af83f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x414864 and fs3 == 1 and fe3 == 0x81 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efaf83f; op2val:0x80414864;
op3val:0xc083ffff; valaddr_reg:x3; val_offset:75789*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75789*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25264:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7af83f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x414864 and fs3 == 1 and fe3 == 0x81 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efaf83f; op2val:0x80414864;
op3val:0xc087ffff; valaddr_reg:x3; val_offset:75792*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75792*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25265:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7af83f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x414864 and fs3 == 1 and fe3 == 0x81 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efaf83f; op2val:0x80414864;
op3val:0xc08fffff; valaddr_reg:x3; val_offset:75795*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75795*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25266:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7af83f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x414864 and fs3 == 1 and fe3 == 0x81 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efaf83f; op2val:0x80414864;
op3val:0xc09fffff; valaddr_reg:x3; val_offset:75798*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75798*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25267:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7af83f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x414864 and fs3 == 1 and fe3 == 0x81 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efaf83f; op2val:0x80414864;
op3val:0xc0bfffff; valaddr_reg:x3; val_offset:75801*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75801*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25268:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7af83f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x414864 and fs3 == 1 and fe3 == 0x81 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efaf83f; op2val:0x80414864;
op3val:0xc0c00000; valaddr_reg:x3; val_offset:75804*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75804*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25269:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7af83f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x414864 and fs3 == 1 and fe3 == 0x81 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efaf83f; op2val:0x80414864;
op3val:0xc0e00000; valaddr_reg:x3; val_offset:75807*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75807*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25270:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7af83f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x414864 and fs3 == 1 and fe3 == 0x81 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efaf83f; op2val:0x80414864;
op3val:0xc0f00000; valaddr_reg:x3; val_offset:75810*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75810*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25271:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7af83f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x414864 and fs3 == 1 and fe3 == 0x81 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efaf83f; op2val:0x80414864;
op3val:0xc0f80000; valaddr_reg:x3; val_offset:75813*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75813*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25272:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7af83f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x414864 and fs3 == 1 and fe3 == 0x81 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efaf83f; op2val:0x80414864;
op3val:0xc0fc0000; valaddr_reg:x3; val_offset:75816*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75816*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25273:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7af83f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x414864 and fs3 == 1 and fe3 == 0x81 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efaf83f; op2val:0x80414864;
op3val:0xc0fe0000; valaddr_reg:x3; val_offset:75819*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75819*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25274:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7af83f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x414864 and fs3 == 1 and fe3 == 0x81 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efaf83f; op2val:0x80414864;
op3val:0xc0ff0000; valaddr_reg:x3; val_offset:75822*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75822*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25275:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7af83f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x414864 and fs3 == 1 and fe3 == 0x81 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efaf83f; op2val:0x80414864;
op3val:0xc0ff8000; valaddr_reg:x3; val_offset:75825*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75825*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25276:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7af83f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x414864 and fs3 == 1 and fe3 == 0x81 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efaf83f; op2val:0x80414864;
op3val:0xc0ffc000; valaddr_reg:x3; val_offset:75828*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75828*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25277:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7af83f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x414864 and fs3 == 1 and fe3 == 0x81 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efaf83f; op2val:0x80414864;
op3val:0xc0ffe000; valaddr_reg:x3; val_offset:75831*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75831*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25278:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7af83f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x414864 and fs3 == 1 and fe3 == 0x81 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efaf83f; op2val:0x80414864;
op3val:0xc0fff000; valaddr_reg:x3; val_offset:75834*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75834*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25279:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7af83f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x414864 and fs3 == 1 and fe3 == 0x81 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efaf83f; op2val:0x80414864;
op3val:0xc0fff800; valaddr_reg:x3; val_offset:75837*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75837*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25280:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7af83f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x414864 and fs3 == 1 and fe3 == 0x81 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efaf83f; op2val:0x80414864;
op3val:0xc0fffc00; valaddr_reg:x3; val_offset:75840*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75840*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25281:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7af83f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x414864 and fs3 == 1 and fe3 == 0x81 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efaf83f; op2val:0x80414864;
op3val:0xc0fffe00; valaddr_reg:x3; val_offset:75843*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75843*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25282:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7af83f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x414864 and fs3 == 1 and fe3 == 0x81 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efaf83f; op2val:0x80414864;
op3val:0xc0ffff00; valaddr_reg:x3; val_offset:75846*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75846*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25283:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7af83f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x414864 and fs3 == 1 and fe3 == 0x81 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efaf83f; op2val:0x80414864;
op3val:0xc0ffff80; valaddr_reg:x3; val_offset:75849*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75849*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25284:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7af83f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x414864 and fs3 == 1 and fe3 == 0x81 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efaf83f; op2val:0x80414864;
op3val:0xc0ffffc0; valaddr_reg:x3; val_offset:75852*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75852*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25285:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7af83f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x414864 and fs3 == 1 and fe3 == 0x81 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efaf83f; op2val:0x80414864;
op3val:0xc0ffffe0; valaddr_reg:x3; val_offset:75855*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75855*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25286:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7af83f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x414864 and fs3 == 1 and fe3 == 0x81 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efaf83f; op2val:0x80414864;
op3val:0xc0fffff0; valaddr_reg:x3; val_offset:75858*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75858*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25287:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7af83f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x414864 and fs3 == 1 and fe3 == 0x81 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efaf83f; op2val:0x80414864;
op3val:0xc0fffff8; valaddr_reg:x3; val_offset:75861*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75861*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25288:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7af83f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x414864 and fs3 == 1 and fe3 == 0x81 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efaf83f; op2val:0x80414864;
op3val:0xc0fffffc; valaddr_reg:x3; val_offset:75864*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75864*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25289:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7af83f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x414864 and fs3 == 1 and fe3 == 0x81 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efaf83f; op2val:0x80414864;
op3val:0xc0fffffe; valaddr_reg:x3; val_offset:75867*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75867*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25290:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7af83f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x414864 and fs3 == 1 and fe3 == 0x81 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efaf83f; op2val:0x80414864;
op3val:0xc0ffffff; valaddr_reg:x3; val_offset:75870*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75870*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25291:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7befa5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efbefa5; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:75873*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75873*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25292:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7befa5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efbefa5; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:75876*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75876*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25293:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7befa5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efbefa5; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:75879*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75879*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25294:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7befa5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efbefa5; op2val:0x0;
op3val:0x199999; valaddr_reg:x3; val_offset:75882*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75882*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25295:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7befa5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efbefa5; op2val:0x0;
op3val:0x249249; valaddr_reg:x3; val_offset:75885*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75885*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25296:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7befa5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efbefa5; op2val:0x0;
op3val:0x333333; valaddr_reg:x3; val_offset:75888*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75888*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25297:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7befa5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efbefa5; op2val:0x0;
op3val:0x36db6d; valaddr_reg:x3; val_offset:75891*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75891*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25298:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7befa5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efbefa5; op2val:0x0;
op3val:0x3bbbbb; valaddr_reg:x3; val_offset:75894*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75894*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25299:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7befa5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efbefa5; op2val:0x0;
op3val:0x444444; valaddr_reg:x3; val_offset:75897*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75897*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25300:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7befa5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efbefa5; op2val:0x0;
op3val:0x4ccccc; valaddr_reg:x3; val_offset:75900*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75900*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25301:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7befa5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efbefa5; op2val:0x0;
op3val:0x5b6db6; valaddr_reg:x3; val_offset:75903*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75903*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25302:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7befa5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efbefa5; op2val:0x0;
op3val:0x666666; valaddr_reg:x3; val_offset:75906*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75906*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25303:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7befa5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efbefa5; op2val:0x0;
op3val:0x6db6db; valaddr_reg:x3; val_offset:75909*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75909*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25304:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7befa5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efbefa5; op2val:0x0;
op3val:0x7ffff8; valaddr_reg:x3; val_offset:75912*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75912*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25305:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7befa5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efbefa5; op2val:0x0;
op3val:0x7ffffc; valaddr_reg:x3; val_offset:75915*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75915*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25306:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7befa5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efbefa5; op2val:0x0;
op3val:0x7ffffe; valaddr_reg:x3; val_offset:75918*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75918*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25307:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7befa5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efbefa5; op2val:0x0;
op3val:0x10000000; valaddr_reg:x3; val_offset:75921*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75921*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25308:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7befa5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efbefa5; op2val:0x0;
op3val:0x10000001; valaddr_reg:x3; val_offset:75924*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75924*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25309:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7befa5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efbefa5; op2val:0x0;
op3val:0x10000003; valaddr_reg:x3; val_offset:75927*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75927*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25310:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7befa5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efbefa5; op2val:0x0;
op3val:0x10000007; valaddr_reg:x3; val_offset:75930*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75930*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25311:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7befa5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efbefa5; op2val:0x0;
op3val:0x1000000f; valaddr_reg:x3; val_offset:75933*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75933*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25312:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7befa5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efbefa5; op2val:0x0;
op3val:0x1000001f; valaddr_reg:x3; val_offset:75936*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75936*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25313:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7befa5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efbefa5; op2val:0x0;
op3val:0x1000003f; valaddr_reg:x3; val_offset:75939*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75939*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25314:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7befa5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efbefa5; op2val:0x0;
op3val:0x1000007f; valaddr_reg:x3; val_offset:75942*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75942*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25315:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7befa5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efbefa5; op2val:0x0;
op3val:0x100000ff; valaddr_reg:x3; val_offset:75945*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75945*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25316:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7befa5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efbefa5; op2val:0x0;
op3val:0x100001ff; valaddr_reg:x3; val_offset:75948*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75948*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25317:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7befa5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efbefa5; op2val:0x0;
op3val:0x100003ff; valaddr_reg:x3; val_offset:75951*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75951*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25318:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7befa5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efbefa5; op2val:0x0;
op3val:0x100007ff; valaddr_reg:x3; val_offset:75954*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75954*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25319:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7befa5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efbefa5; op2val:0x0;
op3val:0x10000fff; valaddr_reg:x3; val_offset:75957*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75957*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25320:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7befa5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efbefa5; op2val:0x0;
op3val:0x10001fff; valaddr_reg:x3; val_offset:75960*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75960*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25321:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7befa5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efbefa5; op2val:0x0;
op3val:0x10003fff; valaddr_reg:x3; val_offset:75963*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75963*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25322:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7befa5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efbefa5; op2val:0x0;
op3val:0x10007fff; valaddr_reg:x3; val_offset:75966*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75966*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25323:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7befa5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efbefa5; op2val:0x0;
op3val:0x1000ffff; valaddr_reg:x3; val_offset:75969*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75969*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25324:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7befa5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efbefa5; op2val:0x0;
op3val:0x1001ffff; valaddr_reg:x3; val_offset:75972*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75972*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25325:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7befa5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efbefa5; op2val:0x0;
op3val:0x1003ffff; valaddr_reg:x3; val_offset:75975*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75975*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25326:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7befa5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efbefa5; op2val:0x0;
op3val:0x1007ffff; valaddr_reg:x3; val_offset:75978*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75978*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25327:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7befa5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efbefa5; op2val:0x0;
op3val:0x100fffff; valaddr_reg:x3; val_offset:75981*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75981*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25328:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7befa5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efbefa5; op2val:0x0;
op3val:0x101fffff; valaddr_reg:x3; val_offset:75984*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75984*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25329:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7befa5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efbefa5; op2val:0x0;
op3val:0x103fffff; valaddr_reg:x3; val_offset:75987*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75987*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25330:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7befa5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efbefa5; op2val:0x0;
op3val:0x10400000; valaddr_reg:x3; val_offset:75990*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75990*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25331:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7befa5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efbefa5; op2val:0x0;
op3val:0x10600000; valaddr_reg:x3; val_offset:75993*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75993*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25332:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7befa5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efbefa5; op2val:0x0;
op3val:0x10700000; valaddr_reg:x3; val_offset:75996*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75996*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25333:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7befa5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efbefa5; op2val:0x0;
op3val:0x10780000; valaddr_reg:x3; val_offset:75999*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75999*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25334:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7befa5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efbefa5; op2val:0x0;
op3val:0x107c0000; valaddr_reg:x3; val_offset:76002*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76002*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25335:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7befa5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efbefa5; op2val:0x0;
op3val:0x107e0000; valaddr_reg:x3; val_offset:76005*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76005*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25336:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7befa5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efbefa5; op2val:0x0;
op3val:0x107f0000; valaddr_reg:x3; val_offset:76008*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76008*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25337:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7befa5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efbefa5; op2val:0x0;
op3val:0x107f8000; valaddr_reg:x3; val_offset:76011*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76011*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25338:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7befa5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efbefa5; op2val:0x0;
op3val:0x107fc000; valaddr_reg:x3; val_offset:76014*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76014*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25339:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7befa5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efbefa5; op2val:0x0;
op3val:0x107fe000; valaddr_reg:x3; val_offset:76017*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76017*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25340:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7befa5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efbefa5; op2val:0x0;
op3val:0x107ff000; valaddr_reg:x3; val_offset:76020*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76020*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25341:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7befa5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efbefa5; op2val:0x0;
op3val:0x107ff800; valaddr_reg:x3; val_offset:76023*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76023*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25342:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7befa5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efbefa5; op2val:0x0;
op3val:0x107ffc00; valaddr_reg:x3; val_offset:76026*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76026*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25343:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7befa5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efbefa5; op2val:0x0;
op3val:0x107ffe00; valaddr_reg:x3; val_offset:76029*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76029*0 + 3*197*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2130260161,32,FLEN)
NAN_BOXED(4308920,32,FLEN)
NAN_BOXED(1283452928,32,FLEN)
NAN_BOXED(2130260161,32,FLEN)
NAN_BOXED(4308920,32,FLEN)
NAN_BOXED(1283454976,32,FLEN)
NAN_BOXED(2130260161,32,FLEN)
NAN_BOXED(4308920,32,FLEN)
NAN_BOXED(1283456000,32,FLEN)
NAN_BOXED(2130260161,32,FLEN)
NAN_BOXED(4308920,32,FLEN)
NAN_BOXED(1283456512,32,FLEN)
NAN_BOXED(2130260161,32,FLEN)
NAN_BOXED(4308920,32,FLEN)
NAN_BOXED(1283456768,32,FLEN)
NAN_BOXED(2130260161,32,FLEN)
NAN_BOXED(4308920,32,FLEN)
NAN_BOXED(1283456896,32,FLEN)
NAN_BOXED(2130260161,32,FLEN)
NAN_BOXED(4308920,32,FLEN)
NAN_BOXED(1283456960,32,FLEN)
NAN_BOXED(2130260161,32,FLEN)
NAN_BOXED(4308920,32,FLEN)
NAN_BOXED(1283456992,32,FLEN)
NAN_BOXED(2130260161,32,FLEN)
NAN_BOXED(4308920,32,FLEN)
NAN_BOXED(1283457008,32,FLEN)
NAN_BOXED(2130260161,32,FLEN)
NAN_BOXED(4308920,32,FLEN)
NAN_BOXED(1283457016,32,FLEN)
NAN_BOXED(2130260161,32,FLEN)
NAN_BOXED(4308920,32,FLEN)
NAN_BOXED(1283457020,32,FLEN)
NAN_BOXED(2130260161,32,FLEN)
NAN_BOXED(4308920,32,FLEN)
NAN_BOXED(1283457022,32,FLEN)
NAN_BOXED(2130260161,32,FLEN)
NAN_BOXED(4308920,32,FLEN)
NAN_BOXED(1283457023,32,FLEN)
NAN_BOXED(2130376767,32,FLEN)
NAN_BOXED(2151762020,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2130376767,32,FLEN)
NAN_BOXED(2151762020,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2130376767,32,FLEN)
NAN_BOXED(2151762020,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
NAN_BOXED(2130376767,32,FLEN)
NAN_BOXED(2151762020,32,FLEN)
NAN_BOXED(3214514585,32,FLEN)
NAN_BOXED(2130376767,32,FLEN)
NAN_BOXED(2151762020,32,FLEN)
NAN_BOXED(3215233609,32,FLEN)
NAN_BOXED(2130376767,32,FLEN)
NAN_BOXED(2151762020,32,FLEN)
NAN_BOXED(3216192307,32,FLEN)
NAN_BOXED(2130376767,32,FLEN)
NAN_BOXED(2151762020,32,FLEN)
NAN_BOXED(3216431981,32,FLEN)
NAN_BOXED(2130376767,32,FLEN)
NAN_BOXED(2151762020,32,FLEN)
NAN_BOXED(3216751547,32,FLEN)
NAN_BOXED(2130376767,32,FLEN)
NAN_BOXED(2151762020,32,FLEN)
NAN_BOXED(3217310788,32,FLEN)
NAN_BOXED(2130376767,32,FLEN)
NAN_BOXED(2151762020,32,FLEN)
NAN_BOXED(3217870028,32,FLEN)
NAN_BOXED(2130376767,32,FLEN)
NAN_BOXED(2151762020,32,FLEN)
NAN_BOXED(3218828726,32,FLEN)
NAN_BOXED(2130376767,32,FLEN)
NAN_BOXED(2151762020,32,FLEN)
NAN_BOXED(3219547750,32,FLEN)
NAN_BOXED(2130376767,32,FLEN)
NAN_BOXED(2151762020,32,FLEN)
NAN_BOXED(3220027099,32,FLEN)
NAN_BOXED(2130376767,32,FLEN)
NAN_BOXED(2151762020,32,FLEN)
NAN_BOXED(3221225464,32,FLEN)
NAN_BOXED(2130376767,32,FLEN)
NAN_BOXED(2151762020,32,FLEN)
NAN_BOXED(3221225468,32,FLEN)
NAN_BOXED(2130376767,32,FLEN)
NAN_BOXED(2151762020,32,FLEN)
NAN_BOXED(3221225470,32,FLEN)
NAN_BOXED(2130376767,32,FLEN)
NAN_BOXED(2151762020,32,FLEN)
NAN_BOXED(3229614080,32,FLEN)
NAN_BOXED(2130376767,32,FLEN)
NAN_BOXED(2151762020,32,FLEN)
NAN_BOXED(3229614081,32,FLEN)
NAN_BOXED(2130376767,32,FLEN)
NAN_BOXED(2151762020,32,FLEN)
NAN_BOXED(3229614083,32,FLEN)
NAN_BOXED(2130376767,32,FLEN)
NAN_BOXED(2151762020,32,FLEN)
NAN_BOXED(3229614087,32,FLEN)
NAN_BOXED(2130376767,32,FLEN)
NAN_BOXED(2151762020,32,FLEN)
NAN_BOXED(3229614095,32,FLEN)
NAN_BOXED(2130376767,32,FLEN)
NAN_BOXED(2151762020,32,FLEN)
NAN_BOXED(3229614111,32,FLEN)
NAN_BOXED(2130376767,32,FLEN)
NAN_BOXED(2151762020,32,FLEN)
NAN_BOXED(3229614143,32,FLEN)
NAN_BOXED(2130376767,32,FLEN)
NAN_BOXED(2151762020,32,FLEN)
NAN_BOXED(3229614207,32,FLEN)
NAN_BOXED(2130376767,32,FLEN)
NAN_BOXED(2151762020,32,FLEN)
NAN_BOXED(3229614335,32,FLEN)
NAN_BOXED(2130376767,32,FLEN)
NAN_BOXED(2151762020,32,FLEN)
NAN_BOXED(3229614591,32,FLEN)
NAN_BOXED(2130376767,32,FLEN)
NAN_BOXED(2151762020,32,FLEN)
NAN_BOXED(3229615103,32,FLEN)
NAN_BOXED(2130376767,32,FLEN)
NAN_BOXED(2151762020,32,FLEN)
NAN_BOXED(3229616127,32,FLEN)
NAN_BOXED(2130376767,32,FLEN)
NAN_BOXED(2151762020,32,FLEN)
NAN_BOXED(3229618175,32,FLEN)
NAN_BOXED(2130376767,32,FLEN)
NAN_BOXED(2151762020,32,FLEN)
NAN_BOXED(3229622271,32,FLEN)
NAN_BOXED(2130376767,32,FLEN)
NAN_BOXED(2151762020,32,FLEN)
NAN_BOXED(3229630463,32,FLEN)
NAN_BOXED(2130376767,32,FLEN)
NAN_BOXED(2151762020,32,FLEN)
NAN_BOXED(3229646847,32,FLEN)
NAN_BOXED(2130376767,32,FLEN)
NAN_BOXED(2151762020,32,FLEN)
NAN_BOXED(3229679615,32,FLEN)
NAN_BOXED(2130376767,32,FLEN)
NAN_BOXED(2151762020,32,FLEN)
NAN_BOXED(3229745151,32,FLEN)
NAN_BOXED(2130376767,32,FLEN)
NAN_BOXED(2151762020,32,FLEN)
NAN_BOXED(3229876223,32,FLEN)
NAN_BOXED(2130376767,32,FLEN)
NAN_BOXED(2151762020,32,FLEN)
NAN_BOXED(3230138367,32,FLEN)
NAN_BOXED(2130376767,32,FLEN)
NAN_BOXED(2151762020,32,FLEN)
NAN_BOXED(3230662655,32,FLEN)
NAN_BOXED(2130376767,32,FLEN)
NAN_BOXED(2151762020,32,FLEN)
NAN_BOXED(3231711231,32,FLEN)
NAN_BOXED(2130376767,32,FLEN)
NAN_BOXED(2151762020,32,FLEN)
NAN_BOXED(3233808383,32,FLEN)
NAN_BOXED(2130376767,32,FLEN)
NAN_BOXED(2151762020,32,FLEN)
NAN_BOXED(3233808384,32,FLEN)
NAN_BOXED(2130376767,32,FLEN)
NAN_BOXED(2151762020,32,FLEN)
NAN_BOXED(3235905536,32,FLEN)
NAN_BOXED(2130376767,32,FLEN)
NAN_BOXED(2151762020,32,FLEN)
NAN_BOXED(3236954112,32,FLEN)
NAN_BOXED(2130376767,32,FLEN)
NAN_BOXED(2151762020,32,FLEN)
NAN_BOXED(3237478400,32,FLEN)
NAN_BOXED(2130376767,32,FLEN)
NAN_BOXED(2151762020,32,FLEN)
NAN_BOXED(3237740544,32,FLEN)
NAN_BOXED(2130376767,32,FLEN)
NAN_BOXED(2151762020,32,FLEN)
NAN_BOXED(3237871616,32,FLEN)
NAN_BOXED(2130376767,32,FLEN)
NAN_BOXED(2151762020,32,FLEN)
NAN_BOXED(3237937152,32,FLEN)
NAN_BOXED(2130376767,32,FLEN)
NAN_BOXED(2151762020,32,FLEN)
NAN_BOXED(3237969920,32,FLEN)
NAN_BOXED(2130376767,32,FLEN)
NAN_BOXED(2151762020,32,FLEN)
NAN_BOXED(3237986304,32,FLEN)
NAN_BOXED(2130376767,32,FLEN)
NAN_BOXED(2151762020,32,FLEN)
NAN_BOXED(3237994496,32,FLEN)
NAN_BOXED(2130376767,32,FLEN)
NAN_BOXED(2151762020,32,FLEN)
NAN_BOXED(3237998592,32,FLEN)
NAN_BOXED(2130376767,32,FLEN)
NAN_BOXED(2151762020,32,FLEN)
NAN_BOXED(3238000640,32,FLEN)
NAN_BOXED(2130376767,32,FLEN)
NAN_BOXED(2151762020,32,FLEN)
NAN_BOXED(3238001664,32,FLEN)
NAN_BOXED(2130376767,32,FLEN)
NAN_BOXED(2151762020,32,FLEN)
NAN_BOXED(3238002176,32,FLEN)
NAN_BOXED(2130376767,32,FLEN)
NAN_BOXED(2151762020,32,FLEN)
NAN_BOXED(3238002432,32,FLEN)
NAN_BOXED(2130376767,32,FLEN)
NAN_BOXED(2151762020,32,FLEN)
NAN_BOXED(3238002560,32,FLEN)
NAN_BOXED(2130376767,32,FLEN)
NAN_BOXED(2151762020,32,FLEN)
NAN_BOXED(3238002624,32,FLEN)
NAN_BOXED(2130376767,32,FLEN)
NAN_BOXED(2151762020,32,FLEN)
NAN_BOXED(3238002656,32,FLEN)
NAN_BOXED(2130376767,32,FLEN)
NAN_BOXED(2151762020,32,FLEN)
NAN_BOXED(3238002672,32,FLEN)
NAN_BOXED(2130376767,32,FLEN)
NAN_BOXED(2151762020,32,FLEN)
NAN_BOXED(3238002680,32,FLEN)
NAN_BOXED(2130376767,32,FLEN)
NAN_BOXED(2151762020,32,FLEN)
NAN_BOXED(3238002684,32,FLEN)
NAN_BOXED(2130376767,32,FLEN)
NAN_BOXED(2151762020,32,FLEN)
NAN_BOXED(3238002686,32,FLEN)
NAN_BOXED(2130376767,32,FLEN)
NAN_BOXED(2151762020,32,FLEN)
NAN_BOXED(3238002687,32,FLEN)
NAN_BOXED(2130440101,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2130440101,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3,32,FLEN)
NAN_BOXED(2130440101,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7,32,FLEN)
NAN_BOXED(2130440101,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1677721,32,FLEN)
NAN_BOXED(2130440101,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2396745,32,FLEN)
NAN_BOXED(2130440101,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3355443,32,FLEN)
NAN_BOXED(2130440101,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3595117,32,FLEN)
NAN_BOXED(2130440101,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3914683,32,FLEN)
NAN_BOXED(2130440101,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4473924,32,FLEN)
NAN_BOXED(2130440101,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5033164,32,FLEN)
NAN_BOXED(2130440101,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5991862,32,FLEN)
NAN_BOXED(2130440101,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(6710886,32,FLEN)
NAN_BOXED(2130440101,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7190235,32,FLEN)
NAN_BOXED(2130440101,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388600,32,FLEN)
NAN_BOXED(2130440101,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388604,32,FLEN)
NAN_BOXED(2130440101,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388606,32,FLEN)
NAN_BOXED(2130440101,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268435456,32,FLEN)
NAN_BOXED(2130440101,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268435457,32,FLEN)
NAN_BOXED(2130440101,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268435459,32,FLEN)
NAN_BOXED(2130440101,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268435463,32,FLEN)
NAN_BOXED(2130440101,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268435471,32,FLEN)
NAN_BOXED(2130440101,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268435487,32,FLEN)
NAN_BOXED(2130440101,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268435519,32,FLEN)
NAN_BOXED(2130440101,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268435583,32,FLEN)
NAN_BOXED(2130440101,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268435711,32,FLEN)
NAN_BOXED(2130440101,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268435967,32,FLEN)
NAN_BOXED(2130440101,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268436479,32,FLEN)
NAN_BOXED(2130440101,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268437503,32,FLEN)
NAN_BOXED(2130440101,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268439551,32,FLEN)
NAN_BOXED(2130440101,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268443647,32,FLEN)
NAN_BOXED(2130440101,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268451839,32,FLEN)
NAN_BOXED(2130440101,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268468223,32,FLEN)
NAN_BOXED(2130440101,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268500991,32,FLEN)
NAN_BOXED(2130440101,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268566527,32,FLEN)
NAN_BOXED(2130440101,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268697599,32,FLEN)
NAN_BOXED(2130440101,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268959743,32,FLEN)
NAN_BOXED(2130440101,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(269484031,32,FLEN)
NAN_BOXED(2130440101,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(270532607,32,FLEN)
NAN_BOXED(2130440101,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(272629759,32,FLEN)
NAN_BOXED(2130440101,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(272629760,32,FLEN)
NAN_BOXED(2130440101,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(274726912,32,FLEN)
NAN_BOXED(2130440101,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(275775488,32,FLEN)
NAN_BOXED(2130440101,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(276299776,32,FLEN)
NAN_BOXED(2130440101,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(276561920,32,FLEN)
NAN_BOXED(2130440101,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(276692992,32,FLEN)
NAN_BOXED(2130440101,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(276758528,32,FLEN)
NAN_BOXED(2130440101,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(276791296,32,FLEN)
NAN_BOXED(2130440101,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(276807680,32,FLEN)
NAN_BOXED(2130440101,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(276815872,32,FLEN)
NAN_BOXED(2130440101,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(276819968,32,FLEN)
NAN_BOXED(2130440101,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(276822016,32,FLEN)
NAN_BOXED(2130440101,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(276823040,32,FLEN)
NAN_BOXED(2130440101,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(276823552,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
