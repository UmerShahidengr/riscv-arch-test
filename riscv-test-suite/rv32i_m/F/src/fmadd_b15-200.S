
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:17:59 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_25472:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7d1026 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x017c49 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efd1026; op2val:0x40017c49;
op3val:0x7f666666; valaddr_reg:x3; val_offset:76416*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76416*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25473:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7d1026 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x017c49 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efd1026; op2val:0x40017c49;
op3val:0x7f6db6db; valaddr_reg:x3; val_offset:76419*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76419*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25474:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7d1026 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x017c49 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efd1026; op2val:0x40017c49;
op3val:0x7f7ffff8; valaddr_reg:x3; val_offset:76422*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76422*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25475:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7d1026 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x017c49 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efd1026; op2val:0x40017c49;
op3val:0x7f7ffffc; valaddr_reg:x3; val_offset:76425*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76425*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25476:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7d1026 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x017c49 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efd1026; op2val:0x40017c49;
op3val:0x7f7ffffe; valaddr_reg:x3; val_offset:76428*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76428*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25477:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7eaac4 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x00ab81 and fs3 == 0 and fe3 == 0xef and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efeaac4; op2val:0x4000ab81;
op3val:0x77800000; valaddr_reg:x3; val_offset:76431*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76431*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25478:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7eaac4 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x00ab81 and fs3 == 0 and fe3 == 0xef and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efeaac4; op2val:0x4000ab81;
op3val:0x77800001; valaddr_reg:x3; val_offset:76434*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76434*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25479:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7eaac4 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x00ab81 and fs3 == 0 and fe3 == 0xef and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efeaac4; op2val:0x4000ab81;
op3val:0x77800003; valaddr_reg:x3; val_offset:76437*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76437*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25480:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7eaac4 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x00ab81 and fs3 == 0 and fe3 == 0xef and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efeaac4; op2val:0x4000ab81;
op3val:0x77800007; valaddr_reg:x3; val_offset:76440*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76440*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25481:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7eaac4 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x00ab81 and fs3 == 0 and fe3 == 0xef and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efeaac4; op2val:0x4000ab81;
op3val:0x7780000f; valaddr_reg:x3; val_offset:76443*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76443*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25482:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7eaac4 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x00ab81 and fs3 == 0 and fe3 == 0xef and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efeaac4; op2val:0x4000ab81;
op3val:0x7780001f; valaddr_reg:x3; val_offset:76446*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76446*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25483:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7eaac4 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x00ab81 and fs3 == 0 and fe3 == 0xef and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efeaac4; op2val:0x4000ab81;
op3val:0x7780003f; valaddr_reg:x3; val_offset:76449*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76449*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25484:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7eaac4 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x00ab81 and fs3 == 0 and fe3 == 0xef and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efeaac4; op2val:0x4000ab81;
op3val:0x7780007f; valaddr_reg:x3; val_offset:76452*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76452*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25485:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7eaac4 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x00ab81 and fs3 == 0 and fe3 == 0xef and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efeaac4; op2val:0x4000ab81;
op3val:0x778000ff; valaddr_reg:x3; val_offset:76455*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76455*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25486:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7eaac4 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x00ab81 and fs3 == 0 and fe3 == 0xef and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efeaac4; op2val:0x4000ab81;
op3val:0x778001ff; valaddr_reg:x3; val_offset:76458*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76458*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25487:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7eaac4 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x00ab81 and fs3 == 0 and fe3 == 0xef and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efeaac4; op2val:0x4000ab81;
op3val:0x778003ff; valaddr_reg:x3; val_offset:76461*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76461*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25488:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7eaac4 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x00ab81 and fs3 == 0 and fe3 == 0xef and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efeaac4; op2val:0x4000ab81;
op3val:0x778007ff; valaddr_reg:x3; val_offset:76464*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76464*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25489:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7eaac4 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x00ab81 and fs3 == 0 and fe3 == 0xef and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efeaac4; op2val:0x4000ab81;
op3val:0x77800fff; valaddr_reg:x3; val_offset:76467*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76467*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25490:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7eaac4 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x00ab81 and fs3 == 0 and fe3 == 0xef and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efeaac4; op2val:0x4000ab81;
op3val:0x77801fff; valaddr_reg:x3; val_offset:76470*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76470*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25491:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7eaac4 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x00ab81 and fs3 == 0 and fe3 == 0xef and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efeaac4; op2val:0x4000ab81;
op3val:0x77803fff; valaddr_reg:x3; val_offset:76473*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76473*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25492:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7eaac4 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x00ab81 and fs3 == 0 and fe3 == 0xef and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efeaac4; op2val:0x4000ab81;
op3val:0x77807fff; valaddr_reg:x3; val_offset:76476*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76476*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25493:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7eaac4 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x00ab81 and fs3 == 0 and fe3 == 0xef and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efeaac4; op2val:0x4000ab81;
op3val:0x7780ffff; valaddr_reg:x3; val_offset:76479*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76479*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25494:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7eaac4 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x00ab81 and fs3 == 0 and fe3 == 0xef and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efeaac4; op2val:0x4000ab81;
op3val:0x7781ffff; valaddr_reg:x3; val_offset:76482*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76482*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25495:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7eaac4 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x00ab81 and fs3 == 0 and fe3 == 0xef and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efeaac4; op2val:0x4000ab81;
op3val:0x7783ffff; valaddr_reg:x3; val_offset:76485*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76485*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25496:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7eaac4 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x00ab81 and fs3 == 0 and fe3 == 0xef and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efeaac4; op2val:0x4000ab81;
op3val:0x7787ffff; valaddr_reg:x3; val_offset:76488*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76488*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25497:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7eaac4 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x00ab81 and fs3 == 0 and fe3 == 0xef and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efeaac4; op2val:0x4000ab81;
op3val:0x778fffff; valaddr_reg:x3; val_offset:76491*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76491*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25498:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7eaac4 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x00ab81 and fs3 == 0 and fe3 == 0xef and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efeaac4; op2val:0x4000ab81;
op3val:0x779fffff; valaddr_reg:x3; val_offset:76494*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76494*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25499:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7eaac4 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x00ab81 and fs3 == 0 and fe3 == 0xef and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efeaac4; op2val:0x4000ab81;
op3val:0x77bfffff; valaddr_reg:x3; val_offset:76497*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76497*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25500:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7eaac4 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x00ab81 and fs3 == 0 and fe3 == 0xef and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efeaac4; op2val:0x4000ab81;
op3val:0x77c00000; valaddr_reg:x3; val_offset:76500*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76500*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25501:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7eaac4 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x00ab81 and fs3 == 0 and fe3 == 0xef and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efeaac4; op2val:0x4000ab81;
op3val:0x77e00000; valaddr_reg:x3; val_offset:76503*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76503*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25502:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7eaac4 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x00ab81 and fs3 == 0 and fe3 == 0xef and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efeaac4; op2val:0x4000ab81;
op3val:0x77f00000; valaddr_reg:x3; val_offset:76506*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76506*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25503:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7eaac4 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x00ab81 and fs3 == 0 and fe3 == 0xef and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efeaac4; op2val:0x4000ab81;
op3val:0x77f80000; valaddr_reg:x3; val_offset:76509*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76509*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25504:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7eaac4 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x00ab81 and fs3 == 0 and fe3 == 0xef and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efeaac4; op2val:0x4000ab81;
op3val:0x77fc0000; valaddr_reg:x3; val_offset:76512*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76512*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25505:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7eaac4 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x00ab81 and fs3 == 0 and fe3 == 0xef and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efeaac4; op2val:0x4000ab81;
op3val:0x77fe0000; valaddr_reg:x3; val_offset:76515*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76515*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25506:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7eaac4 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x00ab81 and fs3 == 0 and fe3 == 0xef and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efeaac4; op2val:0x4000ab81;
op3val:0x77ff0000; valaddr_reg:x3; val_offset:76518*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76518*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25507:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7eaac4 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x00ab81 and fs3 == 0 and fe3 == 0xef and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efeaac4; op2val:0x4000ab81;
op3val:0x77ff8000; valaddr_reg:x3; val_offset:76521*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76521*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25508:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7eaac4 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x00ab81 and fs3 == 0 and fe3 == 0xef and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efeaac4; op2val:0x4000ab81;
op3val:0x77ffc000; valaddr_reg:x3; val_offset:76524*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76524*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25509:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7eaac4 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x00ab81 and fs3 == 0 and fe3 == 0xef and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efeaac4; op2val:0x4000ab81;
op3val:0x77ffe000; valaddr_reg:x3; val_offset:76527*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76527*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25510:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7eaac4 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x00ab81 and fs3 == 0 and fe3 == 0xef and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efeaac4; op2val:0x4000ab81;
op3val:0x77fff000; valaddr_reg:x3; val_offset:76530*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76530*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25511:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7eaac4 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x00ab81 and fs3 == 0 and fe3 == 0xef and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efeaac4; op2val:0x4000ab81;
op3val:0x77fff800; valaddr_reg:x3; val_offset:76533*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76533*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25512:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7eaac4 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x00ab81 and fs3 == 0 and fe3 == 0xef and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efeaac4; op2val:0x4000ab81;
op3val:0x77fffc00; valaddr_reg:x3; val_offset:76536*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76536*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25513:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7eaac4 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x00ab81 and fs3 == 0 and fe3 == 0xef and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efeaac4; op2val:0x4000ab81;
op3val:0x77fffe00; valaddr_reg:x3; val_offset:76539*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76539*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25514:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7eaac4 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x00ab81 and fs3 == 0 and fe3 == 0xef and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efeaac4; op2val:0x4000ab81;
op3val:0x77ffff00; valaddr_reg:x3; val_offset:76542*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76542*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25515:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7eaac4 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x00ab81 and fs3 == 0 and fe3 == 0xef and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efeaac4; op2val:0x4000ab81;
op3val:0x77ffff80; valaddr_reg:x3; val_offset:76545*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76545*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25516:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7eaac4 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x00ab81 and fs3 == 0 and fe3 == 0xef and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efeaac4; op2val:0x4000ab81;
op3val:0x77ffffc0; valaddr_reg:x3; val_offset:76548*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76548*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25517:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7eaac4 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x00ab81 and fs3 == 0 and fe3 == 0xef and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efeaac4; op2val:0x4000ab81;
op3val:0x77ffffe0; valaddr_reg:x3; val_offset:76551*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76551*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25518:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7eaac4 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x00ab81 and fs3 == 0 and fe3 == 0xef and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efeaac4; op2val:0x4000ab81;
op3val:0x77fffff0; valaddr_reg:x3; val_offset:76554*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76554*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25519:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7eaac4 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x00ab81 and fs3 == 0 and fe3 == 0xef and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efeaac4; op2val:0x4000ab81;
op3val:0x77fffff8; valaddr_reg:x3; val_offset:76557*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76557*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25520:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7eaac4 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x00ab81 and fs3 == 0 and fe3 == 0xef and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efeaac4; op2val:0x4000ab81;
op3val:0x77fffffc; valaddr_reg:x3; val_offset:76560*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76560*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25521:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7eaac4 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x00ab81 and fs3 == 0 and fe3 == 0xef and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efeaac4; op2val:0x4000ab81;
op3val:0x77fffffe; valaddr_reg:x3; val_offset:76563*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76563*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25522:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7eaac4 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x00ab81 and fs3 == 0 and fe3 == 0xef and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efeaac4; op2val:0x4000ab81;
op3val:0x77ffffff; valaddr_reg:x3; val_offset:76566*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76566*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25523:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7eaac4 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x00ab81 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efeaac4; op2val:0x4000ab81;
op3val:0x7f000001; valaddr_reg:x3; val_offset:76569*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76569*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25524:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7eaac4 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x00ab81 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efeaac4; op2val:0x4000ab81;
op3val:0x7f000003; valaddr_reg:x3; val_offset:76572*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76572*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25525:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7eaac4 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x00ab81 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efeaac4; op2val:0x4000ab81;
op3val:0x7f000007; valaddr_reg:x3; val_offset:76575*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76575*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25526:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7eaac4 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x00ab81 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efeaac4; op2val:0x4000ab81;
op3val:0x7f199999; valaddr_reg:x3; val_offset:76578*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76578*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25527:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7eaac4 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x00ab81 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efeaac4; op2val:0x4000ab81;
op3val:0x7f249249; valaddr_reg:x3; val_offset:76581*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76581*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25528:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7eaac4 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x00ab81 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efeaac4; op2val:0x4000ab81;
op3val:0x7f333333; valaddr_reg:x3; val_offset:76584*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76584*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25529:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7eaac4 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x00ab81 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efeaac4; op2val:0x4000ab81;
op3val:0x7f36db6d; valaddr_reg:x3; val_offset:76587*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76587*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25530:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7eaac4 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x00ab81 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efeaac4; op2val:0x4000ab81;
op3val:0x7f3bbbbb; valaddr_reg:x3; val_offset:76590*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76590*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25531:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7eaac4 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x00ab81 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efeaac4; op2val:0x4000ab81;
op3val:0x7f444444; valaddr_reg:x3; val_offset:76593*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76593*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25532:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7eaac4 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x00ab81 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efeaac4; op2val:0x4000ab81;
op3val:0x7f4ccccc; valaddr_reg:x3; val_offset:76596*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76596*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25533:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7eaac4 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x00ab81 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efeaac4; op2val:0x4000ab81;
op3val:0x7f5b6db6; valaddr_reg:x3; val_offset:76599*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76599*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25534:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7eaac4 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x00ab81 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efeaac4; op2val:0x4000ab81;
op3val:0x7f666666; valaddr_reg:x3; val_offset:76602*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76602*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25535:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7eaac4 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x00ab81 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efeaac4; op2val:0x4000ab81;
op3val:0x7f6db6db; valaddr_reg:x3; val_offset:76605*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76605*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25536:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7eaac4 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x00ab81 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efeaac4; op2val:0x4000ab81;
op3val:0x7f7ffff8; valaddr_reg:x3; val_offset:76608*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76608*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25537:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7eaac4 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x00ab81 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efeaac4; op2val:0x4000ab81;
op3val:0x7f7ffffc; valaddr_reg:x3; val_offset:76611*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76611*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25538:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7eaac4 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x00ab81 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efeaac4; op2val:0x4000ab81;
op3val:0x7f7ffffe; valaddr_reg:x3; val_offset:76614*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76614*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25539:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7f97b6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x401a1d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eff97b6; op2val:0x401a1d;
op3val:0x3f800001; valaddr_reg:x3; val_offset:76617*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76617*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25540:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7f97b6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x401a1d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eff97b6; op2val:0x401a1d;
op3val:0x3f800003; valaddr_reg:x3; val_offset:76620*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76620*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25541:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7f97b6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x401a1d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eff97b6; op2val:0x401a1d;
op3val:0x3f800007; valaddr_reg:x3; val_offset:76623*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76623*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25542:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7f97b6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x401a1d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eff97b6; op2val:0x401a1d;
op3val:0x3f999999; valaddr_reg:x3; val_offset:76626*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76626*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25543:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7f97b6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x401a1d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eff97b6; op2val:0x401a1d;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:76629*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76629*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25544:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7f97b6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x401a1d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eff97b6; op2val:0x401a1d;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:76632*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76632*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25545:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7f97b6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x401a1d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eff97b6; op2val:0x401a1d;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:76635*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76635*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25546:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7f97b6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x401a1d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eff97b6; op2val:0x401a1d;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:76638*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76638*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25547:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7f97b6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x401a1d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eff97b6; op2val:0x401a1d;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:76641*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76641*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25548:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7f97b6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x401a1d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eff97b6; op2val:0x401a1d;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:76644*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76644*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25549:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7f97b6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x401a1d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eff97b6; op2val:0x401a1d;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:76647*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76647*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25550:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7f97b6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x401a1d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eff97b6; op2val:0x401a1d;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:76650*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76650*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25551:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7f97b6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x401a1d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eff97b6; op2val:0x401a1d;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:76653*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76653*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25552:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7f97b6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x401a1d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eff97b6; op2val:0x401a1d;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:76656*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76656*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25553:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7f97b6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x401a1d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eff97b6; op2val:0x401a1d;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:76659*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76659*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25554:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7f97b6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x401a1d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eff97b6; op2val:0x401a1d;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:76662*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76662*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25555:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7f97b6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x401a1d and fs3 == 0 and fe3 == 0x92 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eff97b6; op2val:0x401a1d;
op3val:0x49000000; valaddr_reg:x3; val_offset:76665*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76665*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25556:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7f97b6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x401a1d and fs3 == 0 and fe3 == 0x92 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eff97b6; op2val:0x401a1d;
op3val:0x49000001; valaddr_reg:x3; val_offset:76668*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76668*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25557:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7f97b6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x401a1d and fs3 == 0 and fe3 == 0x92 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eff97b6; op2val:0x401a1d;
op3val:0x49000003; valaddr_reg:x3; val_offset:76671*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76671*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25558:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7f97b6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x401a1d and fs3 == 0 and fe3 == 0x92 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eff97b6; op2val:0x401a1d;
op3val:0x49000007; valaddr_reg:x3; val_offset:76674*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76674*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25559:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7f97b6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x401a1d and fs3 == 0 and fe3 == 0x92 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eff97b6; op2val:0x401a1d;
op3val:0x4900000f; valaddr_reg:x3; val_offset:76677*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76677*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25560:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7f97b6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x401a1d and fs3 == 0 and fe3 == 0x92 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eff97b6; op2val:0x401a1d;
op3val:0x4900001f; valaddr_reg:x3; val_offset:76680*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76680*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25561:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7f97b6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x401a1d and fs3 == 0 and fe3 == 0x92 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eff97b6; op2val:0x401a1d;
op3val:0x4900003f; valaddr_reg:x3; val_offset:76683*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76683*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25562:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7f97b6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x401a1d and fs3 == 0 and fe3 == 0x92 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eff97b6; op2val:0x401a1d;
op3val:0x4900007f; valaddr_reg:x3; val_offset:76686*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76686*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25563:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7f97b6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x401a1d and fs3 == 0 and fe3 == 0x92 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eff97b6; op2val:0x401a1d;
op3val:0x490000ff; valaddr_reg:x3; val_offset:76689*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76689*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25564:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7f97b6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x401a1d and fs3 == 0 and fe3 == 0x92 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eff97b6; op2val:0x401a1d;
op3val:0x490001ff; valaddr_reg:x3; val_offset:76692*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76692*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25565:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7f97b6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x401a1d and fs3 == 0 and fe3 == 0x92 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eff97b6; op2val:0x401a1d;
op3val:0x490003ff; valaddr_reg:x3; val_offset:76695*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76695*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25566:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7f97b6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x401a1d and fs3 == 0 and fe3 == 0x92 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eff97b6; op2val:0x401a1d;
op3val:0x490007ff; valaddr_reg:x3; val_offset:76698*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76698*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25567:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7f97b6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x401a1d and fs3 == 0 and fe3 == 0x92 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eff97b6; op2val:0x401a1d;
op3val:0x49000fff; valaddr_reg:x3; val_offset:76701*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76701*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25568:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7f97b6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x401a1d and fs3 == 0 and fe3 == 0x92 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eff97b6; op2val:0x401a1d;
op3val:0x49001fff; valaddr_reg:x3; val_offset:76704*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76704*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25569:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7f97b6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x401a1d and fs3 == 0 and fe3 == 0x92 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eff97b6; op2val:0x401a1d;
op3val:0x49003fff; valaddr_reg:x3; val_offset:76707*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76707*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25570:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7f97b6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x401a1d and fs3 == 0 and fe3 == 0x92 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eff97b6; op2val:0x401a1d;
op3val:0x49007fff; valaddr_reg:x3; val_offset:76710*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76710*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25571:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7f97b6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x401a1d and fs3 == 0 and fe3 == 0x92 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eff97b6; op2val:0x401a1d;
op3val:0x4900ffff; valaddr_reg:x3; val_offset:76713*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76713*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25572:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7f97b6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x401a1d and fs3 == 0 and fe3 == 0x92 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eff97b6; op2val:0x401a1d;
op3val:0x4901ffff; valaddr_reg:x3; val_offset:76716*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76716*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25573:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7f97b6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x401a1d and fs3 == 0 and fe3 == 0x92 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eff97b6; op2val:0x401a1d;
op3val:0x4903ffff; valaddr_reg:x3; val_offset:76719*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76719*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25574:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7f97b6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x401a1d and fs3 == 0 and fe3 == 0x92 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eff97b6; op2val:0x401a1d;
op3val:0x4907ffff; valaddr_reg:x3; val_offset:76722*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76722*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25575:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7f97b6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x401a1d and fs3 == 0 and fe3 == 0x92 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eff97b6; op2val:0x401a1d;
op3val:0x490fffff; valaddr_reg:x3; val_offset:76725*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76725*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25576:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7f97b6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x401a1d and fs3 == 0 and fe3 == 0x92 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eff97b6; op2val:0x401a1d;
op3val:0x491fffff; valaddr_reg:x3; val_offset:76728*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76728*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25577:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7f97b6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x401a1d and fs3 == 0 and fe3 == 0x92 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eff97b6; op2val:0x401a1d;
op3val:0x493fffff; valaddr_reg:x3; val_offset:76731*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76731*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25578:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7f97b6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x401a1d and fs3 == 0 and fe3 == 0x92 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eff97b6; op2val:0x401a1d;
op3val:0x49400000; valaddr_reg:x3; val_offset:76734*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76734*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25579:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7f97b6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x401a1d and fs3 == 0 and fe3 == 0x92 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eff97b6; op2val:0x401a1d;
op3val:0x49600000; valaddr_reg:x3; val_offset:76737*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76737*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25580:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7f97b6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x401a1d and fs3 == 0 and fe3 == 0x92 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eff97b6; op2val:0x401a1d;
op3val:0x49700000; valaddr_reg:x3; val_offset:76740*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76740*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25581:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7f97b6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x401a1d and fs3 == 0 and fe3 == 0x92 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eff97b6; op2val:0x401a1d;
op3val:0x49780000; valaddr_reg:x3; val_offset:76743*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76743*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25582:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7f97b6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x401a1d and fs3 == 0 and fe3 == 0x92 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eff97b6; op2val:0x401a1d;
op3val:0x497c0000; valaddr_reg:x3; val_offset:76746*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76746*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25583:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7f97b6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x401a1d and fs3 == 0 and fe3 == 0x92 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eff97b6; op2val:0x401a1d;
op3val:0x497e0000; valaddr_reg:x3; val_offset:76749*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76749*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25584:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7f97b6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x401a1d and fs3 == 0 and fe3 == 0x92 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eff97b6; op2val:0x401a1d;
op3val:0x497f0000; valaddr_reg:x3; val_offset:76752*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76752*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25585:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7f97b6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x401a1d and fs3 == 0 and fe3 == 0x92 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eff97b6; op2val:0x401a1d;
op3val:0x497f8000; valaddr_reg:x3; val_offset:76755*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76755*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25586:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7f97b6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x401a1d and fs3 == 0 and fe3 == 0x92 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eff97b6; op2val:0x401a1d;
op3val:0x497fc000; valaddr_reg:x3; val_offset:76758*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76758*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25587:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7f97b6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x401a1d and fs3 == 0 and fe3 == 0x92 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eff97b6; op2val:0x401a1d;
op3val:0x497fe000; valaddr_reg:x3; val_offset:76761*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76761*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25588:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7f97b6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x401a1d and fs3 == 0 and fe3 == 0x92 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eff97b6; op2val:0x401a1d;
op3val:0x497ff000; valaddr_reg:x3; val_offset:76764*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76764*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25589:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7f97b6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x401a1d and fs3 == 0 and fe3 == 0x92 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eff97b6; op2val:0x401a1d;
op3val:0x497ff800; valaddr_reg:x3; val_offset:76767*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76767*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25590:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7f97b6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x401a1d and fs3 == 0 and fe3 == 0x92 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eff97b6; op2val:0x401a1d;
op3val:0x497ffc00; valaddr_reg:x3; val_offset:76770*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76770*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25591:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7f97b6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x401a1d and fs3 == 0 and fe3 == 0x92 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eff97b6; op2val:0x401a1d;
op3val:0x497ffe00; valaddr_reg:x3; val_offset:76773*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76773*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25592:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7f97b6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x401a1d and fs3 == 0 and fe3 == 0x92 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eff97b6; op2val:0x401a1d;
op3val:0x497fff00; valaddr_reg:x3; val_offset:76776*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76776*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25593:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7f97b6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x401a1d and fs3 == 0 and fe3 == 0x92 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eff97b6; op2val:0x401a1d;
op3val:0x497fff80; valaddr_reg:x3; val_offset:76779*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76779*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25594:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7f97b6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x401a1d and fs3 == 0 and fe3 == 0x92 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eff97b6; op2val:0x401a1d;
op3val:0x497fffc0; valaddr_reg:x3; val_offset:76782*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76782*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25595:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7f97b6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x401a1d and fs3 == 0 and fe3 == 0x92 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eff97b6; op2val:0x401a1d;
op3val:0x497fffe0; valaddr_reg:x3; val_offset:76785*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76785*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25596:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7f97b6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x401a1d and fs3 == 0 and fe3 == 0x92 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eff97b6; op2val:0x401a1d;
op3val:0x497ffff0; valaddr_reg:x3; val_offset:76788*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76788*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25597:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7f97b6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x401a1d and fs3 == 0 and fe3 == 0x92 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eff97b6; op2val:0x401a1d;
op3val:0x497ffff8; valaddr_reg:x3; val_offset:76791*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76791*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25598:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7f97b6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x401a1d and fs3 == 0 and fe3 == 0x92 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eff97b6; op2val:0x401a1d;
op3val:0x497ffffc; valaddr_reg:x3; val_offset:76794*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76794*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25599:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7f97b6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x401a1d and fs3 == 0 and fe3 == 0x92 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eff97b6; op2val:0x401a1d;
op3val:0x497ffffe; valaddr_reg:x3; val_offset:76797*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76797*0 + 3*199*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2130513958,32,FLEN)
NAN_BOXED(1073839177,32,FLEN)
NAN_BOXED(2137417318,32,FLEN)
NAN_BOXED(2130513958,32,FLEN)
NAN_BOXED(1073839177,32,FLEN)
NAN_BOXED(2137896667,32,FLEN)
NAN_BOXED(2130513958,32,FLEN)
NAN_BOXED(1073839177,32,FLEN)
NAN_BOXED(2139095032,32,FLEN)
NAN_BOXED(2130513958,32,FLEN)
NAN_BOXED(1073839177,32,FLEN)
NAN_BOXED(2139095036,32,FLEN)
NAN_BOXED(2130513958,32,FLEN)
NAN_BOXED(1073839177,32,FLEN)
NAN_BOXED(2139095038,32,FLEN)
NAN_BOXED(2130619076,32,FLEN)
NAN_BOXED(1073785729,32,FLEN)
NAN_BOXED(2004877312,32,FLEN)
NAN_BOXED(2130619076,32,FLEN)
NAN_BOXED(1073785729,32,FLEN)
NAN_BOXED(2004877313,32,FLEN)
NAN_BOXED(2130619076,32,FLEN)
NAN_BOXED(1073785729,32,FLEN)
NAN_BOXED(2004877315,32,FLEN)
NAN_BOXED(2130619076,32,FLEN)
NAN_BOXED(1073785729,32,FLEN)
NAN_BOXED(2004877319,32,FLEN)
NAN_BOXED(2130619076,32,FLEN)
NAN_BOXED(1073785729,32,FLEN)
NAN_BOXED(2004877327,32,FLEN)
NAN_BOXED(2130619076,32,FLEN)
NAN_BOXED(1073785729,32,FLEN)
NAN_BOXED(2004877343,32,FLEN)
NAN_BOXED(2130619076,32,FLEN)
NAN_BOXED(1073785729,32,FLEN)
NAN_BOXED(2004877375,32,FLEN)
NAN_BOXED(2130619076,32,FLEN)
NAN_BOXED(1073785729,32,FLEN)
NAN_BOXED(2004877439,32,FLEN)
NAN_BOXED(2130619076,32,FLEN)
NAN_BOXED(1073785729,32,FLEN)
NAN_BOXED(2004877567,32,FLEN)
NAN_BOXED(2130619076,32,FLEN)
NAN_BOXED(1073785729,32,FLEN)
NAN_BOXED(2004877823,32,FLEN)
NAN_BOXED(2130619076,32,FLEN)
NAN_BOXED(1073785729,32,FLEN)
NAN_BOXED(2004878335,32,FLEN)
NAN_BOXED(2130619076,32,FLEN)
NAN_BOXED(1073785729,32,FLEN)
NAN_BOXED(2004879359,32,FLEN)
NAN_BOXED(2130619076,32,FLEN)
NAN_BOXED(1073785729,32,FLEN)
NAN_BOXED(2004881407,32,FLEN)
NAN_BOXED(2130619076,32,FLEN)
NAN_BOXED(1073785729,32,FLEN)
NAN_BOXED(2004885503,32,FLEN)
NAN_BOXED(2130619076,32,FLEN)
NAN_BOXED(1073785729,32,FLEN)
NAN_BOXED(2004893695,32,FLEN)
NAN_BOXED(2130619076,32,FLEN)
NAN_BOXED(1073785729,32,FLEN)
NAN_BOXED(2004910079,32,FLEN)
NAN_BOXED(2130619076,32,FLEN)
NAN_BOXED(1073785729,32,FLEN)
NAN_BOXED(2004942847,32,FLEN)
NAN_BOXED(2130619076,32,FLEN)
NAN_BOXED(1073785729,32,FLEN)
NAN_BOXED(2005008383,32,FLEN)
NAN_BOXED(2130619076,32,FLEN)
NAN_BOXED(1073785729,32,FLEN)
NAN_BOXED(2005139455,32,FLEN)
NAN_BOXED(2130619076,32,FLEN)
NAN_BOXED(1073785729,32,FLEN)
NAN_BOXED(2005401599,32,FLEN)
NAN_BOXED(2130619076,32,FLEN)
NAN_BOXED(1073785729,32,FLEN)
NAN_BOXED(2005925887,32,FLEN)
NAN_BOXED(2130619076,32,FLEN)
NAN_BOXED(1073785729,32,FLEN)
NAN_BOXED(2006974463,32,FLEN)
NAN_BOXED(2130619076,32,FLEN)
NAN_BOXED(1073785729,32,FLEN)
NAN_BOXED(2009071615,32,FLEN)
NAN_BOXED(2130619076,32,FLEN)
NAN_BOXED(1073785729,32,FLEN)
NAN_BOXED(2009071616,32,FLEN)
NAN_BOXED(2130619076,32,FLEN)
NAN_BOXED(1073785729,32,FLEN)
NAN_BOXED(2011168768,32,FLEN)
NAN_BOXED(2130619076,32,FLEN)
NAN_BOXED(1073785729,32,FLEN)
NAN_BOXED(2012217344,32,FLEN)
NAN_BOXED(2130619076,32,FLEN)
NAN_BOXED(1073785729,32,FLEN)
NAN_BOXED(2012741632,32,FLEN)
NAN_BOXED(2130619076,32,FLEN)
NAN_BOXED(1073785729,32,FLEN)
NAN_BOXED(2013003776,32,FLEN)
NAN_BOXED(2130619076,32,FLEN)
NAN_BOXED(1073785729,32,FLEN)
NAN_BOXED(2013134848,32,FLEN)
NAN_BOXED(2130619076,32,FLEN)
NAN_BOXED(1073785729,32,FLEN)
NAN_BOXED(2013200384,32,FLEN)
NAN_BOXED(2130619076,32,FLEN)
NAN_BOXED(1073785729,32,FLEN)
NAN_BOXED(2013233152,32,FLEN)
NAN_BOXED(2130619076,32,FLEN)
NAN_BOXED(1073785729,32,FLEN)
NAN_BOXED(2013249536,32,FLEN)
NAN_BOXED(2130619076,32,FLEN)
NAN_BOXED(1073785729,32,FLEN)
NAN_BOXED(2013257728,32,FLEN)
NAN_BOXED(2130619076,32,FLEN)
NAN_BOXED(1073785729,32,FLEN)
NAN_BOXED(2013261824,32,FLEN)
NAN_BOXED(2130619076,32,FLEN)
NAN_BOXED(1073785729,32,FLEN)
NAN_BOXED(2013263872,32,FLEN)
NAN_BOXED(2130619076,32,FLEN)
NAN_BOXED(1073785729,32,FLEN)
NAN_BOXED(2013264896,32,FLEN)
NAN_BOXED(2130619076,32,FLEN)
NAN_BOXED(1073785729,32,FLEN)
NAN_BOXED(2013265408,32,FLEN)
NAN_BOXED(2130619076,32,FLEN)
NAN_BOXED(1073785729,32,FLEN)
NAN_BOXED(2013265664,32,FLEN)
NAN_BOXED(2130619076,32,FLEN)
NAN_BOXED(1073785729,32,FLEN)
NAN_BOXED(2013265792,32,FLEN)
NAN_BOXED(2130619076,32,FLEN)
NAN_BOXED(1073785729,32,FLEN)
NAN_BOXED(2013265856,32,FLEN)
NAN_BOXED(2130619076,32,FLEN)
NAN_BOXED(1073785729,32,FLEN)
NAN_BOXED(2013265888,32,FLEN)
NAN_BOXED(2130619076,32,FLEN)
NAN_BOXED(1073785729,32,FLEN)
NAN_BOXED(2013265904,32,FLEN)
NAN_BOXED(2130619076,32,FLEN)
NAN_BOXED(1073785729,32,FLEN)
NAN_BOXED(2013265912,32,FLEN)
NAN_BOXED(2130619076,32,FLEN)
NAN_BOXED(1073785729,32,FLEN)
NAN_BOXED(2013265916,32,FLEN)
NAN_BOXED(2130619076,32,FLEN)
NAN_BOXED(1073785729,32,FLEN)
NAN_BOXED(2013265918,32,FLEN)
NAN_BOXED(2130619076,32,FLEN)
NAN_BOXED(1073785729,32,FLEN)
NAN_BOXED(2013265919,32,FLEN)
NAN_BOXED(2130619076,32,FLEN)
NAN_BOXED(1073785729,32,FLEN)
NAN_BOXED(2130706433,32,FLEN)
NAN_BOXED(2130619076,32,FLEN)
NAN_BOXED(1073785729,32,FLEN)
NAN_BOXED(2130706435,32,FLEN)
NAN_BOXED(2130619076,32,FLEN)
NAN_BOXED(1073785729,32,FLEN)
NAN_BOXED(2130706439,32,FLEN)
NAN_BOXED(2130619076,32,FLEN)
NAN_BOXED(1073785729,32,FLEN)
NAN_BOXED(2132384153,32,FLEN)
NAN_BOXED(2130619076,32,FLEN)
NAN_BOXED(1073785729,32,FLEN)
NAN_BOXED(2133103177,32,FLEN)
NAN_BOXED(2130619076,32,FLEN)
NAN_BOXED(1073785729,32,FLEN)
NAN_BOXED(2134061875,32,FLEN)
NAN_BOXED(2130619076,32,FLEN)
NAN_BOXED(1073785729,32,FLEN)
NAN_BOXED(2134301549,32,FLEN)
NAN_BOXED(2130619076,32,FLEN)
NAN_BOXED(1073785729,32,FLEN)
NAN_BOXED(2134621115,32,FLEN)
NAN_BOXED(2130619076,32,FLEN)
NAN_BOXED(1073785729,32,FLEN)
NAN_BOXED(2135180356,32,FLEN)
NAN_BOXED(2130619076,32,FLEN)
NAN_BOXED(1073785729,32,FLEN)
NAN_BOXED(2135739596,32,FLEN)
NAN_BOXED(2130619076,32,FLEN)
NAN_BOXED(1073785729,32,FLEN)
NAN_BOXED(2136698294,32,FLEN)
NAN_BOXED(2130619076,32,FLEN)
NAN_BOXED(1073785729,32,FLEN)
NAN_BOXED(2137417318,32,FLEN)
NAN_BOXED(2130619076,32,FLEN)
NAN_BOXED(1073785729,32,FLEN)
NAN_BOXED(2137896667,32,FLEN)
NAN_BOXED(2130619076,32,FLEN)
NAN_BOXED(1073785729,32,FLEN)
NAN_BOXED(2139095032,32,FLEN)
NAN_BOXED(2130619076,32,FLEN)
NAN_BOXED(1073785729,32,FLEN)
NAN_BOXED(2139095036,32,FLEN)
NAN_BOXED(2130619076,32,FLEN)
NAN_BOXED(1073785729,32,FLEN)
NAN_BOXED(2139095038,32,FLEN)
NAN_BOXED(2130679734,32,FLEN)
NAN_BOXED(4200989,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2130679734,32,FLEN)
NAN_BOXED(4200989,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2130679734,32,FLEN)
NAN_BOXED(4200989,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2130679734,32,FLEN)
NAN_BOXED(4200989,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2130679734,32,FLEN)
NAN_BOXED(4200989,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2130679734,32,FLEN)
NAN_BOXED(4200989,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2130679734,32,FLEN)
NAN_BOXED(4200989,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2130679734,32,FLEN)
NAN_BOXED(4200989,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2130679734,32,FLEN)
NAN_BOXED(4200989,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2130679734,32,FLEN)
NAN_BOXED(4200989,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2130679734,32,FLEN)
NAN_BOXED(4200989,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2130679734,32,FLEN)
NAN_BOXED(4200989,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2130679734,32,FLEN)
NAN_BOXED(4200989,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2130679734,32,FLEN)
NAN_BOXED(4200989,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2130679734,32,FLEN)
NAN_BOXED(4200989,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2130679734,32,FLEN)
NAN_BOXED(4200989,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2130679734,32,FLEN)
NAN_BOXED(4200989,32,FLEN)
NAN_BOXED(1224736768,32,FLEN)
NAN_BOXED(2130679734,32,FLEN)
NAN_BOXED(4200989,32,FLEN)
NAN_BOXED(1224736769,32,FLEN)
NAN_BOXED(2130679734,32,FLEN)
NAN_BOXED(4200989,32,FLEN)
NAN_BOXED(1224736771,32,FLEN)
NAN_BOXED(2130679734,32,FLEN)
NAN_BOXED(4200989,32,FLEN)
NAN_BOXED(1224736775,32,FLEN)
NAN_BOXED(2130679734,32,FLEN)
NAN_BOXED(4200989,32,FLEN)
NAN_BOXED(1224736783,32,FLEN)
NAN_BOXED(2130679734,32,FLEN)
NAN_BOXED(4200989,32,FLEN)
NAN_BOXED(1224736799,32,FLEN)
NAN_BOXED(2130679734,32,FLEN)
NAN_BOXED(4200989,32,FLEN)
NAN_BOXED(1224736831,32,FLEN)
NAN_BOXED(2130679734,32,FLEN)
NAN_BOXED(4200989,32,FLEN)
NAN_BOXED(1224736895,32,FLEN)
NAN_BOXED(2130679734,32,FLEN)
NAN_BOXED(4200989,32,FLEN)
NAN_BOXED(1224737023,32,FLEN)
NAN_BOXED(2130679734,32,FLEN)
NAN_BOXED(4200989,32,FLEN)
NAN_BOXED(1224737279,32,FLEN)
NAN_BOXED(2130679734,32,FLEN)
NAN_BOXED(4200989,32,FLEN)
NAN_BOXED(1224737791,32,FLEN)
NAN_BOXED(2130679734,32,FLEN)
NAN_BOXED(4200989,32,FLEN)
NAN_BOXED(1224738815,32,FLEN)
NAN_BOXED(2130679734,32,FLEN)
NAN_BOXED(4200989,32,FLEN)
NAN_BOXED(1224740863,32,FLEN)
NAN_BOXED(2130679734,32,FLEN)
NAN_BOXED(4200989,32,FLEN)
NAN_BOXED(1224744959,32,FLEN)
NAN_BOXED(2130679734,32,FLEN)
NAN_BOXED(4200989,32,FLEN)
NAN_BOXED(1224753151,32,FLEN)
NAN_BOXED(2130679734,32,FLEN)
NAN_BOXED(4200989,32,FLEN)
NAN_BOXED(1224769535,32,FLEN)
NAN_BOXED(2130679734,32,FLEN)
NAN_BOXED(4200989,32,FLEN)
NAN_BOXED(1224802303,32,FLEN)
NAN_BOXED(2130679734,32,FLEN)
NAN_BOXED(4200989,32,FLEN)
NAN_BOXED(1224867839,32,FLEN)
NAN_BOXED(2130679734,32,FLEN)
NAN_BOXED(4200989,32,FLEN)
NAN_BOXED(1224998911,32,FLEN)
NAN_BOXED(2130679734,32,FLEN)
NAN_BOXED(4200989,32,FLEN)
NAN_BOXED(1225261055,32,FLEN)
NAN_BOXED(2130679734,32,FLEN)
NAN_BOXED(4200989,32,FLEN)
NAN_BOXED(1225785343,32,FLEN)
NAN_BOXED(2130679734,32,FLEN)
NAN_BOXED(4200989,32,FLEN)
NAN_BOXED(1226833919,32,FLEN)
NAN_BOXED(2130679734,32,FLEN)
NAN_BOXED(4200989,32,FLEN)
NAN_BOXED(1228931071,32,FLEN)
NAN_BOXED(2130679734,32,FLEN)
NAN_BOXED(4200989,32,FLEN)
NAN_BOXED(1228931072,32,FLEN)
NAN_BOXED(2130679734,32,FLEN)
NAN_BOXED(4200989,32,FLEN)
NAN_BOXED(1231028224,32,FLEN)
NAN_BOXED(2130679734,32,FLEN)
NAN_BOXED(4200989,32,FLEN)
NAN_BOXED(1232076800,32,FLEN)
NAN_BOXED(2130679734,32,FLEN)
NAN_BOXED(4200989,32,FLEN)
NAN_BOXED(1232601088,32,FLEN)
NAN_BOXED(2130679734,32,FLEN)
NAN_BOXED(4200989,32,FLEN)
NAN_BOXED(1232863232,32,FLEN)
NAN_BOXED(2130679734,32,FLEN)
NAN_BOXED(4200989,32,FLEN)
NAN_BOXED(1232994304,32,FLEN)
NAN_BOXED(2130679734,32,FLEN)
NAN_BOXED(4200989,32,FLEN)
NAN_BOXED(1233059840,32,FLEN)
NAN_BOXED(2130679734,32,FLEN)
NAN_BOXED(4200989,32,FLEN)
NAN_BOXED(1233092608,32,FLEN)
NAN_BOXED(2130679734,32,FLEN)
NAN_BOXED(4200989,32,FLEN)
NAN_BOXED(1233108992,32,FLEN)
NAN_BOXED(2130679734,32,FLEN)
NAN_BOXED(4200989,32,FLEN)
NAN_BOXED(1233117184,32,FLEN)
NAN_BOXED(2130679734,32,FLEN)
NAN_BOXED(4200989,32,FLEN)
NAN_BOXED(1233121280,32,FLEN)
NAN_BOXED(2130679734,32,FLEN)
NAN_BOXED(4200989,32,FLEN)
NAN_BOXED(1233123328,32,FLEN)
NAN_BOXED(2130679734,32,FLEN)
NAN_BOXED(4200989,32,FLEN)
NAN_BOXED(1233124352,32,FLEN)
NAN_BOXED(2130679734,32,FLEN)
NAN_BOXED(4200989,32,FLEN)
NAN_BOXED(1233124864,32,FLEN)
NAN_BOXED(2130679734,32,FLEN)
NAN_BOXED(4200989,32,FLEN)
NAN_BOXED(1233125120,32,FLEN)
NAN_BOXED(2130679734,32,FLEN)
NAN_BOXED(4200989,32,FLEN)
NAN_BOXED(1233125248,32,FLEN)
NAN_BOXED(2130679734,32,FLEN)
NAN_BOXED(4200989,32,FLEN)
NAN_BOXED(1233125312,32,FLEN)
NAN_BOXED(2130679734,32,FLEN)
NAN_BOXED(4200989,32,FLEN)
NAN_BOXED(1233125344,32,FLEN)
NAN_BOXED(2130679734,32,FLEN)
NAN_BOXED(4200989,32,FLEN)
NAN_BOXED(1233125360,32,FLEN)
NAN_BOXED(2130679734,32,FLEN)
NAN_BOXED(4200989,32,FLEN)
NAN_BOXED(1233125368,32,FLEN)
NAN_BOXED(2130679734,32,FLEN)
NAN_BOXED(4200989,32,FLEN)
NAN_BOXED(1233125372,32,FLEN)
NAN_BOXED(2130679734,32,FLEN)
NAN_BOXED(4200989,32,FLEN)
NAN_BOXED(1233125374,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
