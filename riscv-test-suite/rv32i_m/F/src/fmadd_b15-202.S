
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:17:59 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_25728:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00a730 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00a730; op2val:0x0;
op3val:0x199999; valaddr_reg:x3; val_offset:77184*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77184*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25729:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00a730 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00a730; op2val:0x0;
op3val:0x249249; valaddr_reg:x3; val_offset:77187*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77187*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25730:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00a730 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00a730; op2val:0x0;
op3val:0x333333; valaddr_reg:x3; val_offset:77190*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77190*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25731:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00a730 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00a730; op2val:0x0;
op3val:0x36db6d; valaddr_reg:x3; val_offset:77193*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77193*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25732:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00a730 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00a730; op2val:0x0;
op3val:0x3bbbbb; valaddr_reg:x3; val_offset:77196*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77196*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25733:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00a730 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00a730; op2val:0x0;
op3val:0x444444; valaddr_reg:x3; val_offset:77199*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77199*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25734:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00a730 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00a730; op2val:0x0;
op3val:0x4ccccc; valaddr_reg:x3; val_offset:77202*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77202*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25735:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00a730 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00a730; op2val:0x0;
op3val:0x5b6db6; valaddr_reg:x3; val_offset:77205*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77205*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25736:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00a730 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00a730; op2val:0x0;
op3val:0x666666; valaddr_reg:x3; val_offset:77208*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77208*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25737:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00a730 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00a730; op2val:0x0;
op3val:0x6db6db; valaddr_reg:x3; val_offset:77211*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77211*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25738:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00a730 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00a730; op2val:0x0;
op3val:0x7ffff8; valaddr_reg:x3; val_offset:77214*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77214*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25739:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00a730 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00a730; op2val:0x0;
op3val:0x7ffffc; valaddr_reg:x3; val_offset:77217*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77217*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25740:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00a730 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00a730; op2val:0x0;
op3val:0x7ffffe; valaddr_reg:x3; val_offset:77220*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77220*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25741:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00a730 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00a730; op2val:0x0;
op3val:0x2800000; valaddr_reg:x3; val_offset:77223*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77223*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25742:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00a730 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00a730; op2val:0x0;
op3val:0x2800001; valaddr_reg:x3; val_offset:77226*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77226*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25743:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00a730 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00a730; op2val:0x0;
op3val:0x2800003; valaddr_reg:x3; val_offset:77229*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77229*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25744:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00a730 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00a730; op2val:0x0;
op3val:0x2800007; valaddr_reg:x3; val_offset:77232*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77232*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25745:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00a730 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00a730; op2val:0x0;
op3val:0x280000f; valaddr_reg:x3; val_offset:77235*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77235*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25746:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00a730 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00a730; op2val:0x0;
op3val:0x280001f; valaddr_reg:x3; val_offset:77238*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77238*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25747:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00a730 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00a730; op2val:0x0;
op3val:0x280003f; valaddr_reg:x3; val_offset:77241*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77241*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25748:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00a730 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00a730; op2val:0x0;
op3val:0x280007f; valaddr_reg:x3; val_offset:77244*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77244*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25749:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00a730 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00a730; op2val:0x0;
op3val:0x28000ff; valaddr_reg:x3; val_offset:77247*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77247*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25750:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00a730 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00a730; op2val:0x0;
op3val:0x28001ff; valaddr_reg:x3; val_offset:77250*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77250*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25751:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00a730 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00a730; op2val:0x0;
op3val:0x28003ff; valaddr_reg:x3; val_offset:77253*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77253*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25752:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00a730 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00a730; op2val:0x0;
op3val:0x28007ff; valaddr_reg:x3; val_offset:77256*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77256*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25753:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00a730 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00a730; op2val:0x0;
op3val:0x2800fff; valaddr_reg:x3; val_offset:77259*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77259*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25754:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00a730 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00a730; op2val:0x0;
op3val:0x2801fff; valaddr_reg:x3; val_offset:77262*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77262*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25755:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00a730 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00a730; op2val:0x0;
op3val:0x2803fff; valaddr_reg:x3; val_offset:77265*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77265*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25756:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00a730 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00a730; op2val:0x0;
op3val:0x2807fff; valaddr_reg:x3; val_offset:77268*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77268*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25757:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00a730 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00a730; op2val:0x0;
op3val:0x280ffff; valaddr_reg:x3; val_offset:77271*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77271*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25758:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00a730 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00a730; op2val:0x0;
op3val:0x281ffff; valaddr_reg:x3; val_offset:77274*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77274*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25759:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00a730 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00a730; op2val:0x0;
op3val:0x283ffff; valaddr_reg:x3; val_offset:77277*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77277*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25760:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00a730 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00a730; op2val:0x0;
op3val:0x287ffff; valaddr_reg:x3; val_offset:77280*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77280*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25761:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00a730 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00a730; op2val:0x0;
op3val:0x28fffff; valaddr_reg:x3; val_offset:77283*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77283*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25762:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00a730 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00a730; op2val:0x0;
op3val:0x29fffff; valaddr_reg:x3; val_offset:77286*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77286*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25763:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00a730 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00a730; op2val:0x0;
op3val:0x2bfffff; valaddr_reg:x3; val_offset:77289*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77289*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25764:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00a730 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00a730; op2val:0x0;
op3val:0x2c00000; valaddr_reg:x3; val_offset:77292*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77292*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25765:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00a730 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00a730; op2val:0x0;
op3val:0x2e00000; valaddr_reg:x3; val_offset:77295*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77295*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25766:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00a730 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00a730; op2val:0x0;
op3val:0x2f00000; valaddr_reg:x3; val_offset:77298*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77298*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25767:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00a730 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00a730; op2val:0x0;
op3val:0x2f80000; valaddr_reg:x3; val_offset:77301*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77301*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25768:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00a730 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00a730; op2val:0x0;
op3val:0x2fc0000; valaddr_reg:x3; val_offset:77304*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77304*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25769:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00a730 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00a730; op2val:0x0;
op3val:0x2fe0000; valaddr_reg:x3; val_offset:77307*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77307*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25770:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00a730 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00a730; op2val:0x0;
op3val:0x2ff0000; valaddr_reg:x3; val_offset:77310*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77310*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25771:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00a730 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00a730; op2val:0x0;
op3val:0x2ff8000; valaddr_reg:x3; val_offset:77313*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77313*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25772:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00a730 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00a730; op2val:0x0;
op3val:0x2ffc000; valaddr_reg:x3; val_offset:77316*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77316*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25773:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00a730 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00a730; op2val:0x0;
op3val:0x2ffe000; valaddr_reg:x3; val_offset:77319*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77319*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25774:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00a730 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00a730; op2val:0x0;
op3val:0x2fff000; valaddr_reg:x3; val_offset:77322*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77322*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25775:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00a730 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00a730; op2val:0x0;
op3val:0x2fff800; valaddr_reg:x3; val_offset:77325*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77325*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25776:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00a730 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00a730; op2val:0x0;
op3val:0x2fffc00; valaddr_reg:x3; val_offset:77328*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77328*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25777:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00a730 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00a730; op2val:0x0;
op3val:0x2fffe00; valaddr_reg:x3; val_offset:77331*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77331*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25778:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00a730 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00a730; op2val:0x0;
op3val:0x2ffff00; valaddr_reg:x3; val_offset:77334*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77334*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25779:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00a730 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00a730; op2val:0x0;
op3val:0x2ffff80; valaddr_reg:x3; val_offset:77337*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77337*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25780:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00a730 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00a730; op2val:0x0;
op3val:0x2ffffc0; valaddr_reg:x3; val_offset:77340*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77340*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25781:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00a730 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00a730; op2val:0x0;
op3val:0x2ffffe0; valaddr_reg:x3; val_offset:77343*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77343*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25782:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00a730 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00a730; op2val:0x0;
op3val:0x2fffff0; valaddr_reg:x3; val_offset:77346*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77346*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25783:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00a730 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00a730; op2val:0x0;
op3val:0x2fffff8; valaddr_reg:x3; val_offset:77349*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77349*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25784:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00a730 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00a730; op2val:0x0;
op3val:0x2fffffc; valaddr_reg:x3; val_offset:77352*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77352*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25785:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00a730 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00a730; op2val:0x0;
op3val:0x2fffffe; valaddr_reg:x3; val_offset:77355*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77355*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25786:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00a730 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00a730; op2val:0x0;
op3val:0x2ffffff; valaddr_reg:x3; val_offset:77358*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77358*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25787:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x014b20 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3f5c17 and fs3 == 1 and fe3 == 0x40 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f014b20; op2val:0x803f5c17;
op3val:0xa0000000; valaddr_reg:x3; val_offset:77361*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77361*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25788:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x014b20 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3f5c17 and fs3 == 1 and fe3 == 0x40 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f014b20; op2val:0x803f5c17;
op3val:0xa0000001; valaddr_reg:x3; val_offset:77364*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77364*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25789:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x014b20 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3f5c17 and fs3 == 1 and fe3 == 0x40 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f014b20; op2val:0x803f5c17;
op3val:0xa0000003; valaddr_reg:x3; val_offset:77367*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77367*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25790:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x014b20 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3f5c17 and fs3 == 1 and fe3 == 0x40 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f014b20; op2val:0x803f5c17;
op3val:0xa0000007; valaddr_reg:x3; val_offset:77370*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77370*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25791:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x014b20 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3f5c17 and fs3 == 1 and fe3 == 0x40 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f014b20; op2val:0x803f5c17;
op3val:0xa000000f; valaddr_reg:x3; val_offset:77373*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77373*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25792:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x014b20 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3f5c17 and fs3 == 1 and fe3 == 0x40 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f014b20; op2val:0x803f5c17;
op3val:0xa000001f; valaddr_reg:x3; val_offset:77376*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77376*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25793:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x014b20 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3f5c17 and fs3 == 1 and fe3 == 0x40 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f014b20; op2val:0x803f5c17;
op3val:0xa000003f; valaddr_reg:x3; val_offset:77379*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77379*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25794:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x014b20 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3f5c17 and fs3 == 1 and fe3 == 0x40 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f014b20; op2val:0x803f5c17;
op3val:0xa000007f; valaddr_reg:x3; val_offset:77382*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77382*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25795:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x014b20 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3f5c17 and fs3 == 1 and fe3 == 0x40 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f014b20; op2val:0x803f5c17;
op3val:0xa00000ff; valaddr_reg:x3; val_offset:77385*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77385*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25796:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x014b20 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3f5c17 and fs3 == 1 and fe3 == 0x40 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f014b20; op2val:0x803f5c17;
op3val:0xa00001ff; valaddr_reg:x3; val_offset:77388*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77388*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25797:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x014b20 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3f5c17 and fs3 == 1 and fe3 == 0x40 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f014b20; op2val:0x803f5c17;
op3val:0xa00003ff; valaddr_reg:x3; val_offset:77391*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77391*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25798:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x014b20 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3f5c17 and fs3 == 1 and fe3 == 0x40 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f014b20; op2val:0x803f5c17;
op3val:0xa00007ff; valaddr_reg:x3; val_offset:77394*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77394*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25799:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x014b20 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3f5c17 and fs3 == 1 and fe3 == 0x40 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f014b20; op2val:0x803f5c17;
op3val:0xa0000fff; valaddr_reg:x3; val_offset:77397*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77397*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25800:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x014b20 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3f5c17 and fs3 == 1 and fe3 == 0x40 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f014b20; op2val:0x803f5c17;
op3val:0xa0001fff; valaddr_reg:x3; val_offset:77400*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77400*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25801:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x014b20 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3f5c17 and fs3 == 1 and fe3 == 0x40 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f014b20; op2val:0x803f5c17;
op3val:0xa0003fff; valaddr_reg:x3; val_offset:77403*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77403*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25802:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x014b20 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3f5c17 and fs3 == 1 and fe3 == 0x40 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f014b20; op2val:0x803f5c17;
op3val:0xa0007fff; valaddr_reg:x3; val_offset:77406*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77406*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25803:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x014b20 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3f5c17 and fs3 == 1 and fe3 == 0x40 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f014b20; op2val:0x803f5c17;
op3val:0xa000ffff; valaddr_reg:x3; val_offset:77409*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77409*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25804:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x014b20 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3f5c17 and fs3 == 1 and fe3 == 0x40 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f014b20; op2val:0x803f5c17;
op3val:0xa001ffff; valaddr_reg:x3; val_offset:77412*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77412*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25805:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x014b20 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3f5c17 and fs3 == 1 and fe3 == 0x40 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f014b20; op2val:0x803f5c17;
op3val:0xa003ffff; valaddr_reg:x3; val_offset:77415*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77415*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25806:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x014b20 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3f5c17 and fs3 == 1 and fe3 == 0x40 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f014b20; op2val:0x803f5c17;
op3val:0xa007ffff; valaddr_reg:x3; val_offset:77418*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77418*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25807:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x014b20 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3f5c17 and fs3 == 1 and fe3 == 0x40 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f014b20; op2val:0x803f5c17;
op3val:0xa00fffff; valaddr_reg:x3; val_offset:77421*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77421*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25808:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x014b20 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3f5c17 and fs3 == 1 and fe3 == 0x40 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f014b20; op2val:0x803f5c17;
op3val:0xa01fffff; valaddr_reg:x3; val_offset:77424*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77424*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25809:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x014b20 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3f5c17 and fs3 == 1 and fe3 == 0x40 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f014b20; op2val:0x803f5c17;
op3val:0xa03fffff; valaddr_reg:x3; val_offset:77427*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77427*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25810:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x014b20 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3f5c17 and fs3 == 1 and fe3 == 0x40 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f014b20; op2val:0x803f5c17;
op3val:0xa0400000; valaddr_reg:x3; val_offset:77430*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77430*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25811:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x014b20 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3f5c17 and fs3 == 1 and fe3 == 0x40 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f014b20; op2val:0x803f5c17;
op3val:0xa0600000; valaddr_reg:x3; val_offset:77433*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77433*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25812:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x014b20 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3f5c17 and fs3 == 1 and fe3 == 0x40 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f014b20; op2val:0x803f5c17;
op3val:0xa0700000; valaddr_reg:x3; val_offset:77436*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77436*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25813:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x014b20 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3f5c17 and fs3 == 1 and fe3 == 0x40 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f014b20; op2val:0x803f5c17;
op3val:0xa0780000; valaddr_reg:x3; val_offset:77439*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77439*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25814:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x014b20 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3f5c17 and fs3 == 1 and fe3 == 0x40 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f014b20; op2val:0x803f5c17;
op3val:0xa07c0000; valaddr_reg:x3; val_offset:77442*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77442*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25815:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x014b20 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3f5c17 and fs3 == 1 and fe3 == 0x40 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f014b20; op2val:0x803f5c17;
op3val:0xa07e0000; valaddr_reg:x3; val_offset:77445*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77445*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25816:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x014b20 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3f5c17 and fs3 == 1 and fe3 == 0x40 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f014b20; op2val:0x803f5c17;
op3val:0xa07f0000; valaddr_reg:x3; val_offset:77448*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77448*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25817:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x014b20 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3f5c17 and fs3 == 1 and fe3 == 0x40 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f014b20; op2val:0x803f5c17;
op3val:0xa07f8000; valaddr_reg:x3; val_offset:77451*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77451*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25818:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x014b20 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3f5c17 and fs3 == 1 and fe3 == 0x40 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f014b20; op2val:0x803f5c17;
op3val:0xa07fc000; valaddr_reg:x3; val_offset:77454*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77454*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25819:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x014b20 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3f5c17 and fs3 == 1 and fe3 == 0x40 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f014b20; op2val:0x803f5c17;
op3val:0xa07fe000; valaddr_reg:x3; val_offset:77457*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77457*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25820:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x014b20 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3f5c17 and fs3 == 1 and fe3 == 0x40 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f014b20; op2val:0x803f5c17;
op3val:0xa07ff000; valaddr_reg:x3; val_offset:77460*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77460*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25821:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x014b20 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3f5c17 and fs3 == 1 and fe3 == 0x40 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f014b20; op2val:0x803f5c17;
op3val:0xa07ff800; valaddr_reg:x3; val_offset:77463*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77463*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25822:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x014b20 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3f5c17 and fs3 == 1 and fe3 == 0x40 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f014b20; op2val:0x803f5c17;
op3val:0xa07ffc00; valaddr_reg:x3; val_offset:77466*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77466*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25823:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x014b20 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3f5c17 and fs3 == 1 and fe3 == 0x40 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f014b20; op2val:0x803f5c17;
op3val:0xa07ffe00; valaddr_reg:x3; val_offset:77469*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77469*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25824:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x014b20 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3f5c17 and fs3 == 1 and fe3 == 0x40 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f014b20; op2val:0x803f5c17;
op3val:0xa07fff00; valaddr_reg:x3; val_offset:77472*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77472*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25825:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x014b20 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3f5c17 and fs3 == 1 and fe3 == 0x40 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f014b20; op2val:0x803f5c17;
op3val:0xa07fff80; valaddr_reg:x3; val_offset:77475*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77475*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25826:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x014b20 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3f5c17 and fs3 == 1 and fe3 == 0x40 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f014b20; op2val:0x803f5c17;
op3val:0xa07fffc0; valaddr_reg:x3; val_offset:77478*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77478*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25827:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x014b20 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3f5c17 and fs3 == 1 and fe3 == 0x40 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f014b20; op2val:0x803f5c17;
op3val:0xa07fffe0; valaddr_reg:x3; val_offset:77481*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77481*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25828:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x014b20 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3f5c17 and fs3 == 1 and fe3 == 0x40 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f014b20; op2val:0x803f5c17;
op3val:0xa07ffff0; valaddr_reg:x3; val_offset:77484*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77484*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25829:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x014b20 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3f5c17 and fs3 == 1 and fe3 == 0x40 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f014b20; op2val:0x803f5c17;
op3val:0xa07ffff8; valaddr_reg:x3; val_offset:77487*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77487*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25830:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x014b20 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3f5c17 and fs3 == 1 and fe3 == 0x40 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f014b20; op2val:0x803f5c17;
op3val:0xa07ffffc; valaddr_reg:x3; val_offset:77490*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77490*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25831:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x014b20 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3f5c17 and fs3 == 1 and fe3 == 0x40 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f014b20; op2val:0x803f5c17;
op3val:0xa07ffffe; valaddr_reg:x3; val_offset:77493*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77493*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25832:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x014b20 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3f5c17 and fs3 == 1 and fe3 == 0x40 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f014b20; op2val:0x803f5c17;
op3val:0xa07fffff; valaddr_reg:x3; val_offset:77496*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77496*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25833:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x014b20 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3f5c17 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f014b20; op2val:0x803f5c17;
op3val:0xbf800001; valaddr_reg:x3; val_offset:77499*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77499*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25834:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x014b20 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3f5c17 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f014b20; op2val:0x803f5c17;
op3val:0xbf800003; valaddr_reg:x3; val_offset:77502*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77502*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25835:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x014b20 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3f5c17 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f014b20; op2val:0x803f5c17;
op3val:0xbf800007; valaddr_reg:x3; val_offset:77505*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77505*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25836:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x014b20 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3f5c17 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f014b20; op2val:0x803f5c17;
op3val:0xbf999999; valaddr_reg:x3; val_offset:77508*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77508*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25837:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x014b20 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3f5c17 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f014b20; op2val:0x803f5c17;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:77511*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77511*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25838:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x014b20 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3f5c17 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f014b20; op2val:0x803f5c17;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:77514*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77514*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25839:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x014b20 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3f5c17 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f014b20; op2val:0x803f5c17;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:77517*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77517*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25840:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x014b20 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3f5c17 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f014b20; op2val:0x803f5c17;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:77520*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77520*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25841:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x014b20 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3f5c17 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f014b20; op2val:0x803f5c17;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:77523*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77523*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25842:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x014b20 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3f5c17 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f014b20; op2val:0x803f5c17;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:77526*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77526*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25843:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x014b20 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3f5c17 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f014b20; op2val:0x803f5c17;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:77529*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77529*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25844:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x014b20 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3f5c17 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f014b20; op2val:0x803f5c17;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:77532*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77532*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25845:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x014b20 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3f5c17 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f014b20; op2val:0x803f5c17;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:77535*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77535*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25846:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x014b20 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3f5c17 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f014b20; op2val:0x803f5c17;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:77538*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77538*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25847:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x014b20 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3f5c17 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f014b20; op2val:0x803f5c17;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:77541*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77541*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25848:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x014b20 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3f5c17 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f014b20; op2val:0x803f5c17;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:77544*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77544*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25849:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x015206 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f015206; op2val:0x0;
op3val:0x800001; valaddr_reg:x3; val_offset:77547*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77547*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25850:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x015206 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f015206; op2val:0x0;
op3val:0x800003; valaddr_reg:x3; val_offset:77550*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77550*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25851:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x015206 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f015206; op2val:0x0;
op3val:0x800007; valaddr_reg:x3; val_offset:77553*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77553*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25852:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x015206 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f015206; op2val:0x0;
op3val:0x999999; valaddr_reg:x3; val_offset:77556*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77556*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25853:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x015206 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f015206; op2val:0x0;
op3val:0xa49249; valaddr_reg:x3; val_offset:77559*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77559*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25854:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x015206 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f015206; op2val:0x0;
op3val:0xb33333; valaddr_reg:x3; val_offset:77562*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77562*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25855:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x015206 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f015206; op2val:0x0;
op3val:0xb6db6d; valaddr_reg:x3; val_offset:77565*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77565*0 + 3*201*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2130749232,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1677721,32,FLEN)
NAN_BOXED(2130749232,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2396745,32,FLEN)
NAN_BOXED(2130749232,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3355443,32,FLEN)
NAN_BOXED(2130749232,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3595117,32,FLEN)
NAN_BOXED(2130749232,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3914683,32,FLEN)
NAN_BOXED(2130749232,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4473924,32,FLEN)
NAN_BOXED(2130749232,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5033164,32,FLEN)
NAN_BOXED(2130749232,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5991862,32,FLEN)
NAN_BOXED(2130749232,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(6710886,32,FLEN)
NAN_BOXED(2130749232,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7190235,32,FLEN)
NAN_BOXED(2130749232,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388600,32,FLEN)
NAN_BOXED(2130749232,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388604,32,FLEN)
NAN_BOXED(2130749232,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388606,32,FLEN)
NAN_BOXED(2130749232,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(41943040,32,FLEN)
NAN_BOXED(2130749232,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(41943041,32,FLEN)
NAN_BOXED(2130749232,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(41943043,32,FLEN)
NAN_BOXED(2130749232,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(41943047,32,FLEN)
NAN_BOXED(2130749232,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(41943055,32,FLEN)
NAN_BOXED(2130749232,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(41943071,32,FLEN)
NAN_BOXED(2130749232,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(41943103,32,FLEN)
NAN_BOXED(2130749232,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(41943167,32,FLEN)
NAN_BOXED(2130749232,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(41943295,32,FLEN)
NAN_BOXED(2130749232,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(41943551,32,FLEN)
NAN_BOXED(2130749232,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(41944063,32,FLEN)
NAN_BOXED(2130749232,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(41945087,32,FLEN)
NAN_BOXED(2130749232,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(41947135,32,FLEN)
NAN_BOXED(2130749232,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(41951231,32,FLEN)
NAN_BOXED(2130749232,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(41959423,32,FLEN)
NAN_BOXED(2130749232,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(41975807,32,FLEN)
NAN_BOXED(2130749232,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(42008575,32,FLEN)
NAN_BOXED(2130749232,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(42074111,32,FLEN)
NAN_BOXED(2130749232,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(42205183,32,FLEN)
NAN_BOXED(2130749232,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(42467327,32,FLEN)
NAN_BOXED(2130749232,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(42991615,32,FLEN)
NAN_BOXED(2130749232,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(44040191,32,FLEN)
NAN_BOXED(2130749232,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(46137343,32,FLEN)
NAN_BOXED(2130749232,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(46137344,32,FLEN)
NAN_BOXED(2130749232,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(48234496,32,FLEN)
NAN_BOXED(2130749232,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(49283072,32,FLEN)
NAN_BOXED(2130749232,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(49807360,32,FLEN)
NAN_BOXED(2130749232,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50069504,32,FLEN)
NAN_BOXED(2130749232,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50200576,32,FLEN)
NAN_BOXED(2130749232,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50266112,32,FLEN)
NAN_BOXED(2130749232,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50298880,32,FLEN)
NAN_BOXED(2130749232,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50315264,32,FLEN)
NAN_BOXED(2130749232,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50323456,32,FLEN)
NAN_BOXED(2130749232,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50327552,32,FLEN)
NAN_BOXED(2130749232,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50329600,32,FLEN)
NAN_BOXED(2130749232,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50330624,32,FLEN)
NAN_BOXED(2130749232,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50331136,32,FLEN)
NAN_BOXED(2130749232,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50331392,32,FLEN)
NAN_BOXED(2130749232,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50331520,32,FLEN)
NAN_BOXED(2130749232,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50331584,32,FLEN)
NAN_BOXED(2130749232,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50331616,32,FLEN)
NAN_BOXED(2130749232,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50331632,32,FLEN)
NAN_BOXED(2130749232,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50331640,32,FLEN)
NAN_BOXED(2130749232,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50331644,32,FLEN)
NAN_BOXED(2130749232,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50331646,32,FLEN)
NAN_BOXED(2130749232,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50331647,32,FLEN)
NAN_BOXED(2130791200,32,FLEN)
NAN_BOXED(2151635991,32,FLEN)
NAN_BOXED(2684354560,32,FLEN)
NAN_BOXED(2130791200,32,FLEN)
NAN_BOXED(2151635991,32,FLEN)
NAN_BOXED(2684354561,32,FLEN)
NAN_BOXED(2130791200,32,FLEN)
NAN_BOXED(2151635991,32,FLEN)
NAN_BOXED(2684354563,32,FLEN)
NAN_BOXED(2130791200,32,FLEN)
NAN_BOXED(2151635991,32,FLEN)
NAN_BOXED(2684354567,32,FLEN)
NAN_BOXED(2130791200,32,FLEN)
NAN_BOXED(2151635991,32,FLEN)
NAN_BOXED(2684354575,32,FLEN)
NAN_BOXED(2130791200,32,FLEN)
NAN_BOXED(2151635991,32,FLEN)
NAN_BOXED(2684354591,32,FLEN)
NAN_BOXED(2130791200,32,FLEN)
NAN_BOXED(2151635991,32,FLEN)
NAN_BOXED(2684354623,32,FLEN)
NAN_BOXED(2130791200,32,FLEN)
NAN_BOXED(2151635991,32,FLEN)
NAN_BOXED(2684354687,32,FLEN)
NAN_BOXED(2130791200,32,FLEN)
NAN_BOXED(2151635991,32,FLEN)
NAN_BOXED(2684354815,32,FLEN)
NAN_BOXED(2130791200,32,FLEN)
NAN_BOXED(2151635991,32,FLEN)
NAN_BOXED(2684355071,32,FLEN)
NAN_BOXED(2130791200,32,FLEN)
NAN_BOXED(2151635991,32,FLEN)
NAN_BOXED(2684355583,32,FLEN)
NAN_BOXED(2130791200,32,FLEN)
NAN_BOXED(2151635991,32,FLEN)
NAN_BOXED(2684356607,32,FLEN)
NAN_BOXED(2130791200,32,FLEN)
NAN_BOXED(2151635991,32,FLEN)
NAN_BOXED(2684358655,32,FLEN)
NAN_BOXED(2130791200,32,FLEN)
NAN_BOXED(2151635991,32,FLEN)
NAN_BOXED(2684362751,32,FLEN)
NAN_BOXED(2130791200,32,FLEN)
NAN_BOXED(2151635991,32,FLEN)
NAN_BOXED(2684370943,32,FLEN)
NAN_BOXED(2130791200,32,FLEN)
NAN_BOXED(2151635991,32,FLEN)
NAN_BOXED(2684387327,32,FLEN)
NAN_BOXED(2130791200,32,FLEN)
NAN_BOXED(2151635991,32,FLEN)
NAN_BOXED(2684420095,32,FLEN)
NAN_BOXED(2130791200,32,FLEN)
NAN_BOXED(2151635991,32,FLEN)
NAN_BOXED(2684485631,32,FLEN)
NAN_BOXED(2130791200,32,FLEN)
NAN_BOXED(2151635991,32,FLEN)
NAN_BOXED(2684616703,32,FLEN)
NAN_BOXED(2130791200,32,FLEN)
NAN_BOXED(2151635991,32,FLEN)
NAN_BOXED(2684878847,32,FLEN)
NAN_BOXED(2130791200,32,FLEN)
NAN_BOXED(2151635991,32,FLEN)
NAN_BOXED(2685403135,32,FLEN)
NAN_BOXED(2130791200,32,FLEN)
NAN_BOXED(2151635991,32,FLEN)
NAN_BOXED(2686451711,32,FLEN)
NAN_BOXED(2130791200,32,FLEN)
NAN_BOXED(2151635991,32,FLEN)
NAN_BOXED(2688548863,32,FLEN)
NAN_BOXED(2130791200,32,FLEN)
NAN_BOXED(2151635991,32,FLEN)
NAN_BOXED(2688548864,32,FLEN)
NAN_BOXED(2130791200,32,FLEN)
NAN_BOXED(2151635991,32,FLEN)
NAN_BOXED(2690646016,32,FLEN)
NAN_BOXED(2130791200,32,FLEN)
NAN_BOXED(2151635991,32,FLEN)
NAN_BOXED(2691694592,32,FLEN)
NAN_BOXED(2130791200,32,FLEN)
NAN_BOXED(2151635991,32,FLEN)
NAN_BOXED(2692218880,32,FLEN)
NAN_BOXED(2130791200,32,FLEN)
NAN_BOXED(2151635991,32,FLEN)
NAN_BOXED(2692481024,32,FLEN)
NAN_BOXED(2130791200,32,FLEN)
NAN_BOXED(2151635991,32,FLEN)
NAN_BOXED(2692612096,32,FLEN)
NAN_BOXED(2130791200,32,FLEN)
NAN_BOXED(2151635991,32,FLEN)
NAN_BOXED(2692677632,32,FLEN)
NAN_BOXED(2130791200,32,FLEN)
NAN_BOXED(2151635991,32,FLEN)
NAN_BOXED(2692710400,32,FLEN)
NAN_BOXED(2130791200,32,FLEN)
NAN_BOXED(2151635991,32,FLEN)
NAN_BOXED(2692726784,32,FLEN)
NAN_BOXED(2130791200,32,FLEN)
NAN_BOXED(2151635991,32,FLEN)
NAN_BOXED(2692734976,32,FLEN)
NAN_BOXED(2130791200,32,FLEN)
NAN_BOXED(2151635991,32,FLEN)
NAN_BOXED(2692739072,32,FLEN)
NAN_BOXED(2130791200,32,FLEN)
NAN_BOXED(2151635991,32,FLEN)
NAN_BOXED(2692741120,32,FLEN)
NAN_BOXED(2130791200,32,FLEN)
NAN_BOXED(2151635991,32,FLEN)
NAN_BOXED(2692742144,32,FLEN)
NAN_BOXED(2130791200,32,FLEN)
NAN_BOXED(2151635991,32,FLEN)
NAN_BOXED(2692742656,32,FLEN)
NAN_BOXED(2130791200,32,FLEN)
NAN_BOXED(2151635991,32,FLEN)
NAN_BOXED(2692742912,32,FLEN)
NAN_BOXED(2130791200,32,FLEN)
NAN_BOXED(2151635991,32,FLEN)
NAN_BOXED(2692743040,32,FLEN)
NAN_BOXED(2130791200,32,FLEN)
NAN_BOXED(2151635991,32,FLEN)
NAN_BOXED(2692743104,32,FLEN)
NAN_BOXED(2130791200,32,FLEN)
NAN_BOXED(2151635991,32,FLEN)
NAN_BOXED(2692743136,32,FLEN)
NAN_BOXED(2130791200,32,FLEN)
NAN_BOXED(2151635991,32,FLEN)
NAN_BOXED(2692743152,32,FLEN)
NAN_BOXED(2130791200,32,FLEN)
NAN_BOXED(2151635991,32,FLEN)
NAN_BOXED(2692743160,32,FLEN)
NAN_BOXED(2130791200,32,FLEN)
NAN_BOXED(2151635991,32,FLEN)
NAN_BOXED(2692743164,32,FLEN)
NAN_BOXED(2130791200,32,FLEN)
NAN_BOXED(2151635991,32,FLEN)
NAN_BOXED(2692743166,32,FLEN)
NAN_BOXED(2130791200,32,FLEN)
NAN_BOXED(2151635991,32,FLEN)
NAN_BOXED(2692743167,32,FLEN)
NAN_BOXED(2130791200,32,FLEN)
NAN_BOXED(2151635991,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2130791200,32,FLEN)
NAN_BOXED(2151635991,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2130791200,32,FLEN)
NAN_BOXED(2151635991,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
NAN_BOXED(2130791200,32,FLEN)
NAN_BOXED(2151635991,32,FLEN)
NAN_BOXED(3214514585,32,FLEN)
NAN_BOXED(2130791200,32,FLEN)
NAN_BOXED(2151635991,32,FLEN)
NAN_BOXED(3215233609,32,FLEN)
NAN_BOXED(2130791200,32,FLEN)
NAN_BOXED(2151635991,32,FLEN)
NAN_BOXED(3216192307,32,FLEN)
NAN_BOXED(2130791200,32,FLEN)
NAN_BOXED(2151635991,32,FLEN)
NAN_BOXED(3216431981,32,FLEN)
NAN_BOXED(2130791200,32,FLEN)
NAN_BOXED(2151635991,32,FLEN)
NAN_BOXED(3216751547,32,FLEN)
NAN_BOXED(2130791200,32,FLEN)
NAN_BOXED(2151635991,32,FLEN)
NAN_BOXED(3217310788,32,FLEN)
NAN_BOXED(2130791200,32,FLEN)
NAN_BOXED(2151635991,32,FLEN)
NAN_BOXED(3217870028,32,FLEN)
NAN_BOXED(2130791200,32,FLEN)
NAN_BOXED(2151635991,32,FLEN)
NAN_BOXED(3218828726,32,FLEN)
NAN_BOXED(2130791200,32,FLEN)
NAN_BOXED(2151635991,32,FLEN)
NAN_BOXED(3219547750,32,FLEN)
NAN_BOXED(2130791200,32,FLEN)
NAN_BOXED(2151635991,32,FLEN)
NAN_BOXED(3220027099,32,FLEN)
NAN_BOXED(2130791200,32,FLEN)
NAN_BOXED(2151635991,32,FLEN)
NAN_BOXED(3221225464,32,FLEN)
NAN_BOXED(2130791200,32,FLEN)
NAN_BOXED(2151635991,32,FLEN)
NAN_BOXED(3221225468,32,FLEN)
NAN_BOXED(2130791200,32,FLEN)
NAN_BOXED(2151635991,32,FLEN)
NAN_BOXED(3221225470,32,FLEN)
NAN_BOXED(2130792966,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(2130792966,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388611,32,FLEN)
NAN_BOXED(2130792966,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388615,32,FLEN)
NAN_BOXED(2130792966,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(10066329,32,FLEN)
NAN_BOXED(2130792966,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(10785353,32,FLEN)
NAN_BOXED(2130792966,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(11744051,32,FLEN)
NAN_BOXED(2130792966,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(11983725,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
