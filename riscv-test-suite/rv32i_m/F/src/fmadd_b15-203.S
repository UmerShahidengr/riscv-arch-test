
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:17:59 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_25856:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x015206 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f015206; op2val:0x0;
op3val:0xbbbbbb; valaddr_reg:x3; val_offset:77568*0 + 3*202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77568*0 + 3*202*FLEN/8, x4, x1, x2)

inst_25857:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x015206 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f015206; op2val:0x0;
op3val:0xc44444; valaddr_reg:x3; val_offset:77571*0 + 3*202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77571*0 + 3*202*FLEN/8, x4, x1, x2)

inst_25858:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x015206 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f015206; op2val:0x0;
op3val:0xcccccc; valaddr_reg:x3; val_offset:77574*0 + 3*202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77574*0 + 3*202*FLEN/8, x4, x1, x2)

inst_25859:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x015206 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f015206; op2val:0x0;
op3val:0xdb6db6; valaddr_reg:x3; val_offset:77577*0 + 3*202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77577*0 + 3*202*FLEN/8, x4, x1, x2)

inst_25860:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x015206 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f015206; op2val:0x0;
op3val:0xe66666; valaddr_reg:x3; val_offset:77580*0 + 3*202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77580*0 + 3*202*FLEN/8, x4, x1, x2)

inst_25861:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x015206 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f015206; op2val:0x0;
op3val:0xedb6db; valaddr_reg:x3; val_offset:77583*0 + 3*202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77583*0 + 3*202*FLEN/8, x4, x1, x2)

inst_25862:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x015206 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f015206; op2val:0x0;
op3val:0xfffff8; valaddr_reg:x3; val_offset:77586*0 + 3*202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77586*0 + 3*202*FLEN/8, x4, x1, x2)

inst_25863:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x015206 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f015206; op2val:0x0;
op3val:0xfffffc; valaddr_reg:x3; val_offset:77589*0 + 3*202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77589*0 + 3*202*FLEN/8, x4, x1, x2)

inst_25864:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x015206 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f015206; op2val:0x0;
op3val:0xfffffe; valaddr_reg:x3; val_offset:77592*0 + 3*202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77592*0 + 3*202*FLEN/8, x4, x1, x2)

inst_25865:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x015206 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f015206; op2val:0x0;
op3val:0x2800000; valaddr_reg:x3; val_offset:77595*0 + 3*202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77595*0 + 3*202*FLEN/8, x4, x1, x2)

inst_25866:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x015206 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f015206; op2val:0x0;
op3val:0x2800001; valaddr_reg:x3; val_offset:77598*0 + 3*202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77598*0 + 3*202*FLEN/8, x4, x1, x2)

inst_25867:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x015206 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f015206; op2val:0x0;
op3val:0x2800003; valaddr_reg:x3; val_offset:77601*0 + 3*202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77601*0 + 3*202*FLEN/8, x4, x1, x2)

inst_25868:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x015206 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f015206; op2val:0x0;
op3val:0x2800007; valaddr_reg:x3; val_offset:77604*0 + 3*202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77604*0 + 3*202*FLEN/8, x4, x1, x2)

inst_25869:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x015206 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f015206; op2val:0x0;
op3val:0x280000f; valaddr_reg:x3; val_offset:77607*0 + 3*202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77607*0 + 3*202*FLEN/8, x4, x1, x2)

inst_25870:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x015206 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f015206; op2val:0x0;
op3val:0x280001f; valaddr_reg:x3; val_offset:77610*0 + 3*202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77610*0 + 3*202*FLEN/8, x4, x1, x2)

inst_25871:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x015206 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f015206; op2val:0x0;
op3val:0x280003f; valaddr_reg:x3; val_offset:77613*0 + 3*202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77613*0 + 3*202*FLEN/8, x4, x1, x2)

inst_25872:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x015206 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f015206; op2val:0x0;
op3val:0x280007f; valaddr_reg:x3; val_offset:77616*0 + 3*202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77616*0 + 3*202*FLEN/8, x4, x1, x2)

inst_25873:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x015206 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f015206; op2val:0x0;
op3val:0x28000ff; valaddr_reg:x3; val_offset:77619*0 + 3*202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77619*0 + 3*202*FLEN/8, x4, x1, x2)

inst_25874:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x015206 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f015206; op2val:0x0;
op3val:0x28001ff; valaddr_reg:x3; val_offset:77622*0 + 3*202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77622*0 + 3*202*FLEN/8, x4, x1, x2)

inst_25875:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x015206 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f015206; op2val:0x0;
op3val:0x28003ff; valaddr_reg:x3; val_offset:77625*0 + 3*202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77625*0 + 3*202*FLEN/8, x4, x1, x2)

inst_25876:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x015206 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f015206; op2val:0x0;
op3val:0x28007ff; valaddr_reg:x3; val_offset:77628*0 + 3*202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77628*0 + 3*202*FLEN/8, x4, x1, x2)

inst_25877:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x015206 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f015206; op2val:0x0;
op3val:0x2800fff; valaddr_reg:x3; val_offset:77631*0 + 3*202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77631*0 + 3*202*FLEN/8, x4, x1, x2)

inst_25878:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x015206 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f015206; op2val:0x0;
op3val:0x2801fff; valaddr_reg:x3; val_offset:77634*0 + 3*202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77634*0 + 3*202*FLEN/8, x4, x1, x2)

inst_25879:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x015206 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f015206; op2val:0x0;
op3val:0x2803fff; valaddr_reg:x3; val_offset:77637*0 + 3*202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77637*0 + 3*202*FLEN/8, x4, x1, x2)

inst_25880:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x015206 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f015206; op2val:0x0;
op3val:0x2807fff; valaddr_reg:x3; val_offset:77640*0 + 3*202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77640*0 + 3*202*FLEN/8, x4, x1, x2)

inst_25881:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x015206 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f015206; op2val:0x0;
op3val:0x280ffff; valaddr_reg:x3; val_offset:77643*0 + 3*202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77643*0 + 3*202*FLEN/8, x4, x1, x2)

inst_25882:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x015206 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f015206; op2val:0x0;
op3val:0x281ffff; valaddr_reg:x3; val_offset:77646*0 + 3*202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77646*0 + 3*202*FLEN/8, x4, x1, x2)

inst_25883:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x015206 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f015206; op2val:0x0;
op3val:0x283ffff; valaddr_reg:x3; val_offset:77649*0 + 3*202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77649*0 + 3*202*FLEN/8, x4, x1, x2)

inst_25884:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x015206 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f015206; op2val:0x0;
op3val:0x287ffff; valaddr_reg:x3; val_offset:77652*0 + 3*202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77652*0 + 3*202*FLEN/8, x4, x1, x2)

inst_25885:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x015206 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f015206; op2val:0x0;
op3val:0x28fffff; valaddr_reg:x3; val_offset:77655*0 + 3*202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77655*0 + 3*202*FLEN/8, x4, x1, x2)

inst_25886:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x015206 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f015206; op2val:0x0;
op3val:0x29fffff; valaddr_reg:x3; val_offset:77658*0 + 3*202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77658*0 + 3*202*FLEN/8, x4, x1, x2)

inst_25887:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x015206 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f015206; op2val:0x0;
op3val:0x2bfffff; valaddr_reg:x3; val_offset:77661*0 + 3*202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77661*0 + 3*202*FLEN/8, x4, x1, x2)

inst_25888:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x015206 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f015206; op2val:0x0;
op3val:0x2c00000; valaddr_reg:x3; val_offset:77664*0 + 3*202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77664*0 + 3*202*FLEN/8, x4, x1, x2)

inst_25889:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x015206 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f015206; op2val:0x0;
op3val:0x2e00000; valaddr_reg:x3; val_offset:77667*0 + 3*202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77667*0 + 3*202*FLEN/8, x4, x1, x2)

inst_25890:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x015206 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f015206; op2val:0x0;
op3val:0x2f00000; valaddr_reg:x3; val_offset:77670*0 + 3*202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77670*0 + 3*202*FLEN/8, x4, x1, x2)

inst_25891:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x015206 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f015206; op2val:0x0;
op3val:0x2f80000; valaddr_reg:x3; val_offset:77673*0 + 3*202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77673*0 + 3*202*FLEN/8, x4, x1, x2)

inst_25892:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x015206 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f015206; op2val:0x0;
op3val:0x2fc0000; valaddr_reg:x3; val_offset:77676*0 + 3*202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77676*0 + 3*202*FLEN/8, x4, x1, x2)

inst_25893:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x015206 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f015206; op2val:0x0;
op3val:0x2fe0000; valaddr_reg:x3; val_offset:77679*0 + 3*202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77679*0 + 3*202*FLEN/8, x4, x1, x2)

inst_25894:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x015206 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f015206; op2val:0x0;
op3val:0x2ff0000; valaddr_reg:x3; val_offset:77682*0 + 3*202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77682*0 + 3*202*FLEN/8, x4, x1, x2)

inst_25895:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x015206 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f015206; op2val:0x0;
op3val:0x2ff8000; valaddr_reg:x3; val_offset:77685*0 + 3*202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77685*0 + 3*202*FLEN/8, x4, x1, x2)

inst_25896:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x015206 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f015206; op2val:0x0;
op3val:0x2ffc000; valaddr_reg:x3; val_offset:77688*0 + 3*202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77688*0 + 3*202*FLEN/8, x4, x1, x2)

inst_25897:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x015206 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f015206; op2val:0x0;
op3val:0x2ffe000; valaddr_reg:x3; val_offset:77691*0 + 3*202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77691*0 + 3*202*FLEN/8, x4, x1, x2)

inst_25898:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x015206 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f015206; op2val:0x0;
op3val:0x2fff000; valaddr_reg:x3; val_offset:77694*0 + 3*202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77694*0 + 3*202*FLEN/8, x4, x1, x2)

inst_25899:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x015206 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f015206; op2val:0x0;
op3val:0x2fff800; valaddr_reg:x3; val_offset:77697*0 + 3*202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77697*0 + 3*202*FLEN/8, x4, x1, x2)

inst_25900:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x015206 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f015206; op2val:0x0;
op3val:0x2fffc00; valaddr_reg:x3; val_offset:77700*0 + 3*202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77700*0 + 3*202*FLEN/8, x4, x1, x2)

inst_25901:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x015206 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f015206; op2val:0x0;
op3val:0x2fffe00; valaddr_reg:x3; val_offset:77703*0 + 3*202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77703*0 + 3*202*FLEN/8, x4, x1, x2)

inst_25902:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x015206 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f015206; op2val:0x0;
op3val:0x2ffff00; valaddr_reg:x3; val_offset:77706*0 + 3*202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77706*0 + 3*202*FLEN/8, x4, x1, x2)

inst_25903:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x015206 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f015206; op2val:0x0;
op3val:0x2ffff80; valaddr_reg:x3; val_offset:77709*0 + 3*202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77709*0 + 3*202*FLEN/8, x4, x1, x2)

inst_25904:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x015206 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f015206; op2val:0x0;
op3val:0x2ffffc0; valaddr_reg:x3; val_offset:77712*0 + 3*202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77712*0 + 3*202*FLEN/8, x4, x1, x2)

inst_25905:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x015206 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f015206; op2val:0x0;
op3val:0x2ffffe0; valaddr_reg:x3; val_offset:77715*0 + 3*202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77715*0 + 3*202*FLEN/8, x4, x1, x2)

inst_25906:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x015206 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f015206; op2val:0x0;
op3val:0x2fffff0; valaddr_reg:x3; val_offset:77718*0 + 3*202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77718*0 + 3*202*FLEN/8, x4, x1, x2)

inst_25907:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x015206 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f015206; op2val:0x0;
op3val:0x2fffff8; valaddr_reg:x3; val_offset:77721*0 + 3*202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77721*0 + 3*202*FLEN/8, x4, x1, x2)

inst_25908:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x015206 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f015206; op2val:0x0;
op3val:0x2fffffc; valaddr_reg:x3; val_offset:77724*0 + 3*202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77724*0 + 3*202*FLEN/8, x4, x1, x2)

inst_25909:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x015206 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f015206; op2val:0x0;
op3val:0x2fffffe; valaddr_reg:x3; val_offset:77727*0 + 3*202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77727*0 + 3*202*FLEN/8, x4, x1, x2)

inst_25910:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x015206 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f015206; op2val:0x0;
op3val:0x2ffffff; valaddr_reg:x3; val_offset:77730*0 + 3*202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77730*0 + 3*202*FLEN/8, x4, x1, x2)

inst_25911:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x015d65 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3f5324 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f015d65; op2val:0x803f5324;
op3val:0xa7800000; valaddr_reg:x3; val_offset:77733*0 + 3*202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77733*0 + 3*202*FLEN/8, x4, x1, x2)

inst_25912:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x015d65 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3f5324 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f015d65; op2val:0x803f5324;
op3val:0xa7800001; valaddr_reg:x3; val_offset:77736*0 + 3*202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77736*0 + 3*202*FLEN/8, x4, x1, x2)

inst_25913:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x015d65 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3f5324 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f015d65; op2val:0x803f5324;
op3val:0xa7800003; valaddr_reg:x3; val_offset:77739*0 + 3*202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77739*0 + 3*202*FLEN/8, x4, x1, x2)

inst_25914:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x015d65 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3f5324 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f015d65; op2val:0x803f5324;
op3val:0xa7800007; valaddr_reg:x3; val_offset:77742*0 + 3*202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77742*0 + 3*202*FLEN/8, x4, x1, x2)

inst_25915:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x015d65 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3f5324 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f015d65; op2val:0x803f5324;
op3val:0xa780000f; valaddr_reg:x3; val_offset:77745*0 + 3*202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77745*0 + 3*202*FLEN/8, x4, x1, x2)

inst_25916:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x015d65 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3f5324 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f015d65; op2val:0x803f5324;
op3val:0xa780001f; valaddr_reg:x3; val_offset:77748*0 + 3*202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77748*0 + 3*202*FLEN/8, x4, x1, x2)

inst_25917:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x015d65 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3f5324 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f015d65; op2val:0x803f5324;
op3val:0xa780003f; valaddr_reg:x3; val_offset:77751*0 + 3*202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77751*0 + 3*202*FLEN/8, x4, x1, x2)

inst_25918:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x015d65 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3f5324 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f015d65; op2val:0x803f5324;
op3val:0xa780007f; valaddr_reg:x3; val_offset:77754*0 + 3*202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77754*0 + 3*202*FLEN/8, x4, x1, x2)

inst_25919:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x015d65 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3f5324 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f015d65; op2val:0x803f5324;
op3val:0xa78000ff; valaddr_reg:x3; val_offset:77757*0 + 3*202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77757*0 + 3*202*FLEN/8, x4, x1, x2)

inst_25920:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x015d65 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3f5324 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f015d65; op2val:0x803f5324;
op3val:0xa78001ff; valaddr_reg:x3; val_offset:77760*0 + 3*202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77760*0 + 3*202*FLEN/8, x4, x1, x2)

inst_25921:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x015d65 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3f5324 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f015d65; op2val:0x803f5324;
op3val:0xa78003ff; valaddr_reg:x3; val_offset:77763*0 + 3*202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77763*0 + 3*202*FLEN/8, x4, x1, x2)

inst_25922:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x015d65 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3f5324 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f015d65; op2val:0x803f5324;
op3val:0xa78007ff; valaddr_reg:x3; val_offset:77766*0 + 3*202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77766*0 + 3*202*FLEN/8, x4, x1, x2)

inst_25923:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x015d65 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3f5324 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f015d65; op2val:0x803f5324;
op3val:0xa7800fff; valaddr_reg:x3; val_offset:77769*0 + 3*202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77769*0 + 3*202*FLEN/8, x4, x1, x2)

inst_25924:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x015d65 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3f5324 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f015d65; op2val:0x803f5324;
op3val:0xa7801fff; valaddr_reg:x3; val_offset:77772*0 + 3*202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77772*0 + 3*202*FLEN/8, x4, x1, x2)

inst_25925:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x015d65 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3f5324 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f015d65; op2val:0x803f5324;
op3val:0xa7803fff; valaddr_reg:x3; val_offset:77775*0 + 3*202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77775*0 + 3*202*FLEN/8, x4, x1, x2)

inst_25926:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x015d65 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3f5324 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f015d65; op2val:0x803f5324;
op3val:0xa7807fff; valaddr_reg:x3; val_offset:77778*0 + 3*202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77778*0 + 3*202*FLEN/8, x4, x1, x2)

inst_25927:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x015d65 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3f5324 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f015d65; op2val:0x803f5324;
op3val:0xa780ffff; valaddr_reg:x3; val_offset:77781*0 + 3*202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77781*0 + 3*202*FLEN/8, x4, x1, x2)

inst_25928:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x015d65 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3f5324 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f015d65; op2val:0x803f5324;
op3val:0xa781ffff; valaddr_reg:x3; val_offset:77784*0 + 3*202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77784*0 + 3*202*FLEN/8, x4, x1, x2)

inst_25929:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x015d65 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3f5324 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f015d65; op2val:0x803f5324;
op3val:0xa783ffff; valaddr_reg:x3; val_offset:77787*0 + 3*202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77787*0 + 3*202*FLEN/8, x4, x1, x2)

inst_25930:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x015d65 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3f5324 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f015d65; op2val:0x803f5324;
op3val:0xa787ffff; valaddr_reg:x3; val_offset:77790*0 + 3*202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77790*0 + 3*202*FLEN/8, x4, x1, x2)

inst_25931:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x015d65 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3f5324 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f015d65; op2val:0x803f5324;
op3val:0xa78fffff; valaddr_reg:x3; val_offset:77793*0 + 3*202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77793*0 + 3*202*FLEN/8, x4, x1, x2)

inst_25932:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x015d65 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3f5324 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f015d65; op2val:0x803f5324;
op3val:0xa79fffff; valaddr_reg:x3; val_offset:77796*0 + 3*202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77796*0 + 3*202*FLEN/8, x4, x1, x2)

inst_25933:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x015d65 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3f5324 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f015d65; op2val:0x803f5324;
op3val:0xa7bfffff; valaddr_reg:x3; val_offset:77799*0 + 3*202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77799*0 + 3*202*FLEN/8, x4, x1, x2)

inst_25934:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x015d65 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3f5324 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f015d65; op2val:0x803f5324;
op3val:0xa7c00000; valaddr_reg:x3; val_offset:77802*0 + 3*202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77802*0 + 3*202*FLEN/8, x4, x1, x2)

inst_25935:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x015d65 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3f5324 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f015d65; op2val:0x803f5324;
op3val:0xa7e00000; valaddr_reg:x3; val_offset:77805*0 + 3*202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77805*0 + 3*202*FLEN/8, x4, x1, x2)

inst_25936:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x015d65 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3f5324 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f015d65; op2val:0x803f5324;
op3val:0xa7f00000; valaddr_reg:x3; val_offset:77808*0 + 3*202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77808*0 + 3*202*FLEN/8, x4, x1, x2)

inst_25937:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x015d65 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3f5324 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f015d65; op2val:0x803f5324;
op3val:0xa7f80000; valaddr_reg:x3; val_offset:77811*0 + 3*202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77811*0 + 3*202*FLEN/8, x4, x1, x2)

inst_25938:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x015d65 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3f5324 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f015d65; op2val:0x803f5324;
op3val:0xa7fc0000; valaddr_reg:x3; val_offset:77814*0 + 3*202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77814*0 + 3*202*FLEN/8, x4, x1, x2)

inst_25939:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x015d65 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3f5324 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f015d65; op2val:0x803f5324;
op3val:0xa7fe0000; valaddr_reg:x3; val_offset:77817*0 + 3*202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77817*0 + 3*202*FLEN/8, x4, x1, x2)

inst_25940:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x015d65 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3f5324 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f015d65; op2val:0x803f5324;
op3val:0xa7ff0000; valaddr_reg:x3; val_offset:77820*0 + 3*202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77820*0 + 3*202*FLEN/8, x4, x1, x2)

inst_25941:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x015d65 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3f5324 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f015d65; op2val:0x803f5324;
op3val:0xa7ff8000; valaddr_reg:x3; val_offset:77823*0 + 3*202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77823*0 + 3*202*FLEN/8, x4, x1, x2)

inst_25942:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x015d65 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3f5324 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f015d65; op2val:0x803f5324;
op3val:0xa7ffc000; valaddr_reg:x3; val_offset:77826*0 + 3*202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77826*0 + 3*202*FLEN/8, x4, x1, x2)

inst_25943:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x015d65 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3f5324 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f015d65; op2val:0x803f5324;
op3val:0xa7ffe000; valaddr_reg:x3; val_offset:77829*0 + 3*202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77829*0 + 3*202*FLEN/8, x4, x1, x2)

inst_25944:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x015d65 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3f5324 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f015d65; op2val:0x803f5324;
op3val:0xa7fff000; valaddr_reg:x3; val_offset:77832*0 + 3*202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77832*0 + 3*202*FLEN/8, x4, x1, x2)

inst_25945:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x015d65 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3f5324 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f015d65; op2val:0x803f5324;
op3val:0xa7fff800; valaddr_reg:x3; val_offset:77835*0 + 3*202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77835*0 + 3*202*FLEN/8, x4, x1, x2)

inst_25946:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x015d65 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3f5324 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f015d65; op2val:0x803f5324;
op3val:0xa7fffc00; valaddr_reg:x3; val_offset:77838*0 + 3*202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77838*0 + 3*202*FLEN/8, x4, x1, x2)

inst_25947:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x015d65 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3f5324 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f015d65; op2val:0x803f5324;
op3val:0xa7fffe00; valaddr_reg:x3; val_offset:77841*0 + 3*202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77841*0 + 3*202*FLEN/8, x4, x1, x2)

inst_25948:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x015d65 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3f5324 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f015d65; op2val:0x803f5324;
op3val:0xa7ffff00; valaddr_reg:x3; val_offset:77844*0 + 3*202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77844*0 + 3*202*FLEN/8, x4, x1, x2)

inst_25949:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x015d65 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3f5324 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f015d65; op2val:0x803f5324;
op3val:0xa7ffff80; valaddr_reg:x3; val_offset:77847*0 + 3*202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77847*0 + 3*202*FLEN/8, x4, x1, x2)

inst_25950:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x015d65 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3f5324 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f015d65; op2val:0x803f5324;
op3val:0xa7ffffc0; valaddr_reg:x3; val_offset:77850*0 + 3*202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77850*0 + 3*202*FLEN/8, x4, x1, x2)

inst_25951:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x015d65 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3f5324 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f015d65; op2val:0x803f5324;
op3val:0xa7ffffe0; valaddr_reg:x3; val_offset:77853*0 + 3*202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77853*0 + 3*202*FLEN/8, x4, x1, x2)

inst_25952:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x015d65 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3f5324 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f015d65; op2val:0x803f5324;
op3val:0xa7fffff0; valaddr_reg:x3; val_offset:77856*0 + 3*202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77856*0 + 3*202*FLEN/8, x4, x1, x2)

inst_25953:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x015d65 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3f5324 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f015d65; op2val:0x803f5324;
op3val:0xa7fffff8; valaddr_reg:x3; val_offset:77859*0 + 3*202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77859*0 + 3*202*FLEN/8, x4, x1, x2)

inst_25954:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x015d65 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3f5324 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f015d65; op2val:0x803f5324;
op3val:0xa7fffffc; valaddr_reg:x3; val_offset:77862*0 + 3*202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77862*0 + 3*202*FLEN/8, x4, x1, x2)

inst_25955:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x015d65 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3f5324 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f015d65; op2val:0x803f5324;
op3val:0xa7fffffe; valaddr_reg:x3; val_offset:77865*0 + 3*202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77865*0 + 3*202*FLEN/8, x4, x1, x2)

inst_25956:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x015d65 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3f5324 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f015d65; op2val:0x803f5324;
op3val:0xa7ffffff; valaddr_reg:x3; val_offset:77868*0 + 3*202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77868*0 + 3*202*FLEN/8, x4, x1, x2)

inst_25957:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x015d65 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3f5324 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f015d65; op2val:0x803f5324;
op3val:0xbf800001; valaddr_reg:x3; val_offset:77871*0 + 3*202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77871*0 + 3*202*FLEN/8, x4, x1, x2)

inst_25958:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x015d65 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3f5324 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f015d65; op2val:0x803f5324;
op3val:0xbf800003; valaddr_reg:x3; val_offset:77874*0 + 3*202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77874*0 + 3*202*FLEN/8, x4, x1, x2)

inst_25959:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x015d65 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3f5324 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f015d65; op2val:0x803f5324;
op3val:0xbf800007; valaddr_reg:x3; val_offset:77877*0 + 3*202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77877*0 + 3*202*FLEN/8, x4, x1, x2)

inst_25960:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x015d65 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3f5324 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f015d65; op2val:0x803f5324;
op3val:0xbf999999; valaddr_reg:x3; val_offset:77880*0 + 3*202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77880*0 + 3*202*FLEN/8, x4, x1, x2)

inst_25961:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x015d65 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3f5324 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f015d65; op2val:0x803f5324;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:77883*0 + 3*202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77883*0 + 3*202*FLEN/8, x4, x1, x2)

inst_25962:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x015d65 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3f5324 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f015d65; op2val:0x803f5324;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:77886*0 + 3*202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77886*0 + 3*202*FLEN/8, x4, x1, x2)

inst_25963:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x015d65 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3f5324 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f015d65; op2val:0x803f5324;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:77889*0 + 3*202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77889*0 + 3*202*FLEN/8, x4, x1, x2)

inst_25964:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x015d65 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3f5324 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f015d65; op2val:0x803f5324;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:77892*0 + 3*202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77892*0 + 3*202*FLEN/8, x4, x1, x2)

inst_25965:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x015d65 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3f5324 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f015d65; op2val:0x803f5324;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:77895*0 + 3*202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77895*0 + 3*202*FLEN/8, x4, x1, x2)

inst_25966:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x015d65 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3f5324 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f015d65; op2val:0x803f5324;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:77898*0 + 3*202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77898*0 + 3*202*FLEN/8, x4, x1, x2)

inst_25967:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x015d65 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3f5324 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f015d65; op2val:0x803f5324;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:77901*0 + 3*202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77901*0 + 3*202*FLEN/8, x4, x1, x2)

inst_25968:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x015d65 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3f5324 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f015d65; op2val:0x803f5324;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:77904*0 + 3*202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77904*0 + 3*202*FLEN/8, x4, x1, x2)

inst_25969:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x015d65 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3f5324 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f015d65; op2val:0x803f5324;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:77907*0 + 3*202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77907*0 + 3*202*FLEN/8, x4, x1, x2)

inst_25970:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x015d65 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3f5324 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f015d65; op2val:0x803f5324;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:77910*0 + 3*202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77910*0 + 3*202*FLEN/8, x4, x1, x2)

inst_25971:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x015d65 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3f5324 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f015d65; op2val:0x803f5324;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:77913*0 + 3*202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77913*0 + 3*202*FLEN/8, x4, x1, x2)

inst_25972:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x015d65 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3f5324 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f015d65; op2val:0x803f5324;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:77916*0 + 3*202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77916*0 + 3*202*FLEN/8, x4, x1, x2)

inst_25973:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01bf0c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3f237c and fs3 == 1 and fe3 == 0x71 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01bf0c; op2val:0x803f237c;
op3val:0xb8800000; valaddr_reg:x3; val_offset:77919*0 + 3*202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77919*0 + 3*202*FLEN/8, x4, x1, x2)

inst_25974:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01bf0c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3f237c and fs3 == 1 and fe3 == 0x71 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01bf0c; op2val:0x803f237c;
op3val:0xb8800001; valaddr_reg:x3; val_offset:77922*0 + 3*202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77922*0 + 3*202*FLEN/8, x4, x1, x2)

inst_25975:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01bf0c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3f237c and fs3 == 1 and fe3 == 0x71 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01bf0c; op2val:0x803f237c;
op3val:0xb8800003; valaddr_reg:x3; val_offset:77925*0 + 3*202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77925*0 + 3*202*FLEN/8, x4, x1, x2)

inst_25976:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01bf0c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3f237c and fs3 == 1 and fe3 == 0x71 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01bf0c; op2val:0x803f237c;
op3val:0xb8800007; valaddr_reg:x3; val_offset:77928*0 + 3*202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77928*0 + 3*202*FLEN/8, x4, x1, x2)

inst_25977:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01bf0c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3f237c and fs3 == 1 and fe3 == 0x71 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01bf0c; op2val:0x803f237c;
op3val:0xb880000f; valaddr_reg:x3; val_offset:77931*0 + 3*202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77931*0 + 3*202*FLEN/8, x4, x1, x2)

inst_25978:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01bf0c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3f237c and fs3 == 1 and fe3 == 0x71 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01bf0c; op2val:0x803f237c;
op3val:0xb880001f; valaddr_reg:x3; val_offset:77934*0 + 3*202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77934*0 + 3*202*FLEN/8, x4, x1, x2)

inst_25979:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01bf0c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3f237c and fs3 == 1 and fe3 == 0x71 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01bf0c; op2val:0x803f237c;
op3val:0xb880003f; valaddr_reg:x3; val_offset:77937*0 + 3*202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77937*0 + 3*202*FLEN/8, x4, x1, x2)

inst_25980:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01bf0c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3f237c and fs3 == 1 and fe3 == 0x71 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01bf0c; op2val:0x803f237c;
op3val:0xb880007f; valaddr_reg:x3; val_offset:77940*0 + 3*202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77940*0 + 3*202*FLEN/8, x4, x1, x2)

inst_25981:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01bf0c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3f237c and fs3 == 1 and fe3 == 0x71 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01bf0c; op2val:0x803f237c;
op3val:0xb88000ff; valaddr_reg:x3; val_offset:77943*0 + 3*202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77943*0 + 3*202*FLEN/8, x4, x1, x2)

inst_25982:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01bf0c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3f237c and fs3 == 1 and fe3 == 0x71 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01bf0c; op2val:0x803f237c;
op3val:0xb88001ff; valaddr_reg:x3; val_offset:77946*0 + 3*202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77946*0 + 3*202*FLEN/8, x4, x1, x2)

inst_25983:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01bf0c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3f237c and fs3 == 1 and fe3 == 0x71 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01bf0c; op2val:0x803f237c;
op3val:0xb88003ff; valaddr_reg:x3; val_offset:77949*0 + 3*202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77949*0 + 3*202*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2130792966,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(12303291,32,FLEN)
NAN_BOXED(2130792966,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(12862532,32,FLEN)
NAN_BOXED(2130792966,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(13421772,32,FLEN)
NAN_BOXED(2130792966,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(14380470,32,FLEN)
NAN_BOXED(2130792966,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(15099494,32,FLEN)
NAN_BOXED(2130792966,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(15578843,32,FLEN)
NAN_BOXED(2130792966,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777208,32,FLEN)
NAN_BOXED(2130792966,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777212,32,FLEN)
NAN_BOXED(2130792966,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777214,32,FLEN)
NAN_BOXED(2130792966,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(41943040,32,FLEN)
NAN_BOXED(2130792966,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(41943041,32,FLEN)
NAN_BOXED(2130792966,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(41943043,32,FLEN)
NAN_BOXED(2130792966,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(41943047,32,FLEN)
NAN_BOXED(2130792966,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(41943055,32,FLEN)
NAN_BOXED(2130792966,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(41943071,32,FLEN)
NAN_BOXED(2130792966,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(41943103,32,FLEN)
NAN_BOXED(2130792966,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(41943167,32,FLEN)
NAN_BOXED(2130792966,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(41943295,32,FLEN)
NAN_BOXED(2130792966,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(41943551,32,FLEN)
NAN_BOXED(2130792966,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(41944063,32,FLEN)
NAN_BOXED(2130792966,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(41945087,32,FLEN)
NAN_BOXED(2130792966,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(41947135,32,FLEN)
NAN_BOXED(2130792966,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(41951231,32,FLEN)
NAN_BOXED(2130792966,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(41959423,32,FLEN)
NAN_BOXED(2130792966,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(41975807,32,FLEN)
NAN_BOXED(2130792966,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(42008575,32,FLEN)
NAN_BOXED(2130792966,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(42074111,32,FLEN)
NAN_BOXED(2130792966,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(42205183,32,FLEN)
NAN_BOXED(2130792966,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(42467327,32,FLEN)
NAN_BOXED(2130792966,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(42991615,32,FLEN)
NAN_BOXED(2130792966,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(44040191,32,FLEN)
NAN_BOXED(2130792966,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(46137343,32,FLEN)
NAN_BOXED(2130792966,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(46137344,32,FLEN)
NAN_BOXED(2130792966,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(48234496,32,FLEN)
NAN_BOXED(2130792966,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(49283072,32,FLEN)
NAN_BOXED(2130792966,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(49807360,32,FLEN)
NAN_BOXED(2130792966,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50069504,32,FLEN)
NAN_BOXED(2130792966,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50200576,32,FLEN)
NAN_BOXED(2130792966,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50266112,32,FLEN)
NAN_BOXED(2130792966,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50298880,32,FLEN)
NAN_BOXED(2130792966,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50315264,32,FLEN)
NAN_BOXED(2130792966,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50323456,32,FLEN)
NAN_BOXED(2130792966,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50327552,32,FLEN)
NAN_BOXED(2130792966,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50329600,32,FLEN)
NAN_BOXED(2130792966,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50330624,32,FLEN)
NAN_BOXED(2130792966,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50331136,32,FLEN)
NAN_BOXED(2130792966,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50331392,32,FLEN)
NAN_BOXED(2130792966,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50331520,32,FLEN)
NAN_BOXED(2130792966,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50331584,32,FLEN)
NAN_BOXED(2130792966,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50331616,32,FLEN)
NAN_BOXED(2130792966,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50331632,32,FLEN)
NAN_BOXED(2130792966,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50331640,32,FLEN)
NAN_BOXED(2130792966,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50331644,32,FLEN)
NAN_BOXED(2130792966,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50331646,32,FLEN)
NAN_BOXED(2130792966,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50331647,32,FLEN)
NAN_BOXED(2130795877,32,FLEN)
NAN_BOXED(2151633700,32,FLEN)
NAN_BOXED(2810183680,32,FLEN)
NAN_BOXED(2130795877,32,FLEN)
NAN_BOXED(2151633700,32,FLEN)
NAN_BOXED(2810183681,32,FLEN)
NAN_BOXED(2130795877,32,FLEN)
NAN_BOXED(2151633700,32,FLEN)
NAN_BOXED(2810183683,32,FLEN)
NAN_BOXED(2130795877,32,FLEN)
NAN_BOXED(2151633700,32,FLEN)
NAN_BOXED(2810183687,32,FLEN)
NAN_BOXED(2130795877,32,FLEN)
NAN_BOXED(2151633700,32,FLEN)
NAN_BOXED(2810183695,32,FLEN)
NAN_BOXED(2130795877,32,FLEN)
NAN_BOXED(2151633700,32,FLEN)
NAN_BOXED(2810183711,32,FLEN)
NAN_BOXED(2130795877,32,FLEN)
NAN_BOXED(2151633700,32,FLEN)
NAN_BOXED(2810183743,32,FLEN)
NAN_BOXED(2130795877,32,FLEN)
NAN_BOXED(2151633700,32,FLEN)
NAN_BOXED(2810183807,32,FLEN)
NAN_BOXED(2130795877,32,FLEN)
NAN_BOXED(2151633700,32,FLEN)
NAN_BOXED(2810183935,32,FLEN)
NAN_BOXED(2130795877,32,FLEN)
NAN_BOXED(2151633700,32,FLEN)
NAN_BOXED(2810184191,32,FLEN)
NAN_BOXED(2130795877,32,FLEN)
NAN_BOXED(2151633700,32,FLEN)
NAN_BOXED(2810184703,32,FLEN)
NAN_BOXED(2130795877,32,FLEN)
NAN_BOXED(2151633700,32,FLEN)
NAN_BOXED(2810185727,32,FLEN)
NAN_BOXED(2130795877,32,FLEN)
NAN_BOXED(2151633700,32,FLEN)
NAN_BOXED(2810187775,32,FLEN)
NAN_BOXED(2130795877,32,FLEN)
NAN_BOXED(2151633700,32,FLEN)
NAN_BOXED(2810191871,32,FLEN)
NAN_BOXED(2130795877,32,FLEN)
NAN_BOXED(2151633700,32,FLEN)
NAN_BOXED(2810200063,32,FLEN)
NAN_BOXED(2130795877,32,FLEN)
NAN_BOXED(2151633700,32,FLEN)
NAN_BOXED(2810216447,32,FLEN)
NAN_BOXED(2130795877,32,FLEN)
NAN_BOXED(2151633700,32,FLEN)
NAN_BOXED(2810249215,32,FLEN)
NAN_BOXED(2130795877,32,FLEN)
NAN_BOXED(2151633700,32,FLEN)
NAN_BOXED(2810314751,32,FLEN)
NAN_BOXED(2130795877,32,FLEN)
NAN_BOXED(2151633700,32,FLEN)
NAN_BOXED(2810445823,32,FLEN)
NAN_BOXED(2130795877,32,FLEN)
NAN_BOXED(2151633700,32,FLEN)
NAN_BOXED(2810707967,32,FLEN)
NAN_BOXED(2130795877,32,FLEN)
NAN_BOXED(2151633700,32,FLEN)
NAN_BOXED(2811232255,32,FLEN)
NAN_BOXED(2130795877,32,FLEN)
NAN_BOXED(2151633700,32,FLEN)
NAN_BOXED(2812280831,32,FLEN)
NAN_BOXED(2130795877,32,FLEN)
NAN_BOXED(2151633700,32,FLEN)
NAN_BOXED(2814377983,32,FLEN)
NAN_BOXED(2130795877,32,FLEN)
NAN_BOXED(2151633700,32,FLEN)
NAN_BOXED(2814377984,32,FLEN)
NAN_BOXED(2130795877,32,FLEN)
NAN_BOXED(2151633700,32,FLEN)
NAN_BOXED(2816475136,32,FLEN)
NAN_BOXED(2130795877,32,FLEN)
NAN_BOXED(2151633700,32,FLEN)
NAN_BOXED(2817523712,32,FLEN)
NAN_BOXED(2130795877,32,FLEN)
NAN_BOXED(2151633700,32,FLEN)
NAN_BOXED(2818048000,32,FLEN)
NAN_BOXED(2130795877,32,FLEN)
NAN_BOXED(2151633700,32,FLEN)
NAN_BOXED(2818310144,32,FLEN)
NAN_BOXED(2130795877,32,FLEN)
NAN_BOXED(2151633700,32,FLEN)
NAN_BOXED(2818441216,32,FLEN)
NAN_BOXED(2130795877,32,FLEN)
NAN_BOXED(2151633700,32,FLEN)
NAN_BOXED(2818506752,32,FLEN)
NAN_BOXED(2130795877,32,FLEN)
NAN_BOXED(2151633700,32,FLEN)
NAN_BOXED(2818539520,32,FLEN)
NAN_BOXED(2130795877,32,FLEN)
NAN_BOXED(2151633700,32,FLEN)
NAN_BOXED(2818555904,32,FLEN)
NAN_BOXED(2130795877,32,FLEN)
NAN_BOXED(2151633700,32,FLEN)
NAN_BOXED(2818564096,32,FLEN)
NAN_BOXED(2130795877,32,FLEN)
NAN_BOXED(2151633700,32,FLEN)
NAN_BOXED(2818568192,32,FLEN)
NAN_BOXED(2130795877,32,FLEN)
NAN_BOXED(2151633700,32,FLEN)
NAN_BOXED(2818570240,32,FLEN)
NAN_BOXED(2130795877,32,FLEN)
NAN_BOXED(2151633700,32,FLEN)
NAN_BOXED(2818571264,32,FLEN)
NAN_BOXED(2130795877,32,FLEN)
NAN_BOXED(2151633700,32,FLEN)
NAN_BOXED(2818571776,32,FLEN)
NAN_BOXED(2130795877,32,FLEN)
NAN_BOXED(2151633700,32,FLEN)
NAN_BOXED(2818572032,32,FLEN)
NAN_BOXED(2130795877,32,FLEN)
NAN_BOXED(2151633700,32,FLEN)
NAN_BOXED(2818572160,32,FLEN)
NAN_BOXED(2130795877,32,FLEN)
NAN_BOXED(2151633700,32,FLEN)
NAN_BOXED(2818572224,32,FLEN)
NAN_BOXED(2130795877,32,FLEN)
NAN_BOXED(2151633700,32,FLEN)
NAN_BOXED(2818572256,32,FLEN)
NAN_BOXED(2130795877,32,FLEN)
NAN_BOXED(2151633700,32,FLEN)
NAN_BOXED(2818572272,32,FLEN)
NAN_BOXED(2130795877,32,FLEN)
NAN_BOXED(2151633700,32,FLEN)
NAN_BOXED(2818572280,32,FLEN)
NAN_BOXED(2130795877,32,FLEN)
NAN_BOXED(2151633700,32,FLEN)
NAN_BOXED(2818572284,32,FLEN)
NAN_BOXED(2130795877,32,FLEN)
NAN_BOXED(2151633700,32,FLEN)
NAN_BOXED(2818572286,32,FLEN)
NAN_BOXED(2130795877,32,FLEN)
NAN_BOXED(2151633700,32,FLEN)
NAN_BOXED(2818572287,32,FLEN)
NAN_BOXED(2130795877,32,FLEN)
NAN_BOXED(2151633700,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2130795877,32,FLEN)
NAN_BOXED(2151633700,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2130795877,32,FLEN)
NAN_BOXED(2151633700,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
NAN_BOXED(2130795877,32,FLEN)
NAN_BOXED(2151633700,32,FLEN)
NAN_BOXED(3214514585,32,FLEN)
NAN_BOXED(2130795877,32,FLEN)
NAN_BOXED(2151633700,32,FLEN)
NAN_BOXED(3215233609,32,FLEN)
NAN_BOXED(2130795877,32,FLEN)
NAN_BOXED(2151633700,32,FLEN)
NAN_BOXED(3216192307,32,FLEN)
NAN_BOXED(2130795877,32,FLEN)
NAN_BOXED(2151633700,32,FLEN)
NAN_BOXED(3216431981,32,FLEN)
NAN_BOXED(2130795877,32,FLEN)
NAN_BOXED(2151633700,32,FLEN)
NAN_BOXED(3216751547,32,FLEN)
NAN_BOXED(2130795877,32,FLEN)
NAN_BOXED(2151633700,32,FLEN)
NAN_BOXED(3217310788,32,FLEN)
NAN_BOXED(2130795877,32,FLEN)
NAN_BOXED(2151633700,32,FLEN)
NAN_BOXED(3217870028,32,FLEN)
NAN_BOXED(2130795877,32,FLEN)
NAN_BOXED(2151633700,32,FLEN)
NAN_BOXED(3218828726,32,FLEN)
NAN_BOXED(2130795877,32,FLEN)
NAN_BOXED(2151633700,32,FLEN)
NAN_BOXED(3219547750,32,FLEN)
NAN_BOXED(2130795877,32,FLEN)
NAN_BOXED(2151633700,32,FLEN)
NAN_BOXED(3220027099,32,FLEN)
NAN_BOXED(2130795877,32,FLEN)
NAN_BOXED(2151633700,32,FLEN)
NAN_BOXED(3221225464,32,FLEN)
NAN_BOXED(2130795877,32,FLEN)
NAN_BOXED(2151633700,32,FLEN)
NAN_BOXED(3221225468,32,FLEN)
NAN_BOXED(2130795877,32,FLEN)
NAN_BOXED(2151633700,32,FLEN)
NAN_BOXED(3221225470,32,FLEN)
NAN_BOXED(2130820876,32,FLEN)
NAN_BOXED(2151621500,32,FLEN)
NAN_BOXED(3095396352,32,FLEN)
NAN_BOXED(2130820876,32,FLEN)
NAN_BOXED(2151621500,32,FLEN)
NAN_BOXED(3095396353,32,FLEN)
NAN_BOXED(2130820876,32,FLEN)
NAN_BOXED(2151621500,32,FLEN)
NAN_BOXED(3095396355,32,FLEN)
NAN_BOXED(2130820876,32,FLEN)
NAN_BOXED(2151621500,32,FLEN)
NAN_BOXED(3095396359,32,FLEN)
NAN_BOXED(2130820876,32,FLEN)
NAN_BOXED(2151621500,32,FLEN)
NAN_BOXED(3095396367,32,FLEN)
NAN_BOXED(2130820876,32,FLEN)
NAN_BOXED(2151621500,32,FLEN)
NAN_BOXED(3095396383,32,FLEN)
NAN_BOXED(2130820876,32,FLEN)
NAN_BOXED(2151621500,32,FLEN)
NAN_BOXED(3095396415,32,FLEN)
NAN_BOXED(2130820876,32,FLEN)
NAN_BOXED(2151621500,32,FLEN)
NAN_BOXED(3095396479,32,FLEN)
NAN_BOXED(2130820876,32,FLEN)
NAN_BOXED(2151621500,32,FLEN)
NAN_BOXED(3095396607,32,FLEN)
NAN_BOXED(2130820876,32,FLEN)
NAN_BOXED(2151621500,32,FLEN)
NAN_BOXED(3095396863,32,FLEN)
NAN_BOXED(2130820876,32,FLEN)
NAN_BOXED(2151621500,32,FLEN)
NAN_BOXED(3095397375,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
