
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:17:59 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_26368:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02ce4e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ea08d and fs3 == 0 and fe3 == 0x94 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02ce4e; op2val:0x3ea08d;
op3val:0x4a00007f; valaddr_reg:x3; val_offset:79104*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79104*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26369:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02ce4e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ea08d and fs3 == 0 and fe3 == 0x94 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02ce4e; op2val:0x3ea08d;
op3val:0x4a0000ff; valaddr_reg:x3; val_offset:79107*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79107*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26370:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02ce4e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ea08d and fs3 == 0 and fe3 == 0x94 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02ce4e; op2val:0x3ea08d;
op3val:0x4a0001ff; valaddr_reg:x3; val_offset:79110*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79110*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26371:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02ce4e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ea08d and fs3 == 0 and fe3 == 0x94 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02ce4e; op2val:0x3ea08d;
op3val:0x4a0003ff; valaddr_reg:x3; val_offset:79113*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79113*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26372:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02ce4e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ea08d and fs3 == 0 and fe3 == 0x94 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02ce4e; op2val:0x3ea08d;
op3val:0x4a0007ff; valaddr_reg:x3; val_offset:79116*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79116*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26373:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02ce4e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ea08d and fs3 == 0 and fe3 == 0x94 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02ce4e; op2val:0x3ea08d;
op3val:0x4a000fff; valaddr_reg:x3; val_offset:79119*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79119*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26374:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02ce4e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ea08d and fs3 == 0 and fe3 == 0x94 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02ce4e; op2val:0x3ea08d;
op3val:0x4a001fff; valaddr_reg:x3; val_offset:79122*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79122*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26375:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02ce4e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ea08d and fs3 == 0 and fe3 == 0x94 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02ce4e; op2val:0x3ea08d;
op3val:0x4a003fff; valaddr_reg:x3; val_offset:79125*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79125*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26376:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02ce4e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ea08d and fs3 == 0 and fe3 == 0x94 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02ce4e; op2val:0x3ea08d;
op3val:0x4a007fff; valaddr_reg:x3; val_offset:79128*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79128*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26377:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02ce4e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ea08d and fs3 == 0 and fe3 == 0x94 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02ce4e; op2val:0x3ea08d;
op3val:0x4a00ffff; valaddr_reg:x3; val_offset:79131*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79131*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26378:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02ce4e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ea08d and fs3 == 0 and fe3 == 0x94 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02ce4e; op2val:0x3ea08d;
op3val:0x4a01ffff; valaddr_reg:x3; val_offset:79134*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79134*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26379:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02ce4e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ea08d and fs3 == 0 and fe3 == 0x94 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02ce4e; op2val:0x3ea08d;
op3val:0x4a03ffff; valaddr_reg:x3; val_offset:79137*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79137*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26380:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02ce4e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ea08d and fs3 == 0 and fe3 == 0x94 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02ce4e; op2val:0x3ea08d;
op3val:0x4a07ffff; valaddr_reg:x3; val_offset:79140*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79140*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26381:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02ce4e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ea08d and fs3 == 0 and fe3 == 0x94 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02ce4e; op2val:0x3ea08d;
op3val:0x4a0fffff; valaddr_reg:x3; val_offset:79143*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79143*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26382:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02ce4e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ea08d and fs3 == 0 and fe3 == 0x94 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02ce4e; op2val:0x3ea08d;
op3val:0x4a1fffff; valaddr_reg:x3; val_offset:79146*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79146*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26383:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02ce4e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ea08d and fs3 == 0 and fe3 == 0x94 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02ce4e; op2val:0x3ea08d;
op3val:0x4a3fffff; valaddr_reg:x3; val_offset:79149*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79149*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26384:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02ce4e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ea08d and fs3 == 0 and fe3 == 0x94 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02ce4e; op2val:0x3ea08d;
op3val:0x4a400000; valaddr_reg:x3; val_offset:79152*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79152*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26385:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02ce4e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ea08d and fs3 == 0 and fe3 == 0x94 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02ce4e; op2val:0x3ea08d;
op3val:0x4a600000; valaddr_reg:x3; val_offset:79155*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79155*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26386:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02ce4e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ea08d and fs3 == 0 and fe3 == 0x94 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02ce4e; op2val:0x3ea08d;
op3val:0x4a700000; valaddr_reg:x3; val_offset:79158*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79158*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26387:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02ce4e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ea08d and fs3 == 0 and fe3 == 0x94 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02ce4e; op2val:0x3ea08d;
op3val:0x4a780000; valaddr_reg:x3; val_offset:79161*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79161*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26388:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02ce4e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ea08d and fs3 == 0 and fe3 == 0x94 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02ce4e; op2val:0x3ea08d;
op3val:0x4a7c0000; valaddr_reg:x3; val_offset:79164*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79164*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26389:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02ce4e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ea08d and fs3 == 0 and fe3 == 0x94 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02ce4e; op2val:0x3ea08d;
op3val:0x4a7e0000; valaddr_reg:x3; val_offset:79167*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79167*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26390:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02ce4e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ea08d and fs3 == 0 and fe3 == 0x94 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02ce4e; op2val:0x3ea08d;
op3val:0x4a7f0000; valaddr_reg:x3; val_offset:79170*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79170*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26391:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02ce4e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ea08d and fs3 == 0 and fe3 == 0x94 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02ce4e; op2val:0x3ea08d;
op3val:0x4a7f8000; valaddr_reg:x3; val_offset:79173*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79173*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26392:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02ce4e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ea08d and fs3 == 0 and fe3 == 0x94 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02ce4e; op2val:0x3ea08d;
op3val:0x4a7fc000; valaddr_reg:x3; val_offset:79176*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79176*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26393:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02ce4e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ea08d and fs3 == 0 and fe3 == 0x94 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02ce4e; op2val:0x3ea08d;
op3val:0x4a7fe000; valaddr_reg:x3; val_offset:79179*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79179*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26394:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02ce4e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ea08d and fs3 == 0 and fe3 == 0x94 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02ce4e; op2val:0x3ea08d;
op3val:0x4a7ff000; valaddr_reg:x3; val_offset:79182*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79182*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26395:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02ce4e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ea08d and fs3 == 0 and fe3 == 0x94 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02ce4e; op2val:0x3ea08d;
op3val:0x4a7ff800; valaddr_reg:x3; val_offset:79185*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79185*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26396:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02ce4e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ea08d and fs3 == 0 and fe3 == 0x94 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02ce4e; op2val:0x3ea08d;
op3val:0x4a7ffc00; valaddr_reg:x3; val_offset:79188*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79188*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26397:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02ce4e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ea08d and fs3 == 0 and fe3 == 0x94 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02ce4e; op2val:0x3ea08d;
op3val:0x4a7ffe00; valaddr_reg:x3; val_offset:79191*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79191*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26398:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02ce4e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ea08d and fs3 == 0 and fe3 == 0x94 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02ce4e; op2val:0x3ea08d;
op3val:0x4a7fff00; valaddr_reg:x3; val_offset:79194*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79194*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26399:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02ce4e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ea08d and fs3 == 0 and fe3 == 0x94 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02ce4e; op2val:0x3ea08d;
op3val:0x4a7fff80; valaddr_reg:x3; val_offset:79197*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79197*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26400:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02ce4e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ea08d and fs3 == 0 and fe3 == 0x94 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02ce4e; op2val:0x3ea08d;
op3val:0x4a7fffc0; valaddr_reg:x3; val_offset:79200*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79200*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26401:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02ce4e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ea08d and fs3 == 0 and fe3 == 0x94 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02ce4e; op2val:0x3ea08d;
op3val:0x4a7fffe0; valaddr_reg:x3; val_offset:79203*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79203*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26402:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02ce4e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ea08d and fs3 == 0 and fe3 == 0x94 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02ce4e; op2val:0x3ea08d;
op3val:0x4a7ffff0; valaddr_reg:x3; val_offset:79206*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79206*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26403:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02ce4e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ea08d and fs3 == 0 and fe3 == 0x94 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02ce4e; op2val:0x3ea08d;
op3val:0x4a7ffff8; valaddr_reg:x3; val_offset:79209*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79209*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26404:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02ce4e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ea08d and fs3 == 0 and fe3 == 0x94 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02ce4e; op2val:0x3ea08d;
op3val:0x4a7ffffc; valaddr_reg:x3; val_offset:79212*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79212*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26405:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02ce4e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ea08d and fs3 == 0 and fe3 == 0x94 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02ce4e; op2val:0x3ea08d;
op3val:0x4a7ffffe; valaddr_reg:x3; val_offset:79215*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79215*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26406:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02ce4e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ea08d and fs3 == 0 and fe3 == 0x94 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02ce4e; op2val:0x3ea08d;
op3val:0x4a7fffff; valaddr_reg:x3; val_offset:79218*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79218*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26407:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x030bb1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f030bb1; op2val:0x0;
op3val:0x800001; valaddr_reg:x3; val_offset:79221*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79221*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26408:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x030bb1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f030bb1; op2val:0x0;
op3val:0x800003; valaddr_reg:x3; val_offset:79224*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79224*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26409:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x030bb1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f030bb1; op2val:0x0;
op3val:0x800007; valaddr_reg:x3; val_offset:79227*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79227*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26410:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x030bb1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f030bb1; op2val:0x0;
op3val:0x999999; valaddr_reg:x3; val_offset:79230*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79230*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26411:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x030bb1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f030bb1; op2val:0x0;
op3val:0xa49249; valaddr_reg:x3; val_offset:79233*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79233*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26412:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x030bb1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f030bb1; op2val:0x0;
op3val:0xb33333; valaddr_reg:x3; val_offset:79236*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79236*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26413:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x030bb1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f030bb1; op2val:0x0;
op3val:0xb6db6d; valaddr_reg:x3; val_offset:79239*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79239*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26414:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x030bb1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f030bb1; op2val:0x0;
op3val:0xbbbbbb; valaddr_reg:x3; val_offset:79242*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79242*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26415:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x030bb1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f030bb1; op2val:0x0;
op3val:0xc44444; valaddr_reg:x3; val_offset:79245*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79245*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26416:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x030bb1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f030bb1; op2val:0x0;
op3val:0xcccccc; valaddr_reg:x3; val_offset:79248*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79248*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26417:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x030bb1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f030bb1; op2val:0x0;
op3val:0xdb6db6; valaddr_reg:x3; val_offset:79251*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79251*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26418:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x030bb1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f030bb1; op2val:0x0;
op3val:0xe66666; valaddr_reg:x3; val_offset:79254*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79254*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26419:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x030bb1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f030bb1; op2val:0x0;
op3val:0xedb6db; valaddr_reg:x3; val_offset:79257*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79257*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26420:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x030bb1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f030bb1; op2val:0x0;
op3val:0xfffff8; valaddr_reg:x3; val_offset:79260*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79260*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26421:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x030bb1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f030bb1; op2val:0x0;
op3val:0xfffffc; valaddr_reg:x3; val_offset:79263*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79263*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26422:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x030bb1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f030bb1; op2val:0x0;
op3val:0xfffffe; valaddr_reg:x3; val_offset:79266*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79266*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26423:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x030bb1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f030bb1; op2val:0x0;
op3val:0xe800000; valaddr_reg:x3; val_offset:79269*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79269*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26424:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x030bb1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f030bb1; op2val:0x0;
op3val:0xe800001; valaddr_reg:x3; val_offset:79272*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79272*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26425:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x030bb1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f030bb1; op2val:0x0;
op3val:0xe800003; valaddr_reg:x3; val_offset:79275*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79275*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26426:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x030bb1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f030bb1; op2val:0x0;
op3val:0xe800007; valaddr_reg:x3; val_offset:79278*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79278*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26427:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x030bb1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f030bb1; op2val:0x0;
op3val:0xe80000f; valaddr_reg:x3; val_offset:79281*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79281*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26428:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x030bb1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f030bb1; op2val:0x0;
op3val:0xe80001f; valaddr_reg:x3; val_offset:79284*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79284*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26429:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x030bb1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f030bb1; op2val:0x0;
op3val:0xe80003f; valaddr_reg:x3; val_offset:79287*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79287*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26430:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x030bb1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f030bb1; op2val:0x0;
op3val:0xe80007f; valaddr_reg:x3; val_offset:79290*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79290*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26431:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x030bb1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f030bb1; op2val:0x0;
op3val:0xe8000ff; valaddr_reg:x3; val_offset:79293*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79293*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26432:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x030bb1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f030bb1; op2val:0x0;
op3val:0xe8001ff; valaddr_reg:x3; val_offset:79296*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79296*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26433:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x030bb1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f030bb1; op2val:0x0;
op3val:0xe8003ff; valaddr_reg:x3; val_offset:79299*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79299*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26434:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x030bb1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f030bb1; op2val:0x0;
op3val:0xe8007ff; valaddr_reg:x3; val_offset:79302*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79302*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26435:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x030bb1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f030bb1; op2val:0x0;
op3val:0xe800fff; valaddr_reg:x3; val_offset:79305*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79305*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26436:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x030bb1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f030bb1; op2val:0x0;
op3val:0xe801fff; valaddr_reg:x3; val_offset:79308*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79308*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26437:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x030bb1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f030bb1; op2val:0x0;
op3val:0xe803fff; valaddr_reg:x3; val_offset:79311*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79311*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26438:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x030bb1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f030bb1; op2val:0x0;
op3val:0xe807fff; valaddr_reg:x3; val_offset:79314*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79314*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26439:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x030bb1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f030bb1; op2val:0x0;
op3val:0xe80ffff; valaddr_reg:x3; val_offset:79317*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79317*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26440:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x030bb1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f030bb1; op2val:0x0;
op3val:0xe81ffff; valaddr_reg:x3; val_offset:79320*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79320*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26441:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x030bb1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f030bb1; op2val:0x0;
op3val:0xe83ffff; valaddr_reg:x3; val_offset:79323*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79323*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26442:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x030bb1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f030bb1; op2val:0x0;
op3val:0xe87ffff; valaddr_reg:x3; val_offset:79326*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79326*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26443:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x030bb1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f030bb1; op2val:0x0;
op3val:0xe8fffff; valaddr_reg:x3; val_offset:79329*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79329*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26444:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x030bb1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f030bb1; op2val:0x0;
op3val:0xe9fffff; valaddr_reg:x3; val_offset:79332*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79332*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26445:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x030bb1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f030bb1; op2val:0x0;
op3val:0xebfffff; valaddr_reg:x3; val_offset:79335*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79335*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26446:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x030bb1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f030bb1; op2val:0x0;
op3val:0xec00000; valaddr_reg:x3; val_offset:79338*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79338*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26447:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x030bb1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f030bb1; op2val:0x0;
op3val:0xee00000; valaddr_reg:x3; val_offset:79341*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79341*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26448:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x030bb1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f030bb1; op2val:0x0;
op3val:0xef00000; valaddr_reg:x3; val_offset:79344*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79344*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26449:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x030bb1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f030bb1; op2val:0x0;
op3val:0xef80000; valaddr_reg:x3; val_offset:79347*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79347*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26450:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x030bb1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f030bb1; op2val:0x0;
op3val:0xefc0000; valaddr_reg:x3; val_offset:79350*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79350*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26451:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x030bb1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f030bb1; op2val:0x0;
op3val:0xefe0000; valaddr_reg:x3; val_offset:79353*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79353*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26452:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x030bb1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f030bb1; op2val:0x0;
op3val:0xeff0000; valaddr_reg:x3; val_offset:79356*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79356*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26453:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x030bb1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f030bb1; op2val:0x0;
op3val:0xeff8000; valaddr_reg:x3; val_offset:79359*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79359*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26454:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x030bb1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f030bb1; op2val:0x0;
op3val:0xeffc000; valaddr_reg:x3; val_offset:79362*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79362*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26455:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x030bb1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f030bb1; op2val:0x0;
op3val:0xeffe000; valaddr_reg:x3; val_offset:79365*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79365*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26456:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x030bb1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f030bb1; op2val:0x0;
op3val:0xefff000; valaddr_reg:x3; val_offset:79368*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79368*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26457:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x030bb1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f030bb1; op2val:0x0;
op3val:0xefff800; valaddr_reg:x3; val_offset:79371*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79371*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26458:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x030bb1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f030bb1; op2val:0x0;
op3val:0xefffc00; valaddr_reg:x3; val_offset:79374*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79374*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26459:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x030bb1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f030bb1; op2val:0x0;
op3val:0xefffe00; valaddr_reg:x3; val_offset:79377*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79377*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26460:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x030bb1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f030bb1; op2val:0x0;
op3val:0xeffff00; valaddr_reg:x3; val_offset:79380*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79380*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26461:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x030bb1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f030bb1; op2val:0x0;
op3val:0xeffff80; valaddr_reg:x3; val_offset:79383*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79383*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26462:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x030bb1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f030bb1; op2val:0x0;
op3val:0xeffffc0; valaddr_reg:x3; val_offset:79386*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79386*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26463:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x030bb1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f030bb1; op2val:0x0;
op3val:0xeffffe0; valaddr_reg:x3; val_offset:79389*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79389*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26464:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x030bb1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f030bb1; op2val:0x0;
op3val:0xefffff0; valaddr_reg:x3; val_offset:79392*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79392*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26465:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x030bb1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f030bb1; op2val:0x0;
op3val:0xefffff8; valaddr_reg:x3; val_offset:79395*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79395*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26466:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x030bb1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f030bb1; op2val:0x0;
op3val:0xefffffc; valaddr_reg:x3; val_offset:79398*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79398*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26467:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x030bb1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f030bb1; op2val:0x0;
op3val:0xefffffe; valaddr_reg:x3; val_offset:79401*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79401*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26468:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x030bb1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f030bb1; op2val:0x0;
op3val:0xeffffff; valaddr_reg:x3; val_offset:79404*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79404*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26469:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x033b4f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3e6c87 and fs3 == 0 and fe3 == 0x46 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f033b4f; op2val:0x3e6c87;
op3val:0x23000000; valaddr_reg:x3; val_offset:79407*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79407*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26470:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x033b4f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3e6c87 and fs3 == 0 and fe3 == 0x46 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f033b4f; op2val:0x3e6c87;
op3val:0x23000001; valaddr_reg:x3; val_offset:79410*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79410*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26471:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x033b4f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3e6c87 and fs3 == 0 and fe3 == 0x46 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f033b4f; op2val:0x3e6c87;
op3val:0x23000003; valaddr_reg:x3; val_offset:79413*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79413*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26472:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x033b4f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3e6c87 and fs3 == 0 and fe3 == 0x46 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f033b4f; op2val:0x3e6c87;
op3val:0x23000007; valaddr_reg:x3; val_offset:79416*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79416*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26473:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x033b4f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3e6c87 and fs3 == 0 and fe3 == 0x46 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f033b4f; op2val:0x3e6c87;
op3val:0x2300000f; valaddr_reg:x3; val_offset:79419*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79419*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26474:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x033b4f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3e6c87 and fs3 == 0 and fe3 == 0x46 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f033b4f; op2val:0x3e6c87;
op3val:0x2300001f; valaddr_reg:x3; val_offset:79422*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79422*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26475:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x033b4f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3e6c87 and fs3 == 0 and fe3 == 0x46 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f033b4f; op2val:0x3e6c87;
op3val:0x2300003f; valaddr_reg:x3; val_offset:79425*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79425*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26476:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x033b4f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3e6c87 and fs3 == 0 and fe3 == 0x46 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f033b4f; op2val:0x3e6c87;
op3val:0x2300007f; valaddr_reg:x3; val_offset:79428*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79428*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26477:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x033b4f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3e6c87 and fs3 == 0 and fe3 == 0x46 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f033b4f; op2val:0x3e6c87;
op3val:0x230000ff; valaddr_reg:x3; val_offset:79431*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79431*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26478:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x033b4f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3e6c87 and fs3 == 0 and fe3 == 0x46 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f033b4f; op2val:0x3e6c87;
op3val:0x230001ff; valaddr_reg:x3; val_offset:79434*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79434*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26479:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x033b4f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3e6c87 and fs3 == 0 and fe3 == 0x46 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f033b4f; op2val:0x3e6c87;
op3val:0x230003ff; valaddr_reg:x3; val_offset:79437*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79437*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26480:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x033b4f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3e6c87 and fs3 == 0 and fe3 == 0x46 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f033b4f; op2val:0x3e6c87;
op3val:0x230007ff; valaddr_reg:x3; val_offset:79440*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79440*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26481:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x033b4f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3e6c87 and fs3 == 0 and fe3 == 0x46 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f033b4f; op2val:0x3e6c87;
op3val:0x23000fff; valaddr_reg:x3; val_offset:79443*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79443*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26482:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x033b4f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3e6c87 and fs3 == 0 and fe3 == 0x46 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f033b4f; op2val:0x3e6c87;
op3val:0x23001fff; valaddr_reg:x3; val_offset:79446*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79446*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26483:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x033b4f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3e6c87 and fs3 == 0 and fe3 == 0x46 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f033b4f; op2val:0x3e6c87;
op3val:0x23003fff; valaddr_reg:x3; val_offset:79449*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79449*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26484:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x033b4f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3e6c87 and fs3 == 0 and fe3 == 0x46 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f033b4f; op2val:0x3e6c87;
op3val:0x23007fff; valaddr_reg:x3; val_offset:79452*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79452*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26485:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x033b4f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3e6c87 and fs3 == 0 and fe3 == 0x46 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f033b4f; op2val:0x3e6c87;
op3val:0x2300ffff; valaddr_reg:x3; val_offset:79455*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79455*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26486:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x033b4f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3e6c87 and fs3 == 0 and fe3 == 0x46 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f033b4f; op2val:0x3e6c87;
op3val:0x2301ffff; valaddr_reg:x3; val_offset:79458*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79458*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26487:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x033b4f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3e6c87 and fs3 == 0 and fe3 == 0x46 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f033b4f; op2val:0x3e6c87;
op3val:0x2303ffff; valaddr_reg:x3; val_offset:79461*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79461*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26488:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x033b4f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3e6c87 and fs3 == 0 and fe3 == 0x46 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f033b4f; op2val:0x3e6c87;
op3val:0x2307ffff; valaddr_reg:x3; val_offset:79464*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79464*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26489:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x033b4f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3e6c87 and fs3 == 0 and fe3 == 0x46 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f033b4f; op2val:0x3e6c87;
op3val:0x230fffff; valaddr_reg:x3; val_offset:79467*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79467*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26490:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x033b4f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3e6c87 and fs3 == 0 and fe3 == 0x46 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f033b4f; op2val:0x3e6c87;
op3val:0x231fffff; valaddr_reg:x3; val_offset:79470*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79470*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26491:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x033b4f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3e6c87 and fs3 == 0 and fe3 == 0x46 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f033b4f; op2val:0x3e6c87;
op3val:0x233fffff; valaddr_reg:x3; val_offset:79473*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79473*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26492:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x033b4f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3e6c87 and fs3 == 0 and fe3 == 0x46 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f033b4f; op2val:0x3e6c87;
op3val:0x23400000; valaddr_reg:x3; val_offset:79476*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79476*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26493:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x033b4f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3e6c87 and fs3 == 0 and fe3 == 0x46 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f033b4f; op2val:0x3e6c87;
op3val:0x23600000; valaddr_reg:x3; val_offset:79479*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79479*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26494:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x033b4f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3e6c87 and fs3 == 0 and fe3 == 0x46 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f033b4f; op2val:0x3e6c87;
op3val:0x23700000; valaddr_reg:x3; val_offset:79482*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79482*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26495:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x033b4f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3e6c87 and fs3 == 0 and fe3 == 0x46 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f033b4f; op2val:0x3e6c87;
op3val:0x23780000; valaddr_reg:x3; val_offset:79485*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79485*0 + 3*206*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2130890318,32,FLEN)
NAN_BOXED(4104333,32,FLEN)
NAN_BOXED(1241514111,32,FLEN)
NAN_BOXED(2130890318,32,FLEN)
NAN_BOXED(4104333,32,FLEN)
NAN_BOXED(1241514239,32,FLEN)
NAN_BOXED(2130890318,32,FLEN)
NAN_BOXED(4104333,32,FLEN)
NAN_BOXED(1241514495,32,FLEN)
NAN_BOXED(2130890318,32,FLEN)
NAN_BOXED(4104333,32,FLEN)
NAN_BOXED(1241515007,32,FLEN)
NAN_BOXED(2130890318,32,FLEN)
NAN_BOXED(4104333,32,FLEN)
NAN_BOXED(1241516031,32,FLEN)
NAN_BOXED(2130890318,32,FLEN)
NAN_BOXED(4104333,32,FLEN)
NAN_BOXED(1241518079,32,FLEN)
NAN_BOXED(2130890318,32,FLEN)
NAN_BOXED(4104333,32,FLEN)
NAN_BOXED(1241522175,32,FLEN)
NAN_BOXED(2130890318,32,FLEN)
NAN_BOXED(4104333,32,FLEN)
NAN_BOXED(1241530367,32,FLEN)
NAN_BOXED(2130890318,32,FLEN)
NAN_BOXED(4104333,32,FLEN)
NAN_BOXED(1241546751,32,FLEN)
NAN_BOXED(2130890318,32,FLEN)
NAN_BOXED(4104333,32,FLEN)
NAN_BOXED(1241579519,32,FLEN)
NAN_BOXED(2130890318,32,FLEN)
NAN_BOXED(4104333,32,FLEN)
NAN_BOXED(1241645055,32,FLEN)
NAN_BOXED(2130890318,32,FLEN)
NAN_BOXED(4104333,32,FLEN)
NAN_BOXED(1241776127,32,FLEN)
NAN_BOXED(2130890318,32,FLEN)
NAN_BOXED(4104333,32,FLEN)
NAN_BOXED(1242038271,32,FLEN)
NAN_BOXED(2130890318,32,FLEN)
NAN_BOXED(4104333,32,FLEN)
NAN_BOXED(1242562559,32,FLEN)
NAN_BOXED(2130890318,32,FLEN)
NAN_BOXED(4104333,32,FLEN)
NAN_BOXED(1243611135,32,FLEN)
NAN_BOXED(2130890318,32,FLEN)
NAN_BOXED(4104333,32,FLEN)
NAN_BOXED(1245708287,32,FLEN)
NAN_BOXED(2130890318,32,FLEN)
NAN_BOXED(4104333,32,FLEN)
NAN_BOXED(1245708288,32,FLEN)
NAN_BOXED(2130890318,32,FLEN)
NAN_BOXED(4104333,32,FLEN)
NAN_BOXED(1247805440,32,FLEN)
NAN_BOXED(2130890318,32,FLEN)
NAN_BOXED(4104333,32,FLEN)
NAN_BOXED(1248854016,32,FLEN)
NAN_BOXED(2130890318,32,FLEN)
NAN_BOXED(4104333,32,FLEN)
NAN_BOXED(1249378304,32,FLEN)
NAN_BOXED(2130890318,32,FLEN)
NAN_BOXED(4104333,32,FLEN)
NAN_BOXED(1249640448,32,FLEN)
NAN_BOXED(2130890318,32,FLEN)
NAN_BOXED(4104333,32,FLEN)
NAN_BOXED(1249771520,32,FLEN)
NAN_BOXED(2130890318,32,FLEN)
NAN_BOXED(4104333,32,FLEN)
NAN_BOXED(1249837056,32,FLEN)
NAN_BOXED(2130890318,32,FLEN)
NAN_BOXED(4104333,32,FLEN)
NAN_BOXED(1249869824,32,FLEN)
NAN_BOXED(2130890318,32,FLEN)
NAN_BOXED(4104333,32,FLEN)
NAN_BOXED(1249886208,32,FLEN)
NAN_BOXED(2130890318,32,FLEN)
NAN_BOXED(4104333,32,FLEN)
NAN_BOXED(1249894400,32,FLEN)
NAN_BOXED(2130890318,32,FLEN)
NAN_BOXED(4104333,32,FLEN)
NAN_BOXED(1249898496,32,FLEN)
NAN_BOXED(2130890318,32,FLEN)
NAN_BOXED(4104333,32,FLEN)
NAN_BOXED(1249900544,32,FLEN)
NAN_BOXED(2130890318,32,FLEN)
NAN_BOXED(4104333,32,FLEN)
NAN_BOXED(1249901568,32,FLEN)
NAN_BOXED(2130890318,32,FLEN)
NAN_BOXED(4104333,32,FLEN)
NAN_BOXED(1249902080,32,FLEN)
NAN_BOXED(2130890318,32,FLEN)
NAN_BOXED(4104333,32,FLEN)
NAN_BOXED(1249902336,32,FLEN)
NAN_BOXED(2130890318,32,FLEN)
NAN_BOXED(4104333,32,FLEN)
NAN_BOXED(1249902464,32,FLEN)
NAN_BOXED(2130890318,32,FLEN)
NAN_BOXED(4104333,32,FLEN)
NAN_BOXED(1249902528,32,FLEN)
NAN_BOXED(2130890318,32,FLEN)
NAN_BOXED(4104333,32,FLEN)
NAN_BOXED(1249902560,32,FLEN)
NAN_BOXED(2130890318,32,FLEN)
NAN_BOXED(4104333,32,FLEN)
NAN_BOXED(1249902576,32,FLEN)
NAN_BOXED(2130890318,32,FLEN)
NAN_BOXED(4104333,32,FLEN)
NAN_BOXED(1249902584,32,FLEN)
NAN_BOXED(2130890318,32,FLEN)
NAN_BOXED(4104333,32,FLEN)
NAN_BOXED(1249902588,32,FLEN)
NAN_BOXED(2130890318,32,FLEN)
NAN_BOXED(4104333,32,FLEN)
NAN_BOXED(1249902590,32,FLEN)
NAN_BOXED(2130890318,32,FLEN)
NAN_BOXED(4104333,32,FLEN)
NAN_BOXED(1249902591,32,FLEN)
NAN_BOXED(2130906033,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(2130906033,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388611,32,FLEN)
NAN_BOXED(2130906033,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388615,32,FLEN)
NAN_BOXED(2130906033,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(10066329,32,FLEN)
NAN_BOXED(2130906033,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(10785353,32,FLEN)
NAN_BOXED(2130906033,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(11744051,32,FLEN)
NAN_BOXED(2130906033,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(11983725,32,FLEN)
NAN_BOXED(2130906033,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(12303291,32,FLEN)
NAN_BOXED(2130906033,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(12862532,32,FLEN)
NAN_BOXED(2130906033,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(13421772,32,FLEN)
NAN_BOXED(2130906033,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(14380470,32,FLEN)
NAN_BOXED(2130906033,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(15099494,32,FLEN)
NAN_BOXED(2130906033,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(15578843,32,FLEN)
NAN_BOXED(2130906033,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777208,32,FLEN)
NAN_BOXED(2130906033,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777212,32,FLEN)
NAN_BOXED(2130906033,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777214,32,FLEN)
NAN_BOXED(2130906033,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243269632,32,FLEN)
NAN_BOXED(2130906033,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243269633,32,FLEN)
NAN_BOXED(2130906033,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243269635,32,FLEN)
NAN_BOXED(2130906033,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243269639,32,FLEN)
NAN_BOXED(2130906033,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243269647,32,FLEN)
NAN_BOXED(2130906033,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243269663,32,FLEN)
NAN_BOXED(2130906033,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243269695,32,FLEN)
NAN_BOXED(2130906033,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243269759,32,FLEN)
NAN_BOXED(2130906033,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243269887,32,FLEN)
NAN_BOXED(2130906033,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243270143,32,FLEN)
NAN_BOXED(2130906033,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243270655,32,FLEN)
NAN_BOXED(2130906033,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243271679,32,FLEN)
NAN_BOXED(2130906033,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243273727,32,FLEN)
NAN_BOXED(2130906033,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243277823,32,FLEN)
NAN_BOXED(2130906033,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243286015,32,FLEN)
NAN_BOXED(2130906033,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243302399,32,FLEN)
NAN_BOXED(2130906033,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243335167,32,FLEN)
NAN_BOXED(2130906033,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243400703,32,FLEN)
NAN_BOXED(2130906033,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243531775,32,FLEN)
NAN_BOXED(2130906033,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243793919,32,FLEN)
NAN_BOXED(2130906033,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(244318207,32,FLEN)
NAN_BOXED(2130906033,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(245366783,32,FLEN)
NAN_BOXED(2130906033,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(247463935,32,FLEN)
NAN_BOXED(2130906033,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(247463936,32,FLEN)
NAN_BOXED(2130906033,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(249561088,32,FLEN)
NAN_BOXED(2130906033,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(250609664,32,FLEN)
NAN_BOXED(2130906033,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251133952,32,FLEN)
NAN_BOXED(2130906033,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251396096,32,FLEN)
NAN_BOXED(2130906033,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251527168,32,FLEN)
NAN_BOXED(2130906033,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251592704,32,FLEN)
NAN_BOXED(2130906033,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251625472,32,FLEN)
NAN_BOXED(2130906033,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251641856,32,FLEN)
NAN_BOXED(2130906033,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251650048,32,FLEN)
NAN_BOXED(2130906033,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251654144,32,FLEN)
NAN_BOXED(2130906033,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251656192,32,FLEN)
NAN_BOXED(2130906033,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251657216,32,FLEN)
NAN_BOXED(2130906033,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251657728,32,FLEN)
NAN_BOXED(2130906033,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251657984,32,FLEN)
NAN_BOXED(2130906033,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251658112,32,FLEN)
NAN_BOXED(2130906033,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251658176,32,FLEN)
NAN_BOXED(2130906033,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251658208,32,FLEN)
NAN_BOXED(2130906033,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251658224,32,FLEN)
NAN_BOXED(2130906033,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251658232,32,FLEN)
NAN_BOXED(2130906033,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251658236,32,FLEN)
NAN_BOXED(2130906033,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251658238,32,FLEN)
NAN_BOXED(2130906033,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251658239,32,FLEN)
NAN_BOXED(2130918223,32,FLEN)
NAN_BOXED(4091015,32,FLEN)
NAN_BOXED(587202560,32,FLEN)
NAN_BOXED(2130918223,32,FLEN)
NAN_BOXED(4091015,32,FLEN)
NAN_BOXED(587202561,32,FLEN)
NAN_BOXED(2130918223,32,FLEN)
NAN_BOXED(4091015,32,FLEN)
NAN_BOXED(587202563,32,FLEN)
NAN_BOXED(2130918223,32,FLEN)
NAN_BOXED(4091015,32,FLEN)
NAN_BOXED(587202567,32,FLEN)
NAN_BOXED(2130918223,32,FLEN)
NAN_BOXED(4091015,32,FLEN)
NAN_BOXED(587202575,32,FLEN)
NAN_BOXED(2130918223,32,FLEN)
NAN_BOXED(4091015,32,FLEN)
NAN_BOXED(587202591,32,FLEN)
NAN_BOXED(2130918223,32,FLEN)
NAN_BOXED(4091015,32,FLEN)
NAN_BOXED(587202623,32,FLEN)
NAN_BOXED(2130918223,32,FLEN)
NAN_BOXED(4091015,32,FLEN)
NAN_BOXED(587202687,32,FLEN)
NAN_BOXED(2130918223,32,FLEN)
NAN_BOXED(4091015,32,FLEN)
NAN_BOXED(587202815,32,FLEN)
NAN_BOXED(2130918223,32,FLEN)
NAN_BOXED(4091015,32,FLEN)
NAN_BOXED(587203071,32,FLEN)
NAN_BOXED(2130918223,32,FLEN)
NAN_BOXED(4091015,32,FLEN)
NAN_BOXED(587203583,32,FLEN)
NAN_BOXED(2130918223,32,FLEN)
NAN_BOXED(4091015,32,FLEN)
NAN_BOXED(587204607,32,FLEN)
NAN_BOXED(2130918223,32,FLEN)
NAN_BOXED(4091015,32,FLEN)
NAN_BOXED(587206655,32,FLEN)
NAN_BOXED(2130918223,32,FLEN)
NAN_BOXED(4091015,32,FLEN)
NAN_BOXED(587210751,32,FLEN)
NAN_BOXED(2130918223,32,FLEN)
NAN_BOXED(4091015,32,FLEN)
NAN_BOXED(587218943,32,FLEN)
NAN_BOXED(2130918223,32,FLEN)
NAN_BOXED(4091015,32,FLEN)
NAN_BOXED(587235327,32,FLEN)
NAN_BOXED(2130918223,32,FLEN)
NAN_BOXED(4091015,32,FLEN)
NAN_BOXED(587268095,32,FLEN)
NAN_BOXED(2130918223,32,FLEN)
NAN_BOXED(4091015,32,FLEN)
NAN_BOXED(587333631,32,FLEN)
NAN_BOXED(2130918223,32,FLEN)
NAN_BOXED(4091015,32,FLEN)
NAN_BOXED(587464703,32,FLEN)
NAN_BOXED(2130918223,32,FLEN)
NAN_BOXED(4091015,32,FLEN)
NAN_BOXED(587726847,32,FLEN)
NAN_BOXED(2130918223,32,FLEN)
NAN_BOXED(4091015,32,FLEN)
NAN_BOXED(588251135,32,FLEN)
NAN_BOXED(2130918223,32,FLEN)
NAN_BOXED(4091015,32,FLEN)
NAN_BOXED(589299711,32,FLEN)
NAN_BOXED(2130918223,32,FLEN)
NAN_BOXED(4091015,32,FLEN)
NAN_BOXED(591396863,32,FLEN)
NAN_BOXED(2130918223,32,FLEN)
NAN_BOXED(4091015,32,FLEN)
NAN_BOXED(591396864,32,FLEN)
NAN_BOXED(2130918223,32,FLEN)
NAN_BOXED(4091015,32,FLEN)
NAN_BOXED(593494016,32,FLEN)
NAN_BOXED(2130918223,32,FLEN)
NAN_BOXED(4091015,32,FLEN)
NAN_BOXED(594542592,32,FLEN)
NAN_BOXED(2130918223,32,FLEN)
NAN_BOXED(4091015,32,FLEN)
NAN_BOXED(595066880,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
