
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:17:59 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_2560:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x4a3e7e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d4a3e7e; op2val:0x0;
op3val:0xf0fffff; valaddr_reg:x3; val_offset:7680*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7680*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2561:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x4a3e7e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d4a3e7e; op2val:0x0;
op3val:0xf1fffff; valaddr_reg:x3; val_offset:7683*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7683*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2562:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x4a3e7e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d4a3e7e; op2val:0x0;
op3val:0xf3fffff; valaddr_reg:x3; val_offset:7686*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7686*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2563:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x4a3e7e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d4a3e7e; op2val:0x0;
op3val:0xf400000; valaddr_reg:x3; val_offset:7689*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7689*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2564:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x4a3e7e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d4a3e7e; op2val:0x0;
op3val:0xf600000; valaddr_reg:x3; val_offset:7692*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7692*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2565:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x4a3e7e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d4a3e7e; op2val:0x0;
op3val:0xf700000; valaddr_reg:x3; val_offset:7695*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7695*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2566:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x4a3e7e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d4a3e7e; op2val:0x0;
op3val:0xf780000; valaddr_reg:x3; val_offset:7698*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7698*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2567:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x4a3e7e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d4a3e7e; op2val:0x0;
op3val:0xf7c0000; valaddr_reg:x3; val_offset:7701*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7701*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2568:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x4a3e7e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d4a3e7e; op2val:0x0;
op3val:0xf7e0000; valaddr_reg:x3; val_offset:7704*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7704*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2569:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x4a3e7e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d4a3e7e; op2val:0x0;
op3val:0xf7f0000; valaddr_reg:x3; val_offset:7707*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7707*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2570:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x4a3e7e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d4a3e7e; op2val:0x0;
op3val:0xf7f8000; valaddr_reg:x3; val_offset:7710*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7710*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2571:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x4a3e7e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d4a3e7e; op2val:0x0;
op3val:0xf7fc000; valaddr_reg:x3; val_offset:7713*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7713*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2572:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x4a3e7e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d4a3e7e; op2val:0x0;
op3val:0xf7fe000; valaddr_reg:x3; val_offset:7716*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7716*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2573:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x4a3e7e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d4a3e7e; op2val:0x0;
op3val:0xf7ff000; valaddr_reg:x3; val_offset:7719*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7719*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2574:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x4a3e7e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d4a3e7e; op2val:0x0;
op3val:0xf7ff800; valaddr_reg:x3; val_offset:7722*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7722*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2575:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x4a3e7e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d4a3e7e; op2val:0x0;
op3val:0xf7ffc00; valaddr_reg:x3; val_offset:7725*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7725*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2576:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x4a3e7e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d4a3e7e; op2val:0x0;
op3val:0xf7ffe00; valaddr_reg:x3; val_offset:7728*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7728*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2577:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x4a3e7e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d4a3e7e; op2val:0x0;
op3val:0xf7fff00; valaddr_reg:x3; val_offset:7731*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7731*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2578:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x4a3e7e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d4a3e7e; op2val:0x0;
op3val:0xf7fff80; valaddr_reg:x3; val_offset:7734*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7734*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2579:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x4a3e7e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d4a3e7e; op2val:0x0;
op3val:0xf7fffc0; valaddr_reg:x3; val_offset:7737*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7737*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2580:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x4a3e7e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d4a3e7e; op2val:0x0;
op3val:0xf7fffe0; valaddr_reg:x3; val_offset:7740*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7740*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2581:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x4a3e7e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d4a3e7e; op2val:0x0;
op3val:0xf7ffff0; valaddr_reg:x3; val_offset:7743*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7743*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2582:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x4a3e7e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d4a3e7e; op2val:0x0;
op3val:0xf7ffff8; valaddr_reg:x3; val_offset:7746*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7746*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2583:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x4a3e7e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d4a3e7e; op2val:0x0;
op3val:0xf7ffffc; valaddr_reg:x3; val_offset:7749*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7749*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2584:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x4a3e7e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d4a3e7e; op2val:0x0;
op3val:0xf7ffffe; valaddr_reg:x3; val_offset:7752*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7752*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2585:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x4a3e7e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d4a3e7e; op2val:0x0;
op3val:0xf7fffff; valaddr_reg:x3; val_offset:7755*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7755*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2586:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x4bdaf1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d4bdaf1; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:7758*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7758*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2587:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x4bdaf1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d4bdaf1; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:7761*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7761*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2588:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x4bdaf1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d4bdaf1; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:7764*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7764*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2589:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x4bdaf1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d4bdaf1; op2val:0x0;
op3val:0x199999; valaddr_reg:x3; val_offset:7767*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7767*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2590:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x4bdaf1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d4bdaf1; op2val:0x0;
op3val:0x249249; valaddr_reg:x3; val_offset:7770*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7770*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2591:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x4bdaf1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d4bdaf1; op2val:0x0;
op3val:0x333333; valaddr_reg:x3; val_offset:7773*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7773*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2592:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x4bdaf1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d4bdaf1; op2val:0x0;
op3val:0x36db6d; valaddr_reg:x3; val_offset:7776*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7776*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2593:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x4bdaf1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d4bdaf1; op2val:0x0;
op3val:0x3bbbbb; valaddr_reg:x3; val_offset:7779*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7779*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2594:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x4bdaf1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d4bdaf1; op2val:0x0;
op3val:0x444444; valaddr_reg:x3; val_offset:7782*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7782*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2595:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x4bdaf1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d4bdaf1; op2val:0x0;
op3val:0x4ccccc; valaddr_reg:x3; val_offset:7785*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7785*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2596:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x4bdaf1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d4bdaf1; op2val:0x0;
op3val:0x5b6db6; valaddr_reg:x3; val_offset:7788*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7788*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2597:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x4bdaf1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d4bdaf1; op2val:0x0;
op3val:0x666666; valaddr_reg:x3; val_offset:7791*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7791*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2598:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x4bdaf1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d4bdaf1; op2val:0x0;
op3val:0x6db6db; valaddr_reg:x3; val_offset:7794*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7794*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2599:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x4bdaf1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d4bdaf1; op2val:0x0;
op3val:0x7ffff8; valaddr_reg:x3; val_offset:7797*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7797*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2600:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x4bdaf1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d4bdaf1; op2val:0x0;
op3val:0x7ffffc; valaddr_reg:x3; val_offset:7800*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7800*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2601:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x4bdaf1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d4bdaf1; op2val:0x0;
op3val:0x7ffffe; valaddr_reg:x3; val_offset:7803*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7803*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2602:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x4bdaf1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x15 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d4bdaf1; op2val:0x0;
op3val:0xa800000; valaddr_reg:x3; val_offset:7806*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7806*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2603:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x4bdaf1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x15 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d4bdaf1; op2val:0x0;
op3val:0xa800001; valaddr_reg:x3; val_offset:7809*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7809*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2604:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x4bdaf1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x15 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d4bdaf1; op2val:0x0;
op3val:0xa800003; valaddr_reg:x3; val_offset:7812*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7812*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2605:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x4bdaf1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x15 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d4bdaf1; op2val:0x0;
op3val:0xa800007; valaddr_reg:x3; val_offset:7815*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7815*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2606:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x4bdaf1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x15 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d4bdaf1; op2val:0x0;
op3val:0xa80000f; valaddr_reg:x3; val_offset:7818*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7818*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2607:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x4bdaf1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x15 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d4bdaf1; op2val:0x0;
op3val:0xa80001f; valaddr_reg:x3; val_offset:7821*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7821*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2608:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x4bdaf1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x15 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d4bdaf1; op2val:0x0;
op3val:0xa80003f; valaddr_reg:x3; val_offset:7824*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7824*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2609:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x4bdaf1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x15 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d4bdaf1; op2val:0x0;
op3val:0xa80007f; valaddr_reg:x3; val_offset:7827*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7827*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2610:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x4bdaf1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x15 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d4bdaf1; op2val:0x0;
op3val:0xa8000ff; valaddr_reg:x3; val_offset:7830*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7830*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2611:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x4bdaf1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x15 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d4bdaf1; op2val:0x0;
op3val:0xa8001ff; valaddr_reg:x3; val_offset:7833*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7833*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2612:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x4bdaf1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x15 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d4bdaf1; op2val:0x0;
op3val:0xa8003ff; valaddr_reg:x3; val_offset:7836*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7836*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2613:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x4bdaf1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x15 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d4bdaf1; op2val:0x0;
op3val:0xa8007ff; valaddr_reg:x3; val_offset:7839*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7839*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2614:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x4bdaf1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x15 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d4bdaf1; op2val:0x0;
op3val:0xa800fff; valaddr_reg:x3; val_offset:7842*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7842*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2615:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x4bdaf1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x15 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d4bdaf1; op2val:0x0;
op3val:0xa801fff; valaddr_reg:x3; val_offset:7845*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7845*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2616:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x4bdaf1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x15 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d4bdaf1; op2val:0x0;
op3val:0xa803fff; valaddr_reg:x3; val_offset:7848*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7848*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2617:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x4bdaf1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x15 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d4bdaf1; op2val:0x0;
op3val:0xa807fff; valaddr_reg:x3; val_offset:7851*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7851*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2618:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x4bdaf1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x15 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d4bdaf1; op2val:0x0;
op3val:0xa80ffff; valaddr_reg:x3; val_offset:7854*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7854*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2619:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x4bdaf1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x15 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d4bdaf1; op2val:0x0;
op3val:0xa81ffff; valaddr_reg:x3; val_offset:7857*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7857*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2620:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x4bdaf1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x15 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d4bdaf1; op2val:0x0;
op3val:0xa83ffff; valaddr_reg:x3; val_offset:7860*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7860*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2621:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x4bdaf1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x15 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d4bdaf1; op2val:0x0;
op3val:0xa87ffff; valaddr_reg:x3; val_offset:7863*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7863*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2622:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x4bdaf1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x15 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d4bdaf1; op2val:0x0;
op3val:0xa8fffff; valaddr_reg:x3; val_offset:7866*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7866*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2623:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x4bdaf1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x15 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d4bdaf1; op2val:0x0;
op3val:0xa9fffff; valaddr_reg:x3; val_offset:7869*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7869*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2624:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x4bdaf1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x15 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d4bdaf1; op2val:0x0;
op3val:0xabfffff; valaddr_reg:x3; val_offset:7872*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7872*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2625:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x4bdaf1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x15 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d4bdaf1; op2val:0x0;
op3val:0xac00000; valaddr_reg:x3; val_offset:7875*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7875*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2626:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x4bdaf1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x15 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d4bdaf1; op2val:0x0;
op3val:0xae00000; valaddr_reg:x3; val_offset:7878*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7878*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2627:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x4bdaf1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x15 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d4bdaf1; op2val:0x0;
op3val:0xaf00000; valaddr_reg:x3; val_offset:7881*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7881*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2628:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x4bdaf1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x15 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d4bdaf1; op2val:0x0;
op3val:0xaf80000; valaddr_reg:x3; val_offset:7884*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7884*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2629:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x4bdaf1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x15 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d4bdaf1; op2val:0x0;
op3val:0xafc0000; valaddr_reg:x3; val_offset:7887*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7887*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2630:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x4bdaf1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x15 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d4bdaf1; op2val:0x0;
op3val:0xafe0000; valaddr_reg:x3; val_offset:7890*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7890*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2631:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x4bdaf1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x15 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d4bdaf1; op2val:0x0;
op3val:0xaff0000; valaddr_reg:x3; val_offset:7893*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7893*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2632:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x4bdaf1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x15 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d4bdaf1; op2val:0x0;
op3val:0xaff8000; valaddr_reg:x3; val_offset:7896*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7896*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2633:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x4bdaf1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x15 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d4bdaf1; op2val:0x0;
op3val:0xaffc000; valaddr_reg:x3; val_offset:7899*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7899*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2634:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x4bdaf1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x15 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d4bdaf1; op2val:0x0;
op3val:0xaffe000; valaddr_reg:x3; val_offset:7902*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7902*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2635:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x4bdaf1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x15 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d4bdaf1; op2val:0x0;
op3val:0xafff000; valaddr_reg:x3; val_offset:7905*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7905*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2636:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x4bdaf1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x15 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d4bdaf1; op2val:0x0;
op3val:0xafff800; valaddr_reg:x3; val_offset:7908*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7908*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2637:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x4bdaf1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x15 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d4bdaf1; op2val:0x0;
op3val:0xafffc00; valaddr_reg:x3; val_offset:7911*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7911*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2638:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x4bdaf1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x15 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d4bdaf1; op2val:0x0;
op3val:0xafffe00; valaddr_reg:x3; val_offset:7914*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7914*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2639:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x4bdaf1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x15 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d4bdaf1; op2val:0x0;
op3val:0xaffff00; valaddr_reg:x3; val_offset:7917*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7917*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2640:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x4bdaf1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x15 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d4bdaf1; op2val:0x0;
op3val:0xaffff80; valaddr_reg:x3; val_offset:7920*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7920*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2641:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x4bdaf1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x15 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d4bdaf1; op2val:0x0;
op3val:0xaffffc0; valaddr_reg:x3; val_offset:7923*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7923*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2642:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x4bdaf1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x15 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d4bdaf1; op2val:0x0;
op3val:0xaffffe0; valaddr_reg:x3; val_offset:7926*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7926*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2643:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x4bdaf1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x15 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d4bdaf1; op2val:0x0;
op3val:0xafffff0; valaddr_reg:x3; val_offset:7929*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7929*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2644:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x4bdaf1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x15 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d4bdaf1; op2val:0x0;
op3val:0xafffff8; valaddr_reg:x3; val_offset:7932*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7932*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2645:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x4bdaf1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x15 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d4bdaf1; op2val:0x0;
op3val:0xafffffc; valaddr_reg:x3; val_offset:7935*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7935*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2646:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x4bdaf1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x15 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d4bdaf1; op2val:0x0;
op3val:0xafffffe; valaddr_reg:x3; val_offset:7938*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7938*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2647:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x4bdaf1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x15 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d4bdaf1; op2val:0x0;
op3val:0xaffffff; valaddr_reg:x3; val_offset:7941*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7941*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2648:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x543ad9 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x1a660c and fs3 == 0 and fe3 == 0x3e and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d543ad9; op2val:0x19a660c;
op3val:0x1f000000; valaddr_reg:x3; val_offset:7944*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7944*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2649:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x543ad9 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x1a660c and fs3 == 0 and fe3 == 0x3e and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d543ad9; op2val:0x19a660c;
op3val:0x1f000001; valaddr_reg:x3; val_offset:7947*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7947*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2650:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x543ad9 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x1a660c and fs3 == 0 and fe3 == 0x3e and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d543ad9; op2val:0x19a660c;
op3val:0x1f000003; valaddr_reg:x3; val_offset:7950*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7950*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2651:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x543ad9 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x1a660c and fs3 == 0 and fe3 == 0x3e and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d543ad9; op2val:0x19a660c;
op3val:0x1f000007; valaddr_reg:x3; val_offset:7953*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7953*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2652:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x543ad9 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x1a660c and fs3 == 0 and fe3 == 0x3e and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d543ad9; op2val:0x19a660c;
op3val:0x1f00000f; valaddr_reg:x3; val_offset:7956*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7956*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2653:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x543ad9 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x1a660c and fs3 == 0 and fe3 == 0x3e and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d543ad9; op2val:0x19a660c;
op3val:0x1f00001f; valaddr_reg:x3; val_offset:7959*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7959*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2654:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x543ad9 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x1a660c and fs3 == 0 and fe3 == 0x3e and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d543ad9; op2val:0x19a660c;
op3val:0x1f00003f; valaddr_reg:x3; val_offset:7962*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7962*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2655:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x543ad9 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x1a660c and fs3 == 0 and fe3 == 0x3e and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d543ad9; op2val:0x19a660c;
op3val:0x1f00007f; valaddr_reg:x3; val_offset:7965*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7965*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2656:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x543ad9 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x1a660c and fs3 == 0 and fe3 == 0x3e and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d543ad9; op2val:0x19a660c;
op3val:0x1f0000ff; valaddr_reg:x3; val_offset:7968*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7968*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2657:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x543ad9 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x1a660c and fs3 == 0 and fe3 == 0x3e and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d543ad9; op2val:0x19a660c;
op3val:0x1f0001ff; valaddr_reg:x3; val_offset:7971*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7971*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2658:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x543ad9 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x1a660c and fs3 == 0 and fe3 == 0x3e and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d543ad9; op2val:0x19a660c;
op3val:0x1f0003ff; valaddr_reg:x3; val_offset:7974*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7974*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2659:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x543ad9 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x1a660c and fs3 == 0 and fe3 == 0x3e and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d543ad9; op2val:0x19a660c;
op3val:0x1f0007ff; valaddr_reg:x3; val_offset:7977*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7977*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2660:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x543ad9 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x1a660c and fs3 == 0 and fe3 == 0x3e and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d543ad9; op2val:0x19a660c;
op3val:0x1f000fff; valaddr_reg:x3; val_offset:7980*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7980*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2661:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x543ad9 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x1a660c and fs3 == 0 and fe3 == 0x3e and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d543ad9; op2val:0x19a660c;
op3val:0x1f001fff; valaddr_reg:x3; val_offset:7983*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7983*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2662:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x543ad9 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x1a660c and fs3 == 0 and fe3 == 0x3e and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d543ad9; op2val:0x19a660c;
op3val:0x1f003fff; valaddr_reg:x3; val_offset:7986*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7986*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2663:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x543ad9 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x1a660c and fs3 == 0 and fe3 == 0x3e and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d543ad9; op2val:0x19a660c;
op3val:0x1f007fff; valaddr_reg:x3; val_offset:7989*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7989*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2664:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x543ad9 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x1a660c and fs3 == 0 and fe3 == 0x3e and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d543ad9; op2val:0x19a660c;
op3val:0x1f00ffff; valaddr_reg:x3; val_offset:7992*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7992*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2665:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x543ad9 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x1a660c and fs3 == 0 and fe3 == 0x3e and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d543ad9; op2val:0x19a660c;
op3val:0x1f01ffff; valaddr_reg:x3; val_offset:7995*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7995*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2666:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x543ad9 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x1a660c and fs3 == 0 and fe3 == 0x3e and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d543ad9; op2val:0x19a660c;
op3val:0x1f03ffff; valaddr_reg:x3; val_offset:7998*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7998*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2667:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x543ad9 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x1a660c and fs3 == 0 and fe3 == 0x3e and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d543ad9; op2val:0x19a660c;
op3val:0x1f07ffff; valaddr_reg:x3; val_offset:8001*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8001*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2668:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x543ad9 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x1a660c and fs3 == 0 and fe3 == 0x3e and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d543ad9; op2val:0x19a660c;
op3val:0x1f0fffff; valaddr_reg:x3; val_offset:8004*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8004*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2669:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x543ad9 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x1a660c and fs3 == 0 and fe3 == 0x3e and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d543ad9; op2val:0x19a660c;
op3val:0x1f1fffff; valaddr_reg:x3; val_offset:8007*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8007*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2670:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x543ad9 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x1a660c and fs3 == 0 and fe3 == 0x3e and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d543ad9; op2val:0x19a660c;
op3val:0x1f3fffff; valaddr_reg:x3; val_offset:8010*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8010*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2671:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x543ad9 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x1a660c and fs3 == 0 and fe3 == 0x3e and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d543ad9; op2val:0x19a660c;
op3val:0x1f400000; valaddr_reg:x3; val_offset:8013*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8013*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2672:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x543ad9 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x1a660c and fs3 == 0 and fe3 == 0x3e and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d543ad9; op2val:0x19a660c;
op3val:0x1f600000; valaddr_reg:x3; val_offset:8016*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8016*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2673:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x543ad9 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x1a660c and fs3 == 0 and fe3 == 0x3e and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d543ad9; op2val:0x19a660c;
op3val:0x1f700000; valaddr_reg:x3; val_offset:8019*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8019*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2674:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x543ad9 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x1a660c and fs3 == 0 and fe3 == 0x3e and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d543ad9; op2val:0x19a660c;
op3val:0x1f780000; valaddr_reg:x3; val_offset:8022*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8022*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2675:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x543ad9 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x1a660c and fs3 == 0 and fe3 == 0x3e and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d543ad9; op2val:0x19a660c;
op3val:0x1f7c0000; valaddr_reg:x3; val_offset:8025*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8025*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2676:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x543ad9 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x1a660c and fs3 == 0 and fe3 == 0x3e and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d543ad9; op2val:0x19a660c;
op3val:0x1f7e0000; valaddr_reg:x3; val_offset:8028*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8028*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2677:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x543ad9 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x1a660c and fs3 == 0 and fe3 == 0x3e and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d543ad9; op2val:0x19a660c;
op3val:0x1f7f0000; valaddr_reg:x3; val_offset:8031*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8031*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2678:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x543ad9 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x1a660c and fs3 == 0 and fe3 == 0x3e and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d543ad9; op2val:0x19a660c;
op3val:0x1f7f8000; valaddr_reg:x3; val_offset:8034*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8034*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2679:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x543ad9 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x1a660c and fs3 == 0 and fe3 == 0x3e and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d543ad9; op2val:0x19a660c;
op3val:0x1f7fc000; valaddr_reg:x3; val_offset:8037*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8037*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2680:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x543ad9 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x1a660c and fs3 == 0 and fe3 == 0x3e and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d543ad9; op2val:0x19a660c;
op3val:0x1f7fe000; valaddr_reg:x3; val_offset:8040*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8040*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2681:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x543ad9 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x1a660c and fs3 == 0 and fe3 == 0x3e and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d543ad9; op2val:0x19a660c;
op3val:0x1f7ff000; valaddr_reg:x3; val_offset:8043*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8043*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2682:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x543ad9 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x1a660c and fs3 == 0 and fe3 == 0x3e and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d543ad9; op2val:0x19a660c;
op3val:0x1f7ff800; valaddr_reg:x3; val_offset:8046*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8046*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2683:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x543ad9 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x1a660c and fs3 == 0 and fe3 == 0x3e and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d543ad9; op2val:0x19a660c;
op3val:0x1f7ffc00; valaddr_reg:x3; val_offset:8049*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8049*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2684:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x543ad9 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x1a660c and fs3 == 0 and fe3 == 0x3e and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d543ad9; op2val:0x19a660c;
op3val:0x1f7ffe00; valaddr_reg:x3; val_offset:8052*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8052*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2685:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x543ad9 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x1a660c and fs3 == 0 and fe3 == 0x3e and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d543ad9; op2val:0x19a660c;
op3val:0x1f7fff00; valaddr_reg:x3; val_offset:8055*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8055*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2686:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x543ad9 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x1a660c and fs3 == 0 and fe3 == 0x3e and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d543ad9; op2val:0x19a660c;
op3val:0x1f7fff80; valaddr_reg:x3; val_offset:8058*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8058*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2687:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x543ad9 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x1a660c and fs3 == 0 and fe3 == 0x3e and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d543ad9; op2val:0x19a660c;
op3val:0x1f7fffc0; valaddr_reg:x3; val_offset:8061*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8061*0 + 3*20*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2102017662,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(252706815,32,FLEN)
NAN_BOXED(2102017662,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(253755391,32,FLEN)
NAN_BOXED(2102017662,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(255852543,32,FLEN)
NAN_BOXED(2102017662,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(255852544,32,FLEN)
NAN_BOXED(2102017662,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(257949696,32,FLEN)
NAN_BOXED(2102017662,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(258998272,32,FLEN)
NAN_BOXED(2102017662,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(259522560,32,FLEN)
NAN_BOXED(2102017662,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(259784704,32,FLEN)
NAN_BOXED(2102017662,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(259915776,32,FLEN)
NAN_BOXED(2102017662,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(259981312,32,FLEN)
NAN_BOXED(2102017662,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260014080,32,FLEN)
NAN_BOXED(2102017662,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260030464,32,FLEN)
NAN_BOXED(2102017662,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260038656,32,FLEN)
NAN_BOXED(2102017662,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260042752,32,FLEN)
NAN_BOXED(2102017662,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260044800,32,FLEN)
NAN_BOXED(2102017662,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260045824,32,FLEN)
NAN_BOXED(2102017662,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260046336,32,FLEN)
NAN_BOXED(2102017662,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260046592,32,FLEN)
NAN_BOXED(2102017662,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260046720,32,FLEN)
NAN_BOXED(2102017662,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260046784,32,FLEN)
NAN_BOXED(2102017662,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260046816,32,FLEN)
NAN_BOXED(2102017662,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260046832,32,FLEN)
NAN_BOXED(2102017662,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260046840,32,FLEN)
NAN_BOXED(2102017662,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260046844,32,FLEN)
NAN_BOXED(2102017662,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260046846,32,FLEN)
NAN_BOXED(2102017662,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260046847,32,FLEN)
NAN_BOXED(2102123249,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2102123249,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3,32,FLEN)
NAN_BOXED(2102123249,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7,32,FLEN)
NAN_BOXED(2102123249,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1677721,32,FLEN)
NAN_BOXED(2102123249,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2396745,32,FLEN)
NAN_BOXED(2102123249,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3355443,32,FLEN)
NAN_BOXED(2102123249,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3595117,32,FLEN)
NAN_BOXED(2102123249,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3914683,32,FLEN)
NAN_BOXED(2102123249,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4473924,32,FLEN)
NAN_BOXED(2102123249,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5033164,32,FLEN)
NAN_BOXED(2102123249,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5991862,32,FLEN)
NAN_BOXED(2102123249,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(6710886,32,FLEN)
NAN_BOXED(2102123249,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7190235,32,FLEN)
NAN_BOXED(2102123249,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388600,32,FLEN)
NAN_BOXED(2102123249,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388604,32,FLEN)
NAN_BOXED(2102123249,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388606,32,FLEN)
NAN_BOXED(2102123249,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(176160768,32,FLEN)
NAN_BOXED(2102123249,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(176160769,32,FLEN)
NAN_BOXED(2102123249,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(176160771,32,FLEN)
NAN_BOXED(2102123249,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(176160775,32,FLEN)
NAN_BOXED(2102123249,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(176160783,32,FLEN)
NAN_BOXED(2102123249,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(176160799,32,FLEN)
NAN_BOXED(2102123249,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(176160831,32,FLEN)
NAN_BOXED(2102123249,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(176160895,32,FLEN)
NAN_BOXED(2102123249,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(176161023,32,FLEN)
NAN_BOXED(2102123249,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(176161279,32,FLEN)
NAN_BOXED(2102123249,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(176161791,32,FLEN)
NAN_BOXED(2102123249,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(176162815,32,FLEN)
NAN_BOXED(2102123249,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(176164863,32,FLEN)
NAN_BOXED(2102123249,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(176168959,32,FLEN)
NAN_BOXED(2102123249,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(176177151,32,FLEN)
NAN_BOXED(2102123249,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(176193535,32,FLEN)
NAN_BOXED(2102123249,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(176226303,32,FLEN)
NAN_BOXED(2102123249,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(176291839,32,FLEN)
NAN_BOXED(2102123249,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(176422911,32,FLEN)
NAN_BOXED(2102123249,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(176685055,32,FLEN)
NAN_BOXED(2102123249,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(177209343,32,FLEN)
NAN_BOXED(2102123249,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(178257919,32,FLEN)
NAN_BOXED(2102123249,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(180355071,32,FLEN)
NAN_BOXED(2102123249,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(180355072,32,FLEN)
NAN_BOXED(2102123249,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(182452224,32,FLEN)
NAN_BOXED(2102123249,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(183500800,32,FLEN)
NAN_BOXED(2102123249,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(184025088,32,FLEN)
NAN_BOXED(2102123249,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(184287232,32,FLEN)
NAN_BOXED(2102123249,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(184418304,32,FLEN)
NAN_BOXED(2102123249,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(184483840,32,FLEN)
NAN_BOXED(2102123249,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(184516608,32,FLEN)
NAN_BOXED(2102123249,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(184532992,32,FLEN)
NAN_BOXED(2102123249,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(184541184,32,FLEN)
NAN_BOXED(2102123249,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(184545280,32,FLEN)
NAN_BOXED(2102123249,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(184547328,32,FLEN)
NAN_BOXED(2102123249,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(184548352,32,FLEN)
NAN_BOXED(2102123249,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(184548864,32,FLEN)
NAN_BOXED(2102123249,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(184549120,32,FLEN)
NAN_BOXED(2102123249,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(184549248,32,FLEN)
NAN_BOXED(2102123249,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(184549312,32,FLEN)
NAN_BOXED(2102123249,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(184549344,32,FLEN)
NAN_BOXED(2102123249,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(184549360,32,FLEN)
NAN_BOXED(2102123249,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(184549368,32,FLEN)
NAN_BOXED(2102123249,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(184549372,32,FLEN)
NAN_BOXED(2102123249,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(184549374,32,FLEN)
NAN_BOXED(2102123249,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(184549375,32,FLEN)
NAN_BOXED(2102672089,32,FLEN)
NAN_BOXED(26895884,32,FLEN)
NAN_BOXED(520093696,32,FLEN)
NAN_BOXED(2102672089,32,FLEN)
NAN_BOXED(26895884,32,FLEN)
NAN_BOXED(520093697,32,FLEN)
NAN_BOXED(2102672089,32,FLEN)
NAN_BOXED(26895884,32,FLEN)
NAN_BOXED(520093699,32,FLEN)
NAN_BOXED(2102672089,32,FLEN)
NAN_BOXED(26895884,32,FLEN)
NAN_BOXED(520093703,32,FLEN)
NAN_BOXED(2102672089,32,FLEN)
NAN_BOXED(26895884,32,FLEN)
NAN_BOXED(520093711,32,FLEN)
NAN_BOXED(2102672089,32,FLEN)
NAN_BOXED(26895884,32,FLEN)
NAN_BOXED(520093727,32,FLEN)
NAN_BOXED(2102672089,32,FLEN)
NAN_BOXED(26895884,32,FLEN)
NAN_BOXED(520093759,32,FLEN)
NAN_BOXED(2102672089,32,FLEN)
NAN_BOXED(26895884,32,FLEN)
NAN_BOXED(520093823,32,FLEN)
NAN_BOXED(2102672089,32,FLEN)
NAN_BOXED(26895884,32,FLEN)
NAN_BOXED(520093951,32,FLEN)
NAN_BOXED(2102672089,32,FLEN)
NAN_BOXED(26895884,32,FLEN)
NAN_BOXED(520094207,32,FLEN)
NAN_BOXED(2102672089,32,FLEN)
NAN_BOXED(26895884,32,FLEN)
NAN_BOXED(520094719,32,FLEN)
NAN_BOXED(2102672089,32,FLEN)
NAN_BOXED(26895884,32,FLEN)
NAN_BOXED(520095743,32,FLEN)
NAN_BOXED(2102672089,32,FLEN)
NAN_BOXED(26895884,32,FLEN)
NAN_BOXED(520097791,32,FLEN)
NAN_BOXED(2102672089,32,FLEN)
NAN_BOXED(26895884,32,FLEN)
NAN_BOXED(520101887,32,FLEN)
NAN_BOXED(2102672089,32,FLEN)
NAN_BOXED(26895884,32,FLEN)
NAN_BOXED(520110079,32,FLEN)
NAN_BOXED(2102672089,32,FLEN)
NAN_BOXED(26895884,32,FLEN)
NAN_BOXED(520126463,32,FLEN)
NAN_BOXED(2102672089,32,FLEN)
NAN_BOXED(26895884,32,FLEN)
NAN_BOXED(520159231,32,FLEN)
NAN_BOXED(2102672089,32,FLEN)
NAN_BOXED(26895884,32,FLEN)
NAN_BOXED(520224767,32,FLEN)
NAN_BOXED(2102672089,32,FLEN)
NAN_BOXED(26895884,32,FLEN)
NAN_BOXED(520355839,32,FLEN)
NAN_BOXED(2102672089,32,FLEN)
NAN_BOXED(26895884,32,FLEN)
NAN_BOXED(520617983,32,FLEN)
NAN_BOXED(2102672089,32,FLEN)
NAN_BOXED(26895884,32,FLEN)
NAN_BOXED(521142271,32,FLEN)
NAN_BOXED(2102672089,32,FLEN)
NAN_BOXED(26895884,32,FLEN)
NAN_BOXED(522190847,32,FLEN)
NAN_BOXED(2102672089,32,FLEN)
NAN_BOXED(26895884,32,FLEN)
NAN_BOXED(524287999,32,FLEN)
NAN_BOXED(2102672089,32,FLEN)
NAN_BOXED(26895884,32,FLEN)
NAN_BOXED(524288000,32,FLEN)
NAN_BOXED(2102672089,32,FLEN)
NAN_BOXED(26895884,32,FLEN)
NAN_BOXED(526385152,32,FLEN)
NAN_BOXED(2102672089,32,FLEN)
NAN_BOXED(26895884,32,FLEN)
NAN_BOXED(527433728,32,FLEN)
NAN_BOXED(2102672089,32,FLEN)
NAN_BOXED(26895884,32,FLEN)
NAN_BOXED(527958016,32,FLEN)
NAN_BOXED(2102672089,32,FLEN)
NAN_BOXED(26895884,32,FLEN)
NAN_BOXED(528220160,32,FLEN)
NAN_BOXED(2102672089,32,FLEN)
NAN_BOXED(26895884,32,FLEN)
NAN_BOXED(528351232,32,FLEN)
NAN_BOXED(2102672089,32,FLEN)
NAN_BOXED(26895884,32,FLEN)
NAN_BOXED(528416768,32,FLEN)
NAN_BOXED(2102672089,32,FLEN)
NAN_BOXED(26895884,32,FLEN)
NAN_BOXED(528449536,32,FLEN)
NAN_BOXED(2102672089,32,FLEN)
NAN_BOXED(26895884,32,FLEN)
NAN_BOXED(528465920,32,FLEN)
NAN_BOXED(2102672089,32,FLEN)
NAN_BOXED(26895884,32,FLEN)
NAN_BOXED(528474112,32,FLEN)
NAN_BOXED(2102672089,32,FLEN)
NAN_BOXED(26895884,32,FLEN)
NAN_BOXED(528478208,32,FLEN)
NAN_BOXED(2102672089,32,FLEN)
NAN_BOXED(26895884,32,FLEN)
NAN_BOXED(528480256,32,FLEN)
NAN_BOXED(2102672089,32,FLEN)
NAN_BOXED(26895884,32,FLEN)
NAN_BOXED(528481280,32,FLEN)
NAN_BOXED(2102672089,32,FLEN)
NAN_BOXED(26895884,32,FLEN)
NAN_BOXED(528481792,32,FLEN)
NAN_BOXED(2102672089,32,FLEN)
NAN_BOXED(26895884,32,FLEN)
NAN_BOXED(528482048,32,FLEN)
NAN_BOXED(2102672089,32,FLEN)
NAN_BOXED(26895884,32,FLEN)
NAN_BOXED(528482176,32,FLEN)
NAN_BOXED(2102672089,32,FLEN)
NAN_BOXED(26895884,32,FLEN)
NAN_BOXED(528482240,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
