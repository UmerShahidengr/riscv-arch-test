
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:17:59 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_26752:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04a351 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3dc319 and fs3 == 0 and fe3 == 0x9c and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04a351; op2val:0x3dc319;
op3val:0x4e07ffff; valaddr_reg:x3; val_offset:80256*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80256*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26753:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04a351 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3dc319 and fs3 == 0 and fe3 == 0x9c and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04a351; op2val:0x3dc319;
op3val:0x4e0fffff; valaddr_reg:x3; val_offset:80259*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80259*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26754:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04a351 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3dc319 and fs3 == 0 and fe3 == 0x9c and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04a351; op2val:0x3dc319;
op3val:0x4e1fffff; valaddr_reg:x3; val_offset:80262*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80262*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26755:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04a351 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3dc319 and fs3 == 0 and fe3 == 0x9c and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04a351; op2val:0x3dc319;
op3val:0x4e3fffff; valaddr_reg:x3; val_offset:80265*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80265*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26756:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04a351 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3dc319 and fs3 == 0 and fe3 == 0x9c and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04a351; op2val:0x3dc319;
op3val:0x4e400000; valaddr_reg:x3; val_offset:80268*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80268*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26757:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04a351 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3dc319 and fs3 == 0 and fe3 == 0x9c and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04a351; op2val:0x3dc319;
op3val:0x4e600000; valaddr_reg:x3; val_offset:80271*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80271*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26758:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04a351 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3dc319 and fs3 == 0 and fe3 == 0x9c and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04a351; op2val:0x3dc319;
op3val:0x4e700000; valaddr_reg:x3; val_offset:80274*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80274*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26759:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04a351 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3dc319 and fs3 == 0 and fe3 == 0x9c and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04a351; op2val:0x3dc319;
op3val:0x4e780000; valaddr_reg:x3; val_offset:80277*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80277*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26760:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04a351 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3dc319 and fs3 == 0 and fe3 == 0x9c and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04a351; op2val:0x3dc319;
op3val:0x4e7c0000; valaddr_reg:x3; val_offset:80280*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80280*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26761:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04a351 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3dc319 and fs3 == 0 and fe3 == 0x9c and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04a351; op2val:0x3dc319;
op3val:0x4e7e0000; valaddr_reg:x3; val_offset:80283*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80283*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26762:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04a351 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3dc319 and fs3 == 0 and fe3 == 0x9c and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04a351; op2val:0x3dc319;
op3val:0x4e7f0000; valaddr_reg:x3; val_offset:80286*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80286*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26763:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04a351 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3dc319 and fs3 == 0 and fe3 == 0x9c and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04a351; op2val:0x3dc319;
op3val:0x4e7f8000; valaddr_reg:x3; val_offset:80289*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80289*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26764:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04a351 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3dc319 and fs3 == 0 and fe3 == 0x9c and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04a351; op2val:0x3dc319;
op3val:0x4e7fc000; valaddr_reg:x3; val_offset:80292*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80292*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26765:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04a351 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3dc319 and fs3 == 0 and fe3 == 0x9c and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04a351; op2val:0x3dc319;
op3val:0x4e7fe000; valaddr_reg:x3; val_offset:80295*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80295*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26766:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04a351 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3dc319 and fs3 == 0 and fe3 == 0x9c and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04a351; op2val:0x3dc319;
op3val:0x4e7ff000; valaddr_reg:x3; val_offset:80298*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80298*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26767:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04a351 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3dc319 and fs3 == 0 and fe3 == 0x9c and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04a351; op2val:0x3dc319;
op3val:0x4e7ff800; valaddr_reg:x3; val_offset:80301*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80301*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26768:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04a351 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3dc319 and fs3 == 0 and fe3 == 0x9c and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04a351; op2val:0x3dc319;
op3val:0x4e7ffc00; valaddr_reg:x3; val_offset:80304*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80304*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26769:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04a351 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3dc319 and fs3 == 0 and fe3 == 0x9c and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04a351; op2val:0x3dc319;
op3val:0x4e7ffe00; valaddr_reg:x3; val_offset:80307*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80307*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26770:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04a351 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3dc319 and fs3 == 0 and fe3 == 0x9c and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04a351; op2val:0x3dc319;
op3val:0x4e7fff00; valaddr_reg:x3; val_offset:80310*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80310*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26771:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04a351 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3dc319 and fs3 == 0 and fe3 == 0x9c and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04a351; op2val:0x3dc319;
op3val:0x4e7fff80; valaddr_reg:x3; val_offset:80313*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80313*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26772:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04a351 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3dc319 and fs3 == 0 and fe3 == 0x9c and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04a351; op2val:0x3dc319;
op3val:0x4e7fffc0; valaddr_reg:x3; val_offset:80316*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80316*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26773:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04a351 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3dc319 and fs3 == 0 and fe3 == 0x9c and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04a351; op2val:0x3dc319;
op3val:0x4e7fffe0; valaddr_reg:x3; val_offset:80319*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80319*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26774:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04a351 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3dc319 and fs3 == 0 and fe3 == 0x9c and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04a351; op2val:0x3dc319;
op3val:0x4e7ffff0; valaddr_reg:x3; val_offset:80322*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80322*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26775:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04a351 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3dc319 and fs3 == 0 and fe3 == 0x9c and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04a351; op2val:0x3dc319;
op3val:0x4e7ffff8; valaddr_reg:x3; val_offset:80325*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80325*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26776:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04a351 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3dc319 and fs3 == 0 and fe3 == 0x9c and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04a351; op2val:0x3dc319;
op3val:0x4e7ffffc; valaddr_reg:x3; val_offset:80328*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80328*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26777:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04a351 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3dc319 and fs3 == 0 and fe3 == 0x9c and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04a351; op2val:0x3dc319;
op3val:0x4e7ffffe; valaddr_reg:x3; val_offset:80331*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80331*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26778:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04a351 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3dc319 and fs3 == 0 and fe3 == 0x9c and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04a351; op2val:0x3dc319;
op3val:0x4e7fffff; valaddr_reg:x3; val_offset:80334*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80334*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26779:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04d221 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x76b552 and fs3 == 0 and fe3 == 0xc5 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04d221; op2val:0x3ff6b552;
op3val:0x62800000; valaddr_reg:x3; val_offset:80337*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80337*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26780:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04d221 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x76b552 and fs3 == 0 and fe3 == 0xc5 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04d221; op2val:0x3ff6b552;
op3val:0x62800001; valaddr_reg:x3; val_offset:80340*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80340*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26781:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04d221 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x76b552 and fs3 == 0 and fe3 == 0xc5 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04d221; op2val:0x3ff6b552;
op3val:0x62800003; valaddr_reg:x3; val_offset:80343*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80343*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26782:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04d221 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x76b552 and fs3 == 0 and fe3 == 0xc5 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04d221; op2val:0x3ff6b552;
op3val:0x62800007; valaddr_reg:x3; val_offset:80346*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80346*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26783:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04d221 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x76b552 and fs3 == 0 and fe3 == 0xc5 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04d221; op2val:0x3ff6b552;
op3val:0x6280000f; valaddr_reg:x3; val_offset:80349*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80349*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26784:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04d221 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x76b552 and fs3 == 0 and fe3 == 0xc5 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04d221; op2val:0x3ff6b552;
op3val:0x6280001f; valaddr_reg:x3; val_offset:80352*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80352*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26785:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04d221 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x76b552 and fs3 == 0 and fe3 == 0xc5 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04d221; op2val:0x3ff6b552;
op3val:0x6280003f; valaddr_reg:x3; val_offset:80355*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80355*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26786:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04d221 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x76b552 and fs3 == 0 and fe3 == 0xc5 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04d221; op2val:0x3ff6b552;
op3val:0x6280007f; valaddr_reg:x3; val_offset:80358*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80358*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26787:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04d221 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x76b552 and fs3 == 0 and fe3 == 0xc5 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04d221; op2val:0x3ff6b552;
op3val:0x628000ff; valaddr_reg:x3; val_offset:80361*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80361*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26788:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04d221 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x76b552 and fs3 == 0 and fe3 == 0xc5 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04d221; op2val:0x3ff6b552;
op3val:0x628001ff; valaddr_reg:x3; val_offset:80364*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80364*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26789:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04d221 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x76b552 and fs3 == 0 and fe3 == 0xc5 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04d221; op2val:0x3ff6b552;
op3val:0x628003ff; valaddr_reg:x3; val_offset:80367*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80367*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26790:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04d221 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x76b552 and fs3 == 0 and fe3 == 0xc5 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04d221; op2val:0x3ff6b552;
op3val:0x628007ff; valaddr_reg:x3; val_offset:80370*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80370*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26791:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04d221 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x76b552 and fs3 == 0 and fe3 == 0xc5 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04d221; op2val:0x3ff6b552;
op3val:0x62800fff; valaddr_reg:x3; val_offset:80373*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80373*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26792:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04d221 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x76b552 and fs3 == 0 and fe3 == 0xc5 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04d221; op2val:0x3ff6b552;
op3val:0x62801fff; valaddr_reg:x3; val_offset:80376*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80376*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26793:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04d221 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x76b552 and fs3 == 0 and fe3 == 0xc5 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04d221; op2val:0x3ff6b552;
op3val:0x62803fff; valaddr_reg:x3; val_offset:80379*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80379*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26794:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04d221 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x76b552 and fs3 == 0 and fe3 == 0xc5 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04d221; op2val:0x3ff6b552;
op3val:0x62807fff; valaddr_reg:x3; val_offset:80382*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80382*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26795:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04d221 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x76b552 and fs3 == 0 and fe3 == 0xc5 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04d221; op2val:0x3ff6b552;
op3val:0x6280ffff; valaddr_reg:x3; val_offset:80385*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80385*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26796:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04d221 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x76b552 and fs3 == 0 and fe3 == 0xc5 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04d221; op2val:0x3ff6b552;
op3val:0x6281ffff; valaddr_reg:x3; val_offset:80388*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80388*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26797:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04d221 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x76b552 and fs3 == 0 and fe3 == 0xc5 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04d221; op2val:0x3ff6b552;
op3val:0x6283ffff; valaddr_reg:x3; val_offset:80391*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80391*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26798:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04d221 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x76b552 and fs3 == 0 and fe3 == 0xc5 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04d221; op2val:0x3ff6b552;
op3val:0x6287ffff; valaddr_reg:x3; val_offset:80394*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80394*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26799:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04d221 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x76b552 and fs3 == 0 and fe3 == 0xc5 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04d221; op2val:0x3ff6b552;
op3val:0x628fffff; valaddr_reg:x3; val_offset:80397*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80397*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26800:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04d221 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x76b552 and fs3 == 0 and fe3 == 0xc5 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04d221; op2val:0x3ff6b552;
op3val:0x629fffff; valaddr_reg:x3; val_offset:80400*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80400*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26801:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04d221 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x76b552 and fs3 == 0 and fe3 == 0xc5 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04d221; op2val:0x3ff6b552;
op3val:0x62bfffff; valaddr_reg:x3; val_offset:80403*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80403*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26802:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04d221 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x76b552 and fs3 == 0 and fe3 == 0xc5 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04d221; op2val:0x3ff6b552;
op3val:0x62c00000; valaddr_reg:x3; val_offset:80406*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80406*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26803:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04d221 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x76b552 and fs3 == 0 and fe3 == 0xc5 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04d221; op2val:0x3ff6b552;
op3val:0x62e00000; valaddr_reg:x3; val_offset:80409*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80409*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26804:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04d221 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x76b552 and fs3 == 0 and fe3 == 0xc5 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04d221; op2val:0x3ff6b552;
op3val:0x62f00000; valaddr_reg:x3; val_offset:80412*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80412*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26805:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04d221 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x76b552 and fs3 == 0 and fe3 == 0xc5 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04d221; op2val:0x3ff6b552;
op3val:0x62f80000; valaddr_reg:x3; val_offset:80415*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80415*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26806:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04d221 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x76b552 and fs3 == 0 and fe3 == 0xc5 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04d221; op2val:0x3ff6b552;
op3val:0x62fc0000; valaddr_reg:x3; val_offset:80418*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80418*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26807:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04d221 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x76b552 and fs3 == 0 and fe3 == 0xc5 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04d221; op2val:0x3ff6b552;
op3val:0x62fe0000; valaddr_reg:x3; val_offset:80421*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80421*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26808:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04d221 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x76b552 and fs3 == 0 and fe3 == 0xc5 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04d221; op2val:0x3ff6b552;
op3val:0x62ff0000; valaddr_reg:x3; val_offset:80424*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80424*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26809:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04d221 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x76b552 and fs3 == 0 and fe3 == 0xc5 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04d221; op2val:0x3ff6b552;
op3val:0x62ff8000; valaddr_reg:x3; val_offset:80427*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80427*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26810:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04d221 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x76b552 and fs3 == 0 and fe3 == 0xc5 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04d221; op2val:0x3ff6b552;
op3val:0x62ffc000; valaddr_reg:x3; val_offset:80430*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80430*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26811:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04d221 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x76b552 and fs3 == 0 and fe3 == 0xc5 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04d221; op2val:0x3ff6b552;
op3val:0x62ffe000; valaddr_reg:x3; val_offset:80433*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80433*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26812:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04d221 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x76b552 and fs3 == 0 and fe3 == 0xc5 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04d221; op2val:0x3ff6b552;
op3val:0x62fff000; valaddr_reg:x3; val_offset:80436*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80436*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26813:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04d221 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x76b552 and fs3 == 0 and fe3 == 0xc5 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04d221; op2val:0x3ff6b552;
op3val:0x62fff800; valaddr_reg:x3; val_offset:80439*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80439*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26814:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04d221 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x76b552 and fs3 == 0 and fe3 == 0xc5 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04d221; op2val:0x3ff6b552;
op3val:0x62fffc00; valaddr_reg:x3; val_offset:80442*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80442*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26815:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04d221 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x76b552 and fs3 == 0 and fe3 == 0xc5 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04d221; op2val:0x3ff6b552;
op3val:0x62fffe00; valaddr_reg:x3; val_offset:80445*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80445*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26816:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04d221 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x76b552 and fs3 == 0 and fe3 == 0xc5 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04d221; op2val:0x3ff6b552;
op3val:0x62ffff00; valaddr_reg:x3; val_offset:80448*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80448*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26817:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04d221 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x76b552 and fs3 == 0 and fe3 == 0xc5 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04d221; op2val:0x3ff6b552;
op3val:0x62ffff80; valaddr_reg:x3; val_offset:80451*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80451*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26818:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04d221 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x76b552 and fs3 == 0 and fe3 == 0xc5 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04d221; op2val:0x3ff6b552;
op3val:0x62ffffc0; valaddr_reg:x3; val_offset:80454*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80454*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26819:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04d221 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x76b552 and fs3 == 0 and fe3 == 0xc5 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04d221; op2val:0x3ff6b552;
op3val:0x62ffffe0; valaddr_reg:x3; val_offset:80457*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80457*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26820:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04d221 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x76b552 and fs3 == 0 and fe3 == 0xc5 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04d221; op2val:0x3ff6b552;
op3val:0x62fffff0; valaddr_reg:x3; val_offset:80460*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80460*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26821:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04d221 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x76b552 and fs3 == 0 and fe3 == 0xc5 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04d221; op2val:0x3ff6b552;
op3val:0x62fffff8; valaddr_reg:x3; val_offset:80463*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80463*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26822:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04d221 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x76b552 and fs3 == 0 and fe3 == 0xc5 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04d221; op2val:0x3ff6b552;
op3val:0x62fffffc; valaddr_reg:x3; val_offset:80466*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80466*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26823:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04d221 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x76b552 and fs3 == 0 and fe3 == 0xc5 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04d221; op2val:0x3ff6b552;
op3val:0x62fffffe; valaddr_reg:x3; val_offset:80469*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80469*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26824:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04d221 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x76b552 and fs3 == 0 and fe3 == 0xc5 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04d221; op2val:0x3ff6b552;
op3val:0x62ffffff; valaddr_reg:x3; val_offset:80472*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80472*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26825:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04d221 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x76b552 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04d221; op2val:0x3ff6b552;
op3val:0x7f000001; valaddr_reg:x3; val_offset:80475*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80475*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26826:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04d221 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x76b552 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04d221; op2val:0x3ff6b552;
op3val:0x7f000003; valaddr_reg:x3; val_offset:80478*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80478*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26827:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04d221 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x76b552 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04d221; op2val:0x3ff6b552;
op3val:0x7f000007; valaddr_reg:x3; val_offset:80481*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80481*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26828:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04d221 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x76b552 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04d221; op2val:0x3ff6b552;
op3val:0x7f199999; valaddr_reg:x3; val_offset:80484*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80484*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26829:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04d221 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x76b552 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04d221; op2val:0x3ff6b552;
op3val:0x7f249249; valaddr_reg:x3; val_offset:80487*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80487*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26830:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04d221 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x76b552 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04d221; op2val:0x3ff6b552;
op3val:0x7f333333; valaddr_reg:x3; val_offset:80490*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80490*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26831:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04d221 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x76b552 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04d221; op2val:0x3ff6b552;
op3val:0x7f36db6d; valaddr_reg:x3; val_offset:80493*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80493*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26832:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04d221 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x76b552 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04d221; op2val:0x3ff6b552;
op3val:0x7f3bbbbb; valaddr_reg:x3; val_offset:80496*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80496*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26833:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04d221 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x76b552 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04d221; op2val:0x3ff6b552;
op3val:0x7f444444; valaddr_reg:x3; val_offset:80499*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80499*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26834:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04d221 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x76b552 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04d221; op2val:0x3ff6b552;
op3val:0x7f4ccccc; valaddr_reg:x3; val_offset:80502*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80502*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26835:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04d221 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x76b552 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04d221; op2val:0x3ff6b552;
op3val:0x7f5b6db6; valaddr_reg:x3; val_offset:80505*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80505*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26836:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04d221 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x76b552 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04d221; op2val:0x3ff6b552;
op3val:0x7f666666; valaddr_reg:x3; val_offset:80508*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80508*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26837:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04d221 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x76b552 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04d221; op2val:0x3ff6b552;
op3val:0x7f6db6db; valaddr_reg:x3; val_offset:80511*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80511*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26838:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04d221 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x76b552 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04d221; op2val:0x3ff6b552;
op3val:0x7f7ffff8; valaddr_reg:x3; val_offset:80514*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80514*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26839:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04d221 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x76b552 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04d221; op2val:0x3ff6b552;
op3val:0x7f7ffffc; valaddr_reg:x3; val_offset:80517*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80517*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26840:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04d221 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x76b552 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04d221; op2val:0x3ff6b552;
op3val:0x7f7ffffe; valaddr_reg:x3; val_offset:80520*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80520*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26841:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x05f534 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3d2750 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f05f534; op2val:0x3d2750;
op3val:0x3f800001; valaddr_reg:x3; val_offset:80523*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80523*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26842:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x05f534 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3d2750 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f05f534; op2val:0x3d2750;
op3val:0x3f800003; valaddr_reg:x3; val_offset:80526*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80526*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26843:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x05f534 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3d2750 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f05f534; op2val:0x3d2750;
op3val:0x3f800007; valaddr_reg:x3; val_offset:80529*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80529*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26844:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x05f534 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3d2750 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f05f534; op2val:0x3d2750;
op3val:0x3f999999; valaddr_reg:x3; val_offset:80532*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80532*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26845:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x05f534 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3d2750 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f05f534; op2val:0x3d2750;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:80535*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80535*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26846:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x05f534 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3d2750 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f05f534; op2val:0x3d2750;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:80538*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80538*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26847:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x05f534 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3d2750 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f05f534; op2val:0x3d2750;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:80541*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80541*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26848:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x05f534 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3d2750 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f05f534; op2val:0x3d2750;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:80544*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80544*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26849:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x05f534 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3d2750 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f05f534; op2val:0x3d2750;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:80547*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80547*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26850:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x05f534 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3d2750 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f05f534; op2val:0x3d2750;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:80550*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80550*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26851:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x05f534 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3d2750 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f05f534; op2val:0x3d2750;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:80553*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80553*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26852:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x05f534 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3d2750 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f05f534; op2val:0x3d2750;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:80556*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80556*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26853:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x05f534 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3d2750 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f05f534; op2val:0x3d2750;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:80559*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80559*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26854:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x05f534 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3d2750 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f05f534; op2val:0x3d2750;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:80562*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80562*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26855:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x05f534 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3d2750 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f05f534; op2val:0x3d2750;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:80565*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80565*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26856:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x05f534 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3d2750 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f05f534; op2val:0x3d2750;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:80568*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80568*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26857:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x05f534 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3d2750 and fs3 == 0 and fe3 == 0x89 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f05f534; op2val:0x3d2750;
op3val:0x44800000; valaddr_reg:x3; val_offset:80571*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80571*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26858:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x05f534 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3d2750 and fs3 == 0 and fe3 == 0x89 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f05f534; op2val:0x3d2750;
op3val:0x44800001; valaddr_reg:x3; val_offset:80574*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80574*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26859:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x05f534 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3d2750 and fs3 == 0 and fe3 == 0x89 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f05f534; op2val:0x3d2750;
op3val:0x44800003; valaddr_reg:x3; val_offset:80577*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80577*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26860:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x05f534 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3d2750 and fs3 == 0 and fe3 == 0x89 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f05f534; op2val:0x3d2750;
op3val:0x44800007; valaddr_reg:x3; val_offset:80580*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80580*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26861:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x05f534 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3d2750 and fs3 == 0 and fe3 == 0x89 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f05f534; op2val:0x3d2750;
op3val:0x4480000f; valaddr_reg:x3; val_offset:80583*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80583*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26862:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x05f534 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3d2750 and fs3 == 0 and fe3 == 0x89 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f05f534; op2val:0x3d2750;
op3val:0x4480001f; valaddr_reg:x3; val_offset:80586*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80586*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26863:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x05f534 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3d2750 and fs3 == 0 and fe3 == 0x89 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f05f534; op2val:0x3d2750;
op3val:0x4480003f; valaddr_reg:x3; val_offset:80589*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80589*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26864:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x05f534 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3d2750 and fs3 == 0 and fe3 == 0x89 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f05f534; op2val:0x3d2750;
op3val:0x4480007f; valaddr_reg:x3; val_offset:80592*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80592*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26865:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x05f534 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3d2750 and fs3 == 0 and fe3 == 0x89 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f05f534; op2val:0x3d2750;
op3val:0x448000ff; valaddr_reg:x3; val_offset:80595*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80595*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26866:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x05f534 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3d2750 and fs3 == 0 and fe3 == 0x89 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f05f534; op2val:0x3d2750;
op3val:0x448001ff; valaddr_reg:x3; val_offset:80598*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80598*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26867:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x05f534 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3d2750 and fs3 == 0 and fe3 == 0x89 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f05f534; op2val:0x3d2750;
op3val:0x448003ff; valaddr_reg:x3; val_offset:80601*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80601*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26868:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x05f534 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3d2750 and fs3 == 0 and fe3 == 0x89 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f05f534; op2val:0x3d2750;
op3val:0x448007ff; valaddr_reg:x3; val_offset:80604*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80604*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26869:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x05f534 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3d2750 and fs3 == 0 and fe3 == 0x89 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f05f534; op2val:0x3d2750;
op3val:0x44800fff; valaddr_reg:x3; val_offset:80607*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80607*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26870:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x05f534 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3d2750 and fs3 == 0 and fe3 == 0x89 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f05f534; op2val:0x3d2750;
op3val:0x44801fff; valaddr_reg:x3; val_offset:80610*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80610*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26871:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x05f534 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3d2750 and fs3 == 0 and fe3 == 0x89 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f05f534; op2val:0x3d2750;
op3val:0x44803fff; valaddr_reg:x3; val_offset:80613*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80613*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26872:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x05f534 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3d2750 and fs3 == 0 and fe3 == 0x89 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f05f534; op2val:0x3d2750;
op3val:0x44807fff; valaddr_reg:x3; val_offset:80616*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80616*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26873:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x05f534 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3d2750 and fs3 == 0 and fe3 == 0x89 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f05f534; op2val:0x3d2750;
op3val:0x4480ffff; valaddr_reg:x3; val_offset:80619*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80619*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26874:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x05f534 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3d2750 and fs3 == 0 and fe3 == 0x89 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f05f534; op2val:0x3d2750;
op3val:0x4481ffff; valaddr_reg:x3; val_offset:80622*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80622*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26875:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x05f534 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3d2750 and fs3 == 0 and fe3 == 0x89 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f05f534; op2val:0x3d2750;
op3val:0x4483ffff; valaddr_reg:x3; val_offset:80625*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80625*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26876:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x05f534 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3d2750 and fs3 == 0 and fe3 == 0x89 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f05f534; op2val:0x3d2750;
op3val:0x4487ffff; valaddr_reg:x3; val_offset:80628*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80628*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26877:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x05f534 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3d2750 and fs3 == 0 and fe3 == 0x89 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f05f534; op2val:0x3d2750;
op3val:0x448fffff; valaddr_reg:x3; val_offset:80631*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80631*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26878:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x05f534 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3d2750 and fs3 == 0 and fe3 == 0x89 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f05f534; op2val:0x3d2750;
op3val:0x449fffff; valaddr_reg:x3; val_offset:80634*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80634*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26879:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x05f534 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3d2750 and fs3 == 0 and fe3 == 0x89 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f05f534; op2val:0x3d2750;
op3val:0x44bfffff; valaddr_reg:x3; val_offset:80637*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80637*0 + 3*209*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2131010385,32,FLEN)
NAN_BOXED(4047641,32,FLEN)
NAN_BOXED(1309147135,32,FLEN)
NAN_BOXED(2131010385,32,FLEN)
NAN_BOXED(4047641,32,FLEN)
NAN_BOXED(1309671423,32,FLEN)
NAN_BOXED(2131010385,32,FLEN)
NAN_BOXED(4047641,32,FLEN)
NAN_BOXED(1310719999,32,FLEN)
NAN_BOXED(2131010385,32,FLEN)
NAN_BOXED(4047641,32,FLEN)
NAN_BOXED(1312817151,32,FLEN)
NAN_BOXED(2131010385,32,FLEN)
NAN_BOXED(4047641,32,FLEN)
NAN_BOXED(1312817152,32,FLEN)
NAN_BOXED(2131010385,32,FLEN)
NAN_BOXED(4047641,32,FLEN)
NAN_BOXED(1314914304,32,FLEN)
NAN_BOXED(2131010385,32,FLEN)
NAN_BOXED(4047641,32,FLEN)
NAN_BOXED(1315962880,32,FLEN)
NAN_BOXED(2131010385,32,FLEN)
NAN_BOXED(4047641,32,FLEN)
NAN_BOXED(1316487168,32,FLEN)
NAN_BOXED(2131010385,32,FLEN)
NAN_BOXED(4047641,32,FLEN)
NAN_BOXED(1316749312,32,FLEN)
NAN_BOXED(2131010385,32,FLEN)
NAN_BOXED(4047641,32,FLEN)
NAN_BOXED(1316880384,32,FLEN)
NAN_BOXED(2131010385,32,FLEN)
NAN_BOXED(4047641,32,FLEN)
NAN_BOXED(1316945920,32,FLEN)
NAN_BOXED(2131010385,32,FLEN)
NAN_BOXED(4047641,32,FLEN)
NAN_BOXED(1316978688,32,FLEN)
NAN_BOXED(2131010385,32,FLEN)
NAN_BOXED(4047641,32,FLEN)
NAN_BOXED(1316995072,32,FLEN)
NAN_BOXED(2131010385,32,FLEN)
NAN_BOXED(4047641,32,FLEN)
NAN_BOXED(1317003264,32,FLEN)
NAN_BOXED(2131010385,32,FLEN)
NAN_BOXED(4047641,32,FLEN)
NAN_BOXED(1317007360,32,FLEN)
NAN_BOXED(2131010385,32,FLEN)
NAN_BOXED(4047641,32,FLEN)
NAN_BOXED(1317009408,32,FLEN)
NAN_BOXED(2131010385,32,FLEN)
NAN_BOXED(4047641,32,FLEN)
NAN_BOXED(1317010432,32,FLEN)
NAN_BOXED(2131010385,32,FLEN)
NAN_BOXED(4047641,32,FLEN)
NAN_BOXED(1317010944,32,FLEN)
NAN_BOXED(2131010385,32,FLEN)
NAN_BOXED(4047641,32,FLEN)
NAN_BOXED(1317011200,32,FLEN)
NAN_BOXED(2131010385,32,FLEN)
NAN_BOXED(4047641,32,FLEN)
NAN_BOXED(1317011328,32,FLEN)
NAN_BOXED(2131010385,32,FLEN)
NAN_BOXED(4047641,32,FLEN)
NAN_BOXED(1317011392,32,FLEN)
NAN_BOXED(2131010385,32,FLEN)
NAN_BOXED(4047641,32,FLEN)
NAN_BOXED(1317011424,32,FLEN)
NAN_BOXED(2131010385,32,FLEN)
NAN_BOXED(4047641,32,FLEN)
NAN_BOXED(1317011440,32,FLEN)
NAN_BOXED(2131010385,32,FLEN)
NAN_BOXED(4047641,32,FLEN)
NAN_BOXED(1317011448,32,FLEN)
NAN_BOXED(2131010385,32,FLEN)
NAN_BOXED(4047641,32,FLEN)
NAN_BOXED(1317011452,32,FLEN)
NAN_BOXED(2131010385,32,FLEN)
NAN_BOXED(4047641,32,FLEN)
NAN_BOXED(1317011454,32,FLEN)
NAN_BOXED(2131010385,32,FLEN)
NAN_BOXED(4047641,32,FLEN)
NAN_BOXED(1317011455,32,FLEN)
NAN_BOXED(2131022369,32,FLEN)
NAN_BOXED(1073132882,32,FLEN)
NAN_BOXED(1652555776,32,FLEN)
NAN_BOXED(2131022369,32,FLEN)
NAN_BOXED(1073132882,32,FLEN)
NAN_BOXED(1652555777,32,FLEN)
NAN_BOXED(2131022369,32,FLEN)
NAN_BOXED(1073132882,32,FLEN)
NAN_BOXED(1652555779,32,FLEN)
NAN_BOXED(2131022369,32,FLEN)
NAN_BOXED(1073132882,32,FLEN)
NAN_BOXED(1652555783,32,FLEN)
NAN_BOXED(2131022369,32,FLEN)
NAN_BOXED(1073132882,32,FLEN)
NAN_BOXED(1652555791,32,FLEN)
NAN_BOXED(2131022369,32,FLEN)
NAN_BOXED(1073132882,32,FLEN)
NAN_BOXED(1652555807,32,FLEN)
NAN_BOXED(2131022369,32,FLEN)
NAN_BOXED(1073132882,32,FLEN)
NAN_BOXED(1652555839,32,FLEN)
NAN_BOXED(2131022369,32,FLEN)
NAN_BOXED(1073132882,32,FLEN)
NAN_BOXED(1652555903,32,FLEN)
NAN_BOXED(2131022369,32,FLEN)
NAN_BOXED(1073132882,32,FLEN)
NAN_BOXED(1652556031,32,FLEN)
NAN_BOXED(2131022369,32,FLEN)
NAN_BOXED(1073132882,32,FLEN)
NAN_BOXED(1652556287,32,FLEN)
NAN_BOXED(2131022369,32,FLEN)
NAN_BOXED(1073132882,32,FLEN)
NAN_BOXED(1652556799,32,FLEN)
NAN_BOXED(2131022369,32,FLEN)
NAN_BOXED(1073132882,32,FLEN)
NAN_BOXED(1652557823,32,FLEN)
NAN_BOXED(2131022369,32,FLEN)
NAN_BOXED(1073132882,32,FLEN)
NAN_BOXED(1652559871,32,FLEN)
NAN_BOXED(2131022369,32,FLEN)
NAN_BOXED(1073132882,32,FLEN)
NAN_BOXED(1652563967,32,FLEN)
NAN_BOXED(2131022369,32,FLEN)
NAN_BOXED(1073132882,32,FLEN)
NAN_BOXED(1652572159,32,FLEN)
NAN_BOXED(2131022369,32,FLEN)
NAN_BOXED(1073132882,32,FLEN)
NAN_BOXED(1652588543,32,FLEN)
NAN_BOXED(2131022369,32,FLEN)
NAN_BOXED(1073132882,32,FLEN)
NAN_BOXED(1652621311,32,FLEN)
NAN_BOXED(2131022369,32,FLEN)
NAN_BOXED(1073132882,32,FLEN)
NAN_BOXED(1652686847,32,FLEN)
NAN_BOXED(2131022369,32,FLEN)
NAN_BOXED(1073132882,32,FLEN)
NAN_BOXED(1652817919,32,FLEN)
NAN_BOXED(2131022369,32,FLEN)
NAN_BOXED(1073132882,32,FLEN)
NAN_BOXED(1653080063,32,FLEN)
NAN_BOXED(2131022369,32,FLEN)
NAN_BOXED(1073132882,32,FLEN)
NAN_BOXED(1653604351,32,FLEN)
NAN_BOXED(2131022369,32,FLEN)
NAN_BOXED(1073132882,32,FLEN)
NAN_BOXED(1654652927,32,FLEN)
NAN_BOXED(2131022369,32,FLEN)
NAN_BOXED(1073132882,32,FLEN)
NAN_BOXED(1656750079,32,FLEN)
NAN_BOXED(2131022369,32,FLEN)
NAN_BOXED(1073132882,32,FLEN)
NAN_BOXED(1656750080,32,FLEN)
NAN_BOXED(2131022369,32,FLEN)
NAN_BOXED(1073132882,32,FLEN)
NAN_BOXED(1658847232,32,FLEN)
NAN_BOXED(2131022369,32,FLEN)
NAN_BOXED(1073132882,32,FLEN)
NAN_BOXED(1659895808,32,FLEN)
NAN_BOXED(2131022369,32,FLEN)
NAN_BOXED(1073132882,32,FLEN)
NAN_BOXED(1660420096,32,FLEN)
NAN_BOXED(2131022369,32,FLEN)
NAN_BOXED(1073132882,32,FLEN)
NAN_BOXED(1660682240,32,FLEN)
NAN_BOXED(2131022369,32,FLEN)
NAN_BOXED(1073132882,32,FLEN)
NAN_BOXED(1660813312,32,FLEN)
NAN_BOXED(2131022369,32,FLEN)
NAN_BOXED(1073132882,32,FLEN)
NAN_BOXED(1660878848,32,FLEN)
NAN_BOXED(2131022369,32,FLEN)
NAN_BOXED(1073132882,32,FLEN)
NAN_BOXED(1660911616,32,FLEN)
NAN_BOXED(2131022369,32,FLEN)
NAN_BOXED(1073132882,32,FLEN)
NAN_BOXED(1660928000,32,FLEN)
NAN_BOXED(2131022369,32,FLEN)
NAN_BOXED(1073132882,32,FLEN)
NAN_BOXED(1660936192,32,FLEN)
NAN_BOXED(2131022369,32,FLEN)
NAN_BOXED(1073132882,32,FLEN)
NAN_BOXED(1660940288,32,FLEN)
NAN_BOXED(2131022369,32,FLEN)
NAN_BOXED(1073132882,32,FLEN)
NAN_BOXED(1660942336,32,FLEN)
NAN_BOXED(2131022369,32,FLEN)
NAN_BOXED(1073132882,32,FLEN)
NAN_BOXED(1660943360,32,FLEN)
NAN_BOXED(2131022369,32,FLEN)
NAN_BOXED(1073132882,32,FLEN)
NAN_BOXED(1660943872,32,FLEN)
NAN_BOXED(2131022369,32,FLEN)
NAN_BOXED(1073132882,32,FLEN)
NAN_BOXED(1660944128,32,FLEN)
NAN_BOXED(2131022369,32,FLEN)
NAN_BOXED(1073132882,32,FLEN)
NAN_BOXED(1660944256,32,FLEN)
NAN_BOXED(2131022369,32,FLEN)
NAN_BOXED(1073132882,32,FLEN)
NAN_BOXED(1660944320,32,FLEN)
NAN_BOXED(2131022369,32,FLEN)
NAN_BOXED(1073132882,32,FLEN)
NAN_BOXED(1660944352,32,FLEN)
NAN_BOXED(2131022369,32,FLEN)
NAN_BOXED(1073132882,32,FLEN)
NAN_BOXED(1660944368,32,FLEN)
NAN_BOXED(2131022369,32,FLEN)
NAN_BOXED(1073132882,32,FLEN)
NAN_BOXED(1660944376,32,FLEN)
NAN_BOXED(2131022369,32,FLEN)
NAN_BOXED(1073132882,32,FLEN)
NAN_BOXED(1660944380,32,FLEN)
NAN_BOXED(2131022369,32,FLEN)
NAN_BOXED(1073132882,32,FLEN)
NAN_BOXED(1660944382,32,FLEN)
NAN_BOXED(2131022369,32,FLEN)
NAN_BOXED(1073132882,32,FLEN)
NAN_BOXED(1660944383,32,FLEN)
NAN_BOXED(2131022369,32,FLEN)
NAN_BOXED(1073132882,32,FLEN)
NAN_BOXED(2130706433,32,FLEN)
NAN_BOXED(2131022369,32,FLEN)
NAN_BOXED(1073132882,32,FLEN)
NAN_BOXED(2130706435,32,FLEN)
NAN_BOXED(2131022369,32,FLEN)
NAN_BOXED(1073132882,32,FLEN)
NAN_BOXED(2130706439,32,FLEN)
NAN_BOXED(2131022369,32,FLEN)
NAN_BOXED(1073132882,32,FLEN)
NAN_BOXED(2132384153,32,FLEN)
NAN_BOXED(2131022369,32,FLEN)
NAN_BOXED(1073132882,32,FLEN)
NAN_BOXED(2133103177,32,FLEN)
NAN_BOXED(2131022369,32,FLEN)
NAN_BOXED(1073132882,32,FLEN)
NAN_BOXED(2134061875,32,FLEN)
NAN_BOXED(2131022369,32,FLEN)
NAN_BOXED(1073132882,32,FLEN)
NAN_BOXED(2134301549,32,FLEN)
NAN_BOXED(2131022369,32,FLEN)
NAN_BOXED(1073132882,32,FLEN)
NAN_BOXED(2134621115,32,FLEN)
NAN_BOXED(2131022369,32,FLEN)
NAN_BOXED(1073132882,32,FLEN)
NAN_BOXED(2135180356,32,FLEN)
NAN_BOXED(2131022369,32,FLEN)
NAN_BOXED(1073132882,32,FLEN)
NAN_BOXED(2135739596,32,FLEN)
NAN_BOXED(2131022369,32,FLEN)
NAN_BOXED(1073132882,32,FLEN)
NAN_BOXED(2136698294,32,FLEN)
NAN_BOXED(2131022369,32,FLEN)
NAN_BOXED(1073132882,32,FLEN)
NAN_BOXED(2137417318,32,FLEN)
NAN_BOXED(2131022369,32,FLEN)
NAN_BOXED(1073132882,32,FLEN)
NAN_BOXED(2137896667,32,FLEN)
NAN_BOXED(2131022369,32,FLEN)
NAN_BOXED(1073132882,32,FLEN)
NAN_BOXED(2139095032,32,FLEN)
NAN_BOXED(2131022369,32,FLEN)
NAN_BOXED(1073132882,32,FLEN)
NAN_BOXED(2139095036,32,FLEN)
NAN_BOXED(2131022369,32,FLEN)
NAN_BOXED(1073132882,32,FLEN)
NAN_BOXED(2139095038,32,FLEN)
NAN_BOXED(2131096884,32,FLEN)
NAN_BOXED(4007760,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2131096884,32,FLEN)
NAN_BOXED(4007760,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2131096884,32,FLEN)
NAN_BOXED(4007760,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2131096884,32,FLEN)
NAN_BOXED(4007760,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2131096884,32,FLEN)
NAN_BOXED(4007760,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2131096884,32,FLEN)
NAN_BOXED(4007760,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2131096884,32,FLEN)
NAN_BOXED(4007760,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2131096884,32,FLEN)
NAN_BOXED(4007760,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2131096884,32,FLEN)
NAN_BOXED(4007760,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2131096884,32,FLEN)
NAN_BOXED(4007760,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2131096884,32,FLEN)
NAN_BOXED(4007760,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2131096884,32,FLEN)
NAN_BOXED(4007760,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2131096884,32,FLEN)
NAN_BOXED(4007760,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2131096884,32,FLEN)
NAN_BOXED(4007760,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2131096884,32,FLEN)
NAN_BOXED(4007760,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2131096884,32,FLEN)
NAN_BOXED(4007760,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2131096884,32,FLEN)
NAN_BOXED(4007760,32,FLEN)
NAN_BOXED(1149239296,32,FLEN)
NAN_BOXED(2131096884,32,FLEN)
NAN_BOXED(4007760,32,FLEN)
NAN_BOXED(1149239297,32,FLEN)
NAN_BOXED(2131096884,32,FLEN)
NAN_BOXED(4007760,32,FLEN)
NAN_BOXED(1149239299,32,FLEN)
NAN_BOXED(2131096884,32,FLEN)
NAN_BOXED(4007760,32,FLEN)
NAN_BOXED(1149239303,32,FLEN)
NAN_BOXED(2131096884,32,FLEN)
NAN_BOXED(4007760,32,FLEN)
NAN_BOXED(1149239311,32,FLEN)
NAN_BOXED(2131096884,32,FLEN)
NAN_BOXED(4007760,32,FLEN)
NAN_BOXED(1149239327,32,FLEN)
NAN_BOXED(2131096884,32,FLEN)
NAN_BOXED(4007760,32,FLEN)
NAN_BOXED(1149239359,32,FLEN)
NAN_BOXED(2131096884,32,FLEN)
NAN_BOXED(4007760,32,FLEN)
NAN_BOXED(1149239423,32,FLEN)
NAN_BOXED(2131096884,32,FLEN)
NAN_BOXED(4007760,32,FLEN)
NAN_BOXED(1149239551,32,FLEN)
NAN_BOXED(2131096884,32,FLEN)
NAN_BOXED(4007760,32,FLEN)
NAN_BOXED(1149239807,32,FLEN)
NAN_BOXED(2131096884,32,FLEN)
NAN_BOXED(4007760,32,FLEN)
NAN_BOXED(1149240319,32,FLEN)
NAN_BOXED(2131096884,32,FLEN)
NAN_BOXED(4007760,32,FLEN)
NAN_BOXED(1149241343,32,FLEN)
NAN_BOXED(2131096884,32,FLEN)
NAN_BOXED(4007760,32,FLEN)
NAN_BOXED(1149243391,32,FLEN)
NAN_BOXED(2131096884,32,FLEN)
NAN_BOXED(4007760,32,FLEN)
NAN_BOXED(1149247487,32,FLEN)
NAN_BOXED(2131096884,32,FLEN)
NAN_BOXED(4007760,32,FLEN)
NAN_BOXED(1149255679,32,FLEN)
NAN_BOXED(2131096884,32,FLEN)
NAN_BOXED(4007760,32,FLEN)
NAN_BOXED(1149272063,32,FLEN)
NAN_BOXED(2131096884,32,FLEN)
NAN_BOXED(4007760,32,FLEN)
NAN_BOXED(1149304831,32,FLEN)
NAN_BOXED(2131096884,32,FLEN)
NAN_BOXED(4007760,32,FLEN)
NAN_BOXED(1149370367,32,FLEN)
NAN_BOXED(2131096884,32,FLEN)
NAN_BOXED(4007760,32,FLEN)
NAN_BOXED(1149501439,32,FLEN)
NAN_BOXED(2131096884,32,FLEN)
NAN_BOXED(4007760,32,FLEN)
NAN_BOXED(1149763583,32,FLEN)
NAN_BOXED(2131096884,32,FLEN)
NAN_BOXED(4007760,32,FLEN)
NAN_BOXED(1150287871,32,FLEN)
NAN_BOXED(2131096884,32,FLEN)
NAN_BOXED(4007760,32,FLEN)
NAN_BOXED(1151336447,32,FLEN)
NAN_BOXED(2131096884,32,FLEN)
NAN_BOXED(4007760,32,FLEN)
NAN_BOXED(1153433599,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
