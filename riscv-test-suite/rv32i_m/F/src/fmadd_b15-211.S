
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:17:59 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_26880:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x05f534 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3d2750 and fs3 == 0 and fe3 == 0x89 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f05f534; op2val:0x3d2750;
op3val:0x44c00000; valaddr_reg:x3; val_offset:80640*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80640*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26881:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x05f534 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3d2750 and fs3 == 0 and fe3 == 0x89 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f05f534; op2val:0x3d2750;
op3val:0x44e00000; valaddr_reg:x3; val_offset:80643*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80643*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26882:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x05f534 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3d2750 and fs3 == 0 and fe3 == 0x89 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f05f534; op2val:0x3d2750;
op3val:0x44f00000; valaddr_reg:x3; val_offset:80646*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80646*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26883:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x05f534 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3d2750 and fs3 == 0 and fe3 == 0x89 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f05f534; op2val:0x3d2750;
op3val:0x44f80000; valaddr_reg:x3; val_offset:80649*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80649*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26884:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x05f534 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3d2750 and fs3 == 0 and fe3 == 0x89 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f05f534; op2val:0x3d2750;
op3val:0x44fc0000; valaddr_reg:x3; val_offset:80652*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80652*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26885:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x05f534 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3d2750 and fs3 == 0 and fe3 == 0x89 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f05f534; op2val:0x3d2750;
op3val:0x44fe0000; valaddr_reg:x3; val_offset:80655*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80655*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26886:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x05f534 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3d2750 and fs3 == 0 and fe3 == 0x89 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f05f534; op2val:0x3d2750;
op3val:0x44ff0000; valaddr_reg:x3; val_offset:80658*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80658*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26887:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x05f534 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3d2750 and fs3 == 0 and fe3 == 0x89 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f05f534; op2val:0x3d2750;
op3val:0x44ff8000; valaddr_reg:x3; val_offset:80661*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80661*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26888:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x05f534 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3d2750 and fs3 == 0 and fe3 == 0x89 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f05f534; op2val:0x3d2750;
op3val:0x44ffc000; valaddr_reg:x3; val_offset:80664*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80664*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26889:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x05f534 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3d2750 and fs3 == 0 and fe3 == 0x89 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f05f534; op2val:0x3d2750;
op3val:0x44ffe000; valaddr_reg:x3; val_offset:80667*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80667*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26890:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x05f534 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3d2750 and fs3 == 0 and fe3 == 0x89 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f05f534; op2val:0x3d2750;
op3val:0x44fff000; valaddr_reg:x3; val_offset:80670*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80670*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26891:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x05f534 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3d2750 and fs3 == 0 and fe3 == 0x89 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f05f534; op2val:0x3d2750;
op3val:0x44fff800; valaddr_reg:x3; val_offset:80673*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80673*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26892:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x05f534 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3d2750 and fs3 == 0 and fe3 == 0x89 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f05f534; op2val:0x3d2750;
op3val:0x44fffc00; valaddr_reg:x3; val_offset:80676*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80676*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26893:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x05f534 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3d2750 and fs3 == 0 and fe3 == 0x89 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f05f534; op2val:0x3d2750;
op3val:0x44fffe00; valaddr_reg:x3; val_offset:80679*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80679*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26894:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x05f534 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3d2750 and fs3 == 0 and fe3 == 0x89 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f05f534; op2val:0x3d2750;
op3val:0x44ffff00; valaddr_reg:x3; val_offset:80682*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80682*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26895:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x05f534 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3d2750 and fs3 == 0 and fe3 == 0x89 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f05f534; op2val:0x3d2750;
op3val:0x44ffff80; valaddr_reg:x3; val_offset:80685*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80685*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26896:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x05f534 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3d2750 and fs3 == 0 and fe3 == 0x89 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f05f534; op2val:0x3d2750;
op3val:0x44ffffc0; valaddr_reg:x3; val_offset:80688*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80688*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26897:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x05f534 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3d2750 and fs3 == 0 and fe3 == 0x89 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f05f534; op2val:0x3d2750;
op3val:0x44ffffe0; valaddr_reg:x3; val_offset:80691*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80691*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26898:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x05f534 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3d2750 and fs3 == 0 and fe3 == 0x89 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f05f534; op2val:0x3d2750;
op3val:0x44fffff0; valaddr_reg:x3; val_offset:80694*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80694*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26899:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x05f534 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3d2750 and fs3 == 0 and fe3 == 0x89 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f05f534; op2val:0x3d2750;
op3val:0x44fffff8; valaddr_reg:x3; val_offset:80697*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80697*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26900:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x05f534 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3d2750 and fs3 == 0 and fe3 == 0x89 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f05f534; op2val:0x3d2750;
op3val:0x44fffffc; valaddr_reg:x3; val_offset:80700*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80700*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26901:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x05f534 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3d2750 and fs3 == 0 and fe3 == 0x89 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f05f534; op2val:0x3d2750;
op3val:0x44fffffe; valaddr_reg:x3; val_offset:80703*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80703*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26902:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x05f534 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3d2750 and fs3 == 0 and fe3 == 0x89 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f05f534; op2val:0x3d2750;
op3val:0x44ffffff; valaddr_reg:x3; val_offset:80706*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80706*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26903:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x061cca and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f061cca; op2val:0x80000000;
op3val:0x80800001; valaddr_reg:x3; val_offset:80709*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80709*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26904:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x061cca and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f061cca; op2val:0x80000000;
op3val:0x80800003; valaddr_reg:x3; val_offset:80712*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80712*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26905:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x061cca and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f061cca; op2val:0x80000000;
op3val:0x80800007; valaddr_reg:x3; val_offset:80715*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80715*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26906:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x061cca and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f061cca; op2val:0x80000000;
op3val:0x80999999; valaddr_reg:x3; val_offset:80718*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80718*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26907:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x061cca and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f061cca; op2val:0x80000000;
op3val:0x80a49249; valaddr_reg:x3; val_offset:80721*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80721*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26908:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x061cca and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f061cca; op2val:0x80000000;
op3val:0x80b33333; valaddr_reg:x3; val_offset:80724*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80724*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26909:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x061cca and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f061cca; op2val:0x80000000;
op3val:0x80b6db6d; valaddr_reg:x3; val_offset:80727*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80727*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26910:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x061cca and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f061cca; op2val:0x80000000;
op3val:0x80bbbbbb; valaddr_reg:x3; val_offset:80730*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80730*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26911:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x061cca and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f061cca; op2val:0x80000000;
op3val:0x80c44444; valaddr_reg:x3; val_offset:80733*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80733*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26912:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x061cca and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f061cca; op2val:0x80000000;
op3val:0x80cccccc; valaddr_reg:x3; val_offset:80736*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80736*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26913:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x061cca and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f061cca; op2val:0x80000000;
op3val:0x80db6db6; valaddr_reg:x3; val_offset:80739*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80739*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26914:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x061cca and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f061cca; op2val:0x80000000;
op3val:0x80e66666; valaddr_reg:x3; val_offset:80742*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80742*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26915:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x061cca and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f061cca; op2val:0x80000000;
op3val:0x80edb6db; valaddr_reg:x3; val_offset:80745*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80745*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26916:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x061cca and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f061cca; op2val:0x80000000;
op3val:0x80fffff8; valaddr_reg:x3; val_offset:80748*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80748*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26917:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x061cca and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f061cca; op2val:0x80000000;
op3val:0x80fffffc; valaddr_reg:x3; val_offset:80751*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80751*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26918:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x061cca and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f061cca; op2val:0x80000000;
op3val:0x80fffffe; valaddr_reg:x3; val_offset:80754*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80754*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26919:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x061cca and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f061cca; op2val:0x80000000;
op3val:0x8b800000; valaddr_reg:x3; val_offset:80757*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80757*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26920:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x061cca and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f061cca; op2val:0x80000000;
op3val:0x8b800001; valaddr_reg:x3; val_offset:80760*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80760*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26921:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x061cca and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f061cca; op2val:0x80000000;
op3val:0x8b800003; valaddr_reg:x3; val_offset:80763*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80763*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26922:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x061cca and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f061cca; op2val:0x80000000;
op3val:0x8b800007; valaddr_reg:x3; val_offset:80766*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80766*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26923:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x061cca and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f061cca; op2val:0x80000000;
op3val:0x8b80000f; valaddr_reg:x3; val_offset:80769*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80769*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26924:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x061cca and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f061cca; op2val:0x80000000;
op3val:0x8b80001f; valaddr_reg:x3; val_offset:80772*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80772*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26925:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x061cca and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f061cca; op2val:0x80000000;
op3val:0x8b80003f; valaddr_reg:x3; val_offset:80775*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80775*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26926:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x061cca and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f061cca; op2val:0x80000000;
op3val:0x8b80007f; valaddr_reg:x3; val_offset:80778*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80778*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26927:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x061cca and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f061cca; op2val:0x80000000;
op3val:0x8b8000ff; valaddr_reg:x3; val_offset:80781*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80781*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26928:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x061cca and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f061cca; op2val:0x80000000;
op3val:0x8b8001ff; valaddr_reg:x3; val_offset:80784*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80784*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26929:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x061cca and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f061cca; op2val:0x80000000;
op3val:0x8b8003ff; valaddr_reg:x3; val_offset:80787*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80787*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26930:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x061cca and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f061cca; op2val:0x80000000;
op3val:0x8b8007ff; valaddr_reg:x3; val_offset:80790*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80790*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26931:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x061cca and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f061cca; op2val:0x80000000;
op3val:0x8b800fff; valaddr_reg:x3; val_offset:80793*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80793*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26932:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x061cca and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f061cca; op2val:0x80000000;
op3val:0x8b801fff; valaddr_reg:x3; val_offset:80796*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80796*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26933:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x061cca and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f061cca; op2val:0x80000000;
op3val:0x8b803fff; valaddr_reg:x3; val_offset:80799*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80799*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26934:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x061cca and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f061cca; op2val:0x80000000;
op3val:0x8b807fff; valaddr_reg:x3; val_offset:80802*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80802*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26935:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x061cca and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f061cca; op2val:0x80000000;
op3val:0x8b80ffff; valaddr_reg:x3; val_offset:80805*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80805*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26936:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x061cca and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f061cca; op2val:0x80000000;
op3val:0x8b81ffff; valaddr_reg:x3; val_offset:80808*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80808*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26937:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x061cca and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f061cca; op2val:0x80000000;
op3val:0x8b83ffff; valaddr_reg:x3; val_offset:80811*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80811*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26938:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x061cca and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f061cca; op2val:0x80000000;
op3val:0x8b87ffff; valaddr_reg:x3; val_offset:80814*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80814*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26939:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x061cca and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f061cca; op2val:0x80000000;
op3val:0x8b8fffff; valaddr_reg:x3; val_offset:80817*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80817*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26940:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x061cca and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f061cca; op2val:0x80000000;
op3val:0x8b9fffff; valaddr_reg:x3; val_offset:80820*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80820*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26941:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x061cca and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f061cca; op2val:0x80000000;
op3val:0x8bbfffff; valaddr_reg:x3; val_offset:80823*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80823*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26942:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x061cca and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f061cca; op2val:0x80000000;
op3val:0x8bc00000; valaddr_reg:x3; val_offset:80826*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80826*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26943:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x061cca and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f061cca; op2val:0x80000000;
op3val:0x8be00000; valaddr_reg:x3; val_offset:80829*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80829*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26944:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x061cca and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f061cca; op2val:0x80000000;
op3val:0x8bf00000; valaddr_reg:x3; val_offset:80832*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80832*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26945:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x061cca and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f061cca; op2val:0x80000000;
op3val:0x8bf80000; valaddr_reg:x3; val_offset:80835*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80835*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26946:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x061cca and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f061cca; op2val:0x80000000;
op3val:0x8bfc0000; valaddr_reg:x3; val_offset:80838*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80838*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26947:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x061cca and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f061cca; op2val:0x80000000;
op3val:0x8bfe0000; valaddr_reg:x3; val_offset:80841*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80841*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26948:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x061cca and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f061cca; op2val:0x80000000;
op3val:0x8bff0000; valaddr_reg:x3; val_offset:80844*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80844*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26949:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x061cca and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f061cca; op2val:0x80000000;
op3val:0x8bff8000; valaddr_reg:x3; val_offset:80847*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80847*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26950:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x061cca and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f061cca; op2val:0x80000000;
op3val:0x8bffc000; valaddr_reg:x3; val_offset:80850*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80850*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26951:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x061cca and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f061cca; op2val:0x80000000;
op3val:0x8bffe000; valaddr_reg:x3; val_offset:80853*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80853*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26952:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x061cca and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f061cca; op2val:0x80000000;
op3val:0x8bfff000; valaddr_reg:x3; val_offset:80856*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80856*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26953:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x061cca and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f061cca; op2val:0x80000000;
op3val:0x8bfff800; valaddr_reg:x3; val_offset:80859*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80859*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26954:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x061cca and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f061cca; op2val:0x80000000;
op3val:0x8bfffc00; valaddr_reg:x3; val_offset:80862*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80862*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26955:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x061cca and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f061cca; op2val:0x80000000;
op3val:0x8bfffe00; valaddr_reg:x3; val_offset:80865*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80865*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26956:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x061cca and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f061cca; op2val:0x80000000;
op3val:0x8bffff00; valaddr_reg:x3; val_offset:80868*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80868*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26957:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x061cca and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f061cca; op2val:0x80000000;
op3val:0x8bffff80; valaddr_reg:x3; val_offset:80871*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80871*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26958:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x061cca and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f061cca; op2val:0x80000000;
op3val:0x8bffffc0; valaddr_reg:x3; val_offset:80874*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80874*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26959:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x061cca and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f061cca; op2val:0x80000000;
op3val:0x8bffffe0; valaddr_reg:x3; val_offset:80877*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80877*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26960:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x061cca and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f061cca; op2val:0x80000000;
op3val:0x8bfffff0; valaddr_reg:x3; val_offset:80880*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80880*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26961:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x061cca and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f061cca; op2val:0x80000000;
op3val:0x8bfffff8; valaddr_reg:x3; val_offset:80883*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80883*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26962:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x061cca and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f061cca; op2val:0x80000000;
op3val:0x8bfffffc; valaddr_reg:x3; val_offset:80886*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80886*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26963:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x061cca and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f061cca; op2val:0x80000000;
op3val:0x8bfffffe; valaddr_reg:x3; val_offset:80889*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80889*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26964:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x061cca and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f061cca; op2val:0x80000000;
op3val:0x8bffffff; valaddr_reg:x3; val_offset:80892*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80892*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26965:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0620bc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3d1377 and fs3 == 1 and fe3 == 0x4a and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0620bc; op2val:0x803d1377;
op3val:0xa5000000; valaddr_reg:x3; val_offset:80895*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80895*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26966:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0620bc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3d1377 and fs3 == 1 and fe3 == 0x4a and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0620bc; op2val:0x803d1377;
op3val:0xa5000001; valaddr_reg:x3; val_offset:80898*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80898*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26967:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0620bc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3d1377 and fs3 == 1 and fe3 == 0x4a and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0620bc; op2val:0x803d1377;
op3val:0xa5000003; valaddr_reg:x3; val_offset:80901*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80901*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26968:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0620bc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3d1377 and fs3 == 1 and fe3 == 0x4a and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0620bc; op2val:0x803d1377;
op3val:0xa5000007; valaddr_reg:x3; val_offset:80904*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80904*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26969:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0620bc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3d1377 and fs3 == 1 and fe3 == 0x4a and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0620bc; op2val:0x803d1377;
op3val:0xa500000f; valaddr_reg:x3; val_offset:80907*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80907*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26970:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0620bc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3d1377 and fs3 == 1 and fe3 == 0x4a and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0620bc; op2val:0x803d1377;
op3val:0xa500001f; valaddr_reg:x3; val_offset:80910*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80910*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26971:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0620bc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3d1377 and fs3 == 1 and fe3 == 0x4a and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0620bc; op2val:0x803d1377;
op3val:0xa500003f; valaddr_reg:x3; val_offset:80913*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80913*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26972:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0620bc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3d1377 and fs3 == 1 and fe3 == 0x4a and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0620bc; op2val:0x803d1377;
op3val:0xa500007f; valaddr_reg:x3; val_offset:80916*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80916*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26973:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0620bc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3d1377 and fs3 == 1 and fe3 == 0x4a and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0620bc; op2val:0x803d1377;
op3val:0xa50000ff; valaddr_reg:x3; val_offset:80919*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80919*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26974:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0620bc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3d1377 and fs3 == 1 and fe3 == 0x4a and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0620bc; op2val:0x803d1377;
op3val:0xa50001ff; valaddr_reg:x3; val_offset:80922*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80922*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26975:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0620bc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3d1377 and fs3 == 1 and fe3 == 0x4a and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0620bc; op2val:0x803d1377;
op3val:0xa50003ff; valaddr_reg:x3; val_offset:80925*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80925*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26976:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0620bc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3d1377 and fs3 == 1 and fe3 == 0x4a and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0620bc; op2val:0x803d1377;
op3val:0xa50007ff; valaddr_reg:x3; val_offset:80928*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80928*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26977:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0620bc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3d1377 and fs3 == 1 and fe3 == 0x4a and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0620bc; op2val:0x803d1377;
op3val:0xa5000fff; valaddr_reg:x3; val_offset:80931*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80931*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26978:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0620bc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3d1377 and fs3 == 1 and fe3 == 0x4a and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0620bc; op2val:0x803d1377;
op3val:0xa5001fff; valaddr_reg:x3; val_offset:80934*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80934*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26979:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0620bc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3d1377 and fs3 == 1 and fe3 == 0x4a and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0620bc; op2val:0x803d1377;
op3val:0xa5003fff; valaddr_reg:x3; val_offset:80937*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80937*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26980:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0620bc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3d1377 and fs3 == 1 and fe3 == 0x4a and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0620bc; op2val:0x803d1377;
op3val:0xa5007fff; valaddr_reg:x3; val_offset:80940*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80940*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26981:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0620bc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3d1377 and fs3 == 1 and fe3 == 0x4a and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0620bc; op2val:0x803d1377;
op3val:0xa500ffff; valaddr_reg:x3; val_offset:80943*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80943*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26982:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0620bc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3d1377 and fs3 == 1 and fe3 == 0x4a and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0620bc; op2val:0x803d1377;
op3val:0xa501ffff; valaddr_reg:x3; val_offset:80946*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80946*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26983:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0620bc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3d1377 and fs3 == 1 and fe3 == 0x4a and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0620bc; op2val:0x803d1377;
op3val:0xa503ffff; valaddr_reg:x3; val_offset:80949*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80949*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26984:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0620bc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3d1377 and fs3 == 1 and fe3 == 0x4a and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0620bc; op2val:0x803d1377;
op3val:0xa507ffff; valaddr_reg:x3; val_offset:80952*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80952*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26985:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0620bc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3d1377 and fs3 == 1 and fe3 == 0x4a and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0620bc; op2val:0x803d1377;
op3val:0xa50fffff; valaddr_reg:x3; val_offset:80955*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80955*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26986:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0620bc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3d1377 and fs3 == 1 and fe3 == 0x4a and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0620bc; op2val:0x803d1377;
op3val:0xa51fffff; valaddr_reg:x3; val_offset:80958*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80958*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26987:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0620bc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3d1377 and fs3 == 1 and fe3 == 0x4a and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0620bc; op2val:0x803d1377;
op3val:0xa53fffff; valaddr_reg:x3; val_offset:80961*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80961*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26988:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0620bc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3d1377 and fs3 == 1 and fe3 == 0x4a and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0620bc; op2val:0x803d1377;
op3val:0xa5400000; valaddr_reg:x3; val_offset:80964*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80964*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26989:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0620bc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3d1377 and fs3 == 1 and fe3 == 0x4a and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0620bc; op2val:0x803d1377;
op3val:0xa5600000; valaddr_reg:x3; val_offset:80967*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80967*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26990:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0620bc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3d1377 and fs3 == 1 and fe3 == 0x4a and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0620bc; op2val:0x803d1377;
op3val:0xa5700000; valaddr_reg:x3; val_offset:80970*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80970*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26991:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0620bc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3d1377 and fs3 == 1 and fe3 == 0x4a and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0620bc; op2val:0x803d1377;
op3val:0xa5780000; valaddr_reg:x3; val_offset:80973*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80973*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26992:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0620bc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3d1377 and fs3 == 1 and fe3 == 0x4a and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0620bc; op2val:0x803d1377;
op3val:0xa57c0000; valaddr_reg:x3; val_offset:80976*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80976*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26993:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0620bc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3d1377 and fs3 == 1 and fe3 == 0x4a and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0620bc; op2val:0x803d1377;
op3val:0xa57e0000; valaddr_reg:x3; val_offset:80979*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80979*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26994:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0620bc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3d1377 and fs3 == 1 and fe3 == 0x4a and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0620bc; op2val:0x803d1377;
op3val:0xa57f0000; valaddr_reg:x3; val_offset:80982*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80982*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26995:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0620bc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3d1377 and fs3 == 1 and fe3 == 0x4a and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0620bc; op2val:0x803d1377;
op3val:0xa57f8000; valaddr_reg:x3; val_offset:80985*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80985*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26996:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0620bc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3d1377 and fs3 == 1 and fe3 == 0x4a and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0620bc; op2val:0x803d1377;
op3val:0xa57fc000; valaddr_reg:x3; val_offset:80988*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80988*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26997:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0620bc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3d1377 and fs3 == 1 and fe3 == 0x4a and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0620bc; op2val:0x803d1377;
op3val:0xa57fe000; valaddr_reg:x3; val_offset:80991*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80991*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26998:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0620bc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3d1377 and fs3 == 1 and fe3 == 0x4a and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0620bc; op2val:0x803d1377;
op3val:0xa57ff000; valaddr_reg:x3; val_offset:80994*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80994*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26999:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0620bc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3d1377 and fs3 == 1 and fe3 == 0x4a and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0620bc; op2val:0x803d1377;
op3val:0xa57ff800; valaddr_reg:x3; val_offset:80997*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80997*0 + 3*210*FLEN/8, x4, x1, x2)

inst_27000:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0620bc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3d1377 and fs3 == 1 and fe3 == 0x4a and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0620bc; op2val:0x803d1377;
op3val:0xa57ffc00; valaddr_reg:x3; val_offset:81000*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81000*0 + 3*210*FLEN/8, x4, x1, x2)

inst_27001:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0620bc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3d1377 and fs3 == 1 and fe3 == 0x4a and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0620bc; op2val:0x803d1377;
op3val:0xa57ffe00; valaddr_reg:x3; val_offset:81003*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81003*0 + 3*210*FLEN/8, x4, x1, x2)

inst_27002:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0620bc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3d1377 and fs3 == 1 and fe3 == 0x4a and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0620bc; op2val:0x803d1377;
op3val:0xa57fff00; valaddr_reg:x3; val_offset:81006*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81006*0 + 3*210*FLEN/8, x4, x1, x2)

inst_27003:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0620bc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3d1377 and fs3 == 1 and fe3 == 0x4a and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0620bc; op2val:0x803d1377;
op3val:0xa57fff80; valaddr_reg:x3; val_offset:81009*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81009*0 + 3*210*FLEN/8, x4, x1, x2)

inst_27004:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0620bc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3d1377 and fs3 == 1 and fe3 == 0x4a and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0620bc; op2val:0x803d1377;
op3val:0xa57fffc0; valaddr_reg:x3; val_offset:81012*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81012*0 + 3*210*FLEN/8, x4, x1, x2)

inst_27005:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0620bc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3d1377 and fs3 == 1 and fe3 == 0x4a and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0620bc; op2val:0x803d1377;
op3val:0xa57fffe0; valaddr_reg:x3; val_offset:81015*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81015*0 + 3*210*FLEN/8, x4, x1, x2)

inst_27006:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0620bc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3d1377 and fs3 == 1 and fe3 == 0x4a and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0620bc; op2val:0x803d1377;
op3val:0xa57ffff0; valaddr_reg:x3; val_offset:81018*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81018*0 + 3*210*FLEN/8, x4, x1, x2)

inst_27007:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0620bc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3d1377 and fs3 == 1 and fe3 == 0x4a and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0620bc; op2val:0x803d1377;
op3val:0xa57ffff8; valaddr_reg:x3; val_offset:81021*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81021*0 + 3*210*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2131096884,32,FLEN)
NAN_BOXED(4007760,32,FLEN)
NAN_BOXED(1153433600,32,FLEN)
NAN_BOXED(2131096884,32,FLEN)
NAN_BOXED(4007760,32,FLEN)
NAN_BOXED(1155530752,32,FLEN)
NAN_BOXED(2131096884,32,FLEN)
NAN_BOXED(4007760,32,FLEN)
NAN_BOXED(1156579328,32,FLEN)
NAN_BOXED(2131096884,32,FLEN)
NAN_BOXED(4007760,32,FLEN)
NAN_BOXED(1157103616,32,FLEN)
NAN_BOXED(2131096884,32,FLEN)
NAN_BOXED(4007760,32,FLEN)
NAN_BOXED(1157365760,32,FLEN)
NAN_BOXED(2131096884,32,FLEN)
NAN_BOXED(4007760,32,FLEN)
NAN_BOXED(1157496832,32,FLEN)
NAN_BOXED(2131096884,32,FLEN)
NAN_BOXED(4007760,32,FLEN)
NAN_BOXED(1157562368,32,FLEN)
NAN_BOXED(2131096884,32,FLEN)
NAN_BOXED(4007760,32,FLEN)
NAN_BOXED(1157595136,32,FLEN)
NAN_BOXED(2131096884,32,FLEN)
NAN_BOXED(4007760,32,FLEN)
NAN_BOXED(1157611520,32,FLEN)
NAN_BOXED(2131096884,32,FLEN)
NAN_BOXED(4007760,32,FLEN)
NAN_BOXED(1157619712,32,FLEN)
NAN_BOXED(2131096884,32,FLEN)
NAN_BOXED(4007760,32,FLEN)
NAN_BOXED(1157623808,32,FLEN)
NAN_BOXED(2131096884,32,FLEN)
NAN_BOXED(4007760,32,FLEN)
NAN_BOXED(1157625856,32,FLEN)
NAN_BOXED(2131096884,32,FLEN)
NAN_BOXED(4007760,32,FLEN)
NAN_BOXED(1157626880,32,FLEN)
NAN_BOXED(2131096884,32,FLEN)
NAN_BOXED(4007760,32,FLEN)
NAN_BOXED(1157627392,32,FLEN)
NAN_BOXED(2131096884,32,FLEN)
NAN_BOXED(4007760,32,FLEN)
NAN_BOXED(1157627648,32,FLEN)
NAN_BOXED(2131096884,32,FLEN)
NAN_BOXED(4007760,32,FLEN)
NAN_BOXED(1157627776,32,FLEN)
NAN_BOXED(2131096884,32,FLEN)
NAN_BOXED(4007760,32,FLEN)
NAN_BOXED(1157627840,32,FLEN)
NAN_BOXED(2131096884,32,FLEN)
NAN_BOXED(4007760,32,FLEN)
NAN_BOXED(1157627872,32,FLEN)
NAN_BOXED(2131096884,32,FLEN)
NAN_BOXED(4007760,32,FLEN)
NAN_BOXED(1157627888,32,FLEN)
NAN_BOXED(2131096884,32,FLEN)
NAN_BOXED(4007760,32,FLEN)
NAN_BOXED(1157627896,32,FLEN)
NAN_BOXED(2131096884,32,FLEN)
NAN_BOXED(4007760,32,FLEN)
NAN_BOXED(1157627900,32,FLEN)
NAN_BOXED(2131096884,32,FLEN)
NAN_BOXED(4007760,32,FLEN)
NAN_BOXED(1157627902,32,FLEN)
NAN_BOXED(2131096884,32,FLEN)
NAN_BOXED(4007760,32,FLEN)
NAN_BOXED(1157627903,32,FLEN)
NAN_BOXED(2131107018,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872257,32,FLEN)
NAN_BOXED(2131107018,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872259,32,FLEN)
NAN_BOXED(2131107018,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872263,32,FLEN)
NAN_BOXED(2131107018,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2157549977,32,FLEN)
NAN_BOXED(2131107018,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2158269001,32,FLEN)
NAN_BOXED(2131107018,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2159227699,32,FLEN)
NAN_BOXED(2131107018,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2159467373,32,FLEN)
NAN_BOXED(2131107018,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2159786939,32,FLEN)
NAN_BOXED(2131107018,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2160346180,32,FLEN)
NAN_BOXED(2131107018,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2160905420,32,FLEN)
NAN_BOXED(2131107018,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2161864118,32,FLEN)
NAN_BOXED(2131107018,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2162583142,32,FLEN)
NAN_BOXED(2131107018,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2163062491,32,FLEN)
NAN_BOXED(2131107018,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260856,32,FLEN)
NAN_BOXED(2131107018,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260860,32,FLEN)
NAN_BOXED(2131107018,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260862,32,FLEN)
NAN_BOXED(2131107018,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340421632,32,FLEN)
NAN_BOXED(2131107018,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340421633,32,FLEN)
NAN_BOXED(2131107018,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340421635,32,FLEN)
NAN_BOXED(2131107018,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340421639,32,FLEN)
NAN_BOXED(2131107018,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340421647,32,FLEN)
NAN_BOXED(2131107018,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340421663,32,FLEN)
NAN_BOXED(2131107018,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340421695,32,FLEN)
NAN_BOXED(2131107018,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340421759,32,FLEN)
NAN_BOXED(2131107018,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340421887,32,FLEN)
NAN_BOXED(2131107018,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340422143,32,FLEN)
NAN_BOXED(2131107018,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340422655,32,FLEN)
NAN_BOXED(2131107018,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340423679,32,FLEN)
NAN_BOXED(2131107018,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340425727,32,FLEN)
NAN_BOXED(2131107018,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340429823,32,FLEN)
NAN_BOXED(2131107018,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340438015,32,FLEN)
NAN_BOXED(2131107018,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340454399,32,FLEN)
NAN_BOXED(2131107018,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340487167,32,FLEN)
NAN_BOXED(2131107018,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340552703,32,FLEN)
NAN_BOXED(2131107018,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340683775,32,FLEN)
NAN_BOXED(2131107018,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340945919,32,FLEN)
NAN_BOXED(2131107018,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2341470207,32,FLEN)
NAN_BOXED(2131107018,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2342518783,32,FLEN)
NAN_BOXED(2131107018,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2344615935,32,FLEN)
NAN_BOXED(2131107018,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2344615936,32,FLEN)
NAN_BOXED(2131107018,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2346713088,32,FLEN)
NAN_BOXED(2131107018,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2347761664,32,FLEN)
NAN_BOXED(2131107018,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348285952,32,FLEN)
NAN_BOXED(2131107018,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348548096,32,FLEN)
NAN_BOXED(2131107018,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348679168,32,FLEN)
NAN_BOXED(2131107018,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348744704,32,FLEN)
NAN_BOXED(2131107018,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348777472,32,FLEN)
NAN_BOXED(2131107018,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348793856,32,FLEN)
NAN_BOXED(2131107018,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348802048,32,FLEN)
NAN_BOXED(2131107018,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348806144,32,FLEN)
NAN_BOXED(2131107018,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348808192,32,FLEN)
NAN_BOXED(2131107018,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348809216,32,FLEN)
NAN_BOXED(2131107018,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348809728,32,FLEN)
NAN_BOXED(2131107018,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348809984,32,FLEN)
NAN_BOXED(2131107018,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348810112,32,FLEN)
NAN_BOXED(2131107018,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348810176,32,FLEN)
NAN_BOXED(2131107018,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348810208,32,FLEN)
NAN_BOXED(2131107018,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348810224,32,FLEN)
NAN_BOXED(2131107018,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348810232,32,FLEN)
NAN_BOXED(2131107018,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348810236,32,FLEN)
NAN_BOXED(2131107018,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348810238,32,FLEN)
NAN_BOXED(2131107018,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348810239,32,FLEN)
NAN_BOXED(2131108028,32,FLEN)
NAN_BOXED(2151486327,32,FLEN)
NAN_BOXED(2768240640,32,FLEN)
NAN_BOXED(2131108028,32,FLEN)
NAN_BOXED(2151486327,32,FLEN)
NAN_BOXED(2768240641,32,FLEN)
NAN_BOXED(2131108028,32,FLEN)
NAN_BOXED(2151486327,32,FLEN)
NAN_BOXED(2768240643,32,FLEN)
NAN_BOXED(2131108028,32,FLEN)
NAN_BOXED(2151486327,32,FLEN)
NAN_BOXED(2768240647,32,FLEN)
NAN_BOXED(2131108028,32,FLEN)
NAN_BOXED(2151486327,32,FLEN)
NAN_BOXED(2768240655,32,FLEN)
NAN_BOXED(2131108028,32,FLEN)
NAN_BOXED(2151486327,32,FLEN)
NAN_BOXED(2768240671,32,FLEN)
NAN_BOXED(2131108028,32,FLEN)
NAN_BOXED(2151486327,32,FLEN)
NAN_BOXED(2768240703,32,FLEN)
NAN_BOXED(2131108028,32,FLEN)
NAN_BOXED(2151486327,32,FLEN)
NAN_BOXED(2768240767,32,FLEN)
NAN_BOXED(2131108028,32,FLEN)
NAN_BOXED(2151486327,32,FLEN)
NAN_BOXED(2768240895,32,FLEN)
NAN_BOXED(2131108028,32,FLEN)
NAN_BOXED(2151486327,32,FLEN)
NAN_BOXED(2768241151,32,FLEN)
NAN_BOXED(2131108028,32,FLEN)
NAN_BOXED(2151486327,32,FLEN)
NAN_BOXED(2768241663,32,FLEN)
NAN_BOXED(2131108028,32,FLEN)
NAN_BOXED(2151486327,32,FLEN)
NAN_BOXED(2768242687,32,FLEN)
NAN_BOXED(2131108028,32,FLEN)
NAN_BOXED(2151486327,32,FLEN)
NAN_BOXED(2768244735,32,FLEN)
NAN_BOXED(2131108028,32,FLEN)
NAN_BOXED(2151486327,32,FLEN)
NAN_BOXED(2768248831,32,FLEN)
NAN_BOXED(2131108028,32,FLEN)
NAN_BOXED(2151486327,32,FLEN)
NAN_BOXED(2768257023,32,FLEN)
NAN_BOXED(2131108028,32,FLEN)
NAN_BOXED(2151486327,32,FLEN)
NAN_BOXED(2768273407,32,FLEN)
NAN_BOXED(2131108028,32,FLEN)
NAN_BOXED(2151486327,32,FLEN)
NAN_BOXED(2768306175,32,FLEN)
NAN_BOXED(2131108028,32,FLEN)
NAN_BOXED(2151486327,32,FLEN)
NAN_BOXED(2768371711,32,FLEN)
NAN_BOXED(2131108028,32,FLEN)
NAN_BOXED(2151486327,32,FLEN)
NAN_BOXED(2768502783,32,FLEN)
NAN_BOXED(2131108028,32,FLEN)
NAN_BOXED(2151486327,32,FLEN)
NAN_BOXED(2768764927,32,FLEN)
NAN_BOXED(2131108028,32,FLEN)
NAN_BOXED(2151486327,32,FLEN)
NAN_BOXED(2769289215,32,FLEN)
NAN_BOXED(2131108028,32,FLEN)
NAN_BOXED(2151486327,32,FLEN)
NAN_BOXED(2770337791,32,FLEN)
NAN_BOXED(2131108028,32,FLEN)
NAN_BOXED(2151486327,32,FLEN)
NAN_BOXED(2772434943,32,FLEN)
NAN_BOXED(2131108028,32,FLEN)
NAN_BOXED(2151486327,32,FLEN)
NAN_BOXED(2772434944,32,FLEN)
NAN_BOXED(2131108028,32,FLEN)
NAN_BOXED(2151486327,32,FLEN)
NAN_BOXED(2774532096,32,FLEN)
NAN_BOXED(2131108028,32,FLEN)
NAN_BOXED(2151486327,32,FLEN)
NAN_BOXED(2775580672,32,FLEN)
NAN_BOXED(2131108028,32,FLEN)
NAN_BOXED(2151486327,32,FLEN)
NAN_BOXED(2776104960,32,FLEN)
NAN_BOXED(2131108028,32,FLEN)
NAN_BOXED(2151486327,32,FLEN)
NAN_BOXED(2776367104,32,FLEN)
NAN_BOXED(2131108028,32,FLEN)
NAN_BOXED(2151486327,32,FLEN)
NAN_BOXED(2776498176,32,FLEN)
NAN_BOXED(2131108028,32,FLEN)
NAN_BOXED(2151486327,32,FLEN)
NAN_BOXED(2776563712,32,FLEN)
NAN_BOXED(2131108028,32,FLEN)
NAN_BOXED(2151486327,32,FLEN)
NAN_BOXED(2776596480,32,FLEN)
NAN_BOXED(2131108028,32,FLEN)
NAN_BOXED(2151486327,32,FLEN)
NAN_BOXED(2776612864,32,FLEN)
NAN_BOXED(2131108028,32,FLEN)
NAN_BOXED(2151486327,32,FLEN)
NAN_BOXED(2776621056,32,FLEN)
NAN_BOXED(2131108028,32,FLEN)
NAN_BOXED(2151486327,32,FLEN)
NAN_BOXED(2776625152,32,FLEN)
NAN_BOXED(2131108028,32,FLEN)
NAN_BOXED(2151486327,32,FLEN)
NAN_BOXED(2776627200,32,FLEN)
NAN_BOXED(2131108028,32,FLEN)
NAN_BOXED(2151486327,32,FLEN)
NAN_BOXED(2776628224,32,FLEN)
NAN_BOXED(2131108028,32,FLEN)
NAN_BOXED(2151486327,32,FLEN)
NAN_BOXED(2776628736,32,FLEN)
NAN_BOXED(2131108028,32,FLEN)
NAN_BOXED(2151486327,32,FLEN)
NAN_BOXED(2776628992,32,FLEN)
NAN_BOXED(2131108028,32,FLEN)
NAN_BOXED(2151486327,32,FLEN)
NAN_BOXED(2776629120,32,FLEN)
NAN_BOXED(2131108028,32,FLEN)
NAN_BOXED(2151486327,32,FLEN)
NAN_BOXED(2776629184,32,FLEN)
NAN_BOXED(2131108028,32,FLEN)
NAN_BOXED(2151486327,32,FLEN)
NAN_BOXED(2776629216,32,FLEN)
NAN_BOXED(2131108028,32,FLEN)
NAN_BOXED(2151486327,32,FLEN)
NAN_BOXED(2776629232,32,FLEN)
NAN_BOXED(2131108028,32,FLEN)
NAN_BOXED(2151486327,32,FLEN)
NAN_BOXED(2776629240,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
