
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:17:59 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_27520:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0764a0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0764a0; op2val:0x0;
op3val:0x7fffffc; valaddr_reg:x3; val_offset:82560*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82560*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27521:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0764a0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0764a0; op2val:0x0;
op3val:0x7fffffe; valaddr_reg:x3; val_offset:82563*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82563*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27522:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0764a0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0764a0; op2val:0x0;
op3val:0x7ffffff; valaddr_reg:x3; val_offset:82566*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82566*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27523:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x076c88 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3c7dd3 and fs3 == 0 and fe3 == 0x5c and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f076c88; op2val:0x3c7dd3;
op3val:0x2e000000; valaddr_reg:x3; val_offset:82569*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82569*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27524:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x076c88 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3c7dd3 and fs3 == 0 and fe3 == 0x5c and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f076c88; op2val:0x3c7dd3;
op3val:0x2e000001; valaddr_reg:x3; val_offset:82572*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82572*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27525:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x076c88 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3c7dd3 and fs3 == 0 and fe3 == 0x5c and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f076c88; op2val:0x3c7dd3;
op3val:0x2e000003; valaddr_reg:x3; val_offset:82575*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82575*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27526:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x076c88 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3c7dd3 and fs3 == 0 and fe3 == 0x5c and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f076c88; op2val:0x3c7dd3;
op3val:0x2e000007; valaddr_reg:x3; val_offset:82578*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82578*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27527:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x076c88 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3c7dd3 and fs3 == 0 and fe3 == 0x5c and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f076c88; op2val:0x3c7dd3;
op3val:0x2e00000f; valaddr_reg:x3; val_offset:82581*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82581*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27528:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x076c88 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3c7dd3 and fs3 == 0 and fe3 == 0x5c and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f076c88; op2val:0x3c7dd3;
op3val:0x2e00001f; valaddr_reg:x3; val_offset:82584*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82584*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27529:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x076c88 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3c7dd3 and fs3 == 0 and fe3 == 0x5c and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f076c88; op2val:0x3c7dd3;
op3val:0x2e00003f; valaddr_reg:x3; val_offset:82587*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82587*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27530:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x076c88 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3c7dd3 and fs3 == 0 and fe3 == 0x5c and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f076c88; op2val:0x3c7dd3;
op3val:0x2e00007f; valaddr_reg:x3; val_offset:82590*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82590*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27531:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x076c88 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3c7dd3 and fs3 == 0 and fe3 == 0x5c and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f076c88; op2val:0x3c7dd3;
op3val:0x2e0000ff; valaddr_reg:x3; val_offset:82593*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82593*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27532:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x076c88 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3c7dd3 and fs3 == 0 and fe3 == 0x5c and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f076c88; op2val:0x3c7dd3;
op3val:0x2e0001ff; valaddr_reg:x3; val_offset:82596*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82596*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27533:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x076c88 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3c7dd3 and fs3 == 0 and fe3 == 0x5c and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f076c88; op2val:0x3c7dd3;
op3val:0x2e0003ff; valaddr_reg:x3; val_offset:82599*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82599*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27534:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x076c88 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3c7dd3 and fs3 == 0 and fe3 == 0x5c and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f076c88; op2val:0x3c7dd3;
op3val:0x2e0007ff; valaddr_reg:x3; val_offset:82602*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82602*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27535:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x076c88 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3c7dd3 and fs3 == 0 and fe3 == 0x5c and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f076c88; op2val:0x3c7dd3;
op3val:0x2e000fff; valaddr_reg:x3; val_offset:82605*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82605*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27536:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x076c88 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3c7dd3 and fs3 == 0 and fe3 == 0x5c and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f076c88; op2val:0x3c7dd3;
op3val:0x2e001fff; valaddr_reg:x3; val_offset:82608*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82608*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27537:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x076c88 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3c7dd3 and fs3 == 0 and fe3 == 0x5c and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f076c88; op2val:0x3c7dd3;
op3val:0x2e003fff; valaddr_reg:x3; val_offset:82611*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82611*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27538:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x076c88 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3c7dd3 and fs3 == 0 and fe3 == 0x5c and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f076c88; op2val:0x3c7dd3;
op3val:0x2e007fff; valaddr_reg:x3; val_offset:82614*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82614*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27539:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x076c88 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3c7dd3 and fs3 == 0 and fe3 == 0x5c and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f076c88; op2val:0x3c7dd3;
op3val:0x2e00ffff; valaddr_reg:x3; val_offset:82617*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82617*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27540:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x076c88 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3c7dd3 and fs3 == 0 and fe3 == 0x5c and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f076c88; op2val:0x3c7dd3;
op3val:0x2e01ffff; valaddr_reg:x3; val_offset:82620*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82620*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27541:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x076c88 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3c7dd3 and fs3 == 0 and fe3 == 0x5c and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f076c88; op2val:0x3c7dd3;
op3val:0x2e03ffff; valaddr_reg:x3; val_offset:82623*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82623*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27542:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x076c88 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3c7dd3 and fs3 == 0 and fe3 == 0x5c and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f076c88; op2val:0x3c7dd3;
op3val:0x2e07ffff; valaddr_reg:x3; val_offset:82626*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82626*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27543:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x076c88 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3c7dd3 and fs3 == 0 and fe3 == 0x5c and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f076c88; op2val:0x3c7dd3;
op3val:0x2e0fffff; valaddr_reg:x3; val_offset:82629*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82629*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27544:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x076c88 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3c7dd3 and fs3 == 0 and fe3 == 0x5c and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f076c88; op2val:0x3c7dd3;
op3val:0x2e1fffff; valaddr_reg:x3; val_offset:82632*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82632*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27545:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x076c88 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3c7dd3 and fs3 == 0 and fe3 == 0x5c and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f076c88; op2val:0x3c7dd3;
op3val:0x2e3fffff; valaddr_reg:x3; val_offset:82635*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82635*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27546:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x076c88 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3c7dd3 and fs3 == 0 and fe3 == 0x5c and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f076c88; op2val:0x3c7dd3;
op3val:0x2e400000; valaddr_reg:x3; val_offset:82638*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82638*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27547:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x076c88 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3c7dd3 and fs3 == 0 and fe3 == 0x5c and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f076c88; op2val:0x3c7dd3;
op3val:0x2e600000; valaddr_reg:x3; val_offset:82641*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82641*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27548:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x076c88 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3c7dd3 and fs3 == 0 and fe3 == 0x5c and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f076c88; op2val:0x3c7dd3;
op3val:0x2e700000; valaddr_reg:x3; val_offset:82644*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82644*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27549:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x076c88 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3c7dd3 and fs3 == 0 and fe3 == 0x5c and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f076c88; op2val:0x3c7dd3;
op3val:0x2e780000; valaddr_reg:x3; val_offset:82647*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82647*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27550:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x076c88 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3c7dd3 and fs3 == 0 and fe3 == 0x5c and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f076c88; op2val:0x3c7dd3;
op3val:0x2e7c0000; valaddr_reg:x3; val_offset:82650*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82650*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27551:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x076c88 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3c7dd3 and fs3 == 0 and fe3 == 0x5c and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f076c88; op2val:0x3c7dd3;
op3val:0x2e7e0000; valaddr_reg:x3; val_offset:82653*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82653*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27552:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x076c88 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3c7dd3 and fs3 == 0 and fe3 == 0x5c and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f076c88; op2val:0x3c7dd3;
op3val:0x2e7f0000; valaddr_reg:x3; val_offset:82656*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82656*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27553:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x076c88 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3c7dd3 and fs3 == 0 and fe3 == 0x5c and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f076c88; op2val:0x3c7dd3;
op3val:0x2e7f8000; valaddr_reg:x3; val_offset:82659*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82659*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27554:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x076c88 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3c7dd3 and fs3 == 0 and fe3 == 0x5c and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f076c88; op2val:0x3c7dd3;
op3val:0x2e7fc000; valaddr_reg:x3; val_offset:82662*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82662*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27555:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x076c88 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3c7dd3 and fs3 == 0 and fe3 == 0x5c and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f076c88; op2val:0x3c7dd3;
op3val:0x2e7fe000; valaddr_reg:x3; val_offset:82665*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82665*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27556:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x076c88 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3c7dd3 and fs3 == 0 and fe3 == 0x5c and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f076c88; op2val:0x3c7dd3;
op3val:0x2e7ff000; valaddr_reg:x3; val_offset:82668*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82668*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27557:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x076c88 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3c7dd3 and fs3 == 0 and fe3 == 0x5c and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f076c88; op2val:0x3c7dd3;
op3val:0x2e7ff800; valaddr_reg:x3; val_offset:82671*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82671*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27558:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x076c88 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3c7dd3 and fs3 == 0 and fe3 == 0x5c and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f076c88; op2val:0x3c7dd3;
op3val:0x2e7ffc00; valaddr_reg:x3; val_offset:82674*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82674*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27559:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x076c88 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3c7dd3 and fs3 == 0 and fe3 == 0x5c and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f076c88; op2val:0x3c7dd3;
op3val:0x2e7ffe00; valaddr_reg:x3; val_offset:82677*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82677*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27560:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x076c88 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3c7dd3 and fs3 == 0 and fe3 == 0x5c and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f076c88; op2val:0x3c7dd3;
op3val:0x2e7fff00; valaddr_reg:x3; val_offset:82680*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82680*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27561:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x076c88 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3c7dd3 and fs3 == 0 and fe3 == 0x5c and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f076c88; op2val:0x3c7dd3;
op3val:0x2e7fff80; valaddr_reg:x3; val_offset:82683*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82683*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27562:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x076c88 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3c7dd3 and fs3 == 0 and fe3 == 0x5c and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f076c88; op2val:0x3c7dd3;
op3val:0x2e7fffc0; valaddr_reg:x3; val_offset:82686*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82686*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27563:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x076c88 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3c7dd3 and fs3 == 0 and fe3 == 0x5c and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f076c88; op2val:0x3c7dd3;
op3val:0x2e7fffe0; valaddr_reg:x3; val_offset:82689*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82689*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27564:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x076c88 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3c7dd3 and fs3 == 0 and fe3 == 0x5c and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f076c88; op2val:0x3c7dd3;
op3val:0x2e7ffff0; valaddr_reg:x3; val_offset:82692*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82692*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27565:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x076c88 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3c7dd3 and fs3 == 0 and fe3 == 0x5c and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f076c88; op2val:0x3c7dd3;
op3val:0x2e7ffff8; valaddr_reg:x3; val_offset:82695*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82695*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27566:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x076c88 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3c7dd3 and fs3 == 0 and fe3 == 0x5c and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f076c88; op2val:0x3c7dd3;
op3val:0x2e7ffffc; valaddr_reg:x3; val_offset:82698*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82698*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27567:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x076c88 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3c7dd3 and fs3 == 0 and fe3 == 0x5c and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f076c88; op2val:0x3c7dd3;
op3val:0x2e7ffffe; valaddr_reg:x3; val_offset:82701*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82701*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27568:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x076c88 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3c7dd3 and fs3 == 0 and fe3 == 0x5c and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f076c88; op2val:0x3c7dd3;
op3val:0x2e7fffff; valaddr_reg:x3; val_offset:82704*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82704*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27569:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x076c88 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3c7dd3 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f076c88; op2val:0x3c7dd3;
op3val:0x3f800001; valaddr_reg:x3; val_offset:82707*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82707*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27570:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x076c88 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3c7dd3 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f076c88; op2val:0x3c7dd3;
op3val:0x3f800003; valaddr_reg:x3; val_offset:82710*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82710*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27571:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x076c88 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3c7dd3 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f076c88; op2val:0x3c7dd3;
op3val:0x3f800007; valaddr_reg:x3; val_offset:82713*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82713*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27572:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x076c88 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3c7dd3 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f076c88; op2val:0x3c7dd3;
op3val:0x3f999999; valaddr_reg:x3; val_offset:82716*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82716*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27573:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x076c88 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3c7dd3 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f076c88; op2val:0x3c7dd3;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:82719*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82719*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27574:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x076c88 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3c7dd3 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f076c88; op2val:0x3c7dd3;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:82722*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82722*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27575:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x076c88 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3c7dd3 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f076c88; op2val:0x3c7dd3;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:82725*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82725*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27576:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x076c88 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3c7dd3 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f076c88; op2val:0x3c7dd3;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:82728*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82728*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27577:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x076c88 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3c7dd3 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f076c88; op2val:0x3c7dd3;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:82731*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82731*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27578:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x076c88 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3c7dd3 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f076c88; op2val:0x3c7dd3;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:82734*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82734*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27579:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x076c88 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3c7dd3 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f076c88; op2val:0x3c7dd3;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:82737*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82737*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27580:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x076c88 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3c7dd3 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f076c88; op2val:0x3c7dd3;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:82740*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82740*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27581:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x076c88 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3c7dd3 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f076c88; op2val:0x3c7dd3;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:82743*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82743*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27582:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x076c88 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3c7dd3 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f076c88; op2val:0x3c7dd3;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:82746*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82746*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27583:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x076c88 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3c7dd3 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f076c88; op2val:0x3c7dd3;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:82749*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82749*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27584:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x076c88 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3c7dd3 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f076c88; op2val:0x3c7dd3;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:82752*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82752*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27585:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x079bc3 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x71a308 and fs3 == 1 and fe3 == 0xdd and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f079bc3; op2val:0xbff1a308;
op3val:0xee800000; valaddr_reg:x3; val_offset:82755*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82755*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27586:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x079bc3 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x71a308 and fs3 == 1 and fe3 == 0xdd and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f079bc3; op2val:0xbff1a308;
op3val:0xee800001; valaddr_reg:x3; val_offset:82758*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82758*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27587:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x079bc3 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x71a308 and fs3 == 1 and fe3 == 0xdd and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f079bc3; op2val:0xbff1a308;
op3val:0xee800003; valaddr_reg:x3; val_offset:82761*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82761*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27588:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x079bc3 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x71a308 and fs3 == 1 and fe3 == 0xdd and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f079bc3; op2val:0xbff1a308;
op3val:0xee800007; valaddr_reg:x3; val_offset:82764*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82764*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27589:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x079bc3 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x71a308 and fs3 == 1 and fe3 == 0xdd and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f079bc3; op2val:0xbff1a308;
op3val:0xee80000f; valaddr_reg:x3; val_offset:82767*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82767*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27590:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x079bc3 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x71a308 and fs3 == 1 and fe3 == 0xdd and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f079bc3; op2val:0xbff1a308;
op3val:0xee80001f; valaddr_reg:x3; val_offset:82770*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82770*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27591:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x079bc3 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x71a308 and fs3 == 1 and fe3 == 0xdd and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f079bc3; op2val:0xbff1a308;
op3val:0xee80003f; valaddr_reg:x3; val_offset:82773*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82773*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27592:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x079bc3 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x71a308 and fs3 == 1 and fe3 == 0xdd and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f079bc3; op2val:0xbff1a308;
op3val:0xee80007f; valaddr_reg:x3; val_offset:82776*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82776*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27593:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x079bc3 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x71a308 and fs3 == 1 and fe3 == 0xdd and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f079bc3; op2val:0xbff1a308;
op3val:0xee8000ff; valaddr_reg:x3; val_offset:82779*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82779*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27594:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x079bc3 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x71a308 and fs3 == 1 and fe3 == 0xdd and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f079bc3; op2val:0xbff1a308;
op3val:0xee8001ff; valaddr_reg:x3; val_offset:82782*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82782*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27595:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x079bc3 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x71a308 and fs3 == 1 and fe3 == 0xdd and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f079bc3; op2val:0xbff1a308;
op3val:0xee8003ff; valaddr_reg:x3; val_offset:82785*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82785*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27596:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x079bc3 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x71a308 and fs3 == 1 and fe3 == 0xdd and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f079bc3; op2val:0xbff1a308;
op3val:0xee8007ff; valaddr_reg:x3; val_offset:82788*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82788*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27597:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x079bc3 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x71a308 and fs3 == 1 and fe3 == 0xdd and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f079bc3; op2val:0xbff1a308;
op3val:0xee800fff; valaddr_reg:x3; val_offset:82791*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82791*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27598:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x079bc3 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x71a308 and fs3 == 1 and fe3 == 0xdd and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f079bc3; op2val:0xbff1a308;
op3val:0xee801fff; valaddr_reg:x3; val_offset:82794*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82794*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27599:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x079bc3 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x71a308 and fs3 == 1 and fe3 == 0xdd and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f079bc3; op2val:0xbff1a308;
op3val:0xee803fff; valaddr_reg:x3; val_offset:82797*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82797*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27600:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x079bc3 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x71a308 and fs3 == 1 and fe3 == 0xdd and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f079bc3; op2val:0xbff1a308;
op3val:0xee807fff; valaddr_reg:x3; val_offset:82800*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82800*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27601:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x079bc3 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x71a308 and fs3 == 1 and fe3 == 0xdd and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f079bc3; op2val:0xbff1a308;
op3val:0xee80ffff; valaddr_reg:x3; val_offset:82803*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82803*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27602:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x079bc3 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x71a308 and fs3 == 1 and fe3 == 0xdd and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f079bc3; op2val:0xbff1a308;
op3val:0xee81ffff; valaddr_reg:x3; val_offset:82806*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82806*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27603:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x079bc3 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x71a308 and fs3 == 1 and fe3 == 0xdd and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f079bc3; op2val:0xbff1a308;
op3val:0xee83ffff; valaddr_reg:x3; val_offset:82809*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82809*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27604:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x079bc3 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x71a308 and fs3 == 1 and fe3 == 0xdd and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f079bc3; op2val:0xbff1a308;
op3val:0xee87ffff; valaddr_reg:x3; val_offset:82812*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82812*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27605:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x079bc3 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x71a308 and fs3 == 1 and fe3 == 0xdd and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f079bc3; op2val:0xbff1a308;
op3val:0xee8fffff; valaddr_reg:x3; val_offset:82815*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82815*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27606:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x079bc3 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x71a308 and fs3 == 1 and fe3 == 0xdd and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f079bc3; op2val:0xbff1a308;
op3val:0xee9fffff; valaddr_reg:x3; val_offset:82818*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82818*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27607:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x079bc3 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x71a308 and fs3 == 1 and fe3 == 0xdd and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f079bc3; op2val:0xbff1a308;
op3val:0xeebfffff; valaddr_reg:x3; val_offset:82821*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82821*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27608:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x079bc3 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x71a308 and fs3 == 1 and fe3 == 0xdd and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f079bc3; op2val:0xbff1a308;
op3val:0xeec00000; valaddr_reg:x3; val_offset:82824*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82824*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27609:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x079bc3 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x71a308 and fs3 == 1 and fe3 == 0xdd and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f079bc3; op2val:0xbff1a308;
op3val:0xeee00000; valaddr_reg:x3; val_offset:82827*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82827*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27610:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x079bc3 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x71a308 and fs3 == 1 and fe3 == 0xdd and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f079bc3; op2val:0xbff1a308;
op3val:0xeef00000; valaddr_reg:x3; val_offset:82830*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82830*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27611:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x079bc3 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x71a308 and fs3 == 1 and fe3 == 0xdd and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f079bc3; op2val:0xbff1a308;
op3val:0xeef80000; valaddr_reg:x3; val_offset:82833*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82833*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27612:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x079bc3 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x71a308 and fs3 == 1 and fe3 == 0xdd and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f079bc3; op2val:0xbff1a308;
op3val:0xeefc0000; valaddr_reg:x3; val_offset:82836*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82836*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27613:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x079bc3 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x71a308 and fs3 == 1 and fe3 == 0xdd and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f079bc3; op2val:0xbff1a308;
op3val:0xeefe0000; valaddr_reg:x3; val_offset:82839*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82839*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27614:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x079bc3 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x71a308 and fs3 == 1 and fe3 == 0xdd and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f079bc3; op2val:0xbff1a308;
op3val:0xeeff0000; valaddr_reg:x3; val_offset:82842*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82842*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27615:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x079bc3 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x71a308 and fs3 == 1 and fe3 == 0xdd and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f079bc3; op2val:0xbff1a308;
op3val:0xeeff8000; valaddr_reg:x3; val_offset:82845*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82845*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27616:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x079bc3 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x71a308 and fs3 == 1 and fe3 == 0xdd and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f079bc3; op2val:0xbff1a308;
op3val:0xeeffc000; valaddr_reg:x3; val_offset:82848*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82848*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27617:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x079bc3 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x71a308 and fs3 == 1 and fe3 == 0xdd and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f079bc3; op2val:0xbff1a308;
op3val:0xeeffe000; valaddr_reg:x3; val_offset:82851*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82851*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27618:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x079bc3 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x71a308 and fs3 == 1 and fe3 == 0xdd and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f079bc3; op2val:0xbff1a308;
op3val:0xeefff000; valaddr_reg:x3; val_offset:82854*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82854*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27619:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x079bc3 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x71a308 and fs3 == 1 and fe3 == 0xdd and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f079bc3; op2val:0xbff1a308;
op3val:0xeefff800; valaddr_reg:x3; val_offset:82857*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82857*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27620:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x079bc3 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x71a308 and fs3 == 1 and fe3 == 0xdd and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f079bc3; op2val:0xbff1a308;
op3val:0xeefffc00; valaddr_reg:x3; val_offset:82860*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82860*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27621:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x079bc3 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x71a308 and fs3 == 1 and fe3 == 0xdd and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f079bc3; op2val:0xbff1a308;
op3val:0xeefffe00; valaddr_reg:x3; val_offset:82863*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82863*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27622:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x079bc3 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x71a308 and fs3 == 1 and fe3 == 0xdd and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f079bc3; op2val:0xbff1a308;
op3val:0xeeffff00; valaddr_reg:x3; val_offset:82866*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82866*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27623:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x079bc3 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x71a308 and fs3 == 1 and fe3 == 0xdd and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f079bc3; op2val:0xbff1a308;
op3val:0xeeffff80; valaddr_reg:x3; val_offset:82869*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82869*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27624:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x079bc3 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x71a308 and fs3 == 1 and fe3 == 0xdd and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f079bc3; op2val:0xbff1a308;
op3val:0xeeffffc0; valaddr_reg:x3; val_offset:82872*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82872*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27625:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x079bc3 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x71a308 and fs3 == 1 and fe3 == 0xdd and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f079bc3; op2val:0xbff1a308;
op3val:0xeeffffe0; valaddr_reg:x3; val_offset:82875*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82875*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27626:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x079bc3 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x71a308 and fs3 == 1 and fe3 == 0xdd and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f079bc3; op2val:0xbff1a308;
op3val:0xeefffff0; valaddr_reg:x3; val_offset:82878*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82878*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27627:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x079bc3 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x71a308 and fs3 == 1 and fe3 == 0xdd and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f079bc3; op2val:0xbff1a308;
op3val:0xeefffff8; valaddr_reg:x3; val_offset:82881*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82881*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27628:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x079bc3 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x71a308 and fs3 == 1 and fe3 == 0xdd and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f079bc3; op2val:0xbff1a308;
op3val:0xeefffffc; valaddr_reg:x3; val_offset:82884*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82884*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27629:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x079bc3 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x71a308 and fs3 == 1 and fe3 == 0xdd and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f079bc3; op2val:0xbff1a308;
op3val:0xeefffffe; valaddr_reg:x3; val_offset:82887*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82887*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27630:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x079bc3 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x71a308 and fs3 == 1 and fe3 == 0xdd and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f079bc3; op2val:0xbff1a308;
op3val:0xeeffffff; valaddr_reg:x3; val_offset:82890*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82890*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27631:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x079bc3 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x71a308 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f079bc3; op2val:0xbff1a308;
op3val:0xff000001; valaddr_reg:x3; val_offset:82893*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82893*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27632:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x079bc3 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x71a308 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f079bc3; op2val:0xbff1a308;
op3val:0xff000003; valaddr_reg:x3; val_offset:82896*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82896*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27633:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x079bc3 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x71a308 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f079bc3; op2val:0xbff1a308;
op3val:0xff000007; valaddr_reg:x3; val_offset:82899*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82899*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27634:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x079bc3 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x71a308 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f079bc3; op2val:0xbff1a308;
op3val:0xff199999; valaddr_reg:x3; val_offset:82902*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82902*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27635:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x079bc3 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x71a308 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f079bc3; op2val:0xbff1a308;
op3val:0xff249249; valaddr_reg:x3; val_offset:82905*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82905*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27636:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x079bc3 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x71a308 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f079bc3; op2val:0xbff1a308;
op3val:0xff333333; valaddr_reg:x3; val_offset:82908*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82908*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27637:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x079bc3 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x71a308 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f079bc3; op2val:0xbff1a308;
op3val:0xff36db6d; valaddr_reg:x3; val_offset:82911*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82911*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27638:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x079bc3 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x71a308 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f079bc3; op2val:0xbff1a308;
op3val:0xff3bbbbb; valaddr_reg:x3; val_offset:82914*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82914*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27639:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x079bc3 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x71a308 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f079bc3; op2val:0xbff1a308;
op3val:0xff444444; valaddr_reg:x3; val_offset:82917*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82917*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27640:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x079bc3 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x71a308 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f079bc3; op2val:0xbff1a308;
op3val:0xff4ccccc; valaddr_reg:x3; val_offset:82920*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82920*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27641:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x079bc3 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x71a308 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f079bc3; op2val:0xbff1a308;
op3val:0xff5b6db6; valaddr_reg:x3; val_offset:82923*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82923*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27642:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x079bc3 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x71a308 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f079bc3; op2val:0xbff1a308;
op3val:0xff666666; valaddr_reg:x3; val_offset:82926*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82926*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27643:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x079bc3 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x71a308 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f079bc3; op2val:0xbff1a308;
op3val:0xff6db6db; valaddr_reg:x3; val_offset:82929*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82929*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27644:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x079bc3 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x71a308 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f079bc3; op2val:0xbff1a308;
op3val:0xff7ffff8; valaddr_reg:x3; val_offset:82932*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82932*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27645:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x079bc3 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x71a308 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f079bc3; op2val:0xbff1a308;
op3val:0xff7ffffc; valaddr_reg:x3; val_offset:82935*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82935*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27646:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x079bc3 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x71a308 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f079bc3; op2val:0xbff1a308;
op3val:0xff7ffffe; valaddr_reg:x3; val_offset:82938*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82938*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27647:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07a8e7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07a8e7; op2val:0x80000000;
op3val:0x80000001; valaddr_reg:x3; val_offset:82941*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82941*0 + 3*215*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2131190944,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134217724,32,FLEN)
NAN_BOXED(2131190944,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134217726,32,FLEN)
NAN_BOXED(2131190944,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134217727,32,FLEN)
NAN_BOXED(2131192968,32,FLEN)
NAN_BOXED(3964371,32,FLEN)
NAN_BOXED(771751936,32,FLEN)
NAN_BOXED(2131192968,32,FLEN)
NAN_BOXED(3964371,32,FLEN)
NAN_BOXED(771751937,32,FLEN)
NAN_BOXED(2131192968,32,FLEN)
NAN_BOXED(3964371,32,FLEN)
NAN_BOXED(771751939,32,FLEN)
NAN_BOXED(2131192968,32,FLEN)
NAN_BOXED(3964371,32,FLEN)
NAN_BOXED(771751943,32,FLEN)
NAN_BOXED(2131192968,32,FLEN)
NAN_BOXED(3964371,32,FLEN)
NAN_BOXED(771751951,32,FLEN)
NAN_BOXED(2131192968,32,FLEN)
NAN_BOXED(3964371,32,FLEN)
NAN_BOXED(771751967,32,FLEN)
NAN_BOXED(2131192968,32,FLEN)
NAN_BOXED(3964371,32,FLEN)
NAN_BOXED(771751999,32,FLEN)
NAN_BOXED(2131192968,32,FLEN)
NAN_BOXED(3964371,32,FLEN)
NAN_BOXED(771752063,32,FLEN)
NAN_BOXED(2131192968,32,FLEN)
NAN_BOXED(3964371,32,FLEN)
NAN_BOXED(771752191,32,FLEN)
NAN_BOXED(2131192968,32,FLEN)
NAN_BOXED(3964371,32,FLEN)
NAN_BOXED(771752447,32,FLEN)
NAN_BOXED(2131192968,32,FLEN)
NAN_BOXED(3964371,32,FLEN)
NAN_BOXED(771752959,32,FLEN)
NAN_BOXED(2131192968,32,FLEN)
NAN_BOXED(3964371,32,FLEN)
NAN_BOXED(771753983,32,FLEN)
NAN_BOXED(2131192968,32,FLEN)
NAN_BOXED(3964371,32,FLEN)
NAN_BOXED(771756031,32,FLEN)
NAN_BOXED(2131192968,32,FLEN)
NAN_BOXED(3964371,32,FLEN)
NAN_BOXED(771760127,32,FLEN)
NAN_BOXED(2131192968,32,FLEN)
NAN_BOXED(3964371,32,FLEN)
NAN_BOXED(771768319,32,FLEN)
NAN_BOXED(2131192968,32,FLEN)
NAN_BOXED(3964371,32,FLEN)
NAN_BOXED(771784703,32,FLEN)
NAN_BOXED(2131192968,32,FLEN)
NAN_BOXED(3964371,32,FLEN)
NAN_BOXED(771817471,32,FLEN)
NAN_BOXED(2131192968,32,FLEN)
NAN_BOXED(3964371,32,FLEN)
NAN_BOXED(771883007,32,FLEN)
NAN_BOXED(2131192968,32,FLEN)
NAN_BOXED(3964371,32,FLEN)
NAN_BOXED(772014079,32,FLEN)
NAN_BOXED(2131192968,32,FLEN)
NAN_BOXED(3964371,32,FLEN)
NAN_BOXED(772276223,32,FLEN)
NAN_BOXED(2131192968,32,FLEN)
NAN_BOXED(3964371,32,FLEN)
NAN_BOXED(772800511,32,FLEN)
NAN_BOXED(2131192968,32,FLEN)
NAN_BOXED(3964371,32,FLEN)
NAN_BOXED(773849087,32,FLEN)
NAN_BOXED(2131192968,32,FLEN)
NAN_BOXED(3964371,32,FLEN)
NAN_BOXED(775946239,32,FLEN)
NAN_BOXED(2131192968,32,FLEN)
NAN_BOXED(3964371,32,FLEN)
NAN_BOXED(775946240,32,FLEN)
NAN_BOXED(2131192968,32,FLEN)
NAN_BOXED(3964371,32,FLEN)
NAN_BOXED(778043392,32,FLEN)
NAN_BOXED(2131192968,32,FLEN)
NAN_BOXED(3964371,32,FLEN)
NAN_BOXED(779091968,32,FLEN)
NAN_BOXED(2131192968,32,FLEN)
NAN_BOXED(3964371,32,FLEN)
NAN_BOXED(779616256,32,FLEN)
NAN_BOXED(2131192968,32,FLEN)
NAN_BOXED(3964371,32,FLEN)
NAN_BOXED(779878400,32,FLEN)
NAN_BOXED(2131192968,32,FLEN)
NAN_BOXED(3964371,32,FLEN)
NAN_BOXED(780009472,32,FLEN)
NAN_BOXED(2131192968,32,FLEN)
NAN_BOXED(3964371,32,FLEN)
NAN_BOXED(780075008,32,FLEN)
NAN_BOXED(2131192968,32,FLEN)
NAN_BOXED(3964371,32,FLEN)
NAN_BOXED(780107776,32,FLEN)
NAN_BOXED(2131192968,32,FLEN)
NAN_BOXED(3964371,32,FLEN)
NAN_BOXED(780124160,32,FLEN)
NAN_BOXED(2131192968,32,FLEN)
NAN_BOXED(3964371,32,FLEN)
NAN_BOXED(780132352,32,FLEN)
NAN_BOXED(2131192968,32,FLEN)
NAN_BOXED(3964371,32,FLEN)
NAN_BOXED(780136448,32,FLEN)
NAN_BOXED(2131192968,32,FLEN)
NAN_BOXED(3964371,32,FLEN)
NAN_BOXED(780138496,32,FLEN)
NAN_BOXED(2131192968,32,FLEN)
NAN_BOXED(3964371,32,FLEN)
NAN_BOXED(780139520,32,FLEN)
NAN_BOXED(2131192968,32,FLEN)
NAN_BOXED(3964371,32,FLEN)
NAN_BOXED(780140032,32,FLEN)
NAN_BOXED(2131192968,32,FLEN)
NAN_BOXED(3964371,32,FLEN)
NAN_BOXED(780140288,32,FLEN)
NAN_BOXED(2131192968,32,FLEN)
NAN_BOXED(3964371,32,FLEN)
NAN_BOXED(780140416,32,FLEN)
NAN_BOXED(2131192968,32,FLEN)
NAN_BOXED(3964371,32,FLEN)
NAN_BOXED(780140480,32,FLEN)
NAN_BOXED(2131192968,32,FLEN)
NAN_BOXED(3964371,32,FLEN)
NAN_BOXED(780140512,32,FLEN)
NAN_BOXED(2131192968,32,FLEN)
NAN_BOXED(3964371,32,FLEN)
NAN_BOXED(780140528,32,FLEN)
NAN_BOXED(2131192968,32,FLEN)
NAN_BOXED(3964371,32,FLEN)
NAN_BOXED(780140536,32,FLEN)
NAN_BOXED(2131192968,32,FLEN)
NAN_BOXED(3964371,32,FLEN)
NAN_BOXED(780140540,32,FLEN)
NAN_BOXED(2131192968,32,FLEN)
NAN_BOXED(3964371,32,FLEN)
NAN_BOXED(780140542,32,FLEN)
NAN_BOXED(2131192968,32,FLEN)
NAN_BOXED(3964371,32,FLEN)
NAN_BOXED(780140543,32,FLEN)
NAN_BOXED(2131192968,32,FLEN)
NAN_BOXED(3964371,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2131192968,32,FLEN)
NAN_BOXED(3964371,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2131192968,32,FLEN)
NAN_BOXED(3964371,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2131192968,32,FLEN)
NAN_BOXED(3964371,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2131192968,32,FLEN)
NAN_BOXED(3964371,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2131192968,32,FLEN)
NAN_BOXED(3964371,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2131192968,32,FLEN)
NAN_BOXED(3964371,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2131192968,32,FLEN)
NAN_BOXED(3964371,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2131192968,32,FLEN)
NAN_BOXED(3964371,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2131192968,32,FLEN)
NAN_BOXED(3964371,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2131192968,32,FLEN)
NAN_BOXED(3964371,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2131192968,32,FLEN)
NAN_BOXED(3964371,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2131192968,32,FLEN)
NAN_BOXED(3964371,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2131192968,32,FLEN)
NAN_BOXED(3964371,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2131192968,32,FLEN)
NAN_BOXED(3964371,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2131192968,32,FLEN)
NAN_BOXED(3964371,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2131205059,32,FLEN)
NAN_BOXED(3220284168,32,FLEN)
NAN_BOXED(4001366016,32,FLEN)
NAN_BOXED(2131205059,32,FLEN)
NAN_BOXED(3220284168,32,FLEN)
NAN_BOXED(4001366017,32,FLEN)
NAN_BOXED(2131205059,32,FLEN)
NAN_BOXED(3220284168,32,FLEN)
NAN_BOXED(4001366019,32,FLEN)
NAN_BOXED(2131205059,32,FLEN)
NAN_BOXED(3220284168,32,FLEN)
NAN_BOXED(4001366023,32,FLEN)
NAN_BOXED(2131205059,32,FLEN)
NAN_BOXED(3220284168,32,FLEN)
NAN_BOXED(4001366031,32,FLEN)
NAN_BOXED(2131205059,32,FLEN)
NAN_BOXED(3220284168,32,FLEN)
NAN_BOXED(4001366047,32,FLEN)
NAN_BOXED(2131205059,32,FLEN)
NAN_BOXED(3220284168,32,FLEN)
NAN_BOXED(4001366079,32,FLEN)
NAN_BOXED(2131205059,32,FLEN)
NAN_BOXED(3220284168,32,FLEN)
NAN_BOXED(4001366143,32,FLEN)
NAN_BOXED(2131205059,32,FLEN)
NAN_BOXED(3220284168,32,FLEN)
NAN_BOXED(4001366271,32,FLEN)
NAN_BOXED(2131205059,32,FLEN)
NAN_BOXED(3220284168,32,FLEN)
NAN_BOXED(4001366527,32,FLEN)
NAN_BOXED(2131205059,32,FLEN)
NAN_BOXED(3220284168,32,FLEN)
NAN_BOXED(4001367039,32,FLEN)
NAN_BOXED(2131205059,32,FLEN)
NAN_BOXED(3220284168,32,FLEN)
NAN_BOXED(4001368063,32,FLEN)
NAN_BOXED(2131205059,32,FLEN)
NAN_BOXED(3220284168,32,FLEN)
NAN_BOXED(4001370111,32,FLEN)
NAN_BOXED(2131205059,32,FLEN)
NAN_BOXED(3220284168,32,FLEN)
NAN_BOXED(4001374207,32,FLEN)
NAN_BOXED(2131205059,32,FLEN)
NAN_BOXED(3220284168,32,FLEN)
NAN_BOXED(4001382399,32,FLEN)
NAN_BOXED(2131205059,32,FLEN)
NAN_BOXED(3220284168,32,FLEN)
NAN_BOXED(4001398783,32,FLEN)
NAN_BOXED(2131205059,32,FLEN)
NAN_BOXED(3220284168,32,FLEN)
NAN_BOXED(4001431551,32,FLEN)
NAN_BOXED(2131205059,32,FLEN)
NAN_BOXED(3220284168,32,FLEN)
NAN_BOXED(4001497087,32,FLEN)
NAN_BOXED(2131205059,32,FLEN)
NAN_BOXED(3220284168,32,FLEN)
NAN_BOXED(4001628159,32,FLEN)
NAN_BOXED(2131205059,32,FLEN)
NAN_BOXED(3220284168,32,FLEN)
NAN_BOXED(4001890303,32,FLEN)
NAN_BOXED(2131205059,32,FLEN)
NAN_BOXED(3220284168,32,FLEN)
NAN_BOXED(4002414591,32,FLEN)
NAN_BOXED(2131205059,32,FLEN)
NAN_BOXED(3220284168,32,FLEN)
NAN_BOXED(4003463167,32,FLEN)
NAN_BOXED(2131205059,32,FLEN)
NAN_BOXED(3220284168,32,FLEN)
NAN_BOXED(4005560319,32,FLEN)
NAN_BOXED(2131205059,32,FLEN)
NAN_BOXED(3220284168,32,FLEN)
NAN_BOXED(4005560320,32,FLEN)
NAN_BOXED(2131205059,32,FLEN)
NAN_BOXED(3220284168,32,FLEN)
NAN_BOXED(4007657472,32,FLEN)
NAN_BOXED(2131205059,32,FLEN)
NAN_BOXED(3220284168,32,FLEN)
NAN_BOXED(4008706048,32,FLEN)
NAN_BOXED(2131205059,32,FLEN)
NAN_BOXED(3220284168,32,FLEN)
NAN_BOXED(4009230336,32,FLEN)
NAN_BOXED(2131205059,32,FLEN)
NAN_BOXED(3220284168,32,FLEN)
NAN_BOXED(4009492480,32,FLEN)
NAN_BOXED(2131205059,32,FLEN)
NAN_BOXED(3220284168,32,FLEN)
NAN_BOXED(4009623552,32,FLEN)
NAN_BOXED(2131205059,32,FLEN)
NAN_BOXED(3220284168,32,FLEN)
NAN_BOXED(4009689088,32,FLEN)
NAN_BOXED(2131205059,32,FLEN)
NAN_BOXED(3220284168,32,FLEN)
NAN_BOXED(4009721856,32,FLEN)
NAN_BOXED(2131205059,32,FLEN)
NAN_BOXED(3220284168,32,FLEN)
NAN_BOXED(4009738240,32,FLEN)
NAN_BOXED(2131205059,32,FLEN)
NAN_BOXED(3220284168,32,FLEN)
NAN_BOXED(4009746432,32,FLEN)
NAN_BOXED(2131205059,32,FLEN)
NAN_BOXED(3220284168,32,FLEN)
NAN_BOXED(4009750528,32,FLEN)
NAN_BOXED(2131205059,32,FLEN)
NAN_BOXED(3220284168,32,FLEN)
NAN_BOXED(4009752576,32,FLEN)
NAN_BOXED(2131205059,32,FLEN)
NAN_BOXED(3220284168,32,FLEN)
NAN_BOXED(4009753600,32,FLEN)
NAN_BOXED(2131205059,32,FLEN)
NAN_BOXED(3220284168,32,FLEN)
NAN_BOXED(4009754112,32,FLEN)
NAN_BOXED(2131205059,32,FLEN)
NAN_BOXED(3220284168,32,FLEN)
NAN_BOXED(4009754368,32,FLEN)
NAN_BOXED(2131205059,32,FLEN)
NAN_BOXED(3220284168,32,FLEN)
NAN_BOXED(4009754496,32,FLEN)
NAN_BOXED(2131205059,32,FLEN)
NAN_BOXED(3220284168,32,FLEN)
NAN_BOXED(4009754560,32,FLEN)
NAN_BOXED(2131205059,32,FLEN)
NAN_BOXED(3220284168,32,FLEN)
NAN_BOXED(4009754592,32,FLEN)
NAN_BOXED(2131205059,32,FLEN)
NAN_BOXED(3220284168,32,FLEN)
NAN_BOXED(4009754608,32,FLEN)
NAN_BOXED(2131205059,32,FLEN)
NAN_BOXED(3220284168,32,FLEN)
NAN_BOXED(4009754616,32,FLEN)
NAN_BOXED(2131205059,32,FLEN)
NAN_BOXED(3220284168,32,FLEN)
NAN_BOXED(4009754620,32,FLEN)
NAN_BOXED(2131205059,32,FLEN)
NAN_BOXED(3220284168,32,FLEN)
NAN_BOXED(4009754622,32,FLEN)
NAN_BOXED(2131205059,32,FLEN)
NAN_BOXED(3220284168,32,FLEN)
NAN_BOXED(4009754623,32,FLEN)
NAN_BOXED(2131205059,32,FLEN)
NAN_BOXED(3220284168,32,FLEN)
NAN_BOXED(4278190081,32,FLEN)
NAN_BOXED(2131205059,32,FLEN)
NAN_BOXED(3220284168,32,FLEN)
NAN_BOXED(4278190083,32,FLEN)
NAN_BOXED(2131205059,32,FLEN)
NAN_BOXED(3220284168,32,FLEN)
NAN_BOXED(4278190087,32,FLEN)
NAN_BOXED(2131205059,32,FLEN)
NAN_BOXED(3220284168,32,FLEN)
NAN_BOXED(4279867801,32,FLEN)
NAN_BOXED(2131205059,32,FLEN)
NAN_BOXED(3220284168,32,FLEN)
NAN_BOXED(4280586825,32,FLEN)
NAN_BOXED(2131205059,32,FLEN)
NAN_BOXED(3220284168,32,FLEN)
NAN_BOXED(4281545523,32,FLEN)
NAN_BOXED(2131205059,32,FLEN)
NAN_BOXED(3220284168,32,FLEN)
NAN_BOXED(4281785197,32,FLEN)
NAN_BOXED(2131205059,32,FLEN)
NAN_BOXED(3220284168,32,FLEN)
NAN_BOXED(4282104763,32,FLEN)
NAN_BOXED(2131205059,32,FLEN)
NAN_BOXED(3220284168,32,FLEN)
NAN_BOXED(4282664004,32,FLEN)
NAN_BOXED(2131205059,32,FLEN)
NAN_BOXED(3220284168,32,FLEN)
NAN_BOXED(4283223244,32,FLEN)
NAN_BOXED(2131205059,32,FLEN)
NAN_BOXED(3220284168,32,FLEN)
NAN_BOXED(4284181942,32,FLEN)
NAN_BOXED(2131205059,32,FLEN)
NAN_BOXED(3220284168,32,FLEN)
NAN_BOXED(4284900966,32,FLEN)
NAN_BOXED(2131205059,32,FLEN)
NAN_BOXED(3220284168,32,FLEN)
NAN_BOXED(4285380315,32,FLEN)
NAN_BOXED(2131205059,32,FLEN)
NAN_BOXED(3220284168,32,FLEN)
NAN_BOXED(4286578680,32,FLEN)
NAN_BOXED(2131205059,32,FLEN)
NAN_BOXED(3220284168,32,FLEN)
NAN_BOXED(4286578684,32,FLEN)
NAN_BOXED(2131205059,32,FLEN)
NAN_BOXED(3220284168,32,FLEN)
NAN_BOXED(4286578686,32,FLEN)
NAN_BOXED(2131208423,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
