
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:17:59 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_27904:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x092a80 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f092a80; op2val:0x80000000;
op3val:0x804ccccc; valaddr_reg:x3; val_offset:83712*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83712*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27905:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x092a80 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f092a80; op2val:0x80000000;
op3val:0x805b6db6; valaddr_reg:x3; val_offset:83715*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83715*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27906:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x092a80 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f092a80; op2val:0x80000000;
op3val:0x80666666; valaddr_reg:x3; val_offset:83718*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83718*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27907:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x092a80 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f092a80; op2val:0x80000000;
op3val:0x806db6db; valaddr_reg:x3; val_offset:83721*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83721*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27908:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x092a80 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f092a80; op2val:0x80000000;
op3val:0x807ffff8; valaddr_reg:x3; val_offset:83724*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83724*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27909:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x092a80 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f092a80; op2val:0x80000000;
op3val:0x807ffffc; valaddr_reg:x3; val_offset:83727*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83727*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27910:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x092a80 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f092a80; op2val:0x80000000;
op3val:0x807ffffe; valaddr_reg:x3; val_offset:83730*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83730*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27911:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x092a80 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f092a80; op2val:0x80000000;
op3val:0x82000000; valaddr_reg:x3; val_offset:83733*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83733*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27912:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x092a80 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f092a80; op2val:0x80000000;
op3val:0x82000001; valaddr_reg:x3; val_offset:83736*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83736*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27913:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x092a80 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f092a80; op2val:0x80000000;
op3val:0x82000003; valaddr_reg:x3; val_offset:83739*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83739*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27914:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x092a80 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f092a80; op2val:0x80000000;
op3val:0x82000007; valaddr_reg:x3; val_offset:83742*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83742*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27915:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x092a80 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f092a80; op2val:0x80000000;
op3val:0x8200000f; valaddr_reg:x3; val_offset:83745*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83745*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27916:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x092a80 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f092a80; op2val:0x80000000;
op3val:0x8200001f; valaddr_reg:x3; val_offset:83748*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83748*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27917:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x092a80 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f092a80; op2val:0x80000000;
op3val:0x8200003f; valaddr_reg:x3; val_offset:83751*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83751*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27918:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x092a80 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f092a80; op2val:0x80000000;
op3val:0x8200007f; valaddr_reg:x3; val_offset:83754*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83754*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27919:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x092a80 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f092a80; op2val:0x80000000;
op3val:0x820000ff; valaddr_reg:x3; val_offset:83757*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83757*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27920:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x092a80 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f092a80; op2val:0x80000000;
op3val:0x820001ff; valaddr_reg:x3; val_offset:83760*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83760*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27921:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x092a80 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f092a80; op2val:0x80000000;
op3val:0x820003ff; valaddr_reg:x3; val_offset:83763*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83763*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27922:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x092a80 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f092a80; op2val:0x80000000;
op3val:0x820007ff; valaddr_reg:x3; val_offset:83766*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83766*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27923:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x092a80 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f092a80; op2val:0x80000000;
op3val:0x82000fff; valaddr_reg:x3; val_offset:83769*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83769*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27924:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x092a80 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f092a80; op2val:0x80000000;
op3val:0x82001fff; valaddr_reg:x3; val_offset:83772*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83772*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27925:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x092a80 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f092a80; op2val:0x80000000;
op3val:0x82003fff; valaddr_reg:x3; val_offset:83775*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83775*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27926:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x092a80 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f092a80; op2val:0x80000000;
op3val:0x82007fff; valaddr_reg:x3; val_offset:83778*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83778*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27927:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x092a80 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f092a80; op2val:0x80000000;
op3val:0x8200ffff; valaddr_reg:x3; val_offset:83781*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83781*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27928:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x092a80 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f092a80; op2val:0x80000000;
op3val:0x8201ffff; valaddr_reg:x3; val_offset:83784*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83784*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27929:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x092a80 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f092a80; op2val:0x80000000;
op3val:0x8203ffff; valaddr_reg:x3; val_offset:83787*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83787*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27930:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x092a80 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f092a80; op2val:0x80000000;
op3val:0x8207ffff; valaddr_reg:x3; val_offset:83790*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83790*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27931:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x092a80 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f092a80; op2val:0x80000000;
op3val:0x820fffff; valaddr_reg:x3; val_offset:83793*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83793*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27932:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x092a80 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f092a80; op2val:0x80000000;
op3val:0x821fffff; valaddr_reg:x3; val_offset:83796*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83796*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27933:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x092a80 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f092a80; op2val:0x80000000;
op3val:0x823fffff; valaddr_reg:x3; val_offset:83799*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83799*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27934:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x092a80 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f092a80; op2val:0x80000000;
op3val:0x82400000; valaddr_reg:x3; val_offset:83802*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83802*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27935:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x092a80 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f092a80; op2val:0x80000000;
op3val:0x82600000; valaddr_reg:x3; val_offset:83805*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83805*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27936:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x092a80 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f092a80; op2val:0x80000000;
op3val:0x82700000; valaddr_reg:x3; val_offset:83808*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83808*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27937:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x092a80 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f092a80; op2val:0x80000000;
op3val:0x82780000; valaddr_reg:x3; val_offset:83811*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83811*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27938:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x092a80 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f092a80; op2val:0x80000000;
op3val:0x827c0000; valaddr_reg:x3; val_offset:83814*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83814*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27939:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x092a80 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f092a80; op2val:0x80000000;
op3val:0x827e0000; valaddr_reg:x3; val_offset:83817*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83817*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27940:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x092a80 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f092a80; op2val:0x80000000;
op3val:0x827f0000; valaddr_reg:x3; val_offset:83820*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83820*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27941:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x092a80 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f092a80; op2val:0x80000000;
op3val:0x827f8000; valaddr_reg:x3; val_offset:83823*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83823*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27942:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x092a80 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f092a80; op2val:0x80000000;
op3val:0x827fc000; valaddr_reg:x3; val_offset:83826*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83826*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27943:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x092a80 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f092a80; op2val:0x80000000;
op3val:0x827fe000; valaddr_reg:x3; val_offset:83829*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83829*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27944:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x092a80 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f092a80; op2val:0x80000000;
op3val:0x827ff000; valaddr_reg:x3; val_offset:83832*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83832*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27945:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x092a80 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f092a80; op2val:0x80000000;
op3val:0x827ff800; valaddr_reg:x3; val_offset:83835*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83835*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27946:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x092a80 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f092a80; op2val:0x80000000;
op3val:0x827ffc00; valaddr_reg:x3; val_offset:83838*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83838*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27947:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x092a80 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f092a80; op2val:0x80000000;
op3val:0x827ffe00; valaddr_reg:x3; val_offset:83841*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83841*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27948:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x092a80 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f092a80; op2val:0x80000000;
op3val:0x827fff00; valaddr_reg:x3; val_offset:83844*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83844*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27949:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x092a80 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f092a80; op2val:0x80000000;
op3val:0x827fff80; valaddr_reg:x3; val_offset:83847*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83847*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27950:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x092a80 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f092a80; op2val:0x80000000;
op3val:0x827fffc0; valaddr_reg:x3; val_offset:83850*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83850*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27951:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x092a80 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f092a80; op2val:0x80000000;
op3val:0x827fffe0; valaddr_reg:x3; val_offset:83853*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83853*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27952:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x092a80 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f092a80; op2val:0x80000000;
op3val:0x827ffff0; valaddr_reg:x3; val_offset:83856*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83856*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27953:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x092a80 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f092a80; op2val:0x80000000;
op3val:0x827ffff8; valaddr_reg:x3; val_offset:83859*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83859*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27954:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x092a80 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f092a80; op2val:0x80000000;
op3val:0x827ffffc; valaddr_reg:x3; val_offset:83862*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83862*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27955:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x092a80 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f092a80; op2val:0x80000000;
op3val:0x827ffffe; valaddr_reg:x3; val_offset:83865*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83865*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27956:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x092a80 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f092a80; op2val:0x80000000;
op3val:0x827fffff; valaddr_reg:x3; val_offset:83868*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83868*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27957:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09b342 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09b342; op2val:0x0;
op3val:0x800001; valaddr_reg:x3; val_offset:83871*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83871*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27958:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09b342 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09b342; op2val:0x0;
op3val:0x800003; valaddr_reg:x3; val_offset:83874*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83874*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27959:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09b342 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09b342; op2val:0x0;
op3val:0x800007; valaddr_reg:x3; val_offset:83877*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83877*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27960:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09b342 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09b342; op2val:0x0;
op3val:0x999999; valaddr_reg:x3; val_offset:83880*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83880*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27961:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09b342 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09b342; op2val:0x0;
op3val:0xa49249; valaddr_reg:x3; val_offset:83883*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83883*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27962:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09b342 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09b342; op2val:0x0;
op3val:0xb33333; valaddr_reg:x3; val_offset:83886*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83886*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27963:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09b342 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09b342; op2val:0x0;
op3val:0xb6db6d; valaddr_reg:x3; val_offset:83889*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83889*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27964:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09b342 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09b342; op2val:0x0;
op3val:0xbbbbbb; valaddr_reg:x3; val_offset:83892*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83892*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27965:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09b342 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09b342; op2val:0x0;
op3val:0xc44444; valaddr_reg:x3; val_offset:83895*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83895*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27966:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09b342 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09b342; op2val:0x0;
op3val:0xcccccc; valaddr_reg:x3; val_offset:83898*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83898*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27967:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09b342 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09b342; op2val:0x0;
op3val:0xdb6db6; valaddr_reg:x3; val_offset:83901*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83901*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27968:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09b342 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09b342; op2val:0x0;
op3val:0xe66666; valaddr_reg:x3; val_offset:83904*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83904*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27969:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09b342 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09b342; op2val:0x0;
op3val:0xedb6db; valaddr_reg:x3; val_offset:83907*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83907*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27970:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09b342 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09b342; op2val:0x0;
op3val:0xfffff8; valaddr_reg:x3; val_offset:83910*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83910*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27971:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09b342 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09b342; op2val:0x0;
op3val:0xfffffc; valaddr_reg:x3; val_offset:83913*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83913*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27972:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09b342 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09b342; op2val:0x0;
op3val:0xfffffe; valaddr_reg:x3; val_offset:83916*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83916*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27973:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09b342 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x04 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09b342; op2val:0x0;
op3val:0x2000000; valaddr_reg:x3; val_offset:83919*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83919*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27974:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09b342 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x04 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09b342; op2val:0x0;
op3val:0x2000001; valaddr_reg:x3; val_offset:83922*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83922*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27975:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09b342 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x04 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09b342; op2val:0x0;
op3val:0x2000003; valaddr_reg:x3; val_offset:83925*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83925*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27976:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09b342 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x04 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09b342; op2val:0x0;
op3val:0x2000007; valaddr_reg:x3; val_offset:83928*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83928*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27977:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09b342 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x04 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09b342; op2val:0x0;
op3val:0x200000f; valaddr_reg:x3; val_offset:83931*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83931*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27978:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09b342 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x04 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09b342; op2val:0x0;
op3val:0x200001f; valaddr_reg:x3; val_offset:83934*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83934*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27979:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09b342 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x04 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09b342; op2val:0x0;
op3val:0x200003f; valaddr_reg:x3; val_offset:83937*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83937*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27980:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09b342 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x04 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09b342; op2val:0x0;
op3val:0x200007f; valaddr_reg:x3; val_offset:83940*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83940*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27981:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09b342 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x04 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09b342; op2val:0x0;
op3val:0x20000ff; valaddr_reg:x3; val_offset:83943*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83943*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27982:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09b342 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x04 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09b342; op2val:0x0;
op3val:0x20001ff; valaddr_reg:x3; val_offset:83946*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83946*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27983:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09b342 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x04 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09b342; op2val:0x0;
op3val:0x20003ff; valaddr_reg:x3; val_offset:83949*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83949*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27984:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09b342 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x04 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09b342; op2val:0x0;
op3val:0x20007ff; valaddr_reg:x3; val_offset:83952*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83952*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27985:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09b342 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x04 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09b342; op2val:0x0;
op3val:0x2000fff; valaddr_reg:x3; val_offset:83955*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83955*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27986:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09b342 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x04 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09b342; op2val:0x0;
op3val:0x2001fff; valaddr_reg:x3; val_offset:83958*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83958*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27987:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09b342 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x04 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09b342; op2val:0x0;
op3val:0x2003fff; valaddr_reg:x3; val_offset:83961*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83961*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27988:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09b342 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x04 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09b342; op2val:0x0;
op3val:0x2007fff; valaddr_reg:x3; val_offset:83964*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83964*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27989:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09b342 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x04 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09b342; op2val:0x0;
op3val:0x200ffff; valaddr_reg:x3; val_offset:83967*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83967*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27990:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09b342 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x04 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09b342; op2val:0x0;
op3val:0x201ffff; valaddr_reg:x3; val_offset:83970*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83970*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27991:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09b342 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x04 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09b342; op2val:0x0;
op3val:0x203ffff; valaddr_reg:x3; val_offset:83973*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83973*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27992:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09b342 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x04 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09b342; op2val:0x0;
op3val:0x207ffff; valaddr_reg:x3; val_offset:83976*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83976*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27993:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09b342 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x04 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09b342; op2val:0x0;
op3val:0x20fffff; valaddr_reg:x3; val_offset:83979*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83979*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27994:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09b342 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x04 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09b342; op2val:0x0;
op3val:0x21fffff; valaddr_reg:x3; val_offset:83982*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83982*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27995:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09b342 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x04 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09b342; op2val:0x0;
op3val:0x23fffff; valaddr_reg:x3; val_offset:83985*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83985*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27996:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09b342 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x04 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09b342; op2val:0x0;
op3val:0x2400000; valaddr_reg:x3; val_offset:83988*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83988*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27997:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09b342 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x04 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09b342; op2val:0x0;
op3val:0x2600000; valaddr_reg:x3; val_offset:83991*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83991*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27998:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09b342 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x04 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09b342; op2val:0x0;
op3val:0x2700000; valaddr_reg:x3; val_offset:83994*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83994*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27999:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09b342 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x04 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09b342; op2val:0x0;
op3val:0x2780000; valaddr_reg:x3; val_offset:83997*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83997*0 + 3*218*FLEN/8, x4, x1, x2)

inst_28000:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09b342 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x04 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09b342; op2val:0x0;
op3val:0x27c0000; valaddr_reg:x3; val_offset:84000*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84000*0 + 3*218*FLEN/8, x4, x1, x2)

inst_28001:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09b342 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x04 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09b342; op2val:0x0;
op3val:0x27e0000; valaddr_reg:x3; val_offset:84003*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84003*0 + 3*218*FLEN/8, x4, x1, x2)

inst_28002:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09b342 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x04 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09b342; op2val:0x0;
op3val:0x27f0000; valaddr_reg:x3; val_offset:84006*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84006*0 + 3*218*FLEN/8, x4, x1, x2)

inst_28003:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09b342 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x04 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09b342; op2val:0x0;
op3val:0x27f8000; valaddr_reg:x3; val_offset:84009*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84009*0 + 3*218*FLEN/8, x4, x1, x2)

inst_28004:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09b342 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x04 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09b342; op2val:0x0;
op3val:0x27fc000; valaddr_reg:x3; val_offset:84012*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84012*0 + 3*218*FLEN/8, x4, x1, x2)

inst_28005:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09b342 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x04 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09b342; op2val:0x0;
op3val:0x27fe000; valaddr_reg:x3; val_offset:84015*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84015*0 + 3*218*FLEN/8, x4, x1, x2)

inst_28006:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09b342 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x04 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09b342; op2val:0x0;
op3val:0x27ff000; valaddr_reg:x3; val_offset:84018*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84018*0 + 3*218*FLEN/8, x4, x1, x2)

inst_28007:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09b342 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x04 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09b342; op2val:0x0;
op3val:0x27ff800; valaddr_reg:x3; val_offset:84021*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84021*0 + 3*218*FLEN/8, x4, x1, x2)

inst_28008:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09b342 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x04 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09b342; op2val:0x0;
op3val:0x27ffc00; valaddr_reg:x3; val_offset:84024*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84024*0 + 3*218*FLEN/8, x4, x1, x2)

inst_28009:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09b342 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x04 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09b342; op2val:0x0;
op3val:0x27ffe00; valaddr_reg:x3; val_offset:84027*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84027*0 + 3*218*FLEN/8, x4, x1, x2)

inst_28010:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09b342 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x04 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09b342; op2val:0x0;
op3val:0x27fff00; valaddr_reg:x3; val_offset:84030*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84030*0 + 3*218*FLEN/8, x4, x1, x2)

inst_28011:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09b342 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x04 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09b342; op2val:0x0;
op3val:0x27fff80; valaddr_reg:x3; val_offset:84033*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84033*0 + 3*218*FLEN/8, x4, x1, x2)

inst_28012:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09b342 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x04 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09b342; op2val:0x0;
op3val:0x27fffc0; valaddr_reg:x3; val_offset:84036*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84036*0 + 3*218*FLEN/8, x4, x1, x2)

inst_28013:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09b342 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x04 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09b342; op2val:0x0;
op3val:0x27fffe0; valaddr_reg:x3; val_offset:84039*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84039*0 + 3*218*FLEN/8, x4, x1, x2)

inst_28014:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09b342 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x04 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09b342; op2val:0x0;
op3val:0x27ffff0; valaddr_reg:x3; val_offset:84042*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84042*0 + 3*218*FLEN/8, x4, x1, x2)

inst_28015:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09b342 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x04 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09b342; op2val:0x0;
op3val:0x27ffff8; valaddr_reg:x3; val_offset:84045*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84045*0 + 3*218*FLEN/8, x4, x1, x2)

inst_28016:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09b342 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x04 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09b342; op2val:0x0;
op3val:0x27ffffc; valaddr_reg:x3; val_offset:84048*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84048*0 + 3*218*FLEN/8, x4, x1, x2)

inst_28017:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09b342 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x04 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09b342; op2val:0x0;
op3val:0x27ffffe; valaddr_reg:x3; val_offset:84051*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84051*0 + 3*218*FLEN/8, x4, x1, x2)

inst_28018:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09b342 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x04 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09b342; op2val:0x0;
op3val:0x27fffff; valaddr_reg:x3; val_offset:84054*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84054*0 + 3*218*FLEN/8, x4, x1, x2)

inst_28019:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09e0b4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3b6a3a and fs3 == 0 and fe3 == 0x73 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09e0b4; op2val:0x3b6a3a;
op3val:0x39800000; valaddr_reg:x3; val_offset:84057*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84057*0 + 3*218*FLEN/8, x4, x1, x2)

inst_28020:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09e0b4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3b6a3a and fs3 == 0 and fe3 == 0x73 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09e0b4; op2val:0x3b6a3a;
op3val:0x39800001; valaddr_reg:x3; val_offset:84060*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84060*0 + 3*218*FLEN/8, x4, x1, x2)

inst_28021:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09e0b4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3b6a3a and fs3 == 0 and fe3 == 0x73 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09e0b4; op2val:0x3b6a3a;
op3val:0x39800003; valaddr_reg:x3; val_offset:84063*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84063*0 + 3*218*FLEN/8, x4, x1, x2)

inst_28022:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09e0b4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3b6a3a and fs3 == 0 and fe3 == 0x73 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09e0b4; op2val:0x3b6a3a;
op3val:0x39800007; valaddr_reg:x3; val_offset:84066*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84066*0 + 3*218*FLEN/8, x4, x1, x2)

inst_28023:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09e0b4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3b6a3a and fs3 == 0 and fe3 == 0x73 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09e0b4; op2val:0x3b6a3a;
op3val:0x3980000f; valaddr_reg:x3; val_offset:84069*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84069*0 + 3*218*FLEN/8, x4, x1, x2)

inst_28024:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09e0b4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3b6a3a and fs3 == 0 and fe3 == 0x73 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09e0b4; op2val:0x3b6a3a;
op3val:0x3980001f; valaddr_reg:x3; val_offset:84072*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84072*0 + 3*218*FLEN/8, x4, x1, x2)

inst_28025:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09e0b4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3b6a3a and fs3 == 0 and fe3 == 0x73 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09e0b4; op2val:0x3b6a3a;
op3val:0x3980003f; valaddr_reg:x3; val_offset:84075*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84075*0 + 3*218*FLEN/8, x4, x1, x2)

inst_28026:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09e0b4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3b6a3a and fs3 == 0 and fe3 == 0x73 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09e0b4; op2val:0x3b6a3a;
op3val:0x3980007f; valaddr_reg:x3; val_offset:84078*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84078*0 + 3*218*FLEN/8, x4, x1, x2)

inst_28027:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09e0b4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3b6a3a and fs3 == 0 and fe3 == 0x73 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09e0b4; op2val:0x3b6a3a;
op3val:0x398000ff; valaddr_reg:x3; val_offset:84081*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84081*0 + 3*218*FLEN/8, x4, x1, x2)

inst_28028:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09e0b4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3b6a3a and fs3 == 0 and fe3 == 0x73 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09e0b4; op2val:0x3b6a3a;
op3val:0x398001ff; valaddr_reg:x3; val_offset:84084*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84084*0 + 3*218*FLEN/8, x4, x1, x2)

inst_28029:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09e0b4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3b6a3a and fs3 == 0 and fe3 == 0x73 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09e0b4; op2val:0x3b6a3a;
op3val:0x398003ff; valaddr_reg:x3; val_offset:84087*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84087*0 + 3*218*FLEN/8, x4, x1, x2)

inst_28030:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09e0b4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3b6a3a and fs3 == 0 and fe3 == 0x73 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09e0b4; op2val:0x3b6a3a;
op3val:0x398007ff; valaddr_reg:x3; val_offset:84090*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84090*0 + 3*218*FLEN/8, x4, x1, x2)

inst_28031:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09e0b4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3b6a3a and fs3 == 0 and fe3 == 0x73 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09e0b4; op2val:0x3b6a3a;
op3val:0x39800fff; valaddr_reg:x3; val_offset:84093*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84093*0 + 3*218*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2131307136,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2152516812,32,FLEN)
NAN_BOXED(2131307136,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2153475510,32,FLEN)
NAN_BOXED(2131307136,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154194534,32,FLEN)
NAN_BOXED(2131307136,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154673883,32,FLEN)
NAN_BOXED(2131307136,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872248,32,FLEN)
NAN_BOXED(2131307136,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872252,32,FLEN)
NAN_BOXED(2131307136,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2131307136,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181038080,32,FLEN)
NAN_BOXED(2131307136,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181038081,32,FLEN)
NAN_BOXED(2131307136,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181038083,32,FLEN)
NAN_BOXED(2131307136,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181038087,32,FLEN)
NAN_BOXED(2131307136,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181038095,32,FLEN)
NAN_BOXED(2131307136,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181038111,32,FLEN)
NAN_BOXED(2131307136,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181038143,32,FLEN)
NAN_BOXED(2131307136,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181038207,32,FLEN)
NAN_BOXED(2131307136,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181038335,32,FLEN)
NAN_BOXED(2131307136,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181038591,32,FLEN)
NAN_BOXED(2131307136,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181039103,32,FLEN)
NAN_BOXED(2131307136,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181040127,32,FLEN)
NAN_BOXED(2131307136,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181042175,32,FLEN)
NAN_BOXED(2131307136,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181046271,32,FLEN)
NAN_BOXED(2131307136,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181054463,32,FLEN)
NAN_BOXED(2131307136,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181070847,32,FLEN)
NAN_BOXED(2131307136,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181103615,32,FLEN)
NAN_BOXED(2131307136,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181169151,32,FLEN)
NAN_BOXED(2131307136,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181300223,32,FLEN)
NAN_BOXED(2131307136,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181562367,32,FLEN)
NAN_BOXED(2131307136,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2182086655,32,FLEN)
NAN_BOXED(2131307136,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2183135231,32,FLEN)
NAN_BOXED(2131307136,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2185232383,32,FLEN)
NAN_BOXED(2131307136,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2185232384,32,FLEN)
NAN_BOXED(2131307136,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2187329536,32,FLEN)
NAN_BOXED(2131307136,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2188378112,32,FLEN)
NAN_BOXED(2131307136,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2188902400,32,FLEN)
NAN_BOXED(2131307136,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189164544,32,FLEN)
NAN_BOXED(2131307136,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189295616,32,FLEN)
NAN_BOXED(2131307136,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189361152,32,FLEN)
NAN_BOXED(2131307136,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189393920,32,FLEN)
NAN_BOXED(2131307136,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189410304,32,FLEN)
NAN_BOXED(2131307136,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189418496,32,FLEN)
NAN_BOXED(2131307136,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189422592,32,FLEN)
NAN_BOXED(2131307136,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189424640,32,FLEN)
NAN_BOXED(2131307136,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189425664,32,FLEN)
NAN_BOXED(2131307136,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189426176,32,FLEN)
NAN_BOXED(2131307136,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189426432,32,FLEN)
NAN_BOXED(2131307136,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189426560,32,FLEN)
NAN_BOXED(2131307136,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189426624,32,FLEN)
NAN_BOXED(2131307136,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189426656,32,FLEN)
NAN_BOXED(2131307136,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189426672,32,FLEN)
NAN_BOXED(2131307136,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189426680,32,FLEN)
NAN_BOXED(2131307136,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189426684,32,FLEN)
NAN_BOXED(2131307136,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189426686,32,FLEN)
NAN_BOXED(2131307136,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189426687,32,FLEN)
NAN_BOXED(2131342146,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(2131342146,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388611,32,FLEN)
NAN_BOXED(2131342146,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388615,32,FLEN)
NAN_BOXED(2131342146,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(10066329,32,FLEN)
NAN_BOXED(2131342146,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(10785353,32,FLEN)
NAN_BOXED(2131342146,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(11744051,32,FLEN)
NAN_BOXED(2131342146,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(11983725,32,FLEN)
NAN_BOXED(2131342146,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(12303291,32,FLEN)
NAN_BOXED(2131342146,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(12862532,32,FLEN)
NAN_BOXED(2131342146,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(13421772,32,FLEN)
NAN_BOXED(2131342146,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(14380470,32,FLEN)
NAN_BOXED(2131342146,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(15099494,32,FLEN)
NAN_BOXED(2131342146,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(15578843,32,FLEN)
NAN_BOXED(2131342146,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777208,32,FLEN)
NAN_BOXED(2131342146,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777212,32,FLEN)
NAN_BOXED(2131342146,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777214,32,FLEN)
NAN_BOXED(2131342146,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(33554432,32,FLEN)
NAN_BOXED(2131342146,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(33554433,32,FLEN)
NAN_BOXED(2131342146,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(33554435,32,FLEN)
NAN_BOXED(2131342146,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(33554439,32,FLEN)
NAN_BOXED(2131342146,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(33554447,32,FLEN)
NAN_BOXED(2131342146,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(33554463,32,FLEN)
NAN_BOXED(2131342146,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(33554495,32,FLEN)
NAN_BOXED(2131342146,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(33554559,32,FLEN)
NAN_BOXED(2131342146,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(33554687,32,FLEN)
NAN_BOXED(2131342146,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(33554943,32,FLEN)
NAN_BOXED(2131342146,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(33555455,32,FLEN)
NAN_BOXED(2131342146,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(33556479,32,FLEN)
NAN_BOXED(2131342146,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(33558527,32,FLEN)
NAN_BOXED(2131342146,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(33562623,32,FLEN)
NAN_BOXED(2131342146,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(33570815,32,FLEN)
NAN_BOXED(2131342146,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(33587199,32,FLEN)
NAN_BOXED(2131342146,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(33619967,32,FLEN)
NAN_BOXED(2131342146,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(33685503,32,FLEN)
NAN_BOXED(2131342146,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(33816575,32,FLEN)
NAN_BOXED(2131342146,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(34078719,32,FLEN)
NAN_BOXED(2131342146,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(34603007,32,FLEN)
NAN_BOXED(2131342146,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(35651583,32,FLEN)
NAN_BOXED(2131342146,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(37748735,32,FLEN)
NAN_BOXED(2131342146,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(37748736,32,FLEN)
NAN_BOXED(2131342146,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(39845888,32,FLEN)
NAN_BOXED(2131342146,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(40894464,32,FLEN)
NAN_BOXED(2131342146,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(41418752,32,FLEN)
NAN_BOXED(2131342146,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(41680896,32,FLEN)
NAN_BOXED(2131342146,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(41811968,32,FLEN)
NAN_BOXED(2131342146,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(41877504,32,FLEN)
NAN_BOXED(2131342146,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(41910272,32,FLEN)
NAN_BOXED(2131342146,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(41926656,32,FLEN)
NAN_BOXED(2131342146,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(41934848,32,FLEN)
NAN_BOXED(2131342146,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(41938944,32,FLEN)
NAN_BOXED(2131342146,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(41940992,32,FLEN)
NAN_BOXED(2131342146,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(41942016,32,FLEN)
NAN_BOXED(2131342146,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(41942528,32,FLEN)
NAN_BOXED(2131342146,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(41942784,32,FLEN)
NAN_BOXED(2131342146,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(41942912,32,FLEN)
NAN_BOXED(2131342146,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(41942976,32,FLEN)
NAN_BOXED(2131342146,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(41943008,32,FLEN)
NAN_BOXED(2131342146,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(41943024,32,FLEN)
NAN_BOXED(2131342146,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(41943032,32,FLEN)
NAN_BOXED(2131342146,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(41943036,32,FLEN)
NAN_BOXED(2131342146,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(41943038,32,FLEN)
NAN_BOXED(2131342146,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(41943039,32,FLEN)
NAN_BOXED(2131353780,32,FLEN)
NAN_BOXED(3893818,32,FLEN)
NAN_BOXED(964689920,32,FLEN)
NAN_BOXED(2131353780,32,FLEN)
NAN_BOXED(3893818,32,FLEN)
NAN_BOXED(964689921,32,FLEN)
NAN_BOXED(2131353780,32,FLEN)
NAN_BOXED(3893818,32,FLEN)
NAN_BOXED(964689923,32,FLEN)
NAN_BOXED(2131353780,32,FLEN)
NAN_BOXED(3893818,32,FLEN)
NAN_BOXED(964689927,32,FLEN)
NAN_BOXED(2131353780,32,FLEN)
NAN_BOXED(3893818,32,FLEN)
NAN_BOXED(964689935,32,FLEN)
NAN_BOXED(2131353780,32,FLEN)
NAN_BOXED(3893818,32,FLEN)
NAN_BOXED(964689951,32,FLEN)
NAN_BOXED(2131353780,32,FLEN)
NAN_BOXED(3893818,32,FLEN)
NAN_BOXED(964689983,32,FLEN)
NAN_BOXED(2131353780,32,FLEN)
NAN_BOXED(3893818,32,FLEN)
NAN_BOXED(964690047,32,FLEN)
NAN_BOXED(2131353780,32,FLEN)
NAN_BOXED(3893818,32,FLEN)
NAN_BOXED(964690175,32,FLEN)
NAN_BOXED(2131353780,32,FLEN)
NAN_BOXED(3893818,32,FLEN)
NAN_BOXED(964690431,32,FLEN)
NAN_BOXED(2131353780,32,FLEN)
NAN_BOXED(3893818,32,FLEN)
NAN_BOXED(964690943,32,FLEN)
NAN_BOXED(2131353780,32,FLEN)
NAN_BOXED(3893818,32,FLEN)
NAN_BOXED(964691967,32,FLEN)
NAN_BOXED(2131353780,32,FLEN)
NAN_BOXED(3893818,32,FLEN)
NAN_BOXED(964694015,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
