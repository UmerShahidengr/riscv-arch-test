
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:17:59 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_2688:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x543ad9 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x1a660c and fs3 == 0 and fe3 == 0x3e and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d543ad9; op2val:0x19a660c;
op3val:0x1f7fffe0; valaddr_reg:x3; val_offset:8064*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8064*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2689:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x543ad9 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x1a660c and fs3 == 0 and fe3 == 0x3e and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d543ad9; op2val:0x19a660c;
op3val:0x1f7ffff0; valaddr_reg:x3; val_offset:8067*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8067*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2690:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x543ad9 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x1a660c and fs3 == 0 and fe3 == 0x3e and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d543ad9; op2val:0x19a660c;
op3val:0x1f7ffff8; valaddr_reg:x3; val_offset:8070*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8070*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2691:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x543ad9 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x1a660c and fs3 == 0 and fe3 == 0x3e and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d543ad9; op2val:0x19a660c;
op3val:0x1f7ffffc; valaddr_reg:x3; val_offset:8073*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8073*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2692:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x543ad9 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x1a660c and fs3 == 0 and fe3 == 0x3e and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d543ad9; op2val:0x19a660c;
op3val:0x1f7ffffe; valaddr_reg:x3; val_offset:8076*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8076*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2693:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x543ad9 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x1a660c and fs3 == 0 and fe3 == 0x3e and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d543ad9; op2val:0x19a660c;
op3val:0x1f7fffff; valaddr_reg:x3; val_offset:8079*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8079*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2694:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x543ad9 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x1a660c and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d543ad9; op2val:0x19a660c;
op3val:0x3f800001; valaddr_reg:x3; val_offset:8082*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8082*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2695:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x543ad9 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x1a660c and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d543ad9; op2val:0x19a660c;
op3val:0x3f800003; valaddr_reg:x3; val_offset:8085*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8085*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2696:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x543ad9 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x1a660c and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d543ad9; op2val:0x19a660c;
op3val:0x3f800007; valaddr_reg:x3; val_offset:8088*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8088*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2697:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x543ad9 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x1a660c and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d543ad9; op2val:0x19a660c;
op3val:0x3f999999; valaddr_reg:x3; val_offset:8091*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8091*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2698:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x543ad9 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x1a660c and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d543ad9; op2val:0x19a660c;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:8094*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8094*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2699:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x543ad9 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x1a660c and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d543ad9; op2val:0x19a660c;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:8097*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8097*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2700:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x543ad9 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x1a660c and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d543ad9; op2val:0x19a660c;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:8100*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8100*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2701:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x543ad9 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x1a660c and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d543ad9; op2val:0x19a660c;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:8103*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8103*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2702:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x543ad9 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x1a660c and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d543ad9; op2val:0x19a660c;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:8106*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8106*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2703:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x543ad9 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x1a660c and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d543ad9; op2val:0x19a660c;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:8109*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8109*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2704:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x543ad9 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x1a660c and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d543ad9; op2val:0x19a660c;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:8112*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8112*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2705:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x543ad9 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x1a660c and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d543ad9; op2val:0x19a660c;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:8115*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8115*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2706:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x543ad9 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x1a660c and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d543ad9; op2val:0x19a660c;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:8118*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8118*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2707:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x543ad9 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x1a660c and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d543ad9; op2val:0x19a660c;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:8121*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8121*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2708:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x543ad9 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x1a660c and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d543ad9; op2val:0x19a660c;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:8124*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8124*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2709:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x543ad9 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x1a660c and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d543ad9; op2val:0x19a660c;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:8127*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8127*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2710:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x570d9e and fs2 == 0 and fe2 == 0x03 and fm2 == 0x185f20 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d570d9e; op2val:0x1985f20;
op3val:0x3d800000; valaddr_reg:x3; val_offset:8130*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8130*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2711:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x570d9e and fs2 == 0 and fe2 == 0x03 and fm2 == 0x185f20 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d570d9e; op2val:0x1985f20;
op3val:0x3d800001; valaddr_reg:x3; val_offset:8133*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8133*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2712:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x570d9e and fs2 == 0 and fe2 == 0x03 and fm2 == 0x185f20 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d570d9e; op2val:0x1985f20;
op3val:0x3d800003; valaddr_reg:x3; val_offset:8136*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8136*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2713:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x570d9e and fs2 == 0 and fe2 == 0x03 and fm2 == 0x185f20 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d570d9e; op2val:0x1985f20;
op3val:0x3d800007; valaddr_reg:x3; val_offset:8139*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8139*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2714:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x570d9e and fs2 == 0 and fe2 == 0x03 and fm2 == 0x185f20 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d570d9e; op2val:0x1985f20;
op3val:0x3d80000f; valaddr_reg:x3; val_offset:8142*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8142*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2715:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x570d9e and fs2 == 0 and fe2 == 0x03 and fm2 == 0x185f20 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d570d9e; op2val:0x1985f20;
op3val:0x3d80001f; valaddr_reg:x3; val_offset:8145*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8145*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2716:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x570d9e and fs2 == 0 and fe2 == 0x03 and fm2 == 0x185f20 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d570d9e; op2val:0x1985f20;
op3val:0x3d80003f; valaddr_reg:x3; val_offset:8148*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8148*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2717:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x570d9e and fs2 == 0 and fe2 == 0x03 and fm2 == 0x185f20 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d570d9e; op2val:0x1985f20;
op3val:0x3d80007f; valaddr_reg:x3; val_offset:8151*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8151*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2718:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x570d9e and fs2 == 0 and fe2 == 0x03 and fm2 == 0x185f20 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d570d9e; op2val:0x1985f20;
op3val:0x3d8000ff; valaddr_reg:x3; val_offset:8154*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8154*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2719:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x570d9e and fs2 == 0 and fe2 == 0x03 and fm2 == 0x185f20 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d570d9e; op2val:0x1985f20;
op3val:0x3d8001ff; valaddr_reg:x3; val_offset:8157*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8157*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2720:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x570d9e and fs2 == 0 and fe2 == 0x03 and fm2 == 0x185f20 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d570d9e; op2val:0x1985f20;
op3val:0x3d8003ff; valaddr_reg:x3; val_offset:8160*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8160*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2721:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x570d9e and fs2 == 0 and fe2 == 0x03 and fm2 == 0x185f20 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d570d9e; op2val:0x1985f20;
op3val:0x3d8007ff; valaddr_reg:x3; val_offset:8163*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8163*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2722:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x570d9e and fs2 == 0 and fe2 == 0x03 and fm2 == 0x185f20 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d570d9e; op2val:0x1985f20;
op3val:0x3d800fff; valaddr_reg:x3; val_offset:8166*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8166*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2723:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x570d9e and fs2 == 0 and fe2 == 0x03 and fm2 == 0x185f20 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d570d9e; op2val:0x1985f20;
op3val:0x3d801fff; valaddr_reg:x3; val_offset:8169*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8169*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2724:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x570d9e and fs2 == 0 and fe2 == 0x03 and fm2 == 0x185f20 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d570d9e; op2val:0x1985f20;
op3val:0x3d803fff; valaddr_reg:x3; val_offset:8172*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8172*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2725:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x570d9e and fs2 == 0 and fe2 == 0x03 and fm2 == 0x185f20 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d570d9e; op2val:0x1985f20;
op3val:0x3d807fff; valaddr_reg:x3; val_offset:8175*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8175*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2726:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x570d9e and fs2 == 0 and fe2 == 0x03 and fm2 == 0x185f20 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d570d9e; op2val:0x1985f20;
op3val:0x3d80ffff; valaddr_reg:x3; val_offset:8178*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8178*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2727:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x570d9e and fs2 == 0 and fe2 == 0x03 and fm2 == 0x185f20 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d570d9e; op2val:0x1985f20;
op3val:0x3d81ffff; valaddr_reg:x3; val_offset:8181*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8181*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2728:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x570d9e and fs2 == 0 and fe2 == 0x03 and fm2 == 0x185f20 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d570d9e; op2val:0x1985f20;
op3val:0x3d83ffff; valaddr_reg:x3; val_offset:8184*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8184*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2729:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x570d9e and fs2 == 0 and fe2 == 0x03 and fm2 == 0x185f20 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d570d9e; op2val:0x1985f20;
op3val:0x3d87ffff; valaddr_reg:x3; val_offset:8187*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8187*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2730:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x570d9e and fs2 == 0 and fe2 == 0x03 and fm2 == 0x185f20 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d570d9e; op2val:0x1985f20;
op3val:0x3d8fffff; valaddr_reg:x3; val_offset:8190*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8190*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2731:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x570d9e and fs2 == 0 and fe2 == 0x03 and fm2 == 0x185f20 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d570d9e; op2val:0x1985f20;
op3val:0x3d9fffff; valaddr_reg:x3; val_offset:8193*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8193*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2732:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x570d9e and fs2 == 0 and fe2 == 0x03 and fm2 == 0x185f20 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d570d9e; op2val:0x1985f20;
op3val:0x3dbfffff; valaddr_reg:x3; val_offset:8196*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8196*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2733:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x570d9e and fs2 == 0 and fe2 == 0x03 and fm2 == 0x185f20 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d570d9e; op2val:0x1985f20;
op3val:0x3dc00000; valaddr_reg:x3; val_offset:8199*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8199*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2734:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x570d9e and fs2 == 0 and fe2 == 0x03 and fm2 == 0x185f20 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d570d9e; op2val:0x1985f20;
op3val:0x3de00000; valaddr_reg:x3; val_offset:8202*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8202*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2735:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x570d9e and fs2 == 0 and fe2 == 0x03 and fm2 == 0x185f20 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d570d9e; op2val:0x1985f20;
op3val:0x3df00000; valaddr_reg:x3; val_offset:8205*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8205*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2736:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x570d9e and fs2 == 0 and fe2 == 0x03 and fm2 == 0x185f20 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d570d9e; op2val:0x1985f20;
op3val:0x3df80000; valaddr_reg:x3; val_offset:8208*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8208*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2737:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x570d9e and fs2 == 0 and fe2 == 0x03 and fm2 == 0x185f20 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d570d9e; op2val:0x1985f20;
op3val:0x3dfc0000; valaddr_reg:x3; val_offset:8211*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8211*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2738:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x570d9e and fs2 == 0 and fe2 == 0x03 and fm2 == 0x185f20 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d570d9e; op2val:0x1985f20;
op3val:0x3dfe0000; valaddr_reg:x3; val_offset:8214*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8214*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2739:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x570d9e and fs2 == 0 and fe2 == 0x03 and fm2 == 0x185f20 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d570d9e; op2val:0x1985f20;
op3val:0x3dff0000; valaddr_reg:x3; val_offset:8217*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8217*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2740:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x570d9e and fs2 == 0 and fe2 == 0x03 and fm2 == 0x185f20 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d570d9e; op2val:0x1985f20;
op3val:0x3dff8000; valaddr_reg:x3; val_offset:8220*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8220*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2741:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x570d9e and fs2 == 0 and fe2 == 0x03 and fm2 == 0x185f20 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d570d9e; op2val:0x1985f20;
op3val:0x3dffc000; valaddr_reg:x3; val_offset:8223*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8223*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2742:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x570d9e and fs2 == 0 and fe2 == 0x03 and fm2 == 0x185f20 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d570d9e; op2val:0x1985f20;
op3val:0x3dffe000; valaddr_reg:x3; val_offset:8226*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8226*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2743:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x570d9e and fs2 == 0 and fe2 == 0x03 and fm2 == 0x185f20 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d570d9e; op2val:0x1985f20;
op3val:0x3dfff000; valaddr_reg:x3; val_offset:8229*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8229*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2744:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x570d9e and fs2 == 0 and fe2 == 0x03 and fm2 == 0x185f20 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d570d9e; op2val:0x1985f20;
op3val:0x3dfff800; valaddr_reg:x3; val_offset:8232*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8232*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2745:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x570d9e and fs2 == 0 and fe2 == 0x03 and fm2 == 0x185f20 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d570d9e; op2val:0x1985f20;
op3val:0x3dfffc00; valaddr_reg:x3; val_offset:8235*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8235*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2746:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x570d9e and fs2 == 0 and fe2 == 0x03 and fm2 == 0x185f20 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d570d9e; op2val:0x1985f20;
op3val:0x3dfffe00; valaddr_reg:x3; val_offset:8238*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8238*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2747:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x570d9e and fs2 == 0 and fe2 == 0x03 and fm2 == 0x185f20 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d570d9e; op2val:0x1985f20;
op3val:0x3dffff00; valaddr_reg:x3; val_offset:8241*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8241*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2748:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x570d9e and fs2 == 0 and fe2 == 0x03 and fm2 == 0x185f20 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d570d9e; op2val:0x1985f20;
op3val:0x3dffff80; valaddr_reg:x3; val_offset:8244*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8244*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2749:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x570d9e and fs2 == 0 and fe2 == 0x03 and fm2 == 0x185f20 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d570d9e; op2val:0x1985f20;
op3val:0x3dffffc0; valaddr_reg:x3; val_offset:8247*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8247*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2750:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x570d9e and fs2 == 0 and fe2 == 0x03 and fm2 == 0x185f20 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d570d9e; op2val:0x1985f20;
op3val:0x3dffffe0; valaddr_reg:x3; val_offset:8250*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8250*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2751:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x570d9e and fs2 == 0 and fe2 == 0x03 and fm2 == 0x185f20 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d570d9e; op2val:0x1985f20;
op3val:0x3dfffff0; valaddr_reg:x3; val_offset:8253*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8253*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2752:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x570d9e and fs2 == 0 and fe2 == 0x03 and fm2 == 0x185f20 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d570d9e; op2val:0x1985f20;
op3val:0x3dfffff8; valaddr_reg:x3; val_offset:8256*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8256*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2753:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x570d9e and fs2 == 0 and fe2 == 0x03 and fm2 == 0x185f20 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d570d9e; op2val:0x1985f20;
op3val:0x3dfffffc; valaddr_reg:x3; val_offset:8259*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8259*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2754:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x570d9e and fs2 == 0 and fe2 == 0x03 and fm2 == 0x185f20 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d570d9e; op2val:0x1985f20;
op3val:0x3dfffffe; valaddr_reg:x3; val_offset:8262*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8262*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2755:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x570d9e and fs2 == 0 and fe2 == 0x03 and fm2 == 0x185f20 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d570d9e; op2val:0x1985f20;
op3val:0x3dffffff; valaddr_reg:x3; val_offset:8265*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8265*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2756:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x570d9e and fs2 == 0 and fe2 == 0x03 and fm2 == 0x185f20 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d570d9e; op2val:0x1985f20;
op3val:0x3f800001; valaddr_reg:x3; val_offset:8268*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8268*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2757:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x570d9e and fs2 == 0 and fe2 == 0x03 and fm2 == 0x185f20 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d570d9e; op2val:0x1985f20;
op3val:0x3f800003; valaddr_reg:x3; val_offset:8271*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8271*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2758:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x570d9e and fs2 == 0 and fe2 == 0x03 and fm2 == 0x185f20 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d570d9e; op2val:0x1985f20;
op3val:0x3f800007; valaddr_reg:x3; val_offset:8274*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8274*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2759:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x570d9e and fs2 == 0 and fe2 == 0x03 and fm2 == 0x185f20 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d570d9e; op2val:0x1985f20;
op3val:0x3f999999; valaddr_reg:x3; val_offset:8277*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8277*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2760:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x570d9e and fs2 == 0 and fe2 == 0x03 and fm2 == 0x185f20 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d570d9e; op2val:0x1985f20;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:8280*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8280*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2761:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x570d9e and fs2 == 0 and fe2 == 0x03 and fm2 == 0x185f20 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d570d9e; op2val:0x1985f20;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:8283*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8283*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2762:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x570d9e and fs2 == 0 and fe2 == 0x03 and fm2 == 0x185f20 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d570d9e; op2val:0x1985f20;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:8286*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8286*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2763:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x570d9e and fs2 == 0 and fe2 == 0x03 and fm2 == 0x185f20 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d570d9e; op2val:0x1985f20;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:8289*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8289*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2764:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x570d9e and fs2 == 0 and fe2 == 0x03 and fm2 == 0x185f20 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d570d9e; op2val:0x1985f20;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:8292*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8292*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2765:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x570d9e and fs2 == 0 and fe2 == 0x03 and fm2 == 0x185f20 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d570d9e; op2val:0x1985f20;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:8295*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8295*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2766:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x570d9e and fs2 == 0 and fe2 == 0x03 and fm2 == 0x185f20 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d570d9e; op2val:0x1985f20;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:8298*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8298*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2767:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x570d9e and fs2 == 0 and fe2 == 0x03 and fm2 == 0x185f20 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d570d9e; op2val:0x1985f20;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:8301*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8301*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2768:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x570d9e and fs2 == 0 and fe2 == 0x03 and fm2 == 0x185f20 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d570d9e; op2val:0x1985f20;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:8304*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8304*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2769:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x570d9e and fs2 == 0 and fe2 == 0x03 and fm2 == 0x185f20 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d570d9e; op2val:0x1985f20;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:8307*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8307*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2770:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x570d9e and fs2 == 0 and fe2 == 0x03 and fm2 == 0x185f20 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d570d9e; op2val:0x1985f20;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:8310*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8310*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2771:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x570d9e and fs2 == 0 and fe2 == 0x03 and fm2 == 0x185f20 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d570d9e; op2val:0x1985f20;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:8313*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8313*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2772:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x59b0d6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d59b0d6; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:8316*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8316*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2773:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x59b0d6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d59b0d6; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:8319*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8319*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2774:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x59b0d6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d59b0d6; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:8322*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8322*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2775:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x59b0d6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d59b0d6; op2val:0x0;
op3val:0x199999; valaddr_reg:x3; val_offset:8325*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8325*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2776:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x59b0d6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d59b0d6; op2val:0x0;
op3val:0x249249; valaddr_reg:x3; val_offset:8328*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8328*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2777:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x59b0d6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d59b0d6; op2val:0x0;
op3val:0x333333; valaddr_reg:x3; val_offset:8331*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8331*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2778:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x59b0d6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d59b0d6; op2val:0x0;
op3val:0x36db6d; valaddr_reg:x3; val_offset:8334*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8334*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2779:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x59b0d6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d59b0d6; op2val:0x0;
op3val:0x3bbbbb; valaddr_reg:x3; val_offset:8337*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8337*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2780:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x59b0d6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d59b0d6; op2val:0x0;
op3val:0x444444; valaddr_reg:x3; val_offset:8340*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8340*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2781:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x59b0d6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d59b0d6; op2val:0x0;
op3val:0x4ccccc; valaddr_reg:x3; val_offset:8343*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8343*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2782:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x59b0d6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d59b0d6; op2val:0x0;
op3val:0x5b6db6; valaddr_reg:x3; val_offset:8346*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8346*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2783:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x59b0d6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d59b0d6; op2val:0x0;
op3val:0x666666; valaddr_reg:x3; val_offset:8349*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8349*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2784:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x59b0d6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d59b0d6; op2val:0x0;
op3val:0x6db6db; valaddr_reg:x3; val_offset:8352*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8352*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2785:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x59b0d6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d59b0d6; op2val:0x0;
op3val:0x7ffff8; valaddr_reg:x3; val_offset:8355*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8355*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2786:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x59b0d6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d59b0d6; op2val:0x0;
op3val:0x7ffffc; valaddr_reg:x3; val_offset:8358*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8358*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2787:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x59b0d6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d59b0d6; op2val:0x0;
op3val:0x7ffffe; valaddr_reg:x3; val_offset:8361*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8361*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2788:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x59b0d6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d59b0d6; op2val:0x0;
op3val:0x4800000; valaddr_reg:x3; val_offset:8364*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8364*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2789:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x59b0d6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d59b0d6; op2val:0x0;
op3val:0x4800001; valaddr_reg:x3; val_offset:8367*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8367*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2790:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x59b0d6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d59b0d6; op2val:0x0;
op3val:0x4800003; valaddr_reg:x3; val_offset:8370*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8370*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2791:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x59b0d6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d59b0d6; op2val:0x0;
op3val:0x4800007; valaddr_reg:x3; val_offset:8373*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8373*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2792:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x59b0d6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d59b0d6; op2val:0x0;
op3val:0x480000f; valaddr_reg:x3; val_offset:8376*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8376*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2793:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x59b0d6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d59b0d6; op2val:0x0;
op3val:0x480001f; valaddr_reg:x3; val_offset:8379*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8379*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2794:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x59b0d6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d59b0d6; op2val:0x0;
op3val:0x480003f; valaddr_reg:x3; val_offset:8382*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8382*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2795:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x59b0d6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d59b0d6; op2val:0x0;
op3val:0x480007f; valaddr_reg:x3; val_offset:8385*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8385*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2796:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x59b0d6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d59b0d6; op2val:0x0;
op3val:0x48000ff; valaddr_reg:x3; val_offset:8388*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8388*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2797:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x59b0d6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d59b0d6; op2val:0x0;
op3val:0x48001ff; valaddr_reg:x3; val_offset:8391*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8391*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2798:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x59b0d6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d59b0d6; op2val:0x0;
op3val:0x48003ff; valaddr_reg:x3; val_offset:8394*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8394*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2799:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x59b0d6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d59b0d6; op2val:0x0;
op3val:0x48007ff; valaddr_reg:x3; val_offset:8397*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8397*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2800:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x59b0d6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d59b0d6; op2val:0x0;
op3val:0x4800fff; valaddr_reg:x3; val_offset:8400*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8400*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2801:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x59b0d6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d59b0d6; op2val:0x0;
op3val:0x4801fff; valaddr_reg:x3; val_offset:8403*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8403*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2802:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x59b0d6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d59b0d6; op2val:0x0;
op3val:0x4803fff; valaddr_reg:x3; val_offset:8406*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8406*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2803:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x59b0d6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d59b0d6; op2val:0x0;
op3val:0x4807fff; valaddr_reg:x3; val_offset:8409*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8409*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2804:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x59b0d6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d59b0d6; op2val:0x0;
op3val:0x480ffff; valaddr_reg:x3; val_offset:8412*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8412*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2805:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x59b0d6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d59b0d6; op2val:0x0;
op3val:0x481ffff; valaddr_reg:x3; val_offset:8415*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8415*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2806:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x59b0d6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d59b0d6; op2val:0x0;
op3val:0x483ffff; valaddr_reg:x3; val_offset:8418*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8418*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2807:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x59b0d6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d59b0d6; op2val:0x0;
op3val:0x487ffff; valaddr_reg:x3; val_offset:8421*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8421*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2808:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x59b0d6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d59b0d6; op2val:0x0;
op3val:0x48fffff; valaddr_reg:x3; val_offset:8424*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8424*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2809:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x59b0d6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d59b0d6; op2val:0x0;
op3val:0x49fffff; valaddr_reg:x3; val_offset:8427*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8427*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2810:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x59b0d6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d59b0d6; op2val:0x0;
op3val:0x4bfffff; valaddr_reg:x3; val_offset:8430*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8430*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2811:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x59b0d6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d59b0d6; op2val:0x0;
op3val:0x4c00000; valaddr_reg:x3; val_offset:8433*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8433*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2812:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x59b0d6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d59b0d6; op2val:0x0;
op3val:0x4e00000; valaddr_reg:x3; val_offset:8436*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8436*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2813:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x59b0d6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d59b0d6; op2val:0x0;
op3val:0x4f00000; valaddr_reg:x3; val_offset:8439*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8439*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2814:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x59b0d6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d59b0d6; op2val:0x0;
op3val:0x4f80000; valaddr_reg:x3; val_offset:8442*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8442*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2815:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x59b0d6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d59b0d6; op2val:0x0;
op3val:0x4fc0000; valaddr_reg:x3; val_offset:8445*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8445*0 + 3*21*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2102672089,32,FLEN)
NAN_BOXED(26895884,32,FLEN)
NAN_BOXED(528482272,32,FLEN)
NAN_BOXED(2102672089,32,FLEN)
NAN_BOXED(26895884,32,FLEN)
NAN_BOXED(528482288,32,FLEN)
NAN_BOXED(2102672089,32,FLEN)
NAN_BOXED(26895884,32,FLEN)
NAN_BOXED(528482296,32,FLEN)
NAN_BOXED(2102672089,32,FLEN)
NAN_BOXED(26895884,32,FLEN)
NAN_BOXED(528482300,32,FLEN)
NAN_BOXED(2102672089,32,FLEN)
NAN_BOXED(26895884,32,FLEN)
NAN_BOXED(528482302,32,FLEN)
NAN_BOXED(2102672089,32,FLEN)
NAN_BOXED(26895884,32,FLEN)
NAN_BOXED(528482303,32,FLEN)
NAN_BOXED(2102672089,32,FLEN)
NAN_BOXED(26895884,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2102672089,32,FLEN)
NAN_BOXED(26895884,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2102672089,32,FLEN)
NAN_BOXED(26895884,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2102672089,32,FLEN)
NAN_BOXED(26895884,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2102672089,32,FLEN)
NAN_BOXED(26895884,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2102672089,32,FLEN)
NAN_BOXED(26895884,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2102672089,32,FLEN)
NAN_BOXED(26895884,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2102672089,32,FLEN)
NAN_BOXED(26895884,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2102672089,32,FLEN)
NAN_BOXED(26895884,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2102672089,32,FLEN)
NAN_BOXED(26895884,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2102672089,32,FLEN)
NAN_BOXED(26895884,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2102672089,32,FLEN)
NAN_BOXED(26895884,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2102672089,32,FLEN)
NAN_BOXED(26895884,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2102672089,32,FLEN)
NAN_BOXED(26895884,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2102672089,32,FLEN)
NAN_BOXED(26895884,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2102672089,32,FLEN)
NAN_BOXED(26895884,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2102857118,32,FLEN)
NAN_BOXED(26763040,32,FLEN)
NAN_BOXED(1031798784,32,FLEN)
NAN_BOXED(2102857118,32,FLEN)
NAN_BOXED(26763040,32,FLEN)
NAN_BOXED(1031798785,32,FLEN)
NAN_BOXED(2102857118,32,FLEN)
NAN_BOXED(26763040,32,FLEN)
NAN_BOXED(1031798787,32,FLEN)
NAN_BOXED(2102857118,32,FLEN)
NAN_BOXED(26763040,32,FLEN)
NAN_BOXED(1031798791,32,FLEN)
NAN_BOXED(2102857118,32,FLEN)
NAN_BOXED(26763040,32,FLEN)
NAN_BOXED(1031798799,32,FLEN)
NAN_BOXED(2102857118,32,FLEN)
NAN_BOXED(26763040,32,FLEN)
NAN_BOXED(1031798815,32,FLEN)
NAN_BOXED(2102857118,32,FLEN)
NAN_BOXED(26763040,32,FLEN)
NAN_BOXED(1031798847,32,FLEN)
NAN_BOXED(2102857118,32,FLEN)
NAN_BOXED(26763040,32,FLEN)
NAN_BOXED(1031798911,32,FLEN)
NAN_BOXED(2102857118,32,FLEN)
NAN_BOXED(26763040,32,FLEN)
NAN_BOXED(1031799039,32,FLEN)
NAN_BOXED(2102857118,32,FLEN)
NAN_BOXED(26763040,32,FLEN)
NAN_BOXED(1031799295,32,FLEN)
NAN_BOXED(2102857118,32,FLEN)
NAN_BOXED(26763040,32,FLEN)
NAN_BOXED(1031799807,32,FLEN)
NAN_BOXED(2102857118,32,FLEN)
NAN_BOXED(26763040,32,FLEN)
NAN_BOXED(1031800831,32,FLEN)
NAN_BOXED(2102857118,32,FLEN)
NAN_BOXED(26763040,32,FLEN)
NAN_BOXED(1031802879,32,FLEN)
NAN_BOXED(2102857118,32,FLEN)
NAN_BOXED(26763040,32,FLEN)
NAN_BOXED(1031806975,32,FLEN)
NAN_BOXED(2102857118,32,FLEN)
NAN_BOXED(26763040,32,FLEN)
NAN_BOXED(1031815167,32,FLEN)
NAN_BOXED(2102857118,32,FLEN)
NAN_BOXED(26763040,32,FLEN)
NAN_BOXED(1031831551,32,FLEN)
NAN_BOXED(2102857118,32,FLEN)
NAN_BOXED(26763040,32,FLEN)
NAN_BOXED(1031864319,32,FLEN)
NAN_BOXED(2102857118,32,FLEN)
NAN_BOXED(26763040,32,FLEN)
NAN_BOXED(1031929855,32,FLEN)
NAN_BOXED(2102857118,32,FLEN)
NAN_BOXED(26763040,32,FLEN)
NAN_BOXED(1032060927,32,FLEN)
NAN_BOXED(2102857118,32,FLEN)
NAN_BOXED(26763040,32,FLEN)
NAN_BOXED(1032323071,32,FLEN)
NAN_BOXED(2102857118,32,FLEN)
NAN_BOXED(26763040,32,FLEN)
NAN_BOXED(1032847359,32,FLEN)
NAN_BOXED(2102857118,32,FLEN)
NAN_BOXED(26763040,32,FLEN)
NAN_BOXED(1033895935,32,FLEN)
NAN_BOXED(2102857118,32,FLEN)
NAN_BOXED(26763040,32,FLEN)
NAN_BOXED(1035993087,32,FLEN)
NAN_BOXED(2102857118,32,FLEN)
NAN_BOXED(26763040,32,FLEN)
NAN_BOXED(1035993088,32,FLEN)
NAN_BOXED(2102857118,32,FLEN)
NAN_BOXED(26763040,32,FLEN)
NAN_BOXED(1038090240,32,FLEN)
NAN_BOXED(2102857118,32,FLEN)
NAN_BOXED(26763040,32,FLEN)
NAN_BOXED(1039138816,32,FLEN)
NAN_BOXED(2102857118,32,FLEN)
NAN_BOXED(26763040,32,FLEN)
NAN_BOXED(1039663104,32,FLEN)
NAN_BOXED(2102857118,32,FLEN)
NAN_BOXED(26763040,32,FLEN)
NAN_BOXED(1039925248,32,FLEN)
NAN_BOXED(2102857118,32,FLEN)
NAN_BOXED(26763040,32,FLEN)
NAN_BOXED(1040056320,32,FLEN)
NAN_BOXED(2102857118,32,FLEN)
NAN_BOXED(26763040,32,FLEN)
NAN_BOXED(1040121856,32,FLEN)
NAN_BOXED(2102857118,32,FLEN)
NAN_BOXED(26763040,32,FLEN)
NAN_BOXED(1040154624,32,FLEN)
NAN_BOXED(2102857118,32,FLEN)
NAN_BOXED(26763040,32,FLEN)
NAN_BOXED(1040171008,32,FLEN)
NAN_BOXED(2102857118,32,FLEN)
NAN_BOXED(26763040,32,FLEN)
NAN_BOXED(1040179200,32,FLEN)
NAN_BOXED(2102857118,32,FLEN)
NAN_BOXED(26763040,32,FLEN)
NAN_BOXED(1040183296,32,FLEN)
NAN_BOXED(2102857118,32,FLEN)
NAN_BOXED(26763040,32,FLEN)
NAN_BOXED(1040185344,32,FLEN)
NAN_BOXED(2102857118,32,FLEN)
NAN_BOXED(26763040,32,FLEN)
NAN_BOXED(1040186368,32,FLEN)
NAN_BOXED(2102857118,32,FLEN)
NAN_BOXED(26763040,32,FLEN)
NAN_BOXED(1040186880,32,FLEN)
NAN_BOXED(2102857118,32,FLEN)
NAN_BOXED(26763040,32,FLEN)
NAN_BOXED(1040187136,32,FLEN)
NAN_BOXED(2102857118,32,FLEN)
NAN_BOXED(26763040,32,FLEN)
NAN_BOXED(1040187264,32,FLEN)
NAN_BOXED(2102857118,32,FLEN)
NAN_BOXED(26763040,32,FLEN)
NAN_BOXED(1040187328,32,FLEN)
NAN_BOXED(2102857118,32,FLEN)
NAN_BOXED(26763040,32,FLEN)
NAN_BOXED(1040187360,32,FLEN)
NAN_BOXED(2102857118,32,FLEN)
NAN_BOXED(26763040,32,FLEN)
NAN_BOXED(1040187376,32,FLEN)
NAN_BOXED(2102857118,32,FLEN)
NAN_BOXED(26763040,32,FLEN)
NAN_BOXED(1040187384,32,FLEN)
NAN_BOXED(2102857118,32,FLEN)
NAN_BOXED(26763040,32,FLEN)
NAN_BOXED(1040187388,32,FLEN)
NAN_BOXED(2102857118,32,FLEN)
NAN_BOXED(26763040,32,FLEN)
NAN_BOXED(1040187390,32,FLEN)
NAN_BOXED(2102857118,32,FLEN)
NAN_BOXED(26763040,32,FLEN)
NAN_BOXED(1040187391,32,FLEN)
NAN_BOXED(2102857118,32,FLEN)
NAN_BOXED(26763040,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2102857118,32,FLEN)
NAN_BOXED(26763040,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2102857118,32,FLEN)
NAN_BOXED(26763040,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2102857118,32,FLEN)
NAN_BOXED(26763040,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2102857118,32,FLEN)
NAN_BOXED(26763040,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2102857118,32,FLEN)
NAN_BOXED(26763040,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2102857118,32,FLEN)
NAN_BOXED(26763040,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2102857118,32,FLEN)
NAN_BOXED(26763040,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2102857118,32,FLEN)
NAN_BOXED(26763040,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2102857118,32,FLEN)
NAN_BOXED(26763040,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2102857118,32,FLEN)
NAN_BOXED(26763040,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2102857118,32,FLEN)
NAN_BOXED(26763040,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2102857118,32,FLEN)
NAN_BOXED(26763040,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2102857118,32,FLEN)
NAN_BOXED(26763040,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2102857118,32,FLEN)
NAN_BOXED(26763040,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2102857118,32,FLEN)
NAN_BOXED(26763040,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2103029974,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2103029974,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3,32,FLEN)
NAN_BOXED(2103029974,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7,32,FLEN)
NAN_BOXED(2103029974,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1677721,32,FLEN)
NAN_BOXED(2103029974,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2396745,32,FLEN)
NAN_BOXED(2103029974,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3355443,32,FLEN)
NAN_BOXED(2103029974,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3595117,32,FLEN)
NAN_BOXED(2103029974,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3914683,32,FLEN)
NAN_BOXED(2103029974,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4473924,32,FLEN)
NAN_BOXED(2103029974,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5033164,32,FLEN)
NAN_BOXED(2103029974,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5991862,32,FLEN)
NAN_BOXED(2103029974,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(6710886,32,FLEN)
NAN_BOXED(2103029974,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7190235,32,FLEN)
NAN_BOXED(2103029974,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388600,32,FLEN)
NAN_BOXED(2103029974,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388604,32,FLEN)
NAN_BOXED(2103029974,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388606,32,FLEN)
NAN_BOXED(2103029974,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75497472,32,FLEN)
NAN_BOXED(2103029974,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75497473,32,FLEN)
NAN_BOXED(2103029974,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75497475,32,FLEN)
NAN_BOXED(2103029974,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75497479,32,FLEN)
NAN_BOXED(2103029974,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75497487,32,FLEN)
NAN_BOXED(2103029974,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75497503,32,FLEN)
NAN_BOXED(2103029974,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75497535,32,FLEN)
NAN_BOXED(2103029974,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75497599,32,FLEN)
NAN_BOXED(2103029974,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75497727,32,FLEN)
NAN_BOXED(2103029974,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75497983,32,FLEN)
NAN_BOXED(2103029974,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75498495,32,FLEN)
NAN_BOXED(2103029974,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75499519,32,FLEN)
NAN_BOXED(2103029974,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75501567,32,FLEN)
NAN_BOXED(2103029974,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75505663,32,FLEN)
NAN_BOXED(2103029974,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75513855,32,FLEN)
NAN_BOXED(2103029974,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75530239,32,FLEN)
NAN_BOXED(2103029974,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75563007,32,FLEN)
NAN_BOXED(2103029974,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75628543,32,FLEN)
NAN_BOXED(2103029974,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75759615,32,FLEN)
NAN_BOXED(2103029974,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(76021759,32,FLEN)
NAN_BOXED(2103029974,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(76546047,32,FLEN)
NAN_BOXED(2103029974,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(77594623,32,FLEN)
NAN_BOXED(2103029974,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(79691775,32,FLEN)
NAN_BOXED(2103029974,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(79691776,32,FLEN)
NAN_BOXED(2103029974,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(81788928,32,FLEN)
NAN_BOXED(2103029974,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(82837504,32,FLEN)
NAN_BOXED(2103029974,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83361792,32,FLEN)
NAN_BOXED(2103029974,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83623936,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
