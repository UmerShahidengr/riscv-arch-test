
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:17:59 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_28544:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e391d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e391d; op2val:0x80000000;
op3val:0x8a001fff; valaddr_reg:x3; val_offset:85632*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85632*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28545:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e391d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e391d; op2val:0x80000000;
op3val:0x8a003fff; valaddr_reg:x3; val_offset:85635*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85635*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28546:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e391d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e391d; op2val:0x80000000;
op3val:0x8a007fff; valaddr_reg:x3; val_offset:85638*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85638*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28547:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e391d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e391d; op2val:0x80000000;
op3val:0x8a00ffff; valaddr_reg:x3; val_offset:85641*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85641*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28548:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e391d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e391d; op2val:0x80000000;
op3val:0x8a01ffff; valaddr_reg:x3; val_offset:85644*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85644*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28549:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e391d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e391d; op2val:0x80000000;
op3val:0x8a03ffff; valaddr_reg:x3; val_offset:85647*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85647*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28550:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e391d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e391d; op2val:0x80000000;
op3val:0x8a07ffff; valaddr_reg:x3; val_offset:85650*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85650*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28551:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e391d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e391d; op2val:0x80000000;
op3val:0x8a0fffff; valaddr_reg:x3; val_offset:85653*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85653*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28552:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e391d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e391d; op2val:0x80000000;
op3val:0x8a1fffff; valaddr_reg:x3; val_offset:85656*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85656*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28553:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e391d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e391d; op2val:0x80000000;
op3val:0x8a3fffff; valaddr_reg:x3; val_offset:85659*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85659*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28554:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e391d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e391d; op2val:0x80000000;
op3val:0x8a400000; valaddr_reg:x3; val_offset:85662*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85662*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28555:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e391d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e391d; op2val:0x80000000;
op3val:0x8a600000; valaddr_reg:x3; val_offset:85665*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85665*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28556:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e391d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e391d; op2val:0x80000000;
op3val:0x8a700000; valaddr_reg:x3; val_offset:85668*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85668*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28557:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e391d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e391d; op2val:0x80000000;
op3val:0x8a780000; valaddr_reg:x3; val_offset:85671*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85671*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28558:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e391d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e391d; op2val:0x80000000;
op3val:0x8a7c0000; valaddr_reg:x3; val_offset:85674*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85674*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28559:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e391d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e391d; op2val:0x80000000;
op3val:0x8a7e0000; valaddr_reg:x3; val_offset:85677*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85677*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28560:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e391d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e391d; op2val:0x80000000;
op3val:0x8a7f0000; valaddr_reg:x3; val_offset:85680*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85680*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28561:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e391d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e391d; op2val:0x80000000;
op3val:0x8a7f8000; valaddr_reg:x3; val_offset:85683*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85683*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28562:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e391d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e391d; op2val:0x80000000;
op3val:0x8a7fc000; valaddr_reg:x3; val_offset:85686*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85686*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28563:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e391d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e391d; op2val:0x80000000;
op3val:0x8a7fe000; valaddr_reg:x3; val_offset:85689*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85689*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28564:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e391d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e391d; op2val:0x80000000;
op3val:0x8a7ff000; valaddr_reg:x3; val_offset:85692*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85692*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28565:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e391d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e391d; op2val:0x80000000;
op3val:0x8a7ff800; valaddr_reg:x3; val_offset:85695*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85695*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28566:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e391d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e391d; op2val:0x80000000;
op3val:0x8a7ffc00; valaddr_reg:x3; val_offset:85698*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85698*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28567:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e391d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e391d; op2val:0x80000000;
op3val:0x8a7ffe00; valaddr_reg:x3; val_offset:85701*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85701*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28568:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e391d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e391d; op2val:0x80000000;
op3val:0x8a7fff00; valaddr_reg:x3; val_offset:85704*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85704*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28569:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e391d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e391d; op2val:0x80000000;
op3val:0x8a7fff80; valaddr_reg:x3; val_offset:85707*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85707*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28570:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e391d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e391d; op2val:0x80000000;
op3val:0x8a7fffc0; valaddr_reg:x3; val_offset:85710*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85710*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28571:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e391d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e391d; op2val:0x80000000;
op3val:0x8a7fffe0; valaddr_reg:x3; val_offset:85713*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85713*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28572:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e391d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e391d; op2val:0x80000000;
op3val:0x8a7ffff0; valaddr_reg:x3; val_offset:85716*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85716*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28573:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e391d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e391d; op2val:0x80000000;
op3val:0x8a7ffff8; valaddr_reg:x3; val_offset:85719*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85719*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28574:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e391d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e391d; op2val:0x80000000;
op3val:0x8a7ffffc; valaddr_reg:x3; val_offset:85722*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85722*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28575:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e391d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e391d; op2val:0x80000000;
op3val:0x8a7ffffe; valaddr_reg:x3; val_offset:85725*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85725*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28576:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e391d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e391d; op2val:0x80000000;
op3val:0x8a7fffff; valaddr_reg:x3; val_offset:85728*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85728*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28577:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f9c8e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x642bca and fs3 == 0 and fe3 == 0xd1 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f9c8e; op2val:0x3fe42bca;
op3val:0x68800000; valaddr_reg:x3; val_offset:85731*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85731*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28578:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f9c8e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x642bca and fs3 == 0 and fe3 == 0xd1 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f9c8e; op2val:0x3fe42bca;
op3val:0x68800001; valaddr_reg:x3; val_offset:85734*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85734*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28579:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f9c8e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x642bca and fs3 == 0 and fe3 == 0xd1 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f9c8e; op2val:0x3fe42bca;
op3val:0x68800003; valaddr_reg:x3; val_offset:85737*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85737*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28580:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f9c8e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x642bca and fs3 == 0 and fe3 == 0xd1 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f9c8e; op2val:0x3fe42bca;
op3val:0x68800007; valaddr_reg:x3; val_offset:85740*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85740*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28581:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f9c8e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x642bca and fs3 == 0 and fe3 == 0xd1 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f9c8e; op2val:0x3fe42bca;
op3val:0x6880000f; valaddr_reg:x3; val_offset:85743*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85743*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28582:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f9c8e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x642bca and fs3 == 0 and fe3 == 0xd1 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f9c8e; op2val:0x3fe42bca;
op3val:0x6880001f; valaddr_reg:x3; val_offset:85746*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85746*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28583:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f9c8e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x642bca and fs3 == 0 and fe3 == 0xd1 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f9c8e; op2val:0x3fe42bca;
op3val:0x6880003f; valaddr_reg:x3; val_offset:85749*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85749*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28584:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f9c8e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x642bca and fs3 == 0 and fe3 == 0xd1 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f9c8e; op2val:0x3fe42bca;
op3val:0x6880007f; valaddr_reg:x3; val_offset:85752*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85752*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28585:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f9c8e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x642bca and fs3 == 0 and fe3 == 0xd1 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f9c8e; op2val:0x3fe42bca;
op3val:0x688000ff; valaddr_reg:x3; val_offset:85755*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85755*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28586:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f9c8e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x642bca and fs3 == 0 and fe3 == 0xd1 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f9c8e; op2val:0x3fe42bca;
op3val:0x688001ff; valaddr_reg:x3; val_offset:85758*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85758*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28587:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f9c8e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x642bca and fs3 == 0 and fe3 == 0xd1 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f9c8e; op2val:0x3fe42bca;
op3val:0x688003ff; valaddr_reg:x3; val_offset:85761*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85761*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28588:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f9c8e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x642bca and fs3 == 0 and fe3 == 0xd1 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f9c8e; op2val:0x3fe42bca;
op3val:0x688007ff; valaddr_reg:x3; val_offset:85764*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85764*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28589:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f9c8e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x642bca and fs3 == 0 and fe3 == 0xd1 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f9c8e; op2val:0x3fe42bca;
op3val:0x68800fff; valaddr_reg:x3; val_offset:85767*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85767*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28590:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f9c8e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x642bca and fs3 == 0 and fe3 == 0xd1 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f9c8e; op2val:0x3fe42bca;
op3val:0x68801fff; valaddr_reg:x3; val_offset:85770*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85770*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28591:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f9c8e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x642bca and fs3 == 0 and fe3 == 0xd1 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f9c8e; op2val:0x3fe42bca;
op3val:0x68803fff; valaddr_reg:x3; val_offset:85773*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85773*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28592:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f9c8e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x642bca and fs3 == 0 and fe3 == 0xd1 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f9c8e; op2val:0x3fe42bca;
op3val:0x68807fff; valaddr_reg:x3; val_offset:85776*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85776*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28593:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f9c8e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x642bca and fs3 == 0 and fe3 == 0xd1 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f9c8e; op2val:0x3fe42bca;
op3val:0x6880ffff; valaddr_reg:x3; val_offset:85779*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85779*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28594:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f9c8e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x642bca and fs3 == 0 and fe3 == 0xd1 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f9c8e; op2val:0x3fe42bca;
op3val:0x6881ffff; valaddr_reg:x3; val_offset:85782*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85782*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28595:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f9c8e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x642bca and fs3 == 0 and fe3 == 0xd1 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f9c8e; op2val:0x3fe42bca;
op3val:0x6883ffff; valaddr_reg:x3; val_offset:85785*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85785*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28596:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f9c8e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x642bca and fs3 == 0 and fe3 == 0xd1 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f9c8e; op2val:0x3fe42bca;
op3val:0x6887ffff; valaddr_reg:x3; val_offset:85788*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85788*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28597:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f9c8e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x642bca and fs3 == 0 and fe3 == 0xd1 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f9c8e; op2val:0x3fe42bca;
op3val:0x688fffff; valaddr_reg:x3; val_offset:85791*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85791*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28598:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f9c8e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x642bca and fs3 == 0 and fe3 == 0xd1 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f9c8e; op2val:0x3fe42bca;
op3val:0x689fffff; valaddr_reg:x3; val_offset:85794*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85794*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28599:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f9c8e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x642bca and fs3 == 0 and fe3 == 0xd1 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f9c8e; op2val:0x3fe42bca;
op3val:0x68bfffff; valaddr_reg:x3; val_offset:85797*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85797*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28600:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f9c8e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x642bca and fs3 == 0 and fe3 == 0xd1 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f9c8e; op2val:0x3fe42bca;
op3val:0x68c00000; valaddr_reg:x3; val_offset:85800*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85800*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28601:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f9c8e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x642bca and fs3 == 0 and fe3 == 0xd1 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f9c8e; op2val:0x3fe42bca;
op3val:0x68e00000; valaddr_reg:x3; val_offset:85803*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85803*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28602:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f9c8e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x642bca and fs3 == 0 and fe3 == 0xd1 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f9c8e; op2val:0x3fe42bca;
op3val:0x68f00000; valaddr_reg:x3; val_offset:85806*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85806*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28603:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f9c8e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x642bca and fs3 == 0 and fe3 == 0xd1 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f9c8e; op2val:0x3fe42bca;
op3val:0x68f80000; valaddr_reg:x3; val_offset:85809*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85809*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28604:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f9c8e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x642bca and fs3 == 0 and fe3 == 0xd1 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f9c8e; op2val:0x3fe42bca;
op3val:0x68fc0000; valaddr_reg:x3; val_offset:85812*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85812*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28605:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f9c8e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x642bca and fs3 == 0 and fe3 == 0xd1 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f9c8e; op2val:0x3fe42bca;
op3val:0x68fe0000; valaddr_reg:x3; val_offset:85815*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85815*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28606:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f9c8e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x642bca and fs3 == 0 and fe3 == 0xd1 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f9c8e; op2val:0x3fe42bca;
op3val:0x68ff0000; valaddr_reg:x3; val_offset:85818*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85818*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28607:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f9c8e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x642bca and fs3 == 0 and fe3 == 0xd1 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f9c8e; op2val:0x3fe42bca;
op3val:0x68ff8000; valaddr_reg:x3; val_offset:85821*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85821*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28608:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f9c8e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x642bca and fs3 == 0 and fe3 == 0xd1 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f9c8e; op2val:0x3fe42bca;
op3val:0x68ffc000; valaddr_reg:x3; val_offset:85824*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85824*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28609:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f9c8e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x642bca and fs3 == 0 and fe3 == 0xd1 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f9c8e; op2val:0x3fe42bca;
op3val:0x68ffe000; valaddr_reg:x3; val_offset:85827*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85827*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28610:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f9c8e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x642bca and fs3 == 0 and fe3 == 0xd1 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f9c8e; op2val:0x3fe42bca;
op3val:0x68fff000; valaddr_reg:x3; val_offset:85830*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85830*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28611:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f9c8e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x642bca and fs3 == 0 and fe3 == 0xd1 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f9c8e; op2val:0x3fe42bca;
op3val:0x68fff800; valaddr_reg:x3; val_offset:85833*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85833*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28612:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f9c8e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x642bca and fs3 == 0 and fe3 == 0xd1 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f9c8e; op2val:0x3fe42bca;
op3val:0x68fffc00; valaddr_reg:x3; val_offset:85836*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85836*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28613:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f9c8e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x642bca and fs3 == 0 and fe3 == 0xd1 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f9c8e; op2val:0x3fe42bca;
op3val:0x68fffe00; valaddr_reg:x3; val_offset:85839*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85839*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28614:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f9c8e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x642bca and fs3 == 0 and fe3 == 0xd1 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f9c8e; op2val:0x3fe42bca;
op3val:0x68ffff00; valaddr_reg:x3; val_offset:85842*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85842*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28615:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f9c8e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x642bca and fs3 == 0 and fe3 == 0xd1 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f9c8e; op2val:0x3fe42bca;
op3val:0x68ffff80; valaddr_reg:x3; val_offset:85845*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85845*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28616:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f9c8e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x642bca and fs3 == 0 and fe3 == 0xd1 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f9c8e; op2val:0x3fe42bca;
op3val:0x68ffffc0; valaddr_reg:x3; val_offset:85848*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85848*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28617:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f9c8e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x642bca and fs3 == 0 and fe3 == 0xd1 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f9c8e; op2val:0x3fe42bca;
op3val:0x68ffffe0; valaddr_reg:x3; val_offset:85851*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85851*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28618:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f9c8e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x642bca and fs3 == 0 and fe3 == 0xd1 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f9c8e; op2val:0x3fe42bca;
op3val:0x68fffff0; valaddr_reg:x3; val_offset:85854*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85854*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28619:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f9c8e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x642bca and fs3 == 0 and fe3 == 0xd1 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f9c8e; op2val:0x3fe42bca;
op3val:0x68fffff8; valaddr_reg:x3; val_offset:85857*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85857*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28620:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f9c8e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x642bca and fs3 == 0 and fe3 == 0xd1 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f9c8e; op2val:0x3fe42bca;
op3val:0x68fffffc; valaddr_reg:x3; val_offset:85860*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85860*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28621:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f9c8e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x642bca and fs3 == 0 and fe3 == 0xd1 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f9c8e; op2val:0x3fe42bca;
op3val:0x68fffffe; valaddr_reg:x3; val_offset:85863*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85863*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28622:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f9c8e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x642bca and fs3 == 0 and fe3 == 0xd1 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f9c8e; op2val:0x3fe42bca;
op3val:0x68ffffff; valaddr_reg:x3; val_offset:85866*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85866*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28623:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f9c8e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x642bca and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f9c8e; op2val:0x3fe42bca;
op3val:0x7f000001; valaddr_reg:x3; val_offset:85869*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85869*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28624:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f9c8e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x642bca and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f9c8e; op2val:0x3fe42bca;
op3val:0x7f000003; valaddr_reg:x3; val_offset:85872*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85872*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28625:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f9c8e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x642bca and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f9c8e; op2val:0x3fe42bca;
op3val:0x7f000007; valaddr_reg:x3; val_offset:85875*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85875*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28626:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f9c8e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x642bca and fs3 == 0 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f9c8e; op2val:0x3fe42bca;
op3val:0x7f199999; valaddr_reg:x3; val_offset:85878*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85878*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28627:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f9c8e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x642bca and fs3 == 0 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f9c8e; op2val:0x3fe42bca;
op3val:0x7f249249; valaddr_reg:x3; val_offset:85881*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85881*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28628:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f9c8e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x642bca and fs3 == 0 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f9c8e; op2val:0x3fe42bca;
op3val:0x7f333333; valaddr_reg:x3; val_offset:85884*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85884*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28629:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f9c8e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x642bca and fs3 == 0 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f9c8e; op2val:0x3fe42bca;
op3val:0x7f36db6d; valaddr_reg:x3; val_offset:85887*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85887*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28630:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f9c8e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x642bca and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f9c8e; op2val:0x3fe42bca;
op3val:0x7f3bbbbb; valaddr_reg:x3; val_offset:85890*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85890*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28631:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f9c8e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x642bca and fs3 == 0 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f9c8e; op2val:0x3fe42bca;
op3val:0x7f444444; valaddr_reg:x3; val_offset:85893*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85893*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28632:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f9c8e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x642bca and fs3 == 0 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f9c8e; op2val:0x3fe42bca;
op3val:0x7f4ccccc; valaddr_reg:x3; val_offset:85896*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85896*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28633:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f9c8e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x642bca and fs3 == 0 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f9c8e; op2val:0x3fe42bca;
op3val:0x7f5b6db6; valaddr_reg:x3; val_offset:85899*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85899*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28634:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f9c8e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x642bca and fs3 == 0 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f9c8e; op2val:0x3fe42bca;
op3val:0x7f666666; valaddr_reg:x3; val_offset:85902*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85902*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28635:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f9c8e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x642bca and fs3 == 0 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f9c8e; op2val:0x3fe42bca;
op3val:0x7f6db6db; valaddr_reg:x3; val_offset:85905*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85905*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28636:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f9c8e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x642bca and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f9c8e; op2val:0x3fe42bca;
op3val:0x7f7ffff8; valaddr_reg:x3; val_offset:85908*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85908*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28637:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f9c8e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x642bca and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f9c8e; op2val:0x3fe42bca;
op3val:0x7f7ffffc; valaddr_reg:x3; val_offset:85911*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85911*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28638:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f9c8e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x642bca and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f9c8e; op2val:0x3fe42bca;
op3val:0x7f7ffffe; valaddr_reg:x3; val_offset:85914*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85914*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28639:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0fb593 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x390104 and fs3 == 1 and fe3 == 0x46 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0fb593; op2val:0x80390104;
op3val:0xa3000000; valaddr_reg:x3; val_offset:85917*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85917*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28640:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0fb593 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x390104 and fs3 == 1 and fe3 == 0x46 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0fb593; op2val:0x80390104;
op3val:0xa3000001; valaddr_reg:x3; val_offset:85920*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85920*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28641:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0fb593 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x390104 and fs3 == 1 and fe3 == 0x46 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0fb593; op2val:0x80390104;
op3val:0xa3000003; valaddr_reg:x3; val_offset:85923*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85923*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28642:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0fb593 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x390104 and fs3 == 1 and fe3 == 0x46 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0fb593; op2val:0x80390104;
op3val:0xa3000007; valaddr_reg:x3; val_offset:85926*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85926*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28643:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0fb593 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x390104 and fs3 == 1 and fe3 == 0x46 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0fb593; op2val:0x80390104;
op3val:0xa300000f; valaddr_reg:x3; val_offset:85929*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85929*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28644:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0fb593 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x390104 and fs3 == 1 and fe3 == 0x46 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0fb593; op2val:0x80390104;
op3val:0xa300001f; valaddr_reg:x3; val_offset:85932*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85932*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28645:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0fb593 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x390104 and fs3 == 1 and fe3 == 0x46 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0fb593; op2val:0x80390104;
op3val:0xa300003f; valaddr_reg:x3; val_offset:85935*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85935*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28646:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0fb593 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x390104 and fs3 == 1 and fe3 == 0x46 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0fb593; op2val:0x80390104;
op3val:0xa300007f; valaddr_reg:x3; val_offset:85938*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85938*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28647:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0fb593 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x390104 and fs3 == 1 and fe3 == 0x46 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0fb593; op2val:0x80390104;
op3val:0xa30000ff; valaddr_reg:x3; val_offset:85941*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85941*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28648:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0fb593 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x390104 and fs3 == 1 and fe3 == 0x46 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0fb593; op2val:0x80390104;
op3val:0xa30001ff; valaddr_reg:x3; val_offset:85944*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85944*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28649:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0fb593 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x390104 and fs3 == 1 and fe3 == 0x46 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0fb593; op2val:0x80390104;
op3val:0xa30003ff; valaddr_reg:x3; val_offset:85947*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85947*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28650:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0fb593 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x390104 and fs3 == 1 and fe3 == 0x46 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0fb593; op2val:0x80390104;
op3val:0xa30007ff; valaddr_reg:x3; val_offset:85950*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85950*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28651:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0fb593 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x390104 and fs3 == 1 and fe3 == 0x46 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0fb593; op2val:0x80390104;
op3val:0xa3000fff; valaddr_reg:x3; val_offset:85953*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85953*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28652:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0fb593 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x390104 and fs3 == 1 and fe3 == 0x46 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0fb593; op2val:0x80390104;
op3val:0xa3001fff; valaddr_reg:x3; val_offset:85956*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85956*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28653:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0fb593 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x390104 and fs3 == 1 and fe3 == 0x46 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0fb593; op2val:0x80390104;
op3val:0xa3003fff; valaddr_reg:x3; val_offset:85959*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85959*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28654:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0fb593 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x390104 and fs3 == 1 and fe3 == 0x46 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0fb593; op2val:0x80390104;
op3val:0xa3007fff; valaddr_reg:x3; val_offset:85962*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85962*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28655:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0fb593 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x390104 and fs3 == 1 and fe3 == 0x46 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0fb593; op2val:0x80390104;
op3val:0xa300ffff; valaddr_reg:x3; val_offset:85965*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85965*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28656:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0fb593 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x390104 and fs3 == 1 and fe3 == 0x46 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0fb593; op2val:0x80390104;
op3val:0xa301ffff; valaddr_reg:x3; val_offset:85968*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85968*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28657:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0fb593 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x390104 and fs3 == 1 and fe3 == 0x46 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0fb593; op2val:0x80390104;
op3val:0xa303ffff; valaddr_reg:x3; val_offset:85971*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85971*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28658:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0fb593 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x390104 and fs3 == 1 and fe3 == 0x46 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0fb593; op2val:0x80390104;
op3val:0xa307ffff; valaddr_reg:x3; val_offset:85974*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85974*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28659:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0fb593 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x390104 and fs3 == 1 and fe3 == 0x46 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0fb593; op2val:0x80390104;
op3val:0xa30fffff; valaddr_reg:x3; val_offset:85977*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85977*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28660:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0fb593 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x390104 and fs3 == 1 and fe3 == 0x46 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0fb593; op2val:0x80390104;
op3val:0xa31fffff; valaddr_reg:x3; val_offset:85980*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85980*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28661:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0fb593 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x390104 and fs3 == 1 and fe3 == 0x46 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0fb593; op2val:0x80390104;
op3val:0xa33fffff; valaddr_reg:x3; val_offset:85983*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85983*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28662:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0fb593 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x390104 and fs3 == 1 and fe3 == 0x46 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0fb593; op2val:0x80390104;
op3val:0xa3400000; valaddr_reg:x3; val_offset:85986*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85986*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28663:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0fb593 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x390104 and fs3 == 1 and fe3 == 0x46 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0fb593; op2val:0x80390104;
op3val:0xa3600000; valaddr_reg:x3; val_offset:85989*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85989*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28664:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0fb593 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x390104 and fs3 == 1 and fe3 == 0x46 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0fb593; op2val:0x80390104;
op3val:0xa3700000; valaddr_reg:x3; val_offset:85992*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85992*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28665:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0fb593 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x390104 and fs3 == 1 and fe3 == 0x46 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0fb593; op2val:0x80390104;
op3val:0xa3780000; valaddr_reg:x3; val_offset:85995*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85995*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28666:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0fb593 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x390104 and fs3 == 1 and fe3 == 0x46 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0fb593; op2val:0x80390104;
op3val:0xa37c0000; valaddr_reg:x3; val_offset:85998*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85998*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28667:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0fb593 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x390104 and fs3 == 1 and fe3 == 0x46 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0fb593; op2val:0x80390104;
op3val:0xa37e0000; valaddr_reg:x3; val_offset:86001*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86001*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28668:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0fb593 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x390104 and fs3 == 1 and fe3 == 0x46 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0fb593; op2val:0x80390104;
op3val:0xa37f0000; valaddr_reg:x3; val_offset:86004*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86004*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28669:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0fb593 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x390104 and fs3 == 1 and fe3 == 0x46 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0fb593; op2val:0x80390104;
op3val:0xa37f8000; valaddr_reg:x3; val_offset:86007*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86007*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28670:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0fb593 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x390104 and fs3 == 1 and fe3 == 0x46 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0fb593; op2val:0x80390104;
op3val:0xa37fc000; valaddr_reg:x3; val_offset:86010*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86010*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28671:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0fb593 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x390104 and fs3 == 1 and fe3 == 0x46 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0fb593; op2val:0x80390104;
op3val:0xa37fe000; valaddr_reg:x3; val_offset:86013*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86013*0 + 3*223*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2131638557,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2315263999,32,FLEN)
NAN_BOXED(2131638557,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2315272191,32,FLEN)
NAN_BOXED(2131638557,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2315288575,32,FLEN)
NAN_BOXED(2131638557,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2315321343,32,FLEN)
NAN_BOXED(2131638557,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2315386879,32,FLEN)
NAN_BOXED(2131638557,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2315517951,32,FLEN)
NAN_BOXED(2131638557,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2315780095,32,FLEN)
NAN_BOXED(2131638557,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2316304383,32,FLEN)
NAN_BOXED(2131638557,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2317352959,32,FLEN)
NAN_BOXED(2131638557,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2319450111,32,FLEN)
NAN_BOXED(2131638557,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2319450112,32,FLEN)
NAN_BOXED(2131638557,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2321547264,32,FLEN)
NAN_BOXED(2131638557,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2322595840,32,FLEN)
NAN_BOXED(2131638557,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323120128,32,FLEN)
NAN_BOXED(2131638557,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323382272,32,FLEN)
NAN_BOXED(2131638557,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323513344,32,FLEN)
NAN_BOXED(2131638557,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323578880,32,FLEN)
NAN_BOXED(2131638557,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323611648,32,FLEN)
NAN_BOXED(2131638557,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323628032,32,FLEN)
NAN_BOXED(2131638557,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323636224,32,FLEN)
NAN_BOXED(2131638557,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323640320,32,FLEN)
NAN_BOXED(2131638557,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323642368,32,FLEN)
NAN_BOXED(2131638557,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323643392,32,FLEN)
NAN_BOXED(2131638557,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323643904,32,FLEN)
NAN_BOXED(2131638557,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323644160,32,FLEN)
NAN_BOXED(2131638557,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323644288,32,FLEN)
NAN_BOXED(2131638557,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323644352,32,FLEN)
NAN_BOXED(2131638557,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323644384,32,FLEN)
NAN_BOXED(2131638557,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323644400,32,FLEN)
NAN_BOXED(2131638557,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323644408,32,FLEN)
NAN_BOXED(2131638557,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323644412,32,FLEN)
NAN_BOXED(2131638557,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323644414,32,FLEN)
NAN_BOXED(2131638557,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323644415,32,FLEN)
NAN_BOXED(2131729550,32,FLEN)
NAN_BOXED(1071918026,32,FLEN)
NAN_BOXED(1753219072,32,FLEN)
NAN_BOXED(2131729550,32,FLEN)
NAN_BOXED(1071918026,32,FLEN)
NAN_BOXED(1753219073,32,FLEN)
NAN_BOXED(2131729550,32,FLEN)
NAN_BOXED(1071918026,32,FLEN)
NAN_BOXED(1753219075,32,FLEN)
NAN_BOXED(2131729550,32,FLEN)
NAN_BOXED(1071918026,32,FLEN)
NAN_BOXED(1753219079,32,FLEN)
NAN_BOXED(2131729550,32,FLEN)
NAN_BOXED(1071918026,32,FLEN)
NAN_BOXED(1753219087,32,FLEN)
NAN_BOXED(2131729550,32,FLEN)
NAN_BOXED(1071918026,32,FLEN)
NAN_BOXED(1753219103,32,FLEN)
NAN_BOXED(2131729550,32,FLEN)
NAN_BOXED(1071918026,32,FLEN)
NAN_BOXED(1753219135,32,FLEN)
NAN_BOXED(2131729550,32,FLEN)
NAN_BOXED(1071918026,32,FLEN)
NAN_BOXED(1753219199,32,FLEN)
NAN_BOXED(2131729550,32,FLEN)
NAN_BOXED(1071918026,32,FLEN)
NAN_BOXED(1753219327,32,FLEN)
NAN_BOXED(2131729550,32,FLEN)
NAN_BOXED(1071918026,32,FLEN)
NAN_BOXED(1753219583,32,FLEN)
NAN_BOXED(2131729550,32,FLEN)
NAN_BOXED(1071918026,32,FLEN)
NAN_BOXED(1753220095,32,FLEN)
NAN_BOXED(2131729550,32,FLEN)
NAN_BOXED(1071918026,32,FLEN)
NAN_BOXED(1753221119,32,FLEN)
NAN_BOXED(2131729550,32,FLEN)
NAN_BOXED(1071918026,32,FLEN)
NAN_BOXED(1753223167,32,FLEN)
NAN_BOXED(2131729550,32,FLEN)
NAN_BOXED(1071918026,32,FLEN)
NAN_BOXED(1753227263,32,FLEN)
NAN_BOXED(2131729550,32,FLEN)
NAN_BOXED(1071918026,32,FLEN)
NAN_BOXED(1753235455,32,FLEN)
NAN_BOXED(2131729550,32,FLEN)
NAN_BOXED(1071918026,32,FLEN)
NAN_BOXED(1753251839,32,FLEN)
NAN_BOXED(2131729550,32,FLEN)
NAN_BOXED(1071918026,32,FLEN)
NAN_BOXED(1753284607,32,FLEN)
NAN_BOXED(2131729550,32,FLEN)
NAN_BOXED(1071918026,32,FLEN)
NAN_BOXED(1753350143,32,FLEN)
NAN_BOXED(2131729550,32,FLEN)
NAN_BOXED(1071918026,32,FLEN)
NAN_BOXED(1753481215,32,FLEN)
NAN_BOXED(2131729550,32,FLEN)
NAN_BOXED(1071918026,32,FLEN)
NAN_BOXED(1753743359,32,FLEN)
NAN_BOXED(2131729550,32,FLEN)
NAN_BOXED(1071918026,32,FLEN)
NAN_BOXED(1754267647,32,FLEN)
NAN_BOXED(2131729550,32,FLEN)
NAN_BOXED(1071918026,32,FLEN)
NAN_BOXED(1755316223,32,FLEN)
NAN_BOXED(2131729550,32,FLEN)
NAN_BOXED(1071918026,32,FLEN)
NAN_BOXED(1757413375,32,FLEN)
NAN_BOXED(2131729550,32,FLEN)
NAN_BOXED(1071918026,32,FLEN)
NAN_BOXED(1757413376,32,FLEN)
NAN_BOXED(2131729550,32,FLEN)
NAN_BOXED(1071918026,32,FLEN)
NAN_BOXED(1759510528,32,FLEN)
NAN_BOXED(2131729550,32,FLEN)
NAN_BOXED(1071918026,32,FLEN)
NAN_BOXED(1760559104,32,FLEN)
NAN_BOXED(2131729550,32,FLEN)
NAN_BOXED(1071918026,32,FLEN)
NAN_BOXED(1761083392,32,FLEN)
NAN_BOXED(2131729550,32,FLEN)
NAN_BOXED(1071918026,32,FLEN)
NAN_BOXED(1761345536,32,FLEN)
NAN_BOXED(2131729550,32,FLEN)
NAN_BOXED(1071918026,32,FLEN)
NAN_BOXED(1761476608,32,FLEN)
NAN_BOXED(2131729550,32,FLEN)
NAN_BOXED(1071918026,32,FLEN)
NAN_BOXED(1761542144,32,FLEN)
NAN_BOXED(2131729550,32,FLEN)
NAN_BOXED(1071918026,32,FLEN)
NAN_BOXED(1761574912,32,FLEN)
NAN_BOXED(2131729550,32,FLEN)
NAN_BOXED(1071918026,32,FLEN)
NAN_BOXED(1761591296,32,FLEN)
NAN_BOXED(2131729550,32,FLEN)
NAN_BOXED(1071918026,32,FLEN)
NAN_BOXED(1761599488,32,FLEN)
NAN_BOXED(2131729550,32,FLEN)
NAN_BOXED(1071918026,32,FLEN)
NAN_BOXED(1761603584,32,FLEN)
NAN_BOXED(2131729550,32,FLEN)
NAN_BOXED(1071918026,32,FLEN)
NAN_BOXED(1761605632,32,FLEN)
NAN_BOXED(2131729550,32,FLEN)
NAN_BOXED(1071918026,32,FLEN)
NAN_BOXED(1761606656,32,FLEN)
NAN_BOXED(2131729550,32,FLEN)
NAN_BOXED(1071918026,32,FLEN)
NAN_BOXED(1761607168,32,FLEN)
NAN_BOXED(2131729550,32,FLEN)
NAN_BOXED(1071918026,32,FLEN)
NAN_BOXED(1761607424,32,FLEN)
NAN_BOXED(2131729550,32,FLEN)
NAN_BOXED(1071918026,32,FLEN)
NAN_BOXED(1761607552,32,FLEN)
NAN_BOXED(2131729550,32,FLEN)
NAN_BOXED(1071918026,32,FLEN)
NAN_BOXED(1761607616,32,FLEN)
NAN_BOXED(2131729550,32,FLEN)
NAN_BOXED(1071918026,32,FLEN)
NAN_BOXED(1761607648,32,FLEN)
NAN_BOXED(2131729550,32,FLEN)
NAN_BOXED(1071918026,32,FLEN)
NAN_BOXED(1761607664,32,FLEN)
NAN_BOXED(2131729550,32,FLEN)
NAN_BOXED(1071918026,32,FLEN)
NAN_BOXED(1761607672,32,FLEN)
NAN_BOXED(2131729550,32,FLEN)
NAN_BOXED(1071918026,32,FLEN)
NAN_BOXED(1761607676,32,FLEN)
NAN_BOXED(2131729550,32,FLEN)
NAN_BOXED(1071918026,32,FLEN)
NAN_BOXED(1761607678,32,FLEN)
NAN_BOXED(2131729550,32,FLEN)
NAN_BOXED(1071918026,32,FLEN)
NAN_BOXED(1761607679,32,FLEN)
NAN_BOXED(2131729550,32,FLEN)
NAN_BOXED(1071918026,32,FLEN)
NAN_BOXED(2130706433,32,FLEN)
NAN_BOXED(2131729550,32,FLEN)
NAN_BOXED(1071918026,32,FLEN)
NAN_BOXED(2130706435,32,FLEN)
NAN_BOXED(2131729550,32,FLEN)
NAN_BOXED(1071918026,32,FLEN)
NAN_BOXED(2130706439,32,FLEN)
NAN_BOXED(2131729550,32,FLEN)
NAN_BOXED(1071918026,32,FLEN)
NAN_BOXED(2132384153,32,FLEN)
NAN_BOXED(2131729550,32,FLEN)
NAN_BOXED(1071918026,32,FLEN)
NAN_BOXED(2133103177,32,FLEN)
NAN_BOXED(2131729550,32,FLEN)
NAN_BOXED(1071918026,32,FLEN)
NAN_BOXED(2134061875,32,FLEN)
NAN_BOXED(2131729550,32,FLEN)
NAN_BOXED(1071918026,32,FLEN)
NAN_BOXED(2134301549,32,FLEN)
NAN_BOXED(2131729550,32,FLEN)
NAN_BOXED(1071918026,32,FLEN)
NAN_BOXED(2134621115,32,FLEN)
NAN_BOXED(2131729550,32,FLEN)
NAN_BOXED(1071918026,32,FLEN)
NAN_BOXED(2135180356,32,FLEN)
NAN_BOXED(2131729550,32,FLEN)
NAN_BOXED(1071918026,32,FLEN)
NAN_BOXED(2135739596,32,FLEN)
NAN_BOXED(2131729550,32,FLEN)
NAN_BOXED(1071918026,32,FLEN)
NAN_BOXED(2136698294,32,FLEN)
NAN_BOXED(2131729550,32,FLEN)
NAN_BOXED(1071918026,32,FLEN)
NAN_BOXED(2137417318,32,FLEN)
NAN_BOXED(2131729550,32,FLEN)
NAN_BOXED(1071918026,32,FLEN)
NAN_BOXED(2137896667,32,FLEN)
NAN_BOXED(2131729550,32,FLEN)
NAN_BOXED(1071918026,32,FLEN)
NAN_BOXED(2139095032,32,FLEN)
NAN_BOXED(2131729550,32,FLEN)
NAN_BOXED(1071918026,32,FLEN)
NAN_BOXED(2139095036,32,FLEN)
NAN_BOXED(2131729550,32,FLEN)
NAN_BOXED(1071918026,32,FLEN)
NAN_BOXED(2139095038,32,FLEN)
NAN_BOXED(2131735955,32,FLEN)
NAN_BOXED(2151219460,32,FLEN)
NAN_BOXED(2734686208,32,FLEN)
NAN_BOXED(2131735955,32,FLEN)
NAN_BOXED(2151219460,32,FLEN)
NAN_BOXED(2734686209,32,FLEN)
NAN_BOXED(2131735955,32,FLEN)
NAN_BOXED(2151219460,32,FLEN)
NAN_BOXED(2734686211,32,FLEN)
NAN_BOXED(2131735955,32,FLEN)
NAN_BOXED(2151219460,32,FLEN)
NAN_BOXED(2734686215,32,FLEN)
NAN_BOXED(2131735955,32,FLEN)
NAN_BOXED(2151219460,32,FLEN)
NAN_BOXED(2734686223,32,FLEN)
NAN_BOXED(2131735955,32,FLEN)
NAN_BOXED(2151219460,32,FLEN)
NAN_BOXED(2734686239,32,FLEN)
NAN_BOXED(2131735955,32,FLEN)
NAN_BOXED(2151219460,32,FLEN)
NAN_BOXED(2734686271,32,FLEN)
NAN_BOXED(2131735955,32,FLEN)
NAN_BOXED(2151219460,32,FLEN)
NAN_BOXED(2734686335,32,FLEN)
NAN_BOXED(2131735955,32,FLEN)
NAN_BOXED(2151219460,32,FLEN)
NAN_BOXED(2734686463,32,FLEN)
NAN_BOXED(2131735955,32,FLEN)
NAN_BOXED(2151219460,32,FLEN)
NAN_BOXED(2734686719,32,FLEN)
NAN_BOXED(2131735955,32,FLEN)
NAN_BOXED(2151219460,32,FLEN)
NAN_BOXED(2734687231,32,FLEN)
NAN_BOXED(2131735955,32,FLEN)
NAN_BOXED(2151219460,32,FLEN)
NAN_BOXED(2734688255,32,FLEN)
NAN_BOXED(2131735955,32,FLEN)
NAN_BOXED(2151219460,32,FLEN)
NAN_BOXED(2734690303,32,FLEN)
NAN_BOXED(2131735955,32,FLEN)
NAN_BOXED(2151219460,32,FLEN)
NAN_BOXED(2734694399,32,FLEN)
NAN_BOXED(2131735955,32,FLEN)
NAN_BOXED(2151219460,32,FLEN)
NAN_BOXED(2734702591,32,FLEN)
NAN_BOXED(2131735955,32,FLEN)
NAN_BOXED(2151219460,32,FLEN)
NAN_BOXED(2734718975,32,FLEN)
NAN_BOXED(2131735955,32,FLEN)
NAN_BOXED(2151219460,32,FLEN)
NAN_BOXED(2734751743,32,FLEN)
NAN_BOXED(2131735955,32,FLEN)
NAN_BOXED(2151219460,32,FLEN)
NAN_BOXED(2734817279,32,FLEN)
NAN_BOXED(2131735955,32,FLEN)
NAN_BOXED(2151219460,32,FLEN)
NAN_BOXED(2734948351,32,FLEN)
NAN_BOXED(2131735955,32,FLEN)
NAN_BOXED(2151219460,32,FLEN)
NAN_BOXED(2735210495,32,FLEN)
NAN_BOXED(2131735955,32,FLEN)
NAN_BOXED(2151219460,32,FLEN)
NAN_BOXED(2735734783,32,FLEN)
NAN_BOXED(2131735955,32,FLEN)
NAN_BOXED(2151219460,32,FLEN)
NAN_BOXED(2736783359,32,FLEN)
NAN_BOXED(2131735955,32,FLEN)
NAN_BOXED(2151219460,32,FLEN)
NAN_BOXED(2738880511,32,FLEN)
NAN_BOXED(2131735955,32,FLEN)
NAN_BOXED(2151219460,32,FLEN)
NAN_BOXED(2738880512,32,FLEN)
NAN_BOXED(2131735955,32,FLEN)
NAN_BOXED(2151219460,32,FLEN)
NAN_BOXED(2740977664,32,FLEN)
NAN_BOXED(2131735955,32,FLEN)
NAN_BOXED(2151219460,32,FLEN)
NAN_BOXED(2742026240,32,FLEN)
NAN_BOXED(2131735955,32,FLEN)
NAN_BOXED(2151219460,32,FLEN)
NAN_BOXED(2742550528,32,FLEN)
NAN_BOXED(2131735955,32,FLEN)
NAN_BOXED(2151219460,32,FLEN)
NAN_BOXED(2742812672,32,FLEN)
NAN_BOXED(2131735955,32,FLEN)
NAN_BOXED(2151219460,32,FLEN)
NAN_BOXED(2742943744,32,FLEN)
NAN_BOXED(2131735955,32,FLEN)
NAN_BOXED(2151219460,32,FLEN)
NAN_BOXED(2743009280,32,FLEN)
NAN_BOXED(2131735955,32,FLEN)
NAN_BOXED(2151219460,32,FLEN)
NAN_BOXED(2743042048,32,FLEN)
NAN_BOXED(2131735955,32,FLEN)
NAN_BOXED(2151219460,32,FLEN)
NAN_BOXED(2743058432,32,FLEN)
NAN_BOXED(2131735955,32,FLEN)
NAN_BOXED(2151219460,32,FLEN)
NAN_BOXED(2743066624,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
