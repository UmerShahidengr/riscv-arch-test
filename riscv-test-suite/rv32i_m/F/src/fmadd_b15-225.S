
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:17:59 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_28672:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0fb593 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x390104 and fs3 == 1 and fe3 == 0x46 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0fb593; op2val:0x80390104;
op3val:0xa37ff000; valaddr_reg:x3; val_offset:86016*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86016*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28673:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0fb593 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x390104 and fs3 == 1 and fe3 == 0x46 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0fb593; op2val:0x80390104;
op3val:0xa37ff800; valaddr_reg:x3; val_offset:86019*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86019*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28674:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0fb593 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x390104 and fs3 == 1 and fe3 == 0x46 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0fb593; op2val:0x80390104;
op3val:0xa37ffc00; valaddr_reg:x3; val_offset:86022*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86022*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28675:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0fb593 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x390104 and fs3 == 1 and fe3 == 0x46 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0fb593; op2val:0x80390104;
op3val:0xa37ffe00; valaddr_reg:x3; val_offset:86025*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86025*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28676:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0fb593 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x390104 and fs3 == 1 and fe3 == 0x46 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0fb593; op2val:0x80390104;
op3val:0xa37fff00; valaddr_reg:x3; val_offset:86028*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86028*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28677:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0fb593 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x390104 and fs3 == 1 and fe3 == 0x46 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0fb593; op2val:0x80390104;
op3val:0xa37fff80; valaddr_reg:x3; val_offset:86031*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86031*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28678:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0fb593 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x390104 and fs3 == 1 and fe3 == 0x46 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0fb593; op2val:0x80390104;
op3val:0xa37fffc0; valaddr_reg:x3; val_offset:86034*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86034*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28679:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0fb593 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x390104 and fs3 == 1 and fe3 == 0x46 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0fb593; op2val:0x80390104;
op3val:0xa37fffe0; valaddr_reg:x3; val_offset:86037*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86037*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28680:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0fb593 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x390104 and fs3 == 1 and fe3 == 0x46 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0fb593; op2val:0x80390104;
op3val:0xa37ffff0; valaddr_reg:x3; val_offset:86040*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86040*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28681:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0fb593 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x390104 and fs3 == 1 and fe3 == 0x46 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0fb593; op2val:0x80390104;
op3val:0xa37ffff8; valaddr_reg:x3; val_offset:86043*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86043*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28682:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0fb593 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x390104 and fs3 == 1 and fe3 == 0x46 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0fb593; op2val:0x80390104;
op3val:0xa37ffffc; valaddr_reg:x3; val_offset:86046*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86046*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28683:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0fb593 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x390104 and fs3 == 1 and fe3 == 0x46 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0fb593; op2val:0x80390104;
op3val:0xa37ffffe; valaddr_reg:x3; val_offset:86049*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86049*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28684:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0fb593 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x390104 and fs3 == 1 and fe3 == 0x46 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0fb593; op2val:0x80390104;
op3val:0xa37fffff; valaddr_reg:x3; val_offset:86052*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86052*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28685:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0fb593 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x390104 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0fb593; op2val:0x80390104;
op3val:0xbf800001; valaddr_reg:x3; val_offset:86055*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86055*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28686:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0fb593 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x390104 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0fb593; op2val:0x80390104;
op3val:0xbf800003; valaddr_reg:x3; val_offset:86058*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86058*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28687:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0fb593 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x390104 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0fb593; op2val:0x80390104;
op3val:0xbf800007; valaddr_reg:x3; val_offset:86061*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86061*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28688:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0fb593 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x390104 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0fb593; op2val:0x80390104;
op3val:0xbf999999; valaddr_reg:x3; val_offset:86064*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86064*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28689:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0fb593 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x390104 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0fb593; op2val:0x80390104;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:86067*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86067*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28690:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0fb593 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x390104 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0fb593; op2val:0x80390104;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:86070*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86070*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28691:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0fb593 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x390104 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0fb593; op2val:0x80390104;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:86073*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86073*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28692:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0fb593 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x390104 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0fb593; op2val:0x80390104;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:86076*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86076*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28693:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0fb593 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x390104 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0fb593; op2val:0x80390104;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:86079*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86079*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28694:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0fb593 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x390104 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0fb593; op2val:0x80390104;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:86082*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86082*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28695:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0fb593 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x390104 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0fb593; op2val:0x80390104;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:86085*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86085*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28696:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0fb593 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x390104 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0fb593; op2val:0x80390104;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:86088*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86088*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28697:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0fb593 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x390104 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0fb593; op2val:0x80390104;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:86091*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86091*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28698:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0fb593 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x390104 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0fb593; op2val:0x80390104;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:86094*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86094*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28699:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0fb593 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x390104 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0fb593; op2val:0x80390104;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:86097*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86097*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28700:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0fb593 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x390104 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0fb593; op2val:0x80390104;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:86100*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86100*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28701:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0ff996 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0ff996; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:86103*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86103*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28702:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0ff996 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0ff996; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:86106*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86106*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28703:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0ff996 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0ff996; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:86109*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86109*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28704:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0ff996 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0ff996; op2val:0x0;
op3val:0x199999; valaddr_reg:x3; val_offset:86112*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86112*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28705:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0ff996 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0ff996; op2val:0x0;
op3val:0x249249; valaddr_reg:x3; val_offset:86115*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86115*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28706:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0ff996 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0ff996; op2val:0x0;
op3val:0x333333; valaddr_reg:x3; val_offset:86118*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86118*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28707:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0ff996 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0ff996; op2val:0x0;
op3val:0x36db6d; valaddr_reg:x3; val_offset:86121*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86121*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28708:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0ff996 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0ff996; op2val:0x0;
op3val:0x3bbbbb; valaddr_reg:x3; val_offset:86124*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86124*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28709:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0ff996 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0ff996; op2val:0x0;
op3val:0x444444; valaddr_reg:x3; val_offset:86127*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86127*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28710:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0ff996 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0ff996; op2val:0x0;
op3val:0x4ccccc; valaddr_reg:x3; val_offset:86130*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86130*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28711:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0ff996 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0ff996; op2val:0x0;
op3val:0x5b6db6; valaddr_reg:x3; val_offset:86133*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86133*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28712:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0ff996 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0ff996; op2val:0x0;
op3val:0x666666; valaddr_reg:x3; val_offset:86136*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86136*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28713:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0ff996 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0ff996; op2val:0x0;
op3val:0x6db6db; valaddr_reg:x3; val_offset:86139*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86139*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28714:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0ff996 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0ff996; op2val:0x0;
op3val:0x7ffff8; valaddr_reg:x3; val_offset:86142*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86142*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28715:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0ff996 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0ff996; op2val:0x0;
op3val:0x7ffffc; valaddr_reg:x3; val_offset:86145*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86145*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28716:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0ff996 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0ff996; op2val:0x0;
op3val:0x7ffffe; valaddr_reg:x3; val_offset:86148*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86148*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28717:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0ff996 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0ff996; op2val:0x0;
op3val:0x10000000; valaddr_reg:x3; val_offset:86151*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86151*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28718:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0ff996 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0ff996; op2val:0x0;
op3val:0x10000001; valaddr_reg:x3; val_offset:86154*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86154*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28719:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0ff996 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0ff996; op2val:0x0;
op3val:0x10000003; valaddr_reg:x3; val_offset:86157*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86157*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28720:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0ff996 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0ff996; op2val:0x0;
op3val:0x10000007; valaddr_reg:x3; val_offset:86160*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86160*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28721:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0ff996 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0ff996; op2val:0x0;
op3val:0x1000000f; valaddr_reg:x3; val_offset:86163*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86163*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28722:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0ff996 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0ff996; op2val:0x0;
op3val:0x1000001f; valaddr_reg:x3; val_offset:86166*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86166*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28723:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0ff996 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0ff996; op2val:0x0;
op3val:0x1000003f; valaddr_reg:x3; val_offset:86169*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86169*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28724:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0ff996 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0ff996; op2val:0x0;
op3val:0x1000007f; valaddr_reg:x3; val_offset:86172*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86172*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28725:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0ff996 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0ff996; op2val:0x0;
op3val:0x100000ff; valaddr_reg:x3; val_offset:86175*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86175*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28726:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0ff996 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0ff996; op2val:0x0;
op3val:0x100001ff; valaddr_reg:x3; val_offset:86178*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86178*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28727:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0ff996 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0ff996; op2val:0x0;
op3val:0x100003ff; valaddr_reg:x3; val_offset:86181*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86181*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28728:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0ff996 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0ff996; op2val:0x0;
op3val:0x100007ff; valaddr_reg:x3; val_offset:86184*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86184*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28729:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0ff996 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0ff996; op2val:0x0;
op3val:0x10000fff; valaddr_reg:x3; val_offset:86187*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86187*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28730:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0ff996 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0ff996; op2val:0x0;
op3val:0x10001fff; valaddr_reg:x3; val_offset:86190*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86190*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28731:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0ff996 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0ff996; op2val:0x0;
op3val:0x10003fff; valaddr_reg:x3; val_offset:86193*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86193*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28732:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0ff996 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0ff996; op2val:0x0;
op3val:0x10007fff; valaddr_reg:x3; val_offset:86196*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86196*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28733:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0ff996 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0ff996; op2val:0x0;
op3val:0x1000ffff; valaddr_reg:x3; val_offset:86199*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86199*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28734:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0ff996 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0ff996; op2val:0x0;
op3val:0x1001ffff; valaddr_reg:x3; val_offset:86202*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86202*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28735:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0ff996 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0ff996; op2val:0x0;
op3val:0x1003ffff; valaddr_reg:x3; val_offset:86205*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86205*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28736:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0ff996 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0ff996; op2val:0x0;
op3val:0x1007ffff; valaddr_reg:x3; val_offset:86208*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86208*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28737:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0ff996 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0ff996; op2val:0x0;
op3val:0x100fffff; valaddr_reg:x3; val_offset:86211*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86211*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28738:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0ff996 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0ff996; op2val:0x0;
op3val:0x101fffff; valaddr_reg:x3; val_offset:86214*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86214*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28739:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0ff996 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0ff996; op2val:0x0;
op3val:0x103fffff; valaddr_reg:x3; val_offset:86217*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86217*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28740:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0ff996 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0ff996; op2val:0x0;
op3val:0x10400000; valaddr_reg:x3; val_offset:86220*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86220*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28741:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0ff996 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0ff996; op2val:0x0;
op3val:0x10600000; valaddr_reg:x3; val_offset:86223*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86223*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28742:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0ff996 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0ff996; op2val:0x0;
op3val:0x10700000; valaddr_reg:x3; val_offset:86226*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86226*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28743:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0ff996 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0ff996; op2val:0x0;
op3val:0x10780000; valaddr_reg:x3; val_offset:86229*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86229*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28744:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0ff996 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0ff996; op2val:0x0;
op3val:0x107c0000; valaddr_reg:x3; val_offset:86232*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86232*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28745:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0ff996 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0ff996; op2val:0x0;
op3val:0x107e0000; valaddr_reg:x3; val_offset:86235*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86235*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28746:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0ff996 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0ff996; op2val:0x0;
op3val:0x107f0000; valaddr_reg:x3; val_offset:86238*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86238*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28747:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0ff996 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0ff996; op2val:0x0;
op3val:0x107f8000; valaddr_reg:x3; val_offset:86241*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86241*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28748:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0ff996 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0ff996; op2val:0x0;
op3val:0x107fc000; valaddr_reg:x3; val_offset:86244*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86244*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28749:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0ff996 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0ff996; op2val:0x0;
op3val:0x107fe000; valaddr_reg:x3; val_offset:86247*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86247*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28750:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0ff996 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0ff996; op2val:0x0;
op3val:0x107ff000; valaddr_reg:x3; val_offset:86250*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86250*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28751:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0ff996 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0ff996; op2val:0x0;
op3val:0x107ff800; valaddr_reg:x3; val_offset:86253*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86253*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28752:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0ff996 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0ff996; op2val:0x0;
op3val:0x107ffc00; valaddr_reg:x3; val_offset:86256*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86256*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28753:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0ff996 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0ff996; op2val:0x0;
op3val:0x107ffe00; valaddr_reg:x3; val_offset:86259*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86259*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28754:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0ff996 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0ff996; op2val:0x0;
op3val:0x107fff00; valaddr_reg:x3; val_offset:86262*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86262*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28755:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0ff996 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0ff996; op2val:0x0;
op3val:0x107fff80; valaddr_reg:x3; val_offset:86265*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86265*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28756:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0ff996 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0ff996; op2val:0x0;
op3val:0x107fffc0; valaddr_reg:x3; val_offset:86268*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86268*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28757:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0ff996 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0ff996; op2val:0x0;
op3val:0x107fffe0; valaddr_reg:x3; val_offset:86271*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86271*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28758:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0ff996 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0ff996; op2val:0x0;
op3val:0x107ffff0; valaddr_reg:x3; val_offset:86274*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86274*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28759:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0ff996 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0ff996; op2val:0x0;
op3val:0x107ffff8; valaddr_reg:x3; val_offset:86277*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86277*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28760:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0ff996 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0ff996; op2val:0x0;
op3val:0x107ffffc; valaddr_reg:x3; val_offset:86280*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86280*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28761:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0ff996 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0ff996; op2val:0x0;
op3val:0x107ffffe; valaddr_reg:x3; val_offset:86283*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86283*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28762:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0ff996 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0ff996; op2val:0x0;
op3val:0x107fffff; valaddr_reg:x3; val_offset:86286*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86286*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28763:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1077d9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1077d9; op2val:0x80000000;
op3val:0x80000001; valaddr_reg:x3; val_offset:86289*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86289*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28764:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1077d9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1077d9; op2val:0x80000000;
op3val:0x80000003; valaddr_reg:x3; val_offset:86292*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86292*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28765:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1077d9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1077d9; op2val:0x80000000;
op3val:0x80000007; valaddr_reg:x3; val_offset:86295*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86295*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28766:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1077d9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1077d9; op2val:0x80000000;
op3val:0x80199999; valaddr_reg:x3; val_offset:86298*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86298*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28767:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1077d9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1077d9; op2val:0x80000000;
op3val:0x80249249; valaddr_reg:x3; val_offset:86301*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86301*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28768:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1077d9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1077d9; op2val:0x80000000;
op3val:0x80333333; valaddr_reg:x3; val_offset:86304*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86304*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28769:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1077d9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1077d9; op2val:0x80000000;
op3val:0x8036db6d; valaddr_reg:x3; val_offset:86307*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86307*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28770:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1077d9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1077d9; op2val:0x80000000;
op3val:0x803bbbbb; valaddr_reg:x3; val_offset:86310*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86310*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28771:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1077d9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1077d9; op2val:0x80000000;
op3val:0x80444444; valaddr_reg:x3; val_offset:86313*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86313*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28772:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1077d9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1077d9; op2val:0x80000000;
op3val:0x804ccccc; valaddr_reg:x3; val_offset:86316*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86316*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28773:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1077d9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1077d9; op2val:0x80000000;
op3val:0x805b6db6; valaddr_reg:x3; val_offset:86319*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86319*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28774:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1077d9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1077d9; op2val:0x80000000;
op3val:0x80666666; valaddr_reg:x3; val_offset:86322*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86322*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28775:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1077d9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1077d9; op2val:0x80000000;
op3val:0x806db6db; valaddr_reg:x3; val_offset:86325*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86325*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28776:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1077d9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1077d9; op2val:0x80000000;
op3val:0x807ffff8; valaddr_reg:x3; val_offset:86328*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86328*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28777:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1077d9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1077d9; op2val:0x80000000;
op3val:0x807ffffc; valaddr_reg:x3; val_offset:86331*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86331*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28778:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1077d9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1077d9; op2val:0x80000000;
op3val:0x807ffffe; valaddr_reg:x3; val_offset:86334*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86334*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28779:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1077d9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1077d9; op2val:0x80000000;
op3val:0x88800000; valaddr_reg:x3; val_offset:86337*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86337*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28780:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1077d9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1077d9; op2val:0x80000000;
op3val:0x88800001; valaddr_reg:x3; val_offset:86340*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86340*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28781:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1077d9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1077d9; op2val:0x80000000;
op3val:0x88800003; valaddr_reg:x3; val_offset:86343*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86343*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28782:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1077d9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1077d9; op2val:0x80000000;
op3val:0x88800007; valaddr_reg:x3; val_offset:86346*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86346*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28783:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1077d9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1077d9; op2val:0x80000000;
op3val:0x8880000f; valaddr_reg:x3; val_offset:86349*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86349*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28784:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1077d9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1077d9; op2val:0x80000000;
op3val:0x8880001f; valaddr_reg:x3; val_offset:86352*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86352*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28785:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1077d9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1077d9; op2val:0x80000000;
op3val:0x8880003f; valaddr_reg:x3; val_offset:86355*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86355*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28786:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1077d9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1077d9; op2val:0x80000000;
op3val:0x8880007f; valaddr_reg:x3; val_offset:86358*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86358*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28787:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1077d9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1077d9; op2val:0x80000000;
op3val:0x888000ff; valaddr_reg:x3; val_offset:86361*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86361*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28788:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1077d9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1077d9; op2val:0x80000000;
op3val:0x888001ff; valaddr_reg:x3; val_offset:86364*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86364*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28789:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1077d9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1077d9; op2val:0x80000000;
op3val:0x888003ff; valaddr_reg:x3; val_offset:86367*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86367*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28790:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1077d9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1077d9; op2val:0x80000000;
op3val:0x888007ff; valaddr_reg:x3; val_offset:86370*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86370*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28791:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1077d9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1077d9; op2val:0x80000000;
op3val:0x88800fff; valaddr_reg:x3; val_offset:86373*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86373*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28792:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1077d9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1077d9; op2val:0x80000000;
op3val:0x88801fff; valaddr_reg:x3; val_offset:86376*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86376*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28793:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1077d9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1077d9; op2val:0x80000000;
op3val:0x88803fff; valaddr_reg:x3; val_offset:86379*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86379*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28794:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1077d9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1077d9; op2val:0x80000000;
op3val:0x88807fff; valaddr_reg:x3; val_offset:86382*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86382*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28795:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1077d9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1077d9; op2val:0x80000000;
op3val:0x8880ffff; valaddr_reg:x3; val_offset:86385*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86385*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28796:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1077d9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1077d9; op2val:0x80000000;
op3val:0x8881ffff; valaddr_reg:x3; val_offset:86388*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86388*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28797:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1077d9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1077d9; op2val:0x80000000;
op3val:0x8883ffff; valaddr_reg:x3; val_offset:86391*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86391*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28798:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1077d9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1077d9; op2val:0x80000000;
op3val:0x8887ffff; valaddr_reg:x3; val_offset:86394*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86394*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28799:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1077d9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1077d9; op2val:0x80000000;
op3val:0x888fffff; valaddr_reg:x3; val_offset:86397*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86397*0 + 3*224*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2131735955,32,FLEN)
NAN_BOXED(2151219460,32,FLEN)
NAN_BOXED(2743070720,32,FLEN)
NAN_BOXED(2131735955,32,FLEN)
NAN_BOXED(2151219460,32,FLEN)
NAN_BOXED(2743072768,32,FLEN)
NAN_BOXED(2131735955,32,FLEN)
NAN_BOXED(2151219460,32,FLEN)
NAN_BOXED(2743073792,32,FLEN)
NAN_BOXED(2131735955,32,FLEN)
NAN_BOXED(2151219460,32,FLEN)
NAN_BOXED(2743074304,32,FLEN)
NAN_BOXED(2131735955,32,FLEN)
NAN_BOXED(2151219460,32,FLEN)
NAN_BOXED(2743074560,32,FLEN)
NAN_BOXED(2131735955,32,FLEN)
NAN_BOXED(2151219460,32,FLEN)
NAN_BOXED(2743074688,32,FLEN)
NAN_BOXED(2131735955,32,FLEN)
NAN_BOXED(2151219460,32,FLEN)
NAN_BOXED(2743074752,32,FLEN)
NAN_BOXED(2131735955,32,FLEN)
NAN_BOXED(2151219460,32,FLEN)
NAN_BOXED(2743074784,32,FLEN)
NAN_BOXED(2131735955,32,FLEN)
NAN_BOXED(2151219460,32,FLEN)
NAN_BOXED(2743074800,32,FLEN)
NAN_BOXED(2131735955,32,FLEN)
NAN_BOXED(2151219460,32,FLEN)
NAN_BOXED(2743074808,32,FLEN)
NAN_BOXED(2131735955,32,FLEN)
NAN_BOXED(2151219460,32,FLEN)
NAN_BOXED(2743074812,32,FLEN)
NAN_BOXED(2131735955,32,FLEN)
NAN_BOXED(2151219460,32,FLEN)
NAN_BOXED(2743074814,32,FLEN)
NAN_BOXED(2131735955,32,FLEN)
NAN_BOXED(2151219460,32,FLEN)
NAN_BOXED(2743074815,32,FLEN)
NAN_BOXED(2131735955,32,FLEN)
NAN_BOXED(2151219460,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2131735955,32,FLEN)
NAN_BOXED(2151219460,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2131735955,32,FLEN)
NAN_BOXED(2151219460,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
NAN_BOXED(2131735955,32,FLEN)
NAN_BOXED(2151219460,32,FLEN)
NAN_BOXED(3214514585,32,FLEN)
NAN_BOXED(2131735955,32,FLEN)
NAN_BOXED(2151219460,32,FLEN)
NAN_BOXED(3215233609,32,FLEN)
NAN_BOXED(2131735955,32,FLEN)
NAN_BOXED(2151219460,32,FLEN)
NAN_BOXED(3216192307,32,FLEN)
NAN_BOXED(2131735955,32,FLEN)
NAN_BOXED(2151219460,32,FLEN)
NAN_BOXED(3216431981,32,FLEN)
NAN_BOXED(2131735955,32,FLEN)
NAN_BOXED(2151219460,32,FLEN)
NAN_BOXED(3216751547,32,FLEN)
NAN_BOXED(2131735955,32,FLEN)
NAN_BOXED(2151219460,32,FLEN)
NAN_BOXED(3217310788,32,FLEN)
NAN_BOXED(2131735955,32,FLEN)
NAN_BOXED(2151219460,32,FLEN)
NAN_BOXED(3217870028,32,FLEN)
NAN_BOXED(2131735955,32,FLEN)
NAN_BOXED(2151219460,32,FLEN)
NAN_BOXED(3218828726,32,FLEN)
NAN_BOXED(2131735955,32,FLEN)
NAN_BOXED(2151219460,32,FLEN)
NAN_BOXED(3219547750,32,FLEN)
NAN_BOXED(2131735955,32,FLEN)
NAN_BOXED(2151219460,32,FLEN)
NAN_BOXED(3220027099,32,FLEN)
NAN_BOXED(2131735955,32,FLEN)
NAN_BOXED(2151219460,32,FLEN)
NAN_BOXED(3221225464,32,FLEN)
NAN_BOXED(2131735955,32,FLEN)
NAN_BOXED(2151219460,32,FLEN)
NAN_BOXED(3221225468,32,FLEN)
NAN_BOXED(2131735955,32,FLEN)
NAN_BOXED(2151219460,32,FLEN)
NAN_BOXED(3221225470,32,FLEN)
NAN_BOXED(2131753366,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2131753366,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3,32,FLEN)
NAN_BOXED(2131753366,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7,32,FLEN)
NAN_BOXED(2131753366,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1677721,32,FLEN)
NAN_BOXED(2131753366,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2396745,32,FLEN)
NAN_BOXED(2131753366,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3355443,32,FLEN)
NAN_BOXED(2131753366,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3595117,32,FLEN)
NAN_BOXED(2131753366,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3914683,32,FLEN)
NAN_BOXED(2131753366,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4473924,32,FLEN)
NAN_BOXED(2131753366,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5033164,32,FLEN)
NAN_BOXED(2131753366,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5991862,32,FLEN)
NAN_BOXED(2131753366,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(6710886,32,FLEN)
NAN_BOXED(2131753366,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7190235,32,FLEN)
NAN_BOXED(2131753366,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388600,32,FLEN)
NAN_BOXED(2131753366,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388604,32,FLEN)
NAN_BOXED(2131753366,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388606,32,FLEN)
NAN_BOXED(2131753366,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268435456,32,FLEN)
NAN_BOXED(2131753366,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268435457,32,FLEN)
NAN_BOXED(2131753366,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268435459,32,FLEN)
NAN_BOXED(2131753366,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268435463,32,FLEN)
NAN_BOXED(2131753366,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268435471,32,FLEN)
NAN_BOXED(2131753366,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268435487,32,FLEN)
NAN_BOXED(2131753366,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268435519,32,FLEN)
NAN_BOXED(2131753366,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268435583,32,FLEN)
NAN_BOXED(2131753366,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268435711,32,FLEN)
NAN_BOXED(2131753366,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268435967,32,FLEN)
NAN_BOXED(2131753366,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268436479,32,FLEN)
NAN_BOXED(2131753366,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268437503,32,FLEN)
NAN_BOXED(2131753366,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268439551,32,FLEN)
NAN_BOXED(2131753366,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268443647,32,FLEN)
NAN_BOXED(2131753366,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268451839,32,FLEN)
NAN_BOXED(2131753366,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268468223,32,FLEN)
NAN_BOXED(2131753366,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268500991,32,FLEN)
NAN_BOXED(2131753366,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268566527,32,FLEN)
NAN_BOXED(2131753366,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268697599,32,FLEN)
NAN_BOXED(2131753366,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268959743,32,FLEN)
NAN_BOXED(2131753366,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(269484031,32,FLEN)
NAN_BOXED(2131753366,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(270532607,32,FLEN)
NAN_BOXED(2131753366,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(272629759,32,FLEN)
NAN_BOXED(2131753366,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(272629760,32,FLEN)
NAN_BOXED(2131753366,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(274726912,32,FLEN)
NAN_BOXED(2131753366,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(275775488,32,FLEN)
NAN_BOXED(2131753366,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(276299776,32,FLEN)
NAN_BOXED(2131753366,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(276561920,32,FLEN)
NAN_BOXED(2131753366,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(276692992,32,FLEN)
NAN_BOXED(2131753366,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(276758528,32,FLEN)
NAN_BOXED(2131753366,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(276791296,32,FLEN)
NAN_BOXED(2131753366,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(276807680,32,FLEN)
NAN_BOXED(2131753366,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(276815872,32,FLEN)
NAN_BOXED(2131753366,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(276819968,32,FLEN)
NAN_BOXED(2131753366,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(276822016,32,FLEN)
NAN_BOXED(2131753366,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(276823040,32,FLEN)
NAN_BOXED(2131753366,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(276823552,32,FLEN)
NAN_BOXED(2131753366,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(276823808,32,FLEN)
NAN_BOXED(2131753366,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(276823936,32,FLEN)
NAN_BOXED(2131753366,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(276824000,32,FLEN)
NAN_BOXED(2131753366,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(276824032,32,FLEN)
NAN_BOXED(2131753366,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(276824048,32,FLEN)
NAN_BOXED(2131753366,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(276824056,32,FLEN)
NAN_BOXED(2131753366,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(276824060,32,FLEN)
NAN_BOXED(2131753366,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(276824062,32,FLEN)
NAN_BOXED(2131753366,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(276824063,32,FLEN)
NAN_BOXED(2131785689,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2131785689,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483651,32,FLEN)
NAN_BOXED(2131785689,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483655,32,FLEN)
NAN_BOXED(2131785689,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149161369,32,FLEN)
NAN_BOXED(2131785689,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149880393,32,FLEN)
NAN_BOXED(2131785689,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2150839091,32,FLEN)
NAN_BOXED(2131785689,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151078765,32,FLEN)
NAN_BOXED(2131785689,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151398331,32,FLEN)
NAN_BOXED(2131785689,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151957572,32,FLEN)
NAN_BOXED(2131785689,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2152516812,32,FLEN)
NAN_BOXED(2131785689,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2153475510,32,FLEN)
NAN_BOXED(2131785689,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154194534,32,FLEN)
NAN_BOXED(2131785689,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154673883,32,FLEN)
NAN_BOXED(2131785689,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872248,32,FLEN)
NAN_BOXED(2131785689,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872252,32,FLEN)
NAN_BOXED(2131785689,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2131785689,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290089984,32,FLEN)
NAN_BOXED(2131785689,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290089985,32,FLEN)
NAN_BOXED(2131785689,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290089987,32,FLEN)
NAN_BOXED(2131785689,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290089991,32,FLEN)
NAN_BOXED(2131785689,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290089999,32,FLEN)
NAN_BOXED(2131785689,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290090015,32,FLEN)
NAN_BOXED(2131785689,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290090047,32,FLEN)
NAN_BOXED(2131785689,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290090111,32,FLEN)
NAN_BOXED(2131785689,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290090239,32,FLEN)
NAN_BOXED(2131785689,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290090495,32,FLEN)
NAN_BOXED(2131785689,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290091007,32,FLEN)
NAN_BOXED(2131785689,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290092031,32,FLEN)
NAN_BOXED(2131785689,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290094079,32,FLEN)
NAN_BOXED(2131785689,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290098175,32,FLEN)
NAN_BOXED(2131785689,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290106367,32,FLEN)
NAN_BOXED(2131785689,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290122751,32,FLEN)
NAN_BOXED(2131785689,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290155519,32,FLEN)
NAN_BOXED(2131785689,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290221055,32,FLEN)
NAN_BOXED(2131785689,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290352127,32,FLEN)
NAN_BOXED(2131785689,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290614271,32,FLEN)
NAN_BOXED(2131785689,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2291138559,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
