
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:17:59 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_28800:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1077d9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1077d9; op2val:0x80000000;
op3val:0x889fffff; valaddr_reg:x3; val_offset:86400*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86400*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28801:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1077d9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1077d9; op2val:0x80000000;
op3val:0x88bfffff; valaddr_reg:x3; val_offset:86403*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86403*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28802:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1077d9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1077d9; op2val:0x80000000;
op3val:0x88c00000; valaddr_reg:x3; val_offset:86406*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86406*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28803:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1077d9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1077d9; op2val:0x80000000;
op3val:0x88e00000; valaddr_reg:x3; val_offset:86409*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86409*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28804:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1077d9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1077d9; op2val:0x80000000;
op3val:0x88f00000; valaddr_reg:x3; val_offset:86412*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86412*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28805:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1077d9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1077d9; op2val:0x80000000;
op3val:0x88f80000; valaddr_reg:x3; val_offset:86415*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86415*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28806:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1077d9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1077d9; op2val:0x80000000;
op3val:0x88fc0000; valaddr_reg:x3; val_offset:86418*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86418*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28807:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1077d9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1077d9; op2val:0x80000000;
op3val:0x88fe0000; valaddr_reg:x3; val_offset:86421*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86421*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28808:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1077d9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1077d9; op2val:0x80000000;
op3val:0x88ff0000; valaddr_reg:x3; val_offset:86424*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86424*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28809:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1077d9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1077d9; op2val:0x80000000;
op3val:0x88ff8000; valaddr_reg:x3; val_offset:86427*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86427*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28810:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1077d9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1077d9; op2val:0x80000000;
op3val:0x88ffc000; valaddr_reg:x3; val_offset:86430*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86430*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28811:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1077d9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1077d9; op2val:0x80000000;
op3val:0x88ffe000; valaddr_reg:x3; val_offset:86433*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86433*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28812:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1077d9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1077d9; op2val:0x80000000;
op3val:0x88fff000; valaddr_reg:x3; val_offset:86436*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86436*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28813:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1077d9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1077d9; op2val:0x80000000;
op3val:0x88fff800; valaddr_reg:x3; val_offset:86439*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86439*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28814:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1077d9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1077d9; op2val:0x80000000;
op3val:0x88fffc00; valaddr_reg:x3; val_offset:86442*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86442*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28815:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1077d9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1077d9; op2val:0x80000000;
op3val:0x88fffe00; valaddr_reg:x3; val_offset:86445*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86445*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28816:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1077d9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1077d9; op2val:0x80000000;
op3val:0x88ffff00; valaddr_reg:x3; val_offset:86448*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86448*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28817:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1077d9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1077d9; op2val:0x80000000;
op3val:0x88ffff80; valaddr_reg:x3; val_offset:86451*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86451*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28818:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1077d9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1077d9; op2val:0x80000000;
op3val:0x88ffffc0; valaddr_reg:x3; val_offset:86454*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86454*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28819:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1077d9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1077d9; op2val:0x80000000;
op3val:0x88ffffe0; valaddr_reg:x3; val_offset:86457*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86457*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28820:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1077d9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1077d9; op2val:0x80000000;
op3val:0x88fffff0; valaddr_reg:x3; val_offset:86460*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86460*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28821:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1077d9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1077d9; op2val:0x80000000;
op3val:0x88fffff8; valaddr_reg:x3; val_offset:86463*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86463*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28822:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1077d9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1077d9; op2val:0x80000000;
op3val:0x88fffffc; valaddr_reg:x3; val_offset:86466*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86466*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28823:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1077d9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1077d9; op2val:0x80000000;
op3val:0x88fffffe; valaddr_reg:x3; val_offset:86469*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86469*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28824:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1077d9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1077d9; op2val:0x80000000;
op3val:0x88ffffff; valaddr_reg:x3; val_offset:86472*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86472*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28825:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x10e2fe and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f10e2fe; op2val:0x80000000;
op3val:0x80000001; valaddr_reg:x3; val_offset:86475*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86475*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28826:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x10e2fe and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f10e2fe; op2val:0x80000000;
op3val:0x80000003; valaddr_reg:x3; val_offset:86478*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86478*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28827:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x10e2fe and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f10e2fe; op2val:0x80000000;
op3val:0x80000007; valaddr_reg:x3; val_offset:86481*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86481*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28828:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x10e2fe and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f10e2fe; op2val:0x80000000;
op3val:0x80199999; valaddr_reg:x3; val_offset:86484*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86484*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28829:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x10e2fe and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f10e2fe; op2val:0x80000000;
op3val:0x80249249; valaddr_reg:x3; val_offset:86487*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86487*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28830:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x10e2fe and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f10e2fe; op2val:0x80000000;
op3val:0x80333333; valaddr_reg:x3; val_offset:86490*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86490*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28831:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x10e2fe and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f10e2fe; op2val:0x80000000;
op3val:0x8036db6d; valaddr_reg:x3; val_offset:86493*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86493*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28832:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x10e2fe and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f10e2fe; op2val:0x80000000;
op3val:0x803bbbbb; valaddr_reg:x3; val_offset:86496*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86496*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28833:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x10e2fe and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f10e2fe; op2val:0x80000000;
op3val:0x80444444; valaddr_reg:x3; val_offset:86499*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86499*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28834:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x10e2fe and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f10e2fe; op2val:0x80000000;
op3val:0x804ccccc; valaddr_reg:x3; val_offset:86502*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86502*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28835:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x10e2fe and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f10e2fe; op2val:0x80000000;
op3val:0x805b6db6; valaddr_reg:x3; val_offset:86505*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86505*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28836:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x10e2fe and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f10e2fe; op2val:0x80000000;
op3val:0x80666666; valaddr_reg:x3; val_offset:86508*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86508*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28837:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x10e2fe and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f10e2fe; op2val:0x80000000;
op3val:0x806db6db; valaddr_reg:x3; val_offset:86511*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86511*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28838:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x10e2fe and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f10e2fe; op2val:0x80000000;
op3val:0x807ffff8; valaddr_reg:x3; val_offset:86514*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86514*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28839:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x10e2fe and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f10e2fe; op2val:0x80000000;
op3val:0x807ffffc; valaddr_reg:x3; val_offset:86517*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86517*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28840:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x10e2fe and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f10e2fe; op2val:0x80000000;
op3val:0x807ffffe; valaddr_reg:x3; val_offset:86520*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86520*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28841:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x10e2fe and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f10e2fe; op2val:0x80000000;
op3val:0x84000000; valaddr_reg:x3; val_offset:86523*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86523*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28842:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x10e2fe and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f10e2fe; op2val:0x80000000;
op3val:0x84000001; valaddr_reg:x3; val_offset:86526*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86526*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28843:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x10e2fe and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f10e2fe; op2val:0x80000000;
op3val:0x84000003; valaddr_reg:x3; val_offset:86529*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86529*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28844:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x10e2fe and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f10e2fe; op2val:0x80000000;
op3val:0x84000007; valaddr_reg:x3; val_offset:86532*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86532*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28845:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x10e2fe and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f10e2fe; op2val:0x80000000;
op3val:0x8400000f; valaddr_reg:x3; val_offset:86535*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86535*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28846:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x10e2fe and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f10e2fe; op2val:0x80000000;
op3val:0x8400001f; valaddr_reg:x3; val_offset:86538*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86538*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28847:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x10e2fe and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f10e2fe; op2val:0x80000000;
op3val:0x8400003f; valaddr_reg:x3; val_offset:86541*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86541*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28848:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x10e2fe and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f10e2fe; op2val:0x80000000;
op3val:0x8400007f; valaddr_reg:x3; val_offset:86544*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86544*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28849:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x10e2fe and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f10e2fe; op2val:0x80000000;
op3val:0x840000ff; valaddr_reg:x3; val_offset:86547*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86547*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28850:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x10e2fe and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f10e2fe; op2val:0x80000000;
op3val:0x840001ff; valaddr_reg:x3; val_offset:86550*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86550*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28851:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x10e2fe and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f10e2fe; op2val:0x80000000;
op3val:0x840003ff; valaddr_reg:x3; val_offset:86553*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86553*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28852:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x10e2fe and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f10e2fe; op2val:0x80000000;
op3val:0x840007ff; valaddr_reg:x3; val_offset:86556*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86556*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28853:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x10e2fe and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f10e2fe; op2val:0x80000000;
op3val:0x84000fff; valaddr_reg:x3; val_offset:86559*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86559*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28854:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x10e2fe and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f10e2fe; op2val:0x80000000;
op3val:0x84001fff; valaddr_reg:x3; val_offset:86562*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86562*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28855:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x10e2fe and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f10e2fe; op2val:0x80000000;
op3val:0x84003fff; valaddr_reg:x3; val_offset:86565*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86565*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28856:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x10e2fe and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f10e2fe; op2val:0x80000000;
op3val:0x84007fff; valaddr_reg:x3; val_offset:86568*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86568*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28857:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x10e2fe and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f10e2fe; op2val:0x80000000;
op3val:0x8400ffff; valaddr_reg:x3; val_offset:86571*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86571*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28858:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x10e2fe and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f10e2fe; op2val:0x80000000;
op3val:0x8401ffff; valaddr_reg:x3; val_offset:86574*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86574*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28859:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x10e2fe and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f10e2fe; op2val:0x80000000;
op3val:0x8403ffff; valaddr_reg:x3; val_offset:86577*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86577*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28860:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x10e2fe and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f10e2fe; op2val:0x80000000;
op3val:0x8407ffff; valaddr_reg:x3; val_offset:86580*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86580*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28861:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x10e2fe and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f10e2fe; op2val:0x80000000;
op3val:0x840fffff; valaddr_reg:x3; val_offset:86583*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86583*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28862:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x10e2fe and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f10e2fe; op2val:0x80000000;
op3val:0x841fffff; valaddr_reg:x3; val_offset:86586*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86586*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28863:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x10e2fe and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f10e2fe; op2val:0x80000000;
op3val:0x843fffff; valaddr_reg:x3; val_offset:86589*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86589*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28864:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x10e2fe and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f10e2fe; op2val:0x80000000;
op3val:0x84400000; valaddr_reg:x3; val_offset:86592*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86592*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28865:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x10e2fe and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f10e2fe; op2val:0x80000000;
op3val:0x84600000; valaddr_reg:x3; val_offset:86595*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86595*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28866:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x10e2fe and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f10e2fe; op2val:0x80000000;
op3val:0x84700000; valaddr_reg:x3; val_offset:86598*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86598*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28867:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x10e2fe and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f10e2fe; op2val:0x80000000;
op3val:0x84780000; valaddr_reg:x3; val_offset:86601*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86601*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28868:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x10e2fe and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f10e2fe; op2val:0x80000000;
op3val:0x847c0000; valaddr_reg:x3; val_offset:86604*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86604*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28869:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x10e2fe and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f10e2fe; op2val:0x80000000;
op3val:0x847e0000; valaddr_reg:x3; val_offset:86607*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86607*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28870:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x10e2fe and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f10e2fe; op2val:0x80000000;
op3val:0x847f0000; valaddr_reg:x3; val_offset:86610*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86610*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28871:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x10e2fe and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f10e2fe; op2val:0x80000000;
op3val:0x847f8000; valaddr_reg:x3; val_offset:86613*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86613*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28872:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x10e2fe and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f10e2fe; op2val:0x80000000;
op3val:0x847fc000; valaddr_reg:x3; val_offset:86616*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86616*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28873:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x10e2fe and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f10e2fe; op2val:0x80000000;
op3val:0x847fe000; valaddr_reg:x3; val_offset:86619*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86619*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28874:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x10e2fe and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f10e2fe; op2val:0x80000000;
op3val:0x847ff000; valaddr_reg:x3; val_offset:86622*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86622*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28875:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x10e2fe and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f10e2fe; op2val:0x80000000;
op3val:0x847ff800; valaddr_reg:x3; val_offset:86625*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86625*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28876:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x10e2fe and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f10e2fe; op2val:0x80000000;
op3val:0x847ffc00; valaddr_reg:x3; val_offset:86628*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86628*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28877:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x10e2fe and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f10e2fe; op2val:0x80000000;
op3val:0x847ffe00; valaddr_reg:x3; val_offset:86631*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86631*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28878:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x10e2fe and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f10e2fe; op2val:0x80000000;
op3val:0x847fff00; valaddr_reg:x3; val_offset:86634*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86634*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28879:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x10e2fe and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f10e2fe; op2val:0x80000000;
op3val:0x847fff80; valaddr_reg:x3; val_offset:86637*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86637*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28880:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x10e2fe and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f10e2fe; op2val:0x80000000;
op3val:0x847fffc0; valaddr_reg:x3; val_offset:86640*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86640*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28881:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x10e2fe and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f10e2fe; op2val:0x80000000;
op3val:0x847fffe0; valaddr_reg:x3; val_offset:86643*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86643*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28882:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x10e2fe and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f10e2fe; op2val:0x80000000;
op3val:0x847ffff0; valaddr_reg:x3; val_offset:86646*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86646*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28883:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x10e2fe and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f10e2fe; op2val:0x80000000;
op3val:0x847ffff8; valaddr_reg:x3; val_offset:86649*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86649*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28884:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x10e2fe and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f10e2fe; op2val:0x80000000;
op3val:0x847ffffc; valaddr_reg:x3; val_offset:86652*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86652*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28885:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x10e2fe and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f10e2fe; op2val:0x80000000;
op3val:0x847ffffe; valaddr_reg:x3; val_offset:86655*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86655*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28886:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x10e2fe and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f10e2fe; op2val:0x80000000;
op3val:0x847fffff; valaddr_reg:x3; val_offset:86658*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86658*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28887:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x10e9a8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3887d3 and fs3 == 1 and fe3 == 0x6f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f10e9a8; op2val:0x803887d3;
op3val:0xb7800000; valaddr_reg:x3; val_offset:86661*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86661*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28888:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x10e9a8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3887d3 and fs3 == 1 and fe3 == 0x6f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f10e9a8; op2val:0x803887d3;
op3val:0xb7800001; valaddr_reg:x3; val_offset:86664*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86664*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28889:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x10e9a8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3887d3 and fs3 == 1 and fe3 == 0x6f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f10e9a8; op2val:0x803887d3;
op3val:0xb7800003; valaddr_reg:x3; val_offset:86667*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86667*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28890:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x10e9a8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3887d3 and fs3 == 1 and fe3 == 0x6f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f10e9a8; op2val:0x803887d3;
op3val:0xb7800007; valaddr_reg:x3; val_offset:86670*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86670*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28891:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x10e9a8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3887d3 and fs3 == 1 and fe3 == 0x6f and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f10e9a8; op2val:0x803887d3;
op3val:0xb780000f; valaddr_reg:x3; val_offset:86673*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86673*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28892:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x10e9a8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3887d3 and fs3 == 1 and fe3 == 0x6f and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f10e9a8; op2val:0x803887d3;
op3val:0xb780001f; valaddr_reg:x3; val_offset:86676*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86676*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28893:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x10e9a8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3887d3 and fs3 == 1 and fe3 == 0x6f and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f10e9a8; op2val:0x803887d3;
op3val:0xb780003f; valaddr_reg:x3; val_offset:86679*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86679*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28894:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x10e9a8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3887d3 and fs3 == 1 and fe3 == 0x6f and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f10e9a8; op2val:0x803887d3;
op3val:0xb780007f; valaddr_reg:x3; val_offset:86682*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86682*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28895:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x10e9a8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3887d3 and fs3 == 1 and fe3 == 0x6f and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f10e9a8; op2val:0x803887d3;
op3val:0xb78000ff; valaddr_reg:x3; val_offset:86685*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86685*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28896:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x10e9a8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3887d3 and fs3 == 1 and fe3 == 0x6f and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f10e9a8; op2val:0x803887d3;
op3val:0xb78001ff; valaddr_reg:x3; val_offset:86688*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86688*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28897:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x10e9a8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3887d3 and fs3 == 1 and fe3 == 0x6f and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f10e9a8; op2val:0x803887d3;
op3val:0xb78003ff; valaddr_reg:x3; val_offset:86691*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86691*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28898:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x10e9a8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3887d3 and fs3 == 1 and fe3 == 0x6f and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f10e9a8; op2val:0x803887d3;
op3val:0xb78007ff; valaddr_reg:x3; val_offset:86694*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86694*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28899:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x10e9a8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3887d3 and fs3 == 1 and fe3 == 0x6f and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f10e9a8; op2val:0x803887d3;
op3val:0xb7800fff; valaddr_reg:x3; val_offset:86697*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86697*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28900:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x10e9a8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3887d3 and fs3 == 1 and fe3 == 0x6f and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f10e9a8; op2val:0x803887d3;
op3val:0xb7801fff; valaddr_reg:x3; val_offset:86700*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86700*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28901:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x10e9a8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3887d3 and fs3 == 1 and fe3 == 0x6f and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f10e9a8; op2val:0x803887d3;
op3val:0xb7803fff; valaddr_reg:x3; val_offset:86703*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86703*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28902:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x10e9a8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3887d3 and fs3 == 1 and fe3 == 0x6f and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f10e9a8; op2val:0x803887d3;
op3val:0xb7807fff; valaddr_reg:x3; val_offset:86706*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86706*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28903:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x10e9a8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3887d3 and fs3 == 1 and fe3 == 0x6f and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f10e9a8; op2val:0x803887d3;
op3val:0xb780ffff; valaddr_reg:x3; val_offset:86709*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86709*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28904:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x10e9a8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3887d3 and fs3 == 1 and fe3 == 0x6f and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f10e9a8; op2val:0x803887d3;
op3val:0xb781ffff; valaddr_reg:x3; val_offset:86712*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86712*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28905:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x10e9a8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3887d3 and fs3 == 1 and fe3 == 0x6f and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f10e9a8; op2val:0x803887d3;
op3val:0xb783ffff; valaddr_reg:x3; val_offset:86715*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86715*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28906:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x10e9a8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3887d3 and fs3 == 1 and fe3 == 0x6f and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f10e9a8; op2val:0x803887d3;
op3val:0xb787ffff; valaddr_reg:x3; val_offset:86718*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86718*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28907:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x10e9a8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3887d3 and fs3 == 1 and fe3 == 0x6f and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f10e9a8; op2val:0x803887d3;
op3val:0xb78fffff; valaddr_reg:x3; val_offset:86721*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86721*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28908:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x10e9a8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3887d3 and fs3 == 1 and fe3 == 0x6f and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f10e9a8; op2val:0x803887d3;
op3val:0xb79fffff; valaddr_reg:x3; val_offset:86724*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86724*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28909:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x10e9a8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3887d3 and fs3 == 1 and fe3 == 0x6f and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f10e9a8; op2val:0x803887d3;
op3val:0xb7bfffff; valaddr_reg:x3; val_offset:86727*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86727*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28910:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x10e9a8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3887d3 and fs3 == 1 and fe3 == 0x6f and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f10e9a8; op2val:0x803887d3;
op3val:0xb7c00000; valaddr_reg:x3; val_offset:86730*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86730*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28911:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x10e9a8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3887d3 and fs3 == 1 and fe3 == 0x6f and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f10e9a8; op2val:0x803887d3;
op3val:0xb7e00000; valaddr_reg:x3; val_offset:86733*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86733*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28912:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x10e9a8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3887d3 and fs3 == 1 and fe3 == 0x6f and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f10e9a8; op2val:0x803887d3;
op3val:0xb7f00000; valaddr_reg:x3; val_offset:86736*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86736*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28913:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x10e9a8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3887d3 and fs3 == 1 and fe3 == 0x6f and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f10e9a8; op2val:0x803887d3;
op3val:0xb7f80000; valaddr_reg:x3; val_offset:86739*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86739*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28914:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x10e9a8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3887d3 and fs3 == 1 and fe3 == 0x6f and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f10e9a8; op2val:0x803887d3;
op3val:0xb7fc0000; valaddr_reg:x3; val_offset:86742*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86742*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28915:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x10e9a8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3887d3 and fs3 == 1 and fe3 == 0x6f and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f10e9a8; op2val:0x803887d3;
op3val:0xb7fe0000; valaddr_reg:x3; val_offset:86745*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86745*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28916:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x10e9a8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3887d3 and fs3 == 1 and fe3 == 0x6f and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f10e9a8; op2val:0x803887d3;
op3val:0xb7ff0000; valaddr_reg:x3; val_offset:86748*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86748*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28917:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x10e9a8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3887d3 and fs3 == 1 and fe3 == 0x6f and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f10e9a8; op2val:0x803887d3;
op3val:0xb7ff8000; valaddr_reg:x3; val_offset:86751*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86751*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28918:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x10e9a8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3887d3 and fs3 == 1 and fe3 == 0x6f and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f10e9a8; op2val:0x803887d3;
op3val:0xb7ffc000; valaddr_reg:x3; val_offset:86754*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86754*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28919:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x10e9a8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3887d3 and fs3 == 1 and fe3 == 0x6f and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f10e9a8; op2val:0x803887d3;
op3val:0xb7ffe000; valaddr_reg:x3; val_offset:86757*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86757*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28920:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x10e9a8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3887d3 and fs3 == 1 and fe3 == 0x6f and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f10e9a8; op2val:0x803887d3;
op3val:0xb7fff000; valaddr_reg:x3; val_offset:86760*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86760*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28921:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x10e9a8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3887d3 and fs3 == 1 and fe3 == 0x6f and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f10e9a8; op2val:0x803887d3;
op3val:0xb7fff800; valaddr_reg:x3; val_offset:86763*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86763*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28922:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x10e9a8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3887d3 and fs3 == 1 and fe3 == 0x6f and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f10e9a8; op2val:0x803887d3;
op3val:0xb7fffc00; valaddr_reg:x3; val_offset:86766*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86766*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28923:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x10e9a8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3887d3 and fs3 == 1 and fe3 == 0x6f and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f10e9a8; op2val:0x803887d3;
op3val:0xb7fffe00; valaddr_reg:x3; val_offset:86769*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86769*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28924:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x10e9a8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3887d3 and fs3 == 1 and fe3 == 0x6f and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f10e9a8; op2val:0x803887d3;
op3val:0xb7ffff00; valaddr_reg:x3; val_offset:86772*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86772*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28925:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x10e9a8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3887d3 and fs3 == 1 and fe3 == 0x6f and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f10e9a8; op2val:0x803887d3;
op3val:0xb7ffff80; valaddr_reg:x3; val_offset:86775*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86775*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28926:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x10e9a8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3887d3 and fs3 == 1 and fe3 == 0x6f and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f10e9a8; op2val:0x803887d3;
op3val:0xb7ffffc0; valaddr_reg:x3; val_offset:86778*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86778*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28927:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x10e9a8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3887d3 and fs3 == 1 and fe3 == 0x6f and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f10e9a8; op2val:0x803887d3;
op3val:0xb7ffffe0; valaddr_reg:x3; val_offset:86781*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86781*0 + 3*225*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2131785689,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2292187135,32,FLEN)
NAN_BOXED(2131785689,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2294284287,32,FLEN)
NAN_BOXED(2131785689,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2294284288,32,FLEN)
NAN_BOXED(2131785689,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2296381440,32,FLEN)
NAN_BOXED(2131785689,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2297430016,32,FLEN)
NAN_BOXED(2131785689,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2297954304,32,FLEN)
NAN_BOXED(2131785689,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298216448,32,FLEN)
NAN_BOXED(2131785689,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298347520,32,FLEN)
NAN_BOXED(2131785689,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298413056,32,FLEN)
NAN_BOXED(2131785689,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298445824,32,FLEN)
NAN_BOXED(2131785689,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298462208,32,FLEN)
NAN_BOXED(2131785689,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298470400,32,FLEN)
NAN_BOXED(2131785689,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298474496,32,FLEN)
NAN_BOXED(2131785689,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298476544,32,FLEN)
NAN_BOXED(2131785689,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298477568,32,FLEN)
NAN_BOXED(2131785689,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298478080,32,FLEN)
NAN_BOXED(2131785689,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298478336,32,FLEN)
NAN_BOXED(2131785689,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298478464,32,FLEN)
NAN_BOXED(2131785689,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298478528,32,FLEN)
NAN_BOXED(2131785689,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298478560,32,FLEN)
NAN_BOXED(2131785689,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298478576,32,FLEN)
NAN_BOXED(2131785689,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298478584,32,FLEN)
NAN_BOXED(2131785689,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298478588,32,FLEN)
NAN_BOXED(2131785689,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298478590,32,FLEN)
NAN_BOXED(2131785689,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298478591,32,FLEN)
NAN_BOXED(2131813118,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2131813118,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483651,32,FLEN)
NAN_BOXED(2131813118,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483655,32,FLEN)
NAN_BOXED(2131813118,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149161369,32,FLEN)
NAN_BOXED(2131813118,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149880393,32,FLEN)
NAN_BOXED(2131813118,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2150839091,32,FLEN)
NAN_BOXED(2131813118,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151078765,32,FLEN)
NAN_BOXED(2131813118,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151398331,32,FLEN)
NAN_BOXED(2131813118,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151957572,32,FLEN)
NAN_BOXED(2131813118,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2152516812,32,FLEN)
NAN_BOXED(2131813118,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2153475510,32,FLEN)
NAN_BOXED(2131813118,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154194534,32,FLEN)
NAN_BOXED(2131813118,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154673883,32,FLEN)
NAN_BOXED(2131813118,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872248,32,FLEN)
NAN_BOXED(2131813118,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872252,32,FLEN)
NAN_BOXED(2131813118,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2131813118,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214592512,32,FLEN)
NAN_BOXED(2131813118,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214592513,32,FLEN)
NAN_BOXED(2131813118,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214592515,32,FLEN)
NAN_BOXED(2131813118,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214592519,32,FLEN)
NAN_BOXED(2131813118,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214592527,32,FLEN)
NAN_BOXED(2131813118,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214592543,32,FLEN)
NAN_BOXED(2131813118,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214592575,32,FLEN)
NAN_BOXED(2131813118,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214592639,32,FLEN)
NAN_BOXED(2131813118,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214592767,32,FLEN)
NAN_BOXED(2131813118,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214593023,32,FLEN)
NAN_BOXED(2131813118,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214593535,32,FLEN)
NAN_BOXED(2131813118,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214594559,32,FLEN)
NAN_BOXED(2131813118,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214596607,32,FLEN)
NAN_BOXED(2131813118,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214600703,32,FLEN)
NAN_BOXED(2131813118,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214608895,32,FLEN)
NAN_BOXED(2131813118,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214625279,32,FLEN)
NAN_BOXED(2131813118,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214658047,32,FLEN)
NAN_BOXED(2131813118,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214723583,32,FLEN)
NAN_BOXED(2131813118,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214854655,32,FLEN)
NAN_BOXED(2131813118,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2215116799,32,FLEN)
NAN_BOXED(2131813118,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2215641087,32,FLEN)
NAN_BOXED(2131813118,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2216689663,32,FLEN)
NAN_BOXED(2131813118,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2218786815,32,FLEN)
NAN_BOXED(2131813118,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2218786816,32,FLEN)
NAN_BOXED(2131813118,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2220883968,32,FLEN)
NAN_BOXED(2131813118,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2221932544,32,FLEN)
NAN_BOXED(2131813118,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222456832,32,FLEN)
NAN_BOXED(2131813118,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222718976,32,FLEN)
NAN_BOXED(2131813118,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222850048,32,FLEN)
NAN_BOXED(2131813118,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222915584,32,FLEN)
NAN_BOXED(2131813118,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222948352,32,FLEN)
NAN_BOXED(2131813118,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222964736,32,FLEN)
NAN_BOXED(2131813118,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222972928,32,FLEN)
NAN_BOXED(2131813118,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222977024,32,FLEN)
NAN_BOXED(2131813118,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222979072,32,FLEN)
NAN_BOXED(2131813118,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222980096,32,FLEN)
NAN_BOXED(2131813118,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222980608,32,FLEN)
NAN_BOXED(2131813118,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222980864,32,FLEN)
NAN_BOXED(2131813118,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222980992,32,FLEN)
NAN_BOXED(2131813118,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222981056,32,FLEN)
NAN_BOXED(2131813118,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222981088,32,FLEN)
NAN_BOXED(2131813118,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222981104,32,FLEN)
NAN_BOXED(2131813118,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222981112,32,FLEN)
NAN_BOXED(2131813118,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222981116,32,FLEN)
NAN_BOXED(2131813118,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222981118,32,FLEN)
NAN_BOXED(2131813118,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222981119,32,FLEN)
NAN_BOXED(2131814824,32,FLEN)
NAN_BOXED(2151188435,32,FLEN)
NAN_BOXED(3078619136,32,FLEN)
NAN_BOXED(2131814824,32,FLEN)
NAN_BOXED(2151188435,32,FLEN)
NAN_BOXED(3078619137,32,FLEN)
NAN_BOXED(2131814824,32,FLEN)
NAN_BOXED(2151188435,32,FLEN)
NAN_BOXED(3078619139,32,FLEN)
NAN_BOXED(2131814824,32,FLEN)
NAN_BOXED(2151188435,32,FLEN)
NAN_BOXED(3078619143,32,FLEN)
NAN_BOXED(2131814824,32,FLEN)
NAN_BOXED(2151188435,32,FLEN)
NAN_BOXED(3078619151,32,FLEN)
NAN_BOXED(2131814824,32,FLEN)
NAN_BOXED(2151188435,32,FLEN)
NAN_BOXED(3078619167,32,FLEN)
NAN_BOXED(2131814824,32,FLEN)
NAN_BOXED(2151188435,32,FLEN)
NAN_BOXED(3078619199,32,FLEN)
NAN_BOXED(2131814824,32,FLEN)
NAN_BOXED(2151188435,32,FLEN)
NAN_BOXED(3078619263,32,FLEN)
NAN_BOXED(2131814824,32,FLEN)
NAN_BOXED(2151188435,32,FLEN)
NAN_BOXED(3078619391,32,FLEN)
NAN_BOXED(2131814824,32,FLEN)
NAN_BOXED(2151188435,32,FLEN)
NAN_BOXED(3078619647,32,FLEN)
NAN_BOXED(2131814824,32,FLEN)
NAN_BOXED(2151188435,32,FLEN)
NAN_BOXED(3078620159,32,FLEN)
NAN_BOXED(2131814824,32,FLEN)
NAN_BOXED(2151188435,32,FLEN)
NAN_BOXED(3078621183,32,FLEN)
NAN_BOXED(2131814824,32,FLEN)
NAN_BOXED(2151188435,32,FLEN)
NAN_BOXED(3078623231,32,FLEN)
NAN_BOXED(2131814824,32,FLEN)
NAN_BOXED(2151188435,32,FLEN)
NAN_BOXED(3078627327,32,FLEN)
NAN_BOXED(2131814824,32,FLEN)
NAN_BOXED(2151188435,32,FLEN)
NAN_BOXED(3078635519,32,FLEN)
NAN_BOXED(2131814824,32,FLEN)
NAN_BOXED(2151188435,32,FLEN)
NAN_BOXED(3078651903,32,FLEN)
NAN_BOXED(2131814824,32,FLEN)
NAN_BOXED(2151188435,32,FLEN)
NAN_BOXED(3078684671,32,FLEN)
NAN_BOXED(2131814824,32,FLEN)
NAN_BOXED(2151188435,32,FLEN)
NAN_BOXED(3078750207,32,FLEN)
NAN_BOXED(2131814824,32,FLEN)
NAN_BOXED(2151188435,32,FLEN)
NAN_BOXED(3078881279,32,FLEN)
NAN_BOXED(2131814824,32,FLEN)
NAN_BOXED(2151188435,32,FLEN)
NAN_BOXED(3079143423,32,FLEN)
NAN_BOXED(2131814824,32,FLEN)
NAN_BOXED(2151188435,32,FLEN)
NAN_BOXED(3079667711,32,FLEN)
NAN_BOXED(2131814824,32,FLEN)
NAN_BOXED(2151188435,32,FLEN)
NAN_BOXED(3080716287,32,FLEN)
NAN_BOXED(2131814824,32,FLEN)
NAN_BOXED(2151188435,32,FLEN)
NAN_BOXED(3082813439,32,FLEN)
NAN_BOXED(2131814824,32,FLEN)
NAN_BOXED(2151188435,32,FLEN)
NAN_BOXED(3082813440,32,FLEN)
NAN_BOXED(2131814824,32,FLEN)
NAN_BOXED(2151188435,32,FLEN)
NAN_BOXED(3084910592,32,FLEN)
NAN_BOXED(2131814824,32,FLEN)
NAN_BOXED(2151188435,32,FLEN)
NAN_BOXED(3085959168,32,FLEN)
NAN_BOXED(2131814824,32,FLEN)
NAN_BOXED(2151188435,32,FLEN)
NAN_BOXED(3086483456,32,FLEN)
NAN_BOXED(2131814824,32,FLEN)
NAN_BOXED(2151188435,32,FLEN)
NAN_BOXED(3086745600,32,FLEN)
NAN_BOXED(2131814824,32,FLEN)
NAN_BOXED(2151188435,32,FLEN)
NAN_BOXED(3086876672,32,FLEN)
NAN_BOXED(2131814824,32,FLEN)
NAN_BOXED(2151188435,32,FLEN)
NAN_BOXED(3086942208,32,FLEN)
NAN_BOXED(2131814824,32,FLEN)
NAN_BOXED(2151188435,32,FLEN)
NAN_BOXED(3086974976,32,FLEN)
NAN_BOXED(2131814824,32,FLEN)
NAN_BOXED(2151188435,32,FLEN)
NAN_BOXED(3086991360,32,FLEN)
NAN_BOXED(2131814824,32,FLEN)
NAN_BOXED(2151188435,32,FLEN)
NAN_BOXED(3086999552,32,FLEN)
NAN_BOXED(2131814824,32,FLEN)
NAN_BOXED(2151188435,32,FLEN)
NAN_BOXED(3087003648,32,FLEN)
NAN_BOXED(2131814824,32,FLEN)
NAN_BOXED(2151188435,32,FLEN)
NAN_BOXED(3087005696,32,FLEN)
NAN_BOXED(2131814824,32,FLEN)
NAN_BOXED(2151188435,32,FLEN)
NAN_BOXED(3087006720,32,FLEN)
NAN_BOXED(2131814824,32,FLEN)
NAN_BOXED(2151188435,32,FLEN)
NAN_BOXED(3087007232,32,FLEN)
NAN_BOXED(2131814824,32,FLEN)
NAN_BOXED(2151188435,32,FLEN)
NAN_BOXED(3087007488,32,FLEN)
NAN_BOXED(2131814824,32,FLEN)
NAN_BOXED(2151188435,32,FLEN)
NAN_BOXED(3087007616,32,FLEN)
NAN_BOXED(2131814824,32,FLEN)
NAN_BOXED(2151188435,32,FLEN)
NAN_BOXED(3087007680,32,FLEN)
NAN_BOXED(2131814824,32,FLEN)
NAN_BOXED(2151188435,32,FLEN)
NAN_BOXED(3087007712,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
