
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:17:59 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_28928:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x10e9a8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3887d3 and fs3 == 1 and fe3 == 0x6f and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f10e9a8; op2val:0x803887d3;
op3val:0xb7fffff0; valaddr_reg:x3; val_offset:86784*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86784*0 + 3*226*FLEN/8, x4, x1, x2)

inst_28929:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x10e9a8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3887d3 and fs3 == 1 and fe3 == 0x6f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f10e9a8; op2val:0x803887d3;
op3val:0xb7fffff8; valaddr_reg:x3; val_offset:86787*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86787*0 + 3*226*FLEN/8, x4, x1, x2)

inst_28930:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x10e9a8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3887d3 and fs3 == 1 and fe3 == 0x6f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f10e9a8; op2val:0x803887d3;
op3val:0xb7fffffc; valaddr_reg:x3; val_offset:86790*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86790*0 + 3*226*FLEN/8, x4, x1, x2)

inst_28931:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x10e9a8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3887d3 and fs3 == 1 and fe3 == 0x6f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f10e9a8; op2val:0x803887d3;
op3val:0xb7fffffe; valaddr_reg:x3; val_offset:86793*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86793*0 + 3*226*FLEN/8, x4, x1, x2)

inst_28932:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x10e9a8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3887d3 and fs3 == 1 and fe3 == 0x6f and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f10e9a8; op2val:0x803887d3;
op3val:0xb7ffffff; valaddr_reg:x3; val_offset:86796*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86796*0 + 3*226*FLEN/8, x4, x1, x2)

inst_28933:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x10e9a8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3887d3 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f10e9a8; op2val:0x803887d3;
op3val:0xbf800001; valaddr_reg:x3; val_offset:86799*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86799*0 + 3*226*FLEN/8, x4, x1, x2)

inst_28934:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x10e9a8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3887d3 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f10e9a8; op2val:0x803887d3;
op3val:0xbf800003; valaddr_reg:x3; val_offset:86802*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86802*0 + 3*226*FLEN/8, x4, x1, x2)

inst_28935:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x10e9a8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3887d3 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f10e9a8; op2val:0x803887d3;
op3val:0xbf800007; valaddr_reg:x3; val_offset:86805*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86805*0 + 3*226*FLEN/8, x4, x1, x2)

inst_28936:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x10e9a8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3887d3 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f10e9a8; op2val:0x803887d3;
op3val:0xbf999999; valaddr_reg:x3; val_offset:86808*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86808*0 + 3*226*FLEN/8, x4, x1, x2)

inst_28937:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x10e9a8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3887d3 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f10e9a8; op2val:0x803887d3;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:86811*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86811*0 + 3*226*FLEN/8, x4, x1, x2)

inst_28938:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x10e9a8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3887d3 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f10e9a8; op2val:0x803887d3;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:86814*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86814*0 + 3*226*FLEN/8, x4, x1, x2)

inst_28939:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x10e9a8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3887d3 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f10e9a8; op2val:0x803887d3;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:86817*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86817*0 + 3*226*FLEN/8, x4, x1, x2)

inst_28940:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x10e9a8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3887d3 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f10e9a8; op2val:0x803887d3;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:86820*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86820*0 + 3*226*FLEN/8, x4, x1, x2)

inst_28941:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x10e9a8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3887d3 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f10e9a8; op2val:0x803887d3;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:86823*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86823*0 + 3*226*FLEN/8, x4, x1, x2)

inst_28942:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x10e9a8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3887d3 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f10e9a8; op2val:0x803887d3;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:86826*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86826*0 + 3*226*FLEN/8, x4, x1, x2)

inst_28943:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x10e9a8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3887d3 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f10e9a8; op2val:0x803887d3;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:86829*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86829*0 + 3*226*FLEN/8, x4, x1, x2)

inst_28944:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x10e9a8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3887d3 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f10e9a8; op2val:0x803887d3;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:86832*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86832*0 + 3*226*FLEN/8, x4, x1, x2)

inst_28945:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x10e9a8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3887d3 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f10e9a8; op2val:0x803887d3;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:86835*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86835*0 + 3*226*FLEN/8, x4, x1, x2)

inst_28946:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x10e9a8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3887d3 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f10e9a8; op2val:0x803887d3;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:86838*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86838*0 + 3*226*FLEN/8, x4, x1, x2)

inst_28947:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x10e9a8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3887d3 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f10e9a8; op2val:0x803887d3;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:86841*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86841*0 + 3*226*FLEN/8, x4, x1, x2)

inst_28948:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x10e9a8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3887d3 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f10e9a8; op2val:0x803887d3;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:86844*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86844*0 + 3*226*FLEN/8, x4, x1, x2)

inst_28949:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1100b6 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x61fb5a and fs3 == 1 and fe3 == 0xef and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1100b6; op2val:0xbfe1fb5a;
op3val:0xf7800000; valaddr_reg:x3; val_offset:86847*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86847*0 + 3*226*FLEN/8, x4, x1, x2)

inst_28950:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1100b6 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x61fb5a and fs3 == 1 and fe3 == 0xef and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1100b6; op2val:0xbfe1fb5a;
op3val:0xf7800001; valaddr_reg:x3; val_offset:86850*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86850*0 + 3*226*FLEN/8, x4, x1, x2)

inst_28951:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1100b6 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x61fb5a and fs3 == 1 and fe3 == 0xef and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1100b6; op2val:0xbfe1fb5a;
op3val:0xf7800003; valaddr_reg:x3; val_offset:86853*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86853*0 + 3*226*FLEN/8, x4, x1, x2)

inst_28952:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1100b6 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x61fb5a and fs3 == 1 and fe3 == 0xef and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1100b6; op2val:0xbfe1fb5a;
op3val:0xf7800007; valaddr_reg:x3; val_offset:86856*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86856*0 + 3*226*FLEN/8, x4, x1, x2)

inst_28953:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1100b6 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x61fb5a and fs3 == 1 and fe3 == 0xef and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1100b6; op2val:0xbfe1fb5a;
op3val:0xf780000f; valaddr_reg:x3; val_offset:86859*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86859*0 + 3*226*FLEN/8, x4, x1, x2)

inst_28954:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1100b6 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x61fb5a and fs3 == 1 and fe3 == 0xef and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1100b6; op2val:0xbfe1fb5a;
op3val:0xf780001f; valaddr_reg:x3; val_offset:86862*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86862*0 + 3*226*FLEN/8, x4, x1, x2)

inst_28955:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1100b6 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x61fb5a and fs3 == 1 and fe3 == 0xef and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1100b6; op2val:0xbfe1fb5a;
op3val:0xf780003f; valaddr_reg:x3; val_offset:86865*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86865*0 + 3*226*FLEN/8, x4, x1, x2)

inst_28956:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1100b6 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x61fb5a and fs3 == 1 and fe3 == 0xef and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1100b6; op2val:0xbfe1fb5a;
op3val:0xf780007f; valaddr_reg:x3; val_offset:86868*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86868*0 + 3*226*FLEN/8, x4, x1, x2)

inst_28957:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1100b6 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x61fb5a and fs3 == 1 and fe3 == 0xef and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1100b6; op2val:0xbfe1fb5a;
op3val:0xf78000ff; valaddr_reg:x3; val_offset:86871*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86871*0 + 3*226*FLEN/8, x4, x1, x2)

inst_28958:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1100b6 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x61fb5a and fs3 == 1 and fe3 == 0xef and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1100b6; op2val:0xbfe1fb5a;
op3val:0xf78001ff; valaddr_reg:x3; val_offset:86874*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86874*0 + 3*226*FLEN/8, x4, x1, x2)

inst_28959:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1100b6 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x61fb5a and fs3 == 1 and fe3 == 0xef and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1100b6; op2val:0xbfe1fb5a;
op3val:0xf78003ff; valaddr_reg:x3; val_offset:86877*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86877*0 + 3*226*FLEN/8, x4, x1, x2)

inst_28960:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1100b6 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x61fb5a and fs3 == 1 and fe3 == 0xef and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1100b6; op2val:0xbfe1fb5a;
op3val:0xf78007ff; valaddr_reg:x3; val_offset:86880*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86880*0 + 3*226*FLEN/8, x4, x1, x2)

inst_28961:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1100b6 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x61fb5a and fs3 == 1 and fe3 == 0xef and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1100b6; op2val:0xbfe1fb5a;
op3val:0xf7800fff; valaddr_reg:x3; val_offset:86883*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86883*0 + 3*226*FLEN/8, x4, x1, x2)

inst_28962:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1100b6 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x61fb5a and fs3 == 1 and fe3 == 0xef and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1100b6; op2val:0xbfe1fb5a;
op3val:0xf7801fff; valaddr_reg:x3; val_offset:86886*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86886*0 + 3*226*FLEN/8, x4, x1, x2)

inst_28963:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1100b6 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x61fb5a and fs3 == 1 and fe3 == 0xef and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1100b6; op2val:0xbfe1fb5a;
op3val:0xf7803fff; valaddr_reg:x3; val_offset:86889*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86889*0 + 3*226*FLEN/8, x4, x1, x2)

inst_28964:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1100b6 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x61fb5a and fs3 == 1 and fe3 == 0xef and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1100b6; op2val:0xbfe1fb5a;
op3val:0xf7807fff; valaddr_reg:x3; val_offset:86892*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86892*0 + 3*226*FLEN/8, x4, x1, x2)

inst_28965:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1100b6 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x61fb5a and fs3 == 1 and fe3 == 0xef and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1100b6; op2val:0xbfe1fb5a;
op3val:0xf780ffff; valaddr_reg:x3; val_offset:86895*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86895*0 + 3*226*FLEN/8, x4, x1, x2)

inst_28966:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1100b6 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x61fb5a and fs3 == 1 and fe3 == 0xef and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1100b6; op2val:0xbfe1fb5a;
op3val:0xf781ffff; valaddr_reg:x3; val_offset:86898*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86898*0 + 3*226*FLEN/8, x4, x1, x2)

inst_28967:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1100b6 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x61fb5a and fs3 == 1 and fe3 == 0xef and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1100b6; op2val:0xbfe1fb5a;
op3val:0xf783ffff; valaddr_reg:x3; val_offset:86901*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86901*0 + 3*226*FLEN/8, x4, x1, x2)

inst_28968:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1100b6 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x61fb5a and fs3 == 1 and fe3 == 0xef and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1100b6; op2val:0xbfe1fb5a;
op3val:0xf787ffff; valaddr_reg:x3; val_offset:86904*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86904*0 + 3*226*FLEN/8, x4, x1, x2)

inst_28969:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1100b6 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x61fb5a and fs3 == 1 and fe3 == 0xef and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1100b6; op2val:0xbfe1fb5a;
op3val:0xf78fffff; valaddr_reg:x3; val_offset:86907*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86907*0 + 3*226*FLEN/8, x4, x1, x2)

inst_28970:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1100b6 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x61fb5a and fs3 == 1 and fe3 == 0xef and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1100b6; op2val:0xbfe1fb5a;
op3val:0xf79fffff; valaddr_reg:x3; val_offset:86910*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86910*0 + 3*226*FLEN/8, x4, x1, x2)

inst_28971:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1100b6 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x61fb5a and fs3 == 1 and fe3 == 0xef and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1100b6; op2val:0xbfe1fb5a;
op3val:0xf7bfffff; valaddr_reg:x3; val_offset:86913*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86913*0 + 3*226*FLEN/8, x4, x1, x2)

inst_28972:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1100b6 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x61fb5a and fs3 == 1 and fe3 == 0xef and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1100b6; op2val:0xbfe1fb5a;
op3val:0xf7c00000; valaddr_reg:x3; val_offset:86916*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86916*0 + 3*226*FLEN/8, x4, x1, x2)

inst_28973:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1100b6 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x61fb5a and fs3 == 1 and fe3 == 0xef and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1100b6; op2val:0xbfe1fb5a;
op3val:0xf7e00000; valaddr_reg:x3; val_offset:86919*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86919*0 + 3*226*FLEN/8, x4, x1, x2)

inst_28974:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1100b6 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x61fb5a and fs3 == 1 and fe3 == 0xef and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1100b6; op2val:0xbfe1fb5a;
op3val:0xf7f00000; valaddr_reg:x3; val_offset:86922*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86922*0 + 3*226*FLEN/8, x4, x1, x2)

inst_28975:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1100b6 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x61fb5a and fs3 == 1 and fe3 == 0xef and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1100b6; op2val:0xbfe1fb5a;
op3val:0xf7f80000; valaddr_reg:x3; val_offset:86925*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86925*0 + 3*226*FLEN/8, x4, x1, x2)

inst_28976:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1100b6 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x61fb5a and fs3 == 1 and fe3 == 0xef and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1100b6; op2val:0xbfe1fb5a;
op3val:0xf7fc0000; valaddr_reg:x3; val_offset:86928*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86928*0 + 3*226*FLEN/8, x4, x1, x2)

inst_28977:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1100b6 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x61fb5a and fs3 == 1 and fe3 == 0xef and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1100b6; op2val:0xbfe1fb5a;
op3val:0xf7fe0000; valaddr_reg:x3; val_offset:86931*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86931*0 + 3*226*FLEN/8, x4, x1, x2)

inst_28978:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1100b6 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x61fb5a and fs3 == 1 and fe3 == 0xef and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1100b6; op2val:0xbfe1fb5a;
op3val:0xf7ff0000; valaddr_reg:x3; val_offset:86934*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86934*0 + 3*226*FLEN/8, x4, x1, x2)

inst_28979:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1100b6 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x61fb5a and fs3 == 1 and fe3 == 0xef and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1100b6; op2val:0xbfe1fb5a;
op3val:0xf7ff8000; valaddr_reg:x3; val_offset:86937*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86937*0 + 3*226*FLEN/8, x4, x1, x2)

inst_28980:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1100b6 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x61fb5a and fs3 == 1 and fe3 == 0xef and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1100b6; op2val:0xbfe1fb5a;
op3val:0xf7ffc000; valaddr_reg:x3; val_offset:86940*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86940*0 + 3*226*FLEN/8, x4, x1, x2)

inst_28981:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1100b6 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x61fb5a and fs3 == 1 and fe3 == 0xef and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1100b6; op2val:0xbfe1fb5a;
op3val:0xf7ffe000; valaddr_reg:x3; val_offset:86943*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86943*0 + 3*226*FLEN/8, x4, x1, x2)

inst_28982:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1100b6 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x61fb5a and fs3 == 1 and fe3 == 0xef and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1100b6; op2val:0xbfe1fb5a;
op3val:0xf7fff000; valaddr_reg:x3; val_offset:86946*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86946*0 + 3*226*FLEN/8, x4, x1, x2)

inst_28983:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1100b6 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x61fb5a and fs3 == 1 and fe3 == 0xef and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1100b6; op2val:0xbfe1fb5a;
op3val:0xf7fff800; valaddr_reg:x3; val_offset:86949*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86949*0 + 3*226*FLEN/8, x4, x1, x2)

inst_28984:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1100b6 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x61fb5a and fs3 == 1 and fe3 == 0xef and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1100b6; op2val:0xbfe1fb5a;
op3val:0xf7fffc00; valaddr_reg:x3; val_offset:86952*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86952*0 + 3*226*FLEN/8, x4, x1, x2)

inst_28985:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1100b6 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x61fb5a and fs3 == 1 and fe3 == 0xef and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1100b6; op2val:0xbfe1fb5a;
op3val:0xf7fffe00; valaddr_reg:x3; val_offset:86955*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86955*0 + 3*226*FLEN/8, x4, x1, x2)

inst_28986:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1100b6 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x61fb5a and fs3 == 1 and fe3 == 0xef and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1100b6; op2val:0xbfe1fb5a;
op3val:0xf7ffff00; valaddr_reg:x3; val_offset:86958*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86958*0 + 3*226*FLEN/8, x4, x1, x2)

inst_28987:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1100b6 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x61fb5a and fs3 == 1 and fe3 == 0xef and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1100b6; op2val:0xbfe1fb5a;
op3val:0xf7ffff80; valaddr_reg:x3; val_offset:86961*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86961*0 + 3*226*FLEN/8, x4, x1, x2)

inst_28988:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1100b6 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x61fb5a and fs3 == 1 and fe3 == 0xef and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1100b6; op2val:0xbfe1fb5a;
op3val:0xf7ffffc0; valaddr_reg:x3; val_offset:86964*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86964*0 + 3*226*FLEN/8, x4, x1, x2)

inst_28989:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1100b6 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x61fb5a and fs3 == 1 and fe3 == 0xef and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1100b6; op2val:0xbfe1fb5a;
op3val:0xf7ffffe0; valaddr_reg:x3; val_offset:86967*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86967*0 + 3*226*FLEN/8, x4, x1, x2)

inst_28990:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1100b6 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x61fb5a and fs3 == 1 and fe3 == 0xef and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1100b6; op2val:0xbfe1fb5a;
op3val:0xf7fffff0; valaddr_reg:x3; val_offset:86970*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86970*0 + 3*226*FLEN/8, x4, x1, x2)

inst_28991:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1100b6 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x61fb5a and fs3 == 1 and fe3 == 0xef and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1100b6; op2val:0xbfe1fb5a;
op3val:0xf7fffff8; valaddr_reg:x3; val_offset:86973*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86973*0 + 3*226*FLEN/8, x4, x1, x2)

inst_28992:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1100b6 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x61fb5a and fs3 == 1 and fe3 == 0xef and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1100b6; op2val:0xbfe1fb5a;
op3val:0xf7fffffc; valaddr_reg:x3; val_offset:86976*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86976*0 + 3*226*FLEN/8, x4, x1, x2)

inst_28993:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1100b6 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x61fb5a and fs3 == 1 and fe3 == 0xef and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1100b6; op2val:0xbfe1fb5a;
op3val:0xf7fffffe; valaddr_reg:x3; val_offset:86979*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86979*0 + 3*226*FLEN/8, x4, x1, x2)

inst_28994:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1100b6 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x61fb5a and fs3 == 1 and fe3 == 0xef and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1100b6; op2val:0xbfe1fb5a;
op3val:0xf7ffffff; valaddr_reg:x3; val_offset:86982*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86982*0 + 3*226*FLEN/8, x4, x1, x2)

inst_28995:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1100b6 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x61fb5a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1100b6; op2val:0xbfe1fb5a;
op3val:0xff000001; valaddr_reg:x3; val_offset:86985*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86985*0 + 3*226*FLEN/8, x4, x1, x2)

inst_28996:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1100b6 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x61fb5a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1100b6; op2val:0xbfe1fb5a;
op3val:0xff000003; valaddr_reg:x3; val_offset:86988*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86988*0 + 3*226*FLEN/8, x4, x1, x2)

inst_28997:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1100b6 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x61fb5a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1100b6; op2val:0xbfe1fb5a;
op3val:0xff000007; valaddr_reg:x3; val_offset:86991*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86991*0 + 3*226*FLEN/8, x4, x1, x2)

inst_28998:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1100b6 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x61fb5a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1100b6; op2val:0xbfe1fb5a;
op3val:0xff199999; valaddr_reg:x3; val_offset:86994*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86994*0 + 3*226*FLEN/8, x4, x1, x2)

inst_28999:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1100b6 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x61fb5a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1100b6; op2val:0xbfe1fb5a;
op3val:0xff249249; valaddr_reg:x3; val_offset:86997*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86997*0 + 3*226*FLEN/8, x4, x1, x2)

inst_29000:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1100b6 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x61fb5a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1100b6; op2val:0xbfe1fb5a;
op3val:0xff333333; valaddr_reg:x3; val_offset:87000*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87000*0 + 3*226*FLEN/8, x4, x1, x2)

inst_29001:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1100b6 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x61fb5a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1100b6; op2val:0xbfe1fb5a;
op3val:0xff36db6d; valaddr_reg:x3; val_offset:87003*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87003*0 + 3*226*FLEN/8, x4, x1, x2)

inst_29002:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1100b6 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x61fb5a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1100b6; op2val:0xbfe1fb5a;
op3val:0xff3bbbbb; valaddr_reg:x3; val_offset:87006*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87006*0 + 3*226*FLEN/8, x4, x1, x2)

inst_29003:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1100b6 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x61fb5a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1100b6; op2val:0xbfe1fb5a;
op3val:0xff444444; valaddr_reg:x3; val_offset:87009*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87009*0 + 3*226*FLEN/8, x4, x1, x2)

inst_29004:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1100b6 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x61fb5a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1100b6; op2val:0xbfe1fb5a;
op3val:0xff4ccccc; valaddr_reg:x3; val_offset:87012*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87012*0 + 3*226*FLEN/8, x4, x1, x2)

inst_29005:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1100b6 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x61fb5a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1100b6; op2val:0xbfe1fb5a;
op3val:0xff5b6db6; valaddr_reg:x3; val_offset:87015*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87015*0 + 3*226*FLEN/8, x4, x1, x2)

inst_29006:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1100b6 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x61fb5a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1100b6; op2val:0xbfe1fb5a;
op3val:0xff666666; valaddr_reg:x3; val_offset:87018*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87018*0 + 3*226*FLEN/8, x4, x1, x2)

inst_29007:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1100b6 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x61fb5a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1100b6; op2val:0xbfe1fb5a;
op3val:0xff6db6db; valaddr_reg:x3; val_offset:87021*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87021*0 + 3*226*FLEN/8, x4, x1, x2)

inst_29008:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1100b6 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x61fb5a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1100b6; op2val:0xbfe1fb5a;
op3val:0xff7ffff8; valaddr_reg:x3; val_offset:87024*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87024*0 + 3*226*FLEN/8, x4, x1, x2)

inst_29009:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1100b6 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x61fb5a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1100b6; op2val:0xbfe1fb5a;
op3val:0xff7ffffc; valaddr_reg:x3; val_offset:87027*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87027*0 + 3*226*FLEN/8, x4, x1, x2)

inst_29010:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1100b6 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x61fb5a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1100b6; op2val:0xbfe1fb5a;
op3val:0xff7ffffe; valaddr_reg:x3; val_offset:87030*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87030*0 + 3*226*FLEN/8, x4, x1, x2)

inst_29011:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x114532 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f114532; op2val:0x80000000;
op3val:0x80800001; valaddr_reg:x3; val_offset:87033*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87033*0 + 3*226*FLEN/8, x4, x1, x2)

inst_29012:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x114532 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f114532; op2val:0x80000000;
op3val:0x80800003; valaddr_reg:x3; val_offset:87036*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87036*0 + 3*226*FLEN/8, x4, x1, x2)

inst_29013:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x114532 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f114532; op2val:0x80000000;
op3val:0x80800007; valaddr_reg:x3; val_offset:87039*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87039*0 + 3*226*FLEN/8, x4, x1, x2)

inst_29014:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x114532 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f114532; op2val:0x80000000;
op3val:0x80999999; valaddr_reg:x3; val_offset:87042*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87042*0 + 3*226*FLEN/8, x4, x1, x2)

inst_29015:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x114532 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f114532; op2val:0x80000000;
op3val:0x80a49249; valaddr_reg:x3; val_offset:87045*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87045*0 + 3*226*FLEN/8, x4, x1, x2)

inst_29016:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x114532 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f114532; op2val:0x80000000;
op3val:0x80b33333; valaddr_reg:x3; val_offset:87048*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87048*0 + 3*226*FLEN/8, x4, x1, x2)

inst_29017:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x114532 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f114532; op2val:0x80000000;
op3val:0x80b6db6d; valaddr_reg:x3; val_offset:87051*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87051*0 + 3*226*FLEN/8, x4, x1, x2)

inst_29018:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x114532 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f114532; op2val:0x80000000;
op3val:0x80bbbbbb; valaddr_reg:x3; val_offset:87054*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87054*0 + 3*226*FLEN/8, x4, x1, x2)

inst_29019:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x114532 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f114532; op2val:0x80000000;
op3val:0x80c44444; valaddr_reg:x3; val_offset:87057*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87057*0 + 3*226*FLEN/8, x4, x1, x2)

inst_29020:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x114532 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f114532; op2val:0x80000000;
op3val:0x80cccccc; valaddr_reg:x3; val_offset:87060*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87060*0 + 3*226*FLEN/8, x4, x1, x2)

inst_29021:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x114532 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f114532; op2val:0x80000000;
op3val:0x80db6db6; valaddr_reg:x3; val_offset:87063*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87063*0 + 3*226*FLEN/8, x4, x1, x2)

inst_29022:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x114532 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f114532; op2val:0x80000000;
op3val:0x80e66666; valaddr_reg:x3; val_offset:87066*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87066*0 + 3*226*FLEN/8, x4, x1, x2)

inst_29023:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x114532 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f114532; op2val:0x80000000;
op3val:0x80edb6db; valaddr_reg:x3; val_offset:87069*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87069*0 + 3*226*FLEN/8, x4, x1, x2)

inst_29024:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x114532 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f114532; op2val:0x80000000;
op3val:0x80fffff8; valaddr_reg:x3; val_offset:87072*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87072*0 + 3*226*FLEN/8, x4, x1, x2)

inst_29025:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x114532 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f114532; op2val:0x80000000;
op3val:0x80fffffc; valaddr_reg:x3; val_offset:87075*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87075*0 + 3*226*FLEN/8, x4, x1, x2)

inst_29026:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x114532 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f114532; op2val:0x80000000;
op3val:0x80fffffe; valaddr_reg:x3; val_offset:87078*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87078*0 + 3*226*FLEN/8, x4, x1, x2)

inst_29027:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x114532 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f114532; op2val:0x80000000;
op3val:0x83800000; valaddr_reg:x3; val_offset:87081*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87081*0 + 3*226*FLEN/8, x4, x1, x2)

inst_29028:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x114532 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f114532; op2val:0x80000000;
op3val:0x83800001; valaddr_reg:x3; val_offset:87084*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87084*0 + 3*226*FLEN/8, x4, x1, x2)

inst_29029:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x114532 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f114532; op2val:0x80000000;
op3val:0x83800003; valaddr_reg:x3; val_offset:87087*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87087*0 + 3*226*FLEN/8, x4, x1, x2)

inst_29030:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x114532 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f114532; op2val:0x80000000;
op3val:0x83800007; valaddr_reg:x3; val_offset:87090*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87090*0 + 3*226*FLEN/8, x4, x1, x2)

inst_29031:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x114532 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f114532; op2val:0x80000000;
op3val:0x8380000f; valaddr_reg:x3; val_offset:87093*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87093*0 + 3*226*FLEN/8, x4, x1, x2)

inst_29032:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x114532 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f114532; op2val:0x80000000;
op3val:0x8380001f; valaddr_reg:x3; val_offset:87096*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87096*0 + 3*226*FLEN/8, x4, x1, x2)

inst_29033:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x114532 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f114532; op2val:0x80000000;
op3val:0x8380003f; valaddr_reg:x3; val_offset:87099*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87099*0 + 3*226*FLEN/8, x4, x1, x2)

inst_29034:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x114532 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f114532; op2val:0x80000000;
op3val:0x8380007f; valaddr_reg:x3; val_offset:87102*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87102*0 + 3*226*FLEN/8, x4, x1, x2)

inst_29035:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x114532 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f114532; op2val:0x80000000;
op3val:0x838000ff; valaddr_reg:x3; val_offset:87105*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87105*0 + 3*226*FLEN/8, x4, x1, x2)

inst_29036:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x114532 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f114532; op2val:0x80000000;
op3val:0x838001ff; valaddr_reg:x3; val_offset:87108*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87108*0 + 3*226*FLEN/8, x4, x1, x2)

inst_29037:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x114532 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f114532; op2val:0x80000000;
op3val:0x838003ff; valaddr_reg:x3; val_offset:87111*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87111*0 + 3*226*FLEN/8, x4, x1, x2)

inst_29038:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x114532 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f114532; op2val:0x80000000;
op3val:0x838007ff; valaddr_reg:x3; val_offset:87114*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87114*0 + 3*226*FLEN/8, x4, x1, x2)

inst_29039:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x114532 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f114532; op2val:0x80000000;
op3val:0x83800fff; valaddr_reg:x3; val_offset:87117*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87117*0 + 3*226*FLEN/8, x4, x1, x2)

inst_29040:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x114532 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f114532; op2val:0x80000000;
op3val:0x83801fff; valaddr_reg:x3; val_offset:87120*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87120*0 + 3*226*FLEN/8, x4, x1, x2)

inst_29041:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x114532 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f114532; op2val:0x80000000;
op3val:0x83803fff; valaddr_reg:x3; val_offset:87123*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87123*0 + 3*226*FLEN/8, x4, x1, x2)

inst_29042:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x114532 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f114532; op2val:0x80000000;
op3val:0x83807fff; valaddr_reg:x3; val_offset:87126*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87126*0 + 3*226*FLEN/8, x4, x1, x2)

inst_29043:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x114532 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f114532; op2val:0x80000000;
op3val:0x8380ffff; valaddr_reg:x3; val_offset:87129*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87129*0 + 3*226*FLEN/8, x4, x1, x2)

inst_29044:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x114532 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f114532; op2val:0x80000000;
op3val:0x8381ffff; valaddr_reg:x3; val_offset:87132*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87132*0 + 3*226*FLEN/8, x4, x1, x2)

inst_29045:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x114532 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f114532; op2val:0x80000000;
op3val:0x8383ffff; valaddr_reg:x3; val_offset:87135*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87135*0 + 3*226*FLEN/8, x4, x1, x2)

inst_29046:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x114532 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f114532; op2val:0x80000000;
op3val:0x8387ffff; valaddr_reg:x3; val_offset:87138*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87138*0 + 3*226*FLEN/8, x4, x1, x2)

inst_29047:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x114532 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f114532; op2val:0x80000000;
op3val:0x838fffff; valaddr_reg:x3; val_offset:87141*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87141*0 + 3*226*FLEN/8, x4, x1, x2)

inst_29048:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x114532 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f114532; op2val:0x80000000;
op3val:0x839fffff; valaddr_reg:x3; val_offset:87144*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87144*0 + 3*226*FLEN/8, x4, x1, x2)

inst_29049:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x114532 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f114532; op2val:0x80000000;
op3val:0x83bfffff; valaddr_reg:x3; val_offset:87147*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87147*0 + 3*226*FLEN/8, x4, x1, x2)

inst_29050:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x114532 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f114532; op2val:0x80000000;
op3val:0x83c00000; valaddr_reg:x3; val_offset:87150*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87150*0 + 3*226*FLEN/8, x4, x1, x2)

inst_29051:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x114532 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f114532; op2val:0x80000000;
op3val:0x83e00000; valaddr_reg:x3; val_offset:87153*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87153*0 + 3*226*FLEN/8, x4, x1, x2)

inst_29052:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x114532 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f114532; op2val:0x80000000;
op3val:0x83f00000; valaddr_reg:x3; val_offset:87156*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87156*0 + 3*226*FLEN/8, x4, x1, x2)

inst_29053:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x114532 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f114532; op2val:0x80000000;
op3val:0x83f80000; valaddr_reg:x3; val_offset:87159*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87159*0 + 3*226*FLEN/8, x4, x1, x2)

inst_29054:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x114532 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f114532; op2val:0x80000000;
op3val:0x83fc0000; valaddr_reg:x3; val_offset:87162*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87162*0 + 3*226*FLEN/8, x4, x1, x2)

inst_29055:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x114532 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f114532; op2val:0x80000000;
op3val:0x83fe0000; valaddr_reg:x3; val_offset:87165*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87165*0 + 3*226*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2131814824,32,FLEN)
NAN_BOXED(2151188435,32,FLEN)
NAN_BOXED(3087007728,32,FLEN)
NAN_BOXED(2131814824,32,FLEN)
NAN_BOXED(2151188435,32,FLEN)
NAN_BOXED(3087007736,32,FLEN)
NAN_BOXED(2131814824,32,FLEN)
NAN_BOXED(2151188435,32,FLEN)
NAN_BOXED(3087007740,32,FLEN)
NAN_BOXED(2131814824,32,FLEN)
NAN_BOXED(2151188435,32,FLEN)
NAN_BOXED(3087007742,32,FLEN)
NAN_BOXED(2131814824,32,FLEN)
NAN_BOXED(2151188435,32,FLEN)
NAN_BOXED(3087007743,32,FLEN)
NAN_BOXED(2131814824,32,FLEN)
NAN_BOXED(2151188435,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2131814824,32,FLEN)
NAN_BOXED(2151188435,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2131814824,32,FLEN)
NAN_BOXED(2151188435,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
NAN_BOXED(2131814824,32,FLEN)
NAN_BOXED(2151188435,32,FLEN)
NAN_BOXED(3214514585,32,FLEN)
NAN_BOXED(2131814824,32,FLEN)
NAN_BOXED(2151188435,32,FLEN)
NAN_BOXED(3215233609,32,FLEN)
NAN_BOXED(2131814824,32,FLEN)
NAN_BOXED(2151188435,32,FLEN)
NAN_BOXED(3216192307,32,FLEN)
NAN_BOXED(2131814824,32,FLEN)
NAN_BOXED(2151188435,32,FLEN)
NAN_BOXED(3216431981,32,FLEN)
NAN_BOXED(2131814824,32,FLEN)
NAN_BOXED(2151188435,32,FLEN)
NAN_BOXED(3216751547,32,FLEN)
NAN_BOXED(2131814824,32,FLEN)
NAN_BOXED(2151188435,32,FLEN)
NAN_BOXED(3217310788,32,FLEN)
NAN_BOXED(2131814824,32,FLEN)
NAN_BOXED(2151188435,32,FLEN)
NAN_BOXED(3217870028,32,FLEN)
NAN_BOXED(2131814824,32,FLEN)
NAN_BOXED(2151188435,32,FLEN)
NAN_BOXED(3218828726,32,FLEN)
NAN_BOXED(2131814824,32,FLEN)
NAN_BOXED(2151188435,32,FLEN)
NAN_BOXED(3219547750,32,FLEN)
NAN_BOXED(2131814824,32,FLEN)
NAN_BOXED(2151188435,32,FLEN)
NAN_BOXED(3220027099,32,FLEN)
NAN_BOXED(2131814824,32,FLEN)
NAN_BOXED(2151188435,32,FLEN)
NAN_BOXED(3221225464,32,FLEN)
NAN_BOXED(2131814824,32,FLEN)
NAN_BOXED(2151188435,32,FLEN)
NAN_BOXED(3221225468,32,FLEN)
NAN_BOXED(2131814824,32,FLEN)
NAN_BOXED(2151188435,32,FLEN)
NAN_BOXED(3221225470,32,FLEN)
NAN_BOXED(2131820726,32,FLEN)
NAN_BOXED(3219258202,32,FLEN)
NAN_BOXED(4152360960,32,FLEN)
NAN_BOXED(2131820726,32,FLEN)
NAN_BOXED(3219258202,32,FLEN)
NAN_BOXED(4152360961,32,FLEN)
NAN_BOXED(2131820726,32,FLEN)
NAN_BOXED(3219258202,32,FLEN)
NAN_BOXED(4152360963,32,FLEN)
NAN_BOXED(2131820726,32,FLEN)
NAN_BOXED(3219258202,32,FLEN)
NAN_BOXED(4152360967,32,FLEN)
NAN_BOXED(2131820726,32,FLEN)
NAN_BOXED(3219258202,32,FLEN)
NAN_BOXED(4152360975,32,FLEN)
NAN_BOXED(2131820726,32,FLEN)
NAN_BOXED(3219258202,32,FLEN)
NAN_BOXED(4152360991,32,FLEN)
NAN_BOXED(2131820726,32,FLEN)
NAN_BOXED(3219258202,32,FLEN)
NAN_BOXED(4152361023,32,FLEN)
NAN_BOXED(2131820726,32,FLEN)
NAN_BOXED(3219258202,32,FLEN)
NAN_BOXED(4152361087,32,FLEN)
NAN_BOXED(2131820726,32,FLEN)
NAN_BOXED(3219258202,32,FLEN)
NAN_BOXED(4152361215,32,FLEN)
NAN_BOXED(2131820726,32,FLEN)
NAN_BOXED(3219258202,32,FLEN)
NAN_BOXED(4152361471,32,FLEN)
NAN_BOXED(2131820726,32,FLEN)
NAN_BOXED(3219258202,32,FLEN)
NAN_BOXED(4152361983,32,FLEN)
NAN_BOXED(2131820726,32,FLEN)
NAN_BOXED(3219258202,32,FLEN)
NAN_BOXED(4152363007,32,FLEN)
NAN_BOXED(2131820726,32,FLEN)
NAN_BOXED(3219258202,32,FLEN)
NAN_BOXED(4152365055,32,FLEN)
NAN_BOXED(2131820726,32,FLEN)
NAN_BOXED(3219258202,32,FLEN)
NAN_BOXED(4152369151,32,FLEN)
NAN_BOXED(2131820726,32,FLEN)
NAN_BOXED(3219258202,32,FLEN)
NAN_BOXED(4152377343,32,FLEN)
NAN_BOXED(2131820726,32,FLEN)
NAN_BOXED(3219258202,32,FLEN)
NAN_BOXED(4152393727,32,FLEN)
NAN_BOXED(2131820726,32,FLEN)
NAN_BOXED(3219258202,32,FLEN)
NAN_BOXED(4152426495,32,FLEN)
NAN_BOXED(2131820726,32,FLEN)
NAN_BOXED(3219258202,32,FLEN)
NAN_BOXED(4152492031,32,FLEN)
NAN_BOXED(2131820726,32,FLEN)
NAN_BOXED(3219258202,32,FLEN)
NAN_BOXED(4152623103,32,FLEN)
NAN_BOXED(2131820726,32,FLEN)
NAN_BOXED(3219258202,32,FLEN)
NAN_BOXED(4152885247,32,FLEN)
NAN_BOXED(2131820726,32,FLEN)
NAN_BOXED(3219258202,32,FLEN)
NAN_BOXED(4153409535,32,FLEN)
NAN_BOXED(2131820726,32,FLEN)
NAN_BOXED(3219258202,32,FLEN)
NAN_BOXED(4154458111,32,FLEN)
NAN_BOXED(2131820726,32,FLEN)
NAN_BOXED(3219258202,32,FLEN)
NAN_BOXED(4156555263,32,FLEN)
NAN_BOXED(2131820726,32,FLEN)
NAN_BOXED(3219258202,32,FLEN)
NAN_BOXED(4156555264,32,FLEN)
NAN_BOXED(2131820726,32,FLEN)
NAN_BOXED(3219258202,32,FLEN)
NAN_BOXED(4158652416,32,FLEN)
NAN_BOXED(2131820726,32,FLEN)
NAN_BOXED(3219258202,32,FLEN)
NAN_BOXED(4159700992,32,FLEN)
NAN_BOXED(2131820726,32,FLEN)
NAN_BOXED(3219258202,32,FLEN)
NAN_BOXED(4160225280,32,FLEN)
NAN_BOXED(2131820726,32,FLEN)
NAN_BOXED(3219258202,32,FLEN)
NAN_BOXED(4160487424,32,FLEN)
NAN_BOXED(2131820726,32,FLEN)
NAN_BOXED(3219258202,32,FLEN)
NAN_BOXED(4160618496,32,FLEN)
NAN_BOXED(2131820726,32,FLEN)
NAN_BOXED(3219258202,32,FLEN)
NAN_BOXED(4160684032,32,FLEN)
NAN_BOXED(2131820726,32,FLEN)
NAN_BOXED(3219258202,32,FLEN)
NAN_BOXED(4160716800,32,FLEN)
NAN_BOXED(2131820726,32,FLEN)
NAN_BOXED(3219258202,32,FLEN)
NAN_BOXED(4160733184,32,FLEN)
NAN_BOXED(2131820726,32,FLEN)
NAN_BOXED(3219258202,32,FLEN)
NAN_BOXED(4160741376,32,FLEN)
NAN_BOXED(2131820726,32,FLEN)
NAN_BOXED(3219258202,32,FLEN)
NAN_BOXED(4160745472,32,FLEN)
NAN_BOXED(2131820726,32,FLEN)
NAN_BOXED(3219258202,32,FLEN)
NAN_BOXED(4160747520,32,FLEN)
NAN_BOXED(2131820726,32,FLEN)
NAN_BOXED(3219258202,32,FLEN)
NAN_BOXED(4160748544,32,FLEN)
NAN_BOXED(2131820726,32,FLEN)
NAN_BOXED(3219258202,32,FLEN)
NAN_BOXED(4160749056,32,FLEN)
NAN_BOXED(2131820726,32,FLEN)
NAN_BOXED(3219258202,32,FLEN)
NAN_BOXED(4160749312,32,FLEN)
NAN_BOXED(2131820726,32,FLEN)
NAN_BOXED(3219258202,32,FLEN)
NAN_BOXED(4160749440,32,FLEN)
NAN_BOXED(2131820726,32,FLEN)
NAN_BOXED(3219258202,32,FLEN)
NAN_BOXED(4160749504,32,FLEN)
NAN_BOXED(2131820726,32,FLEN)
NAN_BOXED(3219258202,32,FLEN)
NAN_BOXED(4160749536,32,FLEN)
NAN_BOXED(2131820726,32,FLEN)
NAN_BOXED(3219258202,32,FLEN)
NAN_BOXED(4160749552,32,FLEN)
NAN_BOXED(2131820726,32,FLEN)
NAN_BOXED(3219258202,32,FLEN)
NAN_BOXED(4160749560,32,FLEN)
NAN_BOXED(2131820726,32,FLEN)
NAN_BOXED(3219258202,32,FLEN)
NAN_BOXED(4160749564,32,FLEN)
NAN_BOXED(2131820726,32,FLEN)
NAN_BOXED(3219258202,32,FLEN)
NAN_BOXED(4160749566,32,FLEN)
NAN_BOXED(2131820726,32,FLEN)
NAN_BOXED(3219258202,32,FLEN)
NAN_BOXED(4160749567,32,FLEN)
NAN_BOXED(2131820726,32,FLEN)
NAN_BOXED(3219258202,32,FLEN)
NAN_BOXED(4278190081,32,FLEN)
NAN_BOXED(2131820726,32,FLEN)
NAN_BOXED(3219258202,32,FLEN)
NAN_BOXED(4278190083,32,FLEN)
NAN_BOXED(2131820726,32,FLEN)
NAN_BOXED(3219258202,32,FLEN)
NAN_BOXED(4278190087,32,FLEN)
NAN_BOXED(2131820726,32,FLEN)
NAN_BOXED(3219258202,32,FLEN)
NAN_BOXED(4279867801,32,FLEN)
NAN_BOXED(2131820726,32,FLEN)
NAN_BOXED(3219258202,32,FLEN)
NAN_BOXED(4280586825,32,FLEN)
NAN_BOXED(2131820726,32,FLEN)
NAN_BOXED(3219258202,32,FLEN)
NAN_BOXED(4281545523,32,FLEN)
NAN_BOXED(2131820726,32,FLEN)
NAN_BOXED(3219258202,32,FLEN)
NAN_BOXED(4281785197,32,FLEN)
NAN_BOXED(2131820726,32,FLEN)
NAN_BOXED(3219258202,32,FLEN)
NAN_BOXED(4282104763,32,FLEN)
NAN_BOXED(2131820726,32,FLEN)
NAN_BOXED(3219258202,32,FLEN)
NAN_BOXED(4282664004,32,FLEN)
NAN_BOXED(2131820726,32,FLEN)
NAN_BOXED(3219258202,32,FLEN)
NAN_BOXED(4283223244,32,FLEN)
NAN_BOXED(2131820726,32,FLEN)
NAN_BOXED(3219258202,32,FLEN)
NAN_BOXED(4284181942,32,FLEN)
NAN_BOXED(2131820726,32,FLEN)
NAN_BOXED(3219258202,32,FLEN)
NAN_BOXED(4284900966,32,FLEN)
NAN_BOXED(2131820726,32,FLEN)
NAN_BOXED(3219258202,32,FLEN)
NAN_BOXED(4285380315,32,FLEN)
NAN_BOXED(2131820726,32,FLEN)
NAN_BOXED(3219258202,32,FLEN)
NAN_BOXED(4286578680,32,FLEN)
NAN_BOXED(2131820726,32,FLEN)
NAN_BOXED(3219258202,32,FLEN)
NAN_BOXED(4286578684,32,FLEN)
NAN_BOXED(2131820726,32,FLEN)
NAN_BOXED(3219258202,32,FLEN)
NAN_BOXED(4286578686,32,FLEN)
NAN_BOXED(2131838258,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872257,32,FLEN)
NAN_BOXED(2131838258,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872259,32,FLEN)
NAN_BOXED(2131838258,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872263,32,FLEN)
NAN_BOXED(2131838258,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2157549977,32,FLEN)
NAN_BOXED(2131838258,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2158269001,32,FLEN)
NAN_BOXED(2131838258,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2159227699,32,FLEN)
NAN_BOXED(2131838258,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2159467373,32,FLEN)
NAN_BOXED(2131838258,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2159786939,32,FLEN)
NAN_BOXED(2131838258,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2160346180,32,FLEN)
NAN_BOXED(2131838258,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2160905420,32,FLEN)
NAN_BOXED(2131838258,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2161864118,32,FLEN)
NAN_BOXED(2131838258,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2162583142,32,FLEN)
NAN_BOXED(2131838258,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2163062491,32,FLEN)
NAN_BOXED(2131838258,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260856,32,FLEN)
NAN_BOXED(2131838258,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260860,32,FLEN)
NAN_BOXED(2131838258,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260862,32,FLEN)
NAN_BOXED(2131838258,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206203904,32,FLEN)
NAN_BOXED(2131838258,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206203905,32,FLEN)
NAN_BOXED(2131838258,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206203907,32,FLEN)
NAN_BOXED(2131838258,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206203911,32,FLEN)
NAN_BOXED(2131838258,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206203919,32,FLEN)
NAN_BOXED(2131838258,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206203935,32,FLEN)
NAN_BOXED(2131838258,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206203967,32,FLEN)
NAN_BOXED(2131838258,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206204031,32,FLEN)
NAN_BOXED(2131838258,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206204159,32,FLEN)
NAN_BOXED(2131838258,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206204415,32,FLEN)
NAN_BOXED(2131838258,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206204927,32,FLEN)
NAN_BOXED(2131838258,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206205951,32,FLEN)
NAN_BOXED(2131838258,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206207999,32,FLEN)
NAN_BOXED(2131838258,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206212095,32,FLEN)
NAN_BOXED(2131838258,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206220287,32,FLEN)
NAN_BOXED(2131838258,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206236671,32,FLEN)
NAN_BOXED(2131838258,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206269439,32,FLEN)
NAN_BOXED(2131838258,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206334975,32,FLEN)
NAN_BOXED(2131838258,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206466047,32,FLEN)
NAN_BOXED(2131838258,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206728191,32,FLEN)
NAN_BOXED(2131838258,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2207252479,32,FLEN)
NAN_BOXED(2131838258,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2208301055,32,FLEN)
NAN_BOXED(2131838258,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2210398207,32,FLEN)
NAN_BOXED(2131838258,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2210398208,32,FLEN)
NAN_BOXED(2131838258,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2212495360,32,FLEN)
NAN_BOXED(2131838258,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2213543936,32,FLEN)
NAN_BOXED(2131838258,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214068224,32,FLEN)
NAN_BOXED(2131838258,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214330368,32,FLEN)
NAN_BOXED(2131838258,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214461440,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
