
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:17:59 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_29056:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x114532 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f114532; op2val:0x80000000;
op3val:0x83ff0000; valaddr_reg:x3; val_offset:87168*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87168*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29057:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x114532 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f114532; op2val:0x80000000;
op3val:0x83ff8000; valaddr_reg:x3; val_offset:87171*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87171*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29058:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x114532 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f114532; op2val:0x80000000;
op3val:0x83ffc000; valaddr_reg:x3; val_offset:87174*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87174*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29059:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x114532 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f114532; op2val:0x80000000;
op3val:0x83ffe000; valaddr_reg:x3; val_offset:87177*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87177*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29060:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x114532 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f114532; op2val:0x80000000;
op3val:0x83fff000; valaddr_reg:x3; val_offset:87180*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87180*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29061:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x114532 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f114532; op2val:0x80000000;
op3val:0x83fff800; valaddr_reg:x3; val_offset:87183*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87183*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29062:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x114532 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f114532; op2val:0x80000000;
op3val:0x83fffc00; valaddr_reg:x3; val_offset:87186*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87186*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29063:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x114532 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f114532; op2val:0x80000000;
op3val:0x83fffe00; valaddr_reg:x3; val_offset:87189*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87189*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29064:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x114532 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f114532; op2val:0x80000000;
op3val:0x83ffff00; valaddr_reg:x3; val_offset:87192*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87192*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29065:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x114532 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f114532; op2val:0x80000000;
op3val:0x83ffff80; valaddr_reg:x3; val_offset:87195*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87195*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29066:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x114532 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f114532; op2val:0x80000000;
op3val:0x83ffffc0; valaddr_reg:x3; val_offset:87198*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87198*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29067:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x114532 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f114532; op2val:0x80000000;
op3val:0x83ffffe0; valaddr_reg:x3; val_offset:87201*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87201*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29068:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x114532 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f114532; op2val:0x80000000;
op3val:0x83fffff0; valaddr_reg:x3; val_offset:87204*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87204*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29069:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x114532 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f114532; op2val:0x80000000;
op3val:0x83fffff8; valaddr_reg:x3; val_offset:87207*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87207*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29070:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x114532 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f114532; op2val:0x80000000;
op3val:0x83fffffc; valaddr_reg:x3; val_offset:87210*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87210*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29071:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x114532 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f114532; op2val:0x80000000;
op3val:0x83fffffe; valaddr_reg:x3; val_offset:87213*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87213*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29072:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x114532 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f114532; op2val:0x80000000;
op3val:0x83ffffff; valaddr_reg:x3; val_offset:87216*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87216*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29073:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x11efef and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6088ec and fs3 == 1 and fe3 == 0xe0 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f11efef; op2val:0xbfe088ec;
op3val:0xf0000000; valaddr_reg:x3; val_offset:87219*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87219*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29074:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x11efef and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6088ec and fs3 == 1 and fe3 == 0xe0 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f11efef; op2val:0xbfe088ec;
op3val:0xf0000001; valaddr_reg:x3; val_offset:87222*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87222*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29075:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x11efef and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6088ec and fs3 == 1 and fe3 == 0xe0 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f11efef; op2val:0xbfe088ec;
op3val:0xf0000003; valaddr_reg:x3; val_offset:87225*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87225*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29076:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x11efef and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6088ec and fs3 == 1 and fe3 == 0xe0 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f11efef; op2val:0xbfe088ec;
op3val:0xf0000007; valaddr_reg:x3; val_offset:87228*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87228*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29077:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x11efef and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6088ec and fs3 == 1 and fe3 == 0xe0 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f11efef; op2val:0xbfe088ec;
op3val:0xf000000f; valaddr_reg:x3; val_offset:87231*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87231*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29078:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x11efef and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6088ec and fs3 == 1 and fe3 == 0xe0 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f11efef; op2val:0xbfe088ec;
op3val:0xf000001f; valaddr_reg:x3; val_offset:87234*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87234*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29079:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x11efef and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6088ec and fs3 == 1 and fe3 == 0xe0 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f11efef; op2val:0xbfe088ec;
op3val:0xf000003f; valaddr_reg:x3; val_offset:87237*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87237*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29080:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x11efef and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6088ec and fs3 == 1 and fe3 == 0xe0 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f11efef; op2val:0xbfe088ec;
op3val:0xf000007f; valaddr_reg:x3; val_offset:87240*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87240*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29081:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x11efef and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6088ec and fs3 == 1 and fe3 == 0xe0 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f11efef; op2val:0xbfe088ec;
op3val:0xf00000ff; valaddr_reg:x3; val_offset:87243*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87243*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29082:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x11efef and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6088ec and fs3 == 1 and fe3 == 0xe0 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f11efef; op2val:0xbfe088ec;
op3val:0xf00001ff; valaddr_reg:x3; val_offset:87246*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87246*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29083:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x11efef and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6088ec and fs3 == 1 and fe3 == 0xe0 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f11efef; op2val:0xbfe088ec;
op3val:0xf00003ff; valaddr_reg:x3; val_offset:87249*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87249*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29084:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x11efef and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6088ec and fs3 == 1 and fe3 == 0xe0 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f11efef; op2val:0xbfe088ec;
op3val:0xf00007ff; valaddr_reg:x3; val_offset:87252*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87252*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29085:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x11efef and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6088ec and fs3 == 1 and fe3 == 0xe0 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f11efef; op2val:0xbfe088ec;
op3val:0xf0000fff; valaddr_reg:x3; val_offset:87255*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87255*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29086:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x11efef and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6088ec and fs3 == 1 and fe3 == 0xe0 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f11efef; op2val:0xbfe088ec;
op3val:0xf0001fff; valaddr_reg:x3; val_offset:87258*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87258*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29087:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x11efef and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6088ec and fs3 == 1 and fe3 == 0xe0 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f11efef; op2val:0xbfe088ec;
op3val:0xf0003fff; valaddr_reg:x3; val_offset:87261*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87261*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29088:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x11efef and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6088ec and fs3 == 1 and fe3 == 0xe0 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f11efef; op2val:0xbfe088ec;
op3val:0xf0007fff; valaddr_reg:x3; val_offset:87264*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87264*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29089:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x11efef and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6088ec and fs3 == 1 and fe3 == 0xe0 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f11efef; op2val:0xbfe088ec;
op3val:0xf000ffff; valaddr_reg:x3; val_offset:87267*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87267*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29090:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x11efef and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6088ec and fs3 == 1 and fe3 == 0xe0 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f11efef; op2val:0xbfe088ec;
op3val:0xf001ffff; valaddr_reg:x3; val_offset:87270*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87270*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29091:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x11efef and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6088ec and fs3 == 1 and fe3 == 0xe0 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f11efef; op2val:0xbfe088ec;
op3val:0xf003ffff; valaddr_reg:x3; val_offset:87273*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87273*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29092:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x11efef and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6088ec and fs3 == 1 and fe3 == 0xe0 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f11efef; op2val:0xbfe088ec;
op3val:0xf007ffff; valaddr_reg:x3; val_offset:87276*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87276*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29093:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x11efef and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6088ec and fs3 == 1 and fe3 == 0xe0 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f11efef; op2val:0xbfe088ec;
op3val:0xf00fffff; valaddr_reg:x3; val_offset:87279*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87279*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29094:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x11efef and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6088ec and fs3 == 1 and fe3 == 0xe0 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f11efef; op2val:0xbfe088ec;
op3val:0xf01fffff; valaddr_reg:x3; val_offset:87282*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87282*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29095:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x11efef and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6088ec and fs3 == 1 and fe3 == 0xe0 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f11efef; op2val:0xbfe088ec;
op3val:0xf03fffff; valaddr_reg:x3; val_offset:87285*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87285*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29096:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x11efef and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6088ec and fs3 == 1 and fe3 == 0xe0 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f11efef; op2val:0xbfe088ec;
op3val:0xf0400000; valaddr_reg:x3; val_offset:87288*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87288*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29097:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x11efef and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6088ec and fs3 == 1 and fe3 == 0xe0 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f11efef; op2val:0xbfe088ec;
op3val:0xf0600000; valaddr_reg:x3; val_offset:87291*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87291*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29098:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x11efef and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6088ec and fs3 == 1 and fe3 == 0xe0 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f11efef; op2val:0xbfe088ec;
op3val:0xf0700000; valaddr_reg:x3; val_offset:87294*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87294*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29099:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x11efef and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6088ec and fs3 == 1 and fe3 == 0xe0 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f11efef; op2val:0xbfe088ec;
op3val:0xf0780000; valaddr_reg:x3; val_offset:87297*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87297*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29100:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x11efef and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6088ec and fs3 == 1 and fe3 == 0xe0 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f11efef; op2val:0xbfe088ec;
op3val:0xf07c0000; valaddr_reg:x3; val_offset:87300*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87300*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29101:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x11efef and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6088ec and fs3 == 1 and fe3 == 0xe0 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f11efef; op2val:0xbfe088ec;
op3val:0xf07e0000; valaddr_reg:x3; val_offset:87303*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87303*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29102:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x11efef and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6088ec and fs3 == 1 and fe3 == 0xe0 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f11efef; op2val:0xbfe088ec;
op3val:0xf07f0000; valaddr_reg:x3; val_offset:87306*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87306*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29103:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x11efef and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6088ec and fs3 == 1 and fe3 == 0xe0 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f11efef; op2val:0xbfe088ec;
op3val:0xf07f8000; valaddr_reg:x3; val_offset:87309*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87309*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29104:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x11efef and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6088ec and fs3 == 1 and fe3 == 0xe0 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f11efef; op2val:0xbfe088ec;
op3val:0xf07fc000; valaddr_reg:x3; val_offset:87312*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87312*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29105:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x11efef and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6088ec and fs3 == 1 and fe3 == 0xe0 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f11efef; op2val:0xbfe088ec;
op3val:0xf07fe000; valaddr_reg:x3; val_offset:87315*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87315*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29106:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x11efef and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6088ec and fs3 == 1 and fe3 == 0xe0 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f11efef; op2val:0xbfe088ec;
op3val:0xf07ff000; valaddr_reg:x3; val_offset:87318*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87318*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29107:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x11efef and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6088ec and fs3 == 1 and fe3 == 0xe0 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f11efef; op2val:0xbfe088ec;
op3val:0xf07ff800; valaddr_reg:x3; val_offset:87321*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87321*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29108:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x11efef and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6088ec and fs3 == 1 and fe3 == 0xe0 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f11efef; op2val:0xbfe088ec;
op3val:0xf07ffc00; valaddr_reg:x3; val_offset:87324*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87324*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29109:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x11efef and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6088ec and fs3 == 1 and fe3 == 0xe0 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f11efef; op2val:0xbfe088ec;
op3val:0xf07ffe00; valaddr_reg:x3; val_offset:87327*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87327*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29110:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x11efef and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6088ec and fs3 == 1 and fe3 == 0xe0 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f11efef; op2val:0xbfe088ec;
op3val:0xf07fff00; valaddr_reg:x3; val_offset:87330*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87330*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29111:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x11efef and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6088ec and fs3 == 1 and fe3 == 0xe0 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f11efef; op2val:0xbfe088ec;
op3val:0xf07fff80; valaddr_reg:x3; val_offset:87333*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87333*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29112:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x11efef and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6088ec and fs3 == 1 and fe3 == 0xe0 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f11efef; op2val:0xbfe088ec;
op3val:0xf07fffc0; valaddr_reg:x3; val_offset:87336*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87336*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29113:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x11efef and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6088ec and fs3 == 1 and fe3 == 0xe0 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f11efef; op2val:0xbfe088ec;
op3val:0xf07fffe0; valaddr_reg:x3; val_offset:87339*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87339*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29114:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x11efef and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6088ec and fs3 == 1 and fe3 == 0xe0 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f11efef; op2val:0xbfe088ec;
op3val:0xf07ffff0; valaddr_reg:x3; val_offset:87342*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87342*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29115:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x11efef and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6088ec and fs3 == 1 and fe3 == 0xe0 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f11efef; op2val:0xbfe088ec;
op3val:0xf07ffff8; valaddr_reg:x3; val_offset:87345*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87345*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29116:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x11efef and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6088ec and fs3 == 1 and fe3 == 0xe0 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f11efef; op2val:0xbfe088ec;
op3val:0xf07ffffc; valaddr_reg:x3; val_offset:87348*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87348*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29117:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x11efef and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6088ec and fs3 == 1 and fe3 == 0xe0 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f11efef; op2val:0xbfe088ec;
op3val:0xf07ffffe; valaddr_reg:x3; val_offset:87351*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87351*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29118:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x11efef and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6088ec and fs3 == 1 and fe3 == 0xe0 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f11efef; op2val:0xbfe088ec;
op3val:0xf07fffff; valaddr_reg:x3; val_offset:87354*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87354*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29119:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x11efef and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6088ec and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f11efef; op2val:0xbfe088ec;
op3val:0xff000001; valaddr_reg:x3; val_offset:87357*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87357*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29120:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x11efef and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6088ec and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f11efef; op2val:0xbfe088ec;
op3val:0xff000003; valaddr_reg:x3; val_offset:87360*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87360*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29121:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x11efef and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6088ec and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f11efef; op2val:0xbfe088ec;
op3val:0xff000007; valaddr_reg:x3; val_offset:87363*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87363*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29122:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x11efef and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6088ec and fs3 == 1 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f11efef; op2val:0xbfe088ec;
op3val:0xff199999; valaddr_reg:x3; val_offset:87366*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87366*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29123:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x11efef and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6088ec and fs3 == 1 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f11efef; op2val:0xbfe088ec;
op3val:0xff249249; valaddr_reg:x3; val_offset:87369*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87369*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29124:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x11efef and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6088ec and fs3 == 1 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f11efef; op2val:0xbfe088ec;
op3val:0xff333333; valaddr_reg:x3; val_offset:87372*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87372*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29125:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x11efef and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6088ec and fs3 == 1 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f11efef; op2val:0xbfe088ec;
op3val:0xff36db6d; valaddr_reg:x3; val_offset:87375*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87375*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29126:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x11efef and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6088ec and fs3 == 1 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f11efef; op2val:0xbfe088ec;
op3val:0xff3bbbbb; valaddr_reg:x3; val_offset:87378*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87378*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29127:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x11efef and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6088ec and fs3 == 1 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f11efef; op2val:0xbfe088ec;
op3val:0xff444444; valaddr_reg:x3; val_offset:87381*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87381*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29128:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x11efef and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6088ec and fs3 == 1 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f11efef; op2val:0xbfe088ec;
op3val:0xff4ccccc; valaddr_reg:x3; val_offset:87384*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87384*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29129:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x11efef and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6088ec and fs3 == 1 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f11efef; op2val:0xbfe088ec;
op3val:0xff5b6db6; valaddr_reg:x3; val_offset:87387*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87387*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29130:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x11efef and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6088ec and fs3 == 1 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f11efef; op2val:0xbfe088ec;
op3val:0xff666666; valaddr_reg:x3; val_offset:87390*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87390*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29131:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x11efef and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6088ec and fs3 == 1 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f11efef; op2val:0xbfe088ec;
op3val:0xff6db6db; valaddr_reg:x3; val_offset:87393*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87393*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29132:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x11efef and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6088ec and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f11efef; op2val:0xbfe088ec;
op3val:0xff7ffff8; valaddr_reg:x3; val_offset:87396*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87396*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29133:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x11efef and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6088ec and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f11efef; op2val:0xbfe088ec;
op3val:0xff7ffffc; valaddr_reg:x3; val_offset:87399*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87399*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29134:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x11efef and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6088ec and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f11efef; op2val:0xbfe088ec;
op3val:0xff7ffffe; valaddr_reg:x3; val_offset:87402*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87402*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29135:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x124d93 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x5ff934 and fs3 == 1 and fe3 == 0xe2 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f124d93; op2val:0xbfdff934;
op3val:0xf1000000; valaddr_reg:x3; val_offset:87405*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87405*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29136:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x124d93 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x5ff934 and fs3 == 1 and fe3 == 0xe2 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f124d93; op2val:0xbfdff934;
op3val:0xf1000001; valaddr_reg:x3; val_offset:87408*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87408*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29137:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x124d93 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x5ff934 and fs3 == 1 and fe3 == 0xe2 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f124d93; op2val:0xbfdff934;
op3val:0xf1000003; valaddr_reg:x3; val_offset:87411*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87411*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29138:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x124d93 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x5ff934 and fs3 == 1 and fe3 == 0xe2 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f124d93; op2val:0xbfdff934;
op3val:0xf1000007; valaddr_reg:x3; val_offset:87414*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87414*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29139:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x124d93 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x5ff934 and fs3 == 1 and fe3 == 0xe2 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f124d93; op2val:0xbfdff934;
op3val:0xf100000f; valaddr_reg:x3; val_offset:87417*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87417*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29140:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x124d93 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x5ff934 and fs3 == 1 and fe3 == 0xe2 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f124d93; op2val:0xbfdff934;
op3val:0xf100001f; valaddr_reg:x3; val_offset:87420*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87420*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29141:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x124d93 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x5ff934 and fs3 == 1 and fe3 == 0xe2 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f124d93; op2val:0xbfdff934;
op3val:0xf100003f; valaddr_reg:x3; val_offset:87423*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87423*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29142:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x124d93 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x5ff934 and fs3 == 1 and fe3 == 0xe2 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f124d93; op2val:0xbfdff934;
op3val:0xf100007f; valaddr_reg:x3; val_offset:87426*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87426*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29143:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x124d93 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x5ff934 and fs3 == 1 and fe3 == 0xe2 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f124d93; op2val:0xbfdff934;
op3val:0xf10000ff; valaddr_reg:x3; val_offset:87429*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87429*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29144:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x124d93 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x5ff934 and fs3 == 1 and fe3 == 0xe2 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f124d93; op2val:0xbfdff934;
op3val:0xf10001ff; valaddr_reg:x3; val_offset:87432*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87432*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29145:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x124d93 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x5ff934 and fs3 == 1 and fe3 == 0xe2 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f124d93; op2val:0xbfdff934;
op3val:0xf10003ff; valaddr_reg:x3; val_offset:87435*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87435*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29146:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x124d93 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x5ff934 and fs3 == 1 and fe3 == 0xe2 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f124d93; op2val:0xbfdff934;
op3val:0xf10007ff; valaddr_reg:x3; val_offset:87438*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87438*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29147:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x124d93 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x5ff934 and fs3 == 1 and fe3 == 0xe2 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f124d93; op2val:0xbfdff934;
op3val:0xf1000fff; valaddr_reg:x3; val_offset:87441*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87441*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29148:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x124d93 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x5ff934 and fs3 == 1 and fe3 == 0xe2 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f124d93; op2val:0xbfdff934;
op3val:0xf1001fff; valaddr_reg:x3; val_offset:87444*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87444*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29149:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x124d93 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x5ff934 and fs3 == 1 and fe3 == 0xe2 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f124d93; op2val:0xbfdff934;
op3val:0xf1003fff; valaddr_reg:x3; val_offset:87447*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87447*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29150:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x124d93 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x5ff934 and fs3 == 1 and fe3 == 0xe2 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f124d93; op2val:0xbfdff934;
op3val:0xf1007fff; valaddr_reg:x3; val_offset:87450*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87450*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29151:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x124d93 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x5ff934 and fs3 == 1 and fe3 == 0xe2 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f124d93; op2val:0xbfdff934;
op3val:0xf100ffff; valaddr_reg:x3; val_offset:87453*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87453*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29152:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x124d93 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x5ff934 and fs3 == 1 and fe3 == 0xe2 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f124d93; op2val:0xbfdff934;
op3val:0xf101ffff; valaddr_reg:x3; val_offset:87456*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87456*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29153:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x124d93 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x5ff934 and fs3 == 1 and fe3 == 0xe2 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f124d93; op2val:0xbfdff934;
op3val:0xf103ffff; valaddr_reg:x3; val_offset:87459*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87459*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29154:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x124d93 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x5ff934 and fs3 == 1 and fe3 == 0xe2 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f124d93; op2val:0xbfdff934;
op3val:0xf107ffff; valaddr_reg:x3; val_offset:87462*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87462*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29155:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x124d93 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x5ff934 and fs3 == 1 and fe3 == 0xe2 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f124d93; op2val:0xbfdff934;
op3val:0xf10fffff; valaddr_reg:x3; val_offset:87465*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87465*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29156:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x124d93 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x5ff934 and fs3 == 1 and fe3 == 0xe2 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f124d93; op2val:0xbfdff934;
op3val:0xf11fffff; valaddr_reg:x3; val_offset:87468*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87468*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29157:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x124d93 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x5ff934 and fs3 == 1 and fe3 == 0xe2 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f124d93; op2val:0xbfdff934;
op3val:0xf13fffff; valaddr_reg:x3; val_offset:87471*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87471*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29158:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x124d93 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x5ff934 and fs3 == 1 and fe3 == 0xe2 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f124d93; op2val:0xbfdff934;
op3val:0xf1400000; valaddr_reg:x3; val_offset:87474*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87474*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29159:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x124d93 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x5ff934 and fs3 == 1 and fe3 == 0xe2 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f124d93; op2val:0xbfdff934;
op3val:0xf1600000; valaddr_reg:x3; val_offset:87477*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87477*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29160:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x124d93 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x5ff934 and fs3 == 1 and fe3 == 0xe2 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f124d93; op2val:0xbfdff934;
op3val:0xf1700000; valaddr_reg:x3; val_offset:87480*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87480*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29161:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x124d93 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x5ff934 and fs3 == 1 and fe3 == 0xe2 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f124d93; op2val:0xbfdff934;
op3val:0xf1780000; valaddr_reg:x3; val_offset:87483*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87483*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29162:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x124d93 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x5ff934 and fs3 == 1 and fe3 == 0xe2 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f124d93; op2val:0xbfdff934;
op3val:0xf17c0000; valaddr_reg:x3; val_offset:87486*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87486*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29163:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x124d93 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x5ff934 and fs3 == 1 and fe3 == 0xe2 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f124d93; op2val:0xbfdff934;
op3val:0xf17e0000; valaddr_reg:x3; val_offset:87489*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87489*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29164:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x124d93 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x5ff934 and fs3 == 1 and fe3 == 0xe2 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f124d93; op2val:0xbfdff934;
op3val:0xf17f0000; valaddr_reg:x3; val_offset:87492*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87492*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29165:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x124d93 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x5ff934 and fs3 == 1 and fe3 == 0xe2 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f124d93; op2val:0xbfdff934;
op3val:0xf17f8000; valaddr_reg:x3; val_offset:87495*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87495*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29166:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x124d93 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x5ff934 and fs3 == 1 and fe3 == 0xe2 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f124d93; op2val:0xbfdff934;
op3val:0xf17fc000; valaddr_reg:x3; val_offset:87498*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87498*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29167:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x124d93 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x5ff934 and fs3 == 1 and fe3 == 0xe2 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f124d93; op2val:0xbfdff934;
op3val:0xf17fe000; valaddr_reg:x3; val_offset:87501*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87501*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29168:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x124d93 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x5ff934 and fs3 == 1 and fe3 == 0xe2 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f124d93; op2val:0xbfdff934;
op3val:0xf17ff000; valaddr_reg:x3; val_offset:87504*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87504*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29169:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x124d93 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x5ff934 and fs3 == 1 and fe3 == 0xe2 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f124d93; op2val:0xbfdff934;
op3val:0xf17ff800; valaddr_reg:x3; val_offset:87507*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87507*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29170:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x124d93 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x5ff934 and fs3 == 1 and fe3 == 0xe2 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f124d93; op2val:0xbfdff934;
op3val:0xf17ffc00; valaddr_reg:x3; val_offset:87510*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87510*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29171:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x124d93 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x5ff934 and fs3 == 1 and fe3 == 0xe2 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f124d93; op2val:0xbfdff934;
op3val:0xf17ffe00; valaddr_reg:x3; val_offset:87513*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87513*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29172:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x124d93 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x5ff934 and fs3 == 1 and fe3 == 0xe2 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f124d93; op2val:0xbfdff934;
op3val:0xf17fff00; valaddr_reg:x3; val_offset:87516*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87516*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29173:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x124d93 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x5ff934 and fs3 == 1 and fe3 == 0xe2 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f124d93; op2val:0xbfdff934;
op3val:0xf17fff80; valaddr_reg:x3; val_offset:87519*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87519*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29174:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x124d93 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x5ff934 and fs3 == 1 and fe3 == 0xe2 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f124d93; op2val:0xbfdff934;
op3val:0xf17fffc0; valaddr_reg:x3; val_offset:87522*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87522*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29175:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x124d93 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x5ff934 and fs3 == 1 and fe3 == 0xe2 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f124d93; op2val:0xbfdff934;
op3val:0xf17fffe0; valaddr_reg:x3; val_offset:87525*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87525*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29176:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x124d93 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x5ff934 and fs3 == 1 and fe3 == 0xe2 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f124d93; op2val:0xbfdff934;
op3val:0xf17ffff0; valaddr_reg:x3; val_offset:87528*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87528*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29177:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x124d93 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x5ff934 and fs3 == 1 and fe3 == 0xe2 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f124d93; op2val:0xbfdff934;
op3val:0xf17ffff8; valaddr_reg:x3; val_offset:87531*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87531*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29178:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x124d93 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x5ff934 and fs3 == 1 and fe3 == 0xe2 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f124d93; op2val:0xbfdff934;
op3val:0xf17ffffc; valaddr_reg:x3; val_offset:87534*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87534*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29179:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x124d93 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x5ff934 and fs3 == 1 and fe3 == 0xe2 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f124d93; op2val:0xbfdff934;
op3val:0xf17ffffe; valaddr_reg:x3; val_offset:87537*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87537*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29180:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x124d93 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x5ff934 and fs3 == 1 and fe3 == 0xe2 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f124d93; op2val:0xbfdff934;
op3val:0xf17fffff; valaddr_reg:x3; val_offset:87540*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87540*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29181:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x124d93 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x5ff934 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f124d93; op2val:0xbfdff934;
op3val:0xff000001; valaddr_reg:x3; val_offset:87543*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87543*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29182:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x124d93 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x5ff934 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f124d93; op2val:0xbfdff934;
op3val:0xff000003; valaddr_reg:x3; val_offset:87546*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87546*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29183:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x124d93 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x5ff934 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f124d93; op2val:0xbfdff934;
op3val:0xff000007; valaddr_reg:x3; val_offset:87549*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87549*0 + 3*227*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2131838258,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214526976,32,FLEN)
NAN_BOXED(2131838258,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214559744,32,FLEN)
NAN_BOXED(2131838258,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214576128,32,FLEN)
NAN_BOXED(2131838258,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214584320,32,FLEN)
NAN_BOXED(2131838258,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214588416,32,FLEN)
NAN_BOXED(2131838258,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214590464,32,FLEN)
NAN_BOXED(2131838258,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214591488,32,FLEN)
NAN_BOXED(2131838258,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214592000,32,FLEN)
NAN_BOXED(2131838258,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214592256,32,FLEN)
NAN_BOXED(2131838258,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214592384,32,FLEN)
NAN_BOXED(2131838258,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214592448,32,FLEN)
NAN_BOXED(2131838258,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214592480,32,FLEN)
NAN_BOXED(2131838258,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214592496,32,FLEN)
NAN_BOXED(2131838258,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214592504,32,FLEN)
NAN_BOXED(2131838258,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214592508,32,FLEN)
NAN_BOXED(2131838258,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214592510,32,FLEN)
NAN_BOXED(2131838258,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214592511,32,FLEN)
NAN_BOXED(2131881967,32,FLEN)
NAN_BOXED(3219163372,32,FLEN)
NAN_BOXED(4026531840,32,FLEN)
NAN_BOXED(2131881967,32,FLEN)
NAN_BOXED(3219163372,32,FLEN)
NAN_BOXED(4026531841,32,FLEN)
NAN_BOXED(2131881967,32,FLEN)
NAN_BOXED(3219163372,32,FLEN)
NAN_BOXED(4026531843,32,FLEN)
NAN_BOXED(2131881967,32,FLEN)
NAN_BOXED(3219163372,32,FLEN)
NAN_BOXED(4026531847,32,FLEN)
NAN_BOXED(2131881967,32,FLEN)
NAN_BOXED(3219163372,32,FLEN)
NAN_BOXED(4026531855,32,FLEN)
NAN_BOXED(2131881967,32,FLEN)
NAN_BOXED(3219163372,32,FLEN)
NAN_BOXED(4026531871,32,FLEN)
NAN_BOXED(2131881967,32,FLEN)
NAN_BOXED(3219163372,32,FLEN)
NAN_BOXED(4026531903,32,FLEN)
NAN_BOXED(2131881967,32,FLEN)
NAN_BOXED(3219163372,32,FLEN)
NAN_BOXED(4026531967,32,FLEN)
NAN_BOXED(2131881967,32,FLEN)
NAN_BOXED(3219163372,32,FLEN)
NAN_BOXED(4026532095,32,FLEN)
NAN_BOXED(2131881967,32,FLEN)
NAN_BOXED(3219163372,32,FLEN)
NAN_BOXED(4026532351,32,FLEN)
NAN_BOXED(2131881967,32,FLEN)
NAN_BOXED(3219163372,32,FLEN)
NAN_BOXED(4026532863,32,FLEN)
NAN_BOXED(2131881967,32,FLEN)
NAN_BOXED(3219163372,32,FLEN)
NAN_BOXED(4026533887,32,FLEN)
NAN_BOXED(2131881967,32,FLEN)
NAN_BOXED(3219163372,32,FLEN)
NAN_BOXED(4026535935,32,FLEN)
NAN_BOXED(2131881967,32,FLEN)
NAN_BOXED(3219163372,32,FLEN)
NAN_BOXED(4026540031,32,FLEN)
NAN_BOXED(2131881967,32,FLEN)
NAN_BOXED(3219163372,32,FLEN)
NAN_BOXED(4026548223,32,FLEN)
NAN_BOXED(2131881967,32,FLEN)
NAN_BOXED(3219163372,32,FLEN)
NAN_BOXED(4026564607,32,FLEN)
NAN_BOXED(2131881967,32,FLEN)
NAN_BOXED(3219163372,32,FLEN)
NAN_BOXED(4026597375,32,FLEN)
NAN_BOXED(2131881967,32,FLEN)
NAN_BOXED(3219163372,32,FLEN)
NAN_BOXED(4026662911,32,FLEN)
NAN_BOXED(2131881967,32,FLEN)
NAN_BOXED(3219163372,32,FLEN)
NAN_BOXED(4026793983,32,FLEN)
NAN_BOXED(2131881967,32,FLEN)
NAN_BOXED(3219163372,32,FLEN)
NAN_BOXED(4027056127,32,FLEN)
NAN_BOXED(2131881967,32,FLEN)
NAN_BOXED(3219163372,32,FLEN)
NAN_BOXED(4027580415,32,FLEN)
NAN_BOXED(2131881967,32,FLEN)
NAN_BOXED(3219163372,32,FLEN)
NAN_BOXED(4028628991,32,FLEN)
NAN_BOXED(2131881967,32,FLEN)
NAN_BOXED(3219163372,32,FLEN)
NAN_BOXED(4030726143,32,FLEN)
NAN_BOXED(2131881967,32,FLEN)
NAN_BOXED(3219163372,32,FLEN)
NAN_BOXED(4030726144,32,FLEN)
NAN_BOXED(2131881967,32,FLEN)
NAN_BOXED(3219163372,32,FLEN)
NAN_BOXED(4032823296,32,FLEN)
NAN_BOXED(2131881967,32,FLEN)
NAN_BOXED(3219163372,32,FLEN)
NAN_BOXED(4033871872,32,FLEN)
NAN_BOXED(2131881967,32,FLEN)
NAN_BOXED(3219163372,32,FLEN)
NAN_BOXED(4034396160,32,FLEN)
NAN_BOXED(2131881967,32,FLEN)
NAN_BOXED(3219163372,32,FLEN)
NAN_BOXED(4034658304,32,FLEN)
NAN_BOXED(2131881967,32,FLEN)
NAN_BOXED(3219163372,32,FLEN)
NAN_BOXED(4034789376,32,FLEN)
NAN_BOXED(2131881967,32,FLEN)
NAN_BOXED(3219163372,32,FLEN)
NAN_BOXED(4034854912,32,FLEN)
NAN_BOXED(2131881967,32,FLEN)
NAN_BOXED(3219163372,32,FLEN)
NAN_BOXED(4034887680,32,FLEN)
NAN_BOXED(2131881967,32,FLEN)
NAN_BOXED(3219163372,32,FLEN)
NAN_BOXED(4034904064,32,FLEN)
NAN_BOXED(2131881967,32,FLEN)
NAN_BOXED(3219163372,32,FLEN)
NAN_BOXED(4034912256,32,FLEN)
NAN_BOXED(2131881967,32,FLEN)
NAN_BOXED(3219163372,32,FLEN)
NAN_BOXED(4034916352,32,FLEN)
NAN_BOXED(2131881967,32,FLEN)
NAN_BOXED(3219163372,32,FLEN)
NAN_BOXED(4034918400,32,FLEN)
NAN_BOXED(2131881967,32,FLEN)
NAN_BOXED(3219163372,32,FLEN)
NAN_BOXED(4034919424,32,FLEN)
NAN_BOXED(2131881967,32,FLEN)
NAN_BOXED(3219163372,32,FLEN)
NAN_BOXED(4034919936,32,FLEN)
NAN_BOXED(2131881967,32,FLEN)
NAN_BOXED(3219163372,32,FLEN)
NAN_BOXED(4034920192,32,FLEN)
NAN_BOXED(2131881967,32,FLEN)
NAN_BOXED(3219163372,32,FLEN)
NAN_BOXED(4034920320,32,FLEN)
NAN_BOXED(2131881967,32,FLEN)
NAN_BOXED(3219163372,32,FLEN)
NAN_BOXED(4034920384,32,FLEN)
NAN_BOXED(2131881967,32,FLEN)
NAN_BOXED(3219163372,32,FLEN)
NAN_BOXED(4034920416,32,FLEN)
NAN_BOXED(2131881967,32,FLEN)
NAN_BOXED(3219163372,32,FLEN)
NAN_BOXED(4034920432,32,FLEN)
NAN_BOXED(2131881967,32,FLEN)
NAN_BOXED(3219163372,32,FLEN)
NAN_BOXED(4034920440,32,FLEN)
NAN_BOXED(2131881967,32,FLEN)
NAN_BOXED(3219163372,32,FLEN)
NAN_BOXED(4034920444,32,FLEN)
NAN_BOXED(2131881967,32,FLEN)
NAN_BOXED(3219163372,32,FLEN)
NAN_BOXED(4034920446,32,FLEN)
NAN_BOXED(2131881967,32,FLEN)
NAN_BOXED(3219163372,32,FLEN)
NAN_BOXED(4034920447,32,FLEN)
NAN_BOXED(2131881967,32,FLEN)
NAN_BOXED(3219163372,32,FLEN)
NAN_BOXED(4278190081,32,FLEN)
NAN_BOXED(2131881967,32,FLEN)
NAN_BOXED(3219163372,32,FLEN)
NAN_BOXED(4278190083,32,FLEN)
NAN_BOXED(2131881967,32,FLEN)
NAN_BOXED(3219163372,32,FLEN)
NAN_BOXED(4278190087,32,FLEN)
NAN_BOXED(2131881967,32,FLEN)
NAN_BOXED(3219163372,32,FLEN)
NAN_BOXED(4279867801,32,FLEN)
NAN_BOXED(2131881967,32,FLEN)
NAN_BOXED(3219163372,32,FLEN)
NAN_BOXED(4280586825,32,FLEN)
NAN_BOXED(2131881967,32,FLEN)
NAN_BOXED(3219163372,32,FLEN)
NAN_BOXED(4281545523,32,FLEN)
NAN_BOXED(2131881967,32,FLEN)
NAN_BOXED(3219163372,32,FLEN)
NAN_BOXED(4281785197,32,FLEN)
NAN_BOXED(2131881967,32,FLEN)
NAN_BOXED(3219163372,32,FLEN)
NAN_BOXED(4282104763,32,FLEN)
NAN_BOXED(2131881967,32,FLEN)
NAN_BOXED(3219163372,32,FLEN)
NAN_BOXED(4282664004,32,FLEN)
NAN_BOXED(2131881967,32,FLEN)
NAN_BOXED(3219163372,32,FLEN)
NAN_BOXED(4283223244,32,FLEN)
NAN_BOXED(2131881967,32,FLEN)
NAN_BOXED(3219163372,32,FLEN)
NAN_BOXED(4284181942,32,FLEN)
NAN_BOXED(2131881967,32,FLEN)
NAN_BOXED(3219163372,32,FLEN)
NAN_BOXED(4284900966,32,FLEN)
NAN_BOXED(2131881967,32,FLEN)
NAN_BOXED(3219163372,32,FLEN)
NAN_BOXED(4285380315,32,FLEN)
NAN_BOXED(2131881967,32,FLEN)
NAN_BOXED(3219163372,32,FLEN)
NAN_BOXED(4286578680,32,FLEN)
NAN_BOXED(2131881967,32,FLEN)
NAN_BOXED(3219163372,32,FLEN)
NAN_BOXED(4286578684,32,FLEN)
NAN_BOXED(2131881967,32,FLEN)
NAN_BOXED(3219163372,32,FLEN)
NAN_BOXED(4286578686,32,FLEN)
NAN_BOXED(2131905939,32,FLEN)
NAN_BOXED(3219126580,32,FLEN)
NAN_BOXED(4043309056,32,FLEN)
NAN_BOXED(2131905939,32,FLEN)
NAN_BOXED(3219126580,32,FLEN)
NAN_BOXED(4043309057,32,FLEN)
NAN_BOXED(2131905939,32,FLEN)
NAN_BOXED(3219126580,32,FLEN)
NAN_BOXED(4043309059,32,FLEN)
NAN_BOXED(2131905939,32,FLEN)
NAN_BOXED(3219126580,32,FLEN)
NAN_BOXED(4043309063,32,FLEN)
NAN_BOXED(2131905939,32,FLEN)
NAN_BOXED(3219126580,32,FLEN)
NAN_BOXED(4043309071,32,FLEN)
NAN_BOXED(2131905939,32,FLEN)
NAN_BOXED(3219126580,32,FLEN)
NAN_BOXED(4043309087,32,FLEN)
NAN_BOXED(2131905939,32,FLEN)
NAN_BOXED(3219126580,32,FLEN)
NAN_BOXED(4043309119,32,FLEN)
NAN_BOXED(2131905939,32,FLEN)
NAN_BOXED(3219126580,32,FLEN)
NAN_BOXED(4043309183,32,FLEN)
NAN_BOXED(2131905939,32,FLEN)
NAN_BOXED(3219126580,32,FLEN)
NAN_BOXED(4043309311,32,FLEN)
NAN_BOXED(2131905939,32,FLEN)
NAN_BOXED(3219126580,32,FLEN)
NAN_BOXED(4043309567,32,FLEN)
NAN_BOXED(2131905939,32,FLEN)
NAN_BOXED(3219126580,32,FLEN)
NAN_BOXED(4043310079,32,FLEN)
NAN_BOXED(2131905939,32,FLEN)
NAN_BOXED(3219126580,32,FLEN)
NAN_BOXED(4043311103,32,FLEN)
NAN_BOXED(2131905939,32,FLEN)
NAN_BOXED(3219126580,32,FLEN)
NAN_BOXED(4043313151,32,FLEN)
NAN_BOXED(2131905939,32,FLEN)
NAN_BOXED(3219126580,32,FLEN)
NAN_BOXED(4043317247,32,FLEN)
NAN_BOXED(2131905939,32,FLEN)
NAN_BOXED(3219126580,32,FLEN)
NAN_BOXED(4043325439,32,FLEN)
NAN_BOXED(2131905939,32,FLEN)
NAN_BOXED(3219126580,32,FLEN)
NAN_BOXED(4043341823,32,FLEN)
NAN_BOXED(2131905939,32,FLEN)
NAN_BOXED(3219126580,32,FLEN)
NAN_BOXED(4043374591,32,FLEN)
NAN_BOXED(2131905939,32,FLEN)
NAN_BOXED(3219126580,32,FLEN)
NAN_BOXED(4043440127,32,FLEN)
NAN_BOXED(2131905939,32,FLEN)
NAN_BOXED(3219126580,32,FLEN)
NAN_BOXED(4043571199,32,FLEN)
NAN_BOXED(2131905939,32,FLEN)
NAN_BOXED(3219126580,32,FLEN)
NAN_BOXED(4043833343,32,FLEN)
NAN_BOXED(2131905939,32,FLEN)
NAN_BOXED(3219126580,32,FLEN)
NAN_BOXED(4044357631,32,FLEN)
NAN_BOXED(2131905939,32,FLEN)
NAN_BOXED(3219126580,32,FLEN)
NAN_BOXED(4045406207,32,FLEN)
NAN_BOXED(2131905939,32,FLEN)
NAN_BOXED(3219126580,32,FLEN)
NAN_BOXED(4047503359,32,FLEN)
NAN_BOXED(2131905939,32,FLEN)
NAN_BOXED(3219126580,32,FLEN)
NAN_BOXED(4047503360,32,FLEN)
NAN_BOXED(2131905939,32,FLEN)
NAN_BOXED(3219126580,32,FLEN)
NAN_BOXED(4049600512,32,FLEN)
NAN_BOXED(2131905939,32,FLEN)
NAN_BOXED(3219126580,32,FLEN)
NAN_BOXED(4050649088,32,FLEN)
NAN_BOXED(2131905939,32,FLEN)
NAN_BOXED(3219126580,32,FLEN)
NAN_BOXED(4051173376,32,FLEN)
NAN_BOXED(2131905939,32,FLEN)
NAN_BOXED(3219126580,32,FLEN)
NAN_BOXED(4051435520,32,FLEN)
NAN_BOXED(2131905939,32,FLEN)
NAN_BOXED(3219126580,32,FLEN)
NAN_BOXED(4051566592,32,FLEN)
NAN_BOXED(2131905939,32,FLEN)
NAN_BOXED(3219126580,32,FLEN)
NAN_BOXED(4051632128,32,FLEN)
NAN_BOXED(2131905939,32,FLEN)
NAN_BOXED(3219126580,32,FLEN)
NAN_BOXED(4051664896,32,FLEN)
NAN_BOXED(2131905939,32,FLEN)
NAN_BOXED(3219126580,32,FLEN)
NAN_BOXED(4051681280,32,FLEN)
NAN_BOXED(2131905939,32,FLEN)
NAN_BOXED(3219126580,32,FLEN)
NAN_BOXED(4051689472,32,FLEN)
NAN_BOXED(2131905939,32,FLEN)
NAN_BOXED(3219126580,32,FLEN)
NAN_BOXED(4051693568,32,FLEN)
NAN_BOXED(2131905939,32,FLEN)
NAN_BOXED(3219126580,32,FLEN)
NAN_BOXED(4051695616,32,FLEN)
NAN_BOXED(2131905939,32,FLEN)
NAN_BOXED(3219126580,32,FLEN)
NAN_BOXED(4051696640,32,FLEN)
NAN_BOXED(2131905939,32,FLEN)
NAN_BOXED(3219126580,32,FLEN)
NAN_BOXED(4051697152,32,FLEN)
NAN_BOXED(2131905939,32,FLEN)
NAN_BOXED(3219126580,32,FLEN)
NAN_BOXED(4051697408,32,FLEN)
NAN_BOXED(2131905939,32,FLEN)
NAN_BOXED(3219126580,32,FLEN)
NAN_BOXED(4051697536,32,FLEN)
NAN_BOXED(2131905939,32,FLEN)
NAN_BOXED(3219126580,32,FLEN)
NAN_BOXED(4051697600,32,FLEN)
NAN_BOXED(2131905939,32,FLEN)
NAN_BOXED(3219126580,32,FLEN)
NAN_BOXED(4051697632,32,FLEN)
NAN_BOXED(2131905939,32,FLEN)
NAN_BOXED(3219126580,32,FLEN)
NAN_BOXED(4051697648,32,FLEN)
NAN_BOXED(2131905939,32,FLEN)
NAN_BOXED(3219126580,32,FLEN)
NAN_BOXED(4051697656,32,FLEN)
NAN_BOXED(2131905939,32,FLEN)
NAN_BOXED(3219126580,32,FLEN)
NAN_BOXED(4051697660,32,FLEN)
NAN_BOXED(2131905939,32,FLEN)
NAN_BOXED(3219126580,32,FLEN)
NAN_BOXED(4051697662,32,FLEN)
NAN_BOXED(2131905939,32,FLEN)
NAN_BOXED(3219126580,32,FLEN)
NAN_BOXED(4051697663,32,FLEN)
NAN_BOXED(2131905939,32,FLEN)
NAN_BOXED(3219126580,32,FLEN)
NAN_BOXED(4278190081,32,FLEN)
NAN_BOXED(2131905939,32,FLEN)
NAN_BOXED(3219126580,32,FLEN)
NAN_BOXED(4278190083,32,FLEN)
NAN_BOXED(2131905939,32,FLEN)
NAN_BOXED(3219126580,32,FLEN)
NAN_BOXED(4278190087,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
