
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:17:59 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_30080:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1759f7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1759f7; op2val:0x80000000;
op3val:0x807ffffe; valaddr_reg:x3; val_offset:90240*0 + 3*235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90240*0 + 3*235*FLEN/8, x4, x1, x2)

inst_30081:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1759f7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1759f7; op2val:0x80000000;
op3val:0x81800000; valaddr_reg:x3; val_offset:90243*0 + 3*235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90243*0 + 3*235*FLEN/8, x4, x1, x2)

inst_30082:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1759f7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1759f7; op2val:0x80000000;
op3val:0x81800001; valaddr_reg:x3; val_offset:90246*0 + 3*235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90246*0 + 3*235*FLEN/8, x4, x1, x2)

inst_30083:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1759f7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1759f7; op2val:0x80000000;
op3val:0x81800003; valaddr_reg:x3; val_offset:90249*0 + 3*235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90249*0 + 3*235*FLEN/8, x4, x1, x2)

inst_30084:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1759f7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1759f7; op2val:0x80000000;
op3val:0x81800007; valaddr_reg:x3; val_offset:90252*0 + 3*235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90252*0 + 3*235*FLEN/8, x4, x1, x2)

inst_30085:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1759f7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1759f7; op2val:0x80000000;
op3val:0x8180000f; valaddr_reg:x3; val_offset:90255*0 + 3*235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90255*0 + 3*235*FLEN/8, x4, x1, x2)

inst_30086:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1759f7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1759f7; op2val:0x80000000;
op3val:0x8180001f; valaddr_reg:x3; val_offset:90258*0 + 3*235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90258*0 + 3*235*FLEN/8, x4, x1, x2)

inst_30087:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1759f7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1759f7; op2val:0x80000000;
op3val:0x8180003f; valaddr_reg:x3; val_offset:90261*0 + 3*235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90261*0 + 3*235*FLEN/8, x4, x1, x2)

inst_30088:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1759f7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1759f7; op2val:0x80000000;
op3val:0x8180007f; valaddr_reg:x3; val_offset:90264*0 + 3*235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90264*0 + 3*235*FLEN/8, x4, x1, x2)

inst_30089:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1759f7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1759f7; op2val:0x80000000;
op3val:0x818000ff; valaddr_reg:x3; val_offset:90267*0 + 3*235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90267*0 + 3*235*FLEN/8, x4, x1, x2)

inst_30090:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1759f7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1759f7; op2val:0x80000000;
op3val:0x818001ff; valaddr_reg:x3; val_offset:90270*0 + 3*235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90270*0 + 3*235*FLEN/8, x4, x1, x2)

inst_30091:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1759f7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1759f7; op2val:0x80000000;
op3val:0x818003ff; valaddr_reg:x3; val_offset:90273*0 + 3*235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90273*0 + 3*235*FLEN/8, x4, x1, x2)

inst_30092:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1759f7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1759f7; op2val:0x80000000;
op3val:0x818007ff; valaddr_reg:x3; val_offset:90276*0 + 3*235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90276*0 + 3*235*FLEN/8, x4, x1, x2)

inst_30093:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1759f7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1759f7; op2val:0x80000000;
op3val:0x81800fff; valaddr_reg:x3; val_offset:90279*0 + 3*235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90279*0 + 3*235*FLEN/8, x4, x1, x2)

inst_30094:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1759f7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1759f7; op2val:0x80000000;
op3val:0x81801fff; valaddr_reg:x3; val_offset:90282*0 + 3*235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90282*0 + 3*235*FLEN/8, x4, x1, x2)

inst_30095:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1759f7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1759f7; op2val:0x80000000;
op3val:0x81803fff; valaddr_reg:x3; val_offset:90285*0 + 3*235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90285*0 + 3*235*FLEN/8, x4, x1, x2)

inst_30096:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1759f7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1759f7; op2val:0x80000000;
op3val:0x81807fff; valaddr_reg:x3; val_offset:90288*0 + 3*235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90288*0 + 3*235*FLEN/8, x4, x1, x2)

inst_30097:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1759f7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1759f7; op2val:0x80000000;
op3val:0x8180ffff; valaddr_reg:x3; val_offset:90291*0 + 3*235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90291*0 + 3*235*FLEN/8, x4, x1, x2)

inst_30098:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1759f7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1759f7; op2val:0x80000000;
op3val:0x8181ffff; valaddr_reg:x3; val_offset:90294*0 + 3*235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90294*0 + 3*235*FLEN/8, x4, x1, x2)

inst_30099:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1759f7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1759f7; op2val:0x80000000;
op3val:0x8183ffff; valaddr_reg:x3; val_offset:90297*0 + 3*235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90297*0 + 3*235*FLEN/8, x4, x1, x2)

inst_30100:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1759f7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1759f7; op2val:0x80000000;
op3val:0x8187ffff; valaddr_reg:x3; val_offset:90300*0 + 3*235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90300*0 + 3*235*FLEN/8, x4, x1, x2)

inst_30101:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1759f7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1759f7; op2val:0x80000000;
op3val:0x818fffff; valaddr_reg:x3; val_offset:90303*0 + 3*235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90303*0 + 3*235*FLEN/8, x4, x1, x2)

inst_30102:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1759f7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1759f7; op2val:0x80000000;
op3val:0x819fffff; valaddr_reg:x3; val_offset:90306*0 + 3*235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90306*0 + 3*235*FLEN/8, x4, x1, x2)

inst_30103:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1759f7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1759f7; op2val:0x80000000;
op3val:0x81bfffff; valaddr_reg:x3; val_offset:90309*0 + 3*235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90309*0 + 3*235*FLEN/8, x4, x1, x2)

inst_30104:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1759f7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1759f7; op2val:0x80000000;
op3val:0x81c00000; valaddr_reg:x3; val_offset:90312*0 + 3*235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90312*0 + 3*235*FLEN/8, x4, x1, x2)

inst_30105:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1759f7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1759f7; op2val:0x80000000;
op3val:0x81e00000; valaddr_reg:x3; val_offset:90315*0 + 3*235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90315*0 + 3*235*FLEN/8, x4, x1, x2)

inst_30106:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1759f7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1759f7; op2val:0x80000000;
op3val:0x81f00000; valaddr_reg:x3; val_offset:90318*0 + 3*235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90318*0 + 3*235*FLEN/8, x4, x1, x2)

inst_30107:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1759f7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1759f7; op2val:0x80000000;
op3val:0x81f80000; valaddr_reg:x3; val_offset:90321*0 + 3*235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90321*0 + 3*235*FLEN/8, x4, x1, x2)

inst_30108:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1759f7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1759f7; op2val:0x80000000;
op3val:0x81fc0000; valaddr_reg:x3; val_offset:90324*0 + 3*235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90324*0 + 3*235*FLEN/8, x4, x1, x2)

inst_30109:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1759f7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1759f7; op2val:0x80000000;
op3val:0x81fe0000; valaddr_reg:x3; val_offset:90327*0 + 3*235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90327*0 + 3*235*FLEN/8, x4, x1, x2)

inst_30110:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1759f7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1759f7; op2val:0x80000000;
op3val:0x81ff0000; valaddr_reg:x3; val_offset:90330*0 + 3*235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90330*0 + 3*235*FLEN/8, x4, x1, x2)

inst_30111:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1759f7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1759f7; op2val:0x80000000;
op3val:0x81ff8000; valaddr_reg:x3; val_offset:90333*0 + 3*235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90333*0 + 3*235*FLEN/8, x4, x1, x2)

inst_30112:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1759f7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1759f7; op2val:0x80000000;
op3val:0x81ffc000; valaddr_reg:x3; val_offset:90336*0 + 3*235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90336*0 + 3*235*FLEN/8, x4, x1, x2)

inst_30113:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1759f7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1759f7; op2val:0x80000000;
op3val:0x81ffe000; valaddr_reg:x3; val_offset:90339*0 + 3*235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90339*0 + 3*235*FLEN/8, x4, x1, x2)

inst_30114:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1759f7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1759f7; op2val:0x80000000;
op3val:0x81fff000; valaddr_reg:x3; val_offset:90342*0 + 3*235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90342*0 + 3*235*FLEN/8, x4, x1, x2)

inst_30115:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1759f7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1759f7; op2val:0x80000000;
op3val:0x81fff800; valaddr_reg:x3; val_offset:90345*0 + 3*235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90345*0 + 3*235*FLEN/8, x4, x1, x2)

inst_30116:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1759f7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1759f7; op2val:0x80000000;
op3val:0x81fffc00; valaddr_reg:x3; val_offset:90348*0 + 3*235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90348*0 + 3*235*FLEN/8, x4, x1, x2)

inst_30117:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1759f7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1759f7; op2val:0x80000000;
op3val:0x81fffe00; valaddr_reg:x3; val_offset:90351*0 + 3*235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90351*0 + 3*235*FLEN/8, x4, x1, x2)

inst_30118:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1759f7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1759f7; op2val:0x80000000;
op3val:0x81ffff00; valaddr_reg:x3; val_offset:90354*0 + 3*235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90354*0 + 3*235*FLEN/8, x4, x1, x2)

inst_30119:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1759f7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1759f7; op2val:0x80000000;
op3val:0x81ffff80; valaddr_reg:x3; val_offset:90357*0 + 3*235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90357*0 + 3*235*FLEN/8, x4, x1, x2)

inst_30120:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1759f7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1759f7; op2val:0x80000000;
op3val:0x81ffffc0; valaddr_reg:x3; val_offset:90360*0 + 3*235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90360*0 + 3*235*FLEN/8, x4, x1, x2)

inst_30121:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1759f7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1759f7; op2val:0x80000000;
op3val:0x81ffffe0; valaddr_reg:x3; val_offset:90363*0 + 3*235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90363*0 + 3*235*FLEN/8, x4, x1, x2)

inst_30122:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1759f7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1759f7; op2val:0x80000000;
op3val:0x81fffff0; valaddr_reg:x3; val_offset:90366*0 + 3*235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90366*0 + 3*235*FLEN/8, x4, x1, x2)

inst_30123:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1759f7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1759f7; op2val:0x80000000;
op3val:0x81fffff8; valaddr_reg:x3; val_offset:90369*0 + 3*235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90369*0 + 3*235*FLEN/8, x4, x1, x2)

inst_30124:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1759f7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1759f7; op2val:0x80000000;
op3val:0x81fffffc; valaddr_reg:x3; val_offset:90372*0 + 3*235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90372*0 + 3*235*FLEN/8, x4, x1, x2)

inst_30125:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1759f7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1759f7; op2val:0x80000000;
op3val:0x81fffffe; valaddr_reg:x3; val_offset:90375*0 + 3*235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90375*0 + 3*235*FLEN/8, x4, x1, x2)

inst_30126:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1759f7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1759f7; op2val:0x80000000;
op3val:0x81ffffff; valaddr_reg:x3; val_offset:90378*0 + 3*235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90378*0 + 3*235*FLEN/8, x4, x1, x2)

inst_30127:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x17679e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f17679e; op2val:0x0;
op3val:0x800001; valaddr_reg:x3; val_offset:90381*0 + 3*235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90381*0 + 3*235*FLEN/8, x4, x1, x2)

inst_30128:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x17679e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f17679e; op2val:0x0;
op3val:0x800003; valaddr_reg:x3; val_offset:90384*0 + 3*235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90384*0 + 3*235*FLEN/8, x4, x1, x2)

inst_30129:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x17679e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f17679e; op2val:0x0;
op3val:0x800007; valaddr_reg:x3; val_offset:90387*0 + 3*235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90387*0 + 3*235*FLEN/8, x4, x1, x2)

inst_30130:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x17679e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f17679e; op2val:0x0;
op3val:0x999999; valaddr_reg:x3; val_offset:90390*0 + 3*235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90390*0 + 3*235*FLEN/8, x4, x1, x2)

inst_30131:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x17679e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f17679e; op2val:0x0;
op3val:0xa49249; valaddr_reg:x3; val_offset:90393*0 + 3*235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90393*0 + 3*235*FLEN/8, x4, x1, x2)

inst_30132:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x17679e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f17679e; op2val:0x0;
op3val:0xb33333; valaddr_reg:x3; val_offset:90396*0 + 3*235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90396*0 + 3*235*FLEN/8, x4, x1, x2)

inst_30133:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x17679e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f17679e; op2val:0x0;
op3val:0xb6db6d; valaddr_reg:x3; val_offset:90399*0 + 3*235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90399*0 + 3*235*FLEN/8, x4, x1, x2)

inst_30134:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x17679e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f17679e; op2val:0x0;
op3val:0xbbbbbb; valaddr_reg:x3; val_offset:90402*0 + 3*235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90402*0 + 3*235*FLEN/8, x4, x1, x2)

inst_30135:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x17679e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f17679e; op2val:0x0;
op3val:0xc44444; valaddr_reg:x3; val_offset:90405*0 + 3*235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90405*0 + 3*235*FLEN/8, x4, x1, x2)

inst_30136:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x17679e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f17679e; op2val:0x0;
op3val:0xcccccc; valaddr_reg:x3; val_offset:90408*0 + 3*235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90408*0 + 3*235*FLEN/8, x4, x1, x2)

inst_30137:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x17679e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f17679e; op2val:0x0;
op3val:0xdb6db6; valaddr_reg:x3; val_offset:90411*0 + 3*235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90411*0 + 3*235*FLEN/8, x4, x1, x2)

inst_30138:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x17679e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f17679e; op2val:0x0;
op3val:0xe66666; valaddr_reg:x3; val_offset:90414*0 + 3*235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90414*0 + 3*235*FLEN/8, x4, x1, x2)

inst_30139:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x17679e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f17679e; op2val:0x0;
op3val:0xedb6db; valaddr_reg:x3; val_offset:90417*0 + 3*235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90417*0 + 3*235*FLEN/8, x4, x1, x2)

inst_30140:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x17679e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f17679e; op2val:0x0;
op3val:0xfffff8; valaddr_reg:x3; val_offset:90420*0 + 3*235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90420*0 + 3*235*FLEN/8, x4, x1, x2)

inst_30141:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x17679e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f17679e; op2val:0x0;
op3val:0xfffffc; valaddr_reg:x3; val_offset:90423*0 + 3*235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90423*0 + 3*235*FLEN/8, x4, x1, x2)

inst_30142:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x17679e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f17679e; op2val:0x0;
op3val:0xfffffe; valaddr_reg:x3; val_offset:90426*0 + 3*235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90426*0 + 3*235*FLEN/8, x4, x1, x2)

inst_30143:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x17679e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f17679e; op2val:0x0;
op3val:0xf800000; valaddr_reg:x3; val_offset:90429*0 + 3*235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90429*0 + 3*235*FLEN/8, x4, x1, x2)

inst_30144:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x17679e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f17679e; op2val:0x0;
op3val:0xf800001; valaddr_reg:x3; val_offset:90432*0 + 3*235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90432*0 + 3*235*FLEN/8, x4, x1, x2)

inst_30145:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x17679e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f17679e; op2val:0x0;
op3val:0xf800003; valaddr_reg:x3; val_offset:90435*0 + 3*235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90435*0 + 3*235*FLEN/8, x4, x1, x2)

inst_30146:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x17679e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f17679e; op2val:0x0;
op3val:0xf800007; valaddr_reg:x3; val_offset:90438*0 + 3*235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90438*0 + 3*235*FLEN/8, x4, x1, x2)

inst_30147:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x17679e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f17679e; op2val:0x0;
op3val:0xf80000f; valaddr_reg:x3; val_offset:90441*0 + 3*235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90441*0 + 3*235*FLEN/8, x4, x1, x2)

inst_30148:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x17679e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f17679e; op2val:0x0;
op3val:0xf80001f; valaddr_reg:x3; val_offset:90444*0 + 3*235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90444*0 + 3*235*FLEN/8, x4, x1, x2)

inst_30149:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x17679e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f17679e; op2val:0x0;
op3val:0xf80003f; valaddr_reg:x3; val_offset:90447*0 + 3*235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90447*0 + 3*235*FLEN/8, x4, x1, x2)

inst_30150:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x17679e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f17679e; op2val:0x0;
op3val:0xf80007f; valaddr_reg:x3; val_offset:90450*0 + 3*235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90450*0 + 3*235*FLEN/8, x4, x1, x2)

inst_30151:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x17679e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f17679e; op2val:0x0;
op3val:0xf8000ff; valaddr_reg:x3; val_offset:90453*0 + 3*235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90453*0 + 3*235*FLEN/8, x4, x1, x2)

inst_30152:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x17679e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f17679e; op2val:0x0;
op3val:0xf8001ff; valaddr_reg:x3; val_offset:90456*0 + 3*235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90456*0 + 3*235*FLEN/8, x4, x1, x2)

inst_30153:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x17679e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f17679e; op2val:0x0;
op3val:0xf8003ff; valaddr_reg:x3; val_offset:90459*0 + 3*235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90459*0 + 3*235*FLEN/8, x4, x1, x2)

inst_30154:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x17679e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f17679e; op2val:0x0;
op3val:0xf8007ff; valaddr_reg:x3; val_offset:90462*0 + 3*235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90462*0 + 3*235*FLEN/8, x4, x1, x2)

inst_30155:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x17679e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f17679e; op2val:0x0;
op3val:0xf800fff; valaddr_reg:x3; val_offset:90465*0 + 3*235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90465*0 + 3*235*FLEN/8, x4, x1, x2)

inst_30156:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x17679e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f17679e; op2val:0x0;
op3val:0xf801fff; valaddr_reg:x3; val_offset:90468*0 + 3*235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90468*0 + 3*235*FLEN/8, x4, x1, x2)

inst_30157:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x17679e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f17679e; op2val:0x0;
op3val:0xf803fff; valaddr_reg:x3; val_offset:90471*0 + 3*235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90471*0 + 3*235*FLEN/8, x4, x1, x2)

inst_30158:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x17679e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f17679e; op2val:0x0;
op3val:0xf807fff; valaddr_reg:x3; val_offset:90474*0 + 3*235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90474*0 + 3*235*FLEN/8, x4, x1, x2)

inst_30159:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x17679e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f17679e; op2val:0x0;
op3val:0xf80ffff; valaddr_reg:x3; val_offset:90477*0 + 3*235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90477*0 + 3*235*FLEN/8, x4, x1, x2)

inst_30160:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x17679e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f17679e; op2val:0x0;
op3val:0xf81ffff; valaddr_reg:x3; val_offset:90480*0 + 3*235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90480*0 + 3*235*FLEN/8, x4, x1, x2)

inst_30161:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x17679e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f17679e; op2val:0x0;
op3val:0xf83ffff; valaddr_reg:x3; val_offset:90483*0 + 3*235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90483*0 + 3*235*FLEN/8, x4, x1, x2)

inst_30162:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x17679e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f17679e; op2val:0x0;
op3val:0xf87ffff; valaddr_reg:x3; val_offset:90486*0 + 3*235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90486*0 + 3*235*FLEN/8, x4, x1, x2)

inst_30163:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x17679e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f17679e; op2val:0x0;
op3val:0xf8fffff; valaddr_reg:x3; val_offset:90489*0 + 3*235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90489*0 + 3*235*FLEN/8, x4, x1, x2)

inst_30164:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x17679e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f17679e; op2val:0x0;
op3val:0xf9fffff; valaddr_reg:x3; val_offset:90492*0 + 3*235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90492*0 + 3*235*FLEN/8, x4, x1, x2)

inst_30165:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x17679e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f17679e; op2val:0x0;
op3val:0xfbfffff; valaddr_reg:x3; val_offset:90495*0 + 3*235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90495*0 + 3*235*FLEN/8, x4, x1, x2)

inst_30166:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x17679e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f17679e; op2val:0x0;
op3val:0xfc00000; valaddr_reg:x3; val_offset:90498*0 + 3*235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90498*0 + 3*235*FLEN/8, x4, x1, x2)

inst_30167:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x17679e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f17679e; op2val:0x0;
op3val:0xfe00000; valaddr_reg:x3; val_offset:90501*0 + 3*235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90501*0 + 3*235*FLEN/8, x4, x1, x2)

inst_30168:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x17679e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f17679e; op2val:0x0;
op3val:0xff00000; valaddr_reg:x3; val_offset:90504*0 + 3*235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90504*0 + 3*235*FLEN/8, x4, x1, x2)

inst_30169:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x17679e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f17679e; op2val:0x0;
op3val:0xff80000; valaddr_reg:x3; val_offset:90507*0 + 3*235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90507*0 + 3*235*FLEN/8, x4, x1, x2)

inst_30170:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x17679e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f17679e; op2val:0x0;
op3val:0xffc0000; valaddr_reg:x3; val_offset:90510*0 + 3*235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90510*0 + 3*235*FLEN/8, x4, x1, x2)

inst_30171:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x17679e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f17679e; op2val:0x0;
op3val:0xffe0000; valaddr_reg:x3; val_offset:90513*0 + 3*235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90513*0 + 3*235*FLEN/8, x4, x1, x2)

inst_30172:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x17679e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f17679e; op2val:0x0;
op3val:0xfff0000; valaddr_reg:x3; val_offset:90516*0 + 3*235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90516*0 + 3*235*FLEN/8, x4, x1, x2)

inst_30173:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x17679e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f17679e; op2val:0x0;
op3val:0xfff8000; valaddr_reg:x3; val_offset:90519*0 + 3*235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90519*0 + 3*235*FLEN/8, x4, x1, x2)

inst_30174:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x17679e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f17679e; op2val:0x0;
op3val:0xfffc000; valaddr_reg:x3; val_offset:90522*0 + 3*235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90522*0 + 3*235*FLEN/8, x4, x1, x2)

inst_30175:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x17679e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f17679e; op2val:0x0;
op3val:0xfffe000; valaddr_reg:x3; val_offset:90525*0 + 3*235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90525*0 + 3*235*FLEN/8, x4, x1, x2)

inst_30176:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x17679e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f17679e; op2val:0x0;
op3val:0xffff000; valaddr_reg:x3; val_offset:90528*0 + 3*235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90528*0 + 3*235*FLEN/8, x4, x1, x2)

inst_30177:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x17679e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f17679e; op2val:0x0;
op3val:0xffff800; valaddr_reg:x3; val_offset:90531*0 + 3*235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90531*0 + 3*235*FLEN/8, x4, x1, x2)

inst_30178:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x17679e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f17679e; op2val:0x0;
op3val:0xffffc00; valaddr_reg:x3; val_offset:90534*0 + 3*235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90534*0 + 3*235*FLEN/8, x4, x1, x2)

inst_30179:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x17679e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f17679e; op2val:0x0;
op3val:0xffffe00; valaddr_reg:x3; val_offset:90537*0 + 3*235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90537*0 + 3*235*FLEN/8, x4, x1, x2)

inst_30180:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x17679e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f17679e; op2val:0x0;
op3val:0xfffff00; valaddr_reg:x3; val_offset:90540*0 + 3*235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90540*0 + 3*235*FLEN/8, x4, x1, x2)

inst_30181:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x17679e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f17679e; op2val:0x0;
op3val:0xfffff80; valaddr_reg:x3; val_offset:90543*0 + 3*235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90543*0 + 3*235*FLEN/8, x4, x1, x2)

inst_30182:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x17679e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f17679e; op2val:0x0;
op3val:0xfffffc0; valaddr_reg:x3; val_offset:90546*0 + 3*235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90546*0 + 3*235*FLEN/8, x4, x1, x2)

inst_30183:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x17679e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f17679e; op2val:0x0;
op3val:0xfffffe0; valaddr_reg:x3; val_offset:90549*0 + 3*235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90549*0 + 3*235*FLEN/8, x4, x1, x2)

inst_30184:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x17679e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f17679e; op2val:0x0;
op3val:0xffffff0; valaddr_reg:x3; val_offset:90552*0 + 3*235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90552*0 + 3*235*FLEN/8, x4, x1, x2)

inst_30185:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x17679e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f17679e; op2val:0x0;
op3val:0xffffff8; valaddr_reg:x3; val_offset:90555*0 + 3*235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90555*0 + 3*235*FLEN/8, x4, x1, x2)

inst_30186:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x17679e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f17679e; op2val:0x0;
op3val:0xffffffc; valaddr_reg:x3; val_offset:90558*0 + 3*235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90558*0 + 3*235*FLEN/8, x4, x1, x2)

inst_30187:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x17679e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f17679e; op2val:0x0;
op3val:0xffffffe; valaddr_reg:x3; val_offset:90561*0 + 3*235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90561*0 + 3*235*FLEN/8, x4, x1, x2)

inst_30188:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x17679e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f17679e; op2val:0x0;
op3val:0xfffffff; valaddr_reg:x3; val_offset:90564*0 + 3*235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90564*0 + 3*235*FLEN/8, x4, x1, x2)

inst_30189:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x176ba3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3619db and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f176ba3; op2val:0x3619db;
op3val:0x3f800001; valaddr_reg:x3; val_offset:90567*0 + 3*235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90567*0 + 3*235*FLEN/8, x4, x1, x2)

inst_30190:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x176ba3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3619db and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f176ba3; op2val:0x3619db;
op3val:0x3f800003; valaddr_reg:x3; val_offset:90570*0 + 3*235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90570*0 + 3*235*FLEN/8, x4, x1, x2)

inst_30191:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x176ba3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3619db and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f176ba3; op2val:0x3619db;
op3val:0x3f800007; valaddr_reg:x3; val_offset:90573*0 + 3*235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90573*0 + 3*235*FLEN/8, x4, x1, x2)

inst_30192:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x176ba3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3619db and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f176ba3; op2val:0x3619db;
op3val:0x3f999999; valaddr_reg:x3; val_offset:90576*0 + 3*235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90576*0 + 3*235*FLEN/8, x4, x1, x2)

inst_30193:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x176ba3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3619db and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f176ba3; op2val:0x3619db;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:90579*0 + 3*235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90579*0 + 3*235*FLEN/8, x4, x1, x2)

inst_30194:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x176ba3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3619db and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f176ba3; op2val:0x3619db;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:90582*0 + 3*235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90582*0 + 3*235*FLEN/8, x4, x1, x2)

inst_30195:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x176ba3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3619db and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f176ba3; op2val:0x3619db;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:90585*0 + 3*235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90585*0 + 3*235*FLEN/8, x4, x1, x2)

inst_30196:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x176ba3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3619db and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f176ba3; op2val:0x3619db;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:90588*0 + 3*235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90588*0 + 3*235*FLEN/8, x4, x1, x2)

inst_30197:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x176ba3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3619db and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f176ba3; op2val:0x3619db;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:90591*0 + 3*235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90591*0 + 3*235*FLEN/8, x4, x1, x2)

inst_30198:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x176ba3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3619db and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f176ba3; op2val:0x3619db;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:90594*0 + 3*235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90594*0 + 3*235*FLEN/8, x4, x1, x2)

inst_30199:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x176ba3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3619db and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f176ba3; op2val:0x3619db;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:90597*0 + 3*235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90597*0 + 3*235*FLEN/8, x4, x1, x2)

inst_30200:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x176ba3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3619db and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f176ba3; op2val:0x3619db;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:90600*0 + 3*235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90600*0 + 3*235*FLEN/8, x4, x1, x2)

inst_30201:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x176ba3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3619db and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f176ba3; op2val:0x3619db;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:90603*0 + 3*235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90603*0 + 3*235*FLEN/8, x4, x1, x2)

inst_30202:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x176ba3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3619db and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f176ba3; op2val:0x3619db;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:90606*0 + 3*235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90606*0 + 3*235*FLEN/8, x4, x1, x2)

inst_30203:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x176ba3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3619db and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f176ba3; op2val:0x3619db;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:90609*0 + 3*235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90609*0 + 3*235*FLEN/8, x4, x1, x2)

inst_30204:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x176ba3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3619db and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f176ba3; op2val:0x3619db;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:90612*0 + 3*235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90612*0 + 3*235*FLEN/8, x4, x1, x2)

inst_30205:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x176ba3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3619db and fs3 == 0 and fe3 == 0x8c and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f176ba3; op2val:0x3619db;
op3val:0x46000000; valaddr_reg:x3; val_offset:90615*0 + 3*235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90615*0 + 3*235*FLEN/8, x4, x1, x2)

inst_30206:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x176ba3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3619db and fs3 == 0 and fe3 == 0x8c and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f176ba3; op2val:0x3619db;
op3val:0x46000001; valaddr_reg:x3; val_offset:90618*0 + 3*235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90618*0 + 3*235*FLEN/8, x4, x1, x2)

inst_30207:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x176ba3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3619db and fs3 == 0 and fe3 == 0x8c and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f176ba3; op2val:0x3619db;
op3val:0x46000003; valaddr_reg:x3; val_offset:90621*0 + 3*235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90621*0 + 3*235*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2132236791,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2132236791,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172649472,32,FLEN)
NAN_BOXED(2132236791,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172649473,32,FLEN)
NAN_BOXED(2132236791,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172649475,32,FLEN)
NAN_BOXED(2132236791,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172649479,32,FLEN)
NAN_BOXED(2132236791,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172649487,32,FLEN)
NAN_BOXED(2132236791,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172649503,32,FLEN)
NAN_BOXED(2132236791,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172649535,32,FLEN)
NAN_BOXED(2132236791,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172649599,32,FLEN)
NAN_BOXED(2132236791,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172649727,32,FLEN)
NAN_BOXED(2132236791,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172649983,32,FLEN)
NAN_BOXED(2132236791,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172650495,32,FLEN)
NAN_BOXED(2132236791,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172651519,32,FLEN)
NAN_BOXED(2132236791,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172653567,32,FLEN)
NAN_BOXED(2132236791,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172657663,32,FLEN)
NAN_BOXED(2132236791,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172665855,32,FLEN)
NAN_BOXED(2132236791,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172682239,32,FLEN)
NAN_BOXED(2132236791,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172715007,32,FLEN)
NAN_BOXED(2132236791,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172780543,32,FLEN)
NAN_BOXED(2132236791,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172911615,32,FLEN)
NAN_BOXED(2132236791,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2173173759,32,FLEN)
NAN_BOXED(2132236791,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2173698047,32,FLEN)
NAN_BOXED(2132236791,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2174746623,32,FLEN)
NAN_BOXED(2132236791,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2176843775,32,FLEN)
NAN_BOXED(2132236791,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2176843776,32,FLEN)
NAN_BOXED(2132236791,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2178940928,32,FLEN)
NAN_BOXED(2132236791,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2179989504,32,FLEN)
NAN_BOXED(2132236791,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2180513792,32,FLEN)
NAN_BOXED(2132236791,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2180775936,32,FLEN)
NAN_BOXED(2132236791,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2180907008,32,FLEN)
NAN_BOXED(2132236791,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2180972544,32,FLEN)
NAN_BOXED(2132236791,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181005312,32,FLEN)
NAN_BOXED(2132236791,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181021696,32,FLEN)
NAN_BOXED(2132236791,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181029888,32,FLEN)
NAN_BOXED(2132236791,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181033984,32,FLEN)
NAN_BOXED(2132236791,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181036032,32,FLEN)
NAN_BOXED(2132236791,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181037056,32,FLEN)
NAN_BOXED(2132236791,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181037568,32,FLEN)
NAN_BOXED(2132236791,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181037824,32,FLEN)
NAN_BOXED(2132236791,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181037952,32,FLEN)
NAN_BOXED(2132236791,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181038016,32,FLEN)
NAN_BOXED(2132236791,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181038048,32,FLEN)
NAN_BOXED(2132236791,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181038064,32,FLEN)
NAN_BOXED(2132236791,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181038072,32,FLEN)
NAN_BOXED(2132236791,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181038076,32,FLEN)
NAN_BOXED(2132236791,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181038078,32,FLEN)
NAN_BOXED(2132236791,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181038079,32,FLEN)
NAN_BOXED(2132240286,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(2132240286,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388611,32,FLEN)
NAN_BOXED(2132240286,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388615,32,FLEN)
NAN_BOXED(2132240286,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(10066329,32,FLEN)
NAN_BOXED(2132240286,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(10785353,32,FLEN)
NAN_BOXED(2132240286,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(11744051,32,FLEN)
NAN_BOXED(2132240286,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(11983725,32,FLEN)
NAN_BOXED(2132240286,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(12303291,32,FLEN)
NAN_BOXED(2132240286,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(12862532,32,FLEN)
NAN_BOXED(2132240286,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(13421772,32,FLEN)
NAN_BOXED(2132240286,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(14380470,32,FLEN)
NAN_BOXED(2132240286,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(15099494,32,FLEN)
NAN_BOXED(2132240286,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(15578843,32,FLEN)
NAN_BOXED(2132240286,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777208,32,FLEN)
NAN_BOXED(2132240286,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777212,32,FLEN)
NAN_BOXED(2132240286,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777214,32,FLEN)
NAN_BOXED(2132240286,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260046848,32,FLEN)
NAN_BOXED(2132240286,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260046849,32,FLEN)
NAN_BOXED(2132240286,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260046851,32,FLEN)
NAN_BOXED(2132240286,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260046855,32,FLEN)
NAN_BOXED(2132240286,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260046863,32,FLEN)
NAN_BOXED(2132240286,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260046879,32,FLEN)
NAN_BOXED(2132240286,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260046911,32,FLEN)
NAN_BOXED(2132240286,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260046975,32,FLEN)
NAN_BOXED(2132240286,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260047103,32,FLEN)
NAN_BOXED(2132240286,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260047359,32,FLEN)
NAN_BOXED(2132240286,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260047871,32,FLEN)
NAN_BOXED(2132240286,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260048895,32,FLEN)
NAN_BOXED(2132240286,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260050943,32,FLEN)
NAN_BOXED(2132240286,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260055039,32,FLEN)
NAN_BOXED(2132240286,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260063231,32,FLEN)
NAN_BOXED(2132240286,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260079615,32,FLEN)
NAN_BOXED(2132240286,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260112383,32,FLEN)
NAN_BOXED(2132240286,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260177919,32,FLEN)
NAN_BOXED(2132240286,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260308991,32,FLEN)
NAN_BOXED(2132240286,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260571135,32,FLEN)
NAN_BOXED(2132240286,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(261095423,32,FLEN)
NAN_BOXED(2132240286,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(262143999,32,FLEN)
NAN_BOXED(2132240286,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(264241151,32,FLEN)
NAN_BOXED(2132240286,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(264241152,32,FLEN)
NAN_BOXED(2132240286,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(266338304,32,FLEN)
NAN_BOXED(2132240286,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(267386880,32,FLEN)
NAN_BOXED(2132240286,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(267911168,32,FLEN)
NAN_BOXED(2132240286,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268173312,32,FLEN)
NAN_BOXED(2132240286,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268304384,32,FLEN)
NAN_BOXED(2132240286,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268369920,32,FLEN)
NAN_BOXED(2132240286,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268402688,32,FLEN)
NAN_BOXED(2132240286,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268419072,32,FLEN)
NAN_BOXED(2132240286,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268427264,32,FLEN)
NAN_BOXED(2132240286,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268431360,32,FLEN)
NAN_BOXED(2132240286,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268433408,32,FLEN)
NAN_BOXED(2132240286,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268434432,32,FLEN)
NAN_BOXED(2132240286,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268434944,32,FLEN)
NAN_BOXED(2132240286,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268435200,32,FLEN)
NAN_BOXED(2132240286,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268435328,32,FLEN)
NAN_BOXED(2132240286,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268435392,32,FLEN)
NAN_BOXED(2132240286,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268435424,32,FLEN)
NAN_BOXED(2132240286,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268435440,32,FLEN)
NAN_BOXED(2132240286,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268435448,32,FLEN)
NAN_BOXED(2132240286,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268435452,32,FLEN)
NAN_BOXED(2132240286,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268435454,32,FLEN)
NAN_BOXED(2132240286,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268435455,32,FLEN)
NAN_BOXED(2132241315,32,FLEN)
NAN_BOXED(3545563,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2132241315,32,FLEN)
NAN_BOXED(3545563,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2132241315,32,FLEN)
NAN_BOXED(3545563,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2132241315,32,FLEN)
NAN_BOXED(3545563,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2132241315,32,FLEN)
NAN_BOXED(3545563,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2132241315,32,FLEN)
NAN_BOXED(3545563,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2132241315,32,FLEN)
NAN_BOXED(3545563,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2132241315,32,FLEN)
NAN_BOXED(3545563,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2132241315,32,FLEN)
NAN_BOXED(3545563,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2132241315,32,FLEN)
NAN_BOXED(3545563,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2132241315,32,FLEN)
NAN_BOXED(3545563,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2132241315,32,FLEN)
NAN_BOXED(3545563,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2132241315,32,FLEN)
NAN_BOXED(3545563,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2132241315,32,FLEN)
NAN_BOXED(3545563,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2132241315,32,FLEN)
NAN_BOXED(3545563,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2132241315,32,FLEN)
NAN_BOXED(3545563,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2132241315,32,FLEN)
NAN_BOXED(3545563,32,FLEN)
NAN_BOXED(1174405120,32,FLEN)
NAN_BOXED(2132241315,32,FLEN)
NAN_BOXED(3545563,32,FLEN)
NAN_BOXED(1174405121,32,FLEN)
NAN_BOXED(2132241315,32,FLEN)
NAN_BOXED(3545563,32,FLEN)
NAN_BOXED(1174405123,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
