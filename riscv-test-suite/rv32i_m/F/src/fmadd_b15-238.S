
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:17:59 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_30336:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x181c01 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x576c84 and fs3 == 1 and fe3 == 0xf3 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f181c01; op2val:0xbfd76c84;
op3val:0xf980003f; valaddr_reg:x3; val_offset:91008*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91008*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30337:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x181c01 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x576c84 and fs3 == 1 and fe3 == 0xf3 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f181c01; op2val:0xbfd76c84;
op3val:0xf980007f; valaddr_reg:x3; val_offset:91011*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91011*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30338:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x181c01 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x576c84 and fs3 == 1 and fe3 == 0xf3 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f181c01; op2val:0xbfd76c84;
op3val:0xf98000ff; valaddr_reg:x3; val_offset:91014*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91014*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30339:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x181c01 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x576c84 and fs3 == 1 and fe3 == 0xf3 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f181c01; op2val:0xbfd76c84;
op3val:0xf98001ff; valaddr_reg:x3; val_offset:91017*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91017*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30340:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x181c01 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x576c84 and fs3 == 1 and fe3 == 0xf3 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f181c01; op2val:0xbfd76c84;
op3val:0xf98003ff; valaddr_reg:x3; val_offset:91020*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91020*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30341:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x181c01 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x576c84 and fs3 == 1 and fe3 == 0xf3 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f181c01; op2val:0xbfd76c84;
op3val:0xf98007ff; valaddr_reg:x3; val_offset:91023*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91023*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30342:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x181c01 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x576c84 and fs3 == 1 and fe3 == 0xf3 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f181c01; op2val:0xbfd76c84;
op3val:0xf9800fff; valaddr_reg:x3; val_offset:91026*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91026*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30343:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x181c01 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x576c84 and fs3 == 1 and fe3 == 0xf3 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f181c01; op2val:0xbfd76c84;
op3val:0xf9801fff; valaddr_reg:x3; val_offset:91029*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91029*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30344:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x181c01 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x576c84 and fs3 == 1 and fe3 == 0xf3 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f181c01; op2val:0xbfd76c84;
op3val:0xf9803fff; valaddr_reg:x3; val_offset:91032*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91032*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30345:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x181c01 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x576c84 and fs3 == 1 and fe3 == 0xf3 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f181c01; op2val:0xbfd76c84;
op3val:0xf9807fff; valaddr_reg:x3; val_offset:91035*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91035*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30346:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x181c01 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x576c84 and fs3 == 1 and fe3 == 0xf3 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f181c01; op2val:0xbfd76c84;
op3val:0xf980ffff; valaddr_reg:x3; val_offset:91038*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91038*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30347:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x181c01 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x576c84 and fs3 == 1 and fe3 == 0xf3 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f181c01; op2val:0xbfd76c84;
op3val:0xf981ffff; valaddr_reg:x3; val_offset:91041*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91041*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30348:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x181c01 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x576c84 and fs3 == 1 and fe3 == 0xf3 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f181c01; op2val:0xbfd76c84;
op3val:0xf983ffff; valaddr_reg:x3; val_offset:91044*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91044*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30349:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x181c01 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x576c84 and fs3 == 1 and fe3 == 0xf3 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f181c01; op2val:0xbfd76c84;
op3val:0xf987ffff; valaddr_reg:x3; val_offset:91047*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91047*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30350:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x181c01 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x576c84 and fs3 == 1 and fe3 == 0xf3 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f181c01; op2val:0xbfd76c84;
op3val:0xf98fffff; valaddr_reg:x3; val_offset:91050*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91050*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30351:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x181c01 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x576c84 and fs3 == 1 and fe3 == 0xf3 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f181c01; op2val:0xbfd76c84;
op3val:0xf99fffff; valaddr_reg:x3; val_offset:91053*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91053*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30352:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x181c01 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x576c84 and fs3 == 1 and fe3 == 0xf3 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f181c01; op2val:0xbfd76c84;
op3val:0xf9bfffff; valaddr_reg:x3; val_offset:91056*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91056*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30353:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x181c01 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x576c84 and fs3 == 1 and fe3 == 0xf3 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f181c01; op2val:0xbfd76c84;
op3val:0xf9c00000; valaddr_reg:x3; val_offset:91059*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91059*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30354:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x181c01 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x576c84 and fs3 == 1 and fe3 == 0xf3 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f181c01; op2val:0xbfd76c84;
op3val:0xf9e00000; valaddr_reg:x3; val_offset:91062*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91062*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30355:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x181c01 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x576c84 and fs3 == 1 and fe3 == 0xf3 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f181c01; op2val:0xbfd76c84;
op3val:0xf9f00000; valaddr_reg:x3; val_offset:91065*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91065*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30356:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x181c01 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x576c84 and fs3 == 1 and fe3 == 0xf3 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f181c01; op2val:0xbfd76c84;
op3val:0xf9f80000; valaddr_reg:x3; val_offset:91068*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91068*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30357:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x181c01 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x576c84 and fs3 == 1 and fe3 == 0xf3 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f181c01; op2val:0xbfd76c84;
op3val:0xf9fc0000; valaddr_reg:x3; val_offset:91071*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91071*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30358:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x181c01 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x576c84 and fs3 == 1 and fe3 == 0xf3 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f181c01; op2val:0xbfd76c84;
op3val:0xf9fe0000; valaddr_reg:x3; val_offset:91074*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91074*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30359:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x181c01 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x576c84 and fs3 == 1 and fe3 == 0xf3 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f181c01; op2val:0xbfd76c84;
op3val:0xf9ff0000; valaddr_reg:x3; val_offset:91077*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91077*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30360:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x181c01 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x576c84 and fs3 == 1 and fe3 == 0xf3 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f181c01; op2val:0xbfd76c84;
op3val:0xf9ff8000; valaddr_reg:x3; val_offset:91080*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91080*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30361:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x181c01 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x576c84 and fs3 == 1 and fe3 == 0xf3 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f181c01; op2val:0xbfd76c84;
op3val:0xf9ffc000; valaddr_reg:x3; val_offset:91083*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91083*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30362:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x181c01 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x576c84 and fs3 == 1 and fe3 == 0xf3 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f181c01; op2val:0xbfd76c84;
op3val:0xf9ffe000; valaddr_reg:x3; val_offset:91086*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91086*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30363:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x181c01 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x576c84 and fs3 == 1 and fe3 == 0xf3 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f181c01; op2val:0xbfd76c84;
op3val:0xf9fff000; valaddr_reg:x3; val_offset:91089*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91089*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30364:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x181c01 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x576c84 and fs3 == 1 and fe3 == 0xf3 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f181c01; op2val:0xbfd76c84;
op3val:0xf9fff800; valaddr_reg:x3; val_offset:91092*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91092*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30365:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x181c01 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x576c84 and fs3 == 1 and fe3 == 0xf3 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f181c01; op2val:0xbfd76c84;
op3val:0xf9fffc00; valaddr_reg:x3; val_offset:91095*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91095*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30366:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x181c01 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x576c84 and fs3 == 1 and fe3 == 0xf3 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f181c01; op2val:0xbfd76c84;
op3val:0xf9fffe00; valaddr_reg:x3; val_offset:91098*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91098*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30367:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x181c01 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x576c84 and fs3 == 1 and fe3 == 0xf3 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f181c01; op2val:0xbfd76c84;
op3val:0xf9ffff00; valaddr_reg:x3; val_offset:91101*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91101*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30368:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x181c01 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x576c84 and fs3 == 1 and fe3 == 0xf3 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f181c01; op2val:0xbfd76c84;
op3val:0xf9ffff80; valaddr_reg:x3; val_offset:91104*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91104*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30369:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x181c01 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x576c84 and fs3 == 1 and fe3 == 0xf3 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f181c01; op2val:0xbfd76c84;
op3val:0xf9ffffc0; valaddr_reg:x3; val_offset:91107*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91107*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30370:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x181c01 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x576c84 and fs3 == 1 and fe3 == 0xf3 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f181c01; op2val:0xbfd76c84;
op3val:0xf9ffffe0; valaddr_reg:x3; val_offset:91110*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91110*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30371:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x181c01 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x576c84 and fs3 == 1 and fe3 == 0xf3 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f181c01; op2val:0xbfd76c84;
op3val:0xf9fffff0; valaddr_reg:x3; val_offset:91113*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91113*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30372:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x181c01 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x576c84 and fs3 == 1 and fe3 == 0xf3 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f181c01; op2val:0xbfd76c84;
op3val:0xf9fffff8; valaddr_reg:x3; val_offset:91116*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91116*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30373:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x181c01 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x576c84 and fs3 == 1 and fe3 == 0xf3 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f181c01; op2val:0xbfd76c84;
op3val:0xf9fffffc; valaddr_reg:x3; val_offset:91119*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91119*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30374:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x181c01 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x576c84 and fs3 == 1 and fe3 == 0xf3 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f181c01; op2val:0xbfd76c84;
op3val:0xf9fffffe; valaddr_reg:x3; val_offset:91122*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91122*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30375:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x181c01 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x576c84 and fs3 == 1 and fe3 == 0xf3 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f181c01; op2val:0xbfd76c84;
op3val:0xf9ffffff; valaddr_reg:x3; val_offset:91125*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91125*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30376:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x181c01 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x576c84 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f181c01; op2val:0xbfd76c84;
op3val:0xff000001; valaddr_reg:x3; val_offset:91128*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91128*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30377:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x181c01 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x576c84 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f181c01; op2val:0xbfd76c84;
op3val:0xff000003; valaddr_reg:x3; val_offset:91131*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91131*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30378:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x181c01 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x576c84 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f181c01; op2val:0xbfd76c84;
op3val:0xff000007; valaddr_reg:x3; val_offset:91134*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91134*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30379:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x181c01 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x576c84 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f181c01; op2val:0xbfd76c84;
op3val:0xff199999; valaddr_reg:x3; val_offset:91137*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91137*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30380:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x181c01 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x576c84 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f181c01; op2val:0xbfd76c84;
op3val:0xff249249; valaddr_reg:x3; val_offset:91140*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91140*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30381:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x181c01 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x576c84 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f181c01; op2val:0xbfd76c84;
op3val:0xff333333; valaddr_reg:x3; val_offset:91143*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91143*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30382:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x181c01 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x576c84 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f181c01; op2val:0xbfd76c84;
op3val:0xff36db6d; valaddr_reg:x3; val_offset:91146*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91146*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30383:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x181c01 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x576c84 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f181c01; op2val:0xbfd76c84;
op3val:0xff3bbbbb; valaddr_reg:x3; val_offset:91149*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91149*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30384:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x181c01 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x576c84 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f181c01; op2val:0xbfd76c84;
op3val:0xff444444; valaddr_reg:x3; val_offset:91152*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91152*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30385:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x181c01 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x576c84 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f181c01; op2val:0xbfd76c84;
op3val:0xff4ccccc; valaddr_reg:x3; val_offset:91155*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91155*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30386:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x181c01 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x576c84 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f181c01; op2val:0xbfd76c84;
op3val:0xff5b6db6; valaddr_reg:x3; val_offset:91158*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91158*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30387:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x181c01 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x576c84 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f181c01; op2val:0xbfd76c84;
op3val:0xff666666; valaddr_reg:x3; val_offset:91161*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91161*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30388:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x181c01 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x576c84 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f181c01; op2val:0xbfd76c84;
op3val:0xff6db6db; valaddr_reg:x3; val_offset:91164*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91164*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30389:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x181c01 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x576c84 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f181c01; op2val:0xbfd76c84;
op3val:0xff7ffff8; valaddr_reg:x3; val_offset:91167*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91167*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30390:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x181c01 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x576c84 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f181c01; op2val:0xbfd76c84;
op3val:0xff7ffffc; valaddr_reg:x3; val_offset:91170*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91170*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30391:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x181c01 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x576c84 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f181c01; op2val:0xbfd76c84;
op3val:0xff7ffffe; valaddr_reg:x3; val_offset:91173*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91173*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30392:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1879d2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1879d2; op2val:0x80000000;
op3val:0x80000001; valaddr_reg:x3; val_offset:91176*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91176*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30393:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1879d2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1879d2; op2val:0x80000000;
op3val:0x80000003; valaddr_reg:x3; val_offset:91179*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91179*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30394:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1879d2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1879d2; op2val:0x80000000;
op3val:0x80000007; valaddr_reg:x3; val_offset:91182*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91182*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30395:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1879d2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1879d2; op2val:0x80000000;
op3val:0x80199999; valaddr_reg:x3; val_offset:91185*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91185*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30396:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1879d2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1879d2; op2val:0x80000000;
op3val:0x80249249; valaddr_reg:x3; val_offset:91188*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91188*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30397:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1879d2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1879d2; op2val:0x80000000;
op3val:0x80333333; valaddr_reg:x3; val_offset:91191*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91191*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30398:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1879d2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1879d2; op2val:0x80000000;
op3val:0x8036db6d; valaddr_reg:x3; val_offset:91194*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91194*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30399:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1879d2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1879d2; op2val:0x80000000;
op3val:0x803bbbbb; valaddr_reg:x3; val_offset:91197*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91197*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30400:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1879d2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1879d2; op2val:0x80000000;
op3val:0x80444444; valaddr_reg:x3; val_offset:91200*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91200*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30401:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1879d2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1879d2; op2val:0x80000000;
op3val:0x804ccccc; valaddr_reg:x3; val_offset:91203*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91203*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30402:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1879d2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1879d2; op2val:0x80000000;
op3val:0x805b6db6; valaddr_reg:x3; val_offset:91206*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91206*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30403:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1879d2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1879d2; op2val:0x80000000;
op3val:0x80666666; valaddr_reg:x3; val_offset:91209*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91209*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30404:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1879d2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1879d2; op2val:0x80000000;
op3val:0x806db6db; valaddr_reg:x3; val_offset:91212*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91212*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30405:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1879d2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1879d2; op2val:0x80000000;
op3val:0x807ffff8; valaddr_reg:x3; val_offset:91215*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91215*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30406:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1879d2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1879d2; op2val:0x80000000;
op3val:0x807ffffc; valaddr_reg:x3; val_offset:91218*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91218*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30407:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1879d2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1879d2; op2val:0x80000000;
op3val:0x807ffffe; valaddr_reg:x3; val_offset:91221*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91221*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30408:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1879d2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1879d2; op2val:0x80000000;
op3val:0x81800000; valaddr_reg:x3; val_offset:91224*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91224*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30409:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1879d2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1879d2; op2val:0x80000000;
op3val:0x81800001; valaddr_reg:x3; val_offset:91227*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91227*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30410:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1879d2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1879d2; op2val:0x80000000;
op3val:0x81800003; valaddr_reg:x3; val_offset:91230*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91230*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30411:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1879d2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1879d2; op2val:0x80000000;
op3val:0x81800007; valaddr_reg:x3; val_offset:91233*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91233*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30412:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1879d2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1879d2; op2val:0x80000000;
op3val:0x8180000f; valaddr_reg:x3; val_offset:91236*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91236*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30413:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1879d2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1879d2; op2val:0x80000000;
op3val:0x8180001f; valaddr_reg:x3; val_offset:91239*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91239*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30414:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1879d2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1879d2; op2val:0x80000000;
op3val:0x8180003f; valaddr_reg:x3; val_offset:91242*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91242*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30415:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1879d2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1879d2; op2val:0x80000000;
op3val:0x8180007f; valaddr_reg:x3; val_offset:91245*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91245*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30416:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1879d2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1879d2; op2val:0x80000000;
op3val:0x818000ff; valaddr_reg:x3; val_offset:91248*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91248*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30417:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1879d2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1879d2; op2val:0x80000000;
op3val:0x818001ff; valaddr_reg:x3; val_offset:91251*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91251*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30418:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1879d2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1879d2; op2val:0x80000000;
op3val:0x818003ff; valaddr_reg:x3; val_offset:91254*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91254*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30419:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1879d2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1879d2; op2val:0x80000000;
op3val:0x818007ff; valaddr_reg:x3; val_offset:91257*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91257*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30420:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1879d2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1879d2; op2val:0x80000000;
op3val:0x81800fff; valaddr_reg:x3; val_offset:91260*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91260*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30421:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1879d2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1879d2; op2val:0x80000000;
op3val:0x81801fff; valaddr_reg:x3; val_offset:91263*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91263*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30422:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1879d2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1879d2; op2val:0x80000000;
op3val:0x81803fff; valaddr_reg:x3; val_offset:91266*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91266*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30423:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1879d2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1879d2; op2val:0x80000000;
op3val:0x81807fff; valaddr_reg:x3; val_offset:91269*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91269*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30424:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1879d2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1879d2; op2val:0x80000000;
op3val:0x8180ffff; valaddr_reg:x3; val_offset:91272*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91272*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30425:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1879d2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1879d2; op2val:0x80000000;
op3val:0x8181ffff; valaddr_reg:x3; val_offset:91275*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91275*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30426:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1879d2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1879d2; op2val:0x80000000;
op3val:0x8183ffff; valaddr_reg:x3; val_offset:91278*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91278*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30427:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1879d2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1879d2; op2val:0x80000000;
op3val:0x8187ffff; valaddr_reg:x3; val_offset:91281*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91281*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30428:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1879d2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1879d2; op2val:0x80000000;
op3val:0x818fffff; valaddr_reg:x3; val_offset:91284*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91284*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30429:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1879d2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1879d2; op2val:0x80000000;
op3val:0x819fffff; valaddr_reg:x3; val_offset:91287*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91287*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30430:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1879d2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1879d2; op2val:0x80000000;
op3val:0x81bfffff; valaddr_reg:x3; val_offset:91290*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91290*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30431:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1879d2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1879d2; op2val:0x80000000;
op3val:0x81c00000; valaddr_reg:x3; val_offset:91293*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91293*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30432:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1879d2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1879d2; op2val:0x80000000;
op3val:0x81e00000; valaddr_reg:x3; val_offset:91296*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91296*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30433:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1879d2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1879d2; op2val:0x80000000;
op3val:0x81f00000; valaddr_reg:x3; val_offset:91299*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91299*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30434:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1879d2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1879d2; op2val:0x80000000;
op3val:0x81f80000; valaddr_reg:x3; val_offset:91302*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91302*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30435:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1879d2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1879d2; op2val:0x80000000;
op3val:0x81fc0000; valaddr_reg:x3; val_offset:91305*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91305*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30436:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1879d2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1879d2; op2val:0x80000000;
op3val:0x81fe0000; valaddr_reg:x3; val_offset:91308*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91308*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30437:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1879d2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1879d2; op2val:0x80000000;
op3val:0x81ff0000; valaddr_reg:x3; val_offset:91311*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91311*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30438:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1879d2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1879d2; op2val:0x80000000;
op3val:0x81ff8000; valaddr_reg:x3; val_offset:91314*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91314*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30439:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1879d2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1879d2; op2val:0x80000000;
op3val:0x81ffc000; valaddr_reg:x3; val_offset:91317*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91317*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30440:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1879d2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1879d2; op2val:0x80000000;
op3val:0x81ffe000; valaddr_reg:x3; val_offset:91320*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91320*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30441:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1879d2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1879d2; op2val:0x80000000;
op3val:0x81fff000; valaddr_reg:x3; val_offset:91323*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91323*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30442:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1879d2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1879d2; op2val:0x80000000;
op3val:0x81fff800; valaddr_reg:x3; val_offset:91326*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91326*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30443:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1879d2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1879d2; op2val:0x80000000;
op3val:0x81fffc00; valaddr_reg:x3; val_offset:91329*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91329*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30444:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1879d2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1879d2; op2val:0x80000000;
op3val:0x81fffe00; valaddr_reg:x3; val_offset:91332*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91332*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30445:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1879d2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1879d2; op2val:0x80000000;
op3val:0x81ffff00; valaddr_reg:x3; val_offset:91335*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91335*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30446:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1879d2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1879d2; op2val:0x80000000;
op3val:0x81ffff80; valaddr_reg:x3; val_offset:91338*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91338*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30447:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1879d2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1879d2; op2val:0x80000000;
op3val:0x81ffffc0; valaddr_reg:x3; val_offset:91341*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91341*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30448:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1879d2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1879d2; op2val:0x80000000;
op3val:0x81ffffe0; valaddr_reg:x3; val_offset:91344*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91344*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30449:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1879d2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1879d2; op2val:0x80000000;
op3val:0x81fffff0; valaddr_reg:x3; val_offset:91347*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91347*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30450:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1879d2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1879d2; op2val:0x80000000;
op3val:0x81fffff8; valaddr_reg:x3; val_offset:91350*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91350*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30451:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1879d2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1879d2; op2val:0x80000000;
op3val:0x81fffffc; valaddr_reg:x3; val_offset:91353*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91353*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30452:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1879d2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1879d2; op2val:0x80000000;
op3val:0x81fffffe; valaddr_reg:x3; val_offset:91356*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91356*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30453:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1879d2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1879d2; op2val:0x80000000;
op3val:0x81ffffff; valaddr_reg:x3; val_offset:91359*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91359*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30454:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x18c423 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x567f6c and fs3 == 1 and fe3 == 0xc7 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f18c423; op2val:0xbfd67f6c;
op3val:0xe3800000; valaddr_reg:x3; val_offset:91362*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91362*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30455:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x18c423 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x567f6c and fs3 == 1 and fe3 == 0xc7 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f18c423; op2val:0xbfd67f6c;
op3val:0xe3800001; valaddr_reg:x3; val_offset:91365*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91365*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30456:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x18c423 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x567f6c and fs3 == 1 and fe3 == 0xc7 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f18c423; op2val:0xbfd67f6c;
op3val:0xe3800003; valaddr_reg:x3; val_offset:91368*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91368*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30457:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x18c423 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x567f6c and fs3 == 1 and fe3 == 0xc7 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f18c423; op2val:0xbfd67f6c;
op3val:0xe3800007; valaddr_reg:x3; val_offset:91371*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91371*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30458:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x18c423 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x567f6c and fs3 == 1 and fe3 == 0xc7 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f18c423; op2val:0xbfd67f6c;
op3val:0xe380000f; valaddr_reg:x3; val_offset:91374*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91374*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30459:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x18c423 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x567f6c and fs3 == 1 and fe3 == 0xc7 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f18c423; op2val:0xbfd67f6c;
op3val:0xe380001f; valaddr_reg:x3; val_offset:91377*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91377*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30460:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x18c423 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x567f6c and fs3 == 1 and fe3 == 0xc7 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f18c423; op2val:0xbfd67f6c;
op3val:0xe380003f; valaddr_reg:x3; val_offset:91380*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91380*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30461:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x18c423 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x567f6c and fs3 == 1 and fe3 == 0xc7 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f18c423; op2val:0xbfd67f6c;
op3val:0xe380007f; valaddr_reg:x3; val_offset:91383*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91383*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30462:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x18c423 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x567f6c and fs3 == 1 and fe3 == 0xc7 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f18c423; op2val:0xbfd67f6c;
op3val:0xe38000ff; valaddr_reg:x3; val_offset:91386*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91386*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30463:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x18c423 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x567f6c and fs3 == 1 and fe3 == 0xc7 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f18c423; op2val:0xbfd67f6c;
op3val:0xe38001ff; valaddr_reg:x3; val_offset:91389*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91389*0 + 3*237*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2132286465,32,FLEN)
NAN_BOXED(3218566276,32,FLEN)
NAN_BOXED(4185915455,32,FLEN)
NAN_BOXED(2132286465,32,FLEN)
NAN_BOXED(3218566276,32,FLEN)
NAN_BOXED(4185915519,32,FLEN)
NAN_BOXED(2132286465,32,FLEN)
NAN_BOXED(3218566276,32,FLEN)
NAN_BOXED(4185915647,32,FLEN)
NAN_BOXED(2132286465,32,FLEN)
NAN_BOXED(3218566276,32,FLEN)
NAN_BOXED(4185915903,32,FLEN)
NAN_BOXED(2132286465,32,FLEN)
NAN_BOXED(3218566276,32,FLEN)
NAN_BOXED(4185916415,32,FLEN)
NAN_BOXED(2132286465,32,FLEN)
NAN_BOXED(3218566276,32,FLEN)
NAN_BOXED(4185917439,32,FLEN)
NAN_BOXED(2132286465,32,FLEN)
NAN_BOXED(3218566276,32,FLEN)
NAN_BOXED(4185919487,32,FLEN)
NAN_BOXED(2132286465,32,FLEN)
NAN_BOXED(3218566276,32,FLEN)
NAN_BOXED(4185923583,32,FLEN)
NAN_BOXED(2132286465,32,FLEN)
NAN_BOXED(3218566276,32,FLEN)
NAN_BOXED(4185931775,32,FLEN)
NAN_BOXED(2132286465,32,FLEN)
NAN_BOXED(3218566276,32,FLEN)
NAN_BOXED(4185948159,32,FLEN)
NAN_BOXED(2132286465,32,FLEN)
NAN_BOXED(3218566276,32,FLEN)
NAN_BOXED(4185980927,32,FLEN)
NAN_BOXED(2132286465,32,FLEN)
NAN_BOXED(3218566276,32,FLEN)
NAN_BOXED(4186046463,32,FLEN)
NAN_BOXED(2132286465,32,FLEN)
NAN_BOXED(3218566276,32,FLEN)
NAN_BOXED(4186177535,32,FLEN)
NAN_BOXED(2132286465,32,FLEN)
NAN_BOXED(3218566276,32,FLEN)
NAN_BOXED(4186439679,32,FLEN)
NAN_BOXED(2132286465,32,FLEN)
NAN_BOXED(3218566276,32,FLEN)
NAN_BOXED(4186963967,32,FLEN)
NAN_BOXED(2132286465,32,FLEN)
NAN_BOXED(3218566276,32,FLEN)
NAN_BOXED(4188012543,32,FLEN)
NAN_BOXED(2132286465,32,FLEN)
NAN_BOXED(3218566276,32,FLEN)
NAN_BOXED(4190109695,32,FLEN)
NAN_BOXED(2132286465,32,FLEN)
NAN_BOXED(3218566276,32,FLEN)
NAN_BOXED(4190109696,32,FLEN)
NAN_BOXED(2132286465,32,FLEN)
NAN_BOXED(3218566276,32,FLEN)
NAN_BOXED(4192206848,32,FLEN)
NAN_BOXED(2132286465,32,FLEN)
NAN_BOXED(3218566276,32,FLEN)
NAN_BOXED(4193255424,32,FLEN)
NAN_BOXED(2132286465,32,FLEN)
NAN_BOXED(3218566276,32,FLEN)
NAN_BOXED(4193779712,32,FLEN)
NAN_BOXED(2132286465,32,FLEN)
NAN_BOXED(3218566276,32,FLEN)
NAN_BOXED(4194041856,32,FLEN)
NAN_BOXED(2132286465,32,FLEN)
NAN_BOXED(3218566276,32,FLEN)
NAN_BOXED(4194172928,32,FLEN)
NAN_BOXED(2132286465,32,FLEN)
NAN_BOXED(3218566276,32,FLEN)
NAN_BOXED(4194238464,32,FLEN)
NAN_BOXED(2132286465,32,FLEN)
NAN_BOXED(3218566276,32,FLEN)
NAN_BOXED(4194271232,32,FLEN)
NAN_BOXED(2132286465,32,FLEN)
NAN_BOXED(3218566276,32,FLEN)
NAN_BOXED(4194287616,32,FLEN)
NAN_BOXED(2132286465,32,FLEN)
NAN_BOXED(3218566276,32,FLEN)
NAN_BOXED(4194295808,32,FLEN)
NAN_BOXED(2132286465,32,FLEN)
NAN_BOXED(3218566276,32,FLEN)
NAN_BOXED(4194299904,32,FLEN)
NAN_BOXED(2132286465,32,FLEN)
NAN_BOXED(3218566276,32,FLEN)
NAN_BOXED(4194301952,32,FLEN)
NAN_BOXED(2132286465,32,FLEN)
NAN_BOXED(3218566276,32,FLEN)
NAN_BOXED(4194302976,32,FLEN)
NAN_BOXED(2132286465,32,FLEN)
NAN_BOXED(3218566276,32,FLEN)
NAN_BOXED(4194303488,32,FLEN)
NAN_BOXED(2132286465,32,FLEN)
NAN_BOXED(3218566276,32,FLEN)
NAN_BOXED(4194303744,32,FLEN)
NAN_BOXED(2132286465,32,FLEN)
NAN_BOXED(3218566276,32,FLEN)
NAN_BOXED(4194303872,32,FLEN)
NAN_BOXED(2132286465,32,FLEN)
NAN_BOXED(3218566276,32,FLEN)
NAN_BOXED(4194303936,32,FLEN)
NAN_BOXED(2132286465,32,FLEN)
NAN_BOXED(3218566276,32,FLEN)
NAN_BOXED(4194303968,32,FLEN)
NAN_BOXED(2132286465,32,FLEN)
NAN_BOXED(3218566276,32,FLEN)
NAN_BOXED(4194303984,32,FLEN)
NAN_BOXED(2132286465,32,FLEN)
NAN_BOXED(3218566276,32,FLEN)
NAN_BOXED(4194303992,32,FLEN)
NAN_BOXED(2132286465,32,FLEN)
NAN_BOXED(3218566276,32,FLEN)
NAN_BOXED(4194303996,32,FLEN)
NAN_BOXED(2132286465,32,FLEN)
NAN_BOXED(3218566276,32,FLEN)
NAN_BOXED(4194303998,32,FLEN)
NAN_BOXED(2132286465,32,FLEN)
NAN_BOXED(3218566276,32,FLEN)
NAN_BOXED(4194303999,32,FLEN)
NAN_BOXED(2132286465,32,FLEN)
NAN_BOXED(3218566276,32,FLEN)
NAN_BOXED(4278190081,32,FLEN)
NAN_BOXED(2132286465,32,FLEN)
NAN_BOXED(3218566276,32,FLEN)
NAN_BOXED(4278190083,32,FLEN)
NAN_BOXED(2132286465,32,FLEN)
NAN_BOXED(3218566276,32,FLEN)
NAN_BOXED(4278190087,32,FLEN)
NAN_BOXED(2132286465,32,FLEN)
NAN_BOXED(3218566276,32,FLEN)
NAN_BOXED(4279867801,32,FLEN)
NAN_BOXED(2132286465,32,FLEN)
NAN_BOXED(3218566276,32,FLEN)
NAN_BOXED(4280586825,32,FLEN)
NAN_BOXED(2132286465,32,FLEN)
NAN_BOXED(3218566276,32,FLEN)
NAN_BOXED(4281545523,32,FLEN)
NAN_BOXED(2132286465,32,FLEN)
NAN_BOXED(3218566276,32,FLEN)
NAN_BOXED(4281785197,32,FLEN)
NAN_BOXED(2132286465,32,FLEN)
NAN_BOXED(3218566276,32,FLEN)
NAN_BOXED(4282104763,32,FLEN)
NAN_BOXED(2132286465,32,FLEN)
NAN_BOXED(3218566276,32,FLEN)
NAN_BOXED(4282664004,32,FLEN)
NAN_BOXED(2132286465,32,FLEN)
NAN_BOXED(3218566276,32,FLEN)
NAN_BOXED(4283223244,32,FLEN)
NAN_BOXED(2132286465,32,FLEN)
NAN_BOXED(3218566276,32,FLEN)
NAN_BOXED(4284181942,32,FLEN)
NAN_BOXED(2132286465,32,FLEN)
NAN_BOXED(3218566276,32,FLEN)
NAN_BOXED(4284900966,32,FLEN)
NAN_BOXED(2132286465,32,FLEN)
NAN_BOXED(3218566276,32,FLEN)
NAN_BOXED(4285380315,32,FLEN)
NAN_BOXED(2132286465,32,FLEN)
NAN_BOXED(3218566276,32,FLEN)
NAN_BOXED(4286578680,32,FLEN)
NAN_BOXED(2132286465,32,FLEN)
NAN_BOXED(3218566276,32,FLEN)
NAN_BOXED(4286578684,32,FLEN)
NAN_BOXED(2132286465,32,FLEN)
NAN_BOXED(3218566276,32,FLEN)
NAN_BOXED(4286578686,32,FLEN)
NAN_BOXED(2132310482,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2132310482,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483651,32,FLEN)
NAN_BOXED(2132310482,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483655,32,FLEN)
NAN_BOXED(2132310482,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149161369,32,FLEN)
NAN_BOXED(2132310482,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149880393,32,FLEN)
NAN_BOXED(2132310482,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2150839091,32,FLEN)
NAN_BOXED(2132310482,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151078765,32,FLEN)
NAN_BOXED(2132310482,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151398331,32,FLEN)
NAN_BOXED(2132310482,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151957572,32,FLEN)
NAN_BOXED(2132310482,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2152516812,32,FLEN)
NAN_BOXED(2132310482,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2153475510,32,FLEN)
NAN_BOXED(2132310482,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154194534,32,FLEN)
NAN_BOXED(2132310482,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154673883,32,FLEN)
NAN_BOXED(2132310482,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872248,32,FLEN)
NAN_BOXED(2132310482,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872252,32,FLEN)
NAN_BOXED(2132310482,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2132310482,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172649472,32,FLEN)
NAN_BOXED(2132310482,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172649473,32,FLEN)
NAN_BOXED(2132310482,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172649475,32,FLEN)
NAN_BOXED(2132310482,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172649479,32,FLEN)
NAN_BOXED(2132310482,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172649487,32,FLEN)
NAN_BOXED(2132310482,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172649503,32,FLEN)
NAN_BOXED(2132310482,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172649535,32,FLEN)
NAN_BOXED(2132310482,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172649599,32,FLEN)
NAN_BOXED(2132310482,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172649727,32,FLEN)
NAN_BOXED(2132310482,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172649983,32,FLEN)
NAN_BOXED(2132310482,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172650495,32,FLEN)
NAN_BOXED(2132310482,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172651519,32,FLEN)
NAN_BOXED(2132310482,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172653567,32,FLEN)
NAN_BOXED(2132310482,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172657663,32,FLEN)
NAN_BOXED(2132310482,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172665855,32,FLEN)
NAN_BOXED(2132310482,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172682239,32,FLEN)
NAN_BOXED(2132310482,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172715007,32,FLEN)
NAN_BOXED(2132310482,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172780543,32,FLEN)
NAN_BOXED(2132310482,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172911615,32,FLEN)
NAN_BOXED(2132310482,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2173173759,32,FLEN)
NAN_BOXED(2132310482,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2173698047,32,FLEN)
NAN_BOXED(2132310482,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2174746623,32,FLEN)
NAN_BOXED(2132310482,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2176843775,32,FLEN)
NAN_BOXED(2132310482,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2176843776,32,FLEN)
NAN_BOXED(2132310482,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2178940928,32,FLEN)
NAN_BOXED(2132310482,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2179989504,32,FLEN)
NAN_BOXED(2132310482,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2180513792,32,FLEN)
NAN_BOXED(2132310482,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2180775936,32,FLEN)
NAN_BOXED(2132310482,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2180907008,32,FLEN)
NAN_BOXED(2132310482,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2180972544,32,FLEN)
NAN_BOXED(2132310482,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181005312,32,FLEN)
NAN_BOXED(2132310482,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181021696,32,FLEN)
NAN_BOXED(2132310482,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181029888,32,FLEN)
NAN_BOXED(2132310482,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181033984,32,FLEN)
NAN_BOXED(2132310482,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181036032,32,FLEN)
NAN_BOXED(2132310482,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181037056,32,FLEN)
NAN_BOXED(2132310482,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181037568,32,FLEN)
NAN_BOXED(2132310482,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181037824,32,FLEN)
NAN_BOXED(2132310482,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181037952,32,FLEN)
NAN_BOXED(2132310482,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181038016,32,FLEN)
NAN_BOXED(2132310482,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181038048,32,FLEN)
NAN_BOXED(2132310482,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181038064,32,FLEN)
NAN_BOXED(2132310482,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181038072,32,FLEN)
NAN_BOXED(2132310482,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181038076,32,FLEN)
NAN_BOXED(2132310482,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181038078,32,FLEN)
NAN_BOXED(2132310482,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181038079,32,FLEN)
NAN_BOXED(2132329507,32,FLEN)
NAN_BOXED(3218505580,32,FLEN)
NAN_BOXED(3816816640,32,FLEN)
NAN_BOXED(2132329507,32,FLEN)
NAN_BOXED(3218505580,32,FLEN)
NAN_BOXED(3816816641,32,FLEN)
NAN_BOXED(2132329507,32,FLEN)
NAN_BOXED(3218505580,32,FLEN)
NAN_BOXED(3816816643,32,FLEN)
NAN_BOXED(2132329507,32,FLEN)
NAN_BOXED(3218505580,32,FLEN)
NAN_BOXED(3816816647,32,FLEN)
NAN_BOXED(2132329507,32,FLEN)
NAN_BOXED(3218505580,32,FLEN)
NAN_BOXED(3816816655,32,FLEN)
NAN_BOXED(2132329507,32,FLEN)
NAN_BOXED(3218505580,32,FLEN)
NAN_BOXED(3816816671,32,FLEN)
NAN_BOXED(2132329507,32,FLEN)
NAN_BOXED(3218505580,32,FLEN)
NAN_BOXED(3816816703,32,FLEN)
NAN_BOXED(2132329507,32,FLEN)
NAN_BOXED(3218505580,32,FLEN)
NAN_BOXED(3816816767,32,FLEN)
NAN_BOXED(2132329507,32,FLEN)
NAN_BOXED(3218505580,32,FLEN)
NAN_BOXED(3816816895,32,FLEN)
NAN_BOXED(2132329507,32,FLEN)
NAN_BOXED(3218505580,32,FLEN)
NAN_BOXED(3816817151,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
