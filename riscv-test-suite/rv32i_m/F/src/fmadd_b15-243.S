
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:17:59 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_30976:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b9172 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b9172; op2val:0x80000000;
op3val:0x80bbbbbb; valaddr_reg:x3; val_offset:92928*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92928*0 + 3*242*FLEN/8, x4, x1, x2)

inst_30977:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b9172 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b9172; op2val:0x80000000;
op3val:0x80bfffff; valaddr_reg:x3; val_offset:92931*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92931*0 + 3*242*FLEN/8, x4, x1, x2)

inst_30978:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b9172 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b9172; op2val:0x80000000;
op3val:0x80c00000; valaddr_reg:x3; val_offset:92934*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92934*0 + 3*242*FLEN/8, x4, x1, x2)

inst_30979:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b9172 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b9172; op2val:0x80000000;
op3val:0x80c44444; valaddr_reg:x3; val_offset:92937*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92937*0 + 3*242*FLEN/8, x4, x1, x2)

inst_30980:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b9172 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b9172; op2val:0x80000000;
op3val:0x80cccccc; valaddr_reg:x3; val_offset:92940*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92940*0 + 3*242*FLEN/8, x4, x1, x2)

inst_30981:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b9172 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b9172; op2val:0x80000000;
op3val:0x80db6db6; valaddr_reg:x3; val_offset:92943*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92943*0 + 3*242*FLEN/8, x4, x1, x2)

inst_30982:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b9172 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b9172; op2val:0x80000000;
op3val:0x80e00000; valaddr_reg:x3; val_offset:92946*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92946*0 + 3*242*FLEN/8, x4, x1, x2)

inst_30983:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b9172 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b9172; op2val:0x80000000;
op3val:0x80e66666; valaddr_reg:x3; val_offset:92949*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92949*0 + 3*242*FLEN/8, x4, x1, x2)

inst_30984:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b9172 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b9172; op2val:0x80000000;
op3val:0x80edb6db; valaddr_reg:x3; val_offset:92952*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92952*0 + 3*242*FLEN/8, x4, x1, x2)

inst_30985:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b9172 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b9172; op2val:0x80000000;
op3val:0x80f00000; valaddr_reg:x3; val_offset:92955*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92955*0 + 3*242*FLEN/8, x4, x1, x2)

inst_30986:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b9172 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b9172; op2val:0x80000000;
op3val:0x80f80000; valaddr_reg:x3; val_offset:92958*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92958*0 + 3*242*FLEN/8, x4, x1, x2)

inst_30987:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b9172 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b9172; op2val:0x80000000;
op3val:0x80fc0000; valaddr_reg:x3; val_offset:92961*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92961*0 + 3*242*FLEN/8, x4, x1, x2)

inst_30988:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b9172 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b9172; op2val:0x80000000;
op3val:0x80fe0000; valaddr_reg:x3; val_offset:92964*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92964*0 + 3*242*FLEN/8, x4, x1, x2)

inst_30989:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b9172 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b9172; op2val:0x80000000;
op3val:0x80ff0000; valaddr_reg:x3; val_offset:92967*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92967*0 + 3*242*FLEN/8, x4, x1, x2)

inst_30990:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b9172 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b9172; op2val:0x80000000;
op3val:0x80ff8000; valaddr_reg:x3; val_offset:92970*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92970*0 + 3*242*FLEN/8, x4, x1, x2)

inst_30991:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b9172 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b9172; op2val:0x80000000;
op3val:0x80ffc000; valaddr_reg:x3; val_offset:92973*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92973*0 + 3*242*FLEN/8, x4, x1, x2)

inst_30992:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b9172 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b9172; op2val:0x80000000;
op3val:0x80ffe000; valaddr_reg:x3; val_offset:92976*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92976*0 + 3*242*FLEN/8, x4, x1, x2)

inst_30993:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b9172 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b9172; op2val:0x80000000;
op3val:0x80fff000; valaddr_reg:x3; val_offset:92979*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92979*0 + 3*242*FLEN/8, x4, x1, x2)

inst_30994:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b9172 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b9172; op2val:0x80000000;
op3val:0x80fff800; valaddr_reg:x3; val_offset:92982*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92982*0 + 3*242*FLEN/8, x4, x1, x2)

inst_30995:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b9172 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b9172; op2val:0x80000000;
op3val:0x80fffc00; valaddr_reg:x3; val_offset:92985*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92985*0 + 3*242*FLEN/8, x4, x1, x2)

inst_30996:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b9172 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b9172; op2val:0x80000000;
op3val:0x80fffe00; valaddr_reg:x3; val_offset:92988*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92988*0 + 3*242*FLEN/8, x4, x1, x2)

inst_30997:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b9172 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b9172; op2val:0x80000000;
op3val:0x80ffff00; valaddr_reg:x3; val_offset:92991*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92991*0 + 3*242*FLEN/8, x4, x1, x2)

inst_30998:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b9172 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b9172; op2val:0x80000000;
op3val:0x80ffff80; valaddr_reg:x3; val_offset:92994*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92994*0 + 3*242*FLEN/8, x4, x1, x2)

inst_30999:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b9172 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b9172; op2val:0x80000000;
op3val:0x80ffffc0; valaddr_reg:x3; val_offset:92997*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92997*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31000:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b9172 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b9172; op2val:0x80000000;
op3val:0x80ffffe0; valaddr_reg:x3; val_offset:93000*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93000*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31001:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b9172 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b9172; op2val:0x80000000;
op3val:0x80fffff0; valaddr_reg:x3; val_offset:93003*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93003*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31002:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b9172 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b9172; op2val:0x80000000;
op3val:0x80fffff8; valaddr_reg:x3; val_offset:93006*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93006*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31003:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b9172 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b9172; op2val:0x80000000;
op3val:0x80fffffc; valaddr_reg:x3; val_offset:93009*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93009*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31004:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b9172 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b9172; op2val:0x80000000;
op3val:0x80fffffe; valaddr_reg:x3; val_offset:93012*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93012*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31005:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b9172 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b9172; op2val:0x80000000;
op3val:0x80ffffff; valaddr_reg:x3; val_offset:93015*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93015*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31006:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c60ac and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c60ac; op2val:0x80000000;
op3val:0x80000001; valaddr_reg:x3; val_offset:93018*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93018*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31007:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c60ac and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c60ac; op2val:0x80000000;
op3val:0x80000003; valaddr_reg:x3; val_offset:93021*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93021*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31008:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c60ac and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c60ac; op2val:0x80000000;
op3val:0x80000007; valaddr_reg:x3; val_offset:93024*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93024*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31009:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c60ac and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c60ac; op2val:0x80000000;
op3val:0x80199999; valaddr_reg:x3; val_offset:93027*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93027*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31010:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c60ac and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c60ac; op2val:0x80000000;
op3val:0x80249249; valaddr_reg:x3; val_offset:93030*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93030*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31011:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c60ac and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c60ac; op2val:0x80000000;
op3val:0x80333333; valaddr_reg:x3; val_offset:93033*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93033*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31012:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c60ac and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c60ac; op2val:0x80000000;
op3val:0x8036db6d; valaddr_reg:x3; val_offset:93036*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93036*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31013:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c60ac and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c60ac; op2val:0x80000000;
op3val:0x803bbbbb; valaddr_reg:x3; val_offset:93039*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93039*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31014:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c60ac and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c60ac; op2val:0x80000000;
op3val:0x80444444; valaddr_reg:x3; val_offset:93042*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93042*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31015:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c60ac and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c60ac; op2val:0x80000000;
op3val:0x804ccccc; valaddr_reg:x3; val_offset:93045*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93045*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31016:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c60ac and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c60ac; op2val:0x80000000;
op3val:0x805b6db6; valaddr_reg:x3; val_offset:93048*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93048*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31017:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c60ac and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c60ac; op2val:0x80000000;
op3val:0x80666666; valaddr_reg:x3; val_offset:93051*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93051*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31018:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c60ac and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c60ac; op2val:0x80000000;
op3val:0x806db6db; valaddr_reg:x3; val_offset:93054*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93054*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31019:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c60ac and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c60ac; op2val:0x80000000;
op3val:0x807ffff8; valaddr_reg:x3; val_offset:93057*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93057*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31020:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c60ac and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c60ac; op2val:0x80000000;
op3val:0x807ffffc; valaddr_reg:x3; val_offset:93060*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93060*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31021:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c60ac and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c60ac; op2val:0x80000000;
op3val:0x807ffffe; valaddr_reg:x3; val_offset:93063*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93063*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31022:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c60ac and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c60ac; op2val:0x80000000;
op3val:0x8b000000; valaddr_reg:x3; val_offset:93066*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93066*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31023:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c60ac and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c60ac; op2val:0x80000000;
op3val:0x8b000001; valaddr_reg:x3; val_offset:93069*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93069*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31024:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c60ac and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c60ac; op2val:0x80000000;
op3val:0x8b000003; valaddr_reg:x3; val_offset:93072*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93072*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31025:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c60ac and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c60ac; op2val:0x80000000;
op3val:0x8b000007; valaddr_reg:x3; val_offset:93075*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93075*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31026:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c60ac and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c60ac; op2val:0x80000000;
op3val:0x8b00000f; valaddr_reg:x3; val_offset:93078*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93078*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31027:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c60ac and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c60ac; op2val:0x80000000;
op3val:0x8b00001f; valaddr_reg:x3; val_offset:93081*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93081*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31028:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c60ac and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c60ac; op2val:0x80000000;
op3val:0x8b00003f; valaddr_reg:x3; val_offset:93084*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93084*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31029:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c60ac and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c60ac; op2val:0x80000000;
op3val:0x8b00007f; valaddr_reg:x3; val_offset:93087*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93087*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31030:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c60ac and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c60ac; op2val:0x80000000;
op3val:0x8b0000ff; valaddr_reg:x3; val_offset:93090*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93090*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31031:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c60ac and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c60ac; op2val:0x80000000;
op3val:0x8b0001ff; valaddr_reg:x3; val_offset:93093*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93093*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31032:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c60ac and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c60ac; op2val:0x80000000;
op3val:0x8b0003ff; valaddr_reg:x3; val_offset:93096*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93096*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31033:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c60ac and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c60ac; op2val:0x80000000;
op3val:0x8b0007ff; valaddr_reg:x3; val_offset:93099*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93099*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31034:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c60ac and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c60ac; op2val:0x80000000;
op3val:0x8b000fff; valaddr_reg:x3; val_offset:93102*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93102*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31035:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c60ac and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c60ac; op2val:0x80000000;
op3val:0x8b001fff; valaddr_reg:x3; val_offset:93105*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93105*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31036:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c60ac and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c60ac; op2val:0x80000000;
op3val:0x8b003fff; valaddr_reg:x3; val_offset:93108*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93108*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31037:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c60ac and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c60ac; op2val:0x80000000;
op3val:0x8b007fff; valaddr_reg:x3; val_offset:93111*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93111*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31038:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c60ac and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c60ac; op2val:0x80000000;
op3val:0x8b00ffff; valaddr_reg:x3; val_offset:93114*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93114*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31039:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c60ac and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c60ac; op2val:0x80000000;
op3val:0x8b01ffff; valaddr_reg:x3; val_offset:93117*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93117*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31040:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c60ac and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c60ac; op2val:0x80000000;
op3val:0x8b03ffff; valaddr_reg:x3; val_offset:93120*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93120*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31041:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c60ac and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c60ac; op2val:0x80000000;
op3val:0x8b07ffff; valaddr_reg:x3; val_offset:93123*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93123*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31042:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c60ac and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c60ac; op2val:0x80000000;
op3val:0x8b0fffff; valaddr_reg:x3; val_offset:93126*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93126*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31043:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c60ac and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c60ac; op2val:0x80000000;
op3val:0x8b1fffff; valaddr_reg:x3; val_offset:93129*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93129*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31044:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c60ac and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c60ac; op2val:0x80000000;
op3val:0x8b3fffff; valaddr_reg:x3; val_offset:93132*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93132*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31045:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c60ac and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c60ac; op2val:0x80000000;
op3val:0x8b400000; valaddr_reg:x3; val_offset:93135*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93135*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31046:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c60ac and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c60ac; op2val:0x80000000;
op3val:0x8b600000; valaddr_reg:x3; val_offset:93138*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93138*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31047:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c60ac and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c60ac; op2val:0x80000000;
op3val:0x8b700000; valaddr_reg:x3; val_offset:93141*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93141*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31048:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c60ac and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c60ac; op2val:0x80000000;
op3val:0x8b780000; valaddr_reg:x3; val_offset:93144*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93144*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31049:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c60ac and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c60ac; op2val:0x80000000;
op3val:0x8b7c0000; valaddr_reg:x3; val_offset:93147*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93147*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31050:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c60ac and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c60ac; op2val:0x80000000;
op3val:0x8b7e0000; valaddr_reg:x3; val_offset:93150*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93150*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31051:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c60ac and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c60ac; op2val:0x80000000;
op3val:0x8b7f0000; valaddr_reg:x3; val_offset:93153*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93153*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31052:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c60ac and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c60ac; op2val:0x80000000;
op3val:0x8b7f8000; valaddr_reg:x3; val_offset:93156*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93156*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31053:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c60ac and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c60ac; op2val:0x80000000;
op3val:0x8b7fc000; valaddr_reg:x3; val_offset:93159*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93159*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31054:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c60ac and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c60ac; op2val:0x80000000;
op3val:0x8b7fe000; valaddr_reg:x3; val_offset:93162*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93162*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31055:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c60ac and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c60ac; op2val:0x80000000;
op3val:0x8b7ff000; valaddr_reg:x3; val_offset:93165*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93165*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31056:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c60ac and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c60ac; op2val:0x80000000;
op3val:0x8b7ff800; valaddr_reg:x3; val_offset:93168*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93168*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31057:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c60ac and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c60ac; op2val:0x80000000;
op3val:0x8b7ffc00; valaddr_reg:x3; val_offset:93171*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93171*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31058:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c60ac and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c60ac; op2val:0x80000000;
op3val:0x8b7ffe00; valaddr_reg:x3; val_offset:93174*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93174*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31059:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c60ac and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c60ac; op2val:0x80000000;
op3val:0x8b7fff00; valaddr_reg:x3; val_offset:93177*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93177*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31060:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c60ac and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c60ac; op2val:0x80000000;
op3val:0x8b7fff80; valaddr_reg:x3; val_offset:93180*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93180*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31061:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c60ac and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c60ac; op2val:0x80000000;
op3val:0x8b7fffc0; valaddr_reg:x3; val_offset:93183*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93183*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31062:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c60ac and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c60ac; op2val:0x80000000;
op3val:0x8b7fffe0; valaddr_reg:x3; val_offset:93186*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93186*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31063:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c60ac and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c60ac; op2val:0x80000000;
op3val:0x8b7ffff0; valaddr_reg:x3; val_offset:93189*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93189*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31064:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c60ac and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c60ac; op2val:0x80000000;
op3val:0x8b7ffff8; valaddr_reg:x3; val_offset:93192*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93192*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31065:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c60ac and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c60ac; op2val:0x80000000;
op3val:0x8b7ffffc; valaddr_reg:x3; val_offset:93195*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93195*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31066:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c60ac and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c60ac; op2val:0x80000000;
op3val:0x8b7ffffe; valaddr_reg:x3; val_offset:93198*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93198*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31067:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c60ac and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c60ac; op2val:0x80000000;
op3val:0x8b7fffff; valaddr_reg:x3; val_offset:93201*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93201*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31068:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ce318 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x343744 and fs3 == 0 and fe3 == 0x64 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ce318; op2val:0x343744;
op3val:0x32000000; valaddr_reg:x3; val_offset:93204*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93204*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31069:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ce318 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x343744 and fs3 == 0 and fe3 == 0x64 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ce318; op2val:0x343744;
op3val:0x32000001; valaddr_reg:x3; val_offset:93207*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93207*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31070:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ce318 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x343744 and fs3 == 0 and fe3 == 0x64 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ce318; op2val:0x343744;
op3val:0x32000003; valaddr_reg:x3; val_offset:93210*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93210*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31071:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ce318 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x343744 and fs3 == 0 and fe3 == 0x64 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ce318; op2val:0x343744;
op3val:0x32000007; valaddr_reg:x3; val_offset:93213*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93213*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31072:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ce318 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x343744 and fs3 == 0 and fe3 == 0x64 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ce318; op2val:0x343744;
op3val:0x3200000f; valaddr_reg:x3; val_offset:93216*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93216*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31073:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ce318 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x343744 and fs3 == 0 and fe3 == 0x64 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ce318; op2val:0x343744;
op3val:0x3200001f; valaddr_reg:x3; val_offset:93219*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93219*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31074:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ce318 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x343744 and fs3 == 0 and fe3 == 0x64 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ce318; op2val:0x343744;
op3val:0x3200003f; valaddr_reg:x3; val_offset:93222*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93222*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31075:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ce318 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x343744 and fs3 == 0 and fe3 == 0x64 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ce318; op2val:0x343744;
op3val:0x3200007f; valaddr_reg:x3; val_offset:93225*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93225*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31076:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ce318 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x343744 and fs3 == 0 and fe3 == 0x64 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ce318; op2val:0x343744;
op3val:0x320000ff; valaddr_reg:x3; val_offset:93228*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93228*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31077:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ce318 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x343744 and fs3 == 0 and fe3 == 0x64 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ce318; op2val:0x343744;
op3val:0x320001ff; valaddr_reg:x3; val_offset:93231*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93231*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31078:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ce318 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x343744 and fs3 == 0 and fe3 == 0x64 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ce318; op2val:0x343744;
op3val:0x320003ff; valaddr_reg:x3; val_offset:93234*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93234*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31079:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ce318 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x343744 and fs3 == 0 and fe3 == 0x64 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ce318; op2val:0x343744;
op3val:0x320007ff; valaddr_reg:x3; val_offset:93237*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93237*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31080:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ce318 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x343744 and fs3 == 0 and fe3 == 0x64 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ce318; op2val:0x343744;
op3val:0x32000fff; valaddr_reg:x3; val_offset:93240*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93240*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31081:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ce318 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x343744 and fs3 == 0 and fe3 == 0x64 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ce318; op2val:0x343744;
op3val:0x32001fff; valaddr_reg:x3; val_offset:93243*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93243*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31082:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ce318 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x343744 and fs3 == 0 and fe3 == 0x64 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ce318; op2val:0x343744;
op3val:0x32003fff; valaddr_reg:x3; val_offset:93246*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93246*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31083:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ce318 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x343744 and fs3 == 0 and fe3 == 0x64 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ce318; op2val:0x343744;
op3val:0x32007fff; valaddr_reg:x3; val_offset:93249*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93249*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31084:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ce318 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x343744 and fs3 == 0 and fe3 == 0x64 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ce318; op2val:0x343744;
op3val:0x3200ffff; valaddr_reg:x3; val_offset:93252*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93252*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31085:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ce318 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x343744 and fs3 == 0 and fe3 == 0x64 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ce318; op2val:0x343744;
op3val:0x3201ffff; valaddr_reg:x3; val_offset:93255*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93255*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31086:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ce318 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x343744 and fs3 == 0 and fe3 == 0x64 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ce318; op2val:0x343744;
op3val:0x3203ffff; valaddr_reg:x3; val_offset:93258*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93258*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31087:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ce318 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x343744 and fs3 == 0 and fe3 == 0x64 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ce318; op2val:0x343744;
op3val:0x3207ffff; valaddr_reg:x3; val_offset:93261*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93261*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31088:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ce318 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x343744 and fs3 == 0 and fe3 == 0x64 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ce318; op2val:0x343744;
op3val:0x320fffff; valaddr_reg:x3; val_offset:93264*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93264*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31089:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ce318 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x343744 and fs3 == 0 and fe3 == 0x64 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ce318; op2val:0x343744;
op3val:0x321fffff; valaddr_reg:x3; val_offset:93267*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93267*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31090:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ce318 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x343744 and fs3 == 0 and fe3 == 0x64 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ce318; op2val:0x343744;
op3val:0x323fffff; valaddr_reg:x3; val_offset:93270*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93270*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31091:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ce318 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x343744 and fs3 == 0 and fe3 == 0x64 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ce318; op2val:0x343744;
op3val:0x32400000; valaddr_reg:x3; val_offset:93273*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93273*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31092:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ce318 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x343744 and fs3 == 0 and fe3 == 0x64 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ce318; op2val:0x343744;
op3val:0x32600000; valaddr_reg:x3; val_offset:93276*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93276*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31093:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ce318 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x343744 and fs3 == 0 and fe3 == 0x64 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ce318; op2val:0x343744;
op3val:0x32700000; valaddr_reg:x3; val_offset:93279*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93279*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31094:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ce318 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x343744 and fs3 == 0 and fe3 == 0x64 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ce318; op2val:0x343744;
op3val:0x32780000; valaddr_reg:x3; val_offset:93282*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93282*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31095:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ce318 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x343744 and fs3 == 0 and fe3 == 0x64 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ce318; op2val:0x343744;
op3val:0x327c0000; valaddr_reg:x3; val_offset:93285*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93285*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31096:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ce318 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x343744 and fs3 == 0 and fe3 == 0x64 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ce318; op2val:0x343744;
op3val:0x327e0000; valaddr_reg:x3; val_offset:93288*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93288*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31097:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ce318 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x343744 and fs3 == 0 and fe3 == 0x64 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ce318; op2val:0x343744;
op3val:0x327f0000; valaddr_reg:x3; val_offset:93291*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93291*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31098:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ce318 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x343744 and fs3 == 0 and fe3 == 0x64 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ce318; op2val:0x343744;
op3val:0x327f8000; valaddr_reg:x3; val_offset:93294*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93294*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31099:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ce318 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x343744 and fs3 == 0 and fe3 == 0x64 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ce318; op2val:0x343744;
op3val:0x327fc000; valaddr_reg:x3; val_offset:93297*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93297*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31100:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ce318 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x343744 and fs3 == 0 and fe3 == 0x64 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ce318; op2val:0x343744;
op3val:0x327fe000; valaddr_reg:x3; val_offset:93300*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93300*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31101:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ce318 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x343744 and fs3 == 0 and fe3 == 0x64 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ce318; op2val:0x343744;
op3val:0x327ff000; valaddr_reg:x3; val_offset:93303*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93303*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31102:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ce318 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x343744 and fs3 == 0 and fe3 == 0x64 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ce318; op2val:0x343744;
op3val:0x327ff800; valaddr_reg:x3; val_offset:93306*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93306*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31103:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ce318 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x343744 and fs3 == 0 and fe3 == 0x64 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ce318; op2val:0x343744;
op3val:0x327ffc00; valaddr_reg:x3; val_offset:93309*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93309*0 + 3*242*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2132513138,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2159786939,32,FLEN)
NAN_BOXED(2132513138,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2160066559,32,FLEN)
NAN_BOXED(2132513138,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2160066560,32,FLEN)
NAN_BOXED(2132513138,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2160346180,32,FLEN)
NAN_BOXED(2132513138,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2160905420,32,FLEN)
NAN_BOXED(2132513138,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2161864118,32,FLEN)
NAN_BOXED(2132513138,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2162163712,32,FLEN)
NAN_BOXED(2132513138,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2162583142,32,FLEN)
NAN_BOXED(2132513138,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2163062491,32,FLEN)
NAN_BOXED(2132513138,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2163212288,32,FLEN)
NAN_BOXED(2132513138,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2163736576,32,FLEN)
NAN_BOXED(2132513138,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2163998720,32,FLEN)
NAN_BOXED(2132513138,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164129792,32,FLEN)
NAN_BOXED(2132513138,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164195328,32,FLEN)
NAN_BOXED(2132513138,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164228096,32,FLEN)
NAN_BOXED(2132513138,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164244480,32,FLEN)
NAN_BOXED(2132513138,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164252672,32,FLEN)
NAN_BOXED(2132513138,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164256768,32,FLEN)
NAN_BOXED(2132513138,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164258816,32,FLEN)
NAN_BOXED(2132513138,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164259840,32,FLEN)
NAN_BOXED(2132513138,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260352,32,FLEN)
NAN_BOXED(2132513138,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260608,32,FLEN)
NAN_BOXED(2132513138,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260736,32,FLEN)
NAN_BOXED(2132513138,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260800,32,FLEN)
NAN_BOXED(2132513138,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260832,32,FLEN)
NAN_BOXED(2132513138,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260848,32,FLEN)
NAN_BOXED(2132513138,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260856,32,FLEN)
NAN_BOXED(2132513138,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260860,32,FLEN)
NAN_BOXED(2132513138,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260862,32,FLEN)
NAN_BOXED(2132513138,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260863,32,FLEN)
NAN_BOXED(2132566188,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2132566188,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483651,32,FLEN)
NAN_BOXED(2132566188,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483655,32,FLEN)
NAN_BOXED(2132566188,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149161369,32,FLEN)
NAN_BOXED(2132566188,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149880393,32,FLEN)
NAN_BOXED(2132566188,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2150839091,32,FLEN)
NAN_BOXED(2132566188,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151078765,32,FLEN)
NAN_BOXED(2132566188,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151398331,32,FLEN)
NAN_BOXED(2132566188,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151957572,32,FLEN)
NAN_BOXED(2132566188,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2152516812,32,FLEN)
NAN_BOXED(2132566188,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2153475510,32,FLEN)
NAN_BOXED(2132566188,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154194534,32,FLEN)
NAN_BOXED(2132566188,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154673883,32,FLEN)
NAN_BOXED(2132566188,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872248,32,FLEN)
NAN_BOXED(2132566188,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872252,32,FLEN)
NAN_BOXED(2132566188,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2132566188,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332033024,32,FLEN)
NAN_BOXED(2132566188,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332033025,32,FLEN)
NAN_BOXED(2132566188,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332033027,32,FLEN)
NAN_BOXED(2132566188,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332033031,32,FLEN)
NAN_BOXED(2132566188,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332033039,32,FLEN)
NAN_BOXED(2132566188,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332033055,32,FLEN)
NAN_BOXED(2132566188,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332033087,32,FLEN)
NAN_BOXED(2132566188,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332033151,32,FLEN)
NAN_BOXED(2132566188,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332033279,32,FLEN)
NAN_BOXED(2132566188,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332033535,32,FLEN)
NAN_BOXED(2132566188,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332034047,32,FLEN)
NAN_BOXED(2132566188,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332035071,32,FLEN)
NAN_BOXED(2132566188,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332037119,32,FLEN)
NAN_BOXED(2132566188,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332041215,32,FLEN)
NAN_BOXED(2132566188,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332049407,32,FLEN)
NAN_BOXED(2132566188,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332065791,32,FLEN)
NAN_BOXED(2132566188,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332098559,32,FLEN)
NAN_BOXED(2132566188,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332164095,32,FLEN)
NAN_BOXED(2132566188,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332295167,32,FLEN)
NAN_BOXED(2132566188,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332557311,32,FLEN)
NAN_BOXED(2132566188,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2333081599,32,FLEN)
NAN_BOXED(2132566188,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2334130175,32,FLEN)
NAN_BOXED(2132566188,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2336227327,32,FLEN)
NAN_BOXED(2132566188,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2336227328,32,FLEN)
NAN_BOXED(2132566188,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2338324480,32,FLEN)
NAN_BOXED(2132566188,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2339373056,32,FLEN)
NAN_BOXED(2132566188,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2339897344,32,FLEN)
NAN_BOXED(2132566188,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340159488,32,FLEN)
NAN_BOXED(2132566188,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340290560,32,FLEN)
NAN_BOXED(2132566188,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340356096,32,FLEN)
NAN_BOXED(2132566188,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340388864,32,FLEN)
NAN_BOXED(2132566188,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340405248,32,FLEN)
NAN_BOXED(2132566188,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340413440,32,FLEN)
NAN_BOXED(2132566188,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340417536,32,FLEN)
NAN_BOXED(2132566188,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340419584,32,FLEN)
NAN_BOXED(2132566188,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340420608,32,FLEN)
NAN_BOXED(2132566188,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340421120,32,FLEN)
NAN_BOXED(2132566188,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340421376,32,FLEN)
NAN_BOXED(2132566188,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340421504,32,FLEN)
NAN_BOXED(2132566188,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340421568,32,FLEN)
NAN_BOXED(2132566188,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340421600,32,FLEN)
NAN_BOXED(2132566188,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340421616,32,FLEN)
NAN_BOXED(2132566188,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340421624,32,FLEN)
NAN_BOXED(2132566188,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340421628,32,FLEN)
NAN_BOXED(2132566188,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340421630,32,FLEN)
NAN_BOXED(2132566188,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340421631,32,FLEN)
NAN_BOXED(2132599576,32,FLEN)
NAN_BOXED(3422020,32,FLEN)
NAN_BOXED(838860800,32,FLEN)
NAN_BOXED(2132599576,32,FLEN)
NAN_BOXED(3422020,32,FLEN)
NAN_BOXED(838860801,32,FLEN)
NAN_BOXED(2132599576,32,FLEN)
NAN_BOXED(3422020,32,FLEN)
NAN_BOXED(838860803,32,FLEN)
NAN_BOXED(2132599576,32,FLEN)
NAN_BOXED(3422020,32,FLEN)
NAN_BOXED(838860807,32,FLEN)
NAN_BOXED(2132599576,32,FLEN)
NAN_BOXED(3422020,32,FLEN)
NAN_BOXED(838860815,32,FLEN)
NAN_BOXED(2132599576,32,FLEN)
NAN_BOXED(3422020,32,FLEN)
NAN_BOXED(838860831,32,FLEN)
NAN_BOXED(2132599576,32,FLEN)
NAN_BOXED(3422020,32,FLEN)
NAN_BOXED(838860863,32,FLEN)
NAN_BOXED(2132599576,32,FLEN)
NAN_BOXED(3422020,32,FLEN)
NAN_BOXED(838860927,32,FLEN)
NAN_BOXED(2132599576,32,FLEN)
NAN_BOXED(3422020,32,FLEN)
NAN_BOXED(838861055,32,FLEN)
NAN_BOXED(2132599576,32,FLEN)
NAN_BOXED(3422020,32,FLEN)
NAN_BOXED(838861311,32,FLEN)
NAN_BOXED(2132599576,32,FLEN)
NAN_BOXED(3422020,32,FLEN)
NAN_BOXED(838861823,32,FLEN)
NAN_BOXED(2132599576,32,FLEN)
NAN_BOXED(3422020,32,FLEN)
NAN_BOXED(838862847,32,FLEN)
NAN_BOXED(2132599576,32,FLEN)
NAN_BOXED(3422020,32,FLEN)
NAN_BOXED(838864895,32,FLEN)
NAN_BOXED(2132599576,32,FLEN)
NAN_BOXED(3422020,32,FLEN)
NAN_BOXED(838868991,32,FLEN)
NAN_BOXED(2132599576,32,FLEN)
NAN_BOXED(3422020,32,FLEN)
NAN_BOXED(838877183,32,FLEN)
NAN_BOXED(2132599576,32,FLEN)
NAN_BOXED(3422020,32,FLEN)
NAN_BOXED(838893567,32,FLEN)
NAN_BOXED(2132599576,32,FLEN)
NAN_BOXED(3422020,32,FLEN)
NAN_BOXED(838926335,32,FLEN)
NAN_BOXED(2132599576,32,FLEN)
NAN_BOXED(3422020,32,FLEN)
NAN_BOXED(838991871,32,FLEN)
NAN_BOXED(2132599576,32,FLEN)
NAN_BOXED(3422020,32,FLEN)
NAN_BOXED(839122943,32,FLEN)
NAN_BOXED(2132599576,32,FLEN)
NAN_BOXED(3422020,32,FLEN)
NAN_BOXED(839385087,32,FLEN)
NAN_BOXED(2132599576,32,FLEN)
NAN_BOXED(3422020,32,FLEN)
NAN_BOXED(839909375,32,FLEN)
NAN_BOXED(2132599576,32,FLEN)
NAN_BOXED(3422020,32,FLEN)
NAN_BOXED(840957951,32,FLEN)
NAN_BOXED(2132599576,32,FLEN)
NAN_BOXED(3422020,32,FLEN)
NAN_BOXED(843055103,32,FLEN)
NAN_BOXED(2132599576,32,FLEN)
NAN_BOXED(3422020,32,FLEN)
NAN_BOXED(843055104,32,FLEN)
NAN_BOXED(2132599576,32,FLEN)
NAN_BOXED(3422020,32,FLEN)
NAN_BOXED(845152256,32,FLEN)
NAN_BOXED(2132599576,32,FLEN)
NAN_BOXED(3422020,32,FLEN)
NAN_BOXED(846200832,32,FLEN)
NAN_BOXED(2132599576,32,FLEN)
NAN_BOXED(3422020,32,FLEN)
NAN_BOXED(846725120,32,FLEN)
NAN_BOXED(2132599576,32,FLEN)
NAN_BOXED(3422020,32,FLEN)
NAN_BOXED(846987264,32,FLEN)
NAN_BOXED(2132599576,32,FLEN)
NAN_BOXED(3422020,32,FLEN)
NAN_BOXED(847118336,32,FLEN)
NAN_BOXED(2132599576,32,FLEN)
NAN_BOXED(3422020,32,FLEN)
NAN_BOXED(847183872,32,FLEN)
NAN_BOXED(2132599576,32,FLEN)
NAN_BOXED(3422020,32,FLEN)
NAN_BOXED(847216640,32,FLEN)
NAN_BOXED(2132599576,32,FLEN)
NAN_BOXED(3422020,32,FLEN)
NAN_BOXED(847233024,32,FLEN)
NAN_BOXED(2132599576,32,FLEN)
NAN_BOXED(3422020,32,FLEN)
NAN_BOXED(847241216,32,FLEN)
NAN_BOXED(2132599576,32,FLEN)
NAN_BOXED(3422020,32,FLEN)
NAN_BOXED(847245312,32,FLEN)
NAN_BOXED(2132599576,32,FLEN)
NAN_BOXED(3422020,32,FLEN)
NAN_BOXED(847247360,32,FLEN)
NAN_BOXED(2132599576,32,FLEN)
NAN_BOXED(3422020,32,FLEN)
NAN_BOXED(847248384,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
