
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:17:59 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_31872:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f6064 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x336679 and fs3 == 0 and fe3 == 0x6b and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f6064; op2val:0x336679;
op3val:0x3580000f; valaddr_reg:x3; val_offset:95616*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95616*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31873:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f6064 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x336679 and fs3 == 0 and fe3 == 0x6b and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f6064; op2val:0x336679;
op3val:0x3580001f; valaddr_reg:x3; val_offset:95619*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95619*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31874:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f6064 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x336679 and fs3 == 0 and fe3 == 0x6b and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f6064; op2val:0x336679;
op3val:0x3580003f; valaddr_reg:x3; val_offset:95622*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95622*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31875:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f6064 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x336679 and fs3 == 0 and fe3 == 0x6b and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f6064; op2val:0x336679;
op3val:0x3580007f; valaddr_reg:x3; val_offset:95625*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95625*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31876:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f6064 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x336679 and fs3 == 0 and fe3 == 0x6b and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f6064; op2val:0x336679;
op3val:0x358000ff; valaddr_reg:x3; val_offset:95628*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95628*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31877:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f6064 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x336679 and fs3 == 0 and fe3 == 0x6b and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f6064; op2val:0x336679;
op3val:0x358001ff; valaddr_reg:x3; val_offset:95631*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95631*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31878:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f6064 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x336679 and fs3 == 0 and fe3 == 0x6b and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f6064; op2val:0x336679;
op3val:0x358003ff; valaddr_reg:x3; val_offset:95634*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95634*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31879:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f6064 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x336679 and fs3 == 0 and fe3 == 0x6b and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f6064; op2val:0x336679;
op3val:0x358007ff; valaddr_reg:x3; val_offset:95637*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95637*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31880:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f6064 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x336679 and fs3 == 0 and fe3 == 0x6b and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f6064; op2val:0x336679;
op3val:0x35800fff; valaddr_reg:x3; val_offset:95640*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95640*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31881:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f6064 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x336679 and fs3 == 0 and fe3 == 0x6b and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f6064; op2val:0x336679;
op3val:0x35801fff; valaddr_reg:x3; val_offset:95643*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95643*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31882:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f6064 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x336679 and fs3 == 0 and fe3 == 0x6b and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f6064; op2val:0x336679;
op3val:0x35803fff; valaddr_reg:x3; val_offset:95646*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95646*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31883:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f6064 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x336679 and fs3 == 0 and fe3 == 0x6b and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f6064; op2val:0x336679;
op3val:0x35807fff; valaddr_reg:x3; val_offset:95649*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95649*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31884:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f6064 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x336679 and fs3 == 0 and fe3 == 0x6b and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f6064; op2val:0x336679;
op3val:0x3580ffff; valaddr_reg:x3; val_offset:95652*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95652*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31885:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f6064 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x336679 and fs3 == 0 and fe3 == 0x6b and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f6064; op2val:0x336679;
op3val:0x3581ffff; valaddr_reg:x3; val_offset:95655*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95655*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31886:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f6064 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x336679 and fs3 == 0 and fe3 == 0x6b and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f6064; op2val:0x336679;
op3val:0x3583ffff; valaddr_reg:x3; val_offset:95658*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95658*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31887:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f6064 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x336679 and fs3 == 0 and fe3 == 0x6b and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f6064; op2val:0x336679;
op3val:0x3587ffff; valaddr_reg:x3; val_offset:95661*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95661*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31888:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f6064 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x336679 and fs3 == 0 and fe3 == 0x6b and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f6064; op2val:0x336679;
op3val:0x358fffff; valaddr_reg:x3; val_offset:95664*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95664*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31889:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f6064 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x336679 and fs3 == 0 and fe3 == 0x6b and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f6064; op2val:0x336679;
op3val:0x359fffff; valaddr_reg:x3; val_offset:95667*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95667*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31890:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f6064 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x336679 and fs3 == 0 and fe3 == 0x6b and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f6064; op2val:0x336679;
op3val:0x35bfffff; valaddr_reg:x3; val_offset:95670*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95670*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31891:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f6064 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x336679 and fs3 == 0 and fe3 == 0x6b and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f6064; op2val:0x336679;
op3val:0x35c00000; valaddr_reg:x3; val_offset:95673*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95673*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31892:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f6064 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x336679 and fs3 == 0 and fe3 == 0x6b and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f6064; op2val:0x336679;
op3val:0x35e00000; valaddr_reg:x3; val_offset:95676*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95676*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31893:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f6064 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x336679 and fs3 == 0 and fe3 == 0x6b and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f6064; op2val:0x336679;
op3val:0x35f00000; valaddr_reg:x3; val_offset:95679*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95679*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31894:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f6064 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x336679 and fs3 == 0 and fe3 == 0x6b and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f6064; op2val:0x336679;
op3val:0x35f80000; valaddr_reg:x3; val_offset:95682*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95682*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31895:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f6064 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x336679 and fs3 == 0 and fe3 == 0x6b and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f6064; op2val:0x336679;
op3val:0x35fc0000; valaddr_reg:x3; val_offset:95685*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95685*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31896:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f6064 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x336679 and fs3 == 0 and fe3 == 0x6b and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f6064; op2val:0x336679;
op3val:0x35fe0000; valaddr_reg:x3; val_offset:95688*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95688*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31897:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f6064 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x336679 and fs3 == 0 and fe3 == 0x6b and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f6064; op2val:0x336679;
op3val:0x35ff0000; valaddr_reg:x3; val_offset:95691*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95691*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31898:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f6064 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x336679 and fs3 == 0 and fe3 == 0x6b and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f6064; op2val:0x336679;
op3val:0x35ff8000; valaddr_reg:x3; val_offset:95694*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95694*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31899:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f6064 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x336679 and fs3 == 0 and fe3 == 0x6b and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f6064; op2val:0x336679;
op3val:0x35ffc000; valaddr_reg:x3; val_offset:95697*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95697*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31900:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f6064 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x336679 and fs3 == 0 and fe3 == 0x6b and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f6064; op2val:0x336679;
op3val:0x35ffe000; valaddr_reg:x3; val_offset:95700*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95700*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31901:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f6064 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x336679 and fs3 == 0 and fe3 == 0x6b and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f6064; op2val:0x336679;
op3val:0x35fff000; valaddr_reg:x3; val_offset:95703*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95703*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31902:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f6064 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x336679 and fs3 == 0 and fe3 == 0x6b and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f6064; op2val:0x336679;
op3val:0x35fff800; valaddr_reg:x3; val_offset:95706*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95706*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31903:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f6064 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x336679 and fs3 == 0 and fe3 == 0x6b and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f6064; op2val:0x336679;
op3val:0x35fffc00; valaddr_reg:x3; val_offset:95709*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95709*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31904:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f6064 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x336679 and fs3 == 0 and fe3 == 0x6b and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f6064; op2val:0x336679;
op3val:0x35fffe00; valaddr_reg:x3; val_offset:95712*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95712*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31905:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f6064 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x336679 and fs3 == 0 and fe3 == 0x6b and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f6064; op2val:0x336679;
op3val:0x35ffff00; valaddr_reg:x3; val_offset:95715*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95715*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31906:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f6064 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x336679 and fs3 == 0 and fe3 == 0x6b and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f6064; op2val:0x336679;
op3val:0x35ffff80; valaddr_reg:x3; val_offset:95718*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95718*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31907:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f6064 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x336679 and fs3 == 0 and fe3 == 0x6b and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f6064; op2val:0x336679;
op3val:0x35ffffc0; valaddr_reg:x3; val_offset:95721*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95721*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31908:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f6064 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x336679 and fs3 == 0 and fe3 == 0x6b and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f6064; op2val:0x336679;
op3val:0x35ffffe0; valaddr_reg:x3; val_offset:95724*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95724*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31909:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f6064 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x336679 and fs3 == 0 and fe3 == 0x6b and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f6064; op2val:0x336679;
op3val:0x35fffff0; valaddr_reg:x3; val_offset:95727*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95727*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31910:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f6064 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x336679 and fs3 == 0 and fe3 == 0x6b and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f6064; op2val:0x336679;
op3val:0x35fffff8; valaddr_reg:x3; val_offset:95730*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95730*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31911:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f6064 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x336679 and fs3 == 0 and fe3 == 0x6b and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f6064; op2val:0x336679;
op3val:0x35fffffc; valaddr_reg:x3; val_offset:95733*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95733*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31912:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f6064 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x336679 and fs3 == 0 and fe3 == 0x6b and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f6064; op2val:0x336679;
op3val:0x35fffffe; valaddr_reg:x3; val_offset:95736*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95736*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31913:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f6064 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x336679 and fs3 == 0 and fe3 == 0x6b and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f6064; op2val:0x336679;
op3val:0x35ffffff; valaddr_reg:x3; val_offset:95739*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95739*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31914:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f6064 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x336679 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f6064; op2val:0x336679;
op3val:0x3f800001; valaddr_reg:x3; val_offset:95742*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95742*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31915:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f6064 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x336679 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f6064; op2val:0x336679;
op3val:0x3f800003; valaddr_reg:x3; val_offset:95745*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95745*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31916:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f6064 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x336679 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f6064; op2val:0x336679;
op3val:0x3f800007; valaddr_reg:x3; val_offset:95748*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95748*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31917:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f6064 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x336679 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f6064; op2val:0x336679;
op3val:0x3f999999; valaddr_reg:x3; val_offset:95751*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95751*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31918:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f6064 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x336679 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f6064; op2val:0x336679;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:95754*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95754*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31919:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f6064 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x336679 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f6064; op2val:0x336679;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:95757*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95757*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31920:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f6064 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x336679 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f6064; op2val:0x336679;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:95760*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95760*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31921:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f6064 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x336679 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f6064; op2val:0x336679;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:95763*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95763*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31922:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f6064 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x336679 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f6064; op2val:0x336679;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:95766*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95766*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31923:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f6064 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x336679 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f6064; op2val:0x336679;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:95769*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95769*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31924:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f6064 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x336679 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f6064; op2val:0x336679;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:95772*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95772*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31925:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f6064 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x336679 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f6064; op2val:0x336679;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:95775*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95775*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31926:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f6064 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x336679 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f6064; op2val:0x336679;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:95778*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95778*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31927:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f6064 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x336679 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f6064; op2val:0x336679;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:95781*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95781*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31928:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f6064 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x336679 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f6064; op2val:0x336679;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:95784*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95784*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31929:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f6064 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x336679 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f6064; op2val:0x336679;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:95787*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95787*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31930:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f696e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4d8e3c and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f696e; op2val:0x3fcd8e3c;
op3val:0x64000000; valaddr_reg:x3; val_offset:95790*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95790*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31931:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f696e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4d8e3c and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f696e; op2val:0x3fcd8e3c;
op3val:0x64000001; valaddr_reg:x3; val_offset:95793*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95793*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31932:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f696e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4d8e3c and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f696e; op2val:0x3fcd8e3c;
op3val:0x64000003; valaddr_reg:x3; val_offset:95796*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95796*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31933:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f696e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4d8e3c and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f696e; op2val:0x3fcd8e3c;
op3val:0x64000007; valaddr_reg:x3; val_offset:95799*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95799*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31934:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f696e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4d8e3c and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f696e; op2val:0x3fcd8e3c;
op3val:0x6400000f; valaddr_reg:x3; val_offset:95802*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95802*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31935:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f696e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4d8e3c and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f696e; op2val:0x3fcd8e3c;
op3val:0x6400001f; valaddr_reg:x3; val_offset:95805*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95805*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31936:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f696e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4d8e3c and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f696e; op2val:0x3fcd8e3c;
op3val:0x6400003f; valaddr_reg:x3; val_offset:95808*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95808*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31937:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f696e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4d8e3c and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f696e; op2val:0x3fcd8e3c;
op3val:0x6400007f; valaddr_reg:x3; val_offset:95811*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95811*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31938:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f696e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4d8e3c and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f696e; op2val:0x3fcd8e3c;
op3val:0x640000ff; valaddr_reg:x3; val_offset:95814*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95814*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31939:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f696e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4d8e3c and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f696e; op2val:0x3fcd8e3c;
op3val:0x640001ff; valaddr_reg:x3; val_offset:95817*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95817*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31940:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f696e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4d8e3c and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f696e; op2val:0x3fcd8e3c;
op3val:0x640003ff; valaddr_reg:x3; val_offset:95820*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95820*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31941:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f696e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4d8e3c and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f696e; op2val:0x3fcd8e3c;
op3val:0x640007ff; valaddr_reg:x3; val_offset:95823*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95823*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31942:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f696e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4d8e3c and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f696e; op2val:0x3fcd8e3c;
op3val:0x64000fff; valaddr_reg:x3; val_offset:95826*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95826*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31943:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f696e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4d8e3c and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f696e; op2val:0x3fcd8e3c;
op3val:0x64001fff; valaddr_reg:x3; val_offset:95829*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95829*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31944:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f696e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4d8e3c and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f696e; op2val:0x3fcd8e3c;
op3val:0x64003fff; valaddr_reg:x3; val_offset:95832*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95832*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31945:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f696e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4d8e3c and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f696e; op2val:0x3fcd8e3c;
op3val:0x64007fff; valaddr_reg:x3; val_offset:95835*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95835*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31946:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f696e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4d8e3c and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f696e; op2val:0x3fcd8e3c;
op3val:0x6400ffff; valaddr_reg:x3; val_offset:95838*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95838*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31947:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f696e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4d8e3c and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f696e; op2val:0x3fcd8e3c;
op3val:0x6401ffff; valaddr_reg:x3; val_offset:95841*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95841*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31948:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f696e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4d8e3c and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f696e; op2val:0x3fcd8e3c;
op3val:0x6403ffff; valaddr_reg:x3; val_offset:95844*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95844*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31949:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f696e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4d8e3c and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f696e; op2val:0x3fcd8e3c;
op3val:0x6407ffff; valaddr_reg:x3; val_offset:95847*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95847*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31950:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f696e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4d8e3c and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f696e; op2val:0x3fcd8e3c;
op3val:0x640fffff; valaddr_reg:x3; val_offset:95850*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95850*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31951:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f696e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4d8e3c and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f696e; op2val:0x3fcd8e3c;
op3val:0x641fffff; valaddr_reg:x3; val_offset:95853*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95853*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31952:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f696e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4d8e3c and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f696e; op2val:0x3fcd8e3c;
op3val:0x643fffff; valaddr_reg:x3; val_offset:95856*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95856*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31953:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f696e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4d8e3c and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f696e; op2val:0x3fcd8e3c;
op3val:0x64400000; valaddr_reg:x3; val_offset:95859*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95859*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31954:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f696e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4d8e3c and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f696e; op2val:0x3fcd8e3c;
op3val:0x64600000; valaddr_reg:x3; val_offset:95862*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95862*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31955:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f696e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4d8e3c and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f696e; op2val:0x3fcd8e3c;
op3val:0x64700000; valaddr_reg:x3; val_offset:95865*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95865*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31956:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f696e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4d8e3c and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f696e; op2val:0x3fcd8e3c;
op3val:0x64780000; valaddr_reg:x3; val_offset:95868*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95868*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31957:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f696e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4d8e3c and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f696e; op2val:0x3fcd8e3c;
op3val:0x647c0000; valaddr_reg:x3; val_offset:95871*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95871*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31958:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f696e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4d8e3c and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f696e; op2val:0x3fcd8e3c;
op3val:0x647e0000; valaddr_reg:x3; val_offset:95874*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95874*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31959:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f696e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4d8e3c and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f696e; op2val:0x3fcd8e3c;
op3val:0x647f0000; valaddr_reg:x3; val_offset:95877*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95877*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31960:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f696e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4d8e3c and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f696e; op2val:0x3fcd8e3c;
op3val:0x647f8000; valaddr_reg:x3; val_offset:95880*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95880*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31961:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f696e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4d8e3c and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f696e; op2val:0x3fcd8e3c;
op3val:0x647fc000; valaddr_reg:x3; val_offset:95883*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95883*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31962:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f696e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4d8e3c and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f696e; op2val:0x3fcd8e3c;
op3val:0x647fe000; valaddr_reg:x3; val_offset:95886*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95886*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31963:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f696e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4d8e3c and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f696e; op2val:0x3fcd8e3c;
op3val:0x647ff000; valaddr_reg:x3; val_offset:95889*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95889*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31964:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f696e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4d8e3c and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f696e; op2val:0x3fcd8e3c;
op3val:0x647ff800; valaddr_reg:x3; val_offset:95892*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95892*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31965:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f696e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4d8e3c and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f696e; op2val:0x3fcd8e3c;
op3val:0x647ffc00; valaddr_reg:x3; val_offset:95895*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95895*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31966:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f696e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4d8e3c and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f696e; op2val:0x3fcd8e3c;
op3val:0x647ffe00; valaddr_reg:x3; val_offset:95898*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95898*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31967:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f696e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4d8e3c and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f696e; op2val:0x3fcd8e3c;
op3val:0x647fff00; valaddr_reg:x3; val_offset:95901*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95901*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31968:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f696e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4d8e3c and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f696e; op2val:0x3fcd8e3c;
op3val:0x647fff80; valaddr_reg:x3; val_offset:95904*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95904*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31969:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f696e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4d8e3c and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f696e; op2val:0x3fcd8e3c;
op3val:0x647fffc0; valaddr_reg:x3; val_offset:95907*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95907*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31970:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f696e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4d8e3c and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f696e; op2val:0x3fcd8e3c;
op3val:0x647fffe0; valaddr_reg:x3; val_offset:95910*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95910*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31971:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f696e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4d8e3c and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f696e; op2val:0x3fcd8e3c;
op3val:0x647ffff0; valaddr_reg:x3; val_offset:95913*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95913*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31972:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f696e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4d8e3c and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f696e; op2val:0x3fcd8e3c;
op3val:0x647ffff8; valaddr_reg:x3; val_offset:95916*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95916*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31973:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f696e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4d8e3c and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f696e; op2val:0x3fcd8e3c;
op3val:0x647ffffc; valaddr_reg:x3; val_offset:95919*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95919*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31974:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f696e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4d8e3c and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f696e; op2val:0x3fcd8e3c;
op3val:0x647ffffe; valaddr_reg:x3; val_offset:95922*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95922*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31975:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f696e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4d8e3c and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f696e; op2val:0x3fcd8e3c;
op3val:0x647fffff; valaddr_reg:x3; val_offset:95925*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95925*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31976:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f696e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4d8e3c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f696e; op2val:0x3fcd8e3c;
op3val:0x7f000001; valaddr_reg:x3; val_offset:95928*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95928*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31977:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f696e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4d8e3c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f696e; op2val:0x3fcd8e3c;
op3val:0x7f000003; valaddr_reg:x3; val_offset:95931*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95931*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31978:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f696e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4d8e3c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f696e; op2val:0x3fcd8e3c;
op3val:0x7f000007; valaddr_reg:x3; val_offset:95934*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95934*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31979:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f696e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4d8e3c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f696e; op2val:0x3fcd8e3c;
op3val:0x7f199999; valaddr_reg:x3; val_offset:95937*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95937*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31980:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f696e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4d8e3c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f696e; op2val:0x3fcd8e3c;
op3val:0x7f249249; valaddr_reg:x3; val_offset:95940*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95940*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31981:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f696e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4d8e3c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f696e; op2val:0x3fcd8e3c;
op3val:0x7f333333; valaddr_reg:x3; val_offset:95943*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95943*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31982:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f696e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4d8e3c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f696e; op2val:0x3fcd8e3c;
op3val:0x7f36db6d; valaddr_reg:x3; val_offset:95946*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95946*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31983:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f696e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4d8e3c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f696e; op2val:0x3fcd8e3c;
op3val:0x7f3bbbbb; valaddr_reg:x3; val_offset:95949*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95949*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31984:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f696e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4d8e3c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f696e; op2val:0x3fcd8e3c;
op3val:0x7f444444; valaddr_reg:x3; val_offset:95952*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95952*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31985:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f696e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4d8e3c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f696e; op2val:0x3fcd8e3c;
op3val:0x7f4ccccc; valaddr_reg:x3; val_offset:95955*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95955*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31986:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f696e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4d8e3c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f696e; op2val:0x3fcd8e3c;
op3val:0x7f5b6db6; valaddr_reg:x3; val_offset:95958*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95958*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31987:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f696e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4d8e3c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f696e; op2val:0x3fcd8e3c;
op3val:0x7f666666; valaddr_reg:x3; val_offset:95961*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95961*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31988:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f696e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4d8e3c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f696e; op2val:0x3fcd8e3c;
op3val:0x7f6db6db; valaddr_reg:x3; val_offset:95964*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95964*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31989:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f696e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4d8e3c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f696e; op2val:0x3fcd8e3c;
op3val:0x7f7ffff8; valaddr_reg:x3; val_offset:95967*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95967*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31990:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f696e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4d8e3c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f696e; op2val:0x3fcd8e3c;
op3val:0x7f7ffffc; valaddr_reg:x3; val_offset:95970*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95970*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31991:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f696e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4d8e3c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f696e; op2val:0x3fcd8e3c;
op3val:0x7f7ffffe; valaddr_reg:x3; val_offset:95973*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95973*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31992:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20191e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x332b2a and fs3 == 0 and fe3 == 0x6e and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20191e; op2val:0x332b2a;
op3val:0x37000000; valaddr_reg:x3; val_offset:95976*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95976*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31993:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20191e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x332b2a and fs3 == 0 and fe3 == 0x6e and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20191e; op2val:0x332b2a;
op3val:0x37000001; valaddr_reg:x3; val_offset:95979*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95979*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31994:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20191e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x332b2a and fs3 == 0 and fe3 == 0x6e and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20191e; op2val:0x332b2a;
op3val:0x37000003; valaddr_reg:x3; val_offset:95982*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95982*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31995:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20191e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x332b2a and fs3 == 0 and fe3 == 0x6e and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20191e; op2val:0x332b2a;
op3val:0x37000007; valaddr_reg:x3; val_offset:95985*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95985*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31996:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20191e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x332b2a and fs3 == 0 and fe3 == 0x6e and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20191e; op2val:0x332b2a;
op3val:0x3700000f; valaddr_reg:x3; val_offset:95988*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95988*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31997:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20191e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x332b2a and fs3 == 0 and fe3 == 0x6e and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20191e; op2val:0x332b2a;
op3val:0x3700001f; valaddr_reg:x3; val_offset:95991*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95991*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31998:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20191e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x332b2a and fs3 == 0 and fe3 == 0x6e and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20191e; op2val:0x332b2a;
op3val:0x3700003f; valaddr_reg:x3; val_offset:95994*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95994*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31999:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20191e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x332b2a and fs3 == 0 and fe3 == 0x6e and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20191e; op2val:0x332b2a;
op3val:0x3700007f; valaddr_reg:x3; val_offset:95997*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95997*0 + 3*249*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2132762724,32,FLEN)
NAN_BOXED(3368569,32,FLEN)
NAN_BOXED(897581071,32,FLEN)
NAN_BOXED(2132762724,32,FLEN)
NAN_BOXED(3368569,32,FLEN)
NAN_BOXED(897581087,32,FLEN)
NAN_BOXED(2132762724,32,FLEN)
NAN_BOXED(3368569,32,FLEN)
NAN_BOXED(897581119,32,FLEN)
NAN_BOXED(2132762724,32,FLEN)
NAN_BOXED(3368569,32,FLEN)
NAN_BOXED(897581183,32,FLEN)
NAN_BOXED(2132762724,32,FLEN)
NAN_BOXED(3368569,32,FLEN)
NAN_BOXED(897581311,32,FLEN)
NAN_BOXED(2132762724,32,FLEN)
NAN_BOXED(3368569,32,FLEN)
NAN_BOXED(897581567,32,FLEN)
NAN_BOXED(2132762724,32,FLEN)
NAN_BOXED(3368569,32,FLEN)
NAN_BOXED(897582079,32,FLEN)
NAN_BOXED(2132762724,32,FLEN)
NAN_BOXED(3368569,32,FLEN)
NAN_BOXED(897583103,32,FLEN)
NAN_BOXED(2132762724,32,FLEN)
NAN_BOXED(3368569,32,FLEN)
NAN_BOXED(897585151,32,FLEN)
NAN_BOXED(2132762724,32,FLEN)
NAN_BOXED(3368569,32,FLEN)
NAN_BOXED(897589247,32,FLEN)
NAN_BOXED(2132762724,32,FLEN)
NAN_BOXED(3368569,32,FLEN)
NAN_BOXED(897597439,32,FLEN)
NAN_BOXED(2132762724,32,FLEN)
NAN_BOXED(3368569,32,FLEN)
NAN_BOXED(897613823,32,FLEN)
NAN_BOXED(2132762724,32,FLEN)
NAN_BOXED(3368569,32,FLEN)
NAN_BOXED(897646591,32,FLEN)
NAN_BOXED(2132762724,32,FLEN)
NAN_BOXED(3368569,32,FLEN)
NAN_BOXED(897712127,32,FLEN)
NAN_BOXED(2132762724,32,FLEN)
NAN_BOXED(3368569,32,FLEN)
NAN_BOXED(897843199,32,FLEN)
NAN_BOXED(2132762724,32,FLEN)
NAN_BOXED(3368569,32,FLEN)
NAN_BOXED(898105343,32,FLEN)
NAN_BOXED(2132762724,32,FLEN)
NAN_BOXED(3368569,32,FLEN)
NAN_BOXED(898629631,32,FLEN)
NAN_BOXED(2132762724,32,FLEN)
NAN_BOXED(3368569,32,FLEN)
NAN_BOXED(899678207,32,FLEN)
NAN_BOXED(2132762724,32,FLEN)
NAN_BOXED(3368569,32,FLEN)
NAN_BOXED(901775359,32,FLEN)
NAN_BOXED(2132762724,32,FLEN)
NAN_BOXED(3368569,32,FLEN)
NAN_BOXED(901775360,32,FLEN)
NAN_BOXED(2132762724,32,FLEN)
NAN_BOXED(3368569,32,FLEN)
NAN_BOXED(903872512,32,FLEN)
NAN_BOXED(2132762724,32,FLEN)
NAN_BOXED(3368569,32,FLEN)
NAN_BOXED(904921088,32,FLEN)
NAN_BOXED(2132762724,32,FLEN)
NAN_BOXED(3368569,32,FLEN)
NAN_BOXED(905445376,32,FLEN)
NAN_BOXED(2132762724,32,FLEN)
NAN_BOXED(3368569,32,FLEN)
NAN_BOXED(905707520,32,FLEN)
NAN_BOXED(2132762724,32,FLEN)
NAN_BOXED(3368569,32,FLEN)
NAN_BOXED(905838592,32,FLEN)
NAN_BOXED(2132762724,32,FLEN)
NAN_BOXED(3368569,32,FLEN)
NAN_BOXED(905904128,32,FLEN)
NAN_BOXED(2132762724,32,FLEN)
NAN_BOXED(3368569,32,FLEN)
NAN_BOXED(905936896,32,FLEN)
NAN_BOXED(2132762724,32,FLEN)
NAN_BOXED(3368569,32,FLEN)
NAN_BOXED(905953280,32,FLEN)
NAN_BOXED(2132762724,32,FLEN)
NAN_BOXED(3368569,32,FLEN)
NAN_BOXED(905961472,32,FLEN)
NAN_BOXED(2132762724,32,FLEN)
NAN_BOXED(3368569,32,FLEN)
NAN_BOXED(905965568,32,FLEN)
NAN_BOXED(2132762724,32,FLEN)
NAN_BOXED(3368569,32,FLEN)
NAN_BOXED(905967616,32,FLEN)
NAN_BOXED(2132762724,32,FLEN)
NAN_BOXED(3368569,32,FLEN)
NAN_BOXED(905968640,32,FLEN)
NAN_BOXED(2132762724,32,FLEN)
NAN_BOXED(3368569,32,FLEN)
NAN_BOXED(905969152,32,FLEN)
NAN_BOXED(2132762724,32,FLEN)
NAN_BOXED(3368569,32,FLEN)
NAN_BOXED(905969408,32,FLEN)
NAN_BOXED(2132762724,32,FLEN)
NAN_BOXED(3368569,32,FLEN)
NAN_BOXED(905969536,32,FLEN)
NAN_BOXED(2132762724,32,FLEN)
NAN_BOXED(3368569,32,FLEN)
NAN_BOXED(905969600,32,FLEN)
NAN_BOXED(2132762724,32,FLEN)
NAN_BOXED(3368569,32,FLEN)
NAN_BOXED(905969632,32,FLEN)
NAN_BOXED(2132762724,32,FLEN)
NAN_BOXED(3368569,32,FLEN)
NAN_BOXED(905969648,32,FLEN)
NAN_BOXED(2132762724,32,FLEN)
NAN_BOXED(3368569,32,FLEN)
NAN_BOXED(905969656,32,FLEN)
NAN_BOXED(2132762724,32,FLEN)
NAN_BOXED(3368569,32,FLEN)
NAN_BOXED(905969660,32,FLEN)
NAN_BOXED(2132762724,32,FLEN)
NAN_BOXED(3368569,32,FLEN)
NAN_BOXED(905969662,32,FLEN)
NAN_BOXED(2132762724,32,FLEN)
NAN_BOXED(3368569,32,FLEN)
NAN_BOXED(905969663,32,FLEN)
NAN_BOXED(2132762724,32,FLEN)
NAN_BOXED(3368569,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2132762724,32,FLEN)
NAN_BOXED(3368569,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2132762724,32,FLEN)
NAN_BOXED(3368569,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2132762724,32,FLEN)
NAN_BOXED(3368569,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2132762724,32,FLEN)
NAN_BOXED(3368569,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2132762724,32,FLEN)
NAN_BOXED(3368569,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2132762724,32,FLEN)
NAN_BOXED(3368569,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2132762724,32,FLEN)
NAN_BOXED(3368569,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2132762724,32,FLEN)
NAN_BOXED(3368569,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2132762724,32,FLEN)
NAN_BOXED(3368569,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2132762724,32,FLEN)
NAN_BOXED(3368569,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2132762724,32,FLEN)
NAN_BOXED(3368569,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2132762724,32,FLEN)
NAN_BOXED(3368569,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2132762724,32,FLEN)
NAN_BOXED(3368569,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2132762724,32,FLEN)
NAN_BOXED(3368569,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2132762724,32,FLEN)
NAN_BOXED(3368569,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2132765038,32,FLEN)
NAN_BOXED(1070435900,32,FLEN)
NAN_BOXED(1677721600,32,FLEN)
NAN_BOXED(2132765038,32,FLEN)
NAN_BOXED(1070435900,32,FLEN)
NAN_BOXED(1677721601,32,FLEN)
NAN_BOXED(2132765038,32,FLEN)
NAN_BOXED(1070435900,32,FLEN)
NAN_BOXED(1677721603,32,FLEN)
NAN_BOXED(2132765038,32,FLEN)
NAN_BOXED(1070435900,32,FLEN)
NAN_BOXED(1677721607,32,FLEN)
NAN_BOXED(2132765038,32,FLEN)
NAN_BOXED(1070435900,32,FLEN)
NAN_BOXED(1677721615,32,FLEN)
NAN_BOXED(2132765038,32,FLEN)
NAN_BOXED(1070435900,32,FLEN)
NAN_BOXED(1677721631,32,FLEN)
NAN_BOXED(2132765038,32,FLEN)
NAN_BOXED(1070435900,32,FLEN)
NAN_BOXED(1677721663,32,FLEN)
NAN_BOXED(2132765038,32,FLEN)
NAN_BOXED(1070435900,32,FLEN)
NAN_BOXED(1677721727,32,FLEN)
NAN_BOXED(2132765038,32,FLEN)
NAN_BOXED(1070435900,32,FLEN)
NAN_BOXED(1677721855,32,FLEN)
NAN_BOXED(2132765038,32,FLEN)
NAN_BOXED(1070435900,32,FLEN)
NAN_BOXED(1677722111,32,FLEN)
NAN_BOXED(2132765038,32,FLEN)
NAN_BOXED(1070435900,32,FLEN)
NAN_BOXED(1677722623,32,FLEN)
NAN_BOXED(2132765038,32,FLEN)
NAN_BOXED(1070435900,32,FLEN)
NAN_BOXED(1677723647,32,FLEN)
NAN_BOXED(2132765038,32,FLEN)
NAN_BOXED(1070435900,32,FLEN)
NAN_BOXED(1677725695,32,FLEN)
NAN_BOXED(2132765038,32,FLEN)
NAN_BOXED(1070435900,32,FLEN)
NAN_BOXED(1677729791,32,FLEN)
NAN_BOXED(2132765038,32,FLEN)
NAN_BOXED(1070435900,32,FLEN)
NAN_BOXED(1677737983,32,FLEN)
NAN_BOXED(2132765038,32,FLEN)
NAN_BOXED(1070435900,32,FLEN)
NAN_BOXED(1677754367,32,FLEN)
NAN_BOXED(2132765038,32,FLEN)
NAN_BOXED(1070435900,32,FLEN)
NAN_BOXED(1677787135,32,FLEN)
NAN_BOXED(2132765038,32,FLEN)
NAN_BOXED(1070435900,32,FLEN)
NAN_BOXED(1677852671,32,FLEN)
NAN_BOXED(2132765038,32,FLEN)
NAN_BOXED(1070435900,32,FLEN)
NAN_BOXED(1677983743,32,FLEN)
NAN_BOXED(2132765038,32,FLEN)
NAN_BOXED(1070435900,32,FLEN)
NAN_BOXED(1678245887,32,FLEN)
NAN_BOXED(2132765038,32,FLEN)
NAN_BOXED(1070435900,32,FLEN)
NAN_BOXED(1678770175,32,FLEN)
NAN_BOXED(2132765038,32,FLEN)
NAN_BOXED(1070435900,32,FLEN)
NAN_BOXED(1679818751,32,FLEN)
NAN_BOXED(2132765038,32,FLEN)
NAN_BOXED(1070435900,32,FLEN)
NAN_BOXED(1681915903,32,FLEN)
NAN_BOXED(2132765038,32,FLEN)
NAN_BOXED(1070435900,32,FLEN)
NAN_BOXED(1681915904,32,FLEN)
NAN_BOXED(2132765038,32,FLEN)
NAN_BOXED(1070435900,32,FLEN)
NAN_BOXED(1684013056,32,FLEN)
NAN_BOXED(2132765038,32,FLEN)
NAN_BOXED(1070435900,32,FLEN)
NAN_BOXED(1685061632,32,FLEN)
NAN_BOXED(2132765038,32,FLEN)
NAN_BOXED(1070435900,32,FLEN)
NAN_BOXED(1685585920,32,FLEN)
NAN_BOXED(2132765038,32,FLEN)
NAN_BOXED(1070435900,32,FLEN)
NAN_BOXED(1685848064,32,FLEN)
NAN_BOXED(2132765038,32,FLEN)
NAN_BOXED(1070435900,32,FLEN)
NAN_BOXED(1685979136,32,FLEN)
NAN_BOXED(2132765038,32,FLEN)
NAN_BOXED(1070435900,32,FLEN)
NAN_BOXED(1686044672,32,FLEN)
NAN_BOXED(2132765038,32,FLEN)
NAN_BOXED(1070435900,32,FLEN)
NAN_BOXED(1686077440,32,FLEN)
NAN_BOXED(2132765038,32,FLEN)
NAN_BOXED(1070435900,32,FLEN)
NAN_BOXED(1686093824,32,FLEN)
NAN_BOXED(2132765038,32,FLEN)
NAN_BOXED(1070435900,32,FLEN)
NAN_BOXED(1686102016,32,FLEN)
NAN_BOXED(2132765038,32,FLEN)
NAN_BOXED(1070435900,32,FLEN)
NAN_BOXED(1686106112,32,FLEN)
NAN_BOXED(2132765038,32,FLEN)
NAN_BOXED(1070435900,32,FLEN)
NAN_BOXED(1686108160,32,FLEN)
NAN_BOXED(2132765038,32,FLEN)
NAN_BOXED(1070435900,32,FLEN)
NAN_BOXED(1686109184,32,FLEN)
NAN_BOXED(2132765038,32,FLEN)
NAN_BOXED(1070435900,32,FLEN)
NAN_BOXED(1686109696,32,FLEN)
NAN_BOXED(2132765038,32,FLEN)
NAN_BOXED(1070435900,32,FLEN)
NAN_BOXED(1686109952,32,FLEN)
NAN_BOXED(2132765038,32,FLEN)
NAN_BOXED(1070435900,32,FLEN)
NAN_BOXED(1686110080,32,FLEN)
NAN_BOXED(2132765038,32,FLEN)
NAN_BOXED(1070435900,32,FLEN)
NAN_BOXED(1686110144,32,FLEN)
NAN_BOXED(2132765038,32,FLEN)
NAN_BOXED(1070435900,32,FLEN)
NAN_BOXED(1686110176,32,FLEN)
NAN_BOXED(2132765038,32,FLEN)
NAN_BOXED(1070435900,32,FLEN)
NAN_BOXED(1686110192,32,FLEN)
NAN_BOXED(2132765038,32,FLEN)
NAN_BOXED(1070435900,32,FLEN)
NAN_BOXED(1686110200,32,FLEN)
NAN_BOXED(2132765038,32,FLEN)
NAN_BOXED(1070435900,32,FLEN)
NAN_BOXED(1686110204,32,FLEN)
NAN_BOXED(2132765038,32,FLEN)
NAN_BOXED(1070435900,32,FLEN)
NAN_BOXED(1686110206,32,FLEN)
NAN_BOXED(2132765038,32,FLEN)
NAN_BOXED(1070435900,32,FLEN)
NAN_BOXED(1686110207,32,FLEN)
NAN_BOXED(2132765038,32,FLEN)
NAN_BOXED(1070435900,32,FLEN)
NAN_BOXED(2130706433,32,FLEN)
NAN_BOXED(2132765038,32,FLEN)
NAN_BOXED(1070435900,32,FLEN)
NAN_BOXED(2130706435,32,FLEN)
NAN_BOXED(2132765038,32,FLEN)
NAN_BOXED(1070435900,32,FLEN)
NAN_BOXED(2130706439,32,FLEN)
NAN_BOXED(2132765038,32,FLEN)
NAN_BOXED(1070435900,32,FLEN)
NAN_BOXED(2132384153,32,FLEN)
NAN_BOXED(2132765038,32,FLEN)
NAN_BOXED(1070435900,32,FLEN)
NAN_BOXED(2133103177,32,FLEN)
NAN_BOXED(2132765038,32,FLEN)
NAN_BOXED(1070435900,32,FLEN)
NAN_BOXED(2134061875,32,FLEN)
NAN_BOXED(2132765038,32,FLEN)
NAN_BOXED(1070435900,32,FLEN)
NAN_BOXED(2134301549,32,FLEN)
NAN_BOXED(2132765038,32,FLEN)
NAN_BOXED(1070435900,32,FLEN)
NAN_BOXED(2134621115,32,FLEN)
NAN_BOXED(2132765038,32,FLEN)
NAN_BOXED(1070435900,32,FLEN)
NAN_BOXED(2135180356,32,FLEN)
NAN_BOXED(2132765038,32,FLEN)
NAN_BOXED(1070435900,32,FLEN)
NAN_BOXED(2135739596,32,FLEN)
NAN_BOXED(2132765038,32,FLEN)
NAN_BOXED(1070435900,32,FLEN)
NAN_BOXED(2136698294,32,FLEN)
NAN_BOXED(2132765038,32,FLEN)
NAN_BOXED(1070435900,32,FLEN)
NAN_BOXED(2137417318,32,FLEN)
NAN_BOXED(2132765038,32,FLEN)
NAN_BOXED(1070435900,32,FLEN)
NAN_BOXED(2137896667,32,FLEN)
NAN_BOXED(2132765038,32,FLEN)
NAN_BOXED(1070435900,32,FLEN)
NAN_BOXED(2139095032,32,FLEN)
NAN_BOXED(2132765038,32,FLEN)
NAN_BOXED(1070435900,32,FLEN)
NAN_BOXED(2139095036,32,FLEN)
NAN_BOXED(2132765038,32,FLEN)
NAN_BOXED(1070435900,32,FLEN)
NAN_BOXED(2139095038,32,FLEN)
NAN_BOXED(2132810014,32,FLEN)
NAN_BOXED(3353386,32,FLEN)
NAN_BOXED(922746880,32,FLEN)
NAN_BOXED(2132810014,32,FLEN)
NAN_BOXED(3353386,32,FLEN)
NAN_BOXED(922746881,32,FLEN)
NAN_BOXED(2132810014,32,FLEN)
NAN_BOXED(3353386,32,FLEN)
NAN_BOXED(922746883,32,FLEN)
NAN_BOXED(2132810014,32,FLEN)
NAN_BOXED(3353386,32,FLEN)
NAN_BOXED(922746887,32,FLEN)
NAN_BOXED(2132810014,32,FLEN)
NAN_BOXED(3353386,32,FLEN)
NAN_BOXED(922746895,32,FLEN)
NAN_BOXED(2132810014,32,FLEN)
NAN_BOXED(3353386,32,FLEN)
NAN_BOXED(922746911,32,FLEN)
NAN_BOXED(2132810014,32,FLEN)
NAN_BOXED(3353386,32,FLEN)
NAN_BOXED(922746943,32,FLEN)
NAN_BOXED(2132810014,32,FLEN)
NAN_BOXED(3353386,32,FLEN)
NAN_BOXED(922747007,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
