
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:17:59 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_32000:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20191e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x332b2a and fs3 == 0 and fe3 == 0x6e and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20191e; op2val:0x332b2a;
op3val:0x370000ff; valaddr_reg:x3; val_offset:96000*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96000*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32001:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20191e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x332b2a and fs3 == 0 and fe3 == 0x6e and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20191e; op2val:0x332b2a;
op3val:0x370001ff; valaddr_reg:x3; val_offset:96003*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96003*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32002:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20191e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x332b2a and fs3 == 0 and fe3 == 0x6e and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20191e; op2val:0x332b2a;
op3val:0x370003ff; valaddr_reg:x3; val_offset:96006*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96006*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32003:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20191e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x332b2a and fs3 == 0 and fe3 == 0x6e and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20191e; op2val:0x332b2a;
op3val:0x370007ff; valaddr_reg:x3; val_offset:96009*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96009*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32004:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20191e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x332b2a and fs3 == 0 and fe3 == 0x6e and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20191e; op2val:0x332b2a;
op3val:0x37000fff; valaddr_reg:x3; val_offset:96012*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96012*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32005:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20191e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x332b2a and fs3 == 0 and fe3 == 0x6e and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20191e; op2val:0x332b2a;
op3val:0x37001fff; valaddr_reg:x3; val_offset:96015*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96015*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32006:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20191e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x332b2a and fs3 == 0 and fe3 == 0x6e and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20191e; op2val:0x332b2a;
op3val:0x37003fff; valaddr_reg:x3; val_offset:96018*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96018*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32007:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20191e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x332b2a and fs3 == 0 and fe3 == 0x6e and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20191e; op2val:0x332b2a;
op3val:0x37007fff; valaddr_reg:x3; val_offset:96021*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96021*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32008:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20191e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x332b2a and fs3 == 0 and fe3 == 0x6e and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20191e; op2val:0x332b2a;
op3val:0x3700ffff; valaddr_reg:x3; val_offset:96024*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96024*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32009:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20191e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x332b2a and fs3 == 0 and fe3 == 0x6e and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20191e; op2val:0x332b2a;
op3val:0x3701ffff; valaddr_reg:x3; val_offset:96027*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96027*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32010:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20191e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x332b2a and fs3 == 0 and fe3 == 0x6e and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20191e; op2val:0x332b2a;
op3val:0x3703ffff; valaddr_reg:x3; val_offset:96030*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96030*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32011:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20191e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x332b2a and fs3 == 0 and fe3 == 0x6e and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20191e; op2val:0x332b2a;
op3val:0x3707ffff; valaddr_reg:x3; val_offset:96033*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96033*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32012:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20191e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x332b2a and fs3 == 0 and fe3 == 0x6e and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20191e; op2val:0x332b2a;
op3val:0x370fffff; valaddr_reg:x3; val_offset:96036*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96036*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32013:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20191e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x332b2a and fs3 == 0 and fe3 == 0x6e and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20191e; op2val:0x332b2a;
op3val:0x371fffff; valaddr_reg:x3; val_offset:96039*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96039*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32014:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20191e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x332b2a and fs3 == 0 and fe3 == 0x6e and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20191e; op2val:0x332b2a;
op3val:0x373fffff; valaddr_reg:x3; val_offset:96042*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96042*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32015:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20191e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x332b2a and fs3 == 0 and fe3 == 0x6e and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20191e; op2val:0x332b2a;
op3val:0x37400000; valaddr_reg:x3; val_offset:96045*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96045*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32016:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20191e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x332b2a and fs3 == 0 and fe3 == 0x6e and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20191e; op2val:0x332b2a;
op3val:0x37600000; valaddr_reg:x3; val_offset:96048*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96048*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32017:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20191e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x332b2a and fs3 == 0 and fe3 == 0x6e and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20191e; op2val:0x332b2a;
op3val:0x37700000; valaddr_reg:x3; val_offset:96051*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96051*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32018:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20191e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x332b2a and fs3 == 0 and fe3 == 0x6e and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20191e; op2val:0x332b2a;
op3val:0x37780000; valaddr_reg:x3; val_offset:96054*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96054*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32019:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20191e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x332b2a and fs3 == 0 and fe3 == 0x6e and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20191e; op2val:0x332b2a;
op3val:0x377c0000; valaddr_reg:x3; val_offset:96057*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96057*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32020:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20191e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x332b2a and fs3 == 0 and fe3 == 0x6e and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20191e; op2val:0x332b2a;
op3val:0x377e0000; valaddr_reg:x3; val_offset:96060*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96060*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32021:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20191e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x332b2a and fs3 == 0 and fe3 == 0x6e and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20191e; op2val:0x332b2a;
op3val:0x377f0000; valaddr_reg:x3; val_offset:96063*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96063*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32022:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20191e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x332b2a and fs3 == 0 and fe3 == 0x6e and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20191e; op2val:0x332b2a;
op3val:0x377f8000; valaddr_reg:x3; val_offset:96066*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96066*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32023:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20191e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x332b2a and fs3 == 0 and fe3 == 0x6e and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20191e; op2val:0x332b2a;
op3val:0x377fc000; valaddr_reg:x3; val_offset:96069*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96069*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32024:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20191e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x332b2a and fs3 == 0 and fe3 == 0x6e and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20191e; op2val:0x332b2a;
op3val:0x377fe000; valaddr_reg:x3; val_offset:96072*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96072*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32025:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20191e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x332b2a and fs3 == 0 and fe3 == 0x6e and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20191e; op2val:0x332b2a;
op3val:0x377ff000; valaddr_reg:x3; val_offset:96075*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96075*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32026:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20191e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x332b2a and fs3 == 0 and fe3 == 0x6e and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20191e; op2val:0x332b2a;
op3val:0x377ff800; valaddr_reg:x3; val_offset:96078*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96078*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32027:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20191e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x332b2a and fs3 == 0 and fe3 == 0x6e and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20191e; op2val:0x332b2a;
op3val:0x377ffc00; valaddr_reg:x3; val_offset:96081*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96081*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32028:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20191e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x332b2a and fs3 == 0 and fe3 == 0x6e and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20191e; op2val:0x332b2a;
op3val:0x377ffe00; valaddr_reg:x3; val_offset:96084*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96084*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32029:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20191e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x332b2a and fs3 == 0 and fe3 == 0x6e and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20191e; op2val:0x332b2a;
op3val:0x377fff00; valaddr_reg:x3; val_offset:96087*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96087*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32030:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20191e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x332b2a and fs3 == 0 and fe3 == 0x6e and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20191e; op2val:0x332b2a;
op3val:0x377fff80; valaddr_reg:x3; val_offset:96090*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96090*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32031:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20191e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x332b2a and fs3 == 0 and fe3 == 0x6e and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20191e; op2val:0x332b2a;
op3val:0x377fffc0; valaddr_reg:x3; val_offset:96093*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96093*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32032:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20191e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x332b2a and fs3 == 0 and fe3 == 0x6e and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20191e; op2val:0x332b2a;
op3val:0x377fffe0; valaddr_reg:x3; val_offset:96096*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96096*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32033:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20191e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x332b2a and fs3 == 0 and fe3 == 0x6e and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20191e; op2val:0x332b2a;
op3val:0x377ffff0; valaddr_reg:x3; val_offset:96099*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96099*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32034:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20191e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x332b2a and fs3 == 0 and fe3 == 0x6e and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20191e; op2val:0x332b2a;
op3val:0x377ffff8; valaddr_reg:x3; val_offset:96102*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96102*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32035:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20191e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x332b2a and fs3 == 0 and fe3 == 0x6e and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20191e; op2val:0x332b2a;
op3val:0x377ffffc; valaddr_reg:x3; val_offset:96105*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96105*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32036:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20191e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x332b2a and fs3 == 0 and fe3 == 0x6e and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20191e; op2val:0x332b2a;
op3val:0x377ffffe; valaddr_reg:x3; val_offset:96108*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96108*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32037:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20191e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x332b2a and fs3 == 0 and fe3 == 0x6e and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20191e; op2val:0x332b2a;
op3val:0x377fffff; valaddr_reg:x3; val_offset:96111*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96111*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32038:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20191e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x332b2a and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20191e; op2val:0x332b2a;
op3val:0x3f800001; valaddr_reg:x3; val_offset:96114*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96114*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32039:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20191e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x332b2a and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20191e; op2val:0x332b2a;
op3val:0x3f800003; valaddr_reg:x3; val_offset:96117*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96117*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32040:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20191e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x332b2a and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20191e; op2val:0x332b2a;
op3val:0x3f800007; valaddr_reg:x3; val_offset:96120*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96120*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32041:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20191e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x332b2a and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20191e; op2val:0x332b2a;
op3val:0x3f999999; valaddr_reg:x3; val_offset:96123*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96123*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32042:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20191e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x332b2a and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20191e; op2val:0x332b2a;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:96126*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96126*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32043:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20191e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x332b2a and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20191e; op2val:0x332b2a;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:96129*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96129*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32044:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20191e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x332b2a and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20191e; op2val:0x332b2a;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:96132*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96132*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32045:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20191e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x332b2a and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20191e; op2val:0x332b2a;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:96135*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96135*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32046:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20191e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x332b2a and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20191e; op2val:0x332b2a;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:96138*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96138*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32047:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20191e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x332b2a and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20191e; op2val:0x332b2a;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:96141*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96141*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32048:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20191e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x332b2a and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20191e; op2val:0x332b2a;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:96144*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96144*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32049:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20191e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x332b2a and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20191e; op2val:0x332b2a;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:96147*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96147*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32050:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20191e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x332b2a and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20191e; op2val:0x332b2a;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:96150*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96150*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32051:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20191e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x332b2a and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20191e; op2val:0x332b2a;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:96153*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96153*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32052:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20191e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x332b2a and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20191e; op2val:0x332b2a;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:96156*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96156*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32053:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20191e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x332b2a and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20191e; op2val:0x332b2a;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:96159*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96159*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32054:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x207e49 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x330ae9 and fs3 == 0 and fe3 == 0x7a and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f207e49; op2val:0x330ae9;
op3val:0x3d000000; valaddr_reg:x3; val_offset:96162*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96162*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32055:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x207e49 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x330ae9 and fs3 == 0 and fe3 == 0x7a and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f207e49; op2val:0x330ae9;
op3val:0x3d000001; valaddr_reg:x3; val_offset:96165*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96165*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32056:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x207e49 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x330ae9 and fs3 == 0 and fe3 == 0x7a and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f207e49; op2val:0x330ae9;
op3val:0x3d000003; valaddr_reg:x3; val_offset:96168*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96168*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32057:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x207e49 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x330ae9 and fs3 == 0 and fe3 == 0x7a and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f207e49; op2val:0x330ae9;
op3val:0x3d000007; valaddr_reg:x3; val_offset:96171*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96171*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32058:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x207e49 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x330ae9 and fs3 == 0 and fe3 == 0x7a and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f207e49; op2val:0x330ae9;
op3val:0x3d00000f; valaddr_reg:x3; val_offset:96174*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96174*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32059:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x207e49 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x330ae9 and fs3 == 0 and fe3 == 0x7a and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f207e49; op2val:0x330ae9;
op3val:0x3d00001f; valaddr_reg:x3; val_offset:96177*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96177*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32060:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x207e49 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x330ae9 and fs3 == 0 and fe3 == 0x7a and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f207e49; op2val:0x330ae9;
op3val:0x3d00003f; valaddr_reg:x3; val_offset:96180*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96180*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32061:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x207e49 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x330ae9 and fs3 == 0 and fe3 == 0x7a and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f207e49; op2val:0x330ae9;
op3val:0x3d00007f; valaddr_reg:x3; val_offset:96183*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96183*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32062:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x207e49 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x330ae9 and fs3 == 0 and fe3 == 0x7a and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f207e49; op2val:0x330ae9;
op3val:0x3d0000ff; valaddr_reg:x3; val_offset:96186*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96186*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32063:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x207e49 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x330ae9 and fs3 == 0 and fe3 == 0x7a and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f207e49; op2val:0x330ae9;
op3val:0x3d0001ff; valaddr_reg:x3; val_offset:96189*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96189*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32064:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x207e49 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x330ae9 and fs3 == 0 and fe3 == 0x7a and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f207e49; op2val:0x330ae9;
op3val:0x3d0003ff; valaddr_reg:x3; val_offset:96192*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96192*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32065:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x207e49 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x330ae9 and fs3 == 0 and fe3 == 0x7a and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f207e49; op2val:0x330ae9;
op3val:0x3d0007ff; valaddr_reg:x3; val_offset:96195*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96195*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32066:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x207e49 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x330ae9 and fs3 == 0 and fe3 == 0x7a and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f207e49; op2val:0x330ae9;
op3val:0x3d000fff; valaddr_reg:x3; val_offset:96198*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96198*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32067:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x207e49 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x330ae9 and fs3 == 0 and fe3 == 0x7a and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f207e49; op2val:0x330ae9;
op3val:0x3d001fff; valaddr_reg:x3; val_offset:96201*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96201*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32068:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x207e49 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x330ae9 and fs3 == 0 and fe3 == 0x7a and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f207e49; op2val:0x330ae9;
op3val:0x3d003fff; valaddr_reg:x3; val_offset:96204*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96204*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32069:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x207e49 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x330ae9 and fs3 == 0 and fe3 == 0x7a and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f207e49; op2val:0x330ae9;
op3val:0x3d007fff; valaddr_reg:x3; val_offset:96207*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96207*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32070:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x207e49 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x330ae9 and fs3 == 0 and fe3 == 0x7a and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f207e49; op2val:0x330ae9;
op3val:0x3d00ffff; valaddr_reg:x3; val_offset:96210*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96210*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32071:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x207e49 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x330ae9 and fs3 == 0 and fe3 == 0x7a and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f207e49; op2val:0x330ae9;
op3val:0x3d01ffff; valaddr_reg:x3; val_offset:96213*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96213*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32072:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x207e49 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x330ae9 and fs3 == 0 and fe3 == 0x7a and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f207e49; op2val:0x330ae9;
op3val:0x3d03ffff; valaddr_reg:x3; val_offset:96216*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96216*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32073:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x207e49 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x330ae9 and fs3 == 0 and fe3 == 0x7a and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f207e49; op2val:0x330ae9;
op3val:0x3d07ffff; valaddr_reg:x3; val_offset:96219*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96219*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32074:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x207e49 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x330ae9 and fs3 == 0 and fe3 == 0x7a and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f207e49; op2val:0x330ae9;
op3val:0x3d0fffff; valaddr_reg:x3; val_offset:96222*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96222*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32075:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x207e49 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x330ae9 and fs3 == 0 and fe3 == 0x7a and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f207e49; op2val:0x330ae9;
op3val:0x3d1fffff; valaddr_reg:x3; val_offset:96225*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96225*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32076:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x207e49 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x330ae9 and fs3 == 0 and fe3 == 0x7a and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f207e49; op2val:0x330ae9;
op3val:0x3d3fffff; valaddr_reg:x3; val_offset:96228*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96228*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32077:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x207e49 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x330ae9 and fs3 == 0 and fe3 == 0x7a and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f207e49; op2val:0x330ae9;
op3val:0x3d400000; valaddr_reg:x3; val_offset:96231*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96231*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32078:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x207e49 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x330ae9 and fs3 == 0 and fe3 == 0x7a and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f207e49; op2val:0x330ae9;
op3val:0x3d600000; valaddr_reg:x3; val_offset:96234*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96234*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32079:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x207e49 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x330ae9 and fs3 == 0 and fe3 == 0x7a and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f207e49; op2val:0x330ae9;
op3val:0x3d700000; valaddr_reg:x3; val_offset:96237*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96237*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32080:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x207e49 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x330ae9 and fs3 == 0 and fe3 == 0x7a and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f207e49; op2val:0x330ae9;
op3val:0x3d780000; valaddr_reg:x3; val_offset:96240*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96240*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32081:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x207e49 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x330ae9 and fs3 == 0 and fe3 == 0x7a and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f207e49; op2val:0x330ae9;
op3val:0x3d7c0000; valaddr_reg:x3; val_offset:96243*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96243*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32082:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x207e49 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x330ae9 and fs3 == 0 and fe3 == 0x7a and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f207e49; op2val:0x330ae9;
op3val:0x3d7e0000; valaddr_reg:x3; val_offset:96246*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96246*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32083:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x207e49 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x330ae9 and fs3 == 0 and fe3 == 0x7a and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f207e49; op2val:0x330ae9;
op3val:0x3d7f0000; valaddr_reg:x3; val_offset:96249*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96249*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32084:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x207e49 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x330ae9 and fs3 == 0 and fe3 == 0x7a and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f207e49; op2val:0x330ae9;
op3val:0x3d7f8000; valaddr_reg:x3; val_offset:96252*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96252*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32085:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x207e49 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x330ae9 and fs3 == 0 and fe3 == 0x7a and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f207e49; op2val:0x330ae9;
op3val:0x3d7fc000; valaddr_reg:x3; val_offset:96255*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96255*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32086:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x207e49 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x330ae9 and fs3 == 0 and fe3 == 0x7a and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f207e49; op2val:0x330ae9;
op3val:0x3d7fe000; valaddr_reg:x3; val_offset:96258*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96258*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32087:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x207e49 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x330ae9 and fs3 == 0 and fe3 == 0x7a and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f207e49; op2val:0x330ae9;
op3val:0x3d7ff000; valaddr_reg:x3; val_offset:96261*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96261*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32088:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x207e49 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x330ae9 and fs3 == 0 and fe3 == 0x7a and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f207e49; op2val:0x330ae9;
op3val:0x3d7ff800; valaddr_reg:x3; val_offset:96264*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96264*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32089:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x207e49 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x330ae9 and fs3 == 0 and fe3 == 0x7a and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f207e49; op2val:0x330ae9;
op3val:0x3d7ffc00; valaddr_reg:x3; val_offset:96267*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96267*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32090:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x207e49 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x330ae9 and fs3 == 0 and fe3 == 0x7a and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f207e49; op2val:0x330ae9;
op3val:0x3d7ffe00; valaddr_reg:x3; val_offset:96270*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96270*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32091:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x207e49 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x330ae9 and fs3 == 0 and fe3 == 0x7a and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f207e49; op2val:0x330ae9;
op3val:0x3d7fff00; valaddr_reg:x3; val_offset:96273*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96273*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32092:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x207e49 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x330ae9 and fs3 == 0 and fe3 == 0x7a and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f207e49; op2val:0x330ae9;
op3val:0x3d7fff80; valaddr_reg:x3; val_offset:96276*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96276*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32093:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x207e49 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x330ae9 and fs3 == 0 and fe3 == 0x7a and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f207e49; op2val:0x330ae9;
op3val:0x3d7fffc0; valaddr_reg:x3; val_offset:96279*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96279*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32094:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x207e49 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x330ae9 and fs3 == 0 and fe3 == 0x7a and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f207e49; op2val:0x330ae9;
op3val:0x3d7fffe0; valaddr_reg:x3; val_offset:96282*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96282*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32095:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x207e49 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x330ae9 and fs3 == 0 and fe3 == 0x7a and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f207e49; op2val:0x330ae9;
op3val:0x3d7ffff0; valaddr_reg:x3; val_offset:96285*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96285*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32096:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x207e49 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x330ae9 and fs3 == 0 and fe3 == 0x7a and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f207e49; op2val:0x330ae9;
op3val:0x3d7ffff8; valaddr_reg:x3; val_offset:96288*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96288*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32097:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x207e49 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x330ae9 and fs3 == 0 and fe3 == 0x7a and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f207e49; op2val:0x330ae9;
op3val:0x3d7ffffc; valaddr_reg:x3; val_offset:96291*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96291*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32098:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x207e49 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x330ae9 and fs3 == 0 and fe3 == 0x7a and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f207e49; op2val:0x330ae9;
op3val:0x3d7ffffe; valaddr_reg:x3; val_offset:96294*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96294*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32099:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x207e49 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x330ae9 and fs3 == 0 and fe3 == 0x7a and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f207e49; op2val:0x330ae9;
op3val:0x3d7fffff; valaddr_reg:x3; val_offset:96297*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96297*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32100:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x207e49 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x330ae9 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f207e49; op2val:0x330ae9;
op3val:0x3f800001; valaddr_reg:x3; val_offset:96300*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96300*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32101:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x207e49 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x330ae9 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f207e49; op2val:0x330ae9;
op3val:0x3f800003; valaddr_reg:x3; val_offset:96303*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96303*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32102:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x207e49 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x330ae9 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f207e49; op2val:0x330ae9;
op3val:0x3f800007; valaddr_reg:x3; val_offset:96306*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96306*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32103:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x207e49 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x330ae9 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f207e49; op2val:0x330ae9;
op3val:0x3f999999; valaddr_reg:x3; val_offset:96309*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96309*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32104:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x207e49 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x330ae9 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f207e49; op2val:0x330ae9;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:96312*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96312*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32105:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x207e49 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x330ae9 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f207e49; op2val:0x330ae9;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:96315*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96315*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32106:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x207e49 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x330ae9 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f207e49; op2val:0x330ae9;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:96318*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96318*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32107:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x207e49 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x330ae9 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f207e49; op2val:0x330ae9;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:96321*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96321*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32108:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x207e49 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x330ae9 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f207e49; op2val:0x330ae9;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:96324*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96324*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32109:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x207e49 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x330ae9 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f207e49; op2val:0x330ae9;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:96327*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96327*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32110:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x207e49 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x330ae9 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f207e49; op2val:0x330ae9;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:96330*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96330*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32111:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x207e49 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x330ae9 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f207e49; op2val:0x330ae9;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:96333*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96333*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32112:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x207e49 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x330ae9 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f207e49; op2val:0x330ae9;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:96336*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96336*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32113:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x207e49 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x330ae9 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f207e49; op2val:0x330ae9;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:96339*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96339*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32114:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x207e49 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x330ae9 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f207e49; op2val:0x330ae9;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:96342*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96342*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32115:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x207e49 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x330ae9 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f207e49; op2val:0x330ae9;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:96345*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96345*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32116:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20ca43 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32f2cb and fs3 == 1 and fe3 == 0x68 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20ca43; op2val:0x8032f2cb;
op3val:0xb4000000; valaddr_reg:x3; val_offset:96348*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96348*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32117:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20ca43 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32f2cb and fs3 == 1 and fe3 == 0x68 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20ca43; op2val:0x8032f2cb;
op3val:0xb4000001; valaddr_reg:x3; val_offset:96351*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96351*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32118:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20ca43 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32f2cb and fs3 == 1 and fe3 == 0x68 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20ca43; op2val:0x8032f2cb;
op3val:0xb4000003; valaddr_reg:x3; val_offset:96354*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96354*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32119:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20ca43 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32f2cb and fs3 == 1 and fe3 == 0x68 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20ca43; op2val:0x8032f2cb;
op3val:0xb4000007; valaddr_reg:x3; val_offset:96357*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96357*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32120:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20ca43 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32f2cb and fs3 == 1 and fe3 == 0x68 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20ca43; op2val:0x8032f2cb;
op3val:0xb400000f; valaddr_reg:x3; val_offset:96360*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96360*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32121:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20ca43 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32f2cb and fs3 == 1 and fe3 == 0x68 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20ca43; op2val:0x8032f2cb;
op3val:0xb400001f; valaddr_reg:x3; val_offset:96363*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96363*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32122:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20ca43 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32f2cb and fs3 == 1 and fe3 == 0x68 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20ca43; op2val:0x8032f2cb;
op3val:0xb400003f; valaddr_reg:x3; val_offset:96366*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96366*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32123:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20ca43 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32f2cb and fs3 == 1 and fe3 == 0x68 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20ca43; op2val:0x8032f2cb;
op3val:0xb400007f; valaddr_reg:x3; val_offset:96369*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96369*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32124:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20ca43 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32f2cb and fs3 == 1 and fe3 == 0x68 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20ca43; op2val:0x8032f2cb;
op3val:0xb40000ff; valaddr_reg:x3; val_offset:96372*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96372*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32125:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20ca43 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32f2cb and fs3 == 1 and fe3 == 0x68 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20ca43; op2val:0x8032f2cb;
op3val:0xb40001ff; valaddr_reg:x3; val_offset:96375*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96375*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32126:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20ca43 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32f2cb and fs3 == 1 and fe3 == 0x68 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20ca43; op2val:0x8032f2cb;
op3val:0xb40003ff; valaddr_reg:x3; val_offset:96378*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96378*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32127:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20ca43 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32f2cb and fs3 == 1 and fe3 == 0x68 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20ca43; op2val:0x8032f2cb;
op3val:0xb40007ff; valaddr_reg:x3; val_offset:96381*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96381*0 + 3*250*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2132810014,32,FLEN)
NAN_BOXED(3353386,32,FLEN)
NAN_BOXED(922747135,32,FLEN)
NAN_BOXED(2132810014,32,FLEN)
NAN_BOXED(3353386,32,FLEN)
NAN_BOXED(922747391,32,FLEN)
NAN_BOXED(2132810014,32,FLEN)
NAN_BOXED(3353386,32,FLEN)
NAN_BOXED(922747903,32,FLEN)
NAN_BOXED(2132810014,32,FLEN)
NAN_BOXED(3353386,32,FLEN)
NAN_BOXED(922748927,32,FLEN)
NAN_BOXED(2132810014,32,FLEN)
NAN_BOXED(3353386,32,FLEN)
NAN_BOXED(922750975,32,FLEN)
NAN_BOXED(2132810014,32,FLEN)
NAN_BOXED(3353386,32,FLEN)
NAN_BOXED(922755071,32,FLEN)
NAN_BOXED(2132810014,32,FLEN)
NAN_BOXED(3353386,32,FLEN)
NAN_BOXED(922763263,32,FLEN)
NAN_BOXED(2132810014,32,FLEN)
NAN_BOXED(3353386,32,FLEN)
NAN_BOXED(922779647,32,FLEN)
NAN_BOXED(2132810014,32,FLEN)
NAN_BOXED(3353386,32,FLEN)
NAN_BOXED(922812415,32,FLEN)
NAN_BOXED(2132810014,32,FLEN)
NAN_BOXED(3353386,32,FLEN)
NAN_BOXED(922877951,32,FLEN)
NAN_BOXED(2132810014,32,FLEN)
NAN_BOXED(3353386,32,FLEN)
NAN_BOXED(923009023,32,FLEN)
NAN_BOXED(2132810014,32,FLEN)
NAN_BOXED(3353386,32,FLEN)
NAN_BOXED(923271167,32,FLEN)
NAN_BOXED(2132810014,32,FLEN)
NAN_BOXED(3353386,32,FLEN)
NAN_BOXED(923795455,32,FLEN)
NAN_BOXED(2132810014,32,FLEN)
NAN_BOXED(3353386,32,FLEN)
NAN_BOXED(924844031,32,FLEN)
NAN_BOXED(2132810014,32,FLEN)
NAN_BOXED(3353386,32,FLEN)
NAN_BOXED(926941183,32,FLEN)
NAN_BOXED(2132810014,32,FLEN)
NAN_BOXED(3353386,32,FLEN)
NAN_BOXED(926941184,32,FLEN)
NAN_BOXED(2132810014,32,FLEN)
NAN_BOXED(3353386,32,FLEN)
NAN_BOXED(929038336,32,FLEN)
NAN_BOXED(2132810014,32,FLEN)
NAN_BOXED(3353386,32,FLEN)
NAN_BOXED(930086912,32,FLEN)
NAN_BOXED(2132810014,32,FLEN)
NAN_BOXED(3353386,32,FLEN)
NAN_BOXED(930611200,32,FLEN)
NAN_BOXED(2132810014,32,FLEN)
NAN_BOXED(3353386,32,FLEN)
NAN_BOXED(930873344,32,FLEN)
NAN_BOXED(2132810014,32,FLEN)
NAN_BOXED(3353386,32,FLEN)
NAN_BOXED(931004416,32,FLEN)
NAN_BOXED(2132810014,32,FLEN)
NAN_BOXED(3353386,32,FLEN)
NAN_BOXED(931069952,32,FLEN)
NAN_BOXED(2132810014,32,FLEN)
NAN_BOXED(3353386,32,FLEN)
NAN_BOXED(931102720,32,FLEN)
NAN_BOXED(2132810014,32,FLEN)
NAN_BOXED(3353386,32,FLEN)
NAN_BOXED(931119104,32,FLEN)
NAN_BOXED(2132810014,32,FLEN)
NAN_BOXED(3353386,32,FLEN)
NAN_BOXED(931127296,32,FLEN)
NAN_BOXED(2132810014,32,FLEN)
NAN_BOXED(3353386,32,FLEN)
NAN_BOXED(931131392,32,FLEN)
NAN_BOXED(2132810014,32,FLEN)
NAN_BOXED(3353386,32,FLEN)
NAN_BOXED(931133440,32,FLEN)
NAN_BOXED(2132810014,32,FLEN)
NAN_BOXED(3353386,32,FLEN)
NAN_BOXED(931134464,32,FLEN)
NAN_BOXED(2132810014,32,FLEN)
NAN_BOXED(3353386,32,FLEN)
NAN_BOXED(931134976,32,FLEN)
NAN_BOXED(2132810014,32,FLEN)
NAN_BOXED(3353386,32,FLEN)
NAN_BOXED(931135232,32,FLEN)
NAN_BOXED(2132810014,32,FLEN)
NAN_BOXED(3353386,32,FLEN)
NAN_BOXED(931135360,32,FLEN)
NAN_BOXED(2132810014,32,FLEN)
NAN_BOXED(3353386,32,FLEN)
NAN_BOXED(931135424,32,FLEN)
NAN_BOXED(2132810014,32,FLEN)
NAN_BOXED(3353386,32,FLEN)
NAN_BOXED(931135456,32,FLEN)
NAN_BOXED(2132810014,32,FLEN)
NAN_BOXED(3353386,32,FLEN)
NAN_BOXED(931135472,32,FLEN)
NAN_BOXED(2132810014,32,FLEN)
NAN_BOXED(3353386,32,FLEN)
NAN_BOXED(931135480,32,FLEN)
NAN_BOXED(2132810014,32,FLEN)
NAN_BOXED(3353386,32,FLEN)
NAN_BOXED(931135484,32,FLEN)
NAN_BOXED(2132810014,32,FLEN)
NAN_BOXED(3353386,32,FLEN)
NAN_BOXED(931135486,32,FLEN)
NAN_BOXED(2132810014,32,FLEN)
NAN_BOXED(3353386,32,FLEN)
NAN_BOXED(931135487,32,FLEN)
NAN_BOXED(2132810014,32,FLEN)
NAN_BOXED(3353386,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2132810014,32,FLEN)
NAN_BOXED(3353386,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2132810014,32,FLEN)
NAN_BOXED(3353386,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2132810014,32,FLEN)
NAN_BOXED(3353386,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2132810014,32,FLEN)
NAN_BOXED(3353386,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2132810014,32,FLEN)
NAN_BOXED(3353386,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2132810014,32,FLEN)
NAN_BOXED(3353386,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2132810014,32,FLEN)
NAN_BOXED(3353386,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2132810014,32,FLEN)
NAN_BOXED(3353386,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2132810014,32,FLEN)
NAN_BOXED(3353386,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2132810014,32,FLEN)
NAN_BOXED(3353386,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2132810014,32,FLEN)
NAN_BOXED(3353386,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2132810014,32,FLEN)
NAN_BOXED(3353386,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2132810014,32,FLEN)
NAN_BOXED(3353386,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2132810014,32,FLEN)
NAN_BOXED(3353386,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2132810014,32,FLEN)
NAN_BOXED(3353386,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2132835913,32,FLEN)
NAN_BOXED(3345129,32,FLEN)
NAN_BOXED(1023410176,32,FLEN)
NAN_BOXED(2132835913,32,FLEN)
NAN_BOXED(3345129,32,FLEN)
NAN_BOXED(1023410177,32,FLEN)
NAN_BOXED(2132835913,32,FLEN)
NAN_BOXED(3345129,32,FLEN)
NAN_BOXED(1023410179,32,FLEN)
NAN_BOXED(2132835913,32,FLEN)
NAN_BOXED(3345129,32,FLEN)
NAN_BOXED(1023410183,32,FLEN)
NAN_BOXED(2132835913,32,FLEN)
NAN_BOXED(3345129,32,FLEN)
NAN_BOXED(1023410191,32,FLEN)
NAN_BOXED(2132835913,32,FLEN)
NAN_BOXED(3345129,32,FLEN)
NAN_BOXED(1023410207,32,FLEN)
NAN_BOXED(2132835913,32,FLEN)
NAN_BOXED(3345129,32,FLEN)
NAN_BOXED(1023410239,32,FLEN)
NAN_BOXED(2132835913,32,FLEN)
NAN_BOXED(3345129,32,FLEN)
NAN_BOXED(1023410303,32,FLEN)
NAN_BOXED(2132835913,32,FLEN)
NAN_BOXED(3345129,32,FLEN)
NAN_BOXED(1023410431,32,FLEN)
NAN_BOXED(2132835913,32,FLEN)
NAN_BOXED(3345129,32,FLEN)
NAN_BOXED(1023410687,32,FLEN)
NAN_BOXED(2132835913,32,FLEN)
NAN_BOXED(3345129,32,FLEN)
NAN_BOXED(1023411199,32,FLEN)
NAN_BOXED(2132835913,32,FLEN)
NAN_BOXED(3345129,32,FLEN)
NAN_BOXED(1023412223,32,FLEN)
NAN_BOXED(2132835913,32,FLEN)
NAN_BOXED(3345129,32,FLEN)
NAN_BOXED(1023414271,32,FLEN)
NAN_BOXED(2132835913,32,FLEN)
NAN_BOXED(3345129,32,FLEN)
NAN_BOXED(1023418367,32,FLEN)
NAN_BOXED(2132835913,32,FLEN)
NAN_BOXED(3345129,32,FLEN)
NAN_BOXED(1023426559,32,FLEN)
NAN_BOXED(2132835913,32,FLEN)
NAN_BOXED(3345129,32,FLEN)
NAN_BOXED(1023442943,32,FLEN)
NAN_BOXED(2132835913,32,FLEN)
NAN_BOXED(3345129,32,FLEN)
NAN_BOXED(1023475711,32,FLEN)
NAN_BOXED(2132835913,32,FLEN)
NAN_BOXED(3345129,32,FLEN)
NAN_BOXED(1023541247,32,FLEN)
NAN_BOXED(2132835913,32,FLEN)
NAN_BOXED(3345129,32,FLEN)
NAN_BOXED(1023672319,32,FLEN)
NAN_BOXED(2132835913,32,FLEN)
NAN_BOXED(3345129,32,FLEN)
NAN_BOXED(1023934463,32,FLEN)
NAN_BOXED(2132835913,32,FLEN)
NAN_BOXED(3345129,32,FLEN)
NAN_BOXED(1024458751,32,FLEN)
NAN_BOXED(2132835913,32,FLEN)
NAN_BOXED(3345129,32,FLEN)
NAN_BOXED(1025507327,32,FLEN)
NAN_BOXED(2132835913,32,FLEN)
NAN_BOXED(3345129,32,FLEN)
NAN_BOXED(1027604479,32,FLEN)
NAN_BOXED(2132835913,32,FLEN)
NAN_BOXED(3345129,32,FLEN)
NAN_BOXED(1027604480,32,FLEN)
NAN_BOXED(2132835913,32,FLEN)
NAN_BOXED(3345129,32,FLEN)
NAN_BOXED(1029701632,32,FLEN)
NAN_BOXED(2132835913,32,FLEN)
NAN_BOXED(3345129,32,FLEN)
NAN_BOXED(1030750208,32,FLEN)
NAN_BOXED(2132835913,32,FLEN)
NAN_BOXED(3345129,32,FLEN)
NAN_BOXED(1031274496,32,FLEN)
NAN_BOXED(2132835913,32,FLEN)
NAN_BOXED(3345129,32,FLEN)
NAN_BOXED(1031536640,32,FLEN)
NAN_BOXED(2132835913,32,FLEN)
NAN_BOXED(3345129,32,FLEN)
NAN_BOXED(1031667712,32,FLEN)
NAN_BOXED(2132835913,32,FLEN)
NAN_BOXED(3345129,32,FLEN)
NAN_BOXED(1031733248,32,FLEN)
NAN_BOXED(2132835913,32,FLEN)
NAN_BOXED(3345129,32,FLEN)
NAN_BOXED(1031766016,32,FLEN)
NAN_BOXED(2132835913,32,FLEN)
NAN_BOXED(3345129,32,FLEN)
NAN_BOXED(1031782400,32,FLEN)
NAN_BOXED(2132835913,32,FLEN)
NAN_BOXED(3345129,32,FLEN)
NAN_BOXED(1031790592,32,FLEN)
NAN_BOXED(2132835913,32,FLEN)
NAN_BOXED(3345129,32,FLEN)
NAN_BOXED(1031794688,32,FLEN)
NAN_BOXED(2132835913,32,FLEN)
NAN_BOXED(3345129,32,FLEN)
NAN_BOXED(1031796736,32,FLEN)
NAN_BOXED(2132835913,32,FLEN)
NAN_BOXED(3345129,32,FLEN)
NAN_BOXED(1031797760,32,FLEN)
NAN_BOXED(2132835913,32,FLEN)
NAN_BOXED(3345129,32,FLEN)
NAN_BOXED(1031798272,32,FLEN)
NAN_BOXED(2132835913,32,FLEN)
NAN_BOXED(3345129,32,FLEN)
NAN_BOXED(1031798528,32,FLEN)
NAN_BOXED(2132835913,32,FLEN)
NAN_BOXED(3345129,32,FLEN)
NAN_BOXED(1031798656,32,FLEN)
NAN_BOXED(2132835913,32,FLEN)
NAN_BOXED(3345129,32,FLEN)
NAN_BOXED(1031798720,32,FLEN)
NAN_BOXED(2132835913,32,FLEN)
NAN_BOXED(3345129,32,FLEN)
NAN_BOXED(1031798752,32,FLEN)
NAN_BOXED(2132835913,32,FLEN)
NAN_BOXED(3345129,32,FLEN)
NAN_BOXED(1031798768,32,FLEN)
NAN_BOXED(2132835913,32,FLEN)
NAN_BOXED(3345129,32,FLEN)
NAN_BOXED(1031798776,32,FLEN)
NAN_BOXED(2132835913,32,FLEN)
NAN_BOXED(3345129,32,FLEN)
NAN_BOXED(1031798780,32,FLEN)
NAN_BOXED(2132835913,32,FLEN)
NAN_BOXED(3345129,32,FLEN)
NAN_BOXED(1031798782,32,FLEN)
NAN_BOXED(2132835913,32,FLEN)
NAN_BOXED(3345129,32,FLEN)
NAN_BOXED(1031798783,32,FLEN)
NAN_BOXED(2132835913,32,FLEN)
NAN_BOXED(3345129,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2132835913,32,FLEN)
NAN_BOXED(3345129,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2132835913,32,FLEN)
NAN_BOXED(3345129,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2132835913,32,FLEN)
NAN_BOXED(3345129,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2132835913,32,FLEN)
NAN_BOXED(3345129,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2132835913,32,FLEN)
NAN_BOXED(3345129,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2132835913,32,FLEN)
NAN_BOXED(3345129,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2132835913,32,FLEN)
NAN_BOXED(3345129,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2132835913,32,FLEN)
NAN_BOXED(3345129,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2132835913,32,FLEN)
NAN_BOXED(3345129,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2132835913,32,FLEN)
NAN_BOXED(3345129,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2132835913,32,FLEN)
NAN_BOXED(3345129,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2132835913,32,FLEN)
NAN_BOXED(3345129,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2132835913,32,FLEN)
NAN_BOXED(3345129,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2132835913,32,FLEN)
NAN_BOXED(3345129,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2132835913,32,FLEN)
NAN_BOXED(3345129,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2132855363,32,FLEN)
NAN_BOXED(2150822603,32,FLEN)
NAN_BOXED(3019898880,32,FLEN)
NAN_BOXED(2132855363,32,FLEN)
NAN_BOXED(2150822603,32,FLEN)
NAN_BOXED(3019898881,32,FLEN)
NAN_BOXED(2132855363,32,FLEN)
NAN_BOXED(2150822603,32,FLEN)
NAN_BOXED(3019898883,32,FLEN)
NAN_BOXED(2132855363,32,FLEN)
NAN_BOXED(2150822603,32,FLEN)
NAN_BOXED(3019898887,32,FLEN)
NAN_BOXED(2132855363,32,FLEN)
NAN_BOXED(2150822603,32,FLEN)
NAN_BOXED(3019898895,32,FLEN)
NAN_BOXED(2132855363,32,FLEN)
NAN_BOXED(2150822603,32,FLEN)
NAN_BOXED(3019898911,32,FLEN)
NAN_BOXED(2132855363,32,FLEN)
NAN_BOXED(2150822603,32,FLEN)
NAN_BOXED(3019898943,32,FLEN)
NAN_BOXED(2132855363,32,FLEN)
NAN_BOXED(2150822603,32,FLEN)
NAN_BOXED(3019899007,32,FLEN)
NAN_BOXED(2132855363,32,FLEN)
NAN_BOXED(2150822603,32,FLEN)
NAN_BOXED(3019899135,32,FLEN)
NAN_BOXED(2132855363,32,FLEN)
NAN_BOXED(2150822603,32,FLEN)
NAN_BOXED(3019899391,32,FLEN)
NAN_BOXED(2132855363,32,FLEN)
NAN_BOXED(2150822603,32,FLEN)
NAN_BOXED(3019899903,32,FLEN)
NAN_BOXED(2132855363,32,FLEN)
NAN_BOXED(2150822603,32,FLEN)
NAN_BOXED(3019900927,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
