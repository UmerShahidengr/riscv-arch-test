
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:17:59 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_32128:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20ca43 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32f2cb and fs3 == 1 and fe3 == 0x68 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20ca43; op2val:0x8032f2cb;
op3val:0xb4000fff; valaddr_reg:x3; val_offset:96384*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96384*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32129:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20ca43 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32f2cb and fs3 == 1 and fe3 == 0x68 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20ca43; op2val:0x8032f2cb;
op3val:0xb4001fff; valaddr_reg:x3; val_offset:96387*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96387*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32130:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20ca43 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32f2cb and fs3 == 1 and fe3 == 0x68 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20ca43; op2val:0x8032f2cb;
op3val:0xb4003fff; valaddr_reg:x3; val_offset:96390*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96390*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32131:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20ca43 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32f2cb and fs3 == 1 and fe3 == 0x68 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20ca43; op2val:0x8032f2cb;
op3val:0xb4007fff; valaddr_reg:x3; val_offset:96393*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96393*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32132:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20ca43 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32f2cb and fs3 == 1 and fe3 == 0x68 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20ca43; op2val:0x8032f2cb;
op3val:0xb400ffff; valaddr_reg:x3; val_offset:96396*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96396*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32133:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20ca43 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32f2cb and fs3 == 1 and fe3 == 0x68 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20ca43; op2val:0x8032f2cb;
op3val:0xb401ffff; valaddr_reg:x3; val_offset:96399*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96399*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32134:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20ca43 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32f2cb and fs3 == 1 and fe3 == 0x68 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20ca43; op2val:0x8032f2cb;
op3val:0xb403ffff; valaddr_reg:x3; val_offset:96402*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96402*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32135:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20ca43 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32f2cb and fs3 == 1 and fe3 == 0x68 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20ca43; op2val:0x8032f2cb;
op3val:0xb407ffff; valaddr_reg:x3; val_offset:96405*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96405*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32136:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20ca43 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32f2cb and fs3 == 1 and fe3 == 0x68 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20ca43; op2val:0x8032f2cb;
op3val:0xb40fffff; valaddr_reg:x3; val_offset:96408*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96408*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32137:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20ca43 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32f2cb and fs3 == 1 and fe3 == 0x68 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20ca43; op2val:0x8032f2cb;
op3val:0xb41fffff; valaddr_reg:x3; val_offset:96411*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96411*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32138:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20ca43 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32f2cb and fs3 == 1 and fe3 == 0x68 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20ca43; op2val:0x8032f2cb;
op3val:0xb43fffff; valaddr_reg:x3; val_offset:96414*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96414*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32139:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20ca43 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32f2cb and fs3 == 1 and fe3 == 0x68 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20ca43; op2val:0x8032f2cb;
op3val:0xb4400000; valaddr_reg:x3; val_offset:96417*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96417*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32140:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20ca43 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32f2cb and fs3 == 1 and fe3 == 0x68 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20ca43; op2val:0x8032f2cb;
op3val:0xb4600000; valaddr_reg:x3; val_offset:96420*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96420*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32141:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20ca43 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32f2cb and fs3 == 1 and fe3 == 0x68 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20ca43; op2val:0x8032f2cb;
op3val:0xb4700000; valaddr_reg:x3; val_offset:96423*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96423*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32142:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20ca43 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32f2cb and fs3 == 1 and fe3 == 0x68 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20ca43; op2val:0x8032f2cb;
op3val:0xb4780000; valaddr_reg:x3; val_offset:96426*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96426*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32143:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20ca43 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32f2cb and fs3 == 1 and fe3 == 0x68 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20ca43; op2val:0x8032f2cb;
op3val:0xb47c0000; valaddr_reg:x3; val_offset:96429*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96429*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32144:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20ca43 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32f2cb and fs3 == 1 and fe3 == 0x68 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20ca43; op2val:0x8032f2cb;
op3val:0xb47e0000; valaddr_reg:x3; val_offset:96432*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96432*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32145:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20ca43 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32f2cb and fs3 == 1 and fe3 == 0x68 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20ca43; op2val:0x8032f2cb;
op3val:0xb47f0000; valaddr_reg:x3; val_offset:96435*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96435*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32146:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20ca43 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32f2cb and fs3 == 1 and fe3 == 0x68 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20ca43; op2val:0x8032f2cb;
op3val:0xb47f8000; valaddr_reg:x3; val_offset:96438*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96438*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32147:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20ca43 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32f2cb and fs3 == 1 and fe3 == 0x68 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20ca43; op2val:0x8032f2cb;
op3val:0xb47fc000; valaddr_reg:x3; val_offset:96441*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96441*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32148:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20ca43 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32f2cb and fs3 == 1 and fe3 == 0x68 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20ca43; op2val:0x8032f2cb;
op3val:0xb47fe000; valaddr_reg:x3; val_offset:96444*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96444*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32149:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20ca43 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32f2cb and fs3 == 1 and fe3 == 0x68 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20ca43; op2val:0x8032f2cb;
op3val:0xb47ff000; valaddr_reg:x3; val_offset:96447*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96447*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32150:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20ca43 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32f2cb and fs3 == 1 and fe3 == 0x68 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20ca43; op2val:0x8032f2cb;
op3val:0xb47ff800; valaddr_reg:x3; val_offset:96450*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96450*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32151:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20ca43 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32f2cb and fs3 == 1 and fe3 == 0x68 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20ca43; op2val:0x8032f2cb;
op3val:0xb47ffc00; valaddr_reg:x3; val_offset:96453*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96453*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32152:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20ca43 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32f2cb and fs3 == 1 and fe3 == 0x68 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20ca43; op2val:0x8032f2cb;
op3val:0xb47ffe00; valaddr_reg:x3; val_offset:96456*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96456*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32153:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20ca43 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32f2cb and fs3 == 1 and fe3 == 0x68 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20ca43; op2val:0x8032f2cb;
op3val:0xb47fff00; valaddr_reg:x3; val_offset:96459*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96459*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32154:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20ca43 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32f2cb and fs3 == 1 and fe3 == 0x68 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20ca43; op2val:0x8032f2cb;
op3val:0xb47fff80; valaddr_reg:x3; val_offset:96462*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96462*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32155:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20ca43 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32f2cb and fs3 == 1 and fe3 == 0x68 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20ca43; op2val:0x8032f2cb;
op3val:0xb47fffc0; valaddr_reg:x3; val_offset:96465*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96465*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32156:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20ca43 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32f2cb and fs3 == 1 and fe3 == 0x68 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20ca43; op2val:0x8032f2cb;
op3val:0xb47fffe0; valaddr_reg:x3; val_offset:96468*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96468*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32157:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20ca43 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32f2cb and fs3 == 1 and fe3 == 0x68 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20ca43; op2val:0x8032f2cb;
op3val:0xb47ffff0; valaddr_reg:x3; val_offset:96471*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96471*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32158:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20ca43 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32f2cb and fs3 == 1 and fe3 == 0x68 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20ca43; op2val:0x8032f2cb;
op3val:0xb47ffff8; valaddr_reg:x3; val_offset:96474*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96474*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32159:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20ca43 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32f2cb and fs3 == 1 and fe3 == 0x68 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20ca43; op2val:0x8032f2cb;
op3val:0xb47ffffc; valaddr_reg:x3; val_offset:96477*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96477*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32160:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20ca43 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32f2cb and fs3 == 1 and fe3 == 0x68 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20ca43; op2val:0x8032f2cb;
op3val:0xb47ffffe; valaddr_reg:x3; val_offset:96480*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96480*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32161:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20ca43 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32f2cb and fs3 == 1 and fe3 == 0x68 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20ca43; op2val:0x8032f2cb;
op3val:0xb47fffff; valaddr_reg:x3; val_offset:96483*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96483*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32162:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20ca43 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32f2cb and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20ca43; op2val:0x8032f2cb;
op3val:0xbf800001; valaddr_reg:x3; val_offset:96486*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96486*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32163:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20ca43 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32f2cb and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20ca43; op2val:0x8032f2cb;
op3val:0xbf800003; valaddr_reg:x3; val_offset:96489*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96489*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32164:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20ca43 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32f2cb and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20ca43; op2val:0x8032f2cb;
op3val:0xbf800007; valaddr_reg:x3; val_offset:96492*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96492*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32165:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20ca43 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32f2cb and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20ca43; op2val:0x8032f2cb;
op3val:0xbf999999; valaddr_reg:x3; val_offset:96495*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96495*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32166:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20ca43 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32f2cb and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20ca43; op2val:0x8032f2cb;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:96498*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96498*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32167:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20ca43 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32f2cb and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20ca43; op2val:0x8032f2cb;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:96501*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96501*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32168:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20ca43 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32f2cb and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20ca43; op2val:0x8032f2cb;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:96504*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96504*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32169:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20ca43 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32f2cb and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20ca43; op2val:0x8032f2cb;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:96507*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96507*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32170:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20ca43 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32f2cb and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20ca43; op2val:0x8032f2cb;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:96510*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96510*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32171:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20ca43 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32f2cb and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20ca43; op2val:0x8032f2cb;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:96513*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96513*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32172:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20ca43 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32f2cb and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20ca43; op2val:0x8032f2cb;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:96516*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96516*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32173:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20ca43 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32f2cb and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20ca43; op2val:0x8032f2cb;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:96519*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96519*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32174:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20ca43 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32f2cb and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20ca43; op2val:0x8032f2cb;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:96522*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96522*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32175:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20ca43 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32f2cb and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20ca43; op2val:0x8032f2cb;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:96525*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96525*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32176:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20ca43 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32f2cb and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20ca43; op2val:0x8032f2cb;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:96528*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96528*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32177:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20ca43 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32f2cb and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20ca43; op2val:0x8032f2cb;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:96531*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96531*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32178:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d870 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32ee4d and fs3 == 1 and fe3 == 0x60 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20d870; op2val:0x8032ee4d;
op3val:0xb0000000; valaddr_reg:x3; val_offset:96534*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96534*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32179:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d870 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32ee4d and fs3 == 1 and fe3 == 0x60 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20d870; op2val:0x8032ee4d;
op3val:0xb0000001; valaddr_reg:x3; val_offset:96537*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96537*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32180:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d870 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32ee4d and fs3 == 1 and fe3 == 0x60 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20d870; op2val:0x8032ee4d;
op3val:0xb0000003; valaddr_reg:x3; val_offset:96540*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96540*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32181:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d870 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32ee4d and fs3 == 1 and fe3 == 0x60 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20d870; op2val:0x8032ee4d;
op3val:0xb0000007; valaddr_reg:x3; val_offset:96543*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96543*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32182:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d870 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32ee4d and fs3 == 1 and fe3 == 0x60 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20d870; op2val:0x8032ee4d;
op3val:0xb000000f; valaddr_reg:x3; val_offset:96546*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96546*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32183:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d870 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32ee4d and fs3 == 1 and fe3 == 0x60 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20d870; op2val:0x8032ee4d;
op3val:0xb000001f; valaddr_reg:x3; val_offset:96549*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96549*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32184:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d870 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32ee4d and fs3 == 1 and fe3 == 0x60 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20d870; op2val:0x8032ee4d;
op3val:0xb000003f; valaddr_reg:x3; val_offset:96552*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96552*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32185:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d870 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32ee4d and fs3 == 1 and fe3 == 0x60 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20d870; op2val:0x8032ee4d;
op3val:0xb000007f; valaddr_reg:x3; val_offset:96555*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96555*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32186:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d870 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32ee4d and fs3 == 1 and fe3 == 0x60 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20d870; op2val:0x8032ee4d;
op3val:0xb00000ff; valaddr_reg:x3; val_offset:96558*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96558*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32187:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d870 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32ee4d and fs3 == 1 and fe3 == 0x60 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20d870; op2val:0x8032ee4d;
op3val:0xb00001ff; valaddr_reg:x3; val_offset:96561*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96561*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32188:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d870 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32ee4d and fs3 == 1 and fe3 == 0x60 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20d870; op2val:0x8032ee4d;
op3val:0xb00003ff; valaddr_reg:x3; val_offset:96564*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96564*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32189:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d870 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32ee4d and fs3 == 1 and fe3 == 0x60 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20d870; op2val:0x8032ee4d;
op3val:0xb00007ff; valaddr_reg:x3; val_offset:96567*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96567*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32190:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d870 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32ee4d and fs3 == 1 and fe3 == 0x60 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20d870; op2val:0x8032ee4d;
op3val:0xb0000fff; valaddr_reg:x3; val_offset:96570*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96570*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32191:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d870 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32ee4d and fs3 == 1 and fe3 == 0x60 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20d870; op2val:0x8032ee4d;
op3val:0xb0001fff; valaddr_reg:x3; val_offset:96573*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96573*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32192:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d870 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32ee4d and fs3 == 1 and fe3 == 0x60 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20d870; op2val:0x8032ee4d;
op3val:0xb0003fff; valaddr_reg:x3; val_offset:96576*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96576*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32193:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d870 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32ee4d and fs3 == 1 and fe3 == 0x60 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20d870; op2val:0x8032ee4d;
op3val:0xb0007fff; valaddr_reg:x3; val_offset:96579*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96579*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32194:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d870 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32ee4d and fs3 == 1 and fe3 == 0x60 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20d870; op2val:0x8032ee4d;
op3val:0xb000ffff; valaddr_reg:x3; val_offset:96582*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96582*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32195:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d870 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32ee4d and fs3 == 1 and fe3 == 0x60 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20d870; op2val:0x8032ee4d;
op3val:0xb001ffff; valaddr_reg:x3; val_offset:96585*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96585*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32196:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d870 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32ee4d and fs3 == 1 and fe3 == 0x60 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20d870; op2val:0x8032ee4d;
op3val:0xb003ffff; valaddr_reg:x3; val_offset:96588*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96588*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32197:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d870 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32ee4d and fs3 == 1 and fe3 == 0x60 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20d870; op2val:0x8032ee4d;
op3val:0xb007ffff; valaddr_reg:x3; val_offset:96591*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96591*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32198:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d870 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32ee4d and fs3 == 1 and fe3 == 0x60 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20d870; op2val:0x8032ee4d;
op3val:0xb00fffff; valaddr_reg:x3; val_offset:96594*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96594*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32199:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d870 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32ee4d and fs3 == 1 and fe3 == 0x60 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20d870; op2val:0x8032ee4d;
op3val:0xb01fffff; valaddr_reg:x3; val_offset:96597*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96597*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32200:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d870 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32ee4d and fs3 == 1 and fe3 == 0x60 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20d870; op2val:0x8032ee4d;
op3val:0xb03fffff; valaddr_reg:x3; val_offset:96600*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96600*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32201:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d870 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32ee4d and fs3 == 1 and fe3 == 0x60 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20d870; op2val:0x8032ee4d;
op3val:0xb0400000; valaddr_reg:x3; val_offset:96603*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96603*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32202:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d870 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32ee4d and fs3 == 1 and fe3 == 0x60 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20d870; op2val:0x8032ee4d;
op3val:0xb0600000; valaddr_reg:x3; val_offset:96606*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96606*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32203:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d870 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32ee4d and fs3 == 1 and fe3 == 0x60 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20d870; op2val:0x8032ee4d;
op3val:0xb0700000; valaddr_reg:x3; val_offset:96609*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96609*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32204:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d870 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32ee4d and fs3 == 1 and fe3 == 0x60 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20d870; op2val:0x8032ee4d;
op3val:0xb0780000; valaddr_reg:x3; val_offset:96612*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96612*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32205:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d870 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32ee4d and fs3 == 1 and fe3 == 0x60 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20d870; op2val:0x8032ee4d;
op3val:0xb07c0000; valaddr_reg:x3; val_offset:96615*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96615*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32206:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d870 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32ee4d and fs3 == 1 and fe3 == 0x60 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20d870; op2val:0x8032ee4d;
op3val:0xb07e0000; valaddr_reg:x3; val_offset:96618*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96618*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32207:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d870 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32ee4d and fs3 == 1 and fe3 == 0x60 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20d870; op2val:0x8032ee4d;
op3val:0xb07f0000; valaddr_reg:x3; val_offset:96621*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96621*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32208:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d870 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32ee4d and fs3 == 1 and fe3 == 0x60 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20d870; op2val:0x8032ee4d;
op3val:0xb07f8000; valaddr_reg:x3; val_offset:96624*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96624*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32209:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d870 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32ee4d and fs3 == 1 and fe3 == 0x60 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20d870; op2val:0x8032ee4d;
op3val:0xb07fc000; valaddr_reg:x3; val_offset:96627*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96627*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32210:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d870 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32ee4d and fs3 == 1 and fe3 == 0x60 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20d870; op2val:0x8032ee4d;
op3val:0xb07fe000; valaddr_reg:x3; val_offset:96630*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96630*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32211:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d870 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32ee4d and fs3 == 1 and fe3 == 0x60 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20d870; op2val:0x8032ee4d;
op3val:0xb07ff000; valaddr_reg:x3; val_offset:96633*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96633*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32212:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d870 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32ee4d and fs3 == 1 and fe3 == 0x60 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20d870; op2val:0x8032ee4d;
op3val:0xb07ff800; valaddr_reg:x3; val_offset:96636*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96636*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32213:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d870 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32ee4d and fs3 == 1 and fe3 == 0x60 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20d870; op2val:0x8032ee4d;
op3val:0xb07ffc00; valaddr_reg:x3; val_offset:96639*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96639*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32214:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d870 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32ee4d and fs3 == 1 and fe3 == 0x60 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20d870; op2val:0x8032ee4d;
op3val:0xb07ffe00; valaddr_reg:x3; val_offset:96642*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96642*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32215:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d870 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32ee4d and fs3 == 1 and fe3 == 0x60 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20d870; op2val:0x8032ee4d;
op3val:0xb07fff00; valaddr_reg:x3; val_offset:96645*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96645*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32216:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d870 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32ee4d and fs3 == 1 and fe3 == 0x60 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20d870; op2val:0x8032ee4d;
op3val:0xb07fff80; valaddr_reg:x3; val_offset:96648*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96648*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32217:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d870 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32ee4d and fs3 == 1 and fe3 == 0x60 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20d870; op2val:0x8032ee4d;
op3val:0xb07fffc0; valaddr_reg:x3; val_offset:96651*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96651*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32218:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d870 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32ee4d and fs3 == 1 and fe3 == 0x60 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20d870; op2val:0x8032ee4d;
op3val:0xb07fffe0; valaddr_reg:x3; val_offset:96654*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96654*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32219:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d870 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32ee4d and fs3 == 1 and fe3 == 0x60 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20d870; op2val:0x8032ee4d;
op3val:0xb07ffff0; valaddr_reg:x3; val_offset:96657*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96657*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32220:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d870 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32ee4d and fs3 == 1 and fe3 == 0x60 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20d870; op2val:0x8032ee4d;
op3val:0xb07ffff8; valaddr_reg:x3; val_offset:96660*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96660*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32221:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d870 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32ee4d and fs3 == 1 and fe3 == 0x60 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20d870; op2val:0x8032ee4d;
op3val:0xb07ffffc; valaddr_reg:x3; val_offset:96663*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96663*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32222:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d870 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32ee4d and fs3 == 1 and fe3 == 0x60 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20d870; op2val:0x8032ee4d;
op3val:0xb07ffffe; valaddr_reg:x3; val_offset:96666*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96666*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32223:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d870 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32ee4d and fs3 == 1 and fe3 == 0x60 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20d870; op2val:0x8032ee4d;
op3val:0xb07fffff; valaddr_reg:x3; val_offset:96669*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96669*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32224:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d870 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32ee4d and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20d870; op2val:0x8032ee4d;
op3val:0xbf800001; valaddr_reg:x3; val_offset:96672*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96672*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32225:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d870 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32ee4d and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20d870; op2val:0x8032ee4d;
op3val:0xbf800003; valaddr_reg:x3; val_offset:96675*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96675*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32226:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d870 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32ee4d and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20d870; op2val:0x8032ee4d;
op3val:0xbf800007; valaddr_reg:x3; val_offset:96678*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96678*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32227:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d870 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32ee4d and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20d870; op2val:0x8032ee4d;
op3val:0xbf999999; valaddr_reg:x3; val_offset:96681*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96681*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32228:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d870 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32ee4d and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20d870; op2val:0x8032ee4d;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:96684*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96684*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32229:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d870 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32ee4d and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20d870; op2val:0x8032ee4d;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:96687*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96687*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32230:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d870 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32ee4d and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20d870; op2val:0x8032ee4d;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:96690*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96690*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32231:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d870 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32ee4d and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20d870; op2val:0x8032ee4d;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:96693*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96693*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32232:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d870 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32ee4d and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20d870; op2val:0x8032ee4d;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:96696*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96696*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32233:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d870 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32ee4d and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20d870; op2val:0x8032ee4d;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:96699*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96699*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32234:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d870 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32ee4d and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20d870; op2val:0x8032ee4d;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:96702*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96702*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32235:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d870 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32ee4d and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20d870; op2val:0x8032ee4d;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:96705*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96705*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32236:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d870 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32ee4d and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20d870; op2val:0x8032ee4d;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:96708*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96708*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32237:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d870 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32ee4d and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20d870; op2val:0x8032ee4d;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:96711*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96711*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32238:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d870 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32ee4d and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20d870; op2val:0x8032ee4d;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:96714*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96714*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32239:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d870 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32ee4d and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20d870; op2val:0x8032ee4d;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:96717*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96717*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32240:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20dec0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x32ec4e and fs3 == 0 and fe3 == 0x47 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20dec0; op2val:0x32ec4e;
op3val:0x23800000; valaddr_reg:x3; val_offset:96720*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96720*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32241:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20dec0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x32ec4e and fs3 == 0 and fe3 == 0x47 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20dec0; op2val:0x32ec4e;
op3val:0x23800001; valaddr_reg:x3; val_offset:96723*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96723*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32242:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20dec0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x32ec4e and fs3 == 0 and fe3 == 0x47 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20dec0; op2val:0x32ec4e;
op3val:0x23800003; valaddr_reg:x3; val_offset:96726*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96726*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32243:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20dec0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x32ec4e and fs3 == 0 and fe3 == 0x47 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20dec0; op2val:0x32ec4e;
op3val:0x23800007; valaddr_reg:x3; val_offset:96729*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96729*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32244:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20dec0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x32ec4e and fs3 == 0 and fe3 == 0x47 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20dec0; op2val:0x32ec4e;
op3val:0x2380000f; valaddr_reg:x3; val_offset:96732*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96732*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32245:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20dec0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x32ec4e and fs3 == 0 and fe3 == 0x47 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20dec0; op2val:0x32ec4e;
op3val:0x2380001f; valaddr_reg:x3; val_offset:96735*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96735*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32246:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20dec0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x32ec4e and fs3 == 0 and fe3 == 0x47 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20dec0; op2val:0x32ec4e;
op3val:0x2380003f; valaddr_reg:x3; val_offset:96738*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96738*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32247:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20dec0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x32ec4e and fs3 == 0 and fe3 == 0x47 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20dec0; op2val:0x32ec4e;
op3val:0x2380007f; valaddr_reg:x3; val_offset:96741*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96741*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32248:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20dec0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x32ec4e and fs3 == 0 and fe3 == 0x47 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20dec0; op2val:0x32ec4e;
op3val:0x238000ff; valaddr_reg:x3; val_offset:96744*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96744*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32249:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20dec0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x32ec4e and fs3 == 0 and fe3 == 0x47 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20dec0; op2val:0x32ec4e;
op3val:0x238001ff; valaddr_reg:x3; val_offset:96747*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96747*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32250:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20dec0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x32ec4e and fs3 == 0 and fe3 == 0x47 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20dec0; op2val:0x32ec4e;
op3val:0x238003ff; valaddr_reg:x3; val_offset:96750*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96750*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32251:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20dec0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x32ec4e and fs3 == 0 and fe3 == 0x47 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20dec0; op2val:0x32ec4e;
op3val:0x238007ff; valaddr_reg:x3; val_offset:96753*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96753*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32252:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20dec0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x32ec4e and fs3 == 0 and fe3 == 0x47 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20dec0; op2val:0x32ec4e;
op3val:0x23800fff; valaddr_reg:x3; val_offset:96756*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96756*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32253:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20dec0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x32ec4e and fs3 == 0 and fe3 == 0x47 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20dec0; op2val:0x32ec4e;
op3val:0x23801fff; valaddr_reg:x3; val_offset:96759*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96759*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32254:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20dec0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x32ec4e and fs3 == 0 and fe3 == 0x47 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20dec0; op2val:0x32ec4e;
op3val:0x23803fff; valaddr_reg:x3; val_offset:96762*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96762*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32255:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20dec0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x32ec4e and fs3 == 0 and fe3 == 0x47 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20dec0; op2val:0x32ec4e;
op3val:0x23807fff; valaddr_reg:x3; val_offset:96765*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96765*0 + 3*251*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2132855363,32,FLEN)
NAN_BOXED(2150822603,32,FLEN)
NAN_BOXED(3019902975,32,FLEN)
NAN_BOXED(2132855363,32,FLEN)
NAN_BOXED(2150822603,32,FLEN)
NAN_BOXED(3019907071,32,FLEN)
NAN_BOXED(2132855363,32,FLEN)
NAN_BOXED(2150822603,32,FLEN)
NAN_BOXED(3019915263,32,FLEN)
NAN_BOXED(2132855363,32,FLEN)
NAN_BOXED(2150822603,32,FLEN)
NAN_BOXED(3019931647,32,FLEN)
NAN_BOXED(2132855363,32,FLEN)
NAN_BOXED(2150822603,32,FLEN)
NAN_BOXED(3019964415,32,FLEN)
NAN_BOXED(2132855363,32,FLEN)
NAN_BOXED(2150822603,32,FLEN)
NAN_BOXED(3020029951,32,FLEN)
NAN_BOXED(2132855363,32,FLEN)
NAN_BOXED(2150822603,32,FLEN)
NAN_BOXED(3020161023,32,FLEN)
NAN_BOXED(2132855363,32,FLEN)
NAN_BOXED(2150822603,32,FLEN)
NAN_BOXED(3020423167,32,FLEN)
NAN_BOXED(2132855363,32,FLEN)
NAN_BOXED(2150822603,32,FLEN)
NAN_BOXED(3020947455,32,FLEN)
NAN_BOXED(2132855363,32,FLEN)
NAN_BOXED(2150822603,32,FLEN)
NAN_BOXED(3021996031,32,FLEN)
NAN_BOXED(2132855363,32,FLEN)
NAN_BOXED(2150822603,32,FLEN)
NAN_BOXED(3024093183,32,FLEN)
NAN_BOXED(2132855363,32,FLEN)
NAN_BOXED(2150822603,32,FLEN)
NAN_BOXED(3024093184,32,FLEN)
NAN_BOXED(2132855363,32,FLEN)
NAN_BOXED(2150822603,32,FLEN)
NAN_BOXED(3026190336,32,FLEN)
NAN_BOXED(2132855363,32,FLEN)
NAN_BOXED(2150822603,32,FLEN)
NAN_BOXED(3027238912,32,FLEN)
NAN_BOXED(2132855363,32,FLEN)
NAN_BOXED(2150822603,32,FLEN)
NAN_BOXED(3027763200,32,FLEN)
NAN_BOXED(2132855363,32,FLEN)
NAN_BOXED(2150822603,32,FLEN)
NAN_BOXED(3028025344,32,FLEN)
NAN_BOXED(2132855363,32,FLEN)
NAN_BOXED(2150822603,32,FLEN)
NAN_BOXED(3028156416,32,FLEN)
NAN_BOXED(2132855363,32,FLEN)
NAN_BOXED(2150822603,32,FLEN)
NAN_BOXED(3028221952,32,FLEN)
NAN_BOXED(2132855363,32,FLEN)
NAN_BOXED(2150822603,32,FLEN)
NAN_BOXED(3028254720,32,FLEN)
NAN_BOXED(2132855363,32,FLEN)
NAN_BOXED(2150822603,32,FLEN)
NAN_BOXED(3028271104,32,FLEN)
NAN_BOXED(2132855363,32,FLEN)
NAN_BOXED(2150822603,32,FLEN)
NAN_BOXED(3028279296,32,FLEN)
NAN_BOXED(2132855363,32,FLEN)
NAN_BOXED(2150822603,32,FLEN)
NAN_BOXED(3028283392,32,FLEN)
NAN_BOXED(2132855363,32,FLEN)
NAN_BOXED(2150822603,32,FLEN)
NAN_BOXED(3028285440,32,FLEN)
NAN_BOXED(2132855363,32,FLEN)
NAN_BOXED(2150822603,32,FLEN)
NAN_BOXED(3028286464,32,FLEN)
NAN_BOXED(2132855363,32,FLEN)
NAN_BOXED(2150822603,32,FLEN)
NAN_BOXED(3028286976,32,FLEN)
NAN_BOXED(2132855363,32,FLEN)
NAN_BOXED(2150822603,32,FLEN)
NAN_BOXED(3028287232,32,FLEN)
NAN_BOXED(2132855363,32,FLEN)
NAN_BOXED(2150822603,32,FLEN)
NAN_BOXED(3028287360,32,FLEN)
NAN_BOXED(2132855363,32,FLEN)
NAN_BOXED(2150822603,32,FLEN)
NAN_BOXED(3028287424,32,FLEN)
NAN_BOXED(2132855363,32,FLEN)
NAN_BOXED(2150822603,32,FLEN)
NAN_BOXED(3028287456,32,FLEN)
NAN_BOXED(2132855363,32,FLEN)
NAN_BOXED(2150822603,32,FLEN)
NAN_BOXED(3028287472,32,FLEN)
NAN_BOXED(2132855363,32,FLEN)
NAN_BOXED(2150822603,32,FLEN)
NAN_BOXED(3028287480,32,FLEN)
NAN_BOXED(2132855363,32,FLEN)
NAN_BOXED(2150822603,32,FLEN)
NAN_BOXED(3028287484,32,FLEN)
NAN_BOXED(2132855363,32,FLEN)
NAN_BOXED(2150822603,32,FLEN)
NAN_BOXED(3028287486,32,FLEN)
NAN_BOXED(2132855363,32,FLEN)
NAN_BOXED(2150822603,32,FLEN)
NAN_BOXED(3028287487,32,FLEN)
NAN_BOXED(2132855363,32,FLEN)
NAN_BOXED(2150822603,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2132855363,32,FLEN)
NAN_BOXED(2150822603,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2132855363,32,FLEN)
NAN_BOXED(2150822603,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
NAN_BOXED(2132855363,32,FLEN)
NAN_BOXED(2150822603,32,FLEN)
NAN_BOXED(3214514585,32,FLEN)
NAN_BOXED(2132855363,32,FLEN)
NAN_BOXED(2150822603,32,FLEN)
NAN_BOXED(3215233609,32,FLEN)
NAN_BOXED(2132855363,32,FLEN)
NAN_BOXED(2150822603,32,FLEN)
NAN_BOXED(3216192307,32,FLEN)
NAN_BOXED(2132855363,32,FLEN)
NAN_BOXED(2150822603,32,FLEN)
NAN_BOXED(3216431981,32,FLEN)
NAN_BOXED(2132855363,32,FLEN)
NAN_BOXED(2150822603,32,FLEN)
NAN_BOXED(3216751547,32,FLEN)
NAN_BOXED(2132855363,32,FLEN)
NAN_BOXED(2150822603,32,FLEN)
NAN_BOXED(3217310788,32,FLEN)
NAN_BOXED(2132855363,32,FLEN)
NAN_BOXED(2150822603,32,FLEN)
NAN_BOXED(3217870028,32,FLEN)
NAN_BOXED(2132855363,32,FLEN)
NAN_BOXED(2150822603,32,FLEN)
NAN_BOXED(3218828726,32,FLEN)
NAN_BOXED(2132855363,32,FLEN)
NAN_BOXED(2150822603,32,FLEN)
NAN_BOXED(3219547750,32,FLEN)
NAN_BOXED(2132855363,32,FLEN)
NAN_BOXED(2150822603,32,FLEN)
NAN_BOXED(3220027099,32,FLEN)
NAN_BOXED(2132855363,32,FLEN)
NAN_BOXED(2150822603,32,FLEN)
NAN_BOXED(3221225464,32,FLEN)
NAN_BOXED(2132855363,32,FLEN)
NAN_BOXED(2150822603,32,FLEN)
NAN_BOXED(3221225468,32,FLEN)
NAN_BOXED(2132855363,32,FLEN)
NAN_BOXED(2150822603,32,FLEN)
NAN_BOXED(3221225470,32,FLEN)
NAN_BOXED(2132858992,32,FLEN)
NAN_BOXED(2150821453,32,FLEN)
NAN_BOXED(2952790016,32,FLEN)
NAN_BOXED(2132858992,32,FLEN)
NAN_BOXED(2150821453,32,FLEN)
NAN_BOXED(2952790017,32,FLEN)
NAN_BOXED(2132858992,32,FLEN)
NAN_BOXED(2150821453,32,FLEN)
NAN_BOXED(2952790019,32,FLEN)
NAN_BOXED(2132858992,32,FLEN)
NAN_BOXED(2150821453,32,FLEN)
NAN_BOXED(2952790023,32,FLEN)
NAN_BOXED(2132858992,32,FLEN)
NAN_BOXED(2150821453,32,FLEN)
NAN_BOXED(2952790031,32,FLEN)
NAN_BOXED(2132858992,32,FLEN)
NAN_BOXED(2150821453,32,FLEN)
NAN_BOXED(2952790047,32,FLEN)
NAN_BOXED(2132858992,32,FLEN)
NAN_BOXED(2150821453,32,FLEN)
NAN_BOXED(2952790079,32,FLEN)
NAN_BOXED(2132858992,32,FLEN)
NAN_BOXED(2150821453,32,FLEN)
NAN_BOXED(2952790143,32,FLEN)
NAN_BOXED(2132858992,32,FLEN)
NAN_BOXED(2150821453,32,FLEN)
NAN_BOXED(2952790271,32,FLEN)
NAN_BOXED(2132858992,32,FLEN)
NAN_BOXED(2150821453,32,FLEN)
NAN_BOXED(2952790527,32,FLEN)
NAN_BOXED(2132858992,32,FLEN)
NAN_BOXED(2150821453,32,FLEN)
NAN_BOXED(2952791039,32,FLEN)
NAN_BOXED(2132858992,32,FLEN)
NAN_BOXED(2150821453,32,FLEN)
NAN_BOXED(2952792063,32,FLEN)
NAN_BOXED(2132858992,32,FLEN)
NAN_BOXED(2150821453,32,FLEN)
NAN_BOXED(2952794111,32,FLEN)
NAN_BOXED(2132858992,32,FLEN)
NAN_BOXED(2150821453,32,FLEN)
NAN_BOXED(2952798207,32,FLEN)
NAN_BOXED(2132858992,32,FLEN)
NAN_BOXED(2150821453,32,FLEN)
NAN_BOXED(2952806399,32,FLEN)
NAN_BOXED(2132858992,32,FLEN)
NAN_BOXED(2150821453,32,FLEN)
NAN_BOXED(2952822783,32,FLEN)
NAN_BOXED(2132858992,32,FLEN)
NAN_BOXED(2150821453,32,FLEN)
NAN_BOXED(2952855551,32,FLEN)
NAN_BOXED(2132858992,32,FLEN)
NAN_BOXED(2150821453,32,FLEN)
NAN_BOXED(2952921087,32,FLEN)
NAN_BOXED(2132858992,32,FLEN)
NAN_BOXED(2150821453,32,FLEN)
NAN_BOXED(2953052159,32,FLEN)
NAN_BOXED(2132858992,32,FLEN)
NAN_BOXED(2150821453,32,FLEN)
NAN_BOXED(2953314303,32,FLEN)
NAN_BOXED(2132858992,32,FLEN)
NAN_BOXED(2150821453,32,FLEN)
NAN_BOXED(2953838591,32,FLEN)
NAN_BOXED(2132858992,32,FLEN)
NAN_BOXED(2150821453,32,FLEN)
NAN_BOXED(2954887167,32,FLEN)
NAN_BOXED(2132858992,32,FLEN)
NAN_BOXED(2150821453,32,FLEN)
NAN_BOXED(2956984319,32,FLEN)
NAN_BOXED(2132858992,32,FLEN)
NAN_BOXED(2150821453,32,FLEN)
NAN_BOXED(2956984320,32,FLEN)
NAN_BOXED(2132858992,32,FLEN)
NAN_BOXED(2150821453,32,FLEN)
NAN_BOXED(2959081472,32,FLEN)
NAN_BOXED(2132858992,32,FLEN)
NAN_BOXED(2150821453,32,FLEN)
NAN_BOXED(2960130048,32,FLEN)
NAN_BOXED(2132858992,32,FLEN)
NAN_BOXED(2150821453,32,FLEN)
NAN_BOXED(2960654336,32,FLEN)
NAN_BOXED(2132858992,32,FLEN)
NAN_BOXED(2150821453,32,FLEN)
NAN_BOXED(2960916480,32,FLEN)
NAN_BOXED(2132858992,32,FLEN)
NAN_BOXED(2150821453,32,FLEN)
NAN_BOXED(2961047552,32,FLEN)
NAN_BOXED(2132858992,32,FLEN)
NAN_BOXED(2150821453,32,FLEN)
NAN_BOXED(2961113088,32,FLEN)
NAN_BOXED(2132858992,32,FLEN)
NAN_BOXED(2150821453,32,FLEN)
NAN_BOXED(2961145856,32,FLEN)
NAN_BOXED(2132858992,32,FLEN)
NAN_BOXED(2150821453,32,FLEN)
NAN_BOXED(2961162240,32,FLEN)
NAN_BOXED(2132858992,32,FLEN)
NAN_BOXED(2150821453,32,FLEN)
NAN_BOXED(2961170432,32,FLEN)
NAN_BOXED(2132858992,32,FLEN)
NAN_BOXED(2150821453,32,FLEN)
NAN_BOXED(2961174528,32,FLEN)
NAN_BOXED(2132858992,32,FLEN)
NAN_BOXED(2150821453,32,FLEN)
NAN_BOXED(2961176576,32,FLEN)
NAN_BOXED(2132858992,32,FLEN)
NAN_BOXED(2150821453,32,FLEN)
NAN_BOXED(2961177600,32,FLEN)
NAN_BOXED(2132858992,32,FLEN)
NAN_BOXED(2150821453,32,FLEN)
NAN_BOXED(2961178112,32,FLEN)
NAN_BOXED(2132858992,32,FLEN)
NAN_BOXED(2150821453,32,FLEN)
NAN_BOXED(2961178368,32,FLEN)
NAN_BOXED(2132858992,32,FLEN)
NAN_BOXED(2150821453,32,FLEN)
NAN_BOXED(2961178496,32,FLEN)
NAN_BOXED(2132858992,32,FLEN)
NAN_BOXED(2150821453,32,FLEN)
NAN_BOXED(2961178560,32,FLEN)
NAN_BOXED(2132858992,32,FLEN)
NAN_BOXED(2150821453,32,FLEN)
NAN_BOXED(2961178592,32,FLEN)
NAN_BOXED(2132858992,32,FLEN)
NAN_BOXED(2150821453,32,FLEN)
NAN_BOXED(2961178608,32,FLEN)
NAN_BOXED(2132858992,32,FLEN)
NAN_BOXED(2150821453,32,FLEN)
NAN_BOXED(2961178616,32,FLEN)
NAN_BOXED(2132858992,32,FLEN)
NAN_BOXED(2150821453,32,FLEN)
NAN_BOXED(2961178620,32,FLEN)
NAN_BOXED(2132858992,32,FLEN)
NAN_BOXED(2150821453,32,FLEN)
NAN_BOXED(2961178622,32,FLEN)
NAN_BOXED(2132858992,32,FLEN)
NAN_BOXED(2150821453,32,FLEN)
NAN_BOXED(2961178623,32,FLEN)
NAN_BOXED(2132858992,32,FLEN)
NAN_BOXED(2150821453,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2132858992,32,FLEN)
NAN_BOXED(2150821453,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2132858992,32,FLEN)
NAN_BOXED(2150821453,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
NAN_BOXED(2132858992,32,FLEN)
NAN_BOXED(2150821453,32,FLEN)
NAN_BOXED(3214514585,32,FLEN)
NAN_BOXED(2132858992,32,FLEN)
NAN_BOXED(2150821453,32,FLEN)
NAN_BOXED(3215233609,32,FLEN)
NAN_BOXED(2132858992,32,FLEN)
NAN_BOXED(2150821453,32,FLEN)
NAN_BOXED(3216192307,32,FLEN)
NAN_BOXED(2132858992,32,FLEN)
NAN_BOXED(2150821453,32,FLEN)
NAN_BOXED(3216431981,32,FLEN)
NAN_BOXED(2132858992,32,FLEN)
NAN_BOXED(2150821453,32,FLEN)
NAN_BOXED(3216751547,32,FLEN)
NAN_BOXED(2132858992,32,FLEN)
NAN_BOXED(2150821453,32,FLEN)
NAN_BOXED(3217310788,32,FLEN)
NAN_BOXED(2132858992,32,FLEN)
NAN_BOXED(2150821453,32,FLEN)
NAN_BOXED(3217870028,32,FLEN)
NAN_BOXED(2132858992,32,FLEN)
NAN_BOXED(2150821453,32,FLEN)
NAN_BOXED(3218828726,32,FLEN)
NAN_BOXED(2132858992,32,FLEN)
NAN_BOXED(2150821453,32,FLEN)
NAN_BOXED(3219547750,32,FLEN)
NAN_BOXED(2132858992,32,FLEN)
NAN_BOXED(2150821453,32,FLEN)
NAN_BOXED(3220027099,32,FLEN)
NAN_BOXED(2132858992,32,FLEN)
NAN_BOXED(2150821453,32,FLEN)
NAN_BOXED(3221225464,32,FLEN)
NAN_BOXED(2132858992,32,FLEN)
NAN_BOXED(2150821453,32,FLEN)
NAN_BOXED(3221225468,32,FLEN)
NAN_BOXED(2132858992,32,FLEN)
NAN_BOXED(2150821453,32,FLEN)
NAN_BOXED(3221225470,32,FLEN)
NAN_BOXED(2132860608,32,FLEN)
NAN_BOXED(3337294,32,FLEN)
NAN_BOXED(595591168,32,FLEN)
NAN_BOXED(2132860608,32,FLEN)
NAN_BOXED(3337294,32,FLEN)
NAN_BOXED(595591169,32,FLEN)
NAN_BOXED(2132860608,32,FLEN)
NAN_BOXED(3337294,32,FLEN)
NAN_BOXED(595591171,32,FLEN)
NAN_BOXED(2132860608,32,FLEN)
NAN_BOXED(3337294,32,FLEN)
NAN_BOXED(595591175,32,FLEN)
NAN_BOXED(2132860608,32,FLEN)
NAN_BOXED(3337294,32,FLEN)
NAN_BOXED(595591183,32,FLEN)
NAN_BOXED(2132860608,32,FLEN)
NAN_BOXED(3337294,32,FLEN)
NAN_BOXED(595591199,32,FLEN)
NAN_BOXED(2132860608,32,FLEN)
NAN_BOXED(3337294,32,FLEN)
NAN_BOXED(595591231,32,FLEN)
NAN_BOXED(2132860608,32,FLEN)
NAN_BOXED(3337294,32,FLEN)
NAN_BOXED(595591295,32,FLEN)
NAN_BOXED(2132860608,32,FLEN)
NAN_BOXED(3337294,32,FLEN)
NAN_BOXED(595591423,32,FLEN)
NAN_BOXED(2132860608,32,FLEN)
NAN_BOXED(3337294,32,FLEN)
NAN_BOXED(595591679,32,FLEN)
NAN_BOXED(2132860608,32,FLEN)
NAN_BOXED(3337294,32,FLEN)
NAN_BOXED(595592191,32,FLEN)
NAN_BOXED(2132860608,32,FLEN)
NAN_BOXED(3337294,32,FLEN)
NAN_BOXED(595593215,32,FLEN)
NAN_BOXED(2132860608,32,FLEN)
NAN_BOXED(3337294,32,FLEN)
NAN_BOXED(595595263,32,FLEN)
NAN_BOXED(2132860608,32,FLEN)
NAN_BOXED(3337294,32,FLEN)
NAN_BOXED(595599359,32,FLEN)
NAN_BOXED(2132860608,32,FLEN)
NAN_BOXED(3337294,32,FLEN)
NAN_BOXED(595607551,32,FLEN)
NAN_BOXED(2132860608,32,FLEN)
NAN_BOXED(3337294,32,FLEN)
NAN_BOXED(595623935,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
