
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:17:59 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_32256:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20dec0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x32ec4e and fs3 == 0 and fe3 == 0x47 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20dec0; op2val:0x32ec4e;
op3val:0x2380ffff; valaddr_reg:x3; val_offset:96768*0 + 3*252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96768*0 + 3*252*FLEN/8, x4, x1, x2)

inst_32257:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20dec0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x32ec4e and fs3 == 0 and fe3 == 0x47 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20dec0; op2val:0x32ec4e;
op3val:0x2381ffff; valaddr_reg:x3; val_offset:96771*0 + 3*252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96771*0 + 3*252*FLEN/8, x4, x1, x2)

inst_32258:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20dec0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x32ec4e and fs3 == 0 and fe3 == 0x47 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20dec0; op2val:0x32ec4e;
op3val:0x2383ffff; valaddr_reg:x3; val_offset:96774*0 + 3*252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96774*0 + 3*252*FLEN/8, x4, x1, x2)

inst_32259:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20dec0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x32ec4e and fs3 == 0 and fe3 == 0x47 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20dec0; op2val:0x32ec4e;
op3val:0x2387ffff; valaddr_reg:x3; val_offset:96777*0 + 3*252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96777*0 + 3*252*FLEN/8, x4, x1, x2)

inst_32260:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20dec0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x32ec4e and fs3 == 0 and fe3 == 0x47 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20dec0; op2val:0x32ec4e;
op3val:0x238fffff; valaddr_reg:x3; val_offset:96780*0 + 3*252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96780*0 + 3*252*FLEN/8, x4, x1, x2)

inst_32261:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20dec0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x32ec4e and fs3 == 0 and fe3 == 0x47 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20dec0; op2val:0x32ec4e;
op3val:0x239fffff; valaddr_reg:x3; val_offset:96783*0 + 3*252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96783*0 + 3*252*FLEN/8, x4, x1, x2)

inst_32262:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20dec0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x32ec4e and fs3 == 0 and fe3 == 0x47 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20dec0; op2val:0x32ec4e;
op3val:0x23bfffff; valaddr_reg:x3; val_offset:96786*0 + 3*252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96786*0 + 3*252*FLEN/8, x4, x1, x2)

inst_32263:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20dec0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x32ec4e and fs3 == 0 and fe3 == 0x47 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20dec0; op2val:0x32ec4e;
op3val:0x23c00000; valaddr_reg:x3; val_offset:96789*0 + 3*252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96789*0 + 3*252*FLEN/8, x4, x1, x2)

inst_32264:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20dec0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x32ec4e and fs3 == 0 and fe3 == 0x47 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20dec0; op2val:0x32ec4e;
op3val:0x23e00000; valaddr_reg:x3; val_offset:96792*0 + 3*252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96792*0 + 3*252*FLEN/8, x4, x1, x2)

inst_32265:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20dec0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x32ec4e and fs3 == 0 and fe3 == 0x47 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20dec0; op2val:0x32ec4e;
op3val:0x23f00000; valaddr_reg:x3; val_offset:96795*0 + 3*252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96795*0 + 3*252*FLEN/8, x4, x1, x2)

inst_32266:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20dec0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x32ec4e and fs3 == 0 and fe3 == 0x47 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20dec0; op2val:0x32ec4e;
op3val:0x23f80000; valaddr_reg:x3; val_offset:96798*0 + 3*252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96798*0 + 3*252*FLEN/8, x4, x1, x2)

inst_32267:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20dec0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x32ec4e and fs3 == 0 and fe3 == 0x47 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20dec0; op2val:0x32ec4e;
op3val:0x23fc0000; valaddr_reg:x3; val_offset:96801*0 + 3*252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96801*0 + 3*252*FLEN/8, x4, x1, x2)

inst_32268:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20dec0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x32ec4e and fs3 == 0 and fe3 == 0x47 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20dec0; op2val:0x32ec4e;
op3val:0x23fe0000; valaddr_reg:x3; val_offset:96804*0 + 3*252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96804*0 + 3*252*FLEN/8, x4, x1, x2)

inst_32269:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20dec0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x32ec4e and fs3 == 0 and fe3 == 0x47 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20dec0; op2val:0x32ec4e;
op3val:0x23ff0000; valaddr_reg:x3; val_offset:96807*0 + 3*252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96807*0 + 3*252*FLEN/8, x4, x1, x2)

inst_32270:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20dec0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x32ec4e and fs3 == 0 and fe3 == 0x47 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20dec0; op2val:0x32ec4e;
op3val:0x23ff8000; valaddr_reg:x3; val_offset:96810*0 + 3*252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96810*0 + 3*252*FLEN/8, x4, x1, x2)

inst_32271:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20dec0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x32ec4e and fs3 == 0 and fe3 == 0x47 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20dec0; op2val:0x32ec4e;
op3val:0x23ffc000; valaddr_reg:x3; val_offset:96813*0 + 3*252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96813*0 + 3*252*FLEN/8, x4, x1, x2)

inst_32272:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20dec0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x32ec4e and fs3 == 0 and fe3 == 0x47 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20dec0; op2val:0x32ec4e;
op3val:0x23ffe000; valaddr_reg:x3; val_offset:96816*0 + 3*252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96816*0 + 3*252*FLEN/8, x4, x1, x2)

inst_32273:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20dec0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x32ec4e and fs3 == 0 and fe3 == 0x47 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20dec0; op2val:0x32ec4e;
op3val:0x23fff000; valaddr_reg:x3; val_offset:96819*0 + 3*252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96819*0 + 3*252*FLEN/8, x4, x1, x2)

inst_32274:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20dec0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x32ec4e and fs3 == 0 and fe3 == 0x47 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20dec0; op2val:0x32ec4e;
op3val:0x23fff800; valaddr_reg:x3; val_offset:96822*0 + 3*252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96822*0 + 3*252*FLEN/8, x4, x1, x2)

inst_32275:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20dec0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x32ec4e and fs3 == 0 and fe3 == 0x47 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20dec0; op2val:0x32ec4e;
op3val:0x23fffc00; valaddr_reg:x3; val_offset:96825*0 + 3*252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96825*0 + 3*252*FLEN/8, x4, x1, x2)

inst_32276:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20dec0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x32ec4e and fs3 == 0 and fe3 == 0x47 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20dec0; op2val:0x32ec4e;
op3val:0x23fffe00; valaddr_reg:x3; val_offset:96828*0 + 3*252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96828*0 + 3*252*FLEN/8, x4, x1, x2)

inst_32277:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20dec0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x32ec4e and fs3 == 0 and fe3 == 0x47 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20dec0; op2val:0x32ec4e;
op3val:0x23ffff00; valaddr_reg:x3; val_offset:96831*0 + 3*252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96831*0 + 3*252*FLEN/8, x4, x1, x2)

inst_32278:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20dec0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x32ec4e and fs3 == 0 and fe3 == 0x47 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20dec0; op2val:0x32ec4e;
op3val:0x23ffff80; valaddr_reg:x3; val_offset:96834*0 + 3*252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96834*0 + 3*252*FLEN/8, x4, x1, x2)

inst_32279:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20dec0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x32ec4e and fs3 == 0 and fe3 == 0x47 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20dec0; op2val:0x32ec4e;
op3val:0x23ffffc0; valaddr_reg:x3; val_offset:96837*0 + 3*252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96837*0 + 3*252*FLEN/8, x4, x1, x2)

inst_32280:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20dec0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x32ec4e and fs3 == 0 and fe3 == 0x47 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20dec0; op2val:0x32ec4e;
op3val:0x23ffffe0; valaddr_reg:x3; val_offset:96840*0 + 3*252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96840*0 + 3*252*FLEN/8, x4, x1, x2)

inst_32281:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20dec0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x32ec4e and fs3 == 0 and fe3 == 0x47 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20dec0; op2val:0x32ec4e;
op3val:0x23fffff0; valaddr_reg:x3; val_offset:96843*0 + 3*252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96843*0 + 3*252*FLEN/8, x4, x1, x2)

inst_32282:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20dec0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x32ec4e and fs3 == 0 and fe3 == 0x47 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20dec0; op2val:0x32ec4e;
op3val:0x23fffff8; valaddr_reg:x3; val_offset:96846*0 + 3*252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96846*0 + 3*252*FLEN/8, x4, x1, x2)

inst_32283:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20dec0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x32ec4e and fs3 == 0 and fe3 == 0x47 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20dec0; op2val:0x32ec4e;
op3val:0x23fffffc; valaddr_reg:x3; val_offset:96849*0 + 3*252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96849*0 + 3*252*FLEN/8, x4, x1, x2)

inst_32284:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20dec0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x32ec4e and fs3 == 0 and fe3 == 0x47 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20dec0; op2val:0x32ec4e;
op3val:0x23fffffe; valaddr_reg:x3; val_offset:96852*0 + 3*252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96852*0 + 3*252*FLEN/8, x4, x1, x2)

inst_32285:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20dec0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x32ec4e and fs3 == 0 and fe3 == 0x47 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20dec0; op2val:0x32ec4e;
op3val:0x23ffffff; valaddr_reg:x3; val_offset:96855*0 + 3*252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96855*0 + 3*252*FLEN/8, x4, x1, x2)

inst_32286:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20dec0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x32ec4e and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20dec0; op2val:0x32ec4e;
op3val:0x3f800001; valaddr_reg:x3; val_offset:96858*0 + 3*252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96858*0 + 3*252*FLEN/8, x4, x1, x2)

inst_32287:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20dec0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x32ec4e and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20dec0; op2val:0x32ec4e;
op3val:0x3f800003; valaddr_reg:x3; val_offset:96861*0 + 3*252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96861*0 + 3*252*FLEN/8, x4, x1, x2)

inst_32288:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20dec0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x32ec4e and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20dec0; op2val:0x32ec4e;
op3val:0x3f800007; valaddr_reg:x3; val_offset:96864*0 + 3*252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96864*0 + 3*252*FLEN/8, x4, x1, x2)

inst_32289:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20dec0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x32ec4e and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20dec0; op2val:0x32ec4e;
op3val:0x3f999999; valaddr_reg:x3; val_offset:96867*0 + 3*252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96867*0 + 3*252*FLEN/8, x4, x1, x2)

inst_32290:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20dec0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x32ec4e and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20dec0; op2val:0x32ec4e;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:96870*0 + 3*252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96870*0 + 3*252*FLEN/8, x4, x1, x2)

inst_32291:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20dec0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x32ec4e and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20dec0; op2val:0x32ec4e;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:96873*0 + 3*252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96873*0 + 3*252*FLEN/8, x4, x1, x2)

inst_32292:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20dec0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x32ec4e and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20dec0; op2val:0x32ec4e;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:96876*0 + 3*252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96876*0 + 3*252*FLEN/8, x4, x1, x2)

inst_32293:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20dec0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x32ec4e and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20dec0; op2val:0x32ec4e;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:96879*0 + 3*252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96879*0 + 3*252*FLEN/8, x4, x1, x2)

inst_32294:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20dec0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x32ec4e and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20dec0; op2val:0x32ec4e;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:96882*0 + 3*252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96882*0 + 3*252*FLEN/8, x4, x1, x2)

inst_32295:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20dec0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x32ec4e and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20dec0; op2val:0x32ec4e;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:96885*0 + 3*252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96885*0 + 3*252*FLEN/8, x4, x1, x2)

inst_32296:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20dec0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x32ec4e and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20dec0; op2val:0x32ec4e;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:96888*0 + 3*252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96888*0 + 3*252*FLEN/8, x4, x1, x2)

inst_32297:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20dec0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x32ec4e and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20dec0; op2val:0x32ec4e;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:96891*0 + 3*252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96891*0 + 3*252*FLEN/8, x4, x1, x2)

inst_32298:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20dec0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x32ec4e and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20dec0; op2val:0x32ec4e;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:96894*0 + 3*252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96894*0 + 3*252*FLEN/8, x4, x1, x2)

inst_32299:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20dec0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x32ec4e and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20dec0; op2val:0x32ec4e;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:96897*0 + 3*252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96897*0 + 3*252*FLEN/8, x4, x1, x2)

inst_32300:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20dec0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x32ec4e and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20dec0; op2val:0x32ec4e;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:96900*0 + 3*252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96900*0 + 3*252*FLEN/8, x4, x1, x2)

inst_32301:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20dec0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x32ec4e and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20dec0; op2val:0x32ec4e;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:96903*0 + 3*252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96903*0 + 3*252*FLEN/8, x4, x1, x2)

inst_32302:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x217160 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f217160; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:96906*0 + 3*252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96906*0 + 3*252*FLEN/8, x4, x1, x2)

inst_32303:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x217160 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f217160; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:96909*0 + 3*252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96909*0 + 3*252*FLEN/8, x4, x1, x2)

inst_32304:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x217160 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f217160; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:96912*0 + 3*252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96912*0 + 3*252*FLEN/8, x4, x1, x2)

inst_32305:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x217160 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f217160; op2val:0x0;
op3val:0x199999; valaddr_reg:x3; val_offset:96915*0 + 3*252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96915*0 + 3*252*FLEN/8, x4, x1, x2)

inst_32306:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x217160 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f217160; op2val:0x0;
op3val:0x249249; valaddr_reg:x3; val_offset:96918*0 + 3*252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96918*0 + 3*252*FLEN/8, x4, x1, x2)

inst_32307:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x217160 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f217160; op2val:0x0;
op3val:0x333333; valaddr_reg:x3; val_offset:96921*0 + 3*252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96921*0 + 3*252*FLEN/8, x4, x1, x2)

inst_32308:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x217160 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f217160; op2val:0x0;
op3val:0x36db6d; valaddr_reg:x3; val_offset:96924*0 + 3*252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96924*0 + 3*252*FLEN/8, x4, x1, x2)

inst_32309:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x217160 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f217160; op2val:0x0;
op3val:0x3bbbbb; valaddr_reg:x3; val_offset:96927*0 + 3*252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96927*0 + 3*252*FLEN/8, x4, x1, x2)

inst_32310:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x217160 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f217160; op2val:0x0;
op3val:0x444444; valaddr_reg:x3; val_offset:96930*0 + 3*252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96930*0 + 3*252*FLEN/8, x4, x1, x2)

inst_32311:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x217160 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f217160; op2val:0x0;
op3val:0x4ccccc; valaddr_reg:x3; val_offset:96933*0 + 3*252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96933*0 + 3*252*FLEN/8, x4, x1, x2)

inst_32312:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x217160 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f217160; op2val:0x0;
op3val:0x5b6db6; valaddr_reg:x3; val_offset:96936*0 + 3*252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96936*0 + 3*252*FLEN/8, x4, x1, x2)

inst_32313:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x217160 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f217160; op2val:0x0;
op3val:0x666666; valaddr_reg:x3; val_offset:96939*0 + 3*252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96939*0 + 3*252*FLEN/8, x4, x1, x2)

inst_32314:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x217160 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f217160; op2val:0x0;
op3val:0x6db6db; valaddr_reg:x3; val_offset:96942*0 + 3*252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96942*0 + 3*252*FLEN/8, x4, x1, x2)

inst_32315:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x217160 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f217160; op2val:0x0;
op3val:0x7ffff8; valaddr_reg:x3; val_offset:96945*0 + 3*252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96945*0 + 3*252*FLEN/8, x4, x1, x2)

inst_32316:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x217160 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f217160; op2val:0x0;
op3val:0x7ffffc; valaddr_reg:x3; val_offset:96948*0 + 3*252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96948*0 + 3*252*FLEN/8, x4, x1, x2)

inst_32317:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x217160 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f217160; op2val:0x0;
op3val:0x7ffffe; valaddr_reg:x3; val_offset:96951*0 + 3*252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96951*0 + 3*252*FLEN/8, x4, x1, x2)

inst_32318:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x217160 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f217160; op2val:0x0;
op3val:0x8000000; valaddr_reg:x3; val_offset:96954*0 + 3*252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96954*0 + 3*252*FLEN/8, x4, x1, x2)

inst_32319:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x217160 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f217160; op2val:0x0;
op3val:0x8000001; valaddr_reg:x3; val_offset:96957*0 + 3*252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96957*0 + 3*252*FLEN/8, x4, x1, x2)

inst_32320:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x217160 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f217160; op2val:0x0;
op3val:0x8000003; valaddr_reg:x3; val_offset:96960*0 + 3*252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96960*0 + 3*252*FLEN/8, x4, x1, x2)

inst_32321:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x217160 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f217160; op2val:0x0;
op3val:0x8000007; valaddr_reg:x3; val_offset:96963*0 + 3*252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96963*0 + 3*252*FLEN/8, x4, x1, x2)

inst_32322:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x217160 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f217160; op2val:0x0;
op3val:0x800000f; valaddr_reg:x3; val_offset:96966*0 + 3*252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96966*0 + 3*252*FLEN/8, x4, x1, x2)

inst_32323:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x217160 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f217160; op2val:0x0;
op3val:0x800001f; valaddr_reg:x3; val_offset:96969*0 + 3*252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96969*0 + 3*252*FLEN/8, x4, x1, x2)

inst_32324:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x217160 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f217160; op2val:0x0;
op3val:0x800003f; valaddr_reg:x3; val_offset:96972*0 + 3*252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96972*0 + 3*252*FLEN/8, x4, x1, x2)

inst_32325:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x217160 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f217160; op2val:0x0;
op3val:0x800007f; valaddr_reg:x3; val_offset:96975*0 + 3*252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96975*0 + 3*252*FLEN/8, x4, x1, x2)

inst_32326:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x217160 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f217160; op2val:0x0;
op3val:0x80000ff; valaddr_reg:x3; val_offset:96978*0 + 3*252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96978*0 + 3*252*FLEN/8, x4, x1, x2)

inst_32327:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x217160 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f217160; op2val:0x0;
op3val:0x80001ff; valaddr_reg:x3; val_offset:96981*0 + 3*252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96981*0 + 3*252*FLEN/8, x4, x1, x2)

inst_32328:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x217160 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f217160; op2val:0x0;
op3val:0x80003ff; valaddr_reg:x3; val_offset:96984*0 + 3*252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96984*0 + 3*252*FLEN/8, x4, x1, x2)

inst_32329:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x217160 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f217160; op2val:0x0;
op3val:0x80007ff; valaddr_reg:x3; val_offset:96987*0 + 3*252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96987*0 + 3*252*FLEN/8, x4, x1, x2)

inst_32330:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x217160 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f217160; op2val:0x0;
op3val:0x8000fff; valaddr_reg:x3; val_offset:96990*0 + 3*252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96990*0 + 3*252*FLEN/8, x4, x1, x2)

inst_32331:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x217160 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f217160; op2val:0x0;
op3val:0x8001fff; valaddr_reg:x3; val_offset:96993*0 + 3*252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96993*0 + 3*252*FLEN/8, x4, x1, x2)

inst_32332:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x217160 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f217160; op2val:0x0;
op3val:0x8003fff; valaddr_reg:x3; val_offset:96996*0 + 3*252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96996*0 + 3*252*FLEN/8, x4, x1, x2)

inst_32333:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x217160 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f217160; op2val:0x0;
op3val:0x8007fff; valaddr_reg:x3; val_offset:96999*0 + 3*252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96999*0 + 3*252*FLEN/8, x4, x1, x2)

inst_32334:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x217160 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f217160; op2val:0x0;
op3val:0x800ffff; valaddr_reg:x3; val_offset:97002*0 + 3*252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97002*0 + 3*252*FLEN/8, x4, x1, x2)

inst_32335:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x217160 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f217160; op2val:0x0;
op3val:0x801ffff; valaddr_reg:x3; val_offset:97005*0 + 3*252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97005*0 + 3*252*FLEN/8, x4, x1, x2)

inst_32336:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x217160 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f217160; op2val:0x0;
op3val:0x803ffff; valaddr_reg:x3; val_offset:97008*0 + 3*252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97008*0 + 3*252*FLEN/8, x4, x1, x2)

inst_32337:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x217160 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f217160; op2val:0x0;
op3val:0x807ffff; valaddr_reg:x3; val_offset:97011*0 + 3*252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97011*0 + 3*252*FLEN/8, x4, x1, x2)

inst_32338:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x217160 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f217160; op2val:0x0;
op3val:0x80fffff; valaddr_reg:x3; val_offset:97014*0 + 3*252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97014*0 + 3*252*FLEN/8, x4, x1, x2)

inst_32339:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x217160 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f217160; op2val:0x0;
op3val:0x81fffff; valaddr_reg:x3; val_offset:97017*0 + 3*252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97017*0 + 3*252*FLEN/8, x4, x1, x2)

inst_32340:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x217160 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f217160; op2val:0x0;
op3val:0x83fffff; valaddr_reg:x3; val_offset:97020*0 + 3*252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97020*0 + 3*252*FLEN/8, x4, x1, x2)

inst_32341:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x217160 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f217160; op2val:0x0;
op3val:0x8400000; valaddr_reg:x3; val_offset:97023*0 + 3*252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97023*0 + 3*252*FLEN/8, x4, x1, x2)

inst_32342:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x217160 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f217160; op2val:0x0;
op3val:0x8600000; valaddr_reg:x3; val_offset:97026*0 + 3*252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97026*0 + 3*252*FLEN/8, x4, x1, x2)

inst_32343:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x217160 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f217160; op2val:0x0;
op3val:0x8700000; valaddr_reg:x3; val_offset:97029*0 + 3*252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97029*0 + 3*252*FLEN/8, x4, x1, x2)

inst_32344:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x217160 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f217160; op2val:0x0;
op3val:0x8780000; valaddr_reg:x3; val_offset:97032*0 + 3*252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97032*0 + 3*252*FLEN/8, x4, x1, x2)

inst_32345:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x217160 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f217160; op2val:0x0;
op3val:0x87c0000; valaddr_reg:x3; val_offset:97035*0 + 3*252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97035*0 + 3*252*FLEN/8, x4, x1, x2)

inst_32346:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x217160 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f217160; op2val:0x0;
op3val:0x87e0000; valaddr_reg:x3; val_offset:97038*0 + 3*252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97038*0 + 3*252*FLEN/8, x4, x1, x2)

inst_32347:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x217160 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f217160; op2val:0x0;
op3val:0x87f0000; valaddr_reg:x3; val_offset:97041*0 + 3*252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97041*0 + 3*252*FLEN/8, x4, x1, x2)

inst_32348:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x217160 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f217160; op2val:0x0;
op3val:0x87f8000; valaddr_reg:x3; val_offset:97044*0 + 3*252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97044*0 + 3*252*FLEN/8, x4, x1, x2)

inst_32349:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x217160 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f217160; op2val:0x0;
op3val:0x87fc000; valaddr_reg:x3; val_offset:97047*0 + 3*252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97047*0 + 3*252*FLEN/8, x4, x1, x2)

inst_32350:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x217160 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f217160; op2val:0x0;
op3val:0x87fe000; valaddr_reg:x3; val_offset:97050*0 + 3*252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97050*0 + 3*252*FLEN/8, x4, x1, x2)

inst_32351:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x217160 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f217160; op2val:0x0;
op3val:0x87ff000; valaddr_reg:x3; val_offset:97053*0 + 3*252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97053*0 + 3*252*FLEN/8, x4, x1, x2)

inst_32352:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x217160 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f217160; op2val:0x0;
op3val:0x87ff800; valaddr_reg:x3; val_offset:97056*0 + 3*252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97056*0 + 3*252*FLEN/8, x4, x1, x2)

inst_32353:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x217160 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f217160; op2val:0x0;
op3val:0x87ffc00; valaddr_reg:x3; val_offset:97059*0 + 3*252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97059*0 + 3*252*FLEN/8, x4, x1, x2)

inst_32354:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x217160 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f217160; op2val:0x0;
op3val:0x87ffe00; valaddr_reg:x3; val_offset:97062*0 + 3*252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97062*0 + 3*252*FLEN/8, x4, x1, x2)

inst_32355:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x217160 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f217160; op2val:0x0;
op3val:0x87fff00; valaddr_reg:x3; val_offset:97065*0 + 3*252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97065*0 + 3*252*FLEN/8, x4, x1, x2)

inst_32356:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x217160 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f217160; op2val:0x0;
op3val:0x87fff80; valaddr_reg:x3; val_offset:97068*0 + 3*252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97068*0 + 3*252*FLEN/8, x4, x1, x2)

inst_32357:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x217160 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f217160; op2val:0x0;
op3val:0x87fffc0; valaddr_reg:x3; val_offset:97071*0 + 3*252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97071*0 + 3*252*FLEN/8, x4, x1, x2)

inst_32358:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x217160 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f217160; op2val:0x0;
op3val:0x87fffe0; valaddr_reg:x3; val_offset:97074*0 + 3*252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97074*0 + 3*252*FLEN/8, x4, x1, x2)

inst_32359:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x217160 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f217160; op2val:0x0;
op3val:0x87ffff0; valaddr_reg:x3; val_offset:97077*0 + 3*252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97077*0 + 3*252*FLEN/8, x4, x1, x2)

inst_32360:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x217160 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f217160; op2val:0x0;
op3val:0x87ffff8; valaddr_reg:x3; val_offset:97080*0 + 3*252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97080*0 + 3*252*FLEN/8, x4, x1, x2)

inst_32361:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x217160 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f217160; op2val:0x0;
op3val:0x87ffffc; valaddr_reg:x3; val_offset:97083*0 + 3*252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97083*0 + 3*252*FLEN/8, x4, x1, x2)

inst_32362:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x217160 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f217160; op2val:0x0;
op3val:0x87ffffe; valaddr_reg:x3; val_offset:97086*0 + 3*252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97086*0 + 3*252*FLEN/8, x4, x1, x2)

inst_32363:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x217160 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f217160; op2val:0x0;
op3val:0x87fffff; valaddr_reg:x3; val_offset:97089*0 + 3*252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97089*0 + 3*252*FLEN/8, x4, x1, x2)

inst_32364:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21ba5d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21ba5d; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:97092*0 + 3*252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97092*0 + 3*252*FLEN/8, x4, x1, x2)

inst_32365:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21ba5d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21ba5d; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:97095*0 + 3*252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97095*0 + 3*252*FLEN/8, x4, x1, x2)

inst_32366:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21ba5d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21ba5d; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:97098*0 + 3*252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97098*0 + 3*252*FLEN/8, x4, x1, x2)

inst_32367:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21ba5d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21ba5d; op2val:0x0;
op3val:0x199999; valaddr_reg:x3; val_offset:97101*0 + 3*252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97101*0 + 3*252*FLEN/8, x4, x1, x2)

inst_32368:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21ba5d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21ba5d; op2val:0x0;
op3val:0x249249; valaddr_reg:x3; val_offset:97104*0 + 3*252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97104*0 + 3*252*FLEN/8, x4, x1, x2)

inst_32369:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21ba5d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21ba5d; op2val:0x0;
op3val:0x333333; valaddr_reg:x3; val_offset:97107*0 + 3*252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97107*0 + 3*252*FLEN/8, x4, x1, x2)

inst_32370:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21ba5d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21ba5d; op2val:0x0;
op3val:0x36db6d; valaddr_reg:x3; val_offset:97110*0 + 3*252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97110*0 + 3*252*FLEN/8, x4, x1, x2)

inst_32371:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21ba5d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21ba5d; op2val:0x0;
op3val:0x3bbbbb; valaddr_reg:x3; val_offset:97113*0 + 3*252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97113*0 + 3*252*FLEN/8, x4, x1, x2)

inst_32372:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21ba5d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21ba5d; op2val:0x0;
op3val:0x444444; valaddr_reg:x3; val_offset:97116*0 + 3*252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97116*0 + 3*252*FLEN/8, x4, x1, x2)

inst_32373:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21ba5d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21ba5d; op2val:0x0;
op3val:0x4ccccc; valaddr_reg:x3; val_offset:97119*0 + 3*252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97119*0 + 3*252*FLEN/8, x4, x1, x2)

inst_32374:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21ba5d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21ba5d; op2val:0x0;
op3val:0x5b6db6; valaddr_reg:x3; val_offset:97122*0 + 3*252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97122*0 + 3*252*FLEN/8, x4, x1, x2)

inst_32375:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21ba5d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21ba5d; op2val:0x0;
op3val:0x666666; valaddr_reg:x3; val_offset:97125*0 + 3*252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97125*0 + 3*252*FLEN/8, x4, x1, x2)

inst_32376:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21ba5d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21ba5d; op2val:0x0;
op3val:0x6db6db; valaddr_reg:x3; val_offset:97128*0 + 3*252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97128*0 + 3*252*FLEN/8, x4, x1, x2)

inst_32377:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21ba5d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21ba5d; op2val:0x0;
op3val:0x7ffff8; valaddr_reg:x3; val_offset:97131*0 + 3*252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97131*0 + 3*252*FLEN/8, x4, x1, x2)

inst_32378:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21ba5d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21ba5d; op2val:0x0;
op3val:0x7ffffc; valaddr_reg:x3; val_offset:97134*0 + 3*252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97134*0 + 3*252*FLEN/8, x4, x1, x2)

inst_32379:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21ba5d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21ba5d; op2val:0x0;
op3val:0x7ffffe; valaddr_reg:x3; val_offset:97137*0 + 3*252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97137*0 + 3*252*FLEN/8, x4, x1, x2)

inst_32380:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21ba5d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x11 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21ba5d; op2val:0x0;
op3val:0x8800000; valaddr_reg:x3; val_offset:97140*0 + 3*252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97140*0 + 3*252*FLEN/8, x4, x1, x2)

inst_32381:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21ba5d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x11 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21ba5d; op2val:0x0;
op3val:0x8800001; valaddr_reg:x3; val_offset:97143*0 + 3*252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97143*0 + 3*252*FLEN/8, x4, x1, x2)

inst_32382:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21ba5d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x11 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21ba5d; op2val:0x0;
op3val:0x8800003; valaddr_reg:x3; val_offset:97146*0 + 3*252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97146*0 + 3*252*FLEN/8, x4, x1, x2)

inst_32383:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21ba5d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x11 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21ba5d; op2val:0x0;
op3val:0x8800007; valaddr_reg:x3; val_offset:97149*0 + 3*252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97149*0 + 3*252*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2132860608,32,FLEN)
NAN_BOXED(3337294,32,FLEN)
NAN_BOXED(595656703,32,FLEN)
NAN_BOXED(2132860608,32,FLEN)
NAN_BOXED(3337294,32,FLEN)
NAN_BOXED(595722239,32,FLEN)
NAN_BOXED(2132860608,32,FLEN)
NAN_BOXED(3337294,32,FLEN)
NAN_BOXED(595853311,32,FLEN)
NAN_BOXED(2132860608,32,FLEN)
NAN_BOXED(3337294,32,FLEN)
NAN_BOXED(596115455,32,FLEN)
NAN_BOXED(2132860608,32,FLEN)
NAN_BOXED(3337294,32,FLEN)
NAN_BOXED(596639743,32,FLEN)
NAN_BOXED(2132860608,32,FLEN)
NAN_BOXED(3337294,32,FLEN)
NAN_BOXED(597688319,32,FLEN)
NAN_BOXED(2132860608,32,FLEN)
NAN_BOXED(3337294,32,FLEN)
NAN_BOXED(599785471,32,FLEN)
NAN_BOXED(2132860608,32,FLEN)
NAN_BOXED(3337294,32,FLEN)
NAN_BOXED(599785472,32,FLEN)
NAN_BOXED(2132860608,32,FLEN)
NAN_BOXED(3337294,32,FLEN)
NAN_BOXED(601882624,32,FLEN)
NAN_BOXED(2132860608,32,FLEN)
NAN_BOXED(3337294,32,FLEN)
NAN_BOXED(602931200,32,FLEN)
NAN_BOXED(2132860608,32,FLEN)
NAN_BOXED(3337294,32,FLEN)
NAN_BOXED(603455488,32,FLEN)
NAN_BOXED(2132860608,32,FLEN)
NAN_BOXED(3337294,32,FLEN)
NAN_BOXED(603717632,32,FLEN)
NAN_BOXED(2132860608,32,FLEN)
NAN_BOXED(3337294,32,FLEN)
NAN_BOXED(603848704,32,FLEN)
NAN_BOXED(2132860608,32,FLEN)
NAN_BOXED(3337294,32,FLEN)
NAN_BOXED(603914240,32,FLEN)
NAN_BOXED(2132860608,32,FLEN)
NAN_BOXED(3337294,32,FLEN)
NAN_BOXED(603947008,32,FLEN)
NAN_BOXED(2132860608,32,FLEN)
NAN_BOXED(3337294,32,FLEN)
NAN_BOXED(603963392,32,FLEN)
NAN_BOXED(2132860608,32,FLEN)
NAN_BOXED(3337294,32,FLEN)
NAN_BOXED(603971584,32,FLEN)
NAN_BOXED(2132860608,32,FLEN)
NAN_BOXED(3337294,32,FLEN)
NAN_BOXED(603975680,32,FLEN)
NAN_BOXED(2132860608,32,FLEN)
NAN_BOXED(3337294,32,FLEN)
NAN_BOXED(603977728,32,FLEN)
NAN_BOXED(2132860608,32,FLEN)
NAN_BOXED(3337294,32,FLEN)
NAN_BOXED(603978752,32,FLEN)
NAN_BOXED(2132860608,32,FLEN)
NAN_BOXED(3337294,32,FLEN)
NAN_BOXED(603979264,32,FLEN)
NAN_BOXED(2132860608,32,FLEN)
NAN_BOXED(3337294,32,FLEN)
NAN_BOXED(603979520,32,FLEN)
NAN_BOXED(2132860608,32,FLEN)
NAN_BOXED(3337294,32,FLEN)
NAN_BOXED(603979648,32,FLEN)
NAN_BOXED(2132860608,32,FLEN)
NAN_BOXED(3337294,32,FLEN)
NAN_BOXED(603979712,32,FLEN)
NAN_BOXED(2132860608,32,FLEN)
NAN_BOXED(3337294,32,FLEN)
NAN_BOXED(603979744,32,FLEN)
NAN_BOXED(2132860608,32,FLEN)
NAN_BOXED(3337294,32,FLEN)
NAN_BOXED(603979760,32,FLEN)
NAN_BOXED(2132860608,32,FLEN)
NAN_BOXED(3337294,32,FLEN)
NAN_BOXED(603979768,32,FLEN)
NAN_BOXED(2132860608,32,FLEN)
NAN_BOXED(3337294,32,FLEN)
NAN_BOXED(603979772,32,FLEN)
NAN_BOXED(2132860608,32,FLEN)
NAN_BOXED(3337294,32,FLEN)
NAN_BOXED(603979774,32,FLEN)
NAN_BOXED(2132860608,32,FLEN)
NAN_BOXED(3337294,32,FLEN)
NAN_BOXED(603979775,32,FLEN)
NAN_BOXED(2132860608,32,FLEN)
NAN_BOXED(3337294,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2132860608,32,FLEN)
NAN_BOXED(3337294,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2132860608,32,FLEN)
NAN_BOXED(3337294,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2132860608,32,FLEN)
NAN_BOXED(3337294,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2132860608,32,FLEN)
NAN_BOXED(3337294,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2132860608,32,FLEN)
NAN_BOXED(3337294,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2132860608,32,FLEN)
NAN_BOXED(3337294,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2132860608,32,FLEN)
NAN_BOXED(3337294,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2132860608,32,FLEN)
NAN_BOXED(3337294,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2132860608,32,FLEN)
NAN_BOXED(3337294,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2132860608,32,FLEN)
NAN_BOXED(3337294,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2132860608,32,FLEN)
NAN_BOXED(3337294,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2132860608,32,FLEN)
NAN_BOXED(3337294,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2132860608,32,FLEN)
NAN_BOXED(3337294,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2132860608,32,FLEN)
NAN_BOXED(3337294,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2132860608,32,FLEN)
NAN_BOXED(3337294,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2132898144,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2132898144,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3,32,FLEN)
NAN_BOXED(2132898144,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7,32,FLEN)
NAN_BOXED(2132898144,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1677721,32,FLEN)
NAN_BOXED(2132898144,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2396745,32,FLEN)
NAN_BOXED(2132898144,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3355443,32,FLEN)
NAN_BOXED(2132898144,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3595117,32,FLEN)
NAN_BOXED(2132898144,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3914683,32,FLEN)
NAN_BOXED(2132898144,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4473924,32,FLEN)
NAN_BOXED(2132898144,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5033164,32,FLEN)
NAN_BOXED(2132898144,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5991862,32,FLEN)
NAN_BOXED(2132898144,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(6710886,32,FLEN)
NAN_BOXED(2132898144,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7190235,32,FLEN)
NAN_BOXED(2132898144,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388600,32,FLEN)
NAN_BOXED(2132898144,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388604,32,FLEN)
NAN_BOXED(2132898144,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388606,32,FLEN)
NAN_BOXED(2132898144,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134217728,32,FLEN)
NAN_BOXED(2132898144,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134217729,32,FLEN)
NAN_BOXED(2132898144,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134217731,32,FLEN)
NAN_BOXED(2132898144,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134217735,32,FLEN)
NAN_BOXED(2132898144,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134217743,32,FLEN)
NAN_BOXED(2132898144,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134217759,32,FLEN)
NAN_BOXED(2132898144,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134217791,32,FLEN)
NAN_BOXED(2132898144,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134217855,32,FLEN)
NAN_BOXED(2132898144,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134217983,32,FLEN)
NAN_BOXED(2132898144,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134218239,32,FLEN)
NAN_BOXED(2132898144,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134218751,32,FLEN)
NAN_BOXED(2132898144,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134219775,32,FLEN)
NAN_BOXED(2132898144,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134221823,32,FLEN)
NAN_BOXED(2132898144,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134225919,32,FLEN)
NAN_BOXED(2132898144,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134234111,32,FLEN)
NAN_BOXED(2132898144,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134250495,32,FLEN)
NAN_BOXED(2132898144,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134283263,32,FLEN)
NAN_BOXED(2132898144,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134348799,32,FLEN)
NAN_BOXED(2132898144,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134479871,32,FLEN)
NAN_BOXED(2132898144,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134742015,32,FLEN)
NAN_BOXED(2132898144,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(135266303,32,FLEN)
NAN_BOXED(2132898144,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(136314879,32,FLEN)
NAN_BOXED(2132898144,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(138412031,32,FLEN)
NAN_BOXED(2132898144,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(138412032,32,FLEN)
NAN_BOXED(2132898144,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(140509184,32,FLEN)
NAN_BOXED(2132898144,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(141557760,32,FLEN)
NAN_BOXED(2132898144,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(142082048,32,FLEN)
NAN_BOXED(2132898144,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(142344192,32,FLEN)
NAN_BOXED(2132898144,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(142475264,32,FLEN)
NAN_BOXED(2132898144,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(142540800,32,FLEN)
NAN_BOXED(2132898144,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(142573568,32,FLEN)
NAN_BOXED(2132898144,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(142589952,32,FLEN)
NAN_BOXED(2132898144,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(142598144,32,FLEN)
NAN_BOXED(2132898144,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(142602240,32,FLEN)
NAN_BOXED(2132898144,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(142604288,32,FLEN)
NAN_BOXED(2132898144,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(142605312,32,FLEN)
NAN_BOXED(2132898144,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(142605824,32,FLEN)
NAN_BOXED(2132898144,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(142606080,32,FLEN)
NAN_BOXED(2132898144,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(142606208,32,FLEN)
NAN_BOXED(2132898144,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(142606272,32,FLEN)
NAN_BOXED(2132898144,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(142606304,32,FLEN)
NAN_BOXED(2132898144,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(142606320,32,FLEN)
NAN_BOXED(2132898144,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(142606328,32,FLEN)
NAN_BOXED(2132898144,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(142606332,32,FLEN)
NAN_BOXED(2132898144,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(142606334,32,FLEN)
NAN_BOXED(2132898144,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(142606335,32,FLEN)
NAN_BOXED(2132916829,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2132916829,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3,32,FLEN)
NAN_BOXED(2132916829,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7,32,FLEN)
NAN_BOXED(2132916829,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1677721,32,FLEN)
NAN_BOXED(2132916829,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2396745,32,FLEN)
NAN_BOXED(2132916829,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3355443,32,FLEN)
NAN_BOXED(2132916829,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3595117,32,FLEN)
NAN_BOXED(2132916829,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3914683,32,FLEN)
NAN_BOXED(2132916829,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4473924,32,FLEN)
NAN_BOXED(2132916829,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5033164,32,FLEN)
NAN_BOXED(2132916829,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5991862,32,FLEN)
NAN_BOXED(2132916829,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(6710886,32,FLEN)
NAN_BOXED(2132916829,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7190235,32,FLEN)
NAN_BOXED(2132916829,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388600,32,FLEN)
NAN_BOXED(2132916829,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388604,32,FLEN)
NAN_BOXED(2132916829,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388606,32,FLEN)
NAN_BOXED(2132916829,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(142606336,32,FLEN)
NAN_BOXED(2132916829,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(142606337,32,FLEN)
NAN_BOXED(2132916829,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(142606339,32,FLEN)
NAN_BOXED(2132916829,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(142606343,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
