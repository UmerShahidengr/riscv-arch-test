
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:17:59 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_32768:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x234a7c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f234a7c; op2val:0x0;
op3val:0xa3fffff; valaddr_reg:x3; val_offset:98304*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98304*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32769:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x234a7c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f234a7c; op2val:0x0;
op3val:0xa400000; valaddr_reg:x3; val_offset:98307*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98307*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32770:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x234a7c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f234a7c; op2val:0x0;
op3val:0xa600000; valaddr_reg:x3; val_offset:98310*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98310*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32771:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x234a7c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f234a7c; op2val:0x0;
op3val:0xa700000; valaddr_reg:x3; val_offset:98313*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98313*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32772:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x234a7c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f234a7c; op2val:0x0;
op3val:0xa780000; valaddr_reg:x3; val_offset:98316*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98316*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32773:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x234a7c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f234a7c; op2val:0x0;
op3val:0xa7c0000; valaddr_reg:x3; val_offset:98319*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98319*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32774:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x234a7c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f234a7c; op2val:0x0;
op3val:0xa7e0000; valaddr_reg:x3; val_offset:98322*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98322*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32775:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x234a7c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f234a7c; op2val:0x0;
op3val:0xa7f0000; valaddr_reg:x3; val_offset:98325*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98325*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32776:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x234a7c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f234a7c; op2val:0x0;
op3val:0xa7f8000; valaddr_reg:x3; val_offset:98328*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98328*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32777:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x234a7c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f234a7c; op2val:0x0;
op3val:0xa7fc000; valaddr_reg:x3; val_offset:98331*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98331*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32778:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x234a7c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f234a7c; op2val:0x0;
op3val:0xa7fe000; valaddr_reg:x3; val_offset:98334*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98334*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32779:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x234a7c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f234a7c; op2val:0x0;
op3val:0xa7ff000; valaddr_reg:x3; val_offset:98337*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98337*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32780:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x234a7c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f234a7c; op2val:0x0;
op3val:0xa7ff800; valaddr_reg:x3; val_offset:98340*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98340*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32781:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x234a7c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f234a7c; op2val:0x0;
op3val:0xa7ffc00; valaddr_reg:x3; val_offset:98343*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98343*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32782:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x234a7c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f234a7c; op2val:0x0;
op3val:0xa7ffe00; valaddr_reg:x3; val_offset:98346*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98346*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32783:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x234a7c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f234a7c; op2val:0x0;
op3val:0xa7fff00; valaddr_reg:x3; val_offset:98349*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98349*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32784:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x234a7c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f234a7c; op2val:0x0;
op3val:0xa7fff80; valaddr_reg:x3; val_offset:98352*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98352*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32785:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x234a7c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f234a7c; op2val:0x0;
op3val:0xa7fffc0; valaddr_reg:x3; val_offset:98355*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98355*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32786:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x234a7c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f234a7c; op2val:0x0;
op3val:0xa7fffe0; valaddr_reg:x3; val_offset:98358*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98358*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32787:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x234a7c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f234a7c; op2val:0x0;
op3val:0xa7ffff0; valaddr_reg:x3; val_offset:98361*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98361*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32788:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x234a7c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f234a7c; op2val:0x0;
op3val:0xa7ffff8; valaddr_reg:x3; val_offset:98364*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98364*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32789:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x234a7c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f234a7c; op2val:0x0;
op3val:0xa7ffffc; valaddr_reg:x3; val_offset:98367*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98367*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32790:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x234a7c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f234a7c; op2val:0x0;
op3val:0xa7ffffe; valaddr_reg:x3; val_offset:98370*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98370*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32791:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x234a7c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f234a7c; op2val:0x0;
op3val:0xa7fffff; valaddr_reg:x3; val_offset:98373*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98373*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32792:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x237022 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x321f7b and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f237022; op2val:0x80321f7b;
op3val:0xbf800001; valaddr_reg:x3; val_offset:98376*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98376*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32793:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x237022 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x321f7b and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f237022; op2val:0x80321f7b;
op3val:0xbf800003; valaddr_reg:x3; val_offset:98379*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98379*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32794:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x237022 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x321f7b and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f237022; op2val:0x80321f7b;
op3val:0xbf800007; valaddr_reg:x3; val_offset:98382*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98382*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32795:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x237022 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x321f7b and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f237022; op2val:0x80321f7b;
op3val:0xbf999999; valaddr_reg:x3; val_offset:98385*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98385*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32796:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x237022 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x321f7b and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f237022; op2val:0x80321f7b;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:98388*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98388*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32797:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x237022 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x321f7b and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f237022; op2val:0x80321f7b;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:98391*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98391*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32798:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x237022 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x321f7b and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f237022; op2val:0x80321f7b;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:98394*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98394*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32799:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x237022 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x321f7b and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f237022; op2val:0x80321f7b;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:98397*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98397*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32800:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x237022 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x321f7b and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f237022; op2val:0x80321f7b;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:98400*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98400*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32801:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x237022 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x321f7b and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f237022; op2val:0x80321f7b;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:98403*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98403*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32802:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x237022 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x321f7b and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f237022; op2val:0x80321f7b;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:98406*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98406*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32803:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x237022 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x321f7b and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f237022; op2val:0x80321f7b;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:98409*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98409*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32804:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x237022 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x321f7b and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f237022; op2val:0x80321f7b;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:98412*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98412*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32805:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x237022 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x321f7b and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f237022; op2val:0x80321f7b;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:98415*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98415*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32806:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x237022 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x321f7b and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f237022; op2val:0x80321f7b;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:98418*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98418*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32807:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x237022 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x321f7b and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f237022; op2val:0x80321f7b;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:98421*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98421*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32808:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x237022 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x321f7b and fs3 == 1 and fe3 == 0x86 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f237022; op2val:0x80321f7b;
op3val:0xc3000000; valaddr_reg:x3; val_offset:98424*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98424*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32809:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x237022 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x321f7b and fs3 == 1 and fe3 == 0x86 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f237022; op2val:0x80321f7b;
op3val:0xc3000001; valaddr_reg:x3; val_offset:98427*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98427*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32810:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x237022 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x321f7b and fs3 == 1 and fe3 == 0x86 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f237022; op2val:0x80321f7b;
op3val:0xc3000003; valaddr_reg:x3; val_offset:98430*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98430*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32811:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x237022 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x321f7b and fs3 == 1 and fe3 == 0x86 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f237022; op2val:0x80321f7b;
op3val:0xc3000007; valaddr_reg:x3; val_offset:98433*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98433*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32812:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x237022 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x321f7b and fs3 == 1 and fe3 == 0x86 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f237022; op2val:0x80321f7b;
op3val:0xc300000f; valaddr_reg:x3; val_offset:98436*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98436*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32813:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x237022 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x321f7b and fs3 == 1 and fe3 == 0x86 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f237022; op2val:0x80321f7b;
op3val:0xc300001f; valaddr_reg:x3; val_offset:98439*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98439*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32814:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x237022 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x321f7b and fs3 == 1 and fe3 == 0x86 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f237022; op2val:0x80321f7b;
op3val:0xc300003f; valaddr_reg:x3; val_offset:98442*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98442*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32815:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x237022 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x321f7b and fs3 == 1 and fe3 == 0x86 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f237022; op2val:0x80321f7b;
op3val:0xc300007f; valaddr_reg:x3; val_offset:98445*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98445*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32816:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x237022 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x321f7b and fs3 == 1 and fe3 == 0x86 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f237022; op2val:0x80321f7b;
op3val:0xc30000ff; valaddr_reg:x3; val_offset:98448*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98448*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32817:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x237022 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x321f7b and fs3 == 1 and fe3 == 0x86 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f237022; op2val:0x80321f7b;
op3val:0xc30001ff; valaddr_reg:x3; val_offset:98451*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98451*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32818:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x237022 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x321f7b and fs3 == 1 and fe3 == 0x86 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f237022; op2val:0x80321f7b;
op3val:0xc30003ff; valaddr_reg:x3; val_offset:98454*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98454*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32819:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x237022 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x321f7b and fs3 == 1 and fe3 == 0x86 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f237022; op2val:0x80321f7b;
op3val:0xc30007ff; valaddr_reg:x3; val_offset:98457*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98457*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32820:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x237022 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x321f7b and fs3 == 1 and fe3 == 0x86 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f237022; op2val:0x80321f7b;
op3val:0xc3000fff; valaddr_reg:x3; val_offset:98460*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98460*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32821:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x237022 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x321f7b and fs3 == 1 and fe3 == 0x86 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f237022; op2val:0x80321f7b;
op3val:0xc3001fff; valaddr_reg:x3; val_offset:98463*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98463*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32822:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x237022 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x321f7b and fs3 == 1 and fe3 == 0x86 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f237022; op2val:0x80321f7b;
op3val:0xc3003fff; valaddr_reg:x3; val_offset:98466*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98466*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32823:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x237022 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x321f7b and fs3 == 1 and fe3 == 0x86 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f237022; op2val:0x80321f7b;
op3val:0xc3007fff; valaddr_reg:x3; val_offset:98469*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98469*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32824:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x237022 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x321f7b and fs3 == 1 and fe3 == 0x86 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f237022; op2val:0x80321f7b;
op3val:0xc300ffff; valaddr_reg:x3; val_offset:98472*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98472*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32825:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x237022 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x321f7b and fs3 == 1 and fe3 == 0x86 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f237022; op2val:0x80321f7b;
op3val:0xc301ffff; valaddr_reg:x3; val_offset:98475*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98475*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32826:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x237022 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x321f7b and fs3 == 1 and fe3 == 0x86 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f237022; op2val:0x80321f7b;
op3val:0xc303ffff; valaddr_reg:x3; val_offset:98478*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98478*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32827:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x237022 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x321f7b and fs3 == 1 and fe3 == 0x86 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f237022; op2val:0x80321f7b;
op3val:0xc307ffff; valaddr_reg:x3; val_offset:98481*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98481*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32828:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x237022 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x321f7b and fs3 == 1 and fe3 == 0x86 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f237022; op2val:0x80321f7b;
op3val:0xc30fffff; valaddr_reg:x3; val_offset:98484*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98484*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32829:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x237022 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x321f7b and fs3 == 1 and fe3 == 0x86 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f237022; op2val:0x80321f7b;
op3val:0xc31fffff; valaddr_reg:x3; val_offset:98487*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98487*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32830:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x237022 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x321f7b and fs3 == 1 and fe3 == 0x86 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f237022; op2val:0x80321f7b;
op3val:0xc33fffff; valaddr_reg:x3; val_offset:98490*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98490*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32831:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x237022 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x321f7b and fs3 == 1 and fe3 == 0x86 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f237022; op2val:0x80321f7b;
op3val:0xc3400000; valaddr_reg:x3; val_offset:98493*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98493*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32832:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x237022 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x321f7b and fs3 == 1 and fe3 == 0x86 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f237022; op2val:0x80321f7b;
op3val:0xc3600000; valaddr_reg:x3; val_offset:98496*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98496*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32833:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x237022 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x321f7b and fs3 == 1 and fe3 == 0x86 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f237022; op2val:0x80321f7b;
op3val:0xc3700000; valaddr_reg:x3; val_offset:98499*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98499*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32834:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x237022 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x321f7b and fs3 == 1 and fe3 == 0x86 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f237022; op2val:0x80321f7b;
op3val:0xc3780000; valaddr_reg:x3; val_offset:98502*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98502*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32835:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x237022 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x321f7b and fs3 == 1 and fe3 == 0x86 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f237022; op2val:0x80321f7b;
op3val:0xc37c0000; valaddr_reg:x3; val_offset:98505*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98505*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32836:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x237022 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x321f7b and fs3 == 1 and fe3 == 0x86 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f237022; op2val:0x80321f7b;
op3val:0xc37e0000; valaddr_reg:x3; val_offset:98508*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98508*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32837:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x237022 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x321f7b and fs3 == 1 and fe3 == 0x86 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f237022; op2val:0x80321f7b;
op3val:0xc37f0000; valaddr_reg:x3; val_offset:98511*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98511*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32838:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x237022 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x321f7b and fs3 == 1 and fe3 == 0x86 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f237022; op2val:0x80321f7b;
op3val:0xc37f8000; valaddr_reg:x3; val_offset:98514*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98514*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32839:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x237022 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x321f7b and fs3 == 1 and fe3 == 0x86 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f237022; op2val:0x80321f7b;
op3val:0xc37fc000; valaddr_reg:x3; val_offset:98517*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98517*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32840:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x237022 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x321f7b and fs3 == 1 and fe3 == 0x86 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f237022; op2val:0x80321f7b;
op3val:0xc37fe000; valaddr_reg:x3; val_offset:98520*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98520*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32841:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x237022 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x321f7b and fs3 == 1 and fe3 == 0x86 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f237022; op2val:0x80321f7b;
op3val:0xc37ff000; valaddr_reg:x3; val_offset:98523*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98523*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32842:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x237022 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x321f7b and fs3 == 1 and fe3 == 0x86 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f237022; op2val:0x80321f7b;
op3val:0xc37ff800; valaddr_reg:x3; val_offset:98526*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98526*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32843:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x237022 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x321f7b and fs3 == 1 and fe3 == 0x86 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f237022; op2val:0x80321f7b;
op3val:0xc37ffc00; valaddr_reg:x3; val_offset:98529*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98529*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32844:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x237022 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x321f7b and fs3 == 1 and fe3 == 0x86 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f237022; op2val:0x80321f7b;
op3val:0xc37ffe00; valaddr_reg:x3; val_offset:98532*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98532*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32845:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x237022 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x321f7b and fs3 == 1 and fe3 == 0x86 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f237022; op2val:0x80321f7b;
op3val:0xc37fff00; valaddr_reg:x3; val_offset:98535*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98535*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32846:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x237022 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x321f7b and fs3 == 1 and fe3 == 0x86 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f237022; op2val:0x80321f7b;
op3val:0xc37fff80; valaddr_reg:x3; val_offset:98538*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98538*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32847:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x237022 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x321f7b and fs3 == 1 and fe3 == 0x86 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f237022; op2val:0x80321f7b;
op3val:0xc37fffc0; valaddr_reg:x3; val_offset:98541*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98541*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32848:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x237022 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x321f7b and fs3 == 1 and fe3 == 0x86 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f237022; op2val:0x80321f7b;
op3val:0xc37fffe0; valaddr_reg:x3; val_offset:98544*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98544*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32849:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x237022 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x321f7b and fs3 == 1 and fe3 == 0x86 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f237022; op2val:0x80321f7b;
op3val:0xc37ffff0; valaddr_reg:x3; val_offset:98547*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98547*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32850:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x237022 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x321f7b and fs3 == 1 and fe3 == 0x86 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f237022; op2val:0x80321f7b;
op3val:0xc37ffff8; valaddr_reg:x3; val_offset:98550*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98550*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32851:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x237022 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x321f7b and fs3 == 1 and fe3 == 0x86 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f237022; op2val:0x80321f7b;
op3val:0xc37ffffc; valaddr_reg:x3; val_offset:98553*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98553*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32852:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x237022 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x321f7b and fs3 == 1 and fe3 == 0x86 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f237022; op2val:0x80321f7b;
op3val:0xc37ffffe; valaddr_reg:x3; val_offset:98556*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98556*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32853:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x237022 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x321f7b and fs3 == 1 and fe3 == 0x86 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f237022; op2val:0x80321f7b;
op3val:0xc37fffff; valaddr_reg:x3; val_offset:98559*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98559*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32854:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x23bfb5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f23bfb5; op2val:0x80000000;
op3val:0x80000001; valaddr_reg:x3; val_offset:98562*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98562*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32855:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x23bfb5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f23bfb5; op2val:0x80000000;
op3val:0x80000003; valaddr_reg:x3; val_offset:98565*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98565*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32856:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x23bfb5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f23bfb5; op2val:0x80000000;
op3val:0x80000007; valaddr_reg:x3; val_offset:98568*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98568*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32857:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x23bfb5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f23bfb5; op2val:0x80000000;
op3val:0x80199999; valaddr_reg:x3; val_offset:98571*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98571*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32858:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x23bfb5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f23bfb5; op2val:0x80000000;
op3val:0x80249249; valaddr_reg:x3; val_offset:98574*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98574*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32859:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x23bfb5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f23bfb5; op2val:0x80000000;
op3val:0x80333333; valaddr_reg:x3; val_offset:98577*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98577*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32860:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x23bfb5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f23bfb5; op2val:0x80000000;
op3val:0x8036db6d; valaddr_reg:x3; val_offset:98580*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98580*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32861:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x23bfb5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f23bfb5; op2val:0x80000000;
op3val:0x803bbbbb; valaddr_reg:x3; val_offset:98583*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98583*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32862:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x23bfb5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f23bfb5; op2val:0x80000000;
op3val:0x80444444; valaddr_reg:x3; val_offset:98586*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98586*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32863:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x23bfb5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f23bfb5; op2val:0x80000000;
op3val:0x804ccccc; valaddr_reg:x3; val_offset:98589*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98589*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32864:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x23bfb5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f23bfb5; op2val:0x80000000;
op3val:0x805b6db6; valaddr_reg:x3; val_offset:98592*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98592*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32865:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x23bfb5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f23bfb5; op2val:0x80000000;
op3val:0x80666666; valaddr_reg:x3; val_offset:98595*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98595*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32866:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x23bfb5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f23bfb5; op2val:0x80000000;
op3val:0x806db6db; valaddr_reg:x3; val_offset:98598*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98598*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32867:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x23bfb5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f23bfb5; op2val:0x80000000;
op3val:0x807ffff8; valaddr_reg:x3; val_offset:98601*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98601*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32868:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x23bfb5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f23bfb5; op2val:0x80000000;
op3val:0x807ffffc; valaddr_reg:x3; val_offset:98604*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98604*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32869:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x23bfb5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f23bfb5; op2val:0x80000000;
op3val:0x807ffffe; valaddr_reg:x3; val_offset:98607*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98607*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32870:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x23bfb5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0e and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f23bfb5; op2val:0x80000000;
op3val:0x87000000; valaddr_reg:x3; val_offset:98610*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98610*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32871:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x23bfb5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0e and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f23bfb5; op2val:0x80000000;
op3val:0x87000001; valaddr_reg:x3; val_offset:98613*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98613*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32872:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x23bfb5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0e and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f23bfb5; op2val:0x80000000;
op3val:0x87000003; valaddr_reg:x3; val_offset:98616*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98616*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32873:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x23bfb5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0e and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f23bfb5; op2val:0x80000000;
op3val:0x87000007; valaddr_reg:x3; val_offset:98619*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98619*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32874:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x23bfb5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0e and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f23bfb5; op2val:0x80000000;
op3val:0x8700000f; valaddr_reg:x3; val_offset:98622*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98622*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32875:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x23bfb5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0e and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f23bfb5; op2val:0x80000000;
op3val:0x8700001f; valaddr_reg:x3; val_offset:98625*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98625*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32876:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x23bfb5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0e and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f23bfb5; op2val:0x80000000;
op3val:0x8700003f; valaddr_reg:x3; val_offset:98628*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98628*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32877:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x23bfb5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0e and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f23bfb5; op2val:0x80000000;
op3val:0x8700007f; valaddr_reg:x3; val_offset:98631*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98631*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32878:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x23bfb5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0e and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f23bfb5; op2val:0x80000000;
op3val:0x870000ff; valaddr_reg:x3; val_offset:98634*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98634*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32879:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x23bfb5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0e and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f23bfb5; op2val:0x80000000;
op3val:0x870001ff; valaddr_reg:x3; val_offset:98637*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98637*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32880:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x23bfb5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0e and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f23bfb5; op2val:0x80000000;
op3val:0x870003ff; valaddr_reg:x3; val_offset:98640*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98640*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32881:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x23bfb5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0e and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f23bfb5; op2val:0x80000000;
op3val:0x870007ff; valaddr_reg:x3; val_offset:98643*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98643*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32882:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x23bfb5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0e and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f23bfb5; op2val:0x80000000;
op3val:0x87000fff; valaddr_reg:x3; val_offset:98646*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98646*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32883:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x23bfb5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0e and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f23bfb5; op2val:0x80000000;
op3val:0x87001fff; valaddr_reg:x3; val_offset:98649*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98649*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32884:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x23bfb5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0e and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f23bfb5; op2val:0x80000000;
op3val:0x87003fff; valaddr_reg:x3; val_offset:98652*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98652*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32885:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x23bfb5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0e and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f23bfb5; op2val:0x80000000;
op3val:0x87007fff; valaddr_reg:x3; val_offset:98655*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98655*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32886:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x23bfb5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0e and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f23bfb5; op2val:0x80000000;
op3val:0x8700ffff; valaddr_reg:x3; val_offset:98658*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98658*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32887:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x23bfb5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0e and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f23bfb5; op2val:0x80000000;
op3val:0x8701ffff; valaddr_reg:x3; val_offset:98661*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98661*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32888:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x23bfb5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0e and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f23bfb5; op2val:0x80000000;
op3val:0x8703ffff; valaddr_reg:x3; val_offset:98664*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98664*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32889:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x23bfb5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0e and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f23bfb5; op2val:0x80000000;
op3val:0x8707ffff; valaddr_reg:x3; val_offset:98667*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98667*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32890:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x23bfb5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0e and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f23bfb5; op2val:0x80000000;
op3val:0x870fffff; valaddr_reg:x3; val_offset:98670*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98670*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32891:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x23bfb5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0e and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f23bfb5; op2val:0x80000000;
op3val:0x871fffff; valaddr_reg:x3; val_offset:98673*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98673*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32892:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x23bfb5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0e and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f23bfb5; op2val:0x80000000;
op3val:0x873fffff; valaddr_reg:x3; val_offset:98676*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98676*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32893:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x23bfb5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0e and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f23bfb5; op2val:0x80000000;
op3val:0x87400000; valaddr_reg:x3; val_offset:98679*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98679*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32894:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x23bfb5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0e and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f23bfb5; op2val:0x80000000;
op3val:0x87600000; valaddr_reg:x3; val_offset:98682*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98682*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32895:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x23bfb5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0e and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f23bfb5; op2val:0x80000000;
op3val:0x87700000; valaddr_reg:x3; val_offset:98685*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98685*0 + 3*256*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2133019260,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(171966463,32,FLEN)
NAN_BOXED(2133019260,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(171966464,32,FLEN)
NAN_BOXED(2133019260,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(174063616,32,FLEN)
NAN_BOXED(2133019260,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(175112192,32,FLEN)
NAN_BOXED(2133019260,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(175636480,32,FLEN)
NAN_BOXED(2133019260,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(175898624,32,FLEN)
NAN_BOXED(2133019260,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(176029696,32,FLEN)
NAN_BOXED(2133019260,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(176095232,32,FLEN)
NAN_BOXED(2133019260,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(176128000,32,FLEN)
NAN_BOXED(2133019260,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(176144384,32,FLEN)
NAN_BOXED(2133019260,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(176152576,32,FLEN)
NAN_BOXED(2133019260,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(176156672,32,FLEN)
NAN_BOXED(2133019260,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(176158720,32,FLEN)
NAN_BOXED(2133019260,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(176159744,32,FLEN)
NAN_BOXED(2133019260,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(176160256,32,FLEN)
NAN_BOXED(2133019260,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(176160512,32,FLEN)
NAN_BOXED(2133019260,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(176160640,32,FLEN)
NAN_BOXED(2133019260,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(176160704,32,FLEN)
NAN_BOXED(2133019260,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(176160736,32,FLEN)
NAN_BOXED(2133019260,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(176160752,32,FLEN)
NAN_BOXED(2133019260,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(176160760,32,FLEN)
NAN_BOXED(2133019260,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(176160764,32,FLEN)
NAN_BOXED(2133019260,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(176160766,32,FLEN)
NAN_BOXED(2133019260,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(176160767,32,FLEN)
NAN_BOXED(2133028898,32,FLEN)
NAN_BOXED(2150768507,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2133028898,32,FLEN)
NAN_BOXED(2150768507,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2133028898,32,FLEN)
NAN_BOXED(2150768507,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
NAN_BOXED(2133028898,32,FLEN)
NAN_BOXED(2150768507,32,FLEN)
NAN_BOXED(3214514585,32,FLEN)
NAN_BOXED(2133028898,32,FLEN)
NAN_BOXED(2150768507,32,FLEN)
NAN_BOXED(3215233609,32,FLEN)
NAN_BOXED(2133028898,32,FLEN)
NAN_BOXED(2150768507,32,FLEN)
NAN_BOXED(3216192307,32,FLEN)
NAN_BOXED(2133028898,32,FLEN)
NAN_BOXED(2150768507,32,FLEN)
NAN_BOXED(3216431981,32,FLEN)
NAN_BOXED(2133028898,32,FLEN)
NAN_BOXED(2150768507,32,FLEN)
NAN_BOXED(3216751547,32,FLEN)
NAN_BOXED(2133028898,32,FLEN)
NAN_BOXED(2150768507,32,FLEN)
NAN_BOXED(3217310788,32,FLEN)
NAN_BOXED(2133028898,32,FLEN)
NAN_BOXED(2150768507,32,FLEN)
NAN_BOXED(3217870028,32,FLEN)
NAN_BOXED(2133028898,32,FLEN)
NAN_BOXED(2150768507,32,FLEN)
NAN_BOXED(3218828726,32,FLEN)
NAN_BOXED(2133028898,32,FLEN)
NAN_BOXED(2150768507,32,FLEN)
NAN_BOXED(3219547750,32,FLEN)
NAN_BOXED(2133028898,32,FLEN)
NAN_BOXED(2150768507,32,FLEN)
NAN_BOXED(3220027099,32,FLEN)
NAN_BOXED(2133028898,32,FLEN)
NAN_BOXED(2150768507,32,FLEN)
NAN_BOXED(3221225464,32,FLEN)
NAN_BOXED(2133028898,32,FLEN)
NAN_BOXED(2150768507,32,FLEN)
NAN_BOXED(3221225468,32,FLEN)
NAN_BOXED(2133028898,32,FLEN)
NAN_BOXED(2150768507,32,FLEN)
NAN_BOXED(3221225470,32,FLEN)
NAN_BOXED(2133028898,32,FLEN)
NAN_BOXED(2150768507,32,FLEN)
NAN_BOXED(3271557120,32,FLEN)
NAN_BOXED(2133028898,32,FLEN)
NAN_BOXED(2150768507,32,FLEN)
NAN_BOXED(3271557121,32,FLEN)
NAN_BOXED(2133028898,32,FLEN)
NAN_BOXED(2150768507,32,FLEN)
NAN_BOXED(3271557123,32,FLEN)
NAN_BOXED(2133028898,32,FLEN)
NAN_BOXED(2150768507,32,FLEN)
NAN_BOXED(3271557127,32,FLEN)
NAN_BOXED(2133028898,32,FLEN)
NAN_BOXED(2150768507,32,FLEN)
NAN_BOXED(3271557135,32,FLEN)
NAN_BOXED(2133028898,32,FLEN)
NAN_BOXED(2150768507,32,FLEN)
NAN_BOXED(3271557151,32,FLEN)
NAN_BOXED(2133028898,32,FLEN)
NAN_BOXED(2150768507,32,FLEN)
NAN_BOXED(3271557183,32,FLEN)
NAN_BOXED(2133028898,32,FLEN)
NAN_BOXED(2150768507,32,FLEN)
NAN_BOXED(3271557247,32,FLEN)
NAN_BOXED(2133028898,32,FLEN)
NAN_BOXED(2150768507,32,FLEN)
NAN_BOXED(3271557375,32,FLEN)
NAN_BOXED(2133028898,32,FLEN)
NAN_BOXED(2150768507,32,FLEN)
NAN_BOXED(3271557631,32,FLEN)
NAN_BOXED(2133028898,32,FLEN)
NAN_BOXED(2150768507,32,FLEN)
NAN_BOXED(3271558143,32,FLEN)
NAN_BOXED(2133028898,32,FLEN)
NAN_BOXED(2150768507,32,FLEN)
NAN_BOXED(3271559167,32,FLEN)
NAN_BOXED(2133028898,32,FLEN)
NAN_BOXED(2150768507,32,FLEN)
NAN_BOXED(3271561215,32,FLEN)
NAN_BOXED(2133028898,32,FLEN)
NAN_BOXED(2150768507,32,FLEN)
NAN_BOXED(3271565311,32,FLEN)
NAN_BOXED(2133028898,32,FLEN)
NAN_BOXED(2150768507,32,FLEN)
NAN_BOXED(3271573503,32,FLEN)
NAN_BOXED(2133028898,32,FLEN)
NAN_BOXED(2150768507,32,FLEN)
NAN_BOXED(3271589887,32,FLEN)
NAN_BOXED(2133028898,32,FLEN)
NAN_BOXED(2150768507,32,FLEN)
NAN_BOXED(3271622655,32,FLEN)
NAN_BOXED(2133028898,32,FLEN)
NAN_BOXED(2150768507,32,FLEN)
NAN_BOXED(3271688191,32,FLEN)
NAN_BOXED(2133028898,32,FLEN)
NAN_BOXED(2150768507,32,FLEN)
NAN_BOXED(3271819263,32,FLEN)
NAN_BOXED(2133028898,32,FLEN)
NAN_BOXED(2150768507,32,FLEN)
NAN_BOXED(3272081407,32,FLEN)
NAN_BOXED(2133028898,32,FLEN)
NAN_BOXED(2150768507,32,FLEN)
NAN_BOXED(3272605695,32,FLEN)
NAN_BOXED(2133028898,32,FLEN)
NAN_BOXED(2150768507,32,FLEN)
NAN_BOXED(3273654271,32,FLEN)
NAN_BOXED(2133028898,32,FLEN)
NAN_BOXED(2150768507,32,FLEN)
NAN_BOXED(3275751423,32,FLEN)
NAN_BOXED(2133028898,32,FLEN)
NAN_BOXED(2150768507,32,FLEN)
NAN_BOXED(3275751424,32,FLEN)
NAN_BOXED(2133028898,32,FLEN)
NAN_BOXED(2150768507,32,FLEN)
NAN_BOXED(3277848576,32,FLEN)
NAN_BOXED(2133028898,32,FLEN)
NAN_BOXED(2150768507,32,FLEN)
NAN_BOXED(3278897152,32,FLEN)
NAN_BOXED(2133028898,32,FLEN)
NAN_BOXED(2150768507,32,FLEN)
NAN_BOXED(3279421440,32,FLEN)
NAN_BOXED(2133028898,32,FLEN)
NAN_BOXED(2150768507,32,FLEN)
NAN_BOXED(3279683584,32,FLEN)
NAN_BOXED(2133028898,32,FLEN)
NAN_BOXED(2150768507,32,FLEN)
NAN_BOXED(3279814656,32,FLEN)
NAN_BOXED(2133028898,32,FLEN)
NAN_BOXED(2150768507,32,FLEN)
NAN_BOXED(3279880192,32,FLEN)
NAN_BOXED(2133028898,32,FLEN)
NAN_BOXED(2150768507,32,FLEN)
NAN_BOXED(3279912960,32,FLEN)
NAN_BOXED(2133028898,32,FLEN)
NAN_BOXED(2150768507,32,FLEN)
NAN_BOXED(3279929344,32,FLEN)
NAN_BOXED(2133028898,32,FLEN)
NAN_BOXED(2150768507,32,FLEN)
NAN_BOXED(3279937536,32,FLEN)
NAN_BOXED(2133028898,32,FLEN)
NAN_BOXED(2150768507,32,FLEN)
NAN_BOXED(3279941632,32,FLEN)
NAN_BOXED(2133028898,32,FLEN)
NAN_BOXED(2150768507,32,FLEN)
NAN_BOXED(3279943680,32,FLEN)
NAN_BOXED(2133028898,32,FLEN)
NAN_BOXED(2150768507,32,FLEN)
NAN_BOXED(3279944704,32,FLEN)
NAN_BOXED(2133028898,32,FLEN)
NAN_BOXED(2150768507,32,FLEN)
NAN_BOXED(3279945216,32,FLEN)
NAN_BOXED(2133028898,32,FLEN)
NAN_BOXED(2150768507,32,FLEN)
NAN_BOXED(3279945472,32,FLEN)
NAN_BOXED(2133028898,32,FLEN)
NAN_BOXED(2150768507,32,FLEN)
NAN_BOXED(3279945600,32,FLEN)
NAN_BOXED(2133028898,32,FLEN)
NAN_BOXED(2150768507,32,FLEN)
NAN_BOXED(3279945664,32,FLEN)
NAN_BOXED(2133028898,32,FLEN)
NAN_BOXED(2150768507,32,FLEN)
NAN_BOXED(3279945696,32,FLEN)
NAN_BOXED(2133028898,32,FLEN)
NAN_BOXED(2150768507,32,FLEN)
NAN_BOXED(3279945712,32,FLEN)
NAN_BOXED(2133028898,32,FLEN)
NAN_BOXED(2150768507,32,FLEN)
NAN_BOXED(3279945720,32,FLEN)
NAN_BOXED(2133028898,32,FLEN)
NAN_BOXED(2150768507,32,FLEN)
NAN_BOXED(3279945724,32,FLEN)
NAN_BOXED(2133028898,32,FLEN)
NAN_BOXED(2150768507,32,FLEN)
NAN_BOXED(3279945726,32,FLEN)
NAN_BOXED(2133028898,32,FLEN)
NAN_BOXED(2150768507,32,FLEN)
NAN_BOXED(3279945727,32,FLEN)
NAN_BOXED(2133049269,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2133049269,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483651,32,FLEN)
NAN_BOXED(2133049269,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483655,32,FLEN)
NAN_BOXED(2133049269,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149161369,32,FLEN)
NAN_BOXED(2133049269,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149880393,32,FLEN)
NAN_BOXED(2133049269,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2150839091,32,FLEN)
NAN_BOXED(2133049269,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151078765,32,FLEN)
NAN_BOXED(2133049269,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151398331,32,FLEN)
NAN_BOXED(2133049269,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151957572,32,FLEN)
NAN_BOXED(2133049269,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2152516812,32,FLEN)
NAN_BOXED(2133049269,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2153475510,32,FLEN)
NAN_BOXED(2133049269,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154194534,32,FLEN)
NAN_BOXED(2133049269,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154673883,32,FLEN)
NAN_BOXED(2133049269,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872248,32,FLEN)
NAN_BOXED(2133049269,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872252,32,FLEN)
NAN_BOXED(2133049269,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2133049269,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264924160,32,FLEN)
NAN_BOXED(2133049269,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264924161,32,FLEN)
NAN_BOXED(2133049269,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264924163,32,FLEN)
NAN_BOXED(2133049269,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264924167,32,FLEN)
NAN_BOXED(2133049269,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264924175,32,FLEN)
NAN_BOXED(2133049269,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264924191,32,FLEN)
NAN_BOXED(2133049269,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264924223,32,FLEN)
NAN_BOXED(2133049269,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264924287,32,FLEN)
NAN_BOXED(2133049269,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264924415,32,FLEN)
NAN_BOXED(2133049269,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264924671,32,FLEN)
NAN_BOXED(2133049269,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264925183,32,FLEN)
NAN_BOXED(2133049269,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264926207,32,FLEN)
NAN_BOXED(2133049269,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264928255,32,FLEN)
NAN_BOXED(2133049269,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264932351,32,FLEN)
NAN_BOXED(2133049269,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264940543,32,FLEN)
NAN_BOXED(2133049269,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264956927,32,FLEN)
NAN_BOXED(2133049269,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264989695,32,FLEN)
NAN_BOXED(2133049269,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2265055231,32,FLEN)
NAN_BOXED(2133049269,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2265186303,32,FLEN)
NAN_BOXED(2133049269,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2265448447,32,FLEN)
NAN_BOXED(2133049269,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2265972735,32,FLEN)
NAN_BOXED(2133049269,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2267021311,32,FLEN)
NAN_BOXED(2133049269,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2269118463,32,FLEN)
NAN_BOXED(2133049269,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2269118464,32,FLEN)
NAN_BOXED(2133049269,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2271215616,32,FLEN)
NAN_BOXED(2133049269,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2272264192,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
