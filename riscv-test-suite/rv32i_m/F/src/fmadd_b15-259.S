
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:17:59 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_33024:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2438d0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x31e23b and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2438d0; op2val:0x31e23b;
op3val:0x3f800001; valaddr_reg:x3; val_offset:99072*0 + 3*258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99072*0 + 3*258*FLEN/8, x4, x1, x2)

inst_33025:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2438d0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x31e23b and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2438d0; op2val:0x31e23b;
op3val:0x3f800003; valaddr_reg:x3; val_offset:99075*0 + 3*258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99075*0 + 3*258*FLEN/8, x4, x1, x2)

inst_33026:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2438d0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x31e23b and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2438d0; op2val:0x31e23b;
op3val:0x3f800007; valaddr_reg:x3; val_offset:99078*0 + 3*258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99078*0 + 3*258*FLEN/8, x4, x1, x2)

inst_33027:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2438d0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x31e23b and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2438d0; op2val:0x31e23b;
op3val:0x3f999999; valaddr_reg:x3; val_offset:99081*0 + 3*258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99081*0 + 3*258*FLEN/8, x4, x1, x2)

inst_33028:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2438d0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x31e23b and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2438d0; op2val:0x31e23b;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:99084*0 + 3*258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99084*0 + 3*258*FLEN/8, x4, x1, x2)

inst_33029:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2438d0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x31e23b and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2438d0; op2val:0x31e23b;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:99087*0 + 3*258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99087*0 + 3*258*FLEN/8, x4, x1, x2)

inst_33030:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2438d0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x31e23b and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2438d0; op2val:0x31e23b;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:99090*0 + 3*258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99090*0 + 3*258*FLEN/8, x4, x1, x2)

inst_33031:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2438d0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x31e23b and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2438d0; op2val:0x31e23b;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:99093*0 + 3*258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99093*0 + 3*258*FLEN/8, x4, x1, x2)

inst_33032:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2438d0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x31e23b and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2438d0; op2val:0x31e23b;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:99096*0 + 3*258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99096*0 + 3*258*FLEN/8, x4, x1, x2)

inst_33033:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2438d0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x31e23b and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2438d0; op2val:0x31e23b;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:99099*0 + 3*258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99099*0 + 3*258*FLEN/8, x4, x1, x2)

inst_33034:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2438d0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x31e23b and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2438d0; op2val:0x31e23b;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:99102*0 + 3*258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99102*0 + 3*258*FLEN/8, x4, x1, x2)

inst_33035:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2438d0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x31e23b and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2438d0; op2val:0x31e23b;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:99105*0 + 3*258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99105*0 + 3*258*FLEN/8, x4, x1, x2)

inst_33036:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2438d0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x31e23b and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2438d0; op2val:0x31e23b;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:99108*0 + 3*258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99108*0 + 3*258*FLEN/8, x4, x1, x2)

inst_33037:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2438d0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x31e23b and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2438d0; op2val:0x31e23b;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:99111*0 + 3*258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99111*0 + 3*258*FLEN/8, x4, x1, x2)

inst_33038:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2438d0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x31e23b and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2438d0; op2val:0x31e23b;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:99114*0 + 3*258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99114*0 + 3*258*FLEN/8, x4, x1, x2)

inst_33039:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2438d0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x31e23b and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2438d0; op2val:0x31e23b;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:99117*0 + 3*258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99117*0 + 3*258*FLEN/8, x4, x1, x2)

inst_33040:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x254e9f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x463997 and fs3 == 0 and fe3 == 0xf0 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f254e9f; op2val:0x3fc63997;
op3val:0x78000000; valaddr_reg:x3; val_offset:99120*0 + 3*258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99120*0 + 3*258*FLEN/8, x4, x1, x2)

inst_33041:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x254e9f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x463997 and fs3 == 0 and fe3 == 0xf0 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f254e9f; op2val:0x3fc63997;
op3val:0x78000001; valaddr_reg:x3; val_offset:99123*0 + 3*258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99123*0 + 3*258*FLEN/8, x4, x1, x2)

inst_33042:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x254e9f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x463997 and fs3 == 0 and fe3 == 0xf0 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f254e9f; op2val:0x3fc63997;
op3val:0x78000003; valaddr_reg:x3; val_offset:99126*0 + 3*258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99126*0 + 3*258*FLEN/8, x4, x1, x2)

inst_33043:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x254e9f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x463997 and fs3 == 0 and fe3 == 0xf0 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f254e9f; op2val:0x3fc63997;
op3val:0x78000007; valaddr_reg:x3; val_offset:99129*0 + 3*258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99129*0 + 3*258*FLEN/8, x4, x1, x2)

inst_33044:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x254e9f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x463997 and fs3 == 0 and fe3 == 0xf0 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f254e9f; op2val:0x3fc63997;
op3val:0x7800000f; valaddr_reg:x3; val_offset:99132*0 + 3*258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99132*0 + 3*258*FLEN/8, x4, x1, x2)

inst_33045:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x254e9f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x463997 and fs3 == 0 and fe3 == 0xf0 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f254e9f; op2val:0x3fc63997;
op3val:0x7800001f; valaddr_reg:x3; val_offset:99135*0 + 3*258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99135*0 + 3*258*FLEN/8, x4, x1, x2)

inst_33046:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x254e9f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x463997 and fs3 == 0 and fe3 == 0xf0 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f254e9f; op2val:0x3fc63997;
op3val:0x7800003f; valaddr_reg:x3; val_offset:99138*0 + 3*258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99138*0 + 3*258*FLEN/8, x4, x1, x2)

inst_33047:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x254e9f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x463997 and fs3 == 0 and fe3 == 0xf0 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f254e9f; op2val:0x3fc63997;
op3val:0x7800007f; valaddr_reg:x3; val_offset:99141*0 + 3*258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99141*0 + 3*258*FLEN/8, x4, x1, x2)

inst_33048:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x254e9f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x463997 and fs3 == 0 and fe3 == 0xf0 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f254e9f; op2val:0x3fc63997;
op3val:0x780000ff; valaddr_reg:x3; val_offset:99144*0 + 3*258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99144*0 + 3*258*FLEN/8, x4, x1, x2)

inst_33049:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x254e9f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x463997 and fs3 == 0 and fe3 == 0xf0 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f254e9f; op2val:0x3fc63997;
op3val:0x780001ff; valaddr_reg:x3; val_offset:99147*0 + 3*258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99147*0 + 3*258*FLEN/8, x4, x1, x2)

inst_33050:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x254e9f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x463997 and fs3 == 0 and fe3 == 0xf0 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f254e9f; op2val:0x3fc63997;
op3val:0x780003ff; valaddr_reg:x3; val_offset:99150*0 + 3*258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99150*0 + 3*258*FLEN/8, x4, x1, x2)

inst_33051:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x254e9f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x463997 and fs3 == 0 and fe3 == 0xf0 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f254e9f; op2val:0x3fc63997;
op3val:0x780007ff; valaddr_reg:x3; val_offset:99153*0 + 3*258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99153*0 + 3*258*FLEN/8, x4, x1, x2)

inst_33052:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x254e9f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x463997 and fs3 == 0 and fe3 == 0xf0 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f254e9f; op2val:0x3fc63997;
op3val:0x78000fff; valaddr_reg:x3; val_offset:99156*0 + 3*258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99156*0 + 3*258*FLEN/8, x4, x1, x2)

inst_33053:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x254e9f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x463997 and fs3 == 0 and fe3 == 0xf0 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f254e9f; op2val:0x3fc63997;
op3val:0x78001fff; valaddr_reg:x3; val_offset:99159*0 + 3*258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99159*0 + 3*258*FLEN/8, x4, x1, x2)

inst_33054:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x254e9f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x463997 and fs3 == 0 and fe3 == 0xf0 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f254e9f; op2val:0x3fc63997;
op3val:0x78003fff; valaddr_reg:x3; val_offset:99162*0 + 3*258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99162*0 + 3*258*FLEN/8, x4, x1, x2)

inst_33055:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x254e9f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x463997 and fs3 == 0 and fe3 == 0xf0 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f254e9f; op2val:0x3fc63997;
op3val:0x78007fff; valaddr_reg:x3; val_offset:99165*0 + 3*258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99165*0 + 3*258*FLEN/8, x4, x1, x2)

inst_33056:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x254e9f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x463997 and fs3 == 0 and fe3 == 0xf0 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f254e9f; op2val:0x3fc63997;
op3val:0x7800ffff; valaddr_reg:x3; val_offset:99168*0 + 3*258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99168*0 + 3*258*FLEN/8, x4, x1, x2)

inst_33057:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x254e9f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x463997 and fs3 == 0 and fe3 == 0xf0 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f254e9f; op2val:0x3fc63997;
op3val:0x7801ffff; valaddr_reg:x3; val_offset:99171*0 + 3*258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99171*0 + 3*258*FLEN/8, x4, x1, x2)

inst_33058:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x254e9f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x463997 and fs3 == 0 and fe3 == 0xf0 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f254e9f; op2val:0x3fc63997;
op3val:0x7803ffff; valaddr_reg:x3; val_offset:99174*0 + 3*258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99174*0 + 3*258*FLEN/8, x4, x1, x2)

inst_33059:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x254e9f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x463997 and fs3 == 0 and fe3 == 0xf0 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f254e9f; op2val:0x3fc63997;
op3val:0x7807ffff; valaddr_reg:x3; val_offset:99177*0 + 3*258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99177*0 + 3*258*FLEN/8, x4, x1, x2)

inst_33060:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x254e9f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x463997 and fs3 == 0 and fe3 == 0xf0 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f254e9f; op2val:0x3fc63997;
op3val:0x780fffff; valaddr_reg:x3; val_offset:99180*0 + 3*258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99180*0 + 3*258*FLEN/8, x4, x1, x2)

inst_33061:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x254e9f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x463997 and fs3 == 0 and fe3 == 0xf0 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f254e9f; op2val:0x3fc63997;
op3val:0x781fffff; valaddr_reg:x3; val_offset:99183*0 + 3*258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99183*0 + 3*258*FLEN/8, x4, x1, x2)

inst_33062:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x254e9f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x463997 and fs3 == 0 and fe3 == 0xf0 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f254e9f; op2val:0x3fc63997;
op3val:0x783fffff; valaddr_reg:x3; val_offset:99186*0 + 3*258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99186*0 + 3*258*FLEN/8, x4, x1, x2)

inst_33063:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x254e9f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x463997 and fs3 == 0 and fe3 == 0xf0 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f254e9f; op2val:0x3fc63997;
op3val:0x78400000; valaddr_reg:x3; val_offset:99189*0 + 3*258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99189*0 + 3*258*FLEN/8, x4, x1, x2)

inst_33064:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x254e9f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x463997 and fs3 == 0 and fe3 == 0xf0 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f254e9f; op2val:0x3fc63997;
op3val:0x78600000; valaddr_reg:x3; val_offset:99192*0 + 3*258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99192*0 + 3*258*FLEN/8, x4, x1, x2)

inst_33065:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x254e9f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x463997 and fs3 == 0 and fe3 == 0xf0 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f254e9f; op2val:0x3fc63997;
op3val:0x78700000; valaddr_reg:x3; val_offset:99195*0 + 3*258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99195*0 + 3*258*FLEN/8, x4, x1, x2)

inst_33066:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x254e9f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x463997 and fs3 == 0 and fe3 == 0xf0 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f254e9f; op2val:0x3fc63997;
op3val:0x78780000; valaddr_reg:x3; val_offset:99198*0 + 3*258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99198*0 + 3*258*FLEN/8, x4, x1, x2)

inst_33067:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x254e9f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x463997 and fs3 == 0 and fe3 == 0xf0 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f254e9f; op2val:0x3fc63997;
op3val:0x787c0000; valaddr_reg:x3; val_offset:99201*0 + 3*258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99201*0 + 3*258*FLEN/8, x4, x1, x2)

inst_33068:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x254e9f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x463997 and fs3 == 0 and fe3 == 0xf0 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f254e9f; op2val:0x3fc63997;
op3val:0x787e0000; valaddr_reg:x3; val_offset:99204*0 + 3*258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99204*0 + 3*258*FLEN/8, x4, x1, x2)

inst_33069:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x254e9f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x463997 and fs3 == 0 and fe3 == 0xf0 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f254e9f; op2val:0x3fc63997;
op3val:0x787f0000; valaddr_reg:x3; val_offset:99207*0 + 3*258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99207*0 + 3*258*FLEN/8, x4, x1, x2)

inst_33070:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x254e9f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x463997 and fs3 == 0 and fe3 == 0xf0 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f254e9f; op2val:0x3fc63997;
op3val:0x787f8000; valaddr_reg:x3; val_offset:99210*0 + 3*258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99210*0 + 3*258*FLEN/8, x4, x1, x2)

inst_33071:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x254e9f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x463997 and fs3 == 0 and fe3 == 0xf0 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f254e9f; op2val:0x3fc63997;
op3val:0x787fc000; valaddr_reg:x3; val_offset:99213*0 + 3*258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99213*0 + 3*258*FLEN/8, x4, x1, x2)

inst_33072:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x254e9f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x463997 and fs3 == 0 and fe3 == 0xf0 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f254e9f; op2val:0x3fc63997;
op3val:0x787fe000; valaddr_reg:x3; val_offset:99216*0 + 3*258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99216*0 + 3*258*FLEN/8, x4, x1, x2)

inst_33073:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x254e9f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x463997 and fs3 == 0 and fe3 == 0xf0 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f254e9f; op2val:0x3fc63997;
op3val:0x787ff000; valaddr_reg:x3; val_offset:99219*0 + 3*258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99219*0 + 3*258*FLEN/8, x4, x1, x2)

inst_33074:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x254e9f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x463997 and fs3 == 0 and fe3 == 0xf0 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f254e9f; op2val:0x3fc63997;
op3val:0x787ff800; valaddr_reg:x3; val_offset:99222*0 + 3*258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99222*0 + 3*258*FLEN/8, x4, x1, x2)

inst_33075:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x254e9f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x463997 and fs3 == 0 and fe3 == 0xf0 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f254e9f; op2val:0x3fc63997;
op3val:0x787ffc00; valaddr_reg:x3; val_offset:99225*0 + 3*258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99225*0 + 3*258*FLEN/8, x4, x1, x2)

inst_33076:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x254e9f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x463997 and fs3 == 0 and fe3 == 0xf0 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f254e9f; op2val:0x3fc63997;
op3val:0x787ffe00; valaddr_reg:x3; val_offset:99228*0 + 3*258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99228*0 + 3*258*FLEN/8, x4, x1, x2)

inst_33077:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x254e9f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x463997 and fs3 == 0 and fe3 == 0xf0 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f254e9f; op2val:0x3fc63997;
op3val:0x787fff00; valaddr_reg:x3; val_offset:99231*0 + 3*258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99231*0 + 3*258*FLEN/8, x4, x1, x2)

inst_33078:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x254e9f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x463997 and fs3 == 0 and fe3 == 0xf0 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f254e9f; op2val:0x3fc63997;
op3val:0x787fff80; valaddr_reg:x3; val_offset:99234*0 + 3*258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99234*0 + 3*258*FLEN/8, x4, x1, x2)

inst_33079:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x254e9f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x463997 and fs3 == 0 and fe3 == 0xf0 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f254e9f; op2val:0x3fc63997;
op3val:0x787fffc0; valaddr_reg:x3; val_offset:99237*0 + 3*258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99237*0 + 3*258*FLEN/8, x4, x1, x2)

inst_33080:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x254e9f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x463997 and fs3 == 0 and fe3 == 0xf0 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f254e9f; op2val:0x3fc63997;
op3val:0x787fffe0; valaddr_reg:x3; val_offset:99240*0 + 3*258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99240*0 + 3*258*FLEN/8, x4, x1, x2)

inst_33081:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x254e9f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x463997 and fs3 == 0 and fe3 == 0xf0 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f254e9f; op2val:0x3fc63997;
op3val:0x787ffff0; valaddr_reg:x3; val_offset:99243*0 + 3*258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99243*0 + 3*258*FLEN/8, x4, x1, x2)

inst_33082:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x254e9f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x463997 and fs3 == 0 and fe3 == 0xf0 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f254e9f; op2val:0x3fc63997;
op3val:0x787ffff8; valaddr_reg:x3; val_offset:99246*0 + 3*258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99246*0 + 3*258*FLEN/8, x4, x1, x2)

inst_33083:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x254e9f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x463997 and fs3 == 0 and fe3 == 0xf0 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f254e9f; op2val:0x3fc63997;
op3val:0x787ffffc; valaddr_reg:x3; val_offset:99249*0 + 3*258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99249*0 + 3*258*FLEN/8, x4, x1, x2)

inst_33084:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x254e9f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x463997 and fs3 == 0 and fe3 == 0xf0 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f254e9f; op2val:0x3fc63997;
op3val:0x787ffffe; valaddr_reg:x3; val_offset:99252*0 + 3*258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99252*0 + 3*258*FLEN/8, x4, x1, x2)

inst_33085:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x254e9f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x463997 and fs3 == 0 and fe3 == 0xf0 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f254e9f; op2val:0x3fc63997;
op3val:0x787fffff; valaddr_reg:x3; val_offset:99255*0 + 3*258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99255*0 + 3*258*FLEN/8, x4, x1, x2)

inst_33086:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x254e9f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x463997 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f254e9f; op2val:0x3fc63997;
op3val:0x7f000001; valaddr_reg:x3; val_offset:99258*0 + 3*258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99258*0 + 3*258*FLEN/8, x4, x1, x2)

inst_33087:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x254e9f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x463997 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f254e9f; op2val:0x3fc63997;
op3val:0x7f000003; valaddr_reg:x3; val_offset:99261*0 + 3*258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99261*0 + 3*258*FLEN/8, x4, x1, x2)

inst_33088:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x254e9f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x463997 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f254e9f; op2val:0x3fc63997;
op3val:0x7f000007; valaddr_reg:x3; val_offset:99264*0 + 3*258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99264*0 + 3*258*FLEN/8, x4, x1, x2)

inst_33089:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x254e9f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x463997 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f254e9f; op2val:0x3fc63997;
op3val:0x7f199999; valaddr_reg:x3; val_offset:99267*0 + 3*258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99267*0 + 3*258*FLEN/8, x4, x1, x2)

inst_33090:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x254e9f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x463997 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f254e9f; op2val:0x3fc63997;
op3val:0x7f249249; valaddr_reg:x3; val_offset:99270*0 + 3*258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99270*0 + 3*258*FLEN/8, x4, x1, x2)

inst_33091:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x254e9f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x463997 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f254e9f; op2val:0x3fc63997;
op3val:0x7f333333; valaddr_reg:x3; val_offset:99273*0 + 3*258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99273*0 + 3*258*FLEN/8, x4, x1, x2)

inst_33092:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x254e9f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x463997 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f254e9f; op2val:0x3fc63997;
op3val:0x7f36db6d; valaddr_reg:x3; val_offset:99276*0 + 3*258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99276*0 + 3*258*FLEN/8, x4, x1, x2)

inst_33093:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x254e9f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x463997 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f254e9f; op2val:0x3fc63997;
op3val:0x7f3bbbbb; valaddr_reg:x3; val_offset:99279*0 + 3*258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99279*0 + 3*258*FLEN/8, x4, x1, x2)

inst_33094:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x254e9f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x463997 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f254e9f; op2val:0x3fc63997;
op3val:0x7f444444; valaddr_reg:x3; val_offset:99282*0 + 3*258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99282*0 + 3*258*FLEN/8, x4, x1, x2)

inst_33095:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x254e9f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x463997 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f254e9f; op2val:0x3fc63997;
op3val:0x7f4ccccc; valaddr_reg:x3; val_offset:99285*0 + 3*258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99285*0 + 3*258*FLEN/8, x4, x1, x2)

inst_33096:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x254e9f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x463997 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f254e9f; op2val:0x3fc63997;
op3val:0x7f5b6db6; valaddr_reg:x3; val_offset:99288*0 + 3*258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99288*0 + 3*258*FLEN/8, x4, x1, x2)

inst_33097:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x254e9f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x463997 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f254e9f; op2val:0x3fc63997;
op3val:0x7f666666; valaddr_reg:x3; val_offset:99291*0 + 3*258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99291*0 + 3*258*FLEN/8, x4, x1, x2)

inst_33098:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x254e9f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x463997 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f254e9f; op2val:0x3fc63997;
op3val:0x7f6db6db; valaddr_reg:x3; val_offset:99294*0 + 3*258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99294*0 + 3*258*FLEN/8, x4, x1, x2)

inst_33099:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x254e9f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x463997 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f254e9f; op2val:0x3fc63997;
op3val:0x7f7ffff8; valaddr_reg:x3; val_offset:99297*0 + 3*258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99297*0 + 3*258*FLEN/8, x4, x1, x2)

inst_33100:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x254e9f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x463997 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f254e9f; op2val:0x3fc63997;
op3val:0x7f7ffffc; valaddr_reg:x3; val_offset:99300*0 + 3*258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99300*0 + 3*258*FLEN/8, x4, x1, x2)

inst_33101:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x254e9f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x463997 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f254e9f; op2val:0x3fc63997;
op3val:0x7f7ffffe; valaddr_reg:x3; val_offset:99303*0 + 3*258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99303*0 + 3*258*FLEN/8, x4, x1, x2)

inst_33102:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x25c228 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f25c228; op2val:0x0;
op3val:0x800001; valaddr_reg:x3; val_offset:99306*0 + 3*258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99306*0 + 3*258*FLEN/8, x4, x1, x2)

inst_33103:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x25c228 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f25c228; op2val:0x0;
op3val:0x800003; valaddr_reg:x3; val_offset:99309*0 + 3*258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99309*0 + 3*258*FLEN/8, x4, x1, x2)

inst_33104:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x25c228 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f25c228; op2val:0x0;
op3val:0x800007; valaddr_reg:x3; val_offset:99312*0 + 3*258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99312*0 + 3*258*FLEN/8, x4, x1, x2)

inst_33105:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x25c228 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f25c228; op2val:0x0;
op3val:0x999999; valaddr_reg:x3; val_offset:99315*0 + 3*258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99315*0 + 3*258*FLEN/8, x4, x1, x2)

inst_33106:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x25c228 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f25c228; op2val:0x0;
op3val:0xa49249; valaddr_reg:x3; val_offset:99318*0 + 3*258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99318*0 + 3*258*FLEN/8, x4, x1, x2)

inst_33107:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x25c228 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f25c228; op2val:0x0;
op3val:0xb33333; valaddr_reg:x3; val_offset:99321*0 + 3*258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99321*0 + 3*258*FLEN/8, x4, x1, x2)

inst_33108:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x25c228 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f25c228; op2val:0x0;
op3val:0xb6db6d; valaddr_reg:x3; val_offset:99324*0 + 3*258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99324*0 + 3*258*FLEN/8, x4, x1, x2)

inst_33109:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x25c228 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f25c228; op2val:0x0;
op3val:0xbbbbbb; valaddr_reg:x3; val_offset:99327*0 + 3*258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99327*0 + 3*258*FLEN/8, x4, x1, x2)

inst_33110:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x25c228 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f25c228; op2val:0x0;
op3val:0xc44444; valaddr_reg:x3; val_offset:99330*0 + 3*258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99330*0 + 3*258*FLEN/8, x4, x1, x2)

inst_33111:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x25c228 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f25c228; op2val:0x0;
op3val:0xcccccc; valaddr_reg:x3; val_offset:99333*0 + 3*258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99333*0 + 3*258*FLEN/8, x4, x1, x2)

inst_33112:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x25c228 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f25c228; op2val:0x0;
op3val:0xdb6db6; valaddr_reg:x3; val_offset:99336*0 + 3*258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99336*0 + 3*258*FLEN/8, x4, x1, x2)

inst_33113:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x25c228 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f25c228; op2val:0x0;
op3val:0xe66666; valaddr_reg:x3; val_offset:99339*0 + 3*258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99339*0 + 3*258*FLEN/8, x4, x1, x2)

inst_33114:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x25c228 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f25c228; op2val:0x0;
op3val:0xedb6db; valaddr_reg:x3; val_offset:99342*0 + 3*258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99342*0 + 3*258*FLEN/8, x4, x1, x2)

inst_33115:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x25c228 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f25c228; op2val:0x0;
op3val:0xfffff8; valaddr_reg:x3; val_offset:99345*0 + 3*258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99345*0 + 3*258*FLEN/8, x4, x1, x2)

inst_33116:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x25c228 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f25c228; op2val:0x0;
op3val:0xfffffc; valaddr_reg:x3; val_offset:99348*0 + 3*258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99348*0 + 3*258*FLEN/8, x4, x1, x2)

inst_33117:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x25c228 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f25c228; op2val:0x0;
op3val:0xfffffe; valaddr_reg:x3; val_offset:99351*0 + 3*258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99351*0 + 3*258*FLEN/8, x4, x1, x2)

inst_33118:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x25c228 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f25c228; op2val:0x0;
op3val:0x1800000; valaddr_reg:x3; val_offset:99354*0 + 3*258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99354*0 + 3*258*FLEN/8, x4, x1, x2)

inst_33119:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x25c228 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f25c228; op2val:0x0;
op3val:0x1800001; valaddr_reg:x3; val_offset:99357*0 + 3*258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99357*0 + 3*258*FLEN/8, x4, x1, x2)

inst_33120:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x25c228 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f25c228; op2val:0x0;
op3val:0x1800003; valaddr_reg:x3; val_offset:99360*0 + 3*258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99360*0 + 3*258*FLEN/8, x4, x1, x2)

inst_33121:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x25c228 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f25c228; op2val:0x0;
op3val:0x1800007; valaddr_reg:x3; val_offset:99363*0 + 3*258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99363*0 + 3*258*FLEN/8, x4, x1, x2)

inst_33122:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x25c228 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f25c228; op2val:0x0;
op3val:0x180000f; valaddr_reg:x3; val_offset:99366*0 + 3*258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99366*0 + 3*258*FLEN/8, x4, x1, x2)

inst_33123:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x25c228 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f25c228; op2val:0x0;
op3val:0x180001f; valaddr_reg:x3; val_offset:99369*0 + 3*258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99369*0 + 3*258*FLEN/8, x4, x1, x2)

inst_33124:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x25c228 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f25c228; op2val:0x0;
op3val:0x180003f; valaddr_reg:x3; val_offset:99372*0 + 3*258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99372*0 + 3*258*FLEN/8, x4, x1, x2)

inst_33125:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x25c228 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f25c228; op2val:0x0;
op3val:0x180007f; valaddr_reg:x3; val_offset:99375*0 + 3*258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99375*0 + 3*258*FLEN/8, x4, x1, x2)

inst_33126:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x25c228 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f25c228; op2val:0x0;
op3val:0x18000ff; valaddr_reg:x3; val_offset:99378*0 + 3*258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99378*0 + 3*258*FLEN/8, x4, x1, x2)

inst_33127:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x25c228 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f25c228; op2val:0x0;
op3val:0x18001ff; valaddr_reg:x3; val_offset:99381*0 + 3*258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99381*0 + 3*258*FLEN/8, x4, x1, x2)

inst_33128:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x25c228 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f25c228; op2val:0x0;
op3val:0x18003ff; valaddr_reg:x3; val_offset:99384*0 + 3*258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99384*0 + 3*258*FLEN/8, x4, x1, x2)

inst_33129:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x25c228 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f25c228; op2val:0x0;
op3val:0x18007ff; valaddr_reg:x3; val_offset:99387*0 + 3*258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99387*0 + 3*258*FLEN/8, x4, x1, x2)

inst_33130:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x25c228 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f25c228; op2val:0x0;
op3val:0x1800fff; valaddr_reg:x3; val_offset:99390*0 + 3*258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99390*0 + 3*258*FLEN/8, x4, x1, x2)

inst_33131:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x25c228 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f25c228; op2val:0x0;
op3val:0x1801fff; valaddr_reg:x3; val_offset:99393*0 + 3*258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99393*0 + 3*258*FLEN/8, x4, x1, x2)

inst_33132:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x25c228 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f25c228; op2val:0x0;
op3val:0x1803fff; valaddr_reg:x3; val_offset:99396*0 + 3*258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99396*0 + 3*258*FLEN/8, x4, x1, x2)

inst_33133:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x25c228 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f25c228; op2val:0x0;
op3val:0x1807fff; valaddr_reg:x3; val_offset:99399*0 + 3*258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99399*0 + 3*258*FLEN/8, x4, x1, x2)

inst_33134:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x25c228 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f25c228; op2val:0x0;
op3val:0x180ffff; valaddr_reg:x3; val_offset:99402*0 + 3*258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99402*0 + 3*258*FLEN/8, x4, x1, x2)

inst_33135:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x25c228 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f25c228; op2val:0x0;
op3val:0x181ffff; valaddr_reg:x3; val_offset:99405*0 + 3*258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99405*0 + 3*258*FLEN/8, x4, x1, x2)

inst_33136:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x25c228 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f25c228; op2val:0x0;
op3val:0x183ffff; valaddr_reg:x3; val_offset:99408*0 + 3*258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99408*0 + 3*258*FLEN/8, x4, x1, x2)

inst_33137:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x25c228 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f25c228; op2val:0x0;
op3val:0x187ffff; valaddr_reg:x3; val_offset:99411*0 + 3*258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99411*0 + 3*258*FLEN/8, x4, x1, x2)

inst_33138:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x25c228 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f25c228; op2val:0x0;
op3val:0x18fffff; valaddr_reg:x3; val_offset:99414*0 + 3*258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99414*0 + 3*258*FLEN/8, x4, x1, x2)

inst_33139:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x25c228 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f25c228; op2val:0x0;
op3val:0x19fffff; valaddr_reg:x3; val_offset:99417*0 + 3*258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99417*0 + 3*258*FLEN/8, x4, x1, x2)

inst_33140:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x25c228 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f25c228; op2val:0x0;
op3val:0x1bfffff; valaddr_reg:x3; val_offset:99420*0 + 3*258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99420*0 + 3*258*FLEN/8, x4, x1, x2)

inst_33141:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x25c228 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f25c228; op2val:0x0;
op3val:0x1c00000; valaddr_reg:x3; val_offset:99423*0 + 3*258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99423*0 + 3*258*FLEN/8, x4, x1, x2)

inst_33142:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x25c228 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f25c228; op2val:0x0;
op3val:0x1e00000; valaddr_reg:x3; val_offset:99426*0 + 3*258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99426*0 + 3*258*FLEN/8, x4, x1, x2)

inst_33143:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x25c228 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f25c228; op2val:0x0;
op3val:0x1f00000; valaddr_reg:x3; val_offset:99429*0 + 3*258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99429*0 + 3*258*FLEN/8, x4, x1, x2)

inst_33144:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x25c228 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f25c228; op2val:0x0;
op3val:0x1f80000; valaddr_reg:x3; val_offset:99432*0 + 3*258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99432*0 + 3*258*FLEN/8, x4, x1, x2)

inst_33145:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x25c228 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f25c228; op2val:0x0;
op3val:0x1fc0000; valaddr_reg:x3; val_offset:99435*0 + 3*258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99435*0 + 3*258*FLEN/8, x4, x1, x2)

inst_33146:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x25c228 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f25c228; op2val:0x0;
op3val:0x1fe0000; valaddr_reg:x3; val_offset:99438*0 + 3*258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99438*0 + 3*258*FLEN/8, x4, x1, x2)

inst_33147:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x25c228 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f25c228; op2val:0x0;
op3val:0x1ff0000; valaddr_reg:x3; val_offset:99441*0 + 3*258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99441*0 + 3*258*FLEN/8, x4, x1, x2)

inst_33148:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x25c228 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f25c228; op2val:0x0;
op3val:0x1ff8000; valaddr_reg:x3; val_offset:99444*0 + 3*258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99444*0 + 3*258*FLEN/8, x4, x1, x2)

inst_33149:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x25c228 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f25c228; op2val:0x0;
op3val:0x1ffc000; valaddr_reg:x3; val_offset:99447*0 + 3*258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99447*0 + 3*258*FLEN/8, x4, x1, x2)

inst_33150:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x25c228 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f25c228; op2val:0x0;
op3val:0x1ffe000; valaddr_reg:x3; val_offset:99450*0 + 3*258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99450*0 + 3*258*FLEN/8, x4, x1, x2)

inst_33151:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x25c228 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f25c228; op2val:0x0;
op3val:0x1fff000; valaddr_reg:x3; val_offset:99453*0 + 3*258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99453*0 + 3*258*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2133080272,32,FLEN)
NAN_BOXED(3269179,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2133080272,32,FLEN)
NAN_BOXED(3269179,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2133080272,32,FLEN)
NAN_BOXED(3269179,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2133080272,32,FLEN)
NAN_BOXED(3269179,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2133080272,32,FLEN)
NAN_BOXED(3269179,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2133080272,32,FLEN)
NAN_BOXED(3269179,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2133080272,32,FLEN)
NAN_BOXED(3269179,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2133080272,32,FLEN)
NAN_BOXED(3269179,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2133080272,32,FLEN)
NAN_BOXED(3269179,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2133080272,32,FLEN)
NAN_BOXED(3269179,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2133080272,32,FLEN)
NAN_BOXED(3269179,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2133080272,32,FLEN)
NAN_BOXED(3269179,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2133080272,32,FLEN)
NAN_BOXED(3269179,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2133080272,32,FLEN)
NAN_BOXED(3269179,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2133080272,32,FLEN)
NAN_BOXED(3269179,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2133080272,32,FLEN)
NAN_BOXED(3269179,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2133151391,32,FLEN)
NAN_BOXED(1069955479,32,FLEN)
NAN_BOXED(2013265920,32,FLEN)
NAN_BOXED(2133151391,32,FLEN)
NAN_BOXED(1069955479,32,FLEN)
NAN_BOXED(2013265921,32,FLEN)
NAN_BOXED(2133151391,32,FLEN)
NAN_BOXED(1069955479,32,FLEN)
NAN_BOXED(2013265923,32,FLEN)
NAN_BOXED(2133151391,32,FLEN)
NAN_BOXED(1069955479,32,FLEN)
NAN_BOXED(2013265927,32,FLEN)
NAN_BOXED(2133151391,32,FLEN)
NAN_BOXED(1069955479,32,FLEN)
NAN_BOXED(2013265935,32,FLEN)
NAN_BOXED(2133151391,32,FLEN)
NAN_BOXED(1069955479,32,FLEN)
NAN_BOXED(2013265951,32,FLEN)
NAN_BOXED(2133151391,32,FLEN)
NAN_BOXED(1069955479,32,FLEN)
NAN_BOXED(2013265983,32,FLEN)
NAN_BOXED(2133151391,32,FLEN)
NAN_BOXED(1069955479,32,FLEN)
NAN_BOXED(2013266047,32,FLEN)
NAN_BOXED(2133151391,32,FLEN)
NAN_BOXED(1069955479,32,FLEN)
NAN_BOXED(2013266175,32,FLEN)
NAN_BOXED(2133151391,32,FLEN)
NAN_BOXED(1069955479,32,FLEN)
NAN_BOXED(2013266431,32,FLEN)
NAN_BOXED(2133151391,32,FLEN)
NAN_BOXED(1069955479,32,FLEN)
NAN_BOXED(2013266943,32,FLEN)
NAN_BOXED(2133151391,32,FLEN)
NAN_BOXED(1069955479,32,FLEN)
NAN_BOXED(2013267967,32,FLEN)
NAN_BOXED(2133151391,32,FLEN)
NAN_BOXED(1069955479,32,FLEN)
NAN_BOXED(2013270015,32,FLEN)
NAN_BOXED(2133151391,32,FLEN)
NAN_BOXED(1069955479,32,FLEN)
NAN_BOXED(2013274111,32,FLEN)
NAN_BOXED(2133151391,32,FLEN)
NAN_BOXED(1069955479,32,FLEN)
NAN_BOXED(2013282303,32,FLEN)
NAN_BOXED(2133151391,32,FLEN)
NAN_BOXED(1069955479,32,FLEN)
NAN_BOXED(2013298687,32,FLEN)
NAN_BOXED(2133151391,32,FLEN)
NAN_BOXED(1069955479,32,FLEN)
NAN_BOXED(2013331455,32,FLEN)
NAN_BOXED(2133151391,32,FLEN)
NAN_BOXED(1069955479,32,FLEN)
NAN_BOXED(2013396991,32,FLEN)
NAN_BOXED(2133151391,32,FLEN)
NAN_BOXED(1069955479,32,FLEN)
NAN_BOXED(2013528063,32,FLEN)
NAN_BOXED(2133151391,32,FLEN)
NAN_BOXED(1069955479,32,FLEN)
NAN_BOXED(2013790207,32,FLEN)
NAN_BOXED(2133151391,32,FLEN)
NAN_BOXED(1069955479,32,FLEN)
NAN_BOXED(2014314495,32,FLEN)
NAN_BOXED(2133151391,32,FLEN)
NAN_BOXED(1069955479,32,FLEN)
NAN_BOXED(2015363071,32,FLEN)
NAN_BOXED(2133151391,32,FLEN)
NAN_BOXED(1069955479,32,FLEN)
NAN_BOXED(2017460223,32,FLEN)
NAN_BOXED(2133151391,32,FLEN)
NAN_BOXED(1069955479,32,FLEN)
NAN_BOXED(2017460224,32,FLEN)
NAN_BOXED(2133151391,32,FLEN)
NAN_BOXED(1069955479,32,FLEN)
NAN_BOXED(2019557376,32,FLEN)
NAN_BOXED(2133151391,32,FLEN)
NAN_BOXED(1069955479,32,FLEN)
NAN_BOXED(2020605952,32,FLEN)
NAN_BOXED(2133151391,32,FLEN)
NAN_BOXED(1069955479,32,FLEN)
NAN_BOXED(2021130240,32,FLEN)
NAN_BOXED(2133151391,32,FLEN)
NAN_BOXED(1069955479,32,FLEN)
NAN_BOXED(2021392384,32,FLEN)
NAN_BOXED(2133151391,32,FLEN)
NAN_BOXED(1069955479,32,FLEN)
NAN_BOXED(2021523456,32,FLEN)
NAN_BOXED(2133151391,32,FLEN)
NAN_BOXED(1069955479,32,FLEN)
NAN_BOXED(2021588992,32,FLEN)
NAN_BOXED(2133151391,32,FLEN)
NAN_BOXED(1069955479,32,FLEN)
NAN_BOXED(2021621760,32,FLEN)
NAN_BOXED(2133151391,32,FLEN)
NAN_BOXED(1069955479,32,FLEN)
NAN_BOXED(2021638144,32,FLEN)
NAN_BOXED(2133151391,32,FLEN)
NAN_BOXED(1069955479,32,FLEN)
NAN_BOXED(2021646336,32,FLEN)
NAN_BOXED(2133151391,32,FLEN)
NAN_BOXED(1069955479,32,FLEN)
NAN_BOXED(2021650432,32,FLEN)
NAN_BOXED(2133151391,32,FLEN)
NAN_BOXED(1069955479,32,FLEN)
NAN_BOXED(2021652480,32,FLEN)
NAN_BOXED(2133151391,32,FLEN)
NAN_BOXED(1069955479,32,FLEN)
NAN_BOXED(2021653504,32,FLEN)
NAN_BOXED(2133151391,32,FLEN)
NAN_BOXED(1069955479,32,FLEN)
NAN_BOXED(2021654016,32,FLEN)
NAN_BOXED(2133151391,32,FLEN)
NAN_BOXED(1069955479,32,FLEN)
NAN_BOXED(2021654272,32,FLEN)
NAN_BOXED(2133151391,32,FLEN)
NAN_BOXED(1069955479,32,FLEN)
NAN_BOXED(2021654400,32,FLEN)
NAN_BOXED(2133151391,32,FLEN)
NAN_BOXED(1069955479,32,FLEN)
NAN_BOXED(2021654464,32,FLEN)
NAN_BOXED(2133151391,32,FLEN)
NAN_BOXED(1069955479,32,FLEN)
NAN_BOXED(2021654496,32,FLEN)
NAN_BOXED(2133151391,32,FLEN)
NAN_BOXED(1069955479,32,FLEN)
NAN_BOXED(2021654512,32,FLEN)
NAN_BOXED(2133151391,32,FLEN)
NAN_BOXED(1069955479,32,FLEN)
NAN_BOXED(2021654520,32,FLEN)
NAN_BOXED(2133151391,32,FLEN)
NAN_BOXED(1069955479,32,FLEN)
NAN_BOXED(2021654524,32,FLEN)
NAN_BOXED(2133151391,32,FLEN)
NAN_BOXED(1069955479,32,FLEN)
NAN_BOXED(2021654526,32,FLEN)
NAN_BOXED(2133151391,32,FLEN)
NAN_BOXED(1069955479,32,FLEN)
NAN_BOXED(2021654527,32,FLEN)
NAN_BOXED(2133151391,32,FLEN)
NAN_BOXED(1069955479,32,FLEN)
NAN_BOXED(2130706433,32,FLEN)
NAN_BOXED(2133151391,32,FLEN)
NAN_BOXED(1069955479,32,FLEN)
NAN_BOXED(2130706435,32,FLEN)
NAN_BOXED(2133151391,32,FLEN)
NAN_BOXED(1069955479,32,FLEN)
NAN_BOXED(2130706439,32,FLEN)
NAN_BOXED(2133151391,32,FLEN)
NAN_BOXED(1069955479,32,FLEN)
NAN_BOXED(2132384153,32,FLEN)
NAN_BOXED(2133151391,32,FLEN)
NAN_BOXED(1069955479,32,FLEN)
NAN_BOXED(2133103177,32,FLEN)
NAN_BOXED(2133151391,32,FLEN)
NAN_BOXED(1069955479,32,FLEN)
NAN_BOXED(2134061875,32,FLEN)
NAN_BOXED(2133151391,32,FLEN)
NAN_BOXED(1069955479,32,FLEN)
NAN_BOXED(2134301549,32,FLEN)
NAN_BOXED(2133151391,32,FLEN)
NAN_BOXED(1069955479,32,FLEN)
NAN_BOXED(2134621115,32,FLEN)
NAN_BOXED(2133151391,32,FLEN)
NAN_BOXED(1069955479,32,FLEN)
NAN_BOXED(2135180356,32,FLEN)
NAN_BOXED(2133151391,32,FLEN)
NAN_BOXED(1069955479,32,FLEN)
NAN_BOXED(2135739596,32,FLEN)
NAN_BOXED(2133151391,32,FLEN)
NAN_BOXED(1069955479,32,FLEN)
NAN_BOXED(2136698294,32,FLEN)
NAN_BOXED(2133151391,32,FLEN)
NAN_BOXED(1069955479,32,FLEN)
NAN_BOXED(2137417318,32,FLEN)
NAN_BOXED(2133151391,32,FLEN)
NAN_BOXED(1069955479,32,FLEN)
NAN_BOXED(2137896667,32,FLEN)
NAN_BOXED(2133151391,32,FLEN)
NAN_BOXED(1069955479,32,FLEN)
NAN_BOXED(2139095032,32,FLEN)
NAN_BOXED(2133151391,32,FLEN)
NAN_BOXED(1069955479,32,FLEN)
NAN_BOXED(2139095036,32,FLEN)
NAN_BOXED(2133151391,32,FLEN)
NAN_BOXED(1069955479,32,FLEN)
NAN_BOXED(2139095038,32,FLEN)
NAN_BOXED(2133180968,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(2133180968,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388611,32,FLEN)
NAN_BOXED(2133180968,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388615,32,FLEN)
NAN_BOXED(2133180968,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(10066329,32,FLEN)
NAN_BOXED(2133180968,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(10785353,32,FLEN)
NAN_BOXED(2133180968,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(11744051,32,FLEN)
NAN_BOXED(2133180968,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(11983725,32,FLEN)
NAN_BOXED(2133180968,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(12303291,32,FLEN)
NAN_BOXED(2133180968,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(12862532,32,FLEN)
NAN_BOXED(2133180968,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(13421772,32,FLEN)
NAN_BOXED(2133180968,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(14380470,32,FLEN)
NAN_BOXED(2133180968,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(15099494,32,FLEN)
NAN_BOXED(2133180968,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(15578843,32,FLEN)
NAN_BOXED(2133180968,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777208,32,FLEN)
NAN_BOXED(2133180968,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777212,32,FLEN)
NAN_BOXED(2133180968,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777214,32,FLEN)
NAN_BOXED(2133180968,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25165824,32,FLEN)
NAN_BOXED(2133180968,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25165825,32,FLEN)
NAN_BOXED(2133180968,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25165827,32,FLEN)
NAN_BOXED(2133180968,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25165831,32,FLEN)
NAN_BOXED(2133180968,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25165839,32,FLEN)
NAN_BOXED(2133180968,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25165855,32,FLEN)
NAN_BOXED(2133180968,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25165887,32,FLEN)
NAN_BOXED(2133180968,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25165951,32,FLEN)
NAN_BOXED(2133180968,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25166079,32,FLEN)
NAN_BOXED(2133180968,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25166335,32,FLEN)
NAN_BOXED(2133180968,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25166847,32,FLEN)
NAN_BOXED(2133180968,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25167871,32,FLEN)
NAN_BOXED(2133180968,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25169919,32,FLEN)
NAN_BOXED(2133180968,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25174015,32,FLEN)
NAN_BOXED(2133180968,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25182207,32,FLEN)
NAN_BOXED(2133180968,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25198591,32,FLEN)
NAN_BOXED(2133180968,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25231359,32,FLEN)
NAN_BOXED(2133180968,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25296895,32,FLEN)
NAN_BOXED(2133180968,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25427967,32,FLEN)
NAN_BOXED(2133180968,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25690111,32,FLEN)
NAN_BOXED(2133180968,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(26214399,32,FLEN)
NAN_BOXED(2133180968,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(27262975,32,FLEN)
NAN_BOXED(2133180968,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(29360127,32,FLEN)
NAN_BOXED(2133180968,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(29360128,32,FLEN)
NAN_BOXED(2133180968,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(31457280,32,FLEN)
NAN_BOXED(2133180968,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(32505856,32,FLEN)
NAN_BOXED(2133180968,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(33030144,32,FLEN)
NAN_BOXED(2133180968,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(33292288,32,FLEN)
NAN_BOXED(2133180968,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(33423360,32,FLEN)
NAN_BOXED(2133180968,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(33488896,32,FLEN)
NAN_BOXED(2133180968,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(33521664,32,FLEN)
NAN_BOXED(2133180968,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(33538048,32,FLEN)
NAN_BOXED(2133180968,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(33546240,32,FLEN)
NAN_BOXED(2133180968,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(33550336,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
