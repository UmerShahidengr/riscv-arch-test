
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:17:59 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_3200:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x72ea27 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x06e525 and fs3 == 0 and fe3 == 0x9e and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d72ea27; op2val:0x186e525;
op3val:0x4f7fffe0; valaddr_reg:x3; val_offset:9600*0 + 3*25*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9600*0 + 3*25*FLEN/8, x4, x1, x2)

inst_3201:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x72ea27 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x06e525 and fs3 == 0 and fe3 == 0x9e and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d72ea27; op2val:0x186e525;
op3val:0x4f7ffff0; valaddr_reg:x3; val_offset:9603*0 + 3*25*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9603*0 + 3*25*FLEN/8, x4, x1, x2)

inst_3202:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x72ea27 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x06e525 and fs3 == 0 and fe3 == 0x9e and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d72ea27; op2val:0x186e525;
op3val:0x4f7ffff8; valaddr_reg:x3; val_offset:9606*0 + 3*25*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9606*0 + 3*25*FLEN/8, x4, x1, x2)

inst_3203:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x72ea27 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x06e525 and fs3 == 0 and fe3 == 0x9e and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d72ea27; op2val:0x186e525;
op3val:0x4f7ffffc; valaddr_reg:x3; val_offset:9609*0 + 3*25*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9609*0 + 3*25*FLEN/8, x4, x1, x2)

inst_3204:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x72ea27 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x06e525 and fs3 == 0 and fe3 == 0x9e and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d72ea27; op2val:0x186e525;
op3val:0x4f7ffffe; valaddr_reg:x3; val_offset:9612*0 + 3*25*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9612*0 + 3*25*FLEN/8, x4, x1, x2)

inst_3205:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x72ea27 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x06e525 and fs3 == 0 and fe3 == 0x9e and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d72ea27; op2val:0x186e525;
op3val:0x4f7fffff; valaddr_reg:x3; val_offset:9615*0 + 3*25*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9615*0 + 3*25*FLEN/8, x4, x1, x2)

inst_3206:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x7685d7 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x04ebb6 and fs3 == 0 and fe3 == 0x43 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d7685d7; op2val:0x184ebb6;
op3val:0x21800000; valaddr_reg:x3; val_offset:9618*0 + 3*25*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9618*0 + 3*25*FLEN/8, x4, x1, x2)

inst_3207:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x7685d7 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x04ebb6 and fs3 == 0 and fe3 == 0x43 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d7685d7; op2val:0x184ebb6;
op3val:0x21800001; valaddr_reg:x3; val_offset:9621*0 + 3*25*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9621*0 + 3*25*FLEN/8, x4, x1, x2)

inst_3208:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x7685d7 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x04ebb6 and fs3 == 0 and fe3 == 0x43 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d7685d7; op2val:0x184ebb6;
op3val:0x21800003; valaddr_reg:x3; val_offset:9624*0 + 3*25*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9624*0 + 3*25*FLEN/8, x4, x1, x2)

inst_3209:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x7685d7 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x04ebb6 and fs3 == 0 and fe3 == 0x43 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d7685d7; op2val:0x184ebb6;
op3val:0x21800007; valaddr_reg:x3; val_offset:9627*0 + 3*25*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9627*0 + 3*25*FLEN/8, x4, x1, x2)

inst_3210:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x7685d7 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x04ebb6 and fs3 == 0 and fe3 == 0x43 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d7685d7; op2val:0x184ebb6;
op3val:0x2180000f; valaddr_reg:x3; val_offset:9630*0 + 3*25*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9630*0 + 3*25*FLEN/8, x4, x1, x2)

inst_3211:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x7685d7 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x04ebb6 and fs3 == 0 and fe3 == 0x43 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d7685d7; op2val:0x184ebb6;
op3val:0x2180001f; valaddr_reg:x3; val_offset:9633*0 + 3*25*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9633*0 + 3*25*FLEN/8, x4, x1, x2)

inst_3212:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x7685d7 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x04ebb6 and fs3 == 0 and fe3 == 0x43 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d7685d7; op2val:0x184ebb6;
op3val:0x2180003f; valaddr_reg:x3; val_offset:9636*0 + 3*25*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9636*0 + 3*25*FLEN/8, x4, x1, x2)

inst_3213:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x7685d7 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x04ebb6 and fs3 == 0 and fe3 == 0x43 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d7685d7; op2val:0x184ebb6;
op3val:0x2180007f; valaddr_reg:x3; val_offset:9639*0 + 3*25*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9639*0 + 3*25*FLEN/8, x4, x1, x2)

inst_3214:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x7685d7 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x04ebb6 and fs3 == 0 and fe3 == 0x43 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d7685d7; op2val:0x184ebb6;
op3val:0x218000ff; valaddr_reg:x3; val_offset:9642*0 + 3*25*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9642*0 + 3*25*FLEN/8, x4, x1, x2)

inst_3215:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x7685d7 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x04ebb6 and fs3 == 0 and fe3 == 0x43 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d7685d7; op2val:0x184ebb6;
op3val:0x218001ff; valaddr_reg:x3; val_offset:9645*0 + 3*25*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9645*0 + 3*25*FLEN/8, x4, x1, x2)

inst_3216:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x7685d7 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x04ebb6 and fs3 == 0 and fe3 == 0x43 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d7685d7; op2val:0x184ebb6;
op3val:0x218003ff; valaddr_reg:x3; val_offset:9648*0 + 3*25*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9648*0 + 3*25*FLEN/8, x4, x1, x2)

inst_3217:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x7685d7 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x04ebb6 and fs3 == 0 and fe3 == 0x43 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d7685d7; op2val:0x184ebb6;
op3val:0x218007ff; valaddr_reg:x3; val_offset:9651*0 + 3*25*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9651*0 + 3*25*FLEN/8, x4, x1, x2)

inst_3218:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x7685d7 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x04ebb6 and fs3 == 0 and fe3 == 0x43 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d7685d7; op2val:0x184ebb6;
op3val:0x21800fff; valaddr_reg:x3; val_offset:9654*0 + 3*25*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9654*0 + 3*25*FLEN/8, x4, x1, x2)

inst_3219:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x7685d7 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x04ebb6 and fs3 == 0 and fe3 == 0x43 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d7685d7; op2val:0x184ebb6;
op3val:0x21801fff; valaddr_reg:x3; val_offset:9657*0 + 3*25*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9657*0 + 3*25*FLEN/8, x4, x1, x2)

inst_3220:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x7685d7 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x04ebb6 and fs3 == 0 and fe3 == 0x43 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d7685d7; op2val:0x184ebb6;
op3val:0x21803fff; valaddr_reg:x3; val_offset:9660*0 + 3*25*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9660*0 + 3*25*FLEN/8, x4, x1, x2)

inst_3221:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x7685d7 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x04ebb6 and fs3 == 0 and fe3 == 0x43 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d7685d7; op2val:0x184ebb6;
op3val:0x21807fff; valaddr_reg:x3; val_offset:9663*0 + 3*25*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9663*0 + 3*25*FLEN/8, x4, x1, x2)

inst_3222:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x7685d7 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x04ebb6 and fs3 == 0 and fe3 == 0x43 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d7685d7; op2val:0x184ebb6;
op3val:0x2180ffff; valaddr_reg:x3; val_offset:9666*0 + 3*25*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9666*0 + 3*25*FLEN/8, x4, x1, x2)

inst_3223:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x7685d7 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x04ebb6 and fs3 == 0 and fe3 == 0x43 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d7685d7; op2val:0x184ebb6;
op3val:0x2181ffff; valaddr_reg:x3; val_offset:9669*0 + 3*25*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9669*0 + 3*25*FLEN/8, x4, x1, x2)

inst_3224:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x7685d7 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x04ebb6 and fs3 == 0 and fe3 == 0x43 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d7685d7; op2val:0x184ebb6;
op3val:0x2183ffff; valaddr_reg:x3; val_offset:9672*0 + 3*25*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9672*0 + 3*25*FLEN/8, x4, x1, x2)

inst_3225:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x7685d7 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x04ebb6 and fs3 == 0 and fe3 == 0x43 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d7685d7; op2val:0x184ebb6;
op3val:0x2187ffff; valaddr_reg:x3; val_offset:9675*0 + 3*25*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9675*0 + 3*25*FLEN/8, x4, x1, x2)

inst_3226:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x7685d7 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x04ebb6 and fs3 == 0 and fe3 == 0x43 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d7685d7; op2val:0x184ebb6;
op3val:0x218fffff; valaddr_reg:x3; val_offset:9678*0 + 3*25*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9678*0 + 3*25*FLEN/8, x4, x1, x2)

inst_3227:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x7685d7 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x04ebb6 and fs3 == 0 and fe3 == 0x43 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d7685d7; op2val:0x184ebb6;
op3val:0x219fffff; valaddr_reg:x3; val_offset:9681*0 + 3*25*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9681*0 + 3*25*FLEN/8, x4, x1, x2)

inst_3228:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x7685d7 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x04ebb6 and fs3 == 0 and fe3 == 0x43 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d7685d7; op2val:0x184ebb6;
op3val:0x21bfffff; valaddr_reg:x3; val_offset:9684*0 + 3*25*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9684*0 + 3*25*FLEN/8, x4, x1, x2)

inst_3229:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x7685d7 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x04ebb6 and fs3 == 0 and fe3 == 0x43 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d7685d7; op2val:0x184ebb6;
op3val:0x21c00000; valaddr_reg:x3; val_offset:9687*0 + 3*25*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9687*0 + 3*25*FLEN/8, x4, x1, x2)

inst_3230:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x7685d7 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x04ebb6 and fs3 == 0 and fe3 == 0x43 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d7685d7; op2val:0x184ebb6;
op3val:0x21e00000; valaddr_reg:x3; val_offset:9690*0 + 3*25*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9690*0 + 3*25*FLEN/8, x4, x1, x2)

inst_3231:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x7685d7 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x04ebb6 and fs3 == 0 and fe3 == 0x43 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d7685d7; op2val:0x184ebb6;
op3val:0x21f00000; valaddr_reg:x3; val_offset:9693*0 + 3*25*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9693*0 + 3*25*FLEN/8, x4, x1, x2)

inst_3232:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x7685d7 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x04ebb6 and fs3 == 0 and fe3 == 0x43 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d7685d7; op2val:0x184ebb6;
op3val:0x21f80000; valaddr_reg:x3; val_offset:9696*0 + 3*25*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9696*0 + 3*25*FLEN/8, x4, x1, x2)

inst_3233:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x7685d7 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x04ebb6 and fs3 == 0 and fe3 == 0x43 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d7685d7; op2val:0x184ebb6;
op3val:0x21fc0000; valaddr_reg:x3; val_offset:9699*0 + 3*25*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9699*0 + 3*25*FLEN/8, x4, x1, x2)

inst_3234:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x7685d7 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x04ebb6 and fs3 == 0 and fe3 == 0x43 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d7685d7; op2val:0x184ebb6;
op3val:0x21fe0000; valaddr_reg:x3; val_offset:9702*0 + 3*25*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9702*0 + 3*25*FLEN/8, x4, x1, x2)

inst_3235:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x7685d7 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x04ebb6 and fs3 == 0 and fe3 == 0x43 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d7685d7; op2val:0x184ebb6;
op3val:0x21ff0000; valaddr_reg:x3; val_offset:9705*0 + 3*25*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9705*0 + 3*25*FLEN/8, x4, x1, x2)

inst_3236:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x7685d7 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x04ebb6 and fs3 == 0 and fe3 == 0x43 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d7685d7; op2val:0x184ebb6;
op3val:0x21ff8000; valaddr_reg:x3; val_offset:9708*0 + 3*25*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9708*0 + 3*25*FLEN/8, x4, x1, x2)

inst_3237:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x7685d7 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x04ebb6 and fs3 == 0 and fe3 == 0x43 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d7685d7; op2val:0x184ebb6;
op3val:0x21ffc000; valaddr_reg:x3; val_offset:9711*0 + 3*25*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9711*0 + 3*25*FLEN/8, x4, x1, x2)

inst_3238:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x7685d7 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x04ebb6 and fs3 == 0 and fe3 == 0x43 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d7685d7; op2val:0x184ebb6;
op3val:0x21ffe000; valaddr_reg:x3; val_offset:9714*0 + 3*25*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9714*0 + 3*25*FLEN/8, x4, x1, x2)

inst_3239:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x7685d7 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x04ebb6 and fs3 == 0 and fe3 == 0x43 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d7685d7; op2val:0x184ebb6;
op3val:0x21fff000; valaddr_reg:x3; val_offset:9717*0 + 3*25*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9717*0 + 3*25*FLEN/8, x4, x1, x2)

inst_3240:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x7685d7 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x04ebb6 and fs3 == 0 and fe3 == 0x43 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d7685d7; op2val:0x184ebb6;
op3val:0x21fff800; valaddr_reg:x3; val_offset:9720*0 + 3*25*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9720*0 + 3*25*FLEN/8, x4, x1, x2)

inst_3241:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x7685d7 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x04ebb6 and fs3 == 0 and fe3 == 0x43 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d7685d7; op2val:0x184ebb6;
op3val:0x21fffc00; valaddr_reg:x3; val_offset:9723*0 + 3*25*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9723*0 + 3*25*FLEN/8, x4, x1, x2)

inst_3242:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x7685d7 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x04ebb6 and fs3 == 0 and fe3 == 0x43 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d7685d7; op2val:0x184ebb6;
op3val:0x21fffe00; valaddr_reg:x3; val_offset:9726*0 + 3*25*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9726*0 + 3*25*FLEN/8, x4, x1, x2)

inst_3243:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x7685d7 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x04ebb6 and fs3 == 0 and fe3 == 0x43 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d7685d7; op2val:0x184ebb6;
op3val:0x21ffff00; valaddr_reg:x3; val_offset:9729*0 + 3*25*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9729*0 + 3*25*FLEN/8, x4, x1, x2)

inst_3244:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x7685d7 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x04ebb6 and fs3 == 0 and fe3 == 0x43 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d7685d7; op2val:0x184ebb6;
op3val:0x21ffff80; valaddr_reg:x3; val_offset:9732*0 + 3*25*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9732*0 + 3*25*FLEN/8, x4, x1, x2)

inst_3245:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x7685d7 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x04ebb6 and fs3 == 0 and fe3 == 0x43 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d7685d7; op2val:0x184ebb6;
op3val:0x21ffffc0; valaddr_reg:x3; val_offset:9735*0 + 3*25*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9735*0 + 3*25*FLEN/8, x4, x1, x2)

inst_3246:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x7685d7 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x04ebb6 and fs3 == 0 and fe3 == 0x43 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d7685d7; op2val:0x184ebb6;
op3val:0x21ffffe0; valaddr_reg:x3; val_offset:9738*0 + 3*25*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9738*0 + 3*25*FLEN/8, x4, x1, x2)

inst_3247:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x7685d7 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x04ebb6 and fs3 == 0 and fe3 == 0x43 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d7685d7; op2val:0x184ebb6;
op3val:0x21fffff0; valaddr_reg:x3; val_offset:9741*0 + 3*25*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9741*0 + 3*25*FLEN/8, x4, x1, x2)

inst_3248:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x7685d7 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x04ebb6 and fs3 == 0 and fe3 == 0x43 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d7685d7; op2val:0x184ebb6;
op3val:0x21fffff8; valaddr_reg:x3; val_offset:9744*0 + 3*25*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9744*0 + 3*25*FLEN/8, x4, x1, x2)

inst_3249:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x7685d7 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x04ebb6 and fs3 == 0 and fe3 == 0x43 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d7685d7; op2val:0x184ebb6;
op3val:0x21fffffc; valaddr_reg:x3; val_offset:9747*0 + 3*25*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9747*0 + 3*25*FLEN/8, x4, x1, x2)

inst_3250:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x7685d7 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x04ebb6 and fs3 == 0 and fe3 == 0x43 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d7685d7; op2val:0x184ebb6;
op3val:0x21fffffe; valaddr_reg:x3; val_offset:9750*0 + 3*25*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9750*0 + 3*25*FLEN/8, x4, x1, x2)

inst_3251:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x7685d7 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x04ebb6 and fs3 == 0 and fe3 == 0x43 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d7685d7; op2val:0x184ebb6;
op3val:0x21ffffff; valaddr_reg:x3; val_offset:9753*0 + 3*25*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9753*0 + 3*25*FLEN/8, x4, x1, x2)

inst_3252:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x7685d7 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x04ebb6 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d7685d7; op2val:0x184ebb6;
op3val:0x3f800001; valaddr_reg:x3; val_offset:9756*0 + 3*25*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9756*0 + 3*25*FLEN/8, x4, x1, x2)

inst_3253:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x7685d7 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x04ebb6 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d7685d7; op2val:0x184ebb6;
op3val:0x3f800003; valaddr_reg:x3; val_offset:9759*0 + 3*25*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9759*0 + 3*25*FLEN/8, x4, x1, x2)

inst_3254:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x7685d7 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x04ebb6 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d7685d7; op2val:0x184ebb6;
op3val:0x3f800007; valaddr_reg:x3; val_offset:9762*0 + 3*25*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9762*0 + 3*25*FLEN/8, x4, x1, x2)

inst_3255:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x7685d7 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x04ebb6 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d7685d7; op2val:0x184ebb6;
op3val:0x3f999999; valaddr_reg:x3; val_offset:9765*0 + 3*25*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9765*0 + 3*25*FLEN/8, x4, x1, x2)

inst_3256:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x7685d7 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x04ebb6 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d7685d7; op2val:0x184ebb6;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:9768*0 + 3*25*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9768*0 + 3*25*FLEN/8, x4, x1, x2)

inst_3257:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x7685d7 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x04ebb6 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d7685d7; op2val:0x184ebb6;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:9771*0 + 3*25*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9771*0 + 3*25*FLEN/8, x4, x1, x2)

inst_3258:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x7685d7 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x04ebb6 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d7685d7; op2val:0x184ebb6;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:9774*0 + 3*25*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9774*0 + 3*25*FLEN/8, x4, x1, x2)

inst_3259:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x7685d7 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x04ebb6 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d7685d7; op2val:0x184ebb6;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:9777*0 + 3*25*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9777*0 + 3*25*FLEN/8, x4, x1, x2)

inst_3260:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x7685d7 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x04ebb6 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d7685d7; op2val:0x184ebb6;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:9780*0 + 3*25*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9780*0 + 3*25*FLEN/8, x4, x1, x2)

inst_3261:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x7685d7 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x04ebb6 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d7685d7; op2val:0x184ebb6;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:9783*0 + 3*25*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9783*0 + 3*25*FLEN/8, x4, x1, x2)

inst_3262:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x7685d7 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x04ebb6 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d7685d7; op2val:0x184ebb6;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:9786*0 + 3*25*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9786*0 + 3*25*FLEN/8, x4, x1, x2)

inst_3263:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x7685d7 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x04ebb6 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d7685d7; op2val:0x184ebb6;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:9789*0 + 3*25*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9789*0 + 3*25*FLEN/8, x4, x1, x2)

inst_3264:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x7685d7 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x04ebb6 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d7685d7; op2val:0x184ebb6;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:9792*0 + 3*25*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9792*0 + 3*25*FLEN/8, x4, x1, x2)

inst_3265:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x7685d7 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x04ebb6 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d7685d7; op2val:0x184ebb6;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:9795*0 + 3*25*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9795*0 + 3*25*FLEN/8, x4, x1, x2)

inst_3266:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x7685d7 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x04ebb6 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d7685d7; op2val:0x184ebb6;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:9798*0 + 3*25*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9798*0 + 3*25*FLEN/8, x4, x1, x2)

inst_3267:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x7685d7 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x04ebb6 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d7685d7; op2val:0x184ebb6;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:9801*0 + 3*25*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9801*0 + 3*25*FLEN/8, x4, x1, x2)

inst_3268:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x772129 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d772129; op2val:0x80000000;
op3val:0x80000001; valaddr_reg:x3; val_offset:9804*0 + 3*25*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9804*0 + 3*25*FLEN/8, x4, x1, x2)

inst_3269:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x772129 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d772129; op2val:0x80000000;
op3val:0x80000003; valaddr_reg:x3; val_offset:9807*0 + 3*25*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9807*0 + 3*25*FLEN/8, x4, x1, x2)

inst_3270:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x772129 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d772129; op2val:0x80000000;
op3val:0x80000007; valaddr_reg:x3; val_offset:9810*0 + 3*25*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9810*0 + 3*25*FLEN/8, x4, x1, x2)

inst_3271:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x772129 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d772129; op2val:0x80000000;
op3val:0x80199999; valaddr_reg:x3; val_offset:9813*0 + 3*25*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9813*0 + 3*25*FLEN/8, x4, x1, x2)

inst_3272:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x772129 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d772129; op2val:0x80000000;
op3val:0x80249249; valaddr_reg:x3; val_offset:9816*0 + 3*25*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9816*0 + 3*25*FLEN/8, x4, x1, x2)

inst_3273:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x772129 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d772129; op2val:0x80000000;
op3val:0x80333333; valaddr_reg:x3; val_offset:9819*0 + 3*25*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9819*0 + 3*25*FLEN/8, x4, x1, x2)

inst_3274:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x772129 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d772129; op2val:0x80000000;
op3val:0x8036db6d; valaddr_reg:x3; val_offset:9822*0 + 3*25*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9822*0 + 3*25*FLEN/8, x4, x1, x2)

inst_3275:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x772129 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d772129; op2val:0x80000000;
op3val:0x803bbbbb; valaddr_reg:x3; val_offset:9825*0 + 3*25*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9825*0 + 3*25*FLEN/8, x4, x1, x2)

inst_3276:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x772129 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d772129; op2val:0x80000000;
op3val:0x80444444; valaddr_reg:x3; val_offset:9828*0 + 3*25*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9828*0 + 3*25*FLEN/8, x4, x1, x2)

inst_3277:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x772129 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d772129; op2val:0x80000000;
op3val:0x804ccccc; valaddr_reg:x3; val_offset:9831*0 + 3*25*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9831*0 + 3*25*FLEN/8, x4, x1, x2)

inst_3278:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x772129 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d772129; op2val:0x80000000;
op3val:0x805b6db6; valaddr_reg:x3; val_offset:9834*0 + 3*25*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9834*0 + 3*25*FLEN/8, x4, x1, x2)

inst_3279:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x772129 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d772129; op2val:0x80000000;
op3val:0x80666666; valaddr_reg:x3; val_offset:9837*0 + 3*25*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9837*0 + 3*25*FLEN/8, x4, x1, x2)

inst_3280:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x772129 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d772129; op2val:0x80000000;
op3val:0x806db6db; valaddr_reg:x3; val_offset:9840*0 + 3*25*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9840*0 + 3*25*FLEN/8, x4, x1, x2)

inst_3281:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x772129 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d772129; op2val:0x80000000;
op3val:0x807ffff8; valaddr_reg:x3; val_offset:9843*0 + 3*25*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9843*0 + 3*25*FLEN/8, x4, x1, x2)

inst_3282:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x772129 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d772129; op2val:0x80000000;
op3val:0x807ffffc; valaddr_reg:x3; val_offset:9846*0 + 3*25*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9846*0 + 3*25*FLEN/8, x4, x1, x2)

inst_3283:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x772129 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d772129; op2val:0x80000000;
op3val:0x807ffffe; valaddr_reg:x3; val_offset:9849*0 + 3*25*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9849*0 + 3*25*FLEN/8, x4, x1, x2)

inst_3284:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x772129 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0e and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d772129; op2val:0x80000000;
op3val:0x87000000; valaddr_reg:x3; val_offset:9852*0 + 3*25*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9852*0 + 3*25*FLEN/8, x4, x1, x2)

inst_3285:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x772129 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0e and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d772129; op2val:0x80000000;
op3val:0x87000001; valaddr_reg:x3; val_offset:9855*0 + 3*25*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9855*0 + 3*25*FLEN/8, x4, x1, x2)

inst_3286:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x772129 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0e and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d772129; op2val:0x80000000;
op3val:0x87000003; valaddr_reg:x3; val_offset:9858*0 + 3*25*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9858*0 + 3*25*FLEN/8, x4, x1, x2)

inst_3287:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x772129 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0e and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d772129; op2val:0x80000000;
op3val:0x87000007; valaddr_reg:x3; val_offset:9861*0 + 3*25*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9861*0 + 3*25*FLEN/8, x4, x1, x2)

inst_3288:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x772129 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0e and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d772129; op2val:0x80000000;
op3val:0x8700000f; valaddr_reg:x3; val_offset:9864*0 + 3*25*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9864*0 + 3*25*FLEN/8, x4, x1, x2)

inst_3289:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x772129 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0e and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d772129; op2val:0x80000000;
op3val:0x8700001f; valaddr_reg:x3; val_offset:9867*0 + 3*25*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9867*0 + 3*25*FLEN/8, x4, x1, x2)

inst_3290:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x772129 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0e and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d772129; op2val:0x80000000;
op3val:0x8700003f; valaddr_reg:x3; val_offset:9870*0 + 3*25*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9870*0 + 3*25*FLEN/8, x4, x1, x2)

inst_3291:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x772129 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0e and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d772129; op2val:0x80000000;
op3val:0x8700007f; valaddr_reg:x3; val_offset:9873*0 + 3*25*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9873*0 + 3*25*FLEN/8, x4, x1, x2)

inst_3292:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x772129 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0e and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d772129; op2val:0x80000000;
op3val:0x870000ff; valaddr_reg:x3; val_offset:9876*0 + 3*25*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9876*0 + 3*25*FLEN/8, x4, x1, x2)

inst_3293:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x772129 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0e and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d772129; op2val:0x80000000;
op3val:0x870001ff; valaddr_reg:x3; val_offset:9879*0 + 3*25*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9879*0 + 3*25*FLEN/8, x4, x1, x2)

inst_3294:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x772129 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0e and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d772129; op2val:0x80000000;
op3val:0x870003ff; valaddr_reg:x3; val_offset:9882*0 + 3*25*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9882*0 + 3*25*FLEN/8, x4, x1, x2)

inst_3295:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x772129 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0e and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d772129; op2val:0x80000000;
op3val:0x870007ff; valaddr_reg:x3; val_offset:9885*0 + 3*25*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9885*0 + 3*25*FLEN/8, x4, x1, x2)

inst_3296:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x772129 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0e and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d772129; op2val:0x80000000;
op3val:0x87000fff; valaddr_reg:x3; val_offset:9888*0 + 3*25*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9888*0 + 3*25*FLEN/8, x4, x1, x2)

inst_3297:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x772129 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0e and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d772129; op2val:0x80000000;
op3val:0x87001fff; valaddr_reg:x3; val_offset:9891*0 + 3*25*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9891*0 + 3*25*FLEN/8, x4, x1, x2)

inst_3298:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x772129 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0e and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d772129; op2val:0x80000000;
op3val:0x87003fff; valaddr_reg:x3; val_offset:9894*0 + 3*25*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9894*0 + 3*25*FLEN/8, x4, x1, x2)

inst_3299:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x772129 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0e and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d772129; op2val:0x80000000;
op3val:0x87007fff; valaddr_reg:x3; val_offset:9897*0 + 3*25*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9897*0 + 3*25*FLEN/8, x4, x1, x2)

inst_3300:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x772129 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0e and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d772129; op2val:0x80000000;
op3val:0x8700ffff; valaddr_reg:x3; val_offset:9900*0 + 3*25*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9900*0 + 3*25*FLEN/8, x4, x1, x2)

inst_3301:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x772129 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0e and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d772129; op2val:0x80000000;
op3val:0x8701ffff; valaddr_reg:x3; val_offset:9903*0 + 3*25*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9903*0 + 3*25*FLEN/8, x4, x1, x2)

inst_3302:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x772129 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0e and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d772129; op2val:0x80000000;
op3val:0x8703ffff; valaddr_reg:x3; val_offset:9906*0 + 3*25*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9906*0 + 3*25*FLEN/8, x4, x1, x2)

inst_3303:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x772129 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0e and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d772129; op2val:0x80000000;
op3val:0x8707ffff; valaddr_reg:x3; val_offset:9909*0 + 3*25*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9909*0 + 3*25*FLEN/8, x4, x1, x2)

inst_3304:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x772129 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0e and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d772129; op2val:0x80000000;
op3val:0x870fffff; valaddr_reg:x3; val_offset:9912*0 + 3*25*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9912*0 + 3*25*FLEN/8, x4, x1, x2)

inst_3305:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x772129 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0e and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d772129; op2val:0x80000000;
op3val:0x871fffff; valaddr_reg:x3; val_offset:9915*0 + 3*25*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9915*0 + 3*25*FLEN/8, x4, x1, x2)

inst_3306:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x772129 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0e and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d772129; op2val:0x80000000;
op3val:0x873fffff; valaddr_reg:x3; val_offset:9918*0 + 3*25*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9918*0 + 3*25*FLEN/8, x4, x1, x2)

inst_3307:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x772129 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0e and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d772129; op2val:0x80000000;
op3val:0x87400000; valaddr_reg:x3; val_offset:9921*0 + 3*25*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9921*0 + 3*25*FLEN/8, x4, x1, x2)

inst_3308:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x772129 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0e and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d772129; op2val:0x80000000;
op3val:0x87600000; valaddr_reg:x3; val_offset:9924*0 + 3*25*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9924*0 + 3*25*FLEN/8, x4, x1, x2)

inst_3309:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x772129 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0e and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d772129; op2val:0x80000000;
op3val:0x87700000; valaddr_reg:x3; val_offset:9927*0 + 3*25*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9927*0 + 3*25*FLEN/8, x4, x1, x2)

inst_3310:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x772129 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0e and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d772129; op2val:0x80000000;
op3val:0x87780000; valaddr_reg:x3; val_offset:9930*0 + 3*25*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9930*0 + 3*25*FLEN/8, x4, x1, x2)

inst_3311:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x772129 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0e and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d772129; op2val:0x80000000;
op3val:0x877c0000; valaddr_reg:x3; val_offset:9933*0 + 3*25*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9933*0 + 3*25*FLEN/8, x4, x1, x2)

inst_3312:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x772129 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0e and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d772129; op2val:0x80000000;
op3val:0x877e0000; valaddr_reg:x3; val_offset:9936*0 + 3*25*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9936*0 + 3*25*FLEN/8, x4, x1, x2)

inst_3313:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x772129 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0e and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d772129; op2val:0x80000000;
op3val:0x877f0000; valaddr_reg:x3; val_offset:9939*0 + 3*25*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9939*0 + 3*25*FLEN/8, x4, x1, x2)

inst_3314:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x772129 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0e and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d772129; op2val:0x80000000;
op3val:0x877f8000; valaddr_reg:x3; val_offset:9942*0 + 3*25*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9942*0 + 3*25*FLEN/8, x4, x1, x2)

inst_3315:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x772129 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0e and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d772129; op2val:0x80000000;
op3val:0x877fc000; valaddr_reg:x3; val_offset:9945*0 + 3*25*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9945*0 + 3*25*FLEN/8, x4, x1, x2)

inst_3316:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x772129 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0e and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d772129; op2val:0x80000000;
op3val:0x877fe000; valaddr_reg:x3; val_offset:9948*0 + 3*25*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9948*0 + 3*25*FLEN/8, x4, x1, x2)

inst_3317:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x772129 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0e and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d772129; op2val:0x80000000;
op3val:0x877ff000; valaddr_reg:x3; val_offset:9951*0 + 3*25*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9951*0 + 3*25*FLEN/8, x4, x1, x2)

inst_3318:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x772129 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0e and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d772129; op2val:0x80000000;
op3val:0x877ff800; valaddr_reg:x3; val_offset:9954*0 + 3*25*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9954*0 + 3*25*FLEN/8, x4, x1, x2)

inst_3319:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x772129 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0e and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d772129; op2val:0x80000000;
op3val:0x877ffc00; valaddr_reg:x3; val_offset:9957*0 + 3*25*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9957*0 + 3*25*FLEN/8, x4, x1, x2)

inst_3320:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x772129 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0e and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d772129; op2val:0x80000000;
op3val:0x877ffe00; valaddr_reg:x3; val_offset:9960*0 + 3*25*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9960*0 + 3*25*FLEN/8, x4, x1, x2)

inst_3321:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x772129 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0e and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d772129; op2val:0x80000000;
op3val:0x877fff00; valaddr_reg:x3; val_offset:9963*0 + 3*25*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9963*0 + 3*25*FLEN/8, x4, x1, x2)

inst_3322:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x772129 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0e and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d772129; op2val:0x80000000;
op3val:0x877fff80; valaddr_reg:x3; val_offset:9966*0 + 3*25*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9966*0 + 3*25*FLEN/8, x4, x1, x2)

inst_3323:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x772129 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0e and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d772129; op2val:0x80000000;
op3val:0x877fffc0; valaddr_reg:x3; val_offset:9969*0 + 3*25*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9969*0 + 3*25*FLEN/8, x4, x1, x2)

inst_3324:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x772129 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0e and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d772129; op2val:0x80000000;
op3val:0x877fffe0; valaddr_reg:x3; val_offset:9972*0 + 3*25*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9972*0 + 3*25*FLEN/8, x4, x1, x2)

inst_3325:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x772129 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0e and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d772129; op2val:0x80000000;
op3val:0x877ffff0; valaddr_reg:x3; val_offset:9975*0 + 3*25*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9975*0 + 3*25*FLEN/8, x4, x1, x2)

inst_3326:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x772129 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0e and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d772129; op2val:0x80000000;
op3val:0x877ffff8; valaddr_reg:x3; val_offset:9978*0 + 3*25*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9978*0 + 3*25*FLEN/8, x4, x1, x2)

inst_3327:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x772129 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0e and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d772129; op2val:0x80000000;
op3val:0x877ffffc; valaddr_reg:x3; val_offset:9981*0 + 3*25*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9981*0 + 3*25*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2104683047,32,FLEN)
NAN_BOXED(25617701,32,FLEN)
NAN_BOXED(1333788640,32,FLEN)
NAN_BOXED(2104683047,32,FLEN)
NAN_BOXED(25617701,32,FLEN)
NAN_BOXED(1333788656,32,FLEN)
NAN_BOXED(2104683047,32,FLEN)
NAN_BOXED(25617701,32,FLEN)
NAN_BOXED(1333788664,32,FLEN)
NAN_BOXED(2104683047,32,FLEN)
NAN_BOXED(25617701,32,FLEN)
NAN_BOXED(1333788668,32,FLEN)
NAN_BOXED(2104683047,32,FLEN)
NAN_BOXED(25617701,32,FLEN)
NAN_BOXED(1333788670,32,FLEN)
NAN_BOXED(2104683047,32,FLEN)
NAN_BOXED(25617701,32,FLEN)
NAN_BOXED(1333788671,32,FLEN)
NAN_BOXED(2104919511,32,FLEN)
NAN_BOXED(25488310,32,FLEN)
NAN_BOXED(562036736,32,FLEN)
NAN_BOXED(2104919511,32,FLEN)
NAN_BOXED(25488310,32,FLEN)
NAN_BOXED(562036737,32,FLEN)
NAN_BOXED(2104919511,32,FLEN)
NAN_BOXED(25488310,32,FLEN)
NAN_BOXED(562036739,32,FLEN)
NAN_BOXED(2104919511,32,FLEN)
NAN_BOXED(25488310,32,FLEN)
NAN_BOXED(562036743,32,FLEN)
NAN_BOXED(2104919511,32,FLEN)
NAN_BOXED(25488310,32,FLEN)
NAN_BOXED(562036751,32,FLEN)
NAN_BOXED(2104919511,32,FLEN)
NAN_BOXED(25488310,32,FLEN)
NAN_BOXED(562036767,32,FLEN)
NAN_BOXED(2104919511,32,FLEN)
NAN_BOXED(25488310,32,FLEN)
NAN_BOXED(562036799,32,FLEN)
NAN_BOXED(2104919511,32,FLEN)
NAN_BOXED(25488310,32,FLEN)
NAN_BOXED(562036863,32,FLEN)
NAN_BOXED(2104919511,32,FLEN)
NAN_BOXED(25488310,32,FLEN)
NAN_BOXED(562036991,32,FLEN)
NAN_BOXED(2104919511,32,FLEN)
NAN_BOXED(25488310,32,FLEN)
NAN_BOXED(562037247,32,FLEN)
NAN_BOXED(2104919511,32,FLEN)
NAN_BOXED(25488310,32,FLEN)
NAN_BOXED(562037759,32,FLEN)
NAN_BOXED(2104919511,32,FLEN)
NAN_BOXED(25488310,32,FLEN)
NAN_BOXED(562038783,32,FLEN)
NAN_BOXED(2104919511,32,FLEN)
NAN_BOXED(25488310,32,FLEN)
NAN_BOXED(562040831,32,FLEN)
NAN_BOXED(2104919511,32,FLEN)
NAN_BOXED(25488310,32,FLEN)
NAN_BOXED(562044927,32,FLEN)
NAN_BOXED(2104919511,32,FLEN)
NAN_BOXED(25488310,32,FLEN)
NAN_BOXED(562053119,32,FLEN)
NAN_BOXED(2104919511,32,FLEN)
NAN_BOXED(25488310,32,FLEN)
NAN_BOXED(562069503,32,FLEN)
NAN_BOXED(2104919511,32,FLEN)
NAN_BOXED(25488310,32,FLEN)
NAN_BOXED(562102271,32,FLEN)
NAN_BOXED(2104919511,32,FLEN)
NAN_BOXED(25488310,32,FLEN)
NAN_BOXED(562167807,32,FLEN)
NAN_BOXED(2104919511,32,FLEN)
NAN_BOXED(25488310,32,FLEN)
NAN_BOXED(562298879,32,FLEN)
NAN_BOXED(2104919511,32,FLEN)
NAN_BOXED(25488310,32,FLEN)
NAN_BOXED(562561023,32,FLEN)
NAN_BOXED(2104919511,32,FLEN)
NAN_BOXED(25488310,32,FLEN)
NAN_BOXED(563085311,32,FLEN)
NAN_BOXED(2104919511,32,FLEN)
NAN_BOXED(25488310,32,FLEN)
NAN_BOXED(564133887,32,FLEN)
NAN_BOXED(2104919511,32,FLEN)
NAN_BOXED(25488310,32,FLEN)
NAN_BOXED(566231039,32,FLEN)
NAN_BOXED(2104919511,32,FLEN)
NAN_BOXED(25488310,32,FLEN)
NAN_BOXED(566231040,32,FLEN)
NAN_BOXED(2104919511,32,FLEN)
NAN_BOXED(25488310,32,FLEN)
NAN_BOXED(568328192,32,FLEN)
NAN_BOXED(2104919511,32,FLEN)
NAN_BOXED(25488310,32,FLEN)
NAN_BOXED(569376768,32,FLEN)
NAN_BOXED(2104919511,32,FLEN)
NAN_BOXED(25488310,32,FLEN)
NAN_BOXED(569901056,32,FLEN)
NAN_BOXED(2104919511,32,FLEN)
NAN_BOXED(25488310,32,FLEN)
NAN_BOXED(570163200,32,FLEN)
NAN_BOXED(2104919511,32,FLEN)
NAN_BOXED(25488310,32,FLEN)
NAN_BOXED(570294272,32,FLEN)
NAN_BOXED(2104919511,32,FLEN)
NAN_BOXED(25488310,32,FLEN)
NAN_BOXED(570359808,32,FLEN)
NAN_BOXED(2104919511,32,FLEN)
NAN_BOXED(25488310,32,FLEN)
NAN_BOXED(570392576,32,FLEN)
NAN_BOXED(2104919511,32,FLEN)
NAN_BOXED(25488310,32,FLEN)
NAN_BOXED(570408960,32,FLEN)
NAN_BOXED(2104919511,32,FLEN)
NAN_BOXED(25488310,32,FLEN)
NAN_BOXED(570417152,32,FLEN)
NAN_BOXED(2104919511,32,FLEN)
NAN_BOXED(25488310,32,FLEN)
NAN_BOXED(570421248,32,FLEN)
NAN_BOXED(2104919511,32,FLEN)
NAN_BOXED(25488310,32,FLEN)
NAN_BOXED(570423296,32,FLEN)
NAN_BOXED(2104919511,32,FLEN)
NAN_BOXED(25488310,32,FLEN)
NAN_BOXED(570424320,32,FLEN)
NAN_BOXED(2104919511,32,FLEN)
NAN_BOXED(25488310,32,FLEN)
NAN_BOXED(570424832,32,FLEN)
NAN_BOXED(2104919511,32,FLEN)
NAN_BOXED(25488310,32,FLEN)
NAN_BOXED(570425088,32,FLEN)
NAN_BOXED(2104919511,32,FLEN)
NAN_BOXED(25488310,32,FLEN)
NAN_BOXED(570425216,32,FLEN)
NAN_BOXED(2104919511,32,FLEN)
NAN_BOXED(25488310,32,FLEN)
NAN_BOXED(570425280,32,FLEN)
NAN_BOXED(2104919511,32,FLEN)
NAN_BOXED(25488310,32,FLEN)
NAN_BOXED(570425312,32,FLEN)
NAN_BOXED(2104919511,32,FLEN)
NAN_BOXED(25488310,32,FLEN)
NAN_BOXED(570425328,32,FLEN)
NAN_BOXED(2104919511,32,FLEN)
NAN_BOXED(25488310,32,FLEN)
NAN_BOXED(570425336,32,FLEN)
NAN_BOXED(2104919511,32,FLEN)
NAN_BOXED(25488310,32,FLEN)
NAN_BOXED(570425340,32,FLEN)
NAN_BOXED(2104919511,32,FLEN)
NAN_BOXED(25488310,32,FLEN)
NAN_BOXED(570425342,32,FLEN)
NAN_BOXED(2104919511,32,FLEN)
NAN_BOXED(25488310,32,FLEN)
NAN_BOXED(570425343,32,FLEN)
NAN_BOXED(2104919511,32,FLEN)
NAN_BOXED(25488310,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2104919511,32,FLEN)
NAN_BOXED(25488310,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2104919511,32,FLEN)
NAN_BOXED(25488310,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2104919511,32,FLEN)
NAN_BOXED(25488310,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2104919511,32,FLEN)
NAN_BOXED(25488310,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2104919511,32,FLEN)
NAN_BOXED(25488310,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2104919511,32,FLEN)
NAN_BOXED(25488310,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2104919511,32,FLEN)
NAN_BOXED(25488310,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2104919511,32,FLEN)
NAN_BOXED(25488310,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2104919511,32,FLEN)
NAN_BOXED(25488310,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2104919511,32,FLEN)
NAN_BOXED(25488310,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2104919511,32,FLEN)
NAN_BOXED(25488310,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2104919511,32,FLEN)
NAN_BOXED(25488310,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2104919511,32,FLEN)
NAN_BOXED(25488310,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2104919511,32,FLEN)
NAN_BOXED(25488310,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2104919511,32,FLEN)
NAN_BOXED(25488310,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2104959273,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2104959273,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483651,32,FLEN)
NAN_BOXED(2104959273,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483655,32,FLEN)
NAN_BOXED(2104959273,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149161369,32,FLEN)
NAN_BOXED(2104959273,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149880393,32,FLEN)
NAN_BOXED(2104959273,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2150839091,32,FLEN)
NAN_BOXED(2104959273,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151078765,32,FLEN)
NAN_BOXED(2104959273,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151398331,32,FLEN)
NAN_BOXED(2104959273,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151957572,32,FLEN)
NAN_BOXED(2104959273,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2152516812,32,FLEN)
NAN_BOXED(2104959273,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2153475510,32,FLEN)
NAN_BOXED(2104959273,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154194534,32,FLEN)
NAN_BOXED(2104959273,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154673883,32,FLEN)
NAN_BOXED(2104959273,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872248,32,FLEN)
NAN_BOXED(2104959273,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872252,32,FLEN)
NAN_BOXED(2104959273,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2104959273,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264924160,32,FLEN)
NAN_BOXED(2104959273,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264924161,32,FLEN)
NAN_BOXED(2104959273,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264924163,32,FLEN)
NAN_BOXED(2104959273,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264924167,32,FLEN)
NAN_BOXED(2104959273,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264924175,32,FLEN)
NAN_BOXED(2104959273,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264924191,32,FLEN)
NAN_BOXED(2104959273,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264924223,32,FLEN)
NAN_BOXED(2104959273,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264924287,32,FLEN)
NAN_BOXED(2104959273,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264924415,32,FLEN)
NAN_BOXED(2104959273,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264924671,32,FLEN)
NAN_BOXED(2104959273,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264925183,32,FLEN)
NAN_BOXED(2104959273,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264926207,32,FLEN)
NAN_BOXED(2104959273,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264928255,32,FLEN)
NAN_BOXED(2104959273,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264932351,32,FLEN)
NAN_BOXED(2104959273,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264940543,32,FLEN)
NAN_BOXED(2104959273,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264956927,32,FLEN)
NAN_BOXED(2104959273,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264989695,32,FLEN)
NAN_BOXED(2104959273,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2265055231,32,FLEN)
NAN_BOXED(2104959273,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2265186303,32,FLEN)
NAN_BOXED(2104959273,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2265448447,32,FLEN)
NAN_BOXED(2104959273,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2265972735,32,FLEN)
NAN_BOXED(2104959273,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2267021311,32,FLEN)
NAN_BOXED(2104959273,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2269118463,32,FLEN)
NAN_BOXED(2104959273,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2269118464,32,FLEN)
NAN_BOXED(2104959273,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2271215616,32,FLEN)
NAN_BOXED(2104959273,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2272264192,32,FLEN)
NAN_BOXED(2104959273,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2272788480,32,FLEN)
NAN_BOXED(2104959273,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2273050624,32,FLEN)
NAN_BOXED(2104959273,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2273181696,32,FLEN)
NAN_BOXED(2104959273,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2273247232,32,FLEN)
NAN_BOXED(2104959273,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2273280000,32,FLEN)
NAN_BOXED(2104959273,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2273296384,32,FLEN)
NAN_BOXED(2104959273,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2273304576,32,FLEN)
NAN_BOXED(2104959273,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2273308672,32,FLEN)
NAN_BOXED(2104959273,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2273310720,32,FLEN)
NAN_BOXED(2104959273,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2273311744,32,FLEN)
NAN_BOXED(2104959273,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2273312256,32,FLEN)
NAN_BOXED(2104959273,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2273312512,32,FLEN)
NAN_BOXED(2104959273,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2273312640,32,FLEN)
NAN_BOXED(2104959273,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2273312704,32,FLEN)
NAN_BOXED(2104959273,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2273312736,32,FLEN)
NAN_BOXED(2104959273,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2273312752,32,FLEN)
NAN_BOXED(2104959273,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2273312760,32,FLEN)
NAN_BOXED(2104959273,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2273312764,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
