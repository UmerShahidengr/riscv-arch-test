
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:17:59 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_33152:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x25c228 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f25c228; op2val:0x0;
op3val:0x1fff800; valaddr_reg:x3; val_offset:99456*0 + 3*259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99456*0 + 3*259*FLEN/8, x4, x1, x2)

inst_33153:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x25c228 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f25c228; op2val:0x0;
op3val:0x1fffc00; valaddr_reg:x3; val_offset:99459*0 + 3*259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99459*0 + 3*259*FLEN/8, x4, x1, x2)

inst_33154:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x25c228 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f25c228; op2val:0x0;
op3val:0x1fffe00; valaddr_reg:x3; val_offset:99462*0 + 3*259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99462*0 + 3*259*FLEN/8, x4, x1, x2)

inst_33155:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x25c228 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f25c228; op2val:0x0;
op3val:0x1ffff00; valaddr_reg:x3; val_offset:99465*0 + 3*259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99465*0 + 3*259*FLEN/8, x4, x1, x2)

inst_33156:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x25c228 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f25c228; op2val:0x0;
op3val:0x1ffff80; valaddr_reg:x3; val_offset:99468*0 + 3*259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99468*0 + 3*259*FLEN/8, x4, x1, x2)

inst_33157:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x25c228 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f25c228; op2val:0x0;
op3val:0x1ffffc0; valaddr_reg:x3; val_offset:99471*0 + 3*259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99471*0 + 3*259*FLEN/8, x4, x1, x2)

inst_33158:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x25c228 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f25c228; op2val:0x0;
op3val:0x1ffffe0; valaddr_reg:x3; val_offset:99474*0 + 3*259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99474*0 + 3*259*FLEN/8, x4, x1, x2)

inst_33159:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x25c228 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f25c228; op2val:0x0;
op3val:0x1fffff0; valaddr_reg:x3; val_offset:99477*0 + 3*259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99477*0 + 3*259*FLEN/8, x4, x1, x2)

inst_33160:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x25c228 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f25c228; op2val:0x0;
op3val:0x1fffff8; valaddr_reg:x3; val_offset:99480*0 + 3*259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99480*0 + 3*259*FLEN/8, x4, x1, x2)

inst_33161:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x25c228 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f25c228; op2val:0x0;
op3val:0x1fffffc; valaddr_reg:x3; val_offset:99483*0 + 3*259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99483*0 + 3*259*FLEN/8, x4, x1, x2)

inst_33162:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x25c228 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f25c228; op2val:0x0;
op3val:0x1fffffe; valaddr_reg:x3; val_offset:99486*0 + 3*259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99486*0 + 3*259*FLEN/8, x4, x1, x2)

inst_33163:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x25c228 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f25c228; op2val:0x0;
op3val:0x1ffffff; valaddr_reg:x3; val_offset:99489*0 + 3*259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99489*0 + 3*259*FLEN/8, x4, x1, x2)

inst_33164:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x25e629 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x458486 and fs3 == 0 and fe3 == 0xc0 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f25e629; op2val:0x3fc58486;
op3val:0x60000000; valaddr_reg:x3; val_offset:99492*0 + 3*259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99492*0 + 3*259*FLEN/8, x4, x1, x2)

inst_33165:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x25e629 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x458486 and fs3 == 0 and fe3 == 0xc0 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f25e629; op2val:0x3fc58486;
op3val:0x60000001; valaddr_reg:x3; val_offset:99495*0 + 3*259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99495*0 + 3*259*FLEN/8, x4, x1, x2)

inst_33166:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x25e629 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x458486 and fs3 == 0 and fe3 == 0xc0 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f25e629; op2val:0x3fc58486;
op3val:0x60000003; valaddr_reg:x3; val_offset:99498*0 + 3*259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99498*0 + 3*259*FLEN/8, x4, x1, x2)

inst_33167:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x25e629 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x458486 and fs3 == 0 and fe3 == 0xc0 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f25e629; op2val:0x3fc58486;
op3val:0x60000007; valaddr_reg:x3; val_offset:99501*0 + 3*259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99501*0 + 3*259*FLEN/8, x4, x1, x2)

inst_33168:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x25e629 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x458486 and fs3 == 0 and fe3 == 0xc0 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f25e629; op2val:0x3fc58486;
op3val:0x6000000f; valaddr_reg:x3; val_offset:99504*0 + 3*259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99504*0 + 3*259*FLEN/8, x4, x1, x2)

inst_33169:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x25e629 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x458486 and fs3 == 0 and fe3 == 0xc0 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f25e629; op2val:0x3fc58486;
op3val:0x6000001f; valaddr_reg:x3; val_offset:99507*0 + 3*259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99507*0 + 3*259*FLEN/8, x4, x1, x2)

inst_33170:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x25e629 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x458486 and fs3 == 0 and fe3 == 0xc0 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f25e629; op2val:0x3fc58486;
op3val:0x6000003f; valaddr_reg:x3; val_offset:99510*0 + 3*259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99510*0 + 3*259*FLEN/8, x4, x1, x2)

inst_33171:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x25e629 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x458486 and fs3 == 0 and fe3 == 0xc0 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f25e629; op2val:0x3fc58486;
op3val:0x6000007f; valaddr_reg:x3; val_offset:99513*0 + 3*259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99513*0 + 3*259*FLEN/8, x4, x1, x2)

inst_33172:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x25e629 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x458486 and fs3 == 0 and fe3 == 0xc0 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f25e629; op2val:0x3fc58486;
op3val:0x600000ff; valaddr_reg:x3; val_offset:99516*0 + 3*259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99516*0 + 3*259*FLEN/8, x4, x1, x2)

inst_33173:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x25e629 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x458486 and fs3 == 0 and fe3 == 0xc0 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f25e629; op2val:0x3fc58486;
op3val:0x600001ff; valaddr_reg:x3; val_offset:99519*0 + 3*259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99519*0 + 3*259*FLEN/8, x4, x1, x2)

inst_33174:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x25e629 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x458486 and fs3 == 0 and fe3 == 0xc0 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f25e629; op2val:0x3fc58486;
op3val:0x600003ff; valaddr_reg:x3; val_offset:99522*0 + 3*259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99522*0 + 3*259*FLEN/8, x4, x1, x2)

inst_33175:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x25e629 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x458486 and fs3 == 0 and fe3 == 0xc0 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f25e629; op2val:0x3fc58486;
op3val:0x600007ff; valaddr_reg:x3; val_offset:99525*0 + 3*259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99525*0 + 3*259*FLEN/8, x4, x1, x2)

inst_33176:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x25e629 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x458486 and fs3 == 0 and fe3 == 0xc0 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f25e629; op2val:0x3fc58486;
op3val:0x60000fff; valaddr_reg:x3; val_offset:99528*0 + 3*259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99528*0 + 3*259*FLEN/8, x4, x1, x2)

inst_33177:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x25e629 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x458486 and fs3 == 0 and fe3 == 0xc0 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f25e629; op2val:0x3fc58486;
op3val:0x60001fff; valaddr_reg:x3; val_offset:99531*0 + 3*259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99531*0 + 3*259*FLEN/8, x4, x1, x2)

inst_33178:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x25e629 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x458486 and fs3 == 0 and fe3 == 0xc0 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f25e629; op2val:0x3fc58486;
op3val:0x60003fff; valaddr_reg:x3; val_offset:99534*0 + 3*259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99534*0 + 3*259*FLEN/8, x4, x1, x2)

inst_33179:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x25e629 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x458486 and fs3 == 0 and fe3 == 0xc0 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f25e629; op2val:0x3fc58486;
op3val:0x60007fff; valaddr_reg:x3; val_offset:99537*0 + 3*259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99537*0 + 3*259*FLEN/8, x4, x1, x2)

inst_33180:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x25e629 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x458486 and fs3 == 0 and fe3 == 0xc0 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f25e629; op2val:0x3fc58486;
op3val:0x6000ffff; valaddr_reg:x3; val_offset:99540*0 + 3*259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99540*0 + 3*259*FLEN/8, x4, x1, x2)

inst_33181:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x25e629 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x458486 and fs3 == 0 and fe3 == 0xc0 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f25e629; op2val:0x3fc58486;
op3val:0x6001ffff; valaddr_reg:x3; val_offset:99543*0 + 3*259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99543*0 + 3*259*FLEN/8, x4, x1, x2)

inst_33182:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x25e629 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x458486 and fs3 == 0 and fe3 == 0xc0 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f25e629; op2val:0x3fc58486;
op3val:0x6003ffff; valaddr_reg:x3; val_offset:99546*0 + 3*259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99546*0 + 3*259*FLEN/8, x4, x1, x2)

inst_33183:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x25e629 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x458486 and fs3 == 0 and fe3 == 0xc0 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f25e629; op2val:0x3fc58486;
op3val:0x6007ffff; valaddr_reg:x3; val_offset:99549*0 + 3*259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99549*0 + 3*259*FLEN/8, x4, x1, x2)

inst_33184:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x25e629 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x458486 and fs3 == 0 and fe3 == 0xc0 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f25e629; op2val:0x3fc58486;
op3val:0x600fffff; valaddr_reg:x3; val_offset:99552*0 + 3*259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99552*0 + 3*259*FLEN/8, x4, x1, x2)

inst_33185:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x25e629 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x458486 and fs3 == 0 and fe3 == 0xc0 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f25e629; op2val:0x3fc58486;
op3val:0x601fffff; valaddr_reg:x3; val_offset:99555*0 + 3*259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99555*0 + 3*259*FLEN/8, x4, x1, x2)

inst_33186:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x25e629 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x458486 and fs3 == 0 and fe3 == 0xc0 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f25e629; op2val:0x3fc58486;
op3val:0x603fffff; valaddr_reg:x3; val_offset:99558*0 + 3*259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99558*0 + 3*259*FLEN/8, x4, x1, x2)

inst_33187:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x25e629 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x458486 and fs3 == 0 and fe3 == 0xc0 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f25e629; op2val:0x3fc58486;
op3val:0x60400000; valaddr_reg:x3; val_offset:99561*0 + 3*259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99561*0 + 3*259*FLEN/8, x4, x1, x2)

inst_33188:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x25e629 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x458486 and fs3 == 0 and fe3 == 0xc0 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f25e629; op2val:0x3fc58486;
op3val:0x60600000; valaddr_reg:x3; val_offset:99564*0 + 3*259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99564*0 + 3*259*FLEN/8, x4, x1, x2)

inst_33189:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x25e629 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x458486 and fs3 == 0 and fe3 == 0xc0 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f25e629; op2val:0x3fc58486;
op3val:0x60700000; valaddr_reg:x3; val_offset:99567*0 + 3*259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99567*0 + 3*259*FLEN/8, x4, x1, x2)

inst_33190:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x25e629 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x458486 and fs3 == 0 and fe3 == 0xc0 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f25e629; op2val:0x3fc58486;
op3val:0x60780000; valaddr_reg:x3; val_offset:99570*0 + 3*259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99570*0 + 3*259*FLEN/8, x4, x1, x2)

inst_33191:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x25e629 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x458486 and fs3 == 0 and fe3 == 0xc0 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f25e629; op2val:0x3fc58486;
op3val:0x607c0000; valaddr_reg:x3; val_offset:99573*0 + 3*259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99573*0 + 3*259*FLEN/8, x4, x1, x2)

inst_33192:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x25e629 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x458486 and fs3 == 0 and fe3 == 0xc0 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f25e629; op2val:0x3fc58486;
op3val:0x607e0000; valaddr_reg:x3; val_offset:99576*0 + 3*259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99576*0 + 3*259*FLEN/8, x4, x1, x2)

inst_33193:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x25e629 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x458486 and fs3 == 0 and fe3 == 0xc0 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f25e629; op2val:0x3fc58486;
op3val:0x607f0000; valaddr_reg:x3; val_offset:99579*0 + 3*259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99579*0 + 3*259*FLEN/8, x4, x1, x2)

inst_33194:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x25e629 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x458486 and fs3 == 0 and fe3 == 0xc0 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f25e629; op2val:0x3fc58486;
op3val:0x607f8000; valaddr_reg:x3; val_offset:99582*0 + 3*259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99582*0 + 3*259*FLEN/8, x4, x1, x2)

inst_33195:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x25e629 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x458486 and fs3 == 0 and fe3 == 0xc0 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f25e629; op2val:0x3fc58486;
op3val:0x607fc000; valaddr_reg:x3; val_offset:99585*0 + 3*259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99585*0 + 3*259*FLEN/8, x4, x1, x2)

inst_33196:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x25e629 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x458486 and fs3 == 0 and fe3 == 0xc0 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f25e629; op2val:0x3fc58486;
op3val:0x607fe000; valaddr_reg:x3; val_offset:99588*0 + 3*259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99588*0 + 3*259*FLEN/8, x4, x1, x2)

inst_33197:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x25e629 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x458486 and fs3 == 0 and fe3 == 0xc0 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f25e629; op2val:0x3fc58486;
op3val:0x607ff000; valaddr_reg:x3; val_offset:99591*0 + 3*259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99591*0 + 3*259*FLEN/8, x4, x1, x2)

inst_33198:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x25e629 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x458486 and fs3 == 0 and fe3 == 0xc0 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f25e629; op2val:0x3fc58486;
op3val:0x607ff800; valaddr_reg:x3; val_offset:99594*0 + 3*259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99594*0 + 3*259*FLEN/8, x4, x1, x2)

inst_33199:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x25e629 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x458486 and fs3 == 0 and fe3 == 0xc0 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f25e629; op2val:0x3fc58486;
op3val:0x607ffc00; valaddr_reg:x3; val_offset:99597*0 + 3*259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99597*0 + 3*259*FLEN/8, x4, x1, x2)

inst_33200:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x25e629 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x458486 and fs3 == 0 and fe3 == 0xc0 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f25e629; op2val:0x3fc58486;
op3val:0x607ffe00; valaddr_reg:x3; val_offset:99600*0 + 3*259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99600*0 + 3*259*FLEN/8, x4, x1, x2)

inst_33201:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x25e629 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x458486 and fs3 == 0 and fe3 == 0xc0 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f25e629; op2val:0x3fc58486;
op3val:0x607fff00; valaddr_reg:x3; val_offset:99603*0 + 3*259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99603*0 + 3*259*FLEN/8, x4, x1, x2)

inst_33202:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x25e629 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x458486 and fs3 == 0 and fe3 == 0xc0 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f25e629; op2val:0x3fc58486;
op3val:0x607fff80; valaddr_reg:x3; val_offset:99606*0 + 3*259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99606*0 + 3*259*FLEN/8, x4, x1, x2)

inst_33203:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x25e629 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x458486 and fs3 == 0 and fe3 == 0xc0 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f25e629; op2val:0x3fc58486;
op3val:0x607fffc0; valaddr_reg:x3; val_offset:99609*0 + 3*259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99609*0 + 3*259*FLEN/8, x4, x1, x2)

inst_33204:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x25e629 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x458486 and fs3 == 0 and fe3 == 0xc0 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f25e629; op2val:0x3fc58486;
op3val:0x607fffe0; valaddr_reg:x3; val_offset:99612*0 + 3*259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99612*0 + 3*259*FLEN/8, x4, x1, x2)

inst_33205:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x25e629 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x458486 and fs3 == 0 and fe3 == 0xc0 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f25e629; op2val:0x3fc58486;
op3val:0x607ffff0; valaddr_reg:x3; val_offset:99615*0 + 3*259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99615*0 + 3*259*FLEN/8, x4, x1, x2)

inst_33206:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x25e629 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x458486 and fs3 == 0 and fe3 == 0xc0 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f25e629; op2val:0x3fc58486;
op3val:0x607ffff8; valaddr_reg:x3; val_offset:99618*0 + 3*259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99618*0 + 3*259*FLEN/8, x4, x1, x2)

inst_33207:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x25e629 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x458486 and fs3 == 0 and fe3 == 0xc0 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f25e629; op2val:0x3fc58486;
op3val:0x607ffffc; valaddr_reg:x3; val_offset:99621*0 + 3*259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99621*0 + 3*259*FLEN/8, x4, x1, x2)

inst_33208:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x25e629 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x458486 and fs3 == 0 and fe3 == 0xc0 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f25e629; op2val:0x3fc58486;
op3val:0x607ffffe; valaddr_reg:x3; val_offset:99624*0 + 3*259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99624*0 + 3*259*FLEN/8, x4, x1, x2)

inst_33209:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x25e629 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x458486 and fs3 == 0 and fe3 == 0xc0 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f25e629; op2val:0x3fc58486;
op3val:0x607fffff; valaddr_reg:x3; val_offset:99627*0 + 3*259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99627*0 + 3*259*FLEN/8, x4, x1, x2)

inst_33210:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x25e629 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x458486 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f25e629; op2val:0x3fc58486;
op3val:0x7f000001; valaddr_reg:x3; val_offset:99630*0 + 3*259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99630*0 + 3*259*FLEN/8, x4, x1, x2)

inst_33211:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x25e629 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x458486 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f25e629; op2val:0x3fc58486;
op3val:0x7f000003; valaddr_reg:x3; val_offset:99633*0 + 3*259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99633*0 + 3*259*FLEN/8, x4, x1, x2)

inst_33212:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x25e629 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x458486 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f25e629; op2val:0x3fc58486;
op3val:0x7f000007; valaddr_reg:x3; val_offset:99636*0 + 3*259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99636*0 + 3*259*FLEN/8, x4, x1, x2)

inst_33213:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x25e629 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x458486 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f25e629; op2val:0x3fc58486;
op3val:0x7f199999; valaddr_reg:x3; val_offset:99639*0 + 3*259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99639*0 + 3*259*FLEN/8, x4, x1, x2)

inst_33214:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x25e629 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x458486 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f25e629; op2val:0x3fc58486;
op3val:0x7f249249; valaddr_reg:x3; val_offset:99642*0 + 3*259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99642*0 + 3*259*FLEN/8, x4, x1, x2)

inst_33215:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x25e629 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x458486 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f25e629; op2val:0x3fc58486;
op3val:0x7f333333; valaddr_reg:x3; val_offset:99645*0 + 3*259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99645*0 + 3*259*FLEN/8, x4, x1, x2)

inst_33216:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x25e629 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x458486 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f25e629; op2val:0x3fc58486;
op3val:0x7f36db6d; valaddr_reg:x3; val_offset:99648*0 + 3*259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99648*0 + 3*259*FLEN/8, x4, x1, x2)

inst_33217:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x25e629 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x458486 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f25e629; op2val:0x3fc58486;
op3val:0x7f3bbbbb; valaddr_reg:x3; val_offset:99651*0 + 3*259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99651*0 + 3*259*FLEN/8, x4, x1, x2)

inst_33218:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x25e629 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x458486 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f25e629; op2val:0x3fc58486;
op3val:0x7f444444; valaddr_reg:x3; val_offset:99654*0 + 3*259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99654*0 + 3*259*FLEN/8, x4, x1, x2)

inst_33219:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x25e629 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x458486 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f25e629; op2val:0x3fc58486;
op3val:0x7f4ccccc; valaddr_reg:x3; val_offset:99657*0 + 3*259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99657*0 + 3*259*FLEN/8, x4, x1, x2)

inst_33220:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x25e629 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x458486 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f25e629; op2val:0x3fc58486;
op3val:0x7f5b6db6; valaddr_reg:x3; val_offset:99660*0 + 3*259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99660*0 + 3*259*FLEN/8, x4, x1, x2)

inst_33221:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x25e629 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x458486 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f25e629; op2val:0x3fc58486;
op3val:0x7f666666; valaddr_reg:x3; val_offset:99663*0 + 3*259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99663*0 + 3*259*FLEN/8, x4, x1, x2)

inst_33222:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x25e629 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x458486 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f25e629; op2val:0x3fc58486;
op3val:0x7f6db6db; valaddr_reg:x3; val_offset:99666*0 + 3*259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99666*0 + 3*259*FLEN/8, x4, x1, x2)

inst_33223:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x25e629 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x458486 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f25e629; op2val:0x3fc58486;
op3val:0x7f7ffff8; valaddr_reg:x3; val_offset:99669*0 + 3*259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99669*0 + 3*259*FLEN/8, x4, x1, x2)

inst_33224:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x25e629 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x458486 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f25e629; op2val:0x3fc58486;
op3val:0x7f7ffffc; valaddr_reg:x3; val_offset:99672*0 + 3*259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99672*0 + 3*259*FLEN/8, x4, x1, x2)

inst_33225:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x25e629 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x458486 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f25e629; op2val:0x3fc58486;
op3val:0x7f7ffffe; valaddr_reg:x3; val_offset:99675*0 + 3*259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99675*0 + 3*259*FLEN/8, x4, x1, x2)

inst_33226:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x260981 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f260981; op2val:0x80000000;
op3val:0x80000001; valaddr_reg:x3; val_offset:99678*0 + 3*259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99678*0 + 3*259*FLEN/8, x4, x1, x2)

inst_33227:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x260981 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f260981; op2val:0x80000000;
op3val:0x80000003; valaddr_reg:x3; val_offset:99681*0 + 3*259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99681*0 + 3*259*FLEN/8, x4, x1, x2)

inst_33228:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x260981 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f260981; op2val:0x80000000;
op3val:0x80000007; valaddr_reg:x3; val_offset:99684*0 + 3*259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99684*0 + 3*259*FLEN/8, x4, x1, x2)

inst_33229:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x260981 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f260981; op2val:0x80000000;
op3val:0x80199999; valaddr_reg:x3; val_offset:99687*0 + 3*259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99687*0 + 3*259*FLEN/8, x4, x1, x2)

inst_33230:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x260981 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f260981; op2val:0x80000000;
op3val:0x80249249; valaddr_reg:x3; val_offset:99690*0 + 3*259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99690*0 + 3*259*FLEN/8, x4, x1, x2)

inst_33231:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x260981 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f260981; op2val:0x80000000;
op3val:0x80333333; valaddr_reg:x3; val_offset:99693*0 + 3*259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99693*0 + 3*259*FLEN/8, x4, x1, x2)

inst_33232:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x260981 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f260981; op2val:0x80000000;
op3val:0x8036db6d; valaddr_reg:x3; val_offset:99696*0 + 3*259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99696*0 + 3*259*FLEN/8, x4, x1, x2)

inst_33233:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x260981 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f260981; op2val:0x80000000;
op3val:0x803bbbbb; valaddr_reg:x3; val_offset:99699*0 + 3*259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99699*0 + 3*259*FLEN/8, x4, x1, x2)

inst_33234:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x260981 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f260981; op2val:0x80000000;
op3val:0x80444444; valaddr_reg:x3; val_offset:99702*0 + 3*259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99702*0 + 3*259*FLEN/8, x4, x1, x2)

inst_33235:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x260981 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f260981; op2val:0x80000000;
op3val:0x804ccccc; valaddr_reg:x3; val_offset:99705*0 + 3*259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99705*0 + 3*259*FLEN/8, x4, x1, x2)

inst_33236:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x260981 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f260981; op2val:0x80000000;
op3val:0x805b6db6; valaddr_reg:x3; val_offset:99708*0 + 3*259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99708*0 + 3*259*FLEN/8, x4, x1, x2)

inst_33237:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x260981 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f260981; op2val:0x80000000;
op3val:0x80666666; valaddr_reg:x3; val_offset:99711*0 + 3*259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99711*0 + 3*259*FLEN/8, x4, x1, x2)

inst_33238:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x260981 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f260981; op2val:0x80000000;
op3val:0x806db6db; valaddr_reg:x3; val_offset:99714*0 + 3*259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99714*0 + 3*259*FLEN/8, x4, x1, x2)

inst_33239:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x260981 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f260981; op2val:0x80000000;
op3val:0x807ffff8; valaddr_reg:x3; val_offset:99717*0 + 3*259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99717*0 + 3*259*FLEN/8, x4, x1, x2)

inst_33240:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x260981 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f260981; op2val:0x80000000;
op3val:0x807ffffc; valaddr_reg:x3; val_offset:99720*0 + 3*259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99720*0 + 3*259*FLEN/8, x4, x1, x2)

inst_33241:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x260981 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f260981; op2val:0x80000000;
op3val:0x807ffffe; valaddr_reg:x3; val_offset:99723*0 + 3*259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99723*0 + 3*259*FLEN/8, x4, x1, x2)

inst_33242:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x260981 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f260981; op2val:0x80000000;
op3val:0x88800000; valaddr_reg:x3; val_offset:99726*0 + 3*259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99726*0 + 3*259*FLEN/8, x4, x1, x2)

inst_33243:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x260981 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f260981; op2val:0x80000000;
op3val:0x88800001; valaddr_reg:x3; val_offset:99729*0 + 3*259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99729*0 + 3*259*FLEN/8, x4, x1, x2)

inst_33244:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x260981 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f260981; op2val:0x80000000;
op3val:0x88800003; valaddr_reg:x3; val_offset:99732*0 + 3*259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99732*0 + 3*259*FLEN/8, x4, x1, x2)

inst_33245:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x260981 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f260981; op2val:0x80000000;
op3val:0x88800007; valaddr_reg:x3; val_offset:99735*0 + 3*259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99735*0 + 3*259*FLEN/8, x4, x1, x2)

inst_33246:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x260981 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f260981; op2val:0x80000000;
op3val:0x8880000f; valaddr_reg:x3; val_offset:99738*0 + 3*259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99738*0 + 3*259*FLEN/8, x4, x1, x2)

inst_33247:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x260981 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f260981; op2val:0x80000000;
op3val:0x8880001f; valaddr_reg:x3; val_offset:99741*0 + 3*259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99741*0 + 3*259*FLEN/8, x4, x1, x2)

inst_33248:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x260981 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f260981; op2val:0x80000000;
op3val:0x8880003f; valaddr_reg:x3; val_offset:99744*0 + 3*259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99744*0 + 3*259*FLEN/8, x4, x1, x2)

inst_33249:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x260981 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f260981; op2val:0x80000000;
op3val:0x8880007f; valaddr_reg:x3; val_offset:99747*0 + 3*259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99747*0 + 3*259*FLEN/8, x4, x1, x2)

inst_33250:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x260981 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f260981; op2val:0x80000000;
op3val:0x888000ff; valaddr_reg:x3; val_offset:99750*0 + 3*259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99750*0 + 3*259*FLEN/8, x4, x1, x2)

inst_33251:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x260981 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f260981; op2val:0x80000000;
op3val:0x888001ff; valaddr_reg:x3; val_offset:99753*0 + 3*259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99753*0 + 3*259*FLEN/8, x4, x1, x2)

inst_33252:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x260981 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f260981; op2val:0x80000000;
op3val:0x888003ff; valaddr_reg:x3; val_offset:99756*0 + 3*259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99756*0 + 3*259*FLEN/8, x4, x1, x2)

inst_33253:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x260981 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f260981; op2val:0x80000000;
op3val:0x888007ff; valaddr_reg:x3; val_offset:99759*0 + 3*259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99759*0 + 3*259*FLEN/8, x4, x1, x2)

inst_33254:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x260981 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f260981; op2val:0x80000000;
op3val:0x88800fff; valaddr_reg:x3; val_offset:99762*0 + 3*259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99762*0 + 3*259*FLEN/8, x4, x1, x2)

inst_33255:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x260981 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f260981; op2val:0x80000000;
op3val:0x88801fff; valaddr_reg:x3; val_offset:99765*0 + 3*259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99765*0 + 3*259*FLEN/8, x4, x1, x2)

inst_33256:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x260981 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f260981; op2val:0x80000000;
op3val:0x88803fff; valaddr_reg:x3; val_offset:99768*0 + 3*259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99768*0 + 3*259*FLEN/8, x4, x1, x2)

inst_33257:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x260981 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f260981; op2val:0x80000000;
op3val:0x88807fff; valaddr_reg:x3; val_offset:99771*0 + 3*259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99771*0 + 3*259*FLEN/8, x4, x1, x2)

inst_33258:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x260981 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f260981; op2val:0x80000000;
op3val:0x8880ffff; valaddr_reg:x3; val_offset:99774*0 + 3*259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99774*0 + 3*259*FLEN/8, x4, x1, x2)

inst_33259:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x260981 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f260981; op2val:0x80000000;
op3val:0x8881ffff; valaddr_reg:x3; val_offset:99777*0 + 3*259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99777*0 + 3*259*FLEN/8, x4, x1, x2)

inst_33260:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x260981 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f260981; op2val:0x80000000;
op3val:0x8883ffff; valaddr_reg:x3; val_offset:99780*0 + 3*259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99780*0 + 3*259*FLEN/8, x4, x1, x2)

inst_33261:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x260981 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f260981; op2val:0x80000000;
op3val:0x8887ffff; valaddr_reg:x3; val_offset:99783*0 + 3*259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99783*0 + 3*259*FLEN/8, x4, x1, x2)

inst_33262:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x260981 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f260981; op2val:0x80000000;
op3val:0x888fffff; valaddr_reg:x3; val_offset:99786*0 + 3*259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99786*0 + 3*259*FLEN/8, x4, x1, x2)

inst_33263:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x260981 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f260981; op2val:0x80000000;
op3val:0x889fffff; valaddr_reg:x3; val_offset:99789*0 + 3*259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99789*0 + 3*259*FLEN/8, x4, x1, x2)

inst_33264:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x260981 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f260981; op2val:0x80000000;
op3val:0x88bfffff; valaddr_reg:x3; val_offset:99792*0 + 3*259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99792*0 + 3*259*FLEN/8, x4, x1, x2)

inst_33265:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x260981 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f260981; op2val:0x80000000;
op3val:0x88c00000; valaddr_reg:x3; val_offset:99795*0 + 3*259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99795*0 + 3*259*FLEN/8, x4, x1, x2)

inst_33266:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x260981 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f260981; op2val:0x80000000;
op3val:0x88e00000; valaddr_reg:x3; val_offset:99798*0 + 3*259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99798*0 + 3*259*FLEN/8, x4, x1, x2)

inst_33267:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x260981 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f260981; op2val:0x80000000;
op3val:0x88f00000; valaddr_reg:x3; val_offset:99801*0 + 3*259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99801*0 + 3*259*FLEN/8, x4, x1, x2)

inst_33268:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x260981 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f260981; op2val:0x80000000;
op3val:0x88f80000; valaddr_reg:x3; val_offset:99804*0 + 3*259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99804*0 + 3*259*FLEN/8, x4, x1, x2)

inst_33269:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x260981 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f260981; op2val:0x80000000;
op3val:0x88fc0000; valaddr_reg:x3; val_offset:99807*0 + 3*259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99807*0 + 3*259*FLEN/8, x4, x1, x2)

inst_33270:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x260981 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f260981; op2val:0x80000000;
op3val:0x88fe0000; valaddr_reg:x3; val_offset:99810*0 + 3*259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99810*0 + 3*259*FLEN/8, x4, x1, x2)

inst_33271:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x260981 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f260981; op2val:0x80000000;
op3val:0x88ff0000; valaddr_reg:x3; val_offset:99813*0 + 3*259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99813*0 + 3*259*FLEN/8, x4, x1, x2)

inst_33272:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x260981 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f260981; op2val:0x80000000;
op3val:0x88ff8000; valaddr_reg:x3; val_offset:99816*0 + 3*259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99816*0 + 3*259*FLEN/8, x4, x1, x2)

inst_33273:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x260981 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f260981; op2val:0x80000000;
op3val:0x88ffc000; valaddr_reg:x3; val_offset:99819*0 + 3*259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99819*0 + 3*259*FLEN/8, x4, x1, x2)

inst_33274:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x260981 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f260981; op2val:0x80000000;
op3val:0x88ffe000; valaddr_reg:x3; val_offset:99822*0 + 3*259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99822*0 + 3*259*FLEN/8, x4, x1, x2)

inst_33275:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x260981 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f260981; op2val:0x80000000;
op3val:0x88fff000; valaddr_reg:x3; val_offset:99825*0 + 3*259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99825*0 + 3*259*FLEN/8, x4, x1, x2)

inst_33276:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x260981 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f260981; op2val:0x80000000;
op3val:0x88fff800; valaddr_reg:x3; val_offset:99828*0 + 3*259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99828*0 + 3*259*FLEN/8, x4, x1, x2)

inst_33277:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x260981 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f260981; op2val:0x80000000;
op3val:0x88fffc00; valaddr_reg:x3; val_offset:99831*0 + 3*259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99831*0 + 3*259*FLEN/8, x4, x1, x2)

inst_33278:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x260981 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f260981; op2val:0x80000000;
op3val:0x88fffe00; valaddr_reg:x3; val_offset:99834*0 + 3*259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99834*0 + 3*259*FLEN/8, x4, x1, x2)

inst_33279:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x260981 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f260981; op2val:0x80000000;
op3val:0x88ffff00; valaddr_reg:x3; val_offset:99837*0 + 3*259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99837*0 + 3*259*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2133180968,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(33552384,32,FLEN)
NAN_BOXED(2133180968,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(33553408,32,FLEN)
NAN_BOXED(2133180968,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(33553920,32,FLEN)
NAN_BOXED(2133180968,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(33554176,32,FLEN)
NAN_BOXED(2133180968,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(33554304,32,FLEN)
NAN_BOXED(2133180968,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(33554368,32,FLEN)
NAN_BOXED(2133180968,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(33554400,32,FLEN)
NAN_BOXED(2133180968,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(33554416,32,FLEN)
NAN_BOXED(2133180968,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(33554424,32,FLEN)
NAN_BOXED(2133180968,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(33554428,32,FLEN)
NAN_BOXED(2133180968,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(33554430,32,FLEN)
NAN_BOXED(2133180968,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(33554431,32,FLEN)
NAN_BOXED(2133190185,32,FLEN)
NAN_BOXED(1069909126,32,FLEN)
NAN_BOXED(1610612736,32,FLEN)
NAN_BOXED(2133190185,32,FLEN)
NAN_BOXED(1069909126,32,FLEN)
NAN_BOXED(1610612737,32,FLEN)
NAN_BOXED(2133190185,32,FLEN)
NAN_BOXED(1069909126,32,FLEN)
NAN_BOXED(1610612739,32,FLEN)
NAN_BOXED(2133190185,32,FLEN)
NAN_BOXED(1069909126,32,FLEN)
NAN_BOXED(1610612743,32,FLEN)
NAN_BOXED(2133190185,32,FLEN)
NAN_BOXED(1069909126,32,FLEN)
NAN_BOXED(1610612751,32,FLEN)
NAN_BOXED(2133190185,32,FLEN)
NAN_BOXED(1069909126,32,FLEN)
NAN_BOXED(1610612767,32,FLEN)
NAN_BOXED(2133190185,32,FLEN)
NAN_BOXED(1069909126,32,FLEN)
NAN_BOXED(1610612799,32,FLEN)
NAN_BOXED(2133190185,32,FLEN)
NAN_BOXED(1069909126,32,FLEN)
NAN_BOXED(1610612863,32,FLEN)
NAN_BOXED(2133190185,32,FLEN)
NAN_BOXED(1069909126,32,FLEN)
NAN_BOXED(1610612991,32,FLEN)
NAN_BOXED(2133190185,32,FLEN)
NAN_BOXED(1069909126,32,FLEN)
NAN_BOXED(1610613247,32,FLEN)
NAN_BOXED(2133190185,32,FLEN)
NAN_BOXED(1069909126,32,FLEN)
NAN_BOXED(1610613759,32,FLEN)
NAN_BOXED(2133190185,32,FLEN)
NAN_BOXED(1069909126,32,FLEN)
NAN_BOXED(1610614783,32,FLEN)
NAN_BOXED(2133190185,32,FLEN)
NAN_BOXED(1069909126,32,FLEN)
NAN_BOXED(1610616831,32,FLEN)
NAN_BOXED(2133190185,32,FLEN)
NAN_BOXED(1069909126,32,FLEN)
NAN_BOXED(1610620927,32,FLEN)
NAN_BOXED(2133190185,32,FLEN)
NAN_BOXED(1069909126,32,FLEN)
NAN_BOXED(1610629119,32,FLEN)
NAN_BOXED(2133190185,32,FLEN)
NAN_BOXED(1069909126,32,FLEN)
NAN_BOXED(1610645503,32,FLEN)
NAN_BOXED(2133190185,32,FLEN)
NAN_BOXED(1069909126,32,FLEN)
NAN_BOXED(1610678271,32,FLEN)
NAN_BOXED(2133190185,32,FLEN)
NAN_BOXED(1069909126,32,FLEN)
NAN_BOXED(1610743807,32,FLEN)
NAN_BOXED(2133190185,32,FLEN)
NAN_BOXED(1069909126,32,FLEN)
NAN_BOXED(1610874879,32,FLEN)
NAN_BOXED(2133190185,32,FLEN)
NAN_BOXED(1069909126,32,FLEN)
NAN_BOXED(1611137023,32,FLEN)
NAN_BOXED(2133190185,32,FLEN)
NAN_BOXED(1069909126,32,FLEN)
NAN_BOXED(1611661311,32,FLEN)
NAN_BOXED(2133190185,32,FLEN)
NAN_BOXED(1069909126,32,FLEN)
NAN_BOXED(1612709887,32,FLEN)
NAN_BOXED(2133190185,32,FLEN)
NAN_BOXED(1069909126,32,FLEN)
NAN_BOXED(1614807039,32,FLEN)
NAN_BOXED(2133190185,32,FLEN)
NAN_BOXED(1069909126,32,FLEN)
NAN_BOXED(1614807040,32,FLEN)
NAN_BOXED(2133190185,32,FLEN)
NAN_BOXED(1069909126,32,FLEN)
NAN_BOXED(1616904192,32,FLEN)
NAN_BOXED(2133190185,32,FLEN)
NAN_BOXED(1069909126,32,FLEN)
NAN_BOXED(1617952768,32,FLEN)
NAN_BOXED(2133190185,32,FLEN)
NAN_BOXED(1069909126,32,FLEN)
NAN_BOXED(1618477056,32,FLEN)
NAN_BOXED(2133190185,32,FLEN)
NAN_BOXED(1069909126,32,FLEN)
NAN_BOXED(1618739200,32,FLEN)
NAN_BOXED(2133190185,32,FLEN)
NAN_BOXED(1069909126,32,FLEN)
NAN_BOXED(1618870272,32,FLEN)
NAN_BOXED(2133190185,32,FLEN)
NAN_BOXED(1069909126,32,FLEN)
NAN_BOXED(1618935808,32,FLEN)
NAN_BOXED(2133190185,32,FLEN)
NAN_BOXED(1069909126,32,FLEN)
NAN_BOXED(1618968576,32,FLEN)
NAN_BOXED(2133190185,32,FLEN)
NAN_BOXED(1069909126,32,FLEN)
NAN_BOXED(1618984960,32,FLEN)
NAN_BOXED(2133190185,32,FLEN)
NAN_BOXED(1069909126,32,FLEN)
NAN_BOXED(1618993152,32,FLEN)
NAN_BOXED(2133190185,32,FLEN)
NAN_BOXED(1069909126,32,FLEN)
NAN_BOXED(1618997248,32,FLEN)
NAN_BOXED(2133190185,32,FLEN)
NAN_BOXED(1069909126,32,FLEN)
NAN_BOXED(1618999296,32,FLEN)
NAN_BOXED(2133190185,32,FLEN)
NAN_BOXED(1069909126,32,FLEN)
NAN_BOXED(1619000320,32,FLEN)
NAN_BOXED(2133190185,32,FLEN)
NAN_BOXED(1069909126,32,FLEN)
NAN_BOXED(1619000832,32,FLEN)
NAN_BOXED(2133190185,32,FLEN)
NAN_BOXED(1069909126,32,FLEN)
NAN_BOXED(1619001088,32,FLEN)
NAN_BOXED(2133190185,32,FLEN)
NAN_BOXED(1069909126,32,FLEN)
NAN_BOXED(1619001216,32,FLEN)
NAN_BOXED(2133190185,32,FLEN)
NAN_BOXED(1069909126,32,FLEN)
NAN_BOXED(1619001280,32,FLEN)
NAN_BOXED(2133190185,32,FLEN)
NAN_BOXED(1069909126,32,FLEN)
NAN_BOXED(1619001312,32,FLEN)
NAN_BOXED(2133190185,32,FLEN)
NAN_BOXED(1069909126,32,FLEN)
NAN_BOXED(1619001328,32,FLEN)
NAN_BOXED(2133190185,32,FLEN)
NAN_BOXED(1069909126,32,FLEN)
NAN_BOXED(1619001336,32,FLEN)
NAN_BOXED(2133190185,32,FLEN)
NAN_BOXED(1069909126,32,FLEN)
NAN_BOXED(1619001340,32,FLEN)
NAN_BOXED(2133190185,32,FLEN)
NAN_BOXED(1069909126,32,FLEN)
NAN_BOXED(1619001342,32,FLEN)
NAN_BOXED(2133190185,32,FLEN)
NAN_BOXED(1069909126,32,FLEN)
NAN_BOXED(1619001343,32,FLEN)
NAN_BOXED(2133190185,32,FLEN)
NAN_BOXED(1069909126,32,FLEN)
NAN_BOXED(2130706433,32,FLEN)
NAN_BOXED(2133190185,32,FLEN)
NAN_BOXED(1069909126,32,FLEN)
NAN_BOXED(2130706435,32,FLEN)
NAN_BOXED(2133190185,32,FLEN)
NAN_BOXED(1069909126,32,FLEN)
NAN_BOXED(2130706439,32,FLEN)
NAN_BOXED(2133190185,32,FLEN)
NAN_BOXED(1069909126,32,FLEN)
NAN_BOXED(2132384153,32,FLEN)
NAN_BOXED(2133190185,32,FLEN)
NAN_BOXED(1069909126,32,FLEN)
NAN_BOXED(2133103177,32,FLEN)
NAN_BOXED(2133190185,32,FLEN)
NAN_BOXED(1069909126,32,FLEN)
NAN_BOXED(2134061875,32,FLEN)
NAN_BOXED(2133190185,32,FLEN)
NAN_BOXED(1069909126,32,FLEN)
NAN_BOXED(2134301549,32,FLEN)
NAN_BOXED(2133190185,32,FLEN)
NAN_BOXED(1069909126,32,FLEN)
NAN_BOXED(2134621115,32,FLEN)
NAN_BOXED(2133190185,32,FLEN)
NAN_BOXED(1069909126,32,FLEN)
NAN_BOXED(2135180356,32,FLEN)
NAN_BOXED(2133190185,32,FLEN)
NAN_BOXED(1069909126,32,FLEN)
NAN_BOXED(2135739596,32,FLEN)
NAN_BOXED(2133190185,32,FLEN)
NAN_BOXED(1069909126,32,FLEN)
NAN_BOXED(2136698294,32,FLEN)
NAN_BOXED(2133190185,32,FLEN)
NAN_BOXED(1069909126,32,FLEN)
NAN_BOXED(2137417318,32,FLEN)
NAN_BOXED(2133190185,32,FLEN)
NAN_BOXED(1069909126,32,FLEN)
NAN_BOXED(2137896667,32,FLEN)
NAN_BOXED(2133190185,32,FLEN)
NAN_BOXED(1069909126,32,FLEN)
NAN_BOXED(2139095032,32,FLEN)
NAN_BOXED(2133190185,32,FLEN)
NAN_BOXED(1069909126,32,FLEN)
NAN_BOXED(2139095036,32,FLEN)
NAN_BOXED(2133190185,32,FLEN)
NAN_BOXED(1069909126,32,FLEN)
NAN_BOXED(2139095038,32,FLEN)
NAN_BOXED(2133199233,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2133199233,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483651,32,FLEN)
NAN_BOXED(2133199233,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483655,32,FLEN)
NAN_BOXED(2133199233,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149161369,32,FLEN)
NAN_BOXED(2133199233,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149880393,32,FLEN)
NAN_BOXED(2133199233,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2150839091,32,FLEN)
NAN_BOXED(2133199233,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151078765,32,FLEN)
NAN_BOXED(2133199233,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151398331,32,FLEN)
NAN_BOXED(2133199233,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151957572,32,FLEN)
NAN_BOXED(2133199233,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2152516812,32,FLEN)
NAN_BOXED(2133199233,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2153475510,32,FLEN)
NAN_BOXED(2133199233,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154194534,32,FLEN)
NAN_BOXED(2133199233,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154673883,32,FLEN)
NAN_BOXED(2133199233,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872248,32,FLEN)
NAN_BOXED(2133199233,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872252,32,FLEN)
NAN_BOXED(2133199233,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2133199233,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290089984,32,FLEN)
NAN_BOXED(2133199233,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290089985,32,FLEN)
NAN_BOXED(2133199233,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290089987,32,FLEN)
NAN_BOXED(2133199233,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290089991,32,FLEN)
NAN_BOXED(2133199233,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290089999,32,FLEN)
NAN_BOXED(2133199233,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290090015,32,FLEN)
NAN_BOXED(2133199233,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290090047,32,FLEN)
NAN_BOXED(2133199233,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290090111,32,FLEN)
NAN_BOXED(2133199233,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290090239,32,FLEN)
NAN_BOXED(2133199233,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290090495,32,FLEN)
NAN_BOXED(2133199233,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290091007,32,FLEN)
NAN_BOXED(2133199233,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290092031,32,FLEN)
NAN_BOXED(2133199233,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290094079,32,FLEN)
NAN_BOXED(2133199233,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290098175,32,FLEN)
NAN_BOXED(2133199233,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290106367,32,FLEN)
NAN_BOXED(2133199233,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290122751,32,FLEN)
NAN_BOXED(2133199233,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290155519,32,FLEN)
NAN_BOXED(2133199233,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290221055,32,FLEN)
NAN_BOXED(2133199233,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290352127,32,FLEN)
NAN_BOXED(2133199233,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290614271,32,FLEN)
NAN_BOXED(2133199233,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2291138559,32,FLEN)
NAN_BOXED(2133199233,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2292187135,32,FLEN)
NAN_BOXED(2133199233,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2294284287,32,FLEN)
NAN_BOXED(2133199233,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2294284288,32,FLEN)
NAN_BOXED(2133199233,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2296381440,32,FLEN)
NAN_BOXED(2133199233,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2297430016,32,FLEN)
NAN_BOXED(2133199233,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2297954304,32,FLEN)
NAN_BOXED(2133199233,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298216448,32,FLEN)
NAN_BOXED(2133199233,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298347520,32,FLEN)
NAN_BOXED(2133199233,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298413056,32,FLEN)
NAN_BOXED(2133199233,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298445824,32,FLEN)
NAN_BOXED(2133199233,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298462208,32,FLEN)
NAN_BOXED(2133199233,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298470400,32,FLEN)
NAN_BOXED(2133199233,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298474496,32,FLEN)
NAN_BOXED(2133199233,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298476544,32,FLEN)
NAN_BOXED(2133199233,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298477568,32,FLEN)
NAN_BOXED(2133199233,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298478080,32,FLEN)
NAN_BOXED(2133199233,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298478336,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
