
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:17:59 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_33408:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x26d3f0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x17 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f26d3f0; op2val:0x0;
op3val:0xbfffff8; valaddr_reg:x3; val_offset:100224*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100224*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33409:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x26d3f0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x17 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f26d3f0; op2val:0x0;
op3val:0xbfffffc; valaddr_reg:x3; val_offset:100227*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100227*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33410:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x26d3f0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x17 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f26d3f0; op2val:0x0;
op3val:0xbfffffe; valaddr_reg:x3; val_offset:100230*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100230*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33411:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x26d3f0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x17 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f26d3f0; op2val:0x0;
op3val:0xbffffff; valaddr_reg:x3; val_offset:100233*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100233*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33412:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x272166 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f272166; op2val:0x80000000;
op3val:0x80000001; valaddr_reg:x3; val_offset:100236*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100236*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33413:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x272166 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f272166; op2val:0x80000000;
op3val:0x80000003; valaddr_reg:x3; val_offset:100239*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100239*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33414:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x272166 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f272166; op2val:0x80000000;
op3val:0x80000007; valaddr_reg:x3; val_offset:100242*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100242*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33415:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x272166 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f272166; op2val:0x80000000;
op3val:0x80199999; valaddr_reg:x3; val_offset:100245*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100245*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33416:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x272166 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f272166; op2val:0x80000000;
op3val:0x80249249; valaddr_reg:x3; val_offset:100248*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100248*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33417:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x272166 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f272166; op2val:0x80000000;
op3val:0x80333333; valaddr_reg:x3; val_offset:100251*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100251*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33418:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x272166 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f272166; op2val:0x80000000;
op3val:0x8036db6d; valaddr_reg:x3; val_offset:100254*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100254*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33419:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x272166 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f272166; op2val:0x80000000;
op3val:0x803bbbbb; valaddr_reg:x3; val_offset:100257*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100257*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33420:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x272166 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f272166; op2val:0x80000000;
op3val:0x80444444; valaddr_reg:x3; val_offset:100260*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100260*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33421:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x272166 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f272166; op2val:0x80000000;
op3val:0x804ccccc; valaddr_reg:x3; val_offset:100263*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100263*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33422:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x272166 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f272166; op2val:0x80000000;
op3val:0x805b6db6; valaddr_reg:x3; val_offset:100266*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100266*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33423:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x272166 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f272166; op2val:0x80000000;
op3val:0x80666666; valaddr_reg:x3; val_offset:100269*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100269*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33424:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x272166 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f272166; op2val:0x80000000;
op3val:0x806db6db; valaddr_reg:x3; val_offset:100272*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100272*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33425:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x272166 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f272166; op2val:0x80000000;
op3val:0x807ffff8; valaddr_reg:x3; val_offset:100275*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100275*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33426:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x272166 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f272166; op2val:0x80000000;
op3val:0x807ffffc; valaddr_reg:x3; val_offset:100278*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100278*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33427:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x272166 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f272166; op2val:0x80000000;
op3val:0x807ffffe; valaddr_reg:x3; val_offset:100281*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100281*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33428:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x272166 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f272166; op2val:0x80000000;
op3val:0x83800000; valaddr_reg:x3; val_offset:100284*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100284*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33429:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x272166 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f272166; op2val:0x80000000;
op3val:0x83800001; valaddr_reg:x3; val_offset:100287*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100287*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33430:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x272166 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f272166; op2val:0x80000000;
op3val:0x83800003; valaddr_reg:x3; val_offset:100290*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100290*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33431:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x272166 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f272166; op2val:0x80000000;
op3val:0x83800007; valaddr_reg:x3; val_offset:100293*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100293*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33432:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x272166 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f272166; op2val:0x80000000;
op3val:0x8380000f; valaddr_reg:x3; val_offset:100296*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100296*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33433:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x272166 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f272166; op2val:0x80000000;
op3val:0x8380001f; valaddr_reg:x3; val_offset:100299*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100299*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33434:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x272166 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f272166; op2val:0x80000000;
op3val:0x8380003f; valaddr_reg:x3; val_offset:100302*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100302*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33435:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x272166 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f272166; op2val:0x80000000;
op3val:0x8380007f; valaddr_reg:x3; val_offset:100305*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100305*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33436:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x272166 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f272166; op2val:0x80000000;
op3val:0x838000ff; valaddr_reg:x3; val_offset:100308*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100308*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33437:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x272166 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f272166; op2val:0x80000000;
op3val:0x838001ff; valaddr_reg:x3; val_offset:100311*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100311*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33438:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x272166 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f272166; op2val:0x80000000;
op3val:0x838003ff; valaddr_reg:x3; val_offset:100314*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100314*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33439:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x272166 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f272166; op2val:0x80000000;
op3val:0x838007ff; valaddr_reg:x3; val_offset:100317*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100317*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33440:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x272166 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f272166; op2val:0x80000000;
op3val:0x83800fff; valaddr_reg:x3; val_offset:100320*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100320*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33441:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x272166 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f272166; op2val:0x80000000;
op3val:0x83801fff; valaddr_reg:x3; val_offset:100323*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100323*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33442:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x272166 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f272166; op2val:0x80000000;
op3val:0x83803fff; valaddr_reg:x3; val_offset:100326*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100326*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33443:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x272166 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f272166; op2val:0x80000000;
op3val:0x83807fff; valaddr_reg:x3; val_offset:100329*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100329*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33444:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x272166 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f272166; op2val:0x80000000;
op3val:0x8380ffff; valaddr_reg:x3; val_offset:100332*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100332*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33445:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x272166 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f272166; op2val:0x80000000;
op3val:0x8381ffff; valaddr_reg:x3; val_offset:100335*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100335*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33446:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x272166 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f272166; op2val:0x80000000;
op3val:0x8383ffff; valaddr_reg:x3; val_offset:100338*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100338*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33447:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x272166 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f272166; op2val:0x80000000;
op3val:0x8387ffff; valaddr_reg:x3; val_offset:100341*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100341*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33448:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x272166 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f272166; op2val:0x80000000;
op3val:0x838fffff; valaddr_reg:x3; val_offset:100344*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100344*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33449:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x272166 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f272166; op2val:0x80000000;
op3val:0x839fffff; valaddr_reg:x3; val_offset:100347*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100347*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33450:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x272166 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f272166; op2val:0x80000000;
op3val:0x83bfffff; valaddr_reg:x3; val_offset:100350*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100350*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33451:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x272166 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f272166; op2val:0x80000000;
op3val:0x83c00000; valaddr_reg:x3; val_offset:100353*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100353*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33452:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x272166 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f272166; op2val:0x80000000;
op3val:0x83e00000; valaddr_reg:x3; val_offset:100356*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100356*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33453:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x272166 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f272166; op2val:0x80000000;
op3val:0x83f00000; valaddr_reg:x3; val_offset:100359*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100359*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33454:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x272166 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f272166; op2val:0x80000000;
op3val:0x83f80000; valaddr_reg:x3; val_offset:100362*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100362*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33455:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x272166 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f272166; op2val:0x80000000;
op3val:0x83fc0000; valaddr_reg:x3; val_offset:100365*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100365*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33456:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x272166 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f272166; op2val:0x80000000;
op3val:0x83fe0000; valaddr_reg:x3; val_offset:100368*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100368*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33457:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x272166 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f272166; op2val:0x80000000;
op3val:0x83ff0000; valaddr_reg:x3; val_offset:100371*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100371*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33458:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x272166 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f272166; op2val:0x80000000;
op3val:0x83ff8000; valaddr_reg:x3; val_offset:100374*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100374*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33459:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x272166 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f272166; op2val:0x80000000;
op3val:0x83ffc000; valaddr_reg:x3; val_offset:100377*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100377*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33460:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x272166 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f272166; op2val:0x80000000;
op3val:0x83ffe000; valaddr_reg:x3; val_offset:100380*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100380*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33461:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x272166 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f272166; op2val:0x80000000;
op3val:0x83fff000; valaddr_reg:x3; val_offset:100383*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100383*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33462:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x272166 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f272166; op2val:0x80000000;
op3val:0x83fff800; valaddr_reg:x3; val_offset:100386*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100386*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33463:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x272166 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f272166; op2val:0x80000000;
op3val:0x83fffc00; valaddr_reg:x3; val_offset:100389*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100389*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33464:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x272166 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f272166; op2val:0x80000000;
op3val:0x83fffe00; valaddr_reg:x3; val_offset:100392*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100392*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33465:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x272166 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f272166; op2val:0x80000000;
op3val:0x83ffff00; valaddr_reg:x3; val_offset:100395*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100395*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33466:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x272166 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f272166; op2val:0x80000000;
op3val:0x83ffff80; valaddr_reg:x3; val_offset:100398*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100398*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33467:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x272166 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f272166; op2val:0x80000000;
op3val:0x83ffffc0; valaddr_reg:x3; val_offset:100401*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100401*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33468:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x272166 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f272166; op2val:0x80000000;
op3val:0x83ffffe0; valaddr_reg:x3; val_offset:100404*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100404*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33469:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x272166 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f272166; op2val:0x80000000;
op3val:0x83fffff0; valaddr_reg:x3; val_offset:100407*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100407*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33470:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x272166 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f272166; op2val:0x80000000;
op3val:0x83fffff8; valaddr_reg:x3; val_offset:100410*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100410*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33471:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x272166 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f272166; op2val:0x80000000;
op3val:0x83fffffc; valaddr_reg:x3; val_offset:100413*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100413*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33472:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x272166 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f272166; op2val:0x80000000;
op3val:0x83fffffe; valaddr_reg:x3; val_offset:100416*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100416*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33473:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x272166 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f272166; op2val:0x80000000;
op3val:0x83ffffff; valaddr_reg:x3; val_offset:100419*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100419*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33474:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x274f94 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x30f676 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f274f94; op2val:0x8030f676;
op3val:0xbf800001; valaddr_reg:x3; val_offset:100422*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100422*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33475:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x274f94 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x30f676 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f274f94; op2val:0x8030f676;
op3val:0xbf800003; valaddr_reg:x3; val_offset:100425*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100425*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33476:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x274f94 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x30f676 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f274f94; op2val:0x8030f676;
op3val:0xbf800007; valaddr_reg:x3; val_offset:100428*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100428*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33477:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x274f94 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x30f676 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f274f94; op2val:0x8030f676;
op3val:0xbf999999; valaddr_reg:x3; val_offset:100431*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100431*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33478:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x274f94 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x30f676 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f274f94; op2val:0x8030f676;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:100434*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100434*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33479:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x274f94 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x30f676 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f274f94; op2val:0x8030f676;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:100437*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100437*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33480:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x274f94 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x30f676 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f274f94; op2val:0x8030f676;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:100440*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100440*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33481:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x274f94 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x30f676 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f274f94; op2val:0x8030f676;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:100443*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100443*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33482:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x274f94 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x30f676 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f274f94; op2val:0x8030f676;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:100446*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100446*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33483:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x274f94 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x30f676 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f274f94; op2val:0x8030f676;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:100449*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100449*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33484:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x274f94 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x30f676 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f274f94; op2val:0x8030f676;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:100452*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100452*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33485:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x274f94 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x30f676 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f274f94; op2val:0x8030f676;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:100455*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100455*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33486:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x274f94 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x30f676 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f274f94; op2val:0x8030f676;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:100458*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100458*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33487:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x274f94 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x30f676 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f274f94; op2val:0x8030f676;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:100461*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100461*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33488:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x274f94 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x30f676 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f274f94; op2val:0x8030f676;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:100464*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100464*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33489:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x274f94 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x30f676 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f274f94; op2val:0x8030f676;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:100467*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100467*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33490:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x274f94 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x30f676 and fs3 == 1 and fe3 == 0x95 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f274f94; op2val:0x8030f676;
op3val:0xca800000; valaddr_reg:x3; val_offset:100470*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100470*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33491:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x274f94 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x30f676 and fs3 == 1 and fe3 == 0x95 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f274f94; op2val:0x8030f676;
op3val:0xca800001; valaddr_reg:x3; val_offset:100473*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100473*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33492:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x274f94 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x30f676 and fs3 == 1 and fe3 == 0x95 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f274f94; op2val:0x8030f676;
op3val:0xca800003; valaddr_reg:x3; val_offset:100476*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100476*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33493:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x274f94 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x30f676 and fs3 == 1 and fe3 == 0x95 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f274f94; op2val:0x8030f676;
op3val:0xca800007; valaddr_reg:x3; val_offset:100479*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100479*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33494:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x274f94 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x30f676 and fs3 == 1 and fe3 == 0x95 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f274f94; op2val:0x8030f676;
op3val:0xca80000f; valaddr_reg:x3; val_offset:100482*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100482*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33495:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x274f94 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x30f676 and fs3 == 1 and fe3 == 0x95 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f274f94; op2val:0x8030f676;
op3val:0xca80001f; valaddr_reg:x3; val_offset:100485*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100485*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33496:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x274f94 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x30f676 and fs3 == 1 and fe3 == 0x95 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f274f94; op2val:0x8030f676;
op3val:0xca80003f; valaddr_reg:x3; val_offset:100488*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100488*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33497:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x274f94 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x30f676 and fs3 == 1 and fe3 == 0x95 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f274f94; op2val:0x8030f676;
op3val:0xca80007f; valaddr_reg:x3; val_offset:100491*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100491*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33498:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x274f94 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x30f676 and fs3 == 1 and fe3 == 0x95 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f274f94; op2val:0x8030f676;
op3val:0xca8000ff; valaddr_reg:x3; val_offset:100494*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100494*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33499:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x274f94 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x30f676 and fs3 == 1 and fe3 == 0x95 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f274f94; op2val:0x8030f676;
op3val:0xca8001ff; valaddr_reg:x3; val_offset:100497*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100497*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33500:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x274f94 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x30f676 and fs3 == 1 and fe3 == 0x95 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f274f94; op2val:0x8030f676;
op3val:0xca8003ff; valaddr_reg:x3; val_offset:100500*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100500*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33501:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x274f94 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x30f676 and fs3 == 1 and fe3 == 0x95 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f274f94; op2val:0x8030f676;
op3val:0xca8007ff; valaddr_reg:x3; val_offset:100503*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100503*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33502:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x274f94 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x30f676 and fs3 == 1 and fe3 == 0x95 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f274f94; op2val:0x8030f676;
op3val:0xca800fff; valaddr_reg:x3; val_offset:100506*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100506*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33503:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x274f94 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x30f676 and fs3 == 1 and fe3 == 0x95 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f274f94; op2val:0x8030f676;
op3val:0xca801fff; valaddr_reg:x3; val_offset:100509*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100509*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33504:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x274f94 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x30f676 and fs3 == 1 and fe3 == 0x95 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f274f94; op2val:0x8030f676;
op3val:0xca803fff; valaddr_reg:x3; val_offset:100512*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100512*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33505:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x274f94 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x30f676 and fs3 == 1 and fe3 == 0x95 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f274f94; op2val:0x8030f676;
op3val:0xca807fff; valaddr_reg:x3; val_offset:100515*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100515*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33506:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x274f94 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x30f676 and fs3 == 1 and fe3 == 0x95 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f274f94; op2val:0x8030f676;
op3val:0xca80ffff; valaddr_reg:x3; val_offset:100518*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100518*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33507:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x274f94 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x30f676 and fs3 == 1 and fe3 == 0x95 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f274f94; op2val:0x8030f676;
op3val:0xca81ffff; valaddr_reg:x3; val_offset:100521*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100521*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33508:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x274f94 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x30f676 and fs3 == 1 and fe3 == 0x95 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f274f94; op2val:0x8030f676;
op3val:0xca83ffff; valaddr_reg:x3; val_offset:100524*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100524*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33509:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x274f94 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x30f676 and fs3 == 1 and fe3 == 0x95 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f274f94; op2val:0x8030f676;
op3val:0xca87ffff; valaddr_reg:x3; val_offset:100527*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100527*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33510:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x274f94 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x30f676 and fs3 == 1 and fe3 == 0x95 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f274f94; op2val:0x8030f676;
op3val:0xca8fffff; valaddr_reg:x3; val_offset:100530*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100530*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33511:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x274f94 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x30f676 and fs3 == 1 and fe3 == 0x95 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f274f94; op2val:0x8030f676;
op3val:0xca9fffff; valaddr_reg:x3; val_offset:100533*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100533*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33512:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x274f94 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x30f676 and fs3 == 1 and fe3 == 0x95 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f274f94; op2val:0x8030f676;
op3val:0xcabfffff; valaddr_reg:x3; val_offset:100536*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100536*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33513:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x274f94 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x30f676 and fs3 == 1 and fe3 == 0x95 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f274f94; op2val:0x8030f676;
op3val:0xcac00000; valaddr_reg:x3; val_offset:100539*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100539*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33514:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x274f94 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x30f676 and fs3 == 1 and fe3 == 0x95 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f274f94; op2val:0x8030f676;
op3val:0xcae00000; valaddr_reg:x3; val_offset:100542*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100542*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33515:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x274f94 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x30f676 and fs3 == 1 and fe3 == 0x95 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f274f94; op2val:0x8030f676;
op3val:0xcaf00000; valaddr_reg:x3; val_offset:100545*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100545*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33516:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x274f94 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x30f676 and fs3 == 1 and fe3 == 0x95 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f274f94; op2val:0x8030f676;
op3val:0xcaf80000; valaddr_reg:x3; val_offset:100548*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100548*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33517:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x274f94 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x30f676 and fs3 == 1 and fe3 == 0x95 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f274f94; op2val:0x8030f676;
op3val:0xcafc0000; valaddr_reg:x3; val_offset:100551*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100551*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33518:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x274f94 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x30f676 and fs3 == 1 and fe3 == 0x95 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f274f94; op2val:0x8030f676;
op3val:0xcafe0000; valaddr_reg:x3; val_offset:100554*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100554*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33519:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x274f94 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x30f676 and fs3 == 1 and fe3 == 0x95 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f274f94; op2val:0x8030f676;
op3val:0xcaff0000; valaddr_reg:x3; val_offset:100557*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100557*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33520:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x274f94 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x30f676 and fs3 == 1 and fe3 == 0x95 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f274f94; op2val:0x8030f676;
op3val:0xcaff8000; valaddr_reg:x3; val_offset:100560*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100560*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33521:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x274f94 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x30f676 and fs3 == 1 and fe3 == 0x95 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f274f94; op2val:0x8030f676;
op3val:0xcaffc000; valaddr_reg:x3; val_offset:100563*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100563*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33522:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x274f94 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x30f676 and fs3 == 1 and fe3 == 0x95 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f274f94; op2val:0x8030f676;
op3val:0xcaffe000; valaddr_reg:x3; val_offset:100566*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100566*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33523:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x274f94 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x30f676 and fs3 == 1 and fe3 == 0x95 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f274f94; op2val:0x8030f676;
op3val:0xcafff000; valaddr_reg:x3; val_offset:100569*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100569*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33524:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x274f94 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x30f676 and fs3 == 1 and fe3 == 0x95 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f274f94; op2val:0x8030f676;
op3val:0xcafff800; valaddr_reg:x3; val_offset:100572*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100572*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33525:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x274f94 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x30f676 and fs3 == 1 and fe3 == 0x95 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f274f94; op2val:0x8030f676;
op3val:0xcafffc00; valaddr_reg:x3; val_offset:100575*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100575*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33526:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x274f94 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x30f676 and fs3 == 1 and fe3 == 0x95 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f274f94; op2val:0x8030f676;
op3val:0xcafffe00; valaddr_reg:x3; val_offset:100578*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100578*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33527:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x274f94 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x30f676 and fs3 == 1 and fe3 == 0x95 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f274f94; op2val:0x8030f676;
op3val:0xcaffff00; valaddr_reg:x3; val_offset:100581*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100581*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33528:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x274f94 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x30f676 and fs3 == 1 and fe3 == 0x95 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f274f94; op2val:0x8030f676;
op3val:0xcaffff80; valaddr_reg:x3; val_offset:100584*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100584*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33529:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x274f94 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x30f676 and fs3 == 1 and fe3 == 0x95 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f274f94; op2val:0x8030f676;
op3val:0xcaffffc0; valaddr_reg:x3; val_offset:100587*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100587*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33530:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x274f94 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x30f676 and fs3 == 1 and fe3 == 0x95 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f274f94; op2val:0x8030f676;
op3val:0xcaffffe0; valaddr_reg:x3; val_offset:100590*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100590*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33531:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x274f94 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x30f676 and fs3 == 1 and fe3 == 0x95 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f274f94; op2val:0x8030f676;
op3val:0xcafffff0; valaddr_reg:x3; val_offset:100593*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100593*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33532:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x274f94 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x30f676 and fs3 == 1 and fe3 == 0x95 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f274f94; op2val:0x8030f676;
op3val:0xcafffff8; valaddr_reg:x3; val_offset:100596*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100596*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33533:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x274f94 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x30f676 and fs3 == 1 and fe3 == 0x95 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f274f94; op2val:0x8030f676;
op3val:0xcafffffc; valaddr_reg:x3; val_offset:100599*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100599*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33534:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x274f94 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x30f676 and fs3 == 1 and fe3 == 0x95 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f274f94; op2val:0x8030f676;
op3val:0xcafffffe; valaddr_reg:x3; val_offset:100602*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100602*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33535:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x274f94 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x30f676 and fs3 == 1 and fe3 == 0x95 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f274f94; op2val:0x8030f676;
op3val:0xcaffffff; valaddr_reg:x3; val_offset:100605*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100605*0 + 3*261*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2133251056,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(201326584,32,FLEN)
NAN_BOXED(2133251056,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(201326588,32,FLEN)
NAN_BOXED(2133251056,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(201326590,32,FLEN)
NAN_BOXED(2133251056,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(201326591,32,FLEN)
NAN_BOXED(2133270886,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2133270886,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483651,32,FLEN)
NAN_BOXED(2133270886,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483655,32,FLEN)
NAN_BOXED(2133270886,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149161369,32,FLEN)
NAN_BOXED(2133270886,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149880393,32,FLEN)
NAN_BOXED(2133270886,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2150839091,32,FLEN)
NAN_BOXED(2133270886,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151078765,32,FLEN)
NAN_BOXED(2133270886,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151398331,32,FLEN)
NAN_BOXED(2133270886,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151957572,32,FLEN)
NAN_BOXED(2133270886,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2152516812,32,FLEN)
NAN_BOXED(2133270886,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2153475510,32,FLEN)
NAN_BOXED(2133270886,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154194534,32,FLEN)
NAN_BOXED(2133270886,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154673883,32,FLEN)
NAN_BOXED(2133270886,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872248,32,FLEN)
NAN_BOXED(2133270886,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872252,32,FLEN)
NAN_BOXED(2133270886,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2133270886,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206203904,32,FLEN)
NAN_BOXED(2133270886,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206203905,32,FLEN)
NAN_BOXED(2133270886,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206203907,32,FLEN)
NAN_BOXED(2133270886,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206203911,32,FLEN)
NAN_BOXED(2133270886,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206203919,32,FLEN)
NAN_BOXED(2133270886,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206203935,32,FLEN)
NAN_BOXED(2133270886,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206203967,32,FLEN)
NAN_BOXED(2133270886,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206204031,32,FLEN)
NAN_BOXED(2133270886,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206204159,32,FLEN)
NAN_BOXED(2133270886,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206204415,32,FLEN)
NAN_BOXED(2133270886,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206204927,32,FLEN)
NAN_BOXED(2133270886,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206205951,32,FLEN)
NAN_BOXED(2133270886,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206207999,32,FLEN)
NAN_BOXED(2133270886,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206212095,32,FLEN)
NAN_BOXED(2133270886,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206220287,32,FLEN)
NAN_BOXED(2133270886,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206236671,32,FLEN)
NAN_BOXED(2133270886,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206269439,32,FLEN)
NAN_BOXED(2133270886,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206334975,32,FLEN)
NAN_BOXED(2133270886,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206466047,32,FLEN)
NAN_BOXED(2133270886,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206728191,32,FLEN)
NAN_BOXED(2133270886,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2207252479,32,FLEN)
NAN_BOXED(2133270886,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2208301055,32,FLEN)
NAN_BOXED(2133270886,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2210398207,32,FLEN)
NAN_BOXED(2133270886,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2210398208,32,FLEN)
NAN_BOXED(2133270886,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2212495360,32,FLEN)
NAN_BOXED(2133270886,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2213543936,32,FLEN)
NAN_BOXED(2133270886,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214068224,32,FLEN)
NAN_BOXED(2133270886,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214330368,32,FLEN)
NAN_BOXED(2133270886,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214461440,32,FLEN)
NAN_BOXED(2133270886,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214526976,32,FLEN)
NAN_BOXED(2133270886,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214559744,32,FLEN)
NAN_BOXED(2133270886,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214576128,32,FLEN)
NAN_BOXED(2133270886,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214584320,32,FLEN)
NAN_BOXED(2133270886,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214588416,32,FLEN)
NAN_BOXED(2133270886,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214590464,32,FLEN)
NAN_BOXED(2133270886,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214591488,32,FLEN)
NAN_BOXED(2133270886,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214592000,32,FLEN)
NAN_BOXED(2133270886,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214592256,32,FLEN)
NAN_BOXED(2133270886,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214592384,32,FLEN)
NAN_BOXED(2133270886,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214592448,32,FLEN)
NAN_BOXED(2133270886,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214592480,32,FLEN)
NAN_BOXED(2133270886,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214592496,32,FLEN)
NAN_BOXED(2133270886,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214592504,32,FLEN)
NAN_BOXED(2133270886,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214592508,32,FLEN)
NAN_BOXED(2133270886,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214592510,32,FLEN)
NAN_BOXED(2133270886,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214592511,32,FLEN)
NAN_BOXED(2133282708,32,FLEN)
NAN_BOXED(2150692470,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2133282708,32,FLEN)
NAN_BOXED(2150692470,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2133282708,32,FLEN)
NAN_BOXED(2150692470,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
NAN_BOXED(2133282708,32,FLEN)
NAN_BOXED(2150692470,32,FLEN)
NAN_BOXED(3214514585,32,FLEN)
NAN_BOXED(2133282708,32,FLEN)
NAN_BOXED(2150692470,32,FLEN)
NAN_BOXED(3215233609,32,FLEN)
NAN_BOXED(2133282708,32,FLEN)
NAN_BOXED(2150692470,32,FLEN)
NAN_BOXED(3216192307,32,FLEN)
NAN_BOXED(2133282708,32,FLEN)
NAN_BOXED(2150692470,32,FLEN)
NAN_BOXED(3216431981,32,FLEN)
NAN_BOXED(2133282708,32,FLEN)
NAN_BOXED(2150692470,32,FLEN)
NAN_BOXED(3216751547,32,FLEN)
NAN_BOXED(2133282708,32,FLEN)
NAN_BOXED(2150692470,32,FLEN)
NAN_BOXED(3217310788,32,FLEN)
NAN_BOXED(2133282708,32,FLEN)
NAN_BOXED(2150692470,32,FLEN)
NAN_BOXED(3217870028,32,FLEN)
NAN_BOXED(2133282708,32,FLEN)
NAN_BOXED(2150692470,32,FLEN)
NAN_BOXED(3218828726,32,FLEN)
NAN_BOXED(2133282708,32,FLEN)
NAN_BOXED(2150692470,32,FLEN)
NAN_BOXED(3219547750,32,FLEN)
NAN_BOXED(2133282708,32,FLEN)
NAN_BOXED(2150692470,32,FLEN)
NAN_BOXED(3220027099,32,FLEN)
NAN_BOXED(2133282708,32,FLEN)
NAN_BOXED(2150692470,32,FLEN)
NAN_BOXED(3221225464,32,FLEN)
NAN_BOXED(2133282708,32,FLEN)
NAN_BOXED(2150692470,32,FLEN)
NAN_BOXED(3221225468,32,FLEN)
NAN_BOXED(2133282708,32,FLEN)
NAN_BOXED(2150692470,32,FLEN)
NAN_BOXED(3221225470,32,FLEN)
NAN_BOXED(2133282708,32,FLEN)
NAN_BOXED(2150692470,32,FLEN)
NAN_BOXED(3397386240,32,FLEN)
NAN_BOXED(2133282708,32,FLEN)
NAN_BOXED(2150692470,32,FLEN)
NAN_BOXED(3397386241,32,FLEN)
NAN_BOXED(2133282708,32,FLEN)
NAN_BOXED(2150692470,32,FLEN)
NAN_BOXED(3397386243,32,FLEN)
NAN_BOXED(2133282708,32,FLEN)
NAN_BOXED(2150692470,32,FLEN)
NAN_BOXED(3397386247,32,FLEN)
NAN_BOXED(2133282708,32,FLEN)
NAN_BOXED(2150692470,32,FLEN)
NAN_BOXED(3397386255,32,FLEN)
NAN_BOXED(2133282708,32,FLEN)
NAN_BOXED(2150692470,32,FLEN)
NAN_BOXED(3397386271,32,FLEN)
NAN_BOXED(2133282708,32,FLEN)
NAN_BOXED(2150692470,32,FLEN)
NAN_BOXED(3397386303,32,FLEN)
NAN_BOXED(2133282708,32,FLEN)
NAN_BOXED(2150692470,32,FLEN)
NAN_BOXED(3397386367,32,FLEN)
NAN_BOXED(2133282708,32,FLEN)
NAN_BOXED(2150692470,32,FLEN)
NAN_BOXED(3397386495,32,FLEN)
NAN_BOXED(2133282708,32,FLEN)
NAN_BOXED(2150692470,32,FLEN)
NAN_BOXED(3397386751,32,FLEN)
NAN_BOXED(2133282708,32,FLEN)
NAN_BOXED(2150692470,32,FLEN)
NAN_BOXED(3397387263,32,FLEN)
NAN_BOXED(2133282708,32,FLEN)
NAN_BOXED(2150692470,32,FLEN)
NAN_BOXED(3397388287,32,FLEN)
NAN_BOXED(2133282708,32,FLEN)
NAN_BOXED(2150692470,32,FLEN)
NAN_BOXED(3397390335,32,FLEN)
NAN_BOXED(2133282708,32,FLEN)
NAN_BOXED(2150692470,32,FLEN)
NAN_BOXED(3397394431,32,FLEN)
NAN_BOXED(2133282708,32,FLEN)
NAN_BOXED(2150692470,32,FLEN)
NAN_BOXED(3397402623,32,FLEN)
NAN_BOXED(2133282708,32,FLEN)
NAN_BOXED(2150692470,32,FLEN)
NAN_BOXED(3397419007,32,FLEN)
NAN_BOXED(2133282708,32,FLEN)
NAN_BOXED(2150692470,32,FLEN)
NAN_BOXED(3397451775,32,FLEN)
NAN_BOXED(2133282708,32,FLEN)
NAN_BOXED(2150692470,32,FLEN)
NAN_BOXED(3397517311,32,FLEN)
NAN_BOXED(2133282708,32,FLEN)
NAN_BOXED(2150692470,32,FLEN)
NAN_BOXED(3397648383,32,FLEN)
NAN_BOXED(2133282708,32,FLEN)
NAN_BOXED(2150692470,32,FLEN)
NAN_BOXED(3397910527,32,FLEN)
NAN_BOXED(2133282708,32,FLEN)
NAN_BOXED(2150692470,32,FLEN)
NAN_BOXED(3398434815,32,FLEN)
NAN_BOXED(2133282708,32,FLEN)
NAN_BOXED(2150692470,32,FLEN)
NAN_BOXED(3399483391,32,FLEN)
NAN_BOXED(2133282708,32,FLEN)
NAN_BOXED(2150692470,32,FLEN)
NAN_BOXED(3401580543,32,FLEN)
NAN_BOXED(2133282708,32,FLEN)
NAN_BOXED(2150692470,32,FLEN)
NAN_BOXED(3401580544,32,FLEN)
NAN_BOXED(2133282708,32,FLEN)
NAN_BOXED(2150692470,32,FLEN)
NAN_BOXED(3403677696,32,FLEN)
NAN_BOXED(2133282708,32,FLEN)
NAN_BOXED(2150692470,32,FLEN)
NAN_BOXED(3404726272,32,FLEN)
NAN_BOXED(2133282708,32,FLEN)
NAN_BOXED(2150692470,32,FLEN)
NAN_BOXED(3405250560,32,FLEN)
NAN_BOXED(2133282708,32,FLEN)
NAN_BOXED(2150692470,32,FLEN)
NAN_BOXED(3405512704,32,FLEN)
NAN_BOXED(2133282708,32,FLEN)
NAN_BOXED(2150692470,32,FLEN)
NAN_BOXED(3405643776,32,FLEN)
NAN_BOXED(2133282708,32,FLEN)
NAN_BOXED(2150692470,32,FLEN)
NAN_BOXED(3405709312,32,FLEN)
NAN_BOXED(2133282708,32,FLEN)
NAN_BOXED(2150692470,32,FLEN)
NAN_BOXED(3405742080,32,FLEN)
NAN_BOXED(2133282708,32,FLEN)
NAN_BOXED(2150692470,32,FLEN)
NAN_BOXED(3405758464,32,FLEN)
NAN_BOXED(2133282708,32,FLEN)
NAN_BOXED(2150692470,32,FLEN)
NAN_BOXED(3405766656,32,FLEN)
NAN_BOXED(2133282708,32,FLEN)
NAN_BOXED(2150692470,32,FLEN)
NAN_BOXED(3405770752,32,FLEN)
NAN_BOXED(2133282708,32,FLEN)
NAN_BOXED(2150692470,32,FLEN)
NAN_BOXED(3405772800,32,FLEN)
NAN_BOXED(2133282708,32,FLEN)
NAN_BOXED(2150692470,32,FLEN)
NAN_BOXED(3405773824,32,FLEN)
NAN_BOXED(2133282708,32,FLEN)
NAN_BOXED(2150692470,32,FLEN)
NAN_BOXED(3405774336,32,FLEN)
NAN_BOXED(2133282708,32,FLEN)
NAN_BOXED(2150692470,32,FLEN)
NAN_BOXED(3405774592,32,FLEN)
NAN_BOXED(2133282708,32,FLEN)
NAN_BOXED(2150692470,32,FLEN)
NAN_BOXED(3405774720,32,FLEN)
NAN_BOXED(2133282708,32,FLEN)
NAN_BOXED(2150692470,32,FLEN)
NAN_BOXED(3405774784,32,FLEN)
NAN_BOXED(2133282708,32,FLEN)
NAN_BOXED(2150692470,32,FLEN)
NAN_BOXED(3405774816,32,FLEN)
NAN_BOXED(2133282708,32,FLEN)
NAN_BOXED(2150692470,32,FLEN)
NAN_BOXED(3405774832,32,FLEN)
NAN_BOXED(2133282708,32,FLEN)
NAN_BOXED(2150692470,32,FLEN)
NAN_BOXED(3405774840,32,FLEN)
NAN_BOXED(2133282708,32,FLEN)
NAN_BOXED(2150692470,32,FLEN)
NAN_BOXED(3405774844,32,FLEN)
NAN_BOXED(2133282708,32,FLEN)
NAN_BOXED(2150692470,32,FLEN)
NAN_BOXED(3405774846,32,FLEN)
NAN_BOXED(2133282708,32,FLEN)
NAN_BOXED(2150692470,32,FLEN)
NAN_BOXED(3405774847,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
