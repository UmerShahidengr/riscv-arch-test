
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:17:59 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_33792:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x288293 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f288293; op2val:0x0;
op3val:0x444444; valaddr_reg:x3; val_offset:101376*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101376*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33793:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x288293 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f288293; op2val:0x0;
op3val:0x4ccccc; valaddr_reg:x3; val_offset:101379*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101379*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33794:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x288293 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f288293; op2val:0x0;
op3val:0x5b6db6; valaddr_reg:x3; val_offset:101382*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101382*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33795:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x288293 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f288293; op2val:0x0;
op3val:0x666666; valaddr_reg:x3; val_offset:101385*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101385*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33796:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x288293 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f288293; op2val:0x0;
op3val:0x6db6db; valaddr_reg:x3; val_offset:101388*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101388*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33797:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x288293 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f288293; op2val:0x0;
op3val:0x7ffff8; valaddr_reg:x3; val_offset:101391*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101391*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33798:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x288293 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f288293; op2val:0x0;
op3val:0x7ffffc; valaddr_reg:x3; val_offset:101394*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101394*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33799:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x288293 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f288293; op2val:0x0;
op3val:0x7ffffe; valaddr_reg:x3; val_offset:101397*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101397*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33800:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x288293 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x8d and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f288293; op2val:0x0;
op3val:0x46800000; valaddr_reg:x3; val_offset:101400*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101400*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33801:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x288293 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x8d and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f288293; op2val:0x0;
op3val:0x46800001; valaddr_reg:x3; val_offset:101403*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101403*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33802:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x288293 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x8d and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f288293; op2val:0x0;
op3val:0x46800003; valaddr_reg:x3; val_offset:101406*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101406*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33803:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x288293 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x8d and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f288293; op2val:0x0;
op3val:0x46800007; valaddr_reg:x3; val_offset:101409*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101409*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33804:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x288293 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x8d and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f288293; op2val:0x0;
op3val:0x4680000f; valaddr_reg:x3; val_offset:101412*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101412*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33805:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x288293 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x8d and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f288293; op2val:0x0;
op3val:0x4680001f; valaddr_reg:x3; val_offset:101415*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101415*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33806:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x288293 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x8d and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f288293; op2val:0x0;
op3val:0x4680003f; valaddr_reg:x3; val_offset:101418*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101418*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33807:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x288293 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x8d and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f288293; op2val:0x0;
op3val:0x4680007f; valaddr_reg:x3; val_offset:101421*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101421*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33808:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x288293 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x8d and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f288293; op2val:0x0;
op3val:0x468000ff; valaddr_reg:x3; val_offset:101424*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101424*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33809:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x288293 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x8d and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f288293; op2val:0x0;
op3val:0x468001ff; valaddr_reg:x3; val_offset:101427*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101427*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33810:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x288293 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x8d and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f288293; op2val:0x0;
op3val:0x468003ff; valaddr_reg:x3; val_offset:101430*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101430*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33811:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x288293 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x8d and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f288293; op2val:0x0;
op3val:0x468007ff; valaddr_reg:x3; val_offset:101433*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101433*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33812:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x288293 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x8d and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f288293; op2val:0x0;
op3val:0x46800fff; valaddr_reg:x3; val_offset:101436*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101436*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33813:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x288293 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x8d and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f288293; op2val:0x0;
op3val:0x46801fff; valaddr_reg:x3; val_offset:101439*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101439*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33814:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x288293 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x8d and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f288293; op2val:0x0;
op3val:0x46803fff; valaddr_reg:x3; val_offset:101442*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101442*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33815:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x288293 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x8d and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f288293; op2val:0x0;
op3val:0x46807fff; valaddr_reg:x3; val_offset:101445*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101445*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33816:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x288293 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x8d and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f288293; op2val:0x0;
op3val:0x4680ffff; valaddr_reg:x3; val_offset:101448*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101448*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33817:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x288293 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x8d and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f288293; op2val:0x0;
op3val:0x4681ffff; valaddr_reg:x3; val_offset:101451*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101451*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33818:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x288293 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x8d and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f288293; op2val:0x0;
op3val:0x4683ffff; valaddr_reg:x3; val_offset:101454*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101454*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33819:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x288293 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x8d and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f288293; op2val:0x0;
op3val:0x4687ffff; valaddr_reg:x3; val_offset:101457*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101457*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33820:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x288293 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x8d and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f288293; op2val:0x0;
op3val:0x468fffff; valaddr_reg:x3; val_offset:101460*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101460*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33821:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x288293 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x8d and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f288293; op2val:0x0;
op3val:0x469fffff; valaddr_reg:x3; val_offset:101463*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101463*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33822:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x288293 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x8d and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f288293; op2val:0x0;
op3val:0x46bfffff; valaddr_reg:x3; val_offset:101466*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101466*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33823:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x288293 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x8d and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f288293; op2val:0x0;
op3val:0x46c00000; valaddr_reg:x3; val_offset:101469*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101469*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33824:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x288293 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x8d and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f288293; op2val:0x0;
op3val:0x46e00000; valaddr_reg:x3; val_offset:101472*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101472*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33825:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x288293 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x8d and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f288293; op2val:0x0;
op3val:0x46f00000; valaddr_reg:x3; val_offset:101475*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101475*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33826:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x288293 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x8d and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f288293; op2val:0x0;
op3val:0x46f80000; valaddr_reg:x3; val_offset:101478*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101478*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33827:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x288293 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x8d and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f288293; op2val:0x0;
op3val:0x46fc0000; valaddr_reg:x3; val_offset:101481*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101481*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33828:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x288293 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x8d and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f288293; op2val:0x0;
op3val:0x46fe0000; valaddr_reg:x3; val_offset:101484*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101484*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33829:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x288293 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x8d and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f288293; op2val:0x0;
op3val:0x46ff0000; valaddr_reg:x3; val_offset:101487*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101487*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33830:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x288293 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x8d and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f288293; op2val:0x0;
op3val:0x46ff8000; valaddr_reg:x3; val_offset:101490*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101490*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33831:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x288293 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x8d and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f288293; op2val:0x0;
op3val:0x46ffc000; valaddr_reg:x3; val_offset:101493*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101493*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33832:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x288293 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x8d and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f288293; op2val:0x0;
op3val:0x46ffe000; valaddr_reg:x3; val_offset:101496*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101496*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33833:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x288293 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x8d and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f288293; op2val:0x0;
op3val:0x46fff000; valaddr_reg:x3; val_offset:101499*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101499*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33834:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x288293 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x8d and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f288293; op2val:0x0;
op3val:0x46fff800; valaddr_reg:x3; val_offset:101502*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101502*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33835:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x288293 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x8d and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f288293; op2val:0x0;
op3val:0x46fffc00; valaddr_reg:x3; val_offset:101505*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101505*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33836:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x288293 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x8d and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f288293; op2val:0x0;
op3val:0x46fffe00; valaddr_reg:x3; val_offset:101508*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101508*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33837:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x288293 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x8d and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f288293; op2val:0x0;
op3val:0x46ffff00; valaddr_reg:x3; val_offset:101511*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101511*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33838:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x288293 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x8d and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f288293; op2val:0x0;
op3val:0x46ffff80; valaddr_reg:x3; val_offset:101514*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101514*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33839:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x288293 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x8d and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f288293; op2val:0x0;
op3val:0x46ffffc0; valaddr_reg:x3; val_offset:101517*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101517*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33840:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x288293 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x8d and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f288293; op2val:0x0;
op3val:0x46ffffe0; valaddr_reg:x3; val_offset:101520*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101520*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33841:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x288293 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x8d and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f288293; op2val:0x0;
op3val:0x46fffff0; valaddr_reg:x3; val_offset:101523*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101523*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33842:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x288293 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x8d and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f288293; op2val:0x0;
op3val:0x46fffff8; valaddr_reg:x3; val_offset:101526*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101526*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33843:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x288293 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x8d and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f288293; op2val:0x0;
op3val:0x46fffffc; valaddr_reg:x3; val_offset:101529*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101529*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33844:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x288293 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x8d and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f288293; op2val:0x0;
op3val:0x46fffffe; valaddr_reg:x3; val_offset:101532*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101532*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33845:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x288293 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x8d and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f288293; op2val:0x0;
op3val:0x46ffffff; valaddr_reg:x3; val_offset:101535*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101535*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33846:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x28a79f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x424a55 and fs3 == 0 and fe3 == 0xe0 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f28a79f; op2val:0x3fc24a55;
op3val:0x70000000; valaddr_reg:x3; val_offset:101538*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101538*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33847:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x28a79f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x424a55 and fs3 == 0 and fe3 == 0xe0 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f28a79f; op2val:0x3fc24a55;
op3val:0x70000001; valaddr_reg:x3; val_offset:101541*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101541*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33848:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x28a79f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x424a55 and fs3 == 0 and fe3 == 0xe0 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f28a79f; op2val:0x3fc24a55;
op3val:0x70000003; valaddr_reg:x3; val_offset:101544*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101544*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33849:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x28a79f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x424a55 and fs3 == 0 and fe3 == 0xe0 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f28a79f; op2val:0x3fc24a55;
op3val:0x70000007; valaddr_reg:x3; val_offset:101547*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101547*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33850:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x28a79f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x424a55 and fs3 == 0 and fe3 == 0xe0 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f28a79f; op2val:0x3fc24a55;
op3val:0x7000000f; valaddr_reg:x3; val_offset:101550*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101550*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33851:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x28a79f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x424a55 and fs3 == 0 and fe3 == 0xe0 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f28a79f; op2val:0x3fc24a55;
op3val:0x7000001f; valaddr_reg:x3; val_offset:101553*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101553*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33852:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x28a79f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x424a55 and fs3 == 0 and fe3 == 0xe0 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f28a79f; op2val:0x3fc24a55;
op3val:0x7000003f; valaddr_reg:x3; val_offset:101556*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101556*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33853:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x28a79f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x424a55 and fs3 == 0 and fe3 == 0xe0 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f28a79f; op2val:0x3fc24a55;
op3val:0x7000007f; valaddr_reg:x3; val_offset:101559*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101559*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33854:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x28a79f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x424a55 and fs3 == 0 and fe3 == 0xe0 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f28a79f; op2val:0x3fc24a55;
op3val:0x700000ff; valaddr_reg:x3; val_offset:101562*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101562*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33855:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x28a79f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x424a55 and fs3 == 0 and fe3 == 0xe0 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f28a79f; op2val:0x3fc24a55;
op3val:0x700001ff; valaddr_reg:x3; val_offset:101565*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101565*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33856:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x28a79f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x424a55 and fs3 == 0 and fe3 == 0xe0 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f28a79f; op2val:0x3fc24a55;
op3val:0x700003ff; valaddr_reg:x3; val_offset:101568*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101568*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33857:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x28a79f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x424a55 and fs3 == 0 and fe3 == 0xe0 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f28a79f; op2val:0x3fc24a55;
op3val:0x700007ff; valaddr_reg:x3; val_offset:101571*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101571*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33858:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x28a79f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x424a55 and fs3 == 0 and fe3 == 0xe0 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f28a79f; op2val:0x3fc24a55;
op3val:0x70000fff; valaddr_reg:x3; val_offset:101574*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101574*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33859:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x28a79f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x424a55 and fs3 == 0 and fe3 == 0xe0 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f28a79f; op2val:0x3fc24a55;
op3val:0x70001fff; valaddr_reg:x3; val_offset:101577*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101577*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33860:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x28a79f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x424a55 and fs3 == 0 and fe3 == 0xe0 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f28a79f; op2val:0x3fc24a55;
op3val:0x70003fff; valaddr_reg:x3; val_offset:101580*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101580*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33861:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x28a79f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x424a55 and fs3 == 0 and fe3 == 0xe0 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f28a79f; op2val:0x3fc24a55;
op3val:0x70007fff; valaddr_reg:x3; val_offset:101583*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101583*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33862:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x28a79f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x424a55 and fs3 == 0 and fe3 == 0xe0 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f28a79f; op2val:0x3fc24a55;
op3val:0x7000ffff; valaddr_reg:x3; val_offset:101586*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101586*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33863:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x28a79f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x424a55 and fs3 == 0 and fe3 == 0xe0 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f28a79f; op2val:0x3fc24a55;
op3val:0x7001ffff; valaddr_reg:x3; val_offset:101589*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101589*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33864:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x28a79f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x424a55 and fs3 == 0 and fe3 == 0xe0 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f28a79f; op2val:0x3fc24a55;
op3val:0x7003ffff; valaddr_reg:x3; val_offset:101592*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101592*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33865:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x28a79f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x424a55 and fs3 == 0 and fe3 == 0xe0 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f28a79f; op2val:0x3fc24a55;
op3val:0x7007ffff; valaddr_reg:x3; val_offset:101595*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101595*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33866:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x28a79f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x424a55 and fs3 == 0 and fe3 == 0xe0 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f28a79f; op2val:0x3fc24a55;
op3val:0x700fffff; valaddr_reg:x3; val_offset:101598*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101598*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33867:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x28a79f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x424a55 and fs3 == 0 and fe3 == 0xe0 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f28a79f; op2val:0x3fc24a55;
op3val:0x701fffff; valaddr_reg:x3; val_offset:101601*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101601*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33868:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x28a79f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x424a55 and fs3 == 0 and fe3 == 0xe0 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f28a79f; op2val:0x3fc24a55;
op3val:0x703fffff; valaddr_reg:x3; val_offset:101604*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101604*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33869:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x28a79f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x424a55 and fs3 == 0 and fe3 == 0xe0 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f28a79f; op2val:0x3fc24a55;
op3val:0x70400000; valaddr_reg:x3; val_offset:101607*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101607*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33870:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x28a79f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x424a55 and fs3 == 0 and fe3 == 0xe0 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f28a79f; op2val:0x3fc24a55;
op3val:0x70600000; valaddr_reg:x3; val_offset:101610*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101610*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33871:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x28a79f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x424a55 and fs3 == 0 and fe3 == 0xe0 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f28a79f; op2val:0x3fc24a55;
op3val:0x70700000; valaddr_reg:x3; val_offset:101613*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101613*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33872:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x28a79f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x424a55 and fs3 == 0 and fe3 == 0xe0 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f28a79f; op2val:0x3fc24a55;
op3val:0x70780000; valaddr_reg:x3; val_offset:101616*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101616*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33873:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x28a79f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x424a55 and fs3 == 0 and fe3 == 0xe0 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f28a79f; op2val:0x3fc24a55;
op3val:0x707c0000; valaddr_reg:x3; val_offset:101619*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101619*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33874:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x28a79f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x424a55 and fs3 == 0 and fe3 == 0xe0 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f28a79f; op2val:0x3fc24a55;
op3val:0x707e0000; valaddr_reg:x3; val_offset:101622*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101622*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33875:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x28a79f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x424a55 and fs3 == 0 and fe3 == 0xe0 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f28a79f; op2val:0x3fc24a55;
op3val:0x707f0000; valaddr_reg:x3; val_offset:101625*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101625*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33876:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x28a79f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x424a55 and fs3 == 0 and fe3 == 0xe0 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f28a79f; op2val:0x3fc24a55;
op3val:0x707f8000; valaddr_reg:x3; val_offset:101628*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101628*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33877:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x28a79f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x424a55 and fs3 == 0 and fe3 == 0xe0 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f28a79f; op2val:0x3fc24a55;
op3val:0x707fc000; valaddr_reg:x3; val_offset:101631*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101631*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33878:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x28a79f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x424a55 and fs3 == 0 and fe3 == 0xe0 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f28a79f; op2val:0x3fc24a55;
op3val:0x707fe000; valaddr_reg:x3; val_offset:101634*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101634*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33879:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x28a79f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x424a55 and fs3 == 0 and fe3 == 0xe0 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f28a79f; op2val:0x3fc24a55;
op3val:0x707ff000; valaddr_reg:x3; val_offset:101637*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101637*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33880:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x28a79f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x424a55 and fs3 == 0 and fe3 == 0xe0 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f28a79f; op2val:0x3fc24a55;
op3val:0x707ff800; valaddr_reg:x3; val_offset:101640*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101640*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33881:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x28a79f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x424a55 and fs3 == 0 and fe3 == 0xe0 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f28a79f; op2val:0x3fc24a55;
op3val:0x707ffc00; valaddr_reg:x3; val_offset:101643*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101643*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33882:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x28a79f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x424a55 and fs3 == 0 and fe3 == 0xe0 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f28a79f; op2val:0x3fc24a55;
op3val:0x707ffe00; valaddr_reg:x3; val_offset:101646*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101646*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33883:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x28a79f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x424a55 and fs3 == 0 and fe3 == 0xe0 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f28a79f; op2val:0x3fc24a55;
op3val:0x707fff00; valaddr_reg:x3; val_offset:101649*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101649*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33884:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x28a79f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x424a55 and fs3 == 0 and fe3 == 0xe0 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f28a79f; op2val:0x3fc24a55;
op3val:0x707fff80; valaddr_reg:x3; val_offset:101652*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101652*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33885:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x28a79f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x424a55 and fs3 == 0 and fe3 == 0xe0 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f28a79f; op2val:0x3fc24a55;
op3val:0x707fffc0; valaddr_reg:x3; val_offset:101655*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101655*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33886:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x28a79f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x424a55 and fs3 == 0 and fe3 == 0xe0 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f28a79f; op2val:0x3fc24a55;
op3val:0x707fffe0; valaddr_reg:x3; val_offset:101658*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101658*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33887:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x28a79f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x424a55 and fs3 == 0 and fe3 == 0xe0 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f28a79f; op2val:0x3fc24a55;
op3val:0x707ffff0; valaddr_reg:x3; val_offset:101661*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101661*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33888:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x28a79f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x424a55 and fs3 == 0 and fe3 == 0xe0 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f28a79f; op2val:0x3fc24a55;
op3val:0x707ffff8; valaddr_reg:x3; val_offset:101664*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101664*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33889:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x28a79f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x424a55 and fs3 == 0 and fe3 == 0xe0 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f28a79f; op2val:0x3fc24a55;
op3val:0x707ffffc; valaddr_reg:x3; val_offset:101667*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101667*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33890:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x28a79f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x424a55 and fs3 == 0 and fe3 == 0xe0 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f28a79f; op2val:0x3fc24a55;
op3val:0x707ffffe; valaddr_reg:x3; val_offset:101670*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101670*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33891:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x28a79f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x424a55 and fs3 == 0 and fe3 == 0xe0 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f28a79f; op2val:0x3fc24a55;
op3val:0x707fffff; valaddr_reg:x3; val_offset:101673*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101673*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33892:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x28a79f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x424a55 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f28a79f; op2val:0x3fc24a55;
op3val:0x7f000001; valaddr_reg:x3; val_offset:101676*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101676*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33893:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x28a79f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x424a55 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f28a79f; op2val:0x3fc24a55;
op3val:0x7f000003; valaddr_reg:x3; val_offset:101679*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101679*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33894:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x28a79f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x424a55 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f28a79f; op2val:0x3fc24a55;
op3val:0x7f000007; valaddr_reg:x3; val_offset:101682*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101682*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33895:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x28a79f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x424a55 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f28a79f; op2val:0x3fc24a55;
op3val:0x7f199999; valaddr_reg:x3; val_offset:101685*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101685*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33896:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x28a79f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x424a55 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f28a79f; op2val:0x3fc24a55;
op3val:0x7f249249; valaddr_reg:x3; val_offset:101688*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101688*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33897:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x28a79f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x424a55 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f28a79f; op2val:0x3fc24a55;
op3val:0x7f333333; valaddr_reg:x3; val_offset:101691*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101691*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33898:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x28a79f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x424a55 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f28a79f; op2val:0x3fc24a55;
op3val:0x7f36db6d; valaddr_reg:x3; val_offset:101694*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101694*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33899:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x28a79f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x424a55 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f28a79f; op2val:0x3fc24a55;
op3val:0x7f3bbbbb; valaddr_reg:x3; val_offset:101697*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101697*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33900:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x28a79f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x424a55 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f28a79f; op2val:0x3fc24a55;
op3val:0x7f444444; valaddr_reg:x3; val_offset:101700*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101700*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33901:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x28a79f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x424a55 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f28a79f; op2val:0x3fc24a55;
op3val:0x7f4ccccc; valaddr_reg:x3; val_offset:101703*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101703*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33902:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x28a79f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x424a55 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f28a79f; op2val:0x3fc24a55;
op3val:0x7f5b6db6; valaddr_reg:x3; val_offset:101706*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101706*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33903:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x28a79f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x424a55 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f28a79f; op2val:0x3fc24a55;
op3val:0x7f666666; valaddr_reg:x3; val_offset:101709*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101709*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33904:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x28a79f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x424a55 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f28a79f; op2val:0x3fc24a55;
op3val:0x7f6db6db; valaddr_reg:x3; val_offset:101712*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101712*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33905:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x28a79f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x424a55 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f28a79f; op2val:0x3fc24a55;
op3val:0x7f7ffff8; valaddr_reg:x3; val_offset:101715*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101715*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33906:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x28a79f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x424a55 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f28a79f; op2val:0x3fc24a55;
op3val:0x7f7ffffc; valaddr_reg:x3; val_offset:101718*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101718*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33907:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x28a79f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x424a55 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f28a79f; op2val:0x3fc24a55;
op3val:0x7f7ffffe; valaddr_reg:x3; val_offset:101721*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101721*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33908:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x293481 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f293481; op2val:0x0;
op3val:0x800001; valaddr_reg:x3; val_offset:101724*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101724*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33909:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x293481 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f293481; op2val:0x0;
op3val:0x800003; valaddr_reg:x3; val_offset:101727*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101727*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33910:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x293481 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f293481; op2val:0x0;
op3val:0x800007; valaddr_reg:x3; val_offset:101730*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101730*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33911:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x293481 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f293481; op2val:0x0;
op3val:0x999999; valaddr_reg:x3; val_offset:101733*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101733*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33912:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x293481 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f293481; op2val:0x0;
op3val:0xa49249; valaddr_reg:x3; val_offset:101736*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101736*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33913:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x293481 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f293481; op2val:0x0;
op3val:0xb33333; valaddr_reg:x3; val_offset:101739*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101739*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33914:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x293481 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f293481; op2val:0x0;
op3val:0xb6db6d; valaddr_reg:x3; val_offset:101742*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101742*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33915:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x293481 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f293481; op2val:0x0;
op3val:0xbbbbbb; valaddr_reg:x3; val_offset:101745*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101745*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33916:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x293481 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f293481; op2val:0x0;
op3val:0xc44444; valaddr_reg:x3; val_offset:101748*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101748*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33917:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x293481 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f293481; op2val:0x0;
op3val:0xcccccc; valaddr_reg:x3; val_offset:101751*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101751*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33918:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x293481 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f293481; op2val:0x0;
op3val:0xdb6db6; valaddr_reg:x3; val_offset:101754*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101754*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33919:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x293481 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f293481; op2val:0x0;
op3val:0xe66666; valaddr_reg:x3; val_offset:101757*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101757*0 + 3*264*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2133361299,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4473924,32,FLEN)
NAN_BOXED(2133361299,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5033164,32,FLEN)
NAN_BOXED(2133361299,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5991862,32,FLEN)
NAN_BOXED(2133361299,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(6710886,32,FLEN)
NAN_BOXED(2133361299,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7190235,32,FLEN)
NAN_BOXED(2133361299,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388600,32,FLEN)
NAN_BOXED(2133361299,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388604,32,FLEN)
NAN_BOXED(2133361299,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388606,32,FLEN)
NAN_BOXED(2133361299,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1182793728,32,FLEN)
NAN_BOXED(2133361299,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1182793729,32,FLEN)
NAN_BOXED(2133361299,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1182793731,32,FLEN)
NAN_BOXED(2133361299,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1182793735,32,FLEN)
NAN_BOXED(2133361299,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1182793743,32,FLEN)
NAN_BOXED(2133361299,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1182793759,32,FLEN)
NAN_BOXED(2133361299,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1182793791,32,FLEN)
NAN_BOXED(2133361299,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1182793855,32,FLEN)
NAN_BOXED(2133361299,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1182793983,32,FLEN)
NAN_BOXED(2133361299,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1182794239,32,FLEN)
NAN_BOXED(2133361299,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1182794751,32,FLEN)
NAN_BOXED(2133361299,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1182795775,32,FLEN)
NAN_BOXED(2133361299,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1182797823,32,FLEN)
NAN_BOXED(2133361299,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1182801919,32,FLEN)
NAN_BOXED(2133361299,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1182810111,32,FLEN)
NAN_BOXED(2133361299,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1182826495,32,FLEN)
NAN_BOXED(2133361299,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1182859263,32,FLEN)
NAN_BOXED(2133361299,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1182924799,32,FLEN)
NAN_BOXED(2133361299,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1183055871,32,FLEN)
NAN_BOXED(2133361299,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1183318015,32,FLEN)
NAN_BOXED(2133361299,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1183842303,32,FLEN)
NAN_BOXED(2133361299,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1184890879,32,FLEN)
NAN_BOXED(2133361299,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1186988031,32,FLEN)
NAN_BOXED(2133361299,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1186988032,32,FLEN)
NAN_BOXED(2133361299,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1189085184,32,FLEN)
NAN_BOXED(2133361299,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1190133760,32,FLEN)
NAN_BOXED(2133361299,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1190658048,32,FLEN)
NAN_BOXED(2133361299,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1190920192,32,FLEN)
NAN_BOXED(2133361299,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1191051264,32,FLEN)
NAN_BOXED(2133361299,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1191116800,32,FLEN)
NAN_BOXED(2133361299,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1191149568,32,FLEN)
NAN_BOXED(2133361299,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1191165952,32,FLEN)
NAN_BOXED(2133361299,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1191174144,32,FLEN)
NAN_BOXED(2133361299,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1191178240,32,FLEN)
NAN_BOXED(2133361299,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1191180288,32,FLEN)
NAN_BOXED(2133361299,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1191181312,32,FLEN)
NAN_BOXED(2133361299,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1191181824,32,FLEN)
NAN_BOXED(2133361299,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1191182080,32,FLEN)
NAN_BOXED(2133361299,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1191182208,32,FLEN)
NAN_BOXED(2133361299,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1191182272,32,FLEN)
NAN_BOXED(2133361299,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1191182304,32,FLEN)
NAN_BOXED(2133361299,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1191182320,32,FLEN)
NAN_BOXED(2133361299,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1191182328,32,FLEN)
NAN_BOXED(2133361299,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1191182332,32,FLEN)
NAN_BOXED(2133361299,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1191182334,32,FLEN)
NAN_BOXED(2133361299,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1191182335,32,FLEN)
NAN_BOXED(2133370783,32,FLEN)
NAN_BOXED(1069697621,32,FLEN)
NAN_BOXED(1879048192,32,FLEN)
NAN_BOXED(2133370783,32,FLEN)
NAN_BOXED(1069697621,32,FLEN)
NAN_BOXED(1879048193,32,FLEN)
NAN_BOXED(2133370783,32,FLEN)
NAN_BOXED(1069697621,32,FLEN)
NAN_BOXED(1879048195,32,FLEN)
NAN_BOXED(2133370783,32,FLEN)
NAN_BOXED(1069697621,32,FLEN)
NAN_BOXED(1879048199,32,FLEN)
NAN_BOXED(2133370783,32,FLEN)
NAN_BOXED(1069697621,32,FLEN)
NAN_BOXED(1879048207,32,FLEN)
NAN_BOXED(2133370783,32,FLEN)
NAN_BOXED(1069697621,32,FLEN)
NAN_BOXED(1879048223,32,FLEN)
NAN_BOXED(2133370783,32,FLEN)
NAN_BOXED(1069697621,32,FLEN)
NAN_BOXED(1879048255,32,FLEN)
NAN_BOXED(2133370783,32,FLEN)
NAN_BOXED(1069697621,32,FLEN)
NAN_BOXED(1879048319,32,FLEN)
NAN_BOXED(2133370783,32,FLEN)
NAN_BOXED(1069697621,32,FLEN)
NAN_BOXED(1879048447,32,FLEN)
NAN_BOXED(2133370783,32,FLEN)
NAN_BOXED(1069697621,32,FLEN)
NAN_BOXED(1879048703,32,FLEN)
NAN_BOXED(2133370783,32,FLEN)
NAN_BOXED(1069697621,32,FLEN)
NAN_BOXED(1879049215,32,FLEN)
NAN_BOXED(2133370783,32,FLEN)
NAN_BOXED(1069697621,32,FLEN)
NAN_BOXED(1879050239,32,FLEN)
NAN_BOXED(2133370783,32,FLEN)
NAN_BOXED(1069697621,32,FLEN)
NAN_BOXED(1879052287,32,FLEN)
NAN_BOXED(2133370783,32,FLEN)
NAN_BOXED(1069697621,32,FLEN)
NAN_BOXED(1879056383,32,FLEN)
NAN_BOXED(2133370783,32,FLEN)
NAN_BOXED(1069697621,32,FLEN)
NAN_BOXED(1879064575,32,FLEN)
NAN_BOXED(2133370783,32,FLEN)
NAN_BOXED(1069697621,32,FLEN)
NAN_BOXED(1879080959,32,FLEN)
NAN_BOXED(2133370783,32,FLEN)
NAN_BOXED(1069697621,32,FLEN)
NAN_BOXED(1879113727,32,FLEN)
NAN_BOXED(2133370783,32,FLEN)
NAN_BOXED(1069697621,32,FLEN)
NAN_BOXED(1879179263,32,FLEN)
NAN_BOXED(2133370783,32,FLEN)
NAN_BOXED(1069697621,32,FLEN)
NAN_BOXED(1879310335,32,FLEN)
NAN_BOXED(2133370783,32,FLEN)
NAN_BOXED(1069697621,32,FLEN)
NAN_BOXED(1879572479,32,FLEN)
NAN_BOXED(2133370783,32,FLEN)
NAN_BOXED(1069697621,32,FLEN)
NAN_BOXED(1880096767,32,FLEN)
NAN_BOXED(2133370783,32,FLEN)
NAN_BOXED(1069697621,32,FLEN)
NAN_BOXED(1881145343,32,FLEN)
NAN_BOXED(2133370783,32,FLEN)
NAN_BOXED(1069697621,32,FLEN)
NAN_BOXED(1883242495,32,FLEN)
NAN_BOXED(2133370783,32,FLEN)
NAN_BOXED(1069697621,32,FLEN)
NAN_BOXED(1883242496,32,FLEN)
NAN_BOXED(2133370783,32,FLEN)
NAN_BOXED(1069697621,32,FLEN)
NAN_BOXED(1885339648,32,FLEN)
NAN_BOXED(2133370783,32,FLEN)
NAN_BOXED(1069697621,32,FLEN)
NAN_BOXED(1886388224,32,FLEN)
NAN_BOXED(2133370783,32,FLEN)
NAN_BOXED(1069697621,32,FLEN)
NAN_BOXED(1886912512,32,FLEN)
NAN_BOXED(2133370783,32,FLEN)
NAN_BOXED(1069697621,32,FLEN)
NAN_BOXED(1887174656,32,FLEN)
NAN_BOXED(2133370783,32,FLEN)
NAN_BOXED(1069697621,32,FLEN)
NAN_BOXED(1887305728,32,FLEN)
NAN_BOXED(2133370783,32,FLEN)
NAN_BOXED(1069697621,32,FLEN)
NAN_BOXED(1887371264,32,FLEN)
NAN_BOXED(2133370783,32,FLEN)
NAN_BOXED(1069697621,32,FLEN)
NAN_BOXED(1887404032,32,FLEN)
NAN_BOXED(2133370783,32,FLEN)
NAN_BOXED(1069697621,32,FLEN)
NAN_BOXED(1887420416,32,FLEN)
NAN_BOXED(2133370783,32,FLEN)
NAN_BOXED(1069697621,32,FLEN)
NAN_BOXED(1887428608,32,FLEN)
NAN_BOXED(2133370783,32,FLEN)
NAN_BOXED(1069697621,32,FLEN)
NAN_BOXED(1887432704,32,FLEN)
NAN_BOXED(2133370783,32,FLEN)
NAN_BOXED(1069697621,32,FLEN)
NAN_BOXED(1887434752,32,FLEN)
NAN_BOXED(2133370783,32,FLEN)
NAN_BOXED(1069697621,32,FLEN)
NAN_BOXED(1887435776,32,FLEN)
NAN_BOXED(2133370783,32,FLEN)
NAN_BOXED(1069697621,32,FLEN)
NAN_BOXED(1887436288,32,FLEN)
NAN_BOXED(2133370783,32,FLEN)
NAN_BOXED(1069697621,32,FLEN)
NAN_BOXED(1887436544,32,FLEN)
NAN_BOXED(2133370783,32,FLEN)
NAN_BOXED(1069697621,32,FLEN)
NAN_BOXED(1887436672,32,FLEN)
NAN_BOXED(2133370783,32,FLEN)
NAN_BOXED(1069697621,32,FLEN)
NAN_BOXED(1887436736,32,FLEN)
NAN_BOXED(2133370783,32,FLEN)
NAN_BOXED(1069697621,32,FLEN)
NAN_BOXED(1887436768,32,FLEN)
NAN_BOXED(2133370783,32,FLEN)
NAN_BOXED(1069697621,32,FLEN)
NAN_BOXED(1887436784,32,FLEN)
NAN_BOXED(2133370783,32,FLEN)
NAN_BOXED(1069697621,32,FLEN)
NAN_BOXED(1887436792,32,FLEN)
NAN_BOXED(2133370783,32,FLEN)
NAN_BOXED(1069697621,32,FLEN)
NAN_BOXED(1887436796,32,FLEN)
NAN_BOXED(2133370783,32,FLEN)
NAN_BOXED(1069697621,32,FLEN)
NAN_BOXED(1887436798,32,FLEN)
NAN_BOXED(2133370783,32,FLEN)
NAN_BOXED(1069697621,32,FLEN)
NAN_BOXED(1887436799,32,FLEN)
NAN_BOXED(2133370783,32,FLEN)
NAN_BOXED(1069697621,32,FLEN)
NAN_BOXED(2130706433,32,FLEN)
NAN_BOXED(2133370783,32,FLEN)
NAN_BOXED(1069697621,32,FLEN)
NAN_BOXED(2130706435,32,FLEN)
NAN_BOXED(2133370783,32,FLEN)
NAN_BOXED(1069697621,32,FLEN)
NAN_BOXED(2130706439,32,FLEN)
NAN_BOXED(2133370783,32,FLEN)
NAN_BOXED(1069697621,32,FLEN)
NAN_BOXED(2132384153,32,FLEN)
NAN_BOXED(2133370783,32,FLEN)
NAN_BOXED(1069697621,32,FLEN)
NAN_BOXED(2133103177,32,FLEN)
NAN_BOXED(2133370783,32,FLEN)
NAN_BOXED(1069697621,32,FLEN)
NAN_BOXED(2134061875,32,FLEN)
NAN_BOXED(2133370783,32,FLEN)
NAN_BOXED(1069697621,32,FLEN)
NAN_BOXED(2134301549,32,FLEN)
NAN_BOXED(2133370783,32,FLEN)
NAN_BOXED(1069697621,32,FLEN)
NAN_BOXED(2134621115,32,FLEN)
NAN_BOXED(2133370783,32,FLEN)
NAN_BOXED(1069697621,32,FLEN)
NAN_BOXED(2135180356,32,FLEN)
NAN_BOXED(2133370783,32,FLEN)
NAN_BOXED(1069697621,32,FLEN)
NAN_BOXED(2135739596,32,FLEN)
NAN_BOXED(2133370783,32,FLEN)
NAN_BOXED(1069697621,32,FLEN)
NAN_BOXED(2136698294,32,FLEN)
NAN_BOXED(2133370783,32,FLEN)
NAN_BOXED(1069697621,32,FLEN)
NAN_BOXED(2137417318,32,FLEN)
NAN_BOXED(2133370783,32,FLEN)
NAN_BOXED(1069697621,32,FLEN)
NAN_BOXED(2137896667,32,FLEN)
NAN_BOXED(2133370783,32,FLEN)
NAN_BOXED(1069697621,32,FLEN)
NAN_BOXED(2139095032,32,FLEN)
NAN_BOXED(2133370783,32,FLEN)
NAN_BOXED(1069697621,32,FLEN)
NAN_BOXED(2139095036,32,FLEN)
NAN_BOXED(2133370783,32,FLEN)
NAN_BOXED(1069697621,32,FLEN)
NAN_BOXED(2139095038,32,FLEN)
NAN_BOXED(2133406849,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(2133406849,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388611,32,FLEN)
NAN_BOXED(2133406849,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388615,32,FLEN)
NAN_BOXED(2133406849,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(10066329,32,FLEN)
NAN_BOXED(2133406849,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(10785353,32,FLEN)
NAN_BOXED(2133406849,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(11744051,32,FLEN)
NAN_BOXED(2133406849,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(11983725,32,FLEN)
NAN_BOXED(2133406849,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(12303291,32,FLEN)
NAN_BOXED(2133406849,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(12862532,32,FLEN)
NAN_BOXED(2133406849,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(13421772,32,FLEN)
NAN_BOXED(2133406849,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(14380470,32,FLEN)
NAN_BOXED(2133406849,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(15099494,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
