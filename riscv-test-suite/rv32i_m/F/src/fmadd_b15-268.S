
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:17:59 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_34176:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2aa4ec and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2aa4ec; op2val:0x80000000;
op3val:0x8a80000f; valaddr_reg:x3; val_offset:102528*0 + 3*267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102528*0 + 3*267*FLEN/8, x4, x1, x2)

inst_34177:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2aa4ec and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2aa4ec; op2val:0x80000000;
op3val:0x8a80001f; valaddr_reg:x3; val_offset:102531*0 + 3*267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102531*0 + 3*267*FLEN/8, x4, x1, x2)

inst_34178:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2aa4ec and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2aa4ec; op2val:0x80000000;
op3val:0x8a80003f; valaddr_reg:x3; val_offset:102534*0 + 3*267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102534*0 + 3*267*FLEN/8, x4, x1, x2)

inst_34179:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2aa4ec and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2aa4ec; op2val:0x80000000;
op3val:0x8a80007f; valaddr_reg:x3; val_offset:102537*0 + 3*267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102537*0 + 3*267*FLEN/8, x4, x1, x2)

inst_34180:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2aa4ec and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2aa4ec; op2val:0x80000000;
op3val:0x8a8000ff; valaddr_reg:x3; val_offset:102540*0 + 3*267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102540*0 + 3*267*FLEN/8, x4, x1, x2)

inst_34181:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2aa4ec and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2aa4ec; op2val:0x80000000;
op3val:0x8a8001ff; valaddr_reg:x3; val_offset:102543*0 + 3*267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102543*0 + 3*267*FLEN/8, x4, x1, x2)

inst_34182:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2aa4ec and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2aa4ec; op2val:0x80000000;
op3val:0x8a8003ff; valaddr_reg:x3; val_offset:102546*0 + 3*267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102546*0 + 3*267*FLEN/8, x4, x1, x2)

inst_34183:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2aa4ec and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2aa4ec; op2val:0x80000000;
op3val:0x8a8007ff; valaddr_reg:x3; val_offset:102549*0 + 3*267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102549*0 + 3*267*FLEN/8, x4, x1, x2)

inst_34184:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2aa4ec and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2aa4ec; op2val:0x80000000;
op3val:0x8a800fff; valaddr_reg:x3; val_offset:102552*0 + 3*267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102552*0 + 3*267*FLEN/8, x4, x1, x2)

inst_34185:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2aa4ec and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2aa4ec; op2val:0x80000000;
op3val:0x8a801fff; valaddr_reg:x3; val_offset:102555*0 + 3*267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102555*0 + 3*267*FLEN/8, x4, x1, x2)

inst_34186:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2aa4ec and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2aa4ec; op2val:0x80000000;
op3val:0x8a803fff; valaddr_reg:x3; val_offset:102558*0 + 3*267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102558*0 + 3*267*FLEN/8, x4, x1, x2)

inst_34187:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2aa4ec and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2aa4ec; op2val:0x80000000;
op3val:0x8a807fff; valaddr_reg:x3; val_offset:102561*0 + 3*267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102561*0 + 3*267*FLEN/8, x4, x1, x2)

inst_34188:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2aa4ec and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2aa4ec; op2val:0x80000000;
op3val:0x8a80ffff; valaddr_reg:x3; val_offset:102564*0 + 3*267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102564*0 + 3*267*FLEN/8, x4, x1, x2)

inst_34189:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2aa4ec and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2aa4ec; op2val:0x80000000;
op3val:0x8a81ffff; valaddr_reg:x3; val_offset:102567*0 + 3*267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102567*0 + 3*267*FLEN/8, x4, x1, x2)

inst_34190:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2aa4ec and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2aa4ec; op2val:0x80000000;
op3val:0x8a83ffff; valaddr_reg:x3; val_offset:102570*0 + 3*267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102570*0 + 3*267*FLEN/8, x4, x1, x2)

inst_34191:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2aa4ec and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2aa4ec; op2val:0x80000000;
op3val:0x8a87ffff; valaddr_reg:x3; val_offset:102573*0 + 3*267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102573*0 + 3*267*FLEN/8, x4, x1, x2)

inst_34192:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2aa4ec and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2aa4ec; op2val:0x80000000;
op3val:0x8a8fffff; valaddr_reg:x3; val_offset:102576*0 + 3*267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102576*0 + 3*267*FLEN/8, x4, x1, x2)

inst_34193:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2aa4ec and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2aa4ec; op2val:0x80000000;
op3val:0x8a9fffff; valaddr_reg:x3; val_offset:102579*0 + 3*267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102579*0 + 3*267*FLEN/8, x4, x1, x2)

inst_34194:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2aa4ec and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2aa4ec; op2val:0x80000000;
op3val:0x8abfffff; valaddr_reg:x3; val_offset:102582*0 + 3*267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102582*0 + 3*267*FLEN/8, x4, x1, x2)

inst_34195:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2aa4ec and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2aa4ec; op2val:0x80000000;
op3val:0x8ac00000; valaddr_reg:x3; val_offset:102585*0 + 3*267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102585*0 + 3*267*FLEN/8, x4, x1, x2)

inst_34196:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2aa4ec and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2aa4ec; op2val:0x80000000;
op3val:0x8ae00000; valaddr_reg:x3; val_offset:102588*0 + 3*267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102588*0 + 3*267*FLEN/8, x4, x1, x2)

inst_34197:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2aa4ec and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2aa4ec; op2val:0x80000000;
op3val:0x8af00000; valaddr_reg:x3; val_offset:102591*0 + 3*267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102591*0 + 3*267*FLEN/8, x4, x1, x2)

inst_34198:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2aa4ec and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2aa4ec; op2val:0x80000000;
op3val:0x8af80000; valaddr_reg:x3; val_offset:102594*0 + 3*267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102594*0 + 3*267*FLEN/8, x4, x1, x2)

inst_34199:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2aa4ec and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2aa4ec; op2val:0x80000000;
op3val:0x8afc0000; valaddr_reg:x3; val_offset:102597*0 + 3*267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102597*0 + 3*267*FLEN/8, x4, x1, x2)

inst_34200:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2aa4ec and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2aa4ec; op2val:0x80000000;
op3val:0x8afe0000; valaddr_reg:x3; val_offset:102600*0 + 3*267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102600*0 + 3*267*FLEN/8, x4, x1, x2)

inst_34201:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2aa4ec and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2aa4ec; op2val:0x80000000;
op3val:0x8aff0000; valaddr_reg:x3; val_offset:102603*0 + 3*267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102603*0 + 3*267*FLEN/8, x4, x1, x2)

inst_34202:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2aa4ec and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2aa4ec; op2val:0x80000000;
op3val:0x8aff8000; valaddr_reg:x3; val_offset:102606*0 + 3*267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102606*0 + 3*267*FLEN/8, x4, x1, x2)

inst_34203:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2aa4ec and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2aa4ec; op2val:0x80000000;
op3val:0x8affc000; valaddr_reg:x3; val_offset:102609*0 + 3*267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102609*0 + 3*267*FLEN/8, x4, x1, x2)

inst_34204:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2aa4ec and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2aa4ec; op2val:0x80000000;
op3val:0x8affe000; valaddr_reg:x3; val_offset:102612*0 + 3*267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102612*0 + 3*267*FLEN/8, x4, x1, x2)

inst_34205:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2aa4ec and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2aa4ec; op2val:0x80000000;
op3val:0x8afff000; valaddr_reg:x3; val_offset:102615*0 + 3*267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102615*0 + 3*267*FLEN/8, x4, x1, x2)

inst_34206:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2aa4ec and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2aa4ec; op2val:0x80000000;
op3val:0x8afff800; valaddr_reg:x3; val_offset:102618*0 + 3*267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102618*0 + 3*267*FLEN/8, x4, x1, x2)

inst_34207:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2aa4ec and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2aa4ec; op2val:0x80000000;
op3val:0x8afffc00; valaddr_reg:x3; val_offset:102621*0 + 3*267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102621*0 + 3*267*FLEN/8, x4, x1, x2)

inst_34208:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2aa4ec and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2aa4ec; op2val:0x80000000;
op3val:0x8afffe00; valaddr_reg:x3; val_offset:102624*0 + 3*267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102624*0 + 3*267*FLEN/8, x4, x1, x2)

inst_34209:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2aa4ec and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2aa4ec; op2val:0x80000000;
op3val:0x8affff00; valaddr_reg:x3; val_offset:102627*0 + 3*267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102627*0 + 3*267*FLEN/8, x4, x1, x2)

inst_34210:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2aa4ec and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2aa4ec; op2val:0x80000000;
op3val:0x8affff80; valaddr_reg:x3; val_offset:102630*0 + 3*267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102630*0 + 3*267*FLEN/8, x4, x1, x2)

inst_34211:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2aa4ec and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2aa4ec; op2val:0x80000000;
op3val:0x8affffc0; valaddr_reg:x3; val_offset:102633*0 + 3*267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102633*0 + 3*267*FLEN/8, x4, x1, x2)

inst_34212:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2aa4ec and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2aa4ec; op2val:0x80000000;
op3val:0x8affffe0; valaddr_reg:x3; val_offset:102636*0 + 3*267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102636*0 + 3*267*FLEN/8, x4, x1, x2)

inst_34213:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2aa4ec and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2aa4ec; op2val:0x80000000;
op3val:0x8afffff0; valaddr_reg:x3; val_offset:102639*0 + 3*267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102639*0 + 3*267*FLEN/8, x4, x1, x2)

inst_34214:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2aa4ec and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2aa4ec; op2val:0x80000000;
op3val:0x8afffff8; valaddr_reg:x3; val_offset:102642*0 + 3*267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102642*0 + 3*267*FLEN/8, x4, x1, x2)

inst_34215:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2aa4ec and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2aa4ec; op2val:0x80000000;
op3val:0x8afffffc; valaddr_reg:x3; val_offset:102645*0 + 3*267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102645*0 + 3*267*FLEN/8, x4, x1, x2)

inst_34216:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2aa4ec and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2aa4ec; op2val:0x80000000;
op3val:0x8afffffe; valaddr_reg:x3; val_offset:102648*0 + 3*267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102648*0 + 3*267*FLEN/8, x4, x1, x2)

inst_34217:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2aa4ec and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2aa4ec; op2val:0x80000000;
op3val:0x8affffff; valaddr_reg:x3; val_offset:102651*0 + 3*267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102651*0 + 3*267*FLEN/8, x4, x1, x2)

inst_34218:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2aed44 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2aed44; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:102654*0 + 3*267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102654*0 + 3*267*FLEN/8, x4, x1, x2)

inst_34219:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2aed44 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2aed44; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:102657*0 + 3*267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102657*0 + 3*267*FLEN/8, x4, x1, x2)

inst_34220:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2aed44 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2aed44; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:102660*0 + 3*267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102660*0 + 3*267*FLEN/8, x4, x1, x2)

inst_34221:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2aed44 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2aed44; op2val:0x0;
op3val:0x199999; valaddr_reg:x3; val_offset:102663*0 + 3*267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102663*0 + 3*267*FLEN/8, x4, x1, x2)

inst_34222:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2aed44 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2aed44; op2val:0x0;
op3val:0x249249; valaddr_reg:x3; val_offset:102666*0 + 3*267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102666*0 + 3*267*FLEN/8, x4, x1, x2)

inst_34223:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2aed44 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2aed44; op2val:0x0;
op3val:0x333333; valaddr_reg:x3; val_offset:102669*0 + 3*267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102669*0 + 3*267*FLEN/8, x4, x1, x2)

inst_34224:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2aed44 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2aed44; op2val:0x0;
op3val:0x36db6d; valaddr_reg:x3; val_offset:102672*0 + 3*267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102672*0 + 3*267*FLEN/8, x4, x1, x2)

inst_34225:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2aed44 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2aed44; op2val:0x0;
op3val:0x3bbbbb; valaddr_reg:x3; val_offset:102675*0 + 3*267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102675*0 + 3*267*FLEN/8, x4, x1, x2)

inst_34226:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2aed44 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2aed44; op2val:0x0;
op3val:0x444444; valaddr_reg:x3; val_offset:102678*0 + 3*267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102678*0 + 3*267*FLEN/8, x4, x1, x2)

inst_34227:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2aed44 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2aed44; op2val:0x0;
op3val:0x4ccccc; valaddr_reg:x3; val_offset:102681*0 + 3*267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102681*0 + 3*267*FLEN/8, x4, x1, x2)

inst_34228:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2aed44 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2aed44; op2val:0x0;
op3val:0x5b6db6; valaddr_reg:x3; val_offset:102684*0 + 3*267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102684*0 + 3*267*FLEN/8, x4, x1, x2)

inst_34229:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2aed44 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2aed44; op2val:0x0;
op3val:0x666666; valaddr_reg:x3; val_offset:102687*0 + 3*267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102687*0 + 3*267*FLEN/8, x4, x1, x2)

inst_34230:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2aed44 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2aed44; op2val:0x0;
op3val:0x6db6db; valaddr_reg:x3; val_offset:102690*0 + 3*267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102690*0 + 3*267*FLEN/8, x4, x1, x2)

inst_34231:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2aed44 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2aed44; op2val:0x0;
op3val:0x7ffff8; valaddr_reg:x3; val_offset:102693*0 + 3*267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102693*0 + 3*267*FLEN/8, x4, x1, x2)

inst_34232:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2aed44 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2aed44; op2val:0x0;
op3val:0x7ffffc; valaddr_reg:x3; val_offset:102696*0 + 3*267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102696*0 + 3*267*FLEN/8, x4, x1, x2)

inst_34233:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2aed44 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2aed44; op2val:0x0;
op3val:0x7ffffe; valaddr_reg:x3; val_offset:102699*0 + 3*267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102699*0 + 3*267*FLEN/8, x4, x1, x2)

inst_34234:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2aed44 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xe3 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2aed44; op2val:0x0;
op3val:0x71800000; valaddr_reg:x3; val_offset:102702*0 + 3*267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102702*0 + 3*267*FLEN/8, x4, x1, x2)

inst_34235:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2aed44 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xe3 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2aed44; op2val:0x0;
op3val:0x71800001; valaddr_reg:x3; val_offset:102705*0 + 3*267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102705*0 + 3*267*FLEN/8, x4, x1, x2)

inst_34236:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2aed44 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xe3 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2aed44; op2val:0x0;
op3val:0x71800003; valaddr_reg:x3; val_offset:102708*0 + 3*267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102708*0 + 3*267*FLEN/8, x4, x1, x2)

inst_34237:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2aed44 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xe3 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2aed44; op2val:0x0;
op3val:0x71800007; valaddr_reg:x3; val_offset:102711*0 + 3*267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102711*0 + 3*267*FLEN/8, x4, x1, x2)

inst_34238:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2aed44 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xe3 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2aed44; op2val:0x0;
op3val:0x7180000f; valaddr_reg:x3; val_offset:102714*0 + 3*267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102714*0 + 3*267*FLEN/8, x4, x1, x2)

inst_34239:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2aed44 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xe3 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2aed44; op2val:0x0;
op3val:0x7180001f; valaddr_reg:x3; val_offset:102717*0 + 3*267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102717*0 + 3*267*FLEN/8, x4, x1, x2)

inst_34240:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2aed44 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xe3 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2aed44; op2val:0x0;
op3val:0x7180003f; valaddr_reg:x3; val_offset:102720*0 + 3*267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102720*0 + 3*267*FLEN/8, x4, x1, x2)

inst_34241:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2aed44 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xe3 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2aed44; op2val:0x0;
op3val:0x7180007f; valaddr_reg:x3; val_offset:102723*0 + 3*267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102723*0 + 3*267*FLEN/8, x4, x1, x2)

inst_34242:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2aed44 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xe3 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2aed44; op2val:0x0;
op3val:0x718000ff; valaddr_reg:x3; val_offset:102726*0 + 3*267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102726*0 + 3*267*FLEN/8, x4, x1, x2)

inst_34243:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2aed44 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xe3 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2aed44; op2val:0x0;
op3val:0x718001ff; valaddr_reg:x3; val_offset:102729*0 + 3*267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102729*0 + 3*267*FLEN/8, x4, x1, x2)

inst_34244:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2aed44 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xe3 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2aed44; op2val:0x0;
op3val:0x718003ff; valaddr_reg:x3; val_offset:102732*0 + 3*267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102732*0 + 3*267*FLEN/8, x4, x1, x2)

inst_34245:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2aed44 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xe3 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2aed44; op2val:0x0;
op3val:0x718007ff; valaddr_reg:x3; val_offset:102735*0 + 3*267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102735*0 + 3*267*FLEN/8, x4, x1, x2)

inst_34246:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2aed44 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xe3 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2aed44; op2val:0x0;
op3val:0x71800fff; valaddr_reg:x3; val_offset:102738*0 + 3*267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102738*0 + 3*267*FLEN/8, x4, x1, x2)

inst_34247:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2aed44 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xe3 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2aed44; op2val:0x0;
op3val:0x71801fff; valaddr_reg:x3; val_offset:102741*0 + 3*267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102741*0 + 3*267*FLEN/8, x4, x1, x2)

inst_34248:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2aed44 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xe3 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2aed44; op2val:0x0;
op3val:0x71803fff; valaddr_reg:x3; val_offset:102744*0 + 3*267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102744*0 + 3*267*FLEN/8, x4, x1, x2)

inst_34249:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2aed44 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xe3 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2aed44; op2val:0x0;
op3val:0x71807fff; valaddr_reg:x3; val_offset:102747*0 + 3*267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102747*0 + 3*267*FLEN/8, x4, x1, x2)

inst_34250:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2aed44 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xe3 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2aed44; op2val:0x0;
op3val:0x7180ffff; valaddr_reg:x3; val_offset:102750*0 + 3*267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102750*0 + 3*267*FLEN/8, x4, x1, x2)

inst_34251:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2aed44 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xe3 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2aed44; op2val:0x0;
op3val:0x7181ffff; valaddr_reg:x3; val_offset:102753*0 + 3*267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102753*0 + 3*267*FLEN/8, x4, x1, x2)

inst_34252:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2aed44 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xe3 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2aed44; op2val:0x0;
op3val:0x7183ffff; valaddr_reg:x3; val_offset:102756*0 + 3*267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102756*0 + 3*267*FLEN/8, x4, x1, x2)

inst_34253:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2aed44 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xe3 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2aed44; op2val:0x0;
op3val:0x7187ffff; valaddr_reg:x3; val_offset:102759*0 + 3*267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102759*0 + 3*267*FLEN/8, x4, x1, x2)

inst_34254:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2aed44 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xe3 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2aed44; op2val:0x0;
op3val:0x718fffff; valaddr_reg:x3; val_offset:102762*0 + 3*267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102762*0 + 3*267*FLEN/8, x4, x1, x2)

inst_34255:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2aed44 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xe3 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2aed44; op2val:0x0;
op3val:0x719fffff; valaddr_reg:x3; val_offset:102765*0 + 3*267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102765*0 + 3*267*FLEN/8, x4, x1, x2)

inst_34256:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2aed44 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xe3 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2aed44; op2val:0x0;
op3val:0x71bfffff; valaddr_reg:x3; val_offset:102768*0 + 3*267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102768*0 + 3*267*FLEN/8, x4, x1, x2)

inst_34257:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2aed44 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xe3 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2aed44; op2val:0x0;
op3val:0x71c00000; valaddr_reg:x3; val_offset:102771*0 + 3*267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102771*0 + 3*267*FLEN/8, x4, x1, x2)

inst_34258:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2aed44 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xe3 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2aed44; op2val:0x0;
op3val:0x71e00000; valaddr_reg:x3; val_offset:102774*0 + 3*267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102774*0 + 3*267*FLEN/8, x4, x1, x2)

inst_34259:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2aed44 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xe3 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2aed44; op2val:0x0;
op3val:0x71f00000; valaddr_reg:x3; val_offset:102777*0 + 3*267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102777*0 + 3*267*FLEN/8, x4, x1, x2)

inst_34260:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2aed44 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xe3 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2aed44; op2val:0x0;
op3val:0x71f80000; valaddr_reg:x3; val_offset:102780*0 + 3*267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102780*0 + 3*267*FLEN/8, x4, x1, x2)

inst_34261:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2aed44 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xe3 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2aed44; op2val:0x0;
op3val:0x71fc0000; valaddr_reg:x3; val_offset:102783*0 + 3*267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102783*0 + 3*267*FLEN/8, x4, x1, x2)

inst_34262:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2aed44 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xe3 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2aed44; op2val:0x0;
op3val:0x71fe0000; valaddr_reg:x3; val_offset:102786*0 + 3*267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102786*0 + 3*267*FLEN/8, x4, x1, x2)

inst_34263:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2aed44 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xe3 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2aed44; op2val:0x0;
op3val:0x71ff0000; valaddr_reg:x3; val_offset:102789*0 + 3*267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102789*0 + 3*267*FLEN/8, x4, x1, x2)

inst_34264:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2aed44 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xe3 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2aed44; op2val:0x0;
op3val:0x71ff8000; valaddr_reg:x3; val_offset:102792*0 + 3*267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102792*0 + 3*267*FLEN/8, x4, x1, x2)

inst_34265:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2aed44 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xe3 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2aed44; op2val:0x0;
op3val:0x71ffc000; valaddr_reg:x3; val_offset:102795*0 + 3*267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102795*0 + 3*267*FLEN/8, x4, x1, x2)

inst_34266:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2aed44 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xe3 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2aed44; op2val:0x0;
op3val:0x71ffe000; valaddr_reg:x3; val_offset:102798*0 + 3*267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102798*0 + 3*267*FLEN/8, x4, x1, x2)

inst_34267:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2aed44 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xe3 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2aed44; op2val:0x0;
op3val:0x71fff000; valaddr_reg:x3; val_offset:102801*0 + 3*267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102801*0 + 3*267*FLEN/8, x4, x1, x2)

inst_34268:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2aed44 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xe3 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2aed44; op2val:0x0;
op3val:0x71fff800; valaddr_reg:x3; val_offset:102804*0 + 3*267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102804*0 + 3*267*FLEN/8, x4, x1, x2)

inst_34269:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2aed44 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xe3 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2aed44; op2val:0x0;
op3val:0x71fffc00; valaddr_reg:x3; val_offset:102807*0 + 3*267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102807*0 + 3*267*FLEN/8, x4, x1, x2)

inst_34270:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2aed44 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xe3 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2aed44; op2val:0x0;
op3val:0x71fffe00; valaddr_reg:x3; val_offset:102810*0 + 3*267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102810*0 + 3*267*FLEN/8, x4, x1, x2)

inst_34271:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2aed44 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xe3 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2aed44; op2val:0x0;
op3val:0x71ffff00; valaddr_reg:x3; val_offset:102813*0 + 3*267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102813*0 + 3*267*FLEN/8, x4, x1, x2)

inst_34272:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2aed44 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xe3 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2aed44; op2val:0x0;
op3val:0x71ffff80; valaddr_reg:x3; val_offset:102816*0 + 3*267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102816*0 + 3*267*FLEN/8, x4, x1, x2)

inst_34273:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2aed44 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xe3 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2aed44; op2val:0x0;
op3val:0x71ffffc0; valaddr_reg:x3; val_offset:102819*0 + 3*267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102819*0 + 3*267*FLEN/8, x4, x1, x2)

inst_34274:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2aed44 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xe3 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2aed44; op2val:0x0;
op3val:0x71ffffe0; valaddr_reg:x3; val_offset:102822*0 + 3*267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102822*0 + 3*267*FLEN/8, x4, x1, x2)

inst_34275:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2aed44 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xe3 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2aed44; op2val:0x0;
op3val:0x71fffff0; valaddr_reg:x3; val_offset:102825*0 + 3*267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102825*0 + 3*267*FLEN/8, x4, x1, x2)

inst_34276:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2aed44 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xe3 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2aed44; op2val:0x0;
op3val:0x71fffff8; valaddr_reg:x3; val_offset:102828*0 + 3*267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102828*0 + 3*267*FLEN/8, x4, x1, x2)

inst_34277:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2aed44 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xe3 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2aed44; op2val:0x0;
op3val:0x71fffffc; valaddr_reg:x3; val_offset:102831*0 + 3*267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102831*0 + 3*267*FLEN/8, x4, x1, x2)

inst_34278:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2aed44 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xe3 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2aed44; op2val:0x0;
op3val:0x71fffffe; valaddr_reg:x3; val_offset:102834*0 + 3*267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102834*0 + 3*267*FLEN/8, x4, x1, x2)

inst_34279:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2aed44 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xe3 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2aed44; op2val:0x0;
op3val:0x71ffffff; valaddr_reg:x3; val_offset:102837*0 + 3*267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102837*0 + 3*267*FLEN/8, x4, x1, x2)

inst_34280:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b32e7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b32e7; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:102840*0 + 3*267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102840*0 + 3*267*FLEN/8, x4, x1, x2)

inst_34281:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b32e7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b32e7; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:102843*0 + 3*267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102843*0 + 3*267*FLEN/8, x4, x1, x2)

inst_34282:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b32e7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b32e7; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:102846*0 + 3*267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102846*0 + 3*267*FLEN/8, x4, x1, x2)

inst_34283:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b32e7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b32e7; op2val:0x0;
op3val:0x199999; valaddr_reg:x3; val_offset:102849*0 + 3*267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102849*0 + 3*267*FLEN/8, x4, x1, x2)

inst_34284:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b32e7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b32e7; op2val:0x0;
op3val:0x249249; valaddr_reg:x3; val_offset:102852*0 + 3*267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102852*0 + 3*267*FLEN/8, x4, x1, x2)

inst_34285:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b32e7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b32e7; op2val:0x0;
op3val:0x333333; valaddr_reg:x3; val_offset:102855*0 + 3*267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102855*0 + 3*267*FLEN/8, x4, x1, x2)

inst_34286:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b32e7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b32e7; op2val:0x0;
op3val:0x36db6d; valaddr_reg:x3; val_offset:102858*0 + 3*267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102858*0 + 3*267*FLEN/8, x4, x1, x2)

inst_34287:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b32e7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b32e7; op2val:0x0;
op3val:0x3bbbbb; valaddr_reg:x3; val_offset:102861*0 + 3*267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102861*0 + 3*267*FLEN/8, x4, x1, x2)

inst_34288:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b32e7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b32e7; op2val:0x0;
op3val:0x444444; valaddr_reg:x3; val_offset:102864*0 + 3*267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102864*0 + 3*267*FLEN/8, x4, x1, x2)

inst_34289:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b32e7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b32e7; op2val:0x0;
op3val:0x4ccccc; valaddr_reg:x3; val_offset:102867*0 + 3*267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102867*0 + 3*267*FLEN/8, x4, x1, x2)

inst_34290:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b32e7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b32e7; op2val:0x0;
op3val:0x5b6db6; valaddr_reg:x3; val_offset:102870*0 + 3*267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102870*0 + 3*267*FLEN/8, x4, x1, x2)

inst_34291:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b32e7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b32e7; op2val:0x0;
op3val:0x666666; valaddr_reg:x3; val_offset:102873*0 + 3*267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102873*0 + 3*267*FLEN/8, x4, x1, x2)

inst_34292:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b32e7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b32e7; op2val:0x0;
op3val:0x6db6db; valaddr_reg:x3; val_offset:102876*0 + 3*267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102876*0 + 3*267*FLEN/8, x4, x1, x2)

inst_34293:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b32e7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b32e7; op2val:0x0;
op3val:0x7ffff8; valaddr_reg:x3; val_offset:102879*0 + 3*267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102879*0 + 3*267*FLEN/8, x4, x1, x2)

inst_34294:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b32e7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b32e7; op2val:0x0;
op3val:0x7ffffc; valaddr_reg:x3; val_offset:102882*0 + 3*267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102882*0 + 3*267*FLEN/8, x4, x1, x2)

inst_34295:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b32e7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b32e7; op2val:0x0;
op3val:0x7ffffe; valaddr_reg:x3; val_offset:102885*0 + 3*267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102885*0 + 3*267*FLEN/8, x4, x1, x2)

inst_34296:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b32e7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b32e7; op2val:0x0;
op3val:0x3800000; valaddr_reg:x3; val_offset:102888*0 + 3*267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102888*0 + 3*267*FLEN/8, x4, x1, x2)

inst_34297:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b32e7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b32e7; op2val:0x0;
op3val:0x3800001; valaddr_reg:x3; val_offset:102891*0 + 3*267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102891*0 + 3*267*FLEN/8, x4, x1, x2)

inst_34298:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b32e7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b32e7; op2val:0x0;
op3val:0x3800003; valaddr_reg:x3; val_offset:102894*0 + 3*267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102894*0 + 3*267*FLEN/8, x4, x1, x2)

inst_34299:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b32e7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b32e7; op2val:0x0;
op3val:0x3800007; valaddr_reg:x3; val_offset:102897*0 + 3*267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102897*0 + 3*267*FLEN/8, x4, x1, x2)

inst_34300:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b32e7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b32e7; op2val:0x0;
op3val:0x380000f; valaddr_reg:x3; val_offset:102900*0 + 3*267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102900*0 + 3*267*FLEN/8, x4, x1, x2)

inst_34301:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b32e7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b32e7; op2val:0x0;
op3val:0x380001f; valaddr_reg:x3; val_offset:102903*0 + 3*267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102903*0 + 3*267*FLEN/8, x4, x1, x2)

inst_34302:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b32e7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b32e7; op2val:0x0;
op3val:0x380003f; valaddr_reg:x3; val_offset:102906*0 + 3*267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102906*0 + 3*267*FLEN/8, x4, x1, x2)

inst_34303:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b32e7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b32e7; op2val:0x0;
op3val:0x380007f; valaddr_reg:x3; val_offset:102909*0 + 3*267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102909*0 + 3*267*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2133501164,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323644431,32,FLEN)
NAN_BOXED(2133501164,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323644447,32,FLEN)
NAN_BOXED(2133501164,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323644479,32,FLEN)
NAN_BOXED(2133501164,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323644543,32,FLEN)
NAN_BOXED(2133501164,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323644671,32,FLEN)
NAN_BOXED(2133501164,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323644927,32,FLEN)
NAN_BOXED(2133501164,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323645439,32,FLEN)
NAN_BOXED(2133501164,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323646463,32,FLEN)
NAN_BOXED(2133501164,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323648511,32,FLEN)
NAN_BOXED(2133501164,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323652607,32,FLEN)
NAN_BOXED(2133501164,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323660799,32,FLEN)
NAN_BOXED(2133501164,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323677183,32,FLEN)
NAN_BOXED(2133501164,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323709951,32,FLEN)
NAN_BOXED(2133501164,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323775487,32,FLEN)
NAN_BOXED(2133501164,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323906559,32,FLEN)
NAN_BOXED(2133501164,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2324168703,32,FLEN)
NAN_BOXED(2133501164,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2324692991,32,FLEN)
NAN_BOXED(2133501164,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2325741567,32,FLEN)
NAN_BOXED(2133501164,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2327838719,32,FLEN)
NAN_BOXED(2133501164,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2327838720,32,FLEN)
NAN_BOXED(2133501164,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2329935872,32,FLEN)
NAN_BOXED(2133501164,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2330984448,32,FLEN)
NAN_BOXED(2133501164,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2331508736,32,FLEN)
NAN_BOXED(2133501164,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2331770880,32,FLEN)
NAN_BOXED(2133501164,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2331901952,32,FLEN)
NAN_BOXED(2133501164,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2331967488,32,FLEN)
NAN_BOXED(2133501164,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332000256,32,FLEN)
NAN_BOXED(2133501164,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332016640,32,FLEN)
NAN_BOXED(2133501164,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332024832,32,FLEN)
NAN_BOXED(2133501164,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332028928,32,FLEN)
NAN_BOXED(2133501164,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332030976,32,FLEN)
NAN_BOXED(2133501164,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332032000,32,FLEN)
NAN_BOXED(2133501164,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332032512,32,FLEN)
NAN_BOXED(2133501164,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332032768,32,FLEN)
NAN_BOXED(2133501164,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332032896,32,FLEN)
NAN_BOXED(2133501164,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332032960,32,FLEN)
NAN_BOXED(2133501164,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332032992,32,FLEN)
NAN_BOXED(2133501164,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332033008,32,FLEN)
NAN_BOXED(2133501164,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332033016,32,FLEN)
NAN_BOXED(2133501164,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332033020,32,FLEN)
NAN_BOXED(2133501164,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332033022,32,FLEN)
NAN_BOXED(2133501164,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332033023,32,FLEN)
NAN_BOXED(2133519684,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2133519684,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3,32,FLEN)
NAN_BOXED(2133519684,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7,32,FLEN)
NAN_BOXED(2133519684,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1677721,32,FLEN)
NAN_BOXED(2133519684,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2396745,32,FLEN)
NAN_BOXED(2133519684,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3355443,32,FLEN)
NAN_BOXED(2133519684,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3595117,32,FLEN)
NAN_BOXED(2133519684,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3914683,32,FLEN)
NAN_BOXED(2133519684,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4473924,32,FLEN)
NAN_BOXED(2133519684,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5033164,32,FLEN)
NAN_BOXED(2133519684,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5991862,32,FLEN)
NAN_BOXED(2133519684,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(6710886,32,FLEN)
NAN_BOXED(2133519684,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7190235,32,FLEN)
NAN_BOXED(2133519684,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388600,32,FLEN)
NAN_BOXED(2133519684,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388604,32,FLEN)
NAN_BOXED(2133519684,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388606,32,FLEN)
NAN_BOXED(2133519684,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1904214016,32,FLEN)
NAN_BOXED(2133519684,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1904214017,32,FLEN)
NAN_BOXED(2133519684,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1904214019,32,FLEN)
NAN_BOXED(2133519684,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1904214023,32,FLEN)
NAN_BOXED(2133519684,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1904214031,32,FLEN)
NAN_BOXED(2133519684,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1904214047,32,FLEN)
NAN_BOXED(2133519684,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1904214079,32,FLEN)
NAN_BOXED(2133519684,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1904214143,32,FLEN)
NAN_BOXED(2133519684,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1904214271,32,FLEN)
NAN_BOXED(2133519684,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1904214527,32,FLEN)
NAN_BOXED(2133519684,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1904215039,32,FLEN)
NAN_BOXED(2133519684,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1904216063,32,FLEN)
NAN_BOXED(2133519684,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1904218111,32,FLEN)
NAN_BOXED(2133519684,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1904222207,32,FLEN)
NAN_BOXED(2133519684,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1904230399,32,FLEN)
NAN_BOXED(2133519684,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1904246783,32,FLEN)
NAN_BOXED(2133519684,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1904279551,32,FLEN)
NAN_BOXED(2133519684,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1904345087,32,FLEN)
NAN_BOXED(2133519684,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1904476159,32,FLEN)
NAN_BOXED(2133519684,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1904738303,32,FLEN)
NAN_BOXED(2133519684,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1905262591,32,FLEN)
NAN_BOXED(2133519684,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1906311167,32,FLEN)
NAN_BOXED(2133519684,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1908408319,32,FLEN)
NAN_BOXED(2133519684,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1908408320,32,FLEN)
NAN_BOXED(2133519684,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1910505472,32,FLEN)
NAN_BOXED(2133519684,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1911554048,32,FLEN)
NAN_BOXED(2133519684,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1912078336,32,FLEN)
NAN_BOXED(2133519684,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1912340480,32,FLEN)
NAN_BOXED(2133519684,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1912471552,32,FLEN)
NAN_BOXED(2133519684,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1912537088,32,FLEN)
NAN_BOXED(2133519684,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1912569856,32,FLEN)
NAN_BOXED(2133519684,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1912586240,32,FLEN)
NAN_BOXED(2133519684,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1912594432,32,FLEN)
NAN_BOXED(2133519684,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1912598528,32,FLEN)
NAN_BOXED(2133519684,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1912600576,32,FLEN)
NAN_BOXED(2133519684,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1912601600,32,FLEN)
NAN_BOXED(2133519684,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1912602112,32,FLEN)
NAN_BOXED(2133519684,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1912602368,32,FLEN)
NAN_BOXED(2133519684,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1912602496,32,FLEN)
NAN_BOXED(2133519684,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1912602560,32,FLEN)
NAN_BOXED(2133519684,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1912602592,32,FLEN)
NAN_BOXED(2133519684,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1912602608,32,FLEN)
NAN_BOXED(2133519684,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1912602616,32,FLEN)
NAN_BOXED(2133519684,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1912602620,32,FLEN)
NAN_BOXED(2133519684,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1912602622,32,FLEN)
NAN_BOXED(2133519684,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1912602623,32,FLEN)
NAN_BOXED(2133537511,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2133537511,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3,32,FLEN)
NAN_BOXED(2133537511,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7,32,FLEN)
NAN_BOXED(2133537511,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1677721,32,FLEN)
NAN_BOXED(2133537511,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2396745,32,FLEN)
NAN_BOXED(2133537511,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3355443,32,FLEN)
NAN_BOXED(2133537511,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3595117,32,FLEN)
NAN_BOXED(2133537511,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3914683,32,FLEN)
NAN_BOXED(2133537511,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4473924,32,FLEN)
NAN_BOXED(2133537511,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5033164,32,FLEN)
NAN_BOXED(2133537511,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5991862,32,FLEN)
NAN_BOXED(2133537511,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(6710886,32,FLEN)
NAN_BOXED(2133537511,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7190235,32,FLEN)
NAN_BOXED(2133537511,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388600,32,FLEN)
NAN_BOXED(2133537511,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388604,32,FLEN)
NAN_BOXED(2133537511,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388606,32,FLEN)
NAN_BOXED(2133537511,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58720256,32,FLEN)
NAN_BOXED(2133537511,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58720257,32,FLEN)
NAN_BOXED(2133537511,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58720259,32,FLEN)
NAN_BOXED(2133537511,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58720263,32,FLEN)
NAN_BOXED(2133537511,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58720271,32,FLEN)
NAN_BOXED(2133537511,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58720287,32,FLEN)
NAN_BOXED(2133537511,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58720319,32,FLEN)
NAN_BOXED(2133537511,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58720383,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
