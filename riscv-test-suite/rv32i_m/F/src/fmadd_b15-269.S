
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:17:59 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_34304:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b32e7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b32e7; op2val:0x0;
op3val:0x38000ff; valaddr_reg:x3; val_offset:102912*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102912*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34305:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b32e7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b32e7; op2val:0x0;
op3val:0x38001ff; valaddr_reg:x3; val_offset:102915*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102915*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34306:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b32e7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b32e7; op2val:0x0;
op3val:0x38003ff; valaddr_reg:x3; val_offset:102918*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102918*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34307:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b32e7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b32e7; op2val:0x0;
op3val:0x38007ff; valaddr_reg:x3; val_offset:102921*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102921*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34308:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b32e7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b32e7; op2val:0x0;
op3val:0x3800fff; valaddr_reg:x3; val_offset:102924*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102924*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34309:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b32e7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b32e7; op2val:0x0;
op3val:0x3801fff; valaddr_reg:x3; val_offset:102927*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102927*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34310:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b32e7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b32e7; op2val:0x0;
op3val:0x3803fff; valaddr_reg:x3; val_offset:102930*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102930*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34311:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b32e7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b32e7; op2val:0x0;
op3val:0x3807fff; valaddr_reg:x3; val_offset:102933*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102933*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34312:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b32e7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b32e7; op2val:0x0;
op3val:0x380ffff; valaddr_reg:x3; val_offset:102936*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102936*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34313:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b32e7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b32e7; op2val:0x0;
op3val:0x381ffff; valaddr_reg:x3; val_offset:102939*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102939*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34314:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b32e7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b32e7; op2val:0x0;
op3val:0x383ffff; valaddr_reg:x3; val_offset:102942*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102942*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34315:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b32e7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b32e7; op2val:0x0;
op3val:0x387ffff; valaddr_reg:x3; val_offset:102945*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102945*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34316:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b32e7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b32e7; op2val:0x0;
op3val:0x38fffff; valaddr_reg:x3; val_offset:102948*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102948*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34317:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b32e7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b32e7; op2val:0x0;
op3val:0x39fffff; valaddr_reg:x3; val_offset:102951*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102951*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34318:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b32e7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b32e7; op2val:0x0;
op3val:0x3bfffff; valaddr_reg:x3; val_offset:102954*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102954*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34319:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b32e7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b32e7; op2val:0x0;
op3val:0x3c00000; valaddr_reg:x3; val_offset:102957*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102957*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34320:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b32e7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b32e7; op2val:0x0;
op3val:0x3e00000; valaddr_reg:x3; val_offset:102960*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102960*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34321:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b32e7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b32e7; op2val:0x0;
op3val:0x3f00000; valaddr_reg:x3; val_offset:102963*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102963*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34322:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b32e7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b32e7; op2val:0x0;
op3val:0x3f80000; valaddr_reg:x3; val_offset:102966*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102966*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34323:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b32e7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b32e7; op2val:0x0;
op3val:0x3fc0000; valaddr_reg:x3; val_offset:102969*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102969*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34324:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b32e7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b32e7; op2val:0x0;
op3val:0x3fe0000; valaddr_reg:x3; val_offset:102972*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102972*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34325:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b32e7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b32e7; op2val:0x0;
op3val:0x3ff0000; valaddr_reg:x3; val_offset:102975*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102975*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34326:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b32e7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b32e7; op2val:0x0;
op3val:0x3ff8000; valaddr_reg:x3; val_offset:102978*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102978*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34327:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b32e7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b32e7; op2val:0x0;
op3val:0x3ffc000; valaddr_reg:x3; val_offset:102981*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102981*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34328:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b32e7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b32e7; op2val:0x0;
op3val:0x3ffe000; valaddr_reg:x3; val_offset:102984*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102984*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34329:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b32e7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b32e7; op2val:0x0;
op3val:0x3fff000; valaddr_reg:x3; val_offset:102987*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102987*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34330:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b32e7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b32e7; op2val:0x0;
op3val:0x3fff800; valaddr_reg:x3; val_offset:102990*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102990*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34331:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b32e7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b32e7; op2val:0x0;
op3val:0x3fffc00; valaddr_reg:x3; val_offset:102993*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102993*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34332:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b32e7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b32e7; op2val:0x0;
op3val:0x3fffe00; valaddr_reg:x3; val_offset:102996*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102996*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34333:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b32e7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b32e7; op2val:0x0;
op3val:0x3ffff00; valaddr_reg:x3; val_offset:102999*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102999*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34334:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b32e7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b32e7; op2val:0x0;
op3val:0x3ffff80; valaddr_reg:x3; val_offset:103002*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103002*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34335:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b32e7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b32e7; op2val:0x0;
op3val:0x3ffffc0; valaddr_reg:x3; val_offset:103005*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103005*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34336:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b32e7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b32e7; op2val:0x0;
op3val:0x3ffffe0; valaddr_reg:x3; val_offset:103008*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103008*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34337:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b32e7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b32e7; op2val:0x0;
op3val:0x3fffff0; valaddr_reg:x3; val_offset:103011*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103011*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34338:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b32e7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b32e7; op2val:0x0;
op3val:0x3fffff8; valaddr_reg:x3; val_offset:103014*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103014*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34339:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b32e7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b32e7; op2val:0x0;
op3val:0x3fffffc; valaddr_reg:x3; val_offset:103017*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103017*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34340:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b32e7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b32e7; op2val:0x0;
op3val:0x3fffffe; valaddr_reg:x3; val_offset:103020*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103020*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34341:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b32e7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b32e7; op2val:0x0;
op3val:0x3ffffff; valaddr_reg:x3; val_offset:103023*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103023*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34342:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b40ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2fd5ea and fs3 == 1 and fe3 == 0x42 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b40ce; op2val:0x802fd5ea;
op3val:0xa1000000; valaddr_reg:x3; val_offset:103026*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103026*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34343:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b40ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2fd5ea and fs3 == 1 and fe3 == 0x42 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b40ce; op2val:0x802fd5ea;
op3val:0xa1000001; valaddr_reg:x3; val_offset:103029*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103029*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34344:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b40ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2fd5ea and fs3 == 1 and fe3 == 0x42 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b40ce; op2val:0x802fd5ea;
op3val:0xa1000003; valaddr_reg:x3; val_offset:103032*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103032*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34345:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b40ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2fd5ea and fs3 == 1 and fe3 == 0x42 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b40ce; op2val:0x802fd5ea;
op3val:0xa1000007; valaddr_reg:x3; val_offset:103035*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103035*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34346:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b40ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2fd5ea and fs3 == 1 and fe3 == 0x42 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b40ce; op2val:0x802fd5ea;
op3val:0xa100000f; valaddr_reg:x3; val_offset:103038*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103038*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34347:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b40ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2fd5ea and fs3 == 1 and fe3 == 0x42 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b40ce; op2val:0x802fd5ea;
op3val:0xa100001f; valaddr_reg:x3; val_offset:103041*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103041*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34348:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b40ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2fd5ea and fs3 == 1 and fe3 == 0x42 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b40ce; op2val:0x802fd5ea;
op3val:0xa100003f; valaddr_reg:x3; val_offset:103044*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103044*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34349:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b40ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2fd5ea and fs3 == 1 and fe3 == 0x42 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b40ce; op2val:0x802fd5ea;
op3val:0xa100007f; valaddr_reg:x3; val_offset:103047*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103047*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34350:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b40ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2fd5ea and fs3 == 1 and fe3 == 0x42 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b40ce; op2val:0x802fd5ea;
op3val:0xa10000ff; valaddr_reg:x3; val_offset:103050*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103050*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34351:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b40ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2fd5ea and fs3 == 1 and fe3 == 0x42 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b40ce; op2val:0x802fd5ea;
op3val:0xa10001ff; valaddr_reg:x3; val_offset:103053*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103053*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34352:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b40ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2fd5ea and fs3 == 1 and fe3 == 0x42 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b40ce; op2val:0x802fd5ea;
op3val:0xa10003ff; valaddr_reg:x3; val_offset:103056*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103056*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34353:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b40ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2fd5ea and fs3 == 1 and fe3 == 0x42 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b40ce; op2val:0x802fd5ea;
op3val:0xa10007ff; valaddr_reg:x3; val_offset:103059*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103059*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34354:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b40ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2fd5ea and fs3 == 1 and fe3 == 0x42 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b40ce; op2val:0x802fd5ea;
op3val:0xa1000fff; valaddr_reg:x3; val_offset:103062*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103062*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34355:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b40ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2fd5ea and fs3 == 1 and fe3 == 0x42 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b40ce; op2val:0x802fd5ea;
op3val:0xa1001fff; valaddr_reg:x3; val_offset:103065*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103065*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34356:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b40ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2fd5ea and fs3 == 1 and fe3 == 0x42 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b40ce; op2val:0x802fd5ea;
op3val:0xa1003fff; valaddr_reg:x3; val_offset:103068*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103068*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34357:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b40ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2fd5ea and fs3 == 1 and fe3 == 0x42 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b40ce; op2val:0x802fd5ea;
op3val:0xa1007fff; valaddr_reg:x3; val_offset:103071*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103071*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34358:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b40ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2fd5ea and fs3 == 1 and fe3 == 0x42 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b40ce; op2val:0x802fd5ea;
op3val:0xa100ffff; valaddr_reg:x3; val_offset:103074*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103074*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34359:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b40ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2fd5ea and fs3 == 1 and fe3 == 0x42 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b40ce; op2val:0x802fd5ea;
op3val:0xa101ffff; valaddr_reg:x3; val_offset:103077*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103077*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34360:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b40ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2fd5ea and fs3 == 1 and fe3 == 0x42 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b40ce; op2val:0x802fd5ea;
op3val:0xa103ffff; valaddr_reg:x3; val_offset:103080*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103080*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34361:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b40ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2fd5ea and fs3 == 1 and fe3 == 0x42 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b40ce; op2val:0x802fd5ea;
op3val:0xa107ffff; valaddr_reg:x3; val_offset:103083*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103083*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34362:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b40ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2fd5ea and fs3 == 1 and fe3 == 0x42 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b40ce; op2val:0x802fd5ea;
op3val:0xa10fffff; valaddr_reg:x3; val_offset:103086*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103086*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34363:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b40ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2fd5ea and fs3 == 1 and fe3 == 0x42 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b40ce; op2val:0x802fd5ea;
op3val:0xa11fffff; valaddr_reg:x3; val_offset:103089*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103089*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34364:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b40ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2fd5ea and fs3 == 1 and fe3 == 0x42 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b40ce; op2val:0x802fd5ea;
op3val:0xa13fffff; valaddr_reg:x3; val_offset:103092*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103092*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34365:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b40ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2fd5ea and fs3 == 1 and fe3 == 0x42 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b40ce; op2val:0x802fd5ea;
op3val:0xa1400000; valaddr_reg:x3; val_offset:103095*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103095*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34366:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b40ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2fd5ea and fs3 == 1 and fe3 == 0x42 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b40ce; op2val:0x802fd5ea;
op3val:0xa1600000; valaddr_reg:x3; val_offset:103098*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103098*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34367:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b40ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2fd5ea and fs3 == 1 and fe3 == 0x42 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b40ce; op2val:0x802fd5ea;
op3val:0xa1700000; valaddr_reg:x3; val_offset:103101*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103101*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34368:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b40ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2fd5ea and fs3 == 1 and fe3 == 0x42 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b40ce; op2val:0x802fd5ea;
op3val:0xa1780000; valaddr_reg:x3; val_offset:103104*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103104*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34369:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b40ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2fd5ea and fs3 == 1 and fe3 == 0x42 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b40ce; op2val:0x802fd5ea;
op3val:0xa17c0000; valaddr_reg:x3; val_offset:103107*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103107*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34370:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b40ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2fd5ea and fs3 == 1 and fe3 == 0x42 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b40ce; op2val:0x802fd5ea;
op3val:0xa17e0000; valaddr_reg:x3; val_offset:103110*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103110*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34371:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b40ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2fd5ea and fs3 == 1 and fe3 == 0x42 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b40ce; op2val:0x802fd5ea;
op3val:0xa17f0000; valaddr_reg:x3; val_offset:103113*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103113*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34372:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b40ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2fd5ea and fs3 == 1 and fe3 == 0x42 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b40ce; op2val:0x802fd5ea;
op3val:0xa17f8000; valaddr_reg:x3; val_offset:103116*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103116*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34373:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b40ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2fd5ea and fs3 == 1 and fe3 == 0x42 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b40ce; op2val:0x802fd5ea;
op3val:0xa17fc000; valaddr_reg:x3; val_offset:103119*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103119*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34374:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b40ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2fd5ea and fs3 == 1 and fe3 == 0x42 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b40ce; op2val:0x802fd5ea;
op3val:0xa17fe000; valaddr_reg:x3; val_offset:103122*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103122*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34375:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b40ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2fd5ea and fs3 == 1 and fe3 == 0x42 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b40ce; op2val:0x802fd5ea;
op3val:0xa17ff000; valaddr_reg:x3; val_offset:103125*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103125*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34376:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b40ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2fd5ea and fs3 == 1 and fe3 == 0x42 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b40ce; op2val:0x802fd5ea;
op3val:0xa17ff800; valaddr_reg:x3; val_offset:103128*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103128*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34377:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b40ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2fd5ea and fs3 == 1 and fe3 == 0x42 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b40ce; op2val:0x802fd5ea;
op3val:0xa17ffc00; valaddr_reg:x3; val_offset:103131*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103131*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34378:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b40ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2fd5ea and fs3 == 1 and fe3 == 0x42 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b40ce; op2val:0x802fd5ea;
op3val:0xa17ffe00; valaddr_reg:x3; val_offset:103134*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103134*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34379:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b40ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2fd5ea and fs3 == 1 and fe3 == 0x42 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b40ce; op2val:0x802fd5ea;
op3val:0xa17fff00; valaddr_reg:x3; val_offset:103137*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103137*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34380:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b40ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2fd5ea and fs3 == 1 and fe3 == 0x42 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b40ce; op2val:0x802fd5ea;
op3val:0xa17fff80; valaddr_reg:x3; val_offset:103140*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103140*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34381:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b40ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2fd5ea and fs3 == 1 and fe3 == 0x42 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b40ce; op2val:0x802fd5ea;
op3val:0xa17fffc0; valaddr_reg:x3; val_offset:103143*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103143*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34382:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b40ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2fd5ea and fs3 == 1 and fe3 == 0x42 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b40ce; op2val:0x802fd5ea;
op3val:0xa17fffe0; valaddr_reg:x3; val_offset:103146*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103146*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34383:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b40ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2fd5ea and fs3 == 1 and fe3 == 0x42 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b40ce; op2val:0x802fd5ea;
op3val:0xa17ffff0; valaddr_reg:x3; val_offset:103149*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103149*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34384:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b40ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2fd5ea and fs3 == 1 and fe3 == 0x42 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b40ce; op2val:0x802fd5ea;
op3val:0xa17ffff8; valaddr_reg:x3; val_offset:103152*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103152*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34385:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b40ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2fd5ea and fs3 == 1 and fe3 == 0x42 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b40ce; op2val:0x802fd5ea;
op3val:0xa17ffffc; valaddr_reg:x3; val_offset:103155*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103155*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34386:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b40ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2fd5ea and fs3 == 1 and fe3 == 0x42 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b40ce; op2val:0x802fd5ea;
op3val:0xa17ffffe; valaddr_reg:x3; val_offset:103158*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103158*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34387:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b40ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2fd5ea and fs3 == 1 and fe3 == 0x42 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b40ce; op2val:0x802fd5ea;
op3val:0xa17fffff; valaddr_reg:x3; val_offset:103161*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103161*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34388:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b40ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2fd5ea and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b40ce; op2val:0x802fd5ea;
op3val:0xbf800001; valaddr_reg:x3; val_offset:103164*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103164*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34389:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b40ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2fd5ea and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b40ce; op2val:0x802fd5ea;
op3val:0xbf800003; valaddr_reg:x3; val_offset:103167*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103167*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34390:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b40ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2fd5ea and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b40ce; op2val:0x802fd5ea;
op3val:0xbf800007; valaddr_reg:x3; val_offset:103170*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103170*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34391:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b40ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2fd5ea and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b40ce; op2val:0x802fd5ea;
op3val:0xbf999999; valaddr_reg:x3; val_offset:103173*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103173*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34392:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b40ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2fd5ea and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b40ce; op2val:0x802fd5ea;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:103176*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103176*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34393:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b40ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2fd5ea and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b40ce; op2val:0x802fd5ea;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:103179*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103179*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34394:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b40ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2fd5ea and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b40ce; op2val:0x802fd5ea;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:103182*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103182*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34395:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b40ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2fd5ea and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b40ce; op2val:0x802fd5ea;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:103185*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103185*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34396:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b40ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2fd5ea and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b40ce; op2val:0x802fd5ea;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:103188*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103188*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34397:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b40ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2fd5ea and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b40ce; op2val:0x802fd5ea;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:103191*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103191*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34398:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b40ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2fd5ea and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b40ce; op2val:0x802fd5ea;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:103194*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103194*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34399:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b40ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2fd5ea and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b40ce; op2val:0x802fd5ea;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:103197*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103197*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34400:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b40ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2fd5ea and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b40ce; op2val:0x802fd5ea;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:103200*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103200*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34401:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b40ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2fd5ea and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b40ce; op2val:0x802fd5ea;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:103203*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103203*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34402:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b40ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2fd5ea and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b40ce; op2val:0x802fd5ea;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:103206*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103206*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34403:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b40ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2fd5ea and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b40ce; op2val:0x802fd5ea;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:103209*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103209*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34404:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bb989 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bb989; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:103212*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103212*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34405:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bb989 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bb989; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:103215*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103215*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34406:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bb989 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bb989; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:103218*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103218*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34407:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bb989 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bb989; op2val:0x0;
op3val:0x199999; valaddr_reg:x3; val_offset:103221*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103221*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34408:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bb989 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bb989; op2val:0x0;
op3val:0x249249; valaddr_reg:x3; val_offset:103224*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103224*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34409:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bb989 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bb989; op2val:0x0;
op3val:0x333333; valaddr_reg:x3; val_offset:103227*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103227*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34410:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bb989 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bb989; op2val:0x0;
op3val:0x36db6d; valaddr_reg:x3; val_offset:103230*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103230*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34411:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bb989 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bb989; op2val:0x0;
op3val:0x3bbbbb; valaddr_reg:x3; val_offset:103233*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103233*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34412:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bb989 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bb989; op2val:0x0;
op3val:0x444444; valaddr_reg:x3; val_offset:103236*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103236*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34413:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bb989 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bb989; op2val:0x0;
op3val:0x4ccccc; valaddr_reg:x3; val_offset:103239*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103239*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34414:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bb989 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bb989; op2val:0x0;
op3val:0x5b6db6; valaddr_reg:x3; val_offset:103242*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103242*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34415:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bb989 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bb989; op2val:0x0;
op3val:0x666666; valaddr_reg:x3; val_offset:103245*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103245*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34416:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bb989 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bb989; op2val:0x0;
op3val:0x6db6db; valaddr_reg:x3; val_offset:103248*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103248*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34417:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bb989 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bb989; op2val:0x0;
op3val:0x7ffff8; valaddr_reg:x3; val_offset:103251*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103251*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34418:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bb989 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bb989; op2val:0x0;
op3val:0x7ffffc; valaddr_reg:x3; val_offset:103254*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103254*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34419:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bb989 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bb989; op2val:0x0;
op3val:0x7ffffe; valaddr_reg:x3; val_offset:103257*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103257*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34420:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bb989 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bb989; op2val:0x0;
op3val:0xc000000; valaddr_reg:x3; val_offset:103260*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103260*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34421:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bb989 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bb989; op2val:0x0;
op3val:0xc000001; valaddr_reg:x3; val_offset:103263*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103263*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34422:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bb989 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bb989; op2val:0x0;
op3val:0xc000003; valaddr_reg:x3; val_offset:103266*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103266*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34423:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bb989 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bb989; op2val:0x0;
op3val:0xc000007; valaddr_reg:x3; val_offset:103269*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103269*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34424:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bb989 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bb989; op2val:0x0;
op3val:0xc00000f; valaddr_reg:x3; val_offset:103272*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103272*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34425:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bb989 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bb989; op2val:0x0;
op3val:0xc00001f; valaddr_reg:x3; val_offset:103275*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103275*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34426:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bb989 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bb989; op2val:0x0;
op3val:0xc00003f; valaddr_reg:x3; val_offset:103278*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103278*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34427:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bb989 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bb989; op2val:0x0;
op3val:0xc00007f; valaddr_reg:x3; val_offset:103281*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103281*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34428:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bb989 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bb989; op2val:0x0;
op3val:0xc0000ff; valaddr_reg:x3; val_offset:103284*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103284*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34429:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bb989 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bb989; op2val:0x0;
op3val:0xc0001ff; valaddr_reg:x3; val_offset:103287*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103287*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34430:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bb989 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bb989; op2val:0x0;
op3val:0xc0003ff; valaddr_reg:x3; val_offset:103290*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103290*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34431:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bb989 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bb989; op2val:0x0;
op3val:0xc0007ff; valaddr_reg:x3; val_offset:103293*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103293*0 + 3*268*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2133537511,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58720511,32,FLEN)
NAN_BOXED(2133537511,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58720767,32,FLEN)
NAN_BOXED(2133537511,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58721279,32,FLEN)
NAN_BOXED(2133537511,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58722303,32,FLEN)
NAN_BOXED(2133537511,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58724351,32,FLEN)
NAN_BOXED(2133537511,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58728447,32,FLEN)
NAN_BOXED(2133537511,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58736639,32,FLEN)
NAN_BOXED(2133537511,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58753023,32,FLEN)
NAN_BOXED(2133537511,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58785791,32,FLEN)
NAN_BOXED(2133537511,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58851327,32,FLEN)
NAN_BOXED(2133537511,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58982399,32,FLEN)
NAN_BOXED(2133537511,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(59244543,32,FLEN)
NAN_BOXED(2133537511,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(59768831,32,FLEN)
NAN_BOXED(2133537511,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(60817407,32,FLEN)
NAN_BOXED(2133537511,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(62914559,32,FLEN)
NAN_BOXED(2133537511,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(62914560,32,FLEN)
NAN_BOXED(2133537511,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(65011712,32,FLEN)
NAN_BOXED(2133537511,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(66060288,32,FLEN)
NAN_BOXED(2133537511,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(66584576,32,FLEN)
NAN_BOXED(2133537511,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(66846720,32,FLEN)
NAN_BOXED(2133537511,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(66977792,32,FLEN)
NAN_BOXED(2133537511,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67043328,32,FLEN)
NAN_BOXED(2133537511,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67076096,32,FLEN)
NAN_BOXED(2133537511,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67092480,32,FLEN)
NAN_BOXED(2133537511,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67100672,32,FLEN)
NAN_BOXED(2133537511,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67104768,32,FLEN)
NAN_BOXED(2133537511,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67106816,32,FLEN)
NAN_BOXED(2133537511,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67107840,32,FLEN)
NAN_BOXED(2133537511,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67108352,32,FLEN)
NAN_BOXED(2133537511,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67108608,32,FLEN)
NAN_BOXED(2133537511,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67108736,32,FLEN)
NAN_BOXED(2133537511,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67108800,32,FLEN)
NAN_BOXED(2133537511,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67108832,32,FLEN)
NAN_BOXED(2133537511,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67108848,32,FLEN)
NAN_BOXED(2133537511,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67108856,32,FLEN)
NAN_BOXED(2133537511,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67108860,32,FLEN)
NAN_BOXED(2133537511,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67108862,32,FLEN)
NAN_BOXED(2133537511,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67108863,32,FLEN)
NAN_BOXED(2133541070,32,FLEN)
NAN_BOXED(2150618602,32,FLEN)
NAN_BOXED(2701131776,32,FLEN)
NAN_BOXED(2133541070,32,FLEN)
NAN_BOXED(2150618602,32,FLEN)
NAN_BOXED(2701131777,32,FLEN)
NAN_BOXED(2133541070,32,FLEN)
NAN_BOXED(2150618602,32,FLEN)
NAN_BOXED(2701131779,32,FLEN)
NAN_BOXED(2133541070,32,FLEN)
NAN_BOXED(2150618602,32,FLEN)
NAN_BOXED(2701131783,32,FLEN)
NAN_BOXED(2133541070,32,FLEN)
NAN_BOXED(2150618602,32,FLEN)
NAN_BOXED(2701131791,32,FLEN)
NAN_BOXED(2133541070,32,FLEN)
NAN_BOXED(2150618602,32,FLEN)
NAN_BOXED(2701131807,32,FLEN)
NAN_BOXED(2133541070,32,FLEN)
NAN_BOXED(2150618602,32,FLEN)
NAN_BOXED(2701131839,32,FLEN)
NAN_BOXED(2133541070,32,FLEN)
NAN_BOXED(2150618602,32,FLEN)
NAN_BOXED(2701131903,32,FLEN)
NAN_BOXED(2133541070,32,FLEN)
NAN_BOXED(2150618602,32,FLEN)
NAN_BOXED(2701132031,32,FLEN)
NAN_BOXED(2133541070,32,FLEN)
NAN_BOXED(2150618602,32,FLEN)
NAN_BOXED(2701132287,32,FLEN)
NAN_BOXED(2133541070,32,FLEN)
NAN_BOXED(2150618602,32,FLEN)
NAN_BOXED(2701132799,32,FLEN)
NAN_BOXED(2133541070,32,FLEN)
NAN_BOXED(2150618602,32,FLEN)
NAN_BOXED(2701133823,32,FLEN)
NAN_BOXED(2133541070,32,FLEN)
NAN_BOXED(2150618602,32,FLEN)
NAN_BOXED(2701135871,32,FLEN)
NAN_BOXED(2133541070,32,FLEN)
NAN_BOXED(2150618602,32,FLEN)
NAN_BOXED(2701139967,32,FLEN)
NAN_BOXED(2133541070,32,FLEN)
NAN_BOXED(2150618602,32,FLEN)
NAN_BOXED(2701148159,32,FLEN)
NAN_BOXED(2133541070,32,FLEN)
NAN_BOXED(2150618602,32,FLEN)
NAN_BOXED(2701164543,32,FLEN)
NAN_BOXED(2133541070,32,FLEN)
NAN_BOXED(2150618602,32,FLEN)
NAN_BOXED(2701197311,32,FLEN)
NAN_BOXED(2133541070,32,FLEN)
NAN_BOXED(2150618602,32,FLEN)
NAN_BOXED(2701262847,32,FLEN)
NAN_BOXED(2133541070,32,FLEN)
NAN_BOXED(2150618602,32,FLEN)
NAN_BOXED(2701393919,32,FLEN)
NAN_BOXED(2133541070,32,FLEN)
NAN_BOXED(2150618602,32,FLEN)
NAN_BOXED(2701656063,32,FLEN)
NAN_BOXED(2133541070,32,FLEN)
NAN_BOXED(2150618602,32,FLEN)
NAN_BOXED(2702180351,32,FLEN)
NAN_BOXED(2133541070,32,FLEN)
NAN_BOXED(2150618602,32,FLEN)
NAN_BOXED(2703228927,32,FLEN)
NAN_BOXED(2133541070,32,FLEN)
NAN_BOXED(2150618602,32,FLEN)
NAN_BOXED(2705326079,32,FLEN)
NAN_BOXED(2133541070,32,FLEN)
NAN_BOXED(2150618602,32,FLEN)
NAN_BOXED(2705326080,32,FLEN)
NAN_BOXED(2133541070,32,FLEN)
NAN_BOXED(2150618602,32,FLEN)
NAN_BOXED(2707423232,32,FLEN)
NAN_BOXED(2133541070,32,FLEN)
NAN_BOXED(2150618602,32,FLEN)
NAN_BOXED(2708471808,32,FLEN)
NAN_BOXED(2133541070,32,FLEN)
NAN_BOXED(2150618602,32,FLEN)
NAN_BOXED(2708996096,32,FLEN)
NAN_BOXED(2133541070,32,FLEN)
NAN_BOXED(2150618602,32,FLEN)
NAN_BOXED(2709258240,32,FLEN)
NAN_BOXED(2133541070,32,FLEN)
NAN_BOXED(2150618602,32,FLEN)
NAN_BOXED(2709389312,32,FLEN)
NAN_BOXED(2133541070,32,FLEN)
NAN_BOXED(2150618602,32,FLEN)
NAN_BOXED(2709454848,32,FLEN)
NAN_BOXED(2133541070,32,FLEN)
NAN_BOXED(2150618602,32,FLEN)
NAN_BOXED(2709487616,32,FLEN)
NAN_BOXED(2133541070,32,FLEN)
NAN_BOXED(2150618602,32,FLEN)
NAN_BOXED(2709504000,32,FLEN)
NAN_BOXED(2133541070,32,FLEN)
NAN_BOXED(2150618602,32,FLEN)
NAN_BOXED(2709512192,32,FLEN)
NAN_BOXED(2133541070,32,FLEN)
NAN_BOXED(2150618602,32,FLEN)
NAN_BOXED(2709516288,32,FLEN)
NAN_BOXED(2133541070,32,FLEN)
NAN_BOXED(2150618602,32,FLEN)
NAN_BOXED(2709518336,32,FLEN)
NAN_BOXED(2133541070,32,FLEN)
NAN_BOXED(2150618602,32,FLEN)
NAN_BOXED(2709519360,32,FLEN)
NAN_BOXED(2133541070,32,FLEN)
NAN_BOXED(2150618602,32,FLEN)
NAN_BOXED(2709519872,32,FLEN)
NAN_BOXED(2133541070,32,FLEN)
NAN_BOXED(2150618602,32,FLEN)
NAN_BOXED(2709520128,32,FLEN)
NAN_BOXED(2133541070,32,FLEN)
NAN_BOXED(2150618602,32,FLEN)
NAN_BOXED(2709520256,32,FLEN)
NAN_BOXED(2133541070,32,FLEN)
NAN_BOXED(2150618602,32,FLEN)
NAN_BOXED(2709520320,32,FLEN)
NAN_BOXED(2133541070,32,FLEN)
NAN_BOXED(2150618602,32,FLEN)
NAN_BOXED(2709520352,32,FLEN)
NAN_BOXED(2133541070,32,FLEN)
NAN_BOXED(2150618602,32,FLEN)
NAN_BOXED(2709520368,32,FLEN)
NAN_BOXED(2133541070,32,FLEN)
NAN_BOXED(2150618602,32,FLEN)
NAN_BOXED(2709520376,32,FLEN)
NAN_BOXED(2133541070,32,FLEN)
NAN_BOXED(2150618602,32,FLEN)
NAN_BOXED(2709520380,32,FLEN)
NAN_BOXED(2133541070,32,FLEN)
NAN_BOXED(2150618602,32,FLEN)
NAN_BOXED(2709520382,32,FLEN)
NAN_BOXED(2133541070,32,FLEN)
NAN_BOXED(2150618602,32,FLEN)
NAN_BOXED(2709520383,32,FLEN)
NAN_BOXED(2133541070,32,FLEN)
NAN_BOXED(2150618602,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2133541070,32,FLEN)
NAN_BOXED(2150618602,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2133541070,32,FLEN)
NAN_BOXED(2150618602,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
NAN_BOXED(2133541070,32,FLEN)
NAN_BOXED(2150618602,32,FLEN)
NAN_BOXED(3214514585,32,FLEN)
NAN_BOXED(2133541070,32,FLEN)
NAN_BOXED(2150618602,32,FLEN)
NAN_BOXED(3215233609,32,FLEN)
NAN_BOXED(2133541070,32,FLEN)
NAN_BOXED(2150618602,32,FLEN)
NAN_BOXED(3216192307,32,FLEN)
NAN_BOXED(2133541070,32,FLEN)
NAN_BOXED(2150618602,32,FLEN)
NAN_BOXED(3216431981,32,FLEN)
NAN_BOXED(2133541070,32,FLEN)
NAN_BOXED(2150618602,32,FLEN)
NAN_BOXED(3216751547,32,FLEN)
NAN_BOXED(2133541070,32,FLEN)
NAN_BOXED(2150618602,32,FLEN)
NAN_BOXED(3217310788,32,FLEN)
NAN_BOXED(2133541070,32,FLEN)
NAN_BOXED(2150618602,32,FLEN)
NAN_BOXED(3217870028,32,FLEN)
NAN_BOXED(2133541070,32,FLEN)
NAN_BOXED(2150618602,32,FLEN)
NAN_BOXED(3218828726,32,FLEN)
NAN_BOXED(2133541070,32,FLEN)
NAN_BOXED(2150618602,32,FLEN)
NAN_BOXED(3219547750,32,FLEN)
NAN_BOXED(2133541070,32,FLEN)
NAN_BOXED(2150618602,32,FLEN)
NAN_BOXED(3220027099,32,FLEN)
NAN_BOXED(2133541070,32,FLEN)
NAN_BOXED(2150618602,32,FLEN)
NAN_BOXED(3221225464,32,FLEN)
NAN_BOXED(2133541070,32,FLEN)
NAN_BOXED(2150618602,32,FLEN)
NAN_BOXED(3221225468,32,FLEN)
NAN_BOXED(2133541070,32,FLEN)
NAN_BOXED(2150618602,32,FLEN)
NAN_BOXED(3221225470,32,FLEN)
NAN_BOXED(2133571977,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2133571977,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3,32,FLEN)
NAN_BOXED(2133571977,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7,32,FLEN)
NAN_BOXED(2133571977,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1677721,32,FLEN)
NAN_BOXED(2133571977,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2396745,32,FLEN)
NAN_BOXED(2133571977,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3355443,32,FLEN)
NAN_BOXED(2133571977,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3595117,32,FLEN)
NAN_BOXED(2133571977,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3914683,32,FLEN)
NAN_BOXED(2133571977,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4473924,32,FLEN)
NAN_BOXED(2133571977,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5033164,32,FLEN)
NAN_BOXED(2133571977,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5991862,32,FLEN)
NAN_BOXED(2133571977,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(6710886,32,FLEN)
NAN_BOXED(2133571977,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7190235,32,FLEN)
NAN_BOXED(2133571977,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388600,32,FLEN)
NAN_BOXED(2133571977,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388604,32,FLEN)
NAN_BOXED(2133571977,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388606,32,FLEN)
NAN_BOXED(2133571977,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(201326592,32,FLEN)
NAN_BOXED(2133571977,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(201326593,32,FLEN)
NAN_BOXED(2133571977,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(201326595,32,FLEN)
NAN_BOXED(2133571977,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(201326599,32,FLEN)
NAN_BOXED(2133571977,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(201326607,32,FLEN)
NAN_BOXED(2133571977,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(201326623,32,FLEN)
NAN_BOXED(2133571977,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(201326655,32,FLEN)
NAN_BOXED(2133571977,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(201326719,32,FLEN)
NAN_BOXED(2133571977,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(201326847,32,FLEN)
NAN_BOXED(2133571977,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(201327103,32,FLEN)
NAN_BOXED(2133571977,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(201327615,32,FLEN)
NAN_BOXED(2133571977,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(201328639,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
