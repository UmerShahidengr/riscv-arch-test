
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:17:59 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_3328:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x772129 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0e and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d772129; op2val:0x80000000;
op3val:0x877ffffe; valaddr_reg:x3; val_offset:9984*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9984*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3329:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x772129 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0e and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d772129; op2val:0x80000000;
op3val:0x877fffff; valaddr_reg:x3; val_offset:9987*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9987*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3330:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x77fb3b and fs2 == 1 and fe2 == 0x03 and fm2 == 0x042392 and fs3 == 1 and fe3 == 0x48 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d77fb3b; op2val:0x81842392;
op3val:0xa4000000; valaddr_reg:x3; val_offset:9990*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9990*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3331:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x77fb3b and fs2 == 1 and fe2 == 0x03 and fm2 == 0x042392 and fs3 == 1 and fe3 == 0x48 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d77fb3b; op2val:0x81842392;
op3val:0xa4000001; valaddr_reg:x3; val_offset:9993*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9993*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3332:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x77fb3b and fs2 == 1 and fe2 == 0x03 and fm2 == 0x042392 and fs3 == 1 and fe3 == 0x48 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d77fb3b; op2val:0x81842392;
op3val:0xa4000003; valaddr_reg:x3; val_offset:9996*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9996*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3333:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x77fb3b and fs2 == 1 and fe2 == 0x03 and fm2 == 0x042392 and fs3 == 1 and fe3 == 0x48 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d77fb3b; op2val:0x81842392;
op3val:0xa4000007; valaddr_reg:x3; val_offset:9999*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9999*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3334:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x77fb3b and fs2 == 1 and fe2 == 0x03 and fm2 == 0x042392 and fs3 == 1 and fe3 == 0x48 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d77fb3b; op2val:0x81842392;
op3val:0xa400000f; valaddr_reg:x3; val_offset:10002*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10002*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3335:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x77fb3b and fs2 == 1 and fe2 == 0x03 and fm2 == 0x042392 and fs3 == 1 and fe3 == 0x48 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d77fb3b; op2val:0x81842392;
op3val:0xa400001f; valaddr_reg:x3; val_offset:10005*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10005*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3336:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x77fb3b and fs2 == 1 and fe2 == 0x03 and fm2 == 0x042392 and fs3 == 1 and fe3 == 0x48 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d77fb3b; op2val:0x81842392;
op3val:0xa400003f; valaddr_reg:x3; val_offset:10008*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10008*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3337:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x77fb3b and fs2 == 1 and fe2 == 0x03 and fm2 == 0x042392 and fs3 == 1 and fe3 == 0x48 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d77fb3b; op2val:0x81842392;
op3val:0xa400007f; valaddr_reg:x3; val_offset:10011*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10011*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3338:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x77fb3b and fs2 == 1 and fe2 == 0x03 and fm2 == 0x042392 and fs3 == 1 and fe3 == 0x48 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d77fb3b; op2val:0x81842392;
op3val:0xa40000ff; valaddr_reg:x3; val_offset:10014*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10014*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3339:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x77fb3b and fs2 == 1 and fe2 == 0x03 and fm2 == 0x042392 and fs3 == 1 and fe3 == 0x48 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d77fb3b; op2val:0x81842392;
op3val:0xa40001ff; valaddr_reg:x3; val_offset:10017*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10017*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3340:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x77fb3b and fs2 == 1 and fe2 == 0x03 and fm2 == 0x042392 and fs3 == 1 and fe3 == 0x48 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d77fb3b; op2val:0x81842392;
op3val:0xa40003ff; valaddr_reg:x3; val_offset:10020*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10020*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3341:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x77fb3b and fs2 == 1 and fe2 == 0x03 and fm2 == 0x042392 and fs3 == 1 and fe3 == 0x48 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d77fb3b; op2val:0x81842392;
op3val:0xa40007ff; valaddr_reg:x3; val_offset:10023*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10023*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3342:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x77fb3b and fs2 == 1 and fe2 == 0x03 and fm2 == 0x042392 and fs3 == 1 and fe3 == 0x48 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d77fb3b; op2val:0x81842392;
op3val:0xa4000fff; valaddr_reg:x3; val_offset:10026*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10026*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3343:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x77fb3b and fs2 == 1 and fe2 == 0x03 and fm2 == 0x042392 and fs3 == 1 and fe3 == 0x48 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d77fb3b; op2val:0x81842392;
op3val:0xa4001fff; valaddr_reg:x3; val_offset:10029*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10029*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3344:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x77fb3b and fs2 == 1 and fe2 == 0x03 and fm2 == 0x042392 and fs3 == 1 and fe3 == 0x48 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d77fb3b; op2val:0x81842392;
op3val:0xa4003fff; valaddr_reg:x3; val_offset:10032*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10032*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3345:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x77fb3b and fs2 == 1 and fe2 == 0x03 and fm2 == 0x042392 and fs3 == 1 and fe3 == 0x48 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d77fb3b; op2val:0x81842392;
op3val:0xa4007fff; valaddr_reg:x3; val_offset:10035*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10035*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3346:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x77fb3b and fs2 == 1 and fe2 == 0x03 and fm2 == 0x042392 and fs3 == 1 and fe3 == 0x48 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d77fb3b; op2val:0x81842392;
op3val:0xa400ffff; valaddr_reg:x3; val_offset:10038*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10038*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3347:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x77fb3b and fs2 == 1 and fe2 == 0x03 and fm2 == 0x042392 and fs3 == 1 and fe3 == 0x48 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d77fb3b; op2val:0x81842392;
op3val:0xa401ffff; valaddr_reg:x3; val_offset:10041*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10041*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3348:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x77fb3b and fs2 == 1 and fe2 == 0x03 and fm2 == 0x042392 and fs3 == 1 and fe3 == 0x48 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d77fb3b; op2val:0x81842392;
op3val:0xa403ffff; valaddr_reg:x3; val_offset:10044*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10044*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3349:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x77fb3b and fs2 == 1 and fe2 == 0x03 and fm2 == 0x042392 and fs3 == 1 and fe3 == 0x48 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d77fb3b; op2val:0x81842392;
op3val:0xa407ffff; valaddr_reg:x3; val_offset:10047*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10047*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3350:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x77fb3b and fs2 == 1 and fe2 == 0x03 and fm2 == 0x042392 and fs3 == 1 and fe3 == 0x48 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d77fb3b; op2val:0x81842392;
op3val:0xa40fffff; valaddr_reg:x3; val_offset:10050*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10050*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3351:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x77fb3b and fs2 == 1 and fe2 == 0x03 and fm2 == 0x042392 and fs3 == 1 and fe3 == 0x48 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d77fb3b; op2val:0x81842392;
op3val:0xa41fffff; valaddr_reg:x3; val_offset:10053*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10053*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3352:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x77fb3b and fs2 == 1 and fe2 == 0x03 and fm2 == 0x042392 and fs3 == 1 and fe3 == 0x48 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d77fb3b; op2val:0x81842392;
op3val:0xa43fffff; valaddr_reg:x3; val_offset:10056*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10056*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3353:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x77fb3b and fs2 == 1 and fe2 == 0x03 and fm2 == 0x042392 and fs3 == 1 and fe3 == 0x48 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d77fb3b; op2val:0x81842392;
op3val:0xa4400000; valaddr_reg:x3; val_offset:10059*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10059*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3354:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x77fb3b and fs2 == 1 and fe2 == 0x03 and fm2 == 0x042392 and fs3 == 1 and fe3 == 0x48 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d77fb3b; op2val:0x81842392;
op3val:0xa4600000; valaddr_reg:x3; val_offset:10062*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10062*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3355:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x77fb3b and fs2 == 1 and fe2 == 0x03 and fm2 == 0x042392 and fs3 == 1 and fe3 == 0x48 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d77fb3b; op2val:0x81842392;
op3val:0xa4700000; valaddr_reg:x3; val_offset:10065*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10065*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3356:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x77fb3b and fs2 == 1 and fe2 == 0x03 and fm2 == 0x042392 and fs3 == 1 and fe3 == 0x48 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d77fb3b; op2val:0x81842392;
op3val:0xa4780000; valaddr_reg:x3; val_offset:10068*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10068*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3357:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x77fb3b and fs2 == 1 and fe2 == 0x03 and fm2 == 0x042392 and fs3 == 1 and fe3 == 0x48 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d77fb3b; op2val:0x81842392;
op3val:0xa47c0000; valaddr_reg:x3; val_offset:10071*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10071*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3358:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x77fb3b and fs2 == 1 and fe2 == 0x03 and fm2 == 0x042392 and fs3 == 1 and fe3 == 0x48 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d77fb3b; op2val:0x81842392;
op3val:0xa47e0000; valaddr_reg:x3; val_offset:10074*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10074*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3359:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x77fb3b and fs2 == 1 and fe2 == 0x03 and fm2 == 0x042392 and fs3 == 1 and fe3 == 0x48 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d77fb3b; op2val:0x81842392;
op3val:0xa47f0000; valaddr_reg:x3; val_offset:10077*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10077*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3360:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x77fb3b and fs2 == 1 and fe2 == 0x03 and fm2 == 0x042392 and fs3 == 1 and fe3 == 0x48 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d77fb3b; op2val:0x81842392;
op3val:0xa47f8000; valaddr_reg:x3; val_offset:10080*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10080*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3361:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x77fb3b and fs2 == 1 and fe2 == 0x03 and fm2 == 0x042392 and fs3 == 1 and fe3 == 0x48 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d77fb3b; op2val:0x81842392;
op3val:0xa47fc000; valaddr_reg:x3; val_offset:10083*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10083*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3362:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x77fb3b and fs2 == 1 and fe2 == 0x03 and fm2 == 0x042392 and fs3 == 1 and fe3 == 0x48 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d77fb3b; op2val:0x81842392;
op3val:0xa47fe000; valaddr_reg:x3; val_offset:10086*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10086*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3363:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x77fb3b and fs2 == 1 and fe2 == 0x03 and fm2 == 0x042392 and fs3 == 1 and fe3 == 0x48 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d77fb3b; op2val:0x81842392;
op3val:0xa47ff000; valaddr_reg:x3; val_offset:10089*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10089*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3364:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x77fb3b and fs2 == 1 and fe2 == 0x03 and fm2 == 0x042392 and fs3 == 1 and fe3 == 0x48 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d77fb3b; op2val:0x81842392;
op3val:0xa47ff800; valaddr_reg:x3; val_offset:10092*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10092*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3365:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x77fb3b and fs2 == 1 and fe2 == 0x03 and fm2 == 0x042392 and fs3 == 1 and fe3 == 0x48 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d77fb3b; op2val:0x81842392;
op3val:0xa47ffc00; valaddr_reg:x3; val_offset:10095*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10095*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3366:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x77fb3b and fs2 == 1 and fe2 == 0x03 and fm2 == 0x042392 and fs3 == 1 and fe3 == 0x48 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d77fb3b; op2val:0x81842392;
op3val:0xa47ffe00; valaddr_reg:x3; val_offset:10098*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10098*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3367:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x77fb3b and fs2 == 1 and fe2 == 0x03 and fm2 == 0x042392 and fs3 == 1 and fe3 == 0x48 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d77fb3b; op2val:0x81842392;
op3val:0xa47fff00; valaddr_reg:x3; val_offset:10101*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10101*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3368:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x77fb3b and fs2 == 1 and fe2 == 0x03 and fm2 == 0x042392 and fs3 == 1 and fe3 == 0x48 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d77fb3b; op2val:0x81842392;
op3val:0xa47fff80; valaddr_reg:x3; val_offset:10104*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10104*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3369:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x77fb3b and fs2 == 1 and fe2 == 0x03 and fm2 == 0x042392 and fs3 == 1 and fe3 == 0x48 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d77fb3b; op2val:0x81842392;
op3val:0xa47fffc0; valaddr_reg:x3; val_offset:10107*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10107*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3370:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x77fb3b and fs2 == 1 and fe2 == 0x03 and fm2 == 0x042392 and fs3 == 1 and fe3 == 0x48 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d77fb3b; op2val:0x81842392;
op3val:0xa47fffe0; valaddr_reg:x3; val_offset:10110*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10110*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3371:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x77fb3b and fs2 == 1 and fe2 == 0x03 and fm2 == 0x042392 and fs3 == 1 and fe3 == 0x48 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d77fb3b; op2val:0x81842392;
op3val:0xa47ffff0; valaddr_reg:x3; val_offset:10113*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10113*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3372:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x77fb3b and fs2 == 1 and fe2 == 0x03 and fm2 == 0x042392 and fs3 == 1 and fe3 == 0x48 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d77fb3b; op2val:0x81842392;
op3val:0xa47ffff8; valaddr_reg:x3; val_offset:10116*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10116*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3373:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x77fb3b and fs2 == 1 and fe2 == 0x03 and fm2 == 0x042392 and fs3 == 1 and fe3 == 0x48 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d77fb3b; op2val:0x81842392;
op3val:0xa47ffffc; valaddr_reg:x3; val_offset:10119*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10119*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3374:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x77fb3b and fs2 == 1 and fe2 == 0x03 and fm2 == 0x042392 and fs3 == 1 and fe3 == 0x48 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d77fb3b; op2val:0x81842392;
op3val:0xa47ffffe; valaddr_reg:x3; val_offset:10122*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10122*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3375:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x77fb3b and fs2 == 1 and fe2 == 0x03 and fm2 == 0x042392 and fs3 == 1 and fe3 == 0x48 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d77fb3b; op2val:0x81842392;
op3val:0xa47fffff; valaddr_reg:x3; val_offset:10125*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10125*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3376:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x77fb3b and fs2 == 1 and fe2 == 0x03 and fm2 == 0x042392 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d77fb3b; op2val:0x81842392;
op3val:0xbf800001; valaddr_reg:x3; val_offset:10128*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10128*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3377:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x77fb3b and fs2 == 1 and fe2 == 0x03 and fm2 == 0x042392 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d77fb3b; op2val:0x81842392;
op3val:0xbf800003; valaddr_reg:x3; val_offset:10131*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10131*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3378:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x77fb3b and fs2 == 1 and fe2 == 0x03 and fm2 == 0x042392 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d77fb3b; op2val:0x81842392;
op3val:0xbf800007; valaddr_reg:x3; val_offset:10134*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10134*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3379:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x77fb3b and fs2 == 1 and fe2 == 0x03 and fm2 == 0x042392 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d77fb3b; op2val:0x81842392;
op3val:0xbf999999; valaddr_reg:x3; val_offset:10137*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10137*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3380:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x77fb3b and fs2 == 1 and fe2 == 0x03 and fm2 == 0x042392 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d77fb3b; op2val:0x81842392;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:10140*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10140*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3381:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x77fb3b and fs2 == 1 and fe2 == 0x03 and fm2 == 0x042392 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d77fb3b; op2val:0x81842392;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:10143*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10143*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3382:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x77fb3b and fs2 == 1 and fe2 == 0x03 and fm2 == 0x042392 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d77fb3b; op2val:0x81842392;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:10146*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10146*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3383:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x77fb3b and fs2 == 1 and fe2 == 0x03 and fm2 == 0x042392 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d77fb3b; op2val:0x81842392;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:10149*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10149*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3384:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x77fb3b and fs2 == 1 and fe2 == 0x03 and fm2 == 0x042392 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d77fb3b; op2val:0x81842392;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:10152*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10152*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3385:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x77fb3b and fs2 == 1 and fe2 == 0x03 and fm2 == 0x042392 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d77fb3b; op2val:0x81842392;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:10155*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10155*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3386:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x77fb3b and fs2 == 1 and fe2 == 0x03 and fm2 == 0x042392 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d77fb3b; op2val:0x81842392;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:10158*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10158*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3387:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x77fb3b and fs2 == 1 and fe2 == 0x03 and fm2 == 0x042392 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d77fb3b; op2val:0x81842392;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:10161*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10161*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3388:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x77fb3b and fs2 == 1 and fe2 == 0x03 and fm2 == 0x042392 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d77fb3b; op2val:0x81842392;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:10164*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10164*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3389:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x77fb3b and fs2 == 1 and fe2 == 0x03 and fm2 == 0x042392 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d77fb3b; op2val:0x81842392;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:10167*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10167*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3390:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x77fb3b and fs2 == 1 and fe2 == 0x03 and fm2 == 0x042392 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d77fb3b; op2val:0x81842392;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:10170*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10170*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3391:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x77fb3b and fs2 == 1 and fe2 == 0x03 and fm2 == 0x042392 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d77fb3b; op2val:0x81842392;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:10173*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10173*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3392:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x783eca and fs2 == 0 and fe2 == 0x83 and fm2 == 0x03ff9c and fs3 == 0 and fe3 == 0xe4 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d783eca; op2val:0x4183ff9c;
op3val:0x72000000; valaddr_reg:x3; val_offset:10176*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10176*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3393:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x783eca and fs2 == 0 and fe2 == 0x83 and fm2 == 0x03ff9c and fs3 == 0 and fe3 == 0xe4 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d783eca; op2val:0x4183ff9c;
op3val:0x72000001; valaddr_reg:x3; val_offset:10179*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10179*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3394:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x783eca and fs2 == 0 and fe2 == 0x83 and fm2 == 0x03ff9c and fs3 == 0 and fe3 == 0xe4 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d783eca; op2val:0x4183ff9c;
op3val:0x72000003; valaddr_reg:x3; val_offset:10182*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10182*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3395:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x783eca and fs2 == 0 and fe2 == 0x83 and fm2 == 0x03ff9c and fs3 == 0 and fe3 == 0xe4 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d783eca; op2val:0x4183ff9c;
op3val:0x72000007; valaddr_reg:x3; val_offset:10185*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10185*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3396:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x783eca and fs2 == 0 and fe2 == 0x83 and fm2 == 0x03ff9c and fs3 == 0 and fe3 == 0xe4 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d783eca; op2val:0x4183ff9c;
op3val:0x7200000f; valaddr_reg:x3; val_offset:10188*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10188*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3397:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x783eca and fs2 == 0 and fe2 == 0x83 and fm2 == 0x03ff9c and fs3 == 0 and fe3 == 0xe4 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d783eca; op2val:0x4183ff9c;
op3val:0x7200001f; valaddr_reg:x3; val_offset:10191*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10191*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3398:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x783eca and fs2 == 0 and fe2 == 0x83 and fm2 == 0x03ff9c and fs3 == 0 and fe3 == 0xe4 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d783eca; op2val:0x4183ff9c;
op3val:0x7200003f; valaddr_reg:x3; val_offset:10194*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10194*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3399:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x783eca and fs2 == 0 and fe2 == 0x83 and fm2 == 0x03ff9c and fs3 == 0 and fe3 == 0xe4 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d783eca; op2val:0x4183ff9c;
op3val:0x7200007f; valaddr_reg:x3; val_offset:10197*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10197*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3400:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x783eca and fs2 == 0 and fe2 == 0x83 and fm2 == 0x03ff9c and fs3 == 0 and fe3 == 0xe4 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d783eca; op2val:0x4183ff9c;
op3val:0x720000ff; valaddr_reg:x3; val_offset:10200*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10200*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3401:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x783eca and fs2 == 0 and fe2 == 0x83 and fm2 == 0x03ff9c and fs3 == 0 and fe3 == 0xe4 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d783eca; op2val:0x4183ff9c;
op3val:0x720001ff; valaddr_reg:x3; val_offset:10203*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10203*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3402:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x783eca and fs2 == 0 and fe2 == 0x83 and fm2 == 0x03ff9c and fs3 == 0 and fe3 == 0xe4 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d783eca; op2val:0x4183ff9c;
op3val:0x720003ff; valaddr_reg:x3; val_offset:10206*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10206*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3403:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x783eca and fs2 == 0 and fe2 == 0x83 and fm2 == 0x03ff9c and fs3 == 0 and fe3 == 0xe4 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d783eca; op2val:0x4183ff9c;
op3val:0x720007ff; valaddr_reg:x3; val_offset:10209*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10209*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3404:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x783eca and fs2 == 0 and fe2 == 0x83 and fm2 == 0x03ff9c and fs3 == 0 and fe3 == 0xe4 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d783eca; op2val:0x4183ff9c;
op3val:0x72000fff; valaddr_reg:x3; val_offset:10212*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10212*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3405:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x783eca and fs2 == 0 and fe2 == 0x83 and fm2 == 0x03ff9c and fs3 == 0 and fe3 == 0xe4 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d783eca; op2val:0x4183ff9c;
op3val:0x72001fff; valaddr_reg:x3; val_offset:10215*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10215*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3406:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x783eca and fs2 == 0 and fe2 == 0x83 and fm2 == 0x03ff9c and fs3 == 0 and fe3 == 0xe4 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d783eca; op2val:0x4183ff9c;
op3val:0x72003fff; valaddr_reg:x3; val_offset:10218*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10218*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3407:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x783eca and fs2 == 0 and fe2 == 0x83 and fm2 == 0x03ff9c and fs3 == 0 and fe3 == 0xe4 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d783eca; op2val:0x4183ff9c;
op3val:0x72007fff; valaddr_reg:x3; val_offset:10221*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10221*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3408:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x783eca and fs2 == 0 and fe2 == 0x83 and fm2 == 0x03ff9c and fs3 == 0 and fe3 == 0xe4 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d783eca; op2val:0x4183ff9c;
op3val:0x7200ffff; valaddr_reg:x3; val_offset:10224*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10224*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3409:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x783eca and fs2 == 0 and fe2 == 0x83 and fm2 == 0x03ff9c and fs3 == 0 and fe3 == 0xe4 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d783eca; op2val:0x4183ff9c;
op3val:0x7201ffff; valaddr_reg:x3; val_offset:10227*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10227*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3410:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x783eca and fs2 == 0 and fe2 == 0x83 and fm2 == 0x03ff9c and fs3 == 0 and fe3 == 0xe4 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d783eca; op2val:0x4183ff9c;
op3val:0x7203ffff; valaddr_reg:x3; val_offset:10230*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10230*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3411:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x783eca and fs2 == 0 and fe2 == 0x83 and fm2 == 0x03ff9c and fs3 == 0 and fe3 == 0xe4 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d783eca; op2val:0x4183ff9c;
op3val:0x7207ffff; valaddr_reg:x3; val_offset:10233*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10233*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3412:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x783eca and fs2 == 0 and fe2 == 0x83 and fm2 == 0x03ff9c and fs3 == 0 and fe3 == 0xe4 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d783eca; op2val:0x4183ff9c;
op3val:0x720fffff; valaddr_reg:x3; val_offset:10236*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10236*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3413:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x783eca and fs2 == 0 and fe2 == 0x83 and fm2 == 0x03ff9c and fs3 == 0 and fe3 == 0xe4 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d783eca; op2val:0x4183ff9c;
op3val:0x721fffff; valaddr_reg:x3; val_offset:10239*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10239*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3414:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x783eca and fs2 == 0 and fe2 == 0x83 and fm2 == 0x03ff9c and fs3 == 0 and fe3 == 0xe4 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d783eca; op2val:0x4183ff9c;
op3val:0x723fffff; valaddr_reg:x3; val_offset:10242*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10242*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3415:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x783eca and fs2 == 0 and fe2 == 0x83 and fm2 == 0x03ff9c and fs3 == 0 and fe3 == 0xe4 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d783eca; op2val:0x4183ff9c;
op3val:0x72400000; valaddr_reg:x3; val_offset:10245*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10245*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3416:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x783eca and fs2 == 0 and fe2 == 0x83 and fm2 == 0x03ff9c and fs3 == 0 and fe3 == 0xe4 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d783eca; op2val:0x4183ff9c;
op3val:0x72600000; valaddr_reg:x3; val_offset:10248*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10248*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3417:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x783eca and fs2 == 0 and fe2 == 0x83 and fm2 == 0x03ff9c and fs3 == 0 and fe3 == 0xe4 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d783eca; op2val:0x4183ff9c;
op3val:0x72700000; valaddr_reg:x3; val_offset:10251*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10251*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3418:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x783eca and fs2 == 0 and fe2 == 0x83 and fm2 == 0x03ff9c and fs3 == 0 and fe3 == 0xe4 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d783eca; op2val:0x4183ff9c;
op3val:0x72780000; valaddr_reg:x3; val_offset:10254*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10254*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3419:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x783eca and fs2 == 0 and fe2 == 0x83 and fm2 == 0x03ff9c and fs3 == 0 and fe3 == 0xe4 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d783eca; op2val:0x4183ff9c;
op3val:0x727c0000; valaddr_reg:x3; val_offset:10257*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10257*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3420:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x783eca and fs2 == 0 and fe2 == 0x83 and fm2 == 0x03ff9c and fs3 == 0 and fe3 == 0xe4 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d783eca; op2val:0x4183ff9c;
op3val:0x727e0000; valaddr_reg:x3; val_offset:10260*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10260*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3421:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x783eca and fs2 == 0 and fe2 == 0x83 and fm2 == 0x03ff9c and fs3 == 0 and fe3 == 0xe4 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d783eca; op2val:0x4183ff9c;
op3val:0x727f0000; valaddr_reg:x3; val_offset:10263*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10263*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3422:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x783eca and fs2 == 0 and fe2 == 0x83 and fm2 == 0x03ff9c and fs3 == 0 and fe3 == 0xe4 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d783eca; op2val:0x4183ff9c;
op3val:0x727f8000; valaddr_reg:x3; val_offset:10266*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10266*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3423:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x783eca and fs2 == 0 and fe2 == 0x83 and fm2 == 0x03ff9c and fs3 == 0 and fe3 == 0xe4 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d783eca; op2val:0x4183ff9c;
op3val:0x727fc000; valaddr_reg:x3; val_offset:10269*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10269*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3424:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x783eca and fs2 == 0 and fe2 == 0x83 and fm2 == 0x03ff9c and fs3 == 0 and fe3 == 0xe4 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d783eca; op2val:0x4183ff9c;
op3val:0x727fe000; valaddr_reg:x3; val_offset:10272*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10272*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3425:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x783eca and fs2 == 0 and fe2 == 0x83 and fm2 == 0x03ff9c and fs3 == 0 and fe3 == 0xe4 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d783eca; op2val:0x4183ff9c;
op3val:0x727ff000; valaddr_reg:x3; val_offset:10275*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10275*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3426:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x783eca and fs2 == 0 and fe2 == 0x83 and fm2 == 0x03ff9c and fs3 == 0 and fe3 == 0xe4 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d783eca; op2val:0x4183ff9c;
op3val:0x727ff800; valaddr_reg:x3; val_offset:10278*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10278*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3427:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x783eca and fs2 == 0 and fe2 == 0x83 and fm2 == 0x03ff9c and fs3 == 0 and fe3 == 0xe4 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d783eca; op2val:0x4183ff9c;
op3val:0x727ffc00; valaddr_reg:x3; val_offset:10281*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10281*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3428:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x783eca and fs2 == 0 and fe2 == 0x83 and fm2 == 0x03ff9c and fs3 == 0 and fe3 == 0xe4 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d783eca; op2val:0x4183ff9c;
op3val:0x727ffe00; valaddr_reg:x3; val_offset:10284*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10284*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3429:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x783eca and fs2 == 0 and fe2 == 0x83 and fm2 == 0x03ff9c and fs3 == 0 and fe3 == 0xe4 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d783eca; op2val:0x4183ff9c;
op3val:0x727fff00; valaddr_reg:x3; val_offset:10287*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10287*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3430:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x783eca and fs2 == 0 and fe2 == 0x83 and fm2 == 0x03ff9c and fs3 == 0 and fe3 == 0xe4 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d783eca; op2val:0x4183ff9c;
op3val:0x727fff80; valaddr_reg:x3; val_offset:10290*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10290*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3431:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x783eca and fs2 == 0 and fe2 == 0x83 and fm2 == 0x03ff9c and fs3 == 0 and fe3 == 0xe4 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d783eca; op2val:0x4183ff9c;
op3val:0x727fffc0; valaddr_reg:x3; val_offset:10293*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10293*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3432:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x783eca and fs2 == 0 and fe2 == 0x83 and fm2 == 0x03ff9c and fs3 == 0 and fe3 == 0xe4 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d783eca; op2val:0x4183ff9c;
op3val:0x727fffe0; valaddr_reg:x3; val_offset:10296*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10296*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3433:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x783eca and fs2 == 0 and fe2 == 0x83 and fm2 == 0x03ff9c and fs3 == 0 and fe3 == 0xe4 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d783eca; op2val:0x4183ff9c;
op3val:0x727ffff0; valaddr_reg:x3; val_offset:10299*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10299*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3434:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x783eca and fs2 == 0 and fe2 == 0x83 and fm2 == 0x03ff9c and fs3 == 0 and fe3 == 0xe4 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d783eca; op2val:0x4183ff9c;
op3val:0x727ffff8; valaddr_reg:x3; val_offset:10302*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10302*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3435:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x783eca and fs2 == 0 and fe2 == 0x83 and fm2 == 0x03ff9c and fs3 == 0 and fe3 == 0xe4 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d783eca; op2val:0x4183ff9c;
op3val:0x727ffffc; valaddr_reg:x3; val_offset:10305*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10305*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3436:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x783eca and fs2 == 0 and fe2 == 0x83 and fm2 == 0x03ff9c and fs3 == 0 and fe3 == 0xe4 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d783eca; op2val:0x4183ff9c;
op3val:0x727ffffe; valaddr_reg:x3; val_offset:10308*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10308*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3437:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x783eca and fs2 == 0 and fe2 == 0x83 and fm2 == 0x03ff9c and fs3 == 0 and fe3 == 0xe4 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d783eca; op2val:0x4183ff9c;
op3val:0x727fffff; valaddr_reg:x3; val_offset:10311*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10311*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3438:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x783eca and fs2 == 0 and fe2 == 0x83 and fm2 == 0x03ff9c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d783eca; op2val:0x4183ff9c;
op3val:0x7f000001; valaddr_reg:x3; val_offset:10314*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10314*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3439:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x783eca and fs2 == 0 and fe2 == 0x83 and fm2 == 0x03ff9c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d783eca; op2val:0x4183ff9c;
op3val:0x7f000003; valaddr_reg:x3; val_offset:10317*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10317*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3440:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x783eca and fs2 == 0 and fe2 == 0x83 and fm2 == 0x03ff9c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d783eca; op2val:0x4183ff9c;
op3val:0x7f000007; valaddr_reg:x3; val_offset:10320*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10320*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3441:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x783eca and fs2 == 0 and fe2 == 0x83 and fm2 == 0x03ff9c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d783eca; op2val:0x4183ff9c;
op3val:0x7f199999; valaddr_reg:x3; val_offset:10323*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10323*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3442:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x783eca and fs2 == 0 and fe2 == 0x83 and fm2 == 0x03ff9c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d783eca; op2val:0x4183ff9c;
op3val:0x7f249249; valaddr_reg:x3; val_offset:10326*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10326*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3443:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x783eca and fs2 == 0 and fe2 == 0x83 and fm2 == 0x03ff9c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d783eca; op2val:0x4183ff9c;
op3val:0x7f333333; valaddr_reg:x3; val_offset:10329*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10329*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3444:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x783eca and fs2 == 0 and fe2 == 0x83 and fm2 == 0x03ff9c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d783eca; op2val:0x4183ff9c;
op3val:0x7f36db6d; valaddr_reg:x3; val_offset:10332*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10332*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3445:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x783eca and fs2 == 0 and fe2 == 0x83 and fm2 == 0x03ff9c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d783eca; op2val:0x4183ff9c;
op3val:0x7f3bbbbb; valaddr_reg:x3; val_offset:10335*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10335*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3446:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x783eca and fs2 == 0 and fe2 == 0x83 and fm2 == 0x03ff9c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d783eca; op2val:0x4183ff9c;
op3val:0x7f444444; valaddr_reg:x3; val_offset:10338*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10338*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3447:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x783eca and fs2 == 0 and fe2 == 0x83 and fm2 == 0x03ff9c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d783eca; op2val:0x4183ff9c;
op3val:0x7f4ccccc; valaddr_reg:x3; val_offset:10341*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10341*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3448:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x783eca and fs2 == 0 and fe2 == 0x83 and fm2 == 0x03ff9c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d783eca; op2val:0x4183ff9c;
op3val:0x7f5b6db6; valaddr_reg:x3; val_offset:10344*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10344*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3449:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x783eca and fs2 == 0 and fe2 == 0x83 and fm2 == 0x03ff9c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d783eca; op2val:0x4183ff9c;
op3val:0x7f666666; valaddr_reg:x3; val_offset:10347*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10347*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3450:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x783eca and fs2 == 0 and fe2 == 0x83 and fm2 == 0x03ff9c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d783eca; op2val:0x4183ff9c;
op3val:0x7f6db6db; valaddr_reg:x3; val_offset:10350*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10350*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3451:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x783eca and fs2 == 0 and fe2 == 0x83 and fm2 == 0x03ff9c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d783eca; op2val:0x4183ff9c;
op3val:0x7f7ffff8; valaddr_reg:x3; val_offset:10353*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10353*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3452:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x783eca and fs2 == 0 and fe2 == 0x83 and fm2 == 0x03ff9c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d783eca; op2val:0x4183ff9c;
op3val:0x7f7ffffc; valaddr_reg:x3; val_offset:10356*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10356*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3453:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x783eca and fs2 == 0 and fe2 == 0x83 and fm2 == 0x03ff9c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d783eca; op2val:0x4183ff9c;
op3val:0x7f7ffffe; valaddr_reg:x3; val_offset:10359*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10359*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3454:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0081b9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8081b9; op2val:0x80000000;
op3val:0x80000001; valaddr_reg:x3; val_offset:10362*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10362*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3455:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0081b9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8081b9; op2val:0x80000000;
op3val:0x80000003; valaddr_reg:x3; val_offset:10365*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10365*0 + 3*26*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2104959273,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2273312766,32,FLEN)
NAN_BOXED(2104959273,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2273312767,32,FLEN)
NAN_BOXED(2105015099,32,FLEN)
NAN_BOXED(2172920722,32,FLEN)
NAN_BOXED(2751463424,32,FLEN)
NAN_BOXED(2105015099,32,FLEN)
NAN_BOXED(2172920722,32,FLEN)
NAN_BOXED(2751463425,32,FLEN)
NAN_BOXED(2105015099,32,FLEN)
NAN_BOXED(2172920722,32,FLEN)
NAN_BOXED(2751463427,32,FLEN)
NAN_BOXED(2105015099,32,FLEN)
NAN_BOXED(2172920722,32,FLEN)
NAN_BOXED(2751463431,32,FLEN)
NAN_BOXED(2105015099,32,FLEN)
NAN_BOXED(2172920722,32,FLEN)
NAN_BOXED(2751463439,32,FLEN)
NAN_BOXED(2105015099,32,FLEN)
NAN_BOXED(2172920722,32,FLEN)
NAN_BOXED(2751463455,32,FLEN)
NAN_BOXED(2105015099,32,FLEN)
NAN_BOXED(2172920722,32,FLEN)
NAN_BOXED(2751463487,32,FLEN)
NAN_BOXED(2105015099,32,FLEN)
NAN_BOXED(2172920722,32,FLEN)
NAN_BOXED(2751463551,32,FLEN)
NAN_BOXED(2105015099,32,FLEN)
NAN_BOXED(2172920722,32,FLEN)
NAN_BOXED(2751463679,32,FLEN)
NAN_BOXED(2105015099,32,FLEN)
NAN_BOXED(2172920722,32,FLEN)
NAN_BOXED(2751463935,32,FLEN)
NAN_BOXED(2105015099,32,FLEN)
NAN_BOXED(2172920722,32,FLEN)
NAN_BOXED(2751464447,32,FLEN)
NAN_BOXED(2105015099,32,FLEN)
NAN_BOXED(2172920722,32,FLEN)
NAN_BOXED(2751465471,32,FLEN)
NAN_BOXED(2105015099,32,FLEN)
NAN_BOXED(2172920722,32,FLEN)
NAN_BOXED(2751467519,32,FLEN)
NAN_BOXED(2105015099,32,FLEN)
NAN_BOXED(2172920722,32,FLEN)
NAN_BOXED(2751471615,32,FLEN)
NAN_BOXED(2105015099,32,FLEN)
NAN_BOXED(2172920722,32,FLEN)
NAN_BOXED(2751479807,32,FLEN)
NAN_BOXED(2105015099,32,FLEN)
NAN_BOXED(2172920722,32,FLEN)
NAN_BOXED(2751496191,32,FLEN)
NAN_BOXED(2105015099,32,FLEN)
NAN_BOXED(2172920722,32,FLEN)
NAN_BOXED(2751528959,32,FLEN)
NAN_BOXED(2105015099,32,FLEN)
NAN_BOXED(2172920722,32,FLEN)
NAN_BOXED(2751594495,32,FLEN)
NAN_BOXED(2105015099,32,FLEN)
NAN_BOXED(2172920722,32,FLEN)
NAN_BOXED(2751725567,32,FLEN)
NAN_BOXED(2105015099,32,FLEN)
NAN_BOXED(2172920722,32,FLEN)
NAN_BOXED(2751987711,32,FLEN)
NAN_BOXED(2105015099,32,FLEN)
NAN_BOXED(2172920722,32,FLEN)
NAN_BOXED(2752511999,32,FLEN)
NAN_BOXED(2105015099,32,FLEN)
NAN_BOXED(2172920722,32,FLEN)
NAN_BOXED(2753560575,32,FLEN)
NAN_BOXED(2105015099,32,FLEN)
NAN_BOXED(2172920722,32,FLEN)
NAN_BOXED(2755657727,32,FLEN)
NAN_BOXED(2105015099,32,FLEN)
NAN_BOXED(2172920722,32,FLEN)
NAN_BOXED(2755657728,32,FLEN)
NAN_BOXED(2105015099,32,FLEN)
NAN_BOXED(2172920722,32,FLEN)
NAN_BOXED(2757754880,32,FLEN)
NAN_BOXED(2105015099,32,FLEN)
NAN_BOXED(2172920722,32,FLEN)
NAN_BOXED(2758803456,32,FLEN)
NAN_BOXED(2105015099,32,FLEN)
NAN_BOXED(2172920722,32,FLEN)
NAN_BOXED(2759327744,32,FLEN)
NAN_BOXED(2105015099,32,FLEN)
NAN_BOXED(2172920722,32,FLEN)
NAN_BOXED(2759589888,32,FLEN)
NAN_BOXED(2105015099,32,FLEN)
NAN_BOXED(2172920722,32,FLEN)
NAN_BOXED(2759720960,32,FLEN)
NAN_BOXED(2105015099,32,FLEN)
NAN_BOXED(2172920722,32,FLEN)
NAN_BOXED(2759786496,32,FLEN)
NAN_BOXED(2105015099,32,FLEN)
NAN_BOXED(2172920722,32,FLEN)
NAN_BOXED(2759819264,32,FLEN)
NAN_BOXED(2105015099,32,FLEN)
NAN_BOXED(2172920722,32,FLEN)
NAN_BOXED(2759835648,32,FLEN)
NAN_BOXED(2105015099,32,FLEN)
NAN_BOXED(2172920722,32,FLEN)
NAN_BOXED(2759843840,32,FLEN)
NAN_BOXED(2105015099,32,FLEN)
NAN_BOXED(2172920722,32,FLEN)
NAN_BOXED(2759847936,32,FLEN)
NAN_BOXED(2105015099,32,FLEN)
NAN_BOXED(2172920722,32,FLEN)
NAN_BOXED(2759849984,32,FLEN)
NAN_BOXED(2105015099,32,FLEN)
NAN_BOXED(2172920722,32,FLEN)
NAN_BOXED(2759851008,32,FLEN)
NAN_BOXED(2105015099,32,FLEN)
NAN_BOXED(2172920722,32,FLEN)
NAN_BOXED(2759851520,32,FLEN)
NAN_BOXED(2105015099,32,FLEN)
NAN_BOXED(2172920722,32,FLEN)
NAN_BOXED(2759851776,32,FLEN)
NAN_BOXED(2105015099,32,FLEN)
NAN_BOXED(2172920722,32,FLEN)
NAN_BOXED(2759851904,32,FLEN)
NAN_BOXED(2105015099,32,FLEN)
NAN_BOXED(2172920722,32,FLEN)
NAN_BOXED(2759851968,32,FLEN)
NAN_BOXED(2105015099,32,FLEN)
NAN_BOXED(2172920722,32,FLEN)
NAN_BOXED(2759852000,32,FLEN)
NAN_BOXED(2105015099,32,FLEN)
NAN_BOXED(2172920722,32,FLEN)
NAN_BOXED(2759852016,32,FLEN)
NAN_BOXED(2105015099,32,FLEN)
NAN_BOXED(2172920722,32,FLEN)
NAN_BOXED(2759852024,32,FLEN)
NAN_BOXED(2105015099,32,FLEN)
NAN_BOXED(2172920722,32,FLEN)
NAN_BOXED(2759852028,32,FLEN)
NAN_BOXED(2105015099,32,FLEN)
NAN_BOXED(2172920722,32,FLEN)
NAN_BOXED(2759852030,32,FLEN)
NAN_BOXED(2105015099,32,FLEN)
NAN_BOXED(2172920722,32,FLEN)
NAN_BOXED(2759852031,32,FLEN)
NAN_BOXED(2105015099,32,FLEN)
NAN_BOXED(2172920722,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2105015099,32,FLEN)
NAN_BOXED(2172920722,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2105015099,32,FLEN)
NAN_BOXED(2172920722,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
NAN_BOXED(2105015099,32,FLEN)
NAN_BOXED(2172920722,32,FLEN)
NAN_BOXED(3214514585,32,FLEN)
NAN_BOXED(2105015099,32,FLEN)
NAN_BOXED(2172920722,32,FLEN)
NAN_BOXED(3215233609,32,FLEN)
NAN_BOXED(2105015099,32,FLEN)
NAN_BOXED(2172920722,32,FLEN)
NAN_BOXED(3216192307,32,FLEN)
NAN_BOXED(2105015099,32,FLEN)
NAN_BOXED(2172920722,32,FLEN)
NAN_BOXED(3216431981,32,FLEN)
NAN_BOXED(2105015099,32,FLEN)
NAN_BOXED(2172920722,32,FLEN)
NAN_BOXED(3216751547,32,FLEN)
NAN_BOXED(2105015099,32,FLEN)
NAN_BOXED(2172920722,32,FLEN)
NAN_BOXED(3217310788,32,FLEN)
NAN_BOXED(2105015099,32,FLEN)
NAN_BOXED(2172920722,32,FLEN)
NAN_BOXED(3217870028,32,FLEN)
NAN_BOXED(2105015099,32,FLEN)
NAN_BOXED(2172920722,32,FLEN)
NAN_BOXED(3218828726,32,FLEN)
NAN_BOXED(2105015099,32,FLEN)
NAN_BOXED(2172920722,32,FLEN)
NAN_BOXED(3219547750,32,FLEN)
NAN_BOXED(2105015099,32,FLEN)
NAN_BOXED(2172920722,32,FLEN)
NAN_BOXED(3220027099,32,FLEN)
NAN_BOXED(2105015099,32,FLEN)
NAN_BOXED(2172920722,32,FLEN)
NAN_BOXED(3221225464,32,FLEN)
NAN_BOXED(2105015099,32,FLEN)
NAN_BOXED(2172920722,32,FLEN)
NAN_BOXED(3221225468,32,FLEN)
NAN_BOXED(2105015099,32,FLEN)
NAN_BOXED(2172920722,32,FLEN)
NAN_BOXED(3221225470,32,FLEN)
NAN_BOXED(2105032394,32,FLEN)
NAN_BOXED(1099169692,32,FLEN)
NAN_BOXED(1912602624,32,FLEN)
NAN_BOXED(2105032394,32,FLEN)
NAN_BOXED(1099169692,32,FLEN)
NAN_BOXED(1912602625,32,FLEN)
NAN_BOXED(2105032394,32,FLEN)
NAN_BOXED(1099169692,32,FLEN)
NAN_BOXED(1912602627,32,FLEN)
NAN_BOXED(2105032394,32,FLEN)
NAN_BOXED(1099169692,32,FLEN)
NAN_BOXED(1912602631,32,FLEN)
NAN_BOXED(2105032394,32,FLEN)
NAN_BOXED(1099169692,32,FLEN)
NAN_BOXED(1912602639,32,FLEN)
NAN_BOXED(2105032394,32,FLEN)
NAN_BOXED(1099169692,32,FLEN)
NAN_BOXED(1912602655,32,FLEN)
NAN_BOXED(2105032394,32,FLEN)
NAN_BOXED(1099169692,32,FLEN)
NAN_BOXED(1912602687,32,FLEN)
NAN_BOXED(2105032394,32,FLEN)
NAN_BOXED(1099169692,32,FLEN)
NAN_BOXED(1912602751,32,FLEN)
NAN_BOXED(2105032394,32,FLEN)
NAN_BOXED(1099169692,32,FLEN)
NAN_BOXED(1912602879,32,FLEN)
NAN_BOXED(2105032394,32,FLEN)
NAN_BOXED(1099169692,32,FLEN)
NAN_BOXED(1912603135,32,FLEN)
NAN_BOXED(2105032394,32,FLEN)
NAN_BOXED(1099169692,32,FLEN)
NAN_BOXED(1912603647,32,FLEN)
NAN_BOXED(2105032394,32,FLEN)
NAN_BOXED(1099169692,32,FLEN)
NAN_BOXED(1912604671,32,FLEN)
NAN_BOXED(2105032394,32,FLEN)
NAN_BOXED(1099169692,32,FLEN)
NAN_BOXED(1912606719,32,FLEN)
NAN_BOXED(2105032394,32,FLEN)
NAN_BOXED(1099169692,32,FLEN)
NAN_BOXED(1912610815,32,FLEN)
NAN_BOXED(2105032394,32,FLEN)
NAN_BOXED(1099169692,32,FLEN)
NAN_BOXED(1912619007,32,FLEN)
NAN_BOXED(2105032394,32,FLEN)
NAN_BOXED(1099169692,32,FLEN)
NAN_BOXED(1912635391,32,FLEN)
NAN_BOXED(2105032394,32,FLEN)
NAN_BOXED(1099169692,32,FLEN)
NAN_BOXED(1912668159,32,FLEN)
NAN_BOXED(2105032394,32,FLEN)
NAN_BOXED(1099169692,32,FLEN)
NAN_BOXED(1912733695,32,FLEN)
NAN_BOXED(2105032394,32,FLEN)
NAN_BOXED(1099169692,32,FLEN)
NAN_BOXED(1912864767,32,FLEN)
NAN_BOXED(2105032394,32,FLEN)
NAN_BOXED(1099169692,32,FLEN)
NAN_BOXED(1913126911,32,FLEN)
NAN_BOXED(2105032394,32,FLEN)
NAN_BOXED(1099169692,32,FLEN)
NAN_BOXED(1913651199,32,FLEN)
NAN_BOXED(2105032394,32,FLEN)
NAN_BOXED(1099169692,32,FLEN)
NAN_BOXED(1914699775,32,FLEN)
NAN_BOXED(2105032394,32,FLEN)
NAN_BOXED(1099169692,32,FLEN)
NAN_BOXED(1916796927,32,FLEN)
NAN_BOXED(2105032394,32,FLEN)
NAN_BOXED(1099169692,32,FLEN)
NAN_BOXED(1916796928,32,FLEN)
NAN_BOXED(2105032394,32,FLEN)
NAN_BOXED(1099169692,32,FLEN)
NAN_BOXED(1918894080,32,FLEN)
NAN_BOXED(2105032394,32,FLEN)
NAN_BOXED(1099169692,32,FLEN)
NAN_BOXED(1919942656,32,FLEN)
NAN_BOXED(2105032394,32,FLEN)
NAN_BOXED(1099169692,32,FLEN)
NAN_BOXED(1920466944,32,FLEN)
NAN_BOXED(2105032394,32,FLEN)
NAN_BOXED(1099169692,32,FLEN)
NAN_BOXED(1920729088,32,FLEN)
NAN_BOXED(2105032394,32,FLEN)
NAN_BOXED(1099169692,32,FLEN)
NAN_BOXED(1920860160,32,FLEN)
NAN_BOXED(2105032394,32,FLEN)
NAN_BOXED(1099169692,32,FLEN)
NAN_BOXED(1920925696,32,FLEN)
NAN_BOXED(2105032394,32,FLEN)
NAN_BOXED(1099169692,32,FLEN)
NAN_BOXED(1920958464,32,FLEN)
NAN_BOXED(2105032394,32,FLEN)
NAN_BOXED(1099169692,32,FLEN)
NAN_BOXED(1920974848,32,FLEN)
NAN_BOXED(2105032394,32,FLEN)
NAN_BOXED(1099169692,32,FLEN)
NAN_BOXED(1920983040,32,FLEN)
NAN_BOXED(2105032394,32,FLEN)
NAN_BOXED(1099169692,32,FLEN)
NAN_BOXED(1920987136,32,FLEN)
NAN_BOXED(2105032394,32,FLEN)
NAN_BOXED(1099169692,32,FLEN)
NAN_BOXED(1920989184,32,FLEN)
NAN_BOXED(2105032394,32,FLEN)
NAN_BOXED(1099169692,32,FLEN)
NAN_BOXED(1920990208,32,FLEN)
NAN_BOXED(2105032394,32,FLEN)
NAN_BOXED(1099169692,32,FLEN)
NAN_BOXED(1920990720,32,FLEN)
NAN_BOXED(2105032394,32,FLEN)
NAN_BOXED(1099169692,32,FLEN)
NAN_BOXED(1920990976,32,FLEN)
NAN_BOXED(2105032394,32,FLEN)
NAN_BOXED(1099169692,32,FLEN)
NAN_BOXED(1920991104,32,FLEN)
NAN_BOXED(2105032394,32,FLEN)
NAN_BOXED(1099169692,32,FLEN)
NAN_BOXED(1920991168,32,FLEN)
NAN_BOXED(2105032394,32,FLEN)
NAN_BOXED(1099169692,32,FLEN)
NAN_BOXED(1920991200,32,FLEN)
NAN_BOXED(2105032394,32,FLEN)
NAN_BOXED(1099169692,32,FLEN)
NAN_BOXED(1920991216,32,FLEN)
NAN_BOXED(2105032394,32,FLEN)
NAN_BOXED(1099169692,32,FLEN)
NAN_BOXED(1920991224,32,FLEN)
NAN_BOXED(2105032394,32,FLEN)
NAN_BOXED(1099169692,32,FLEN)
NAN_BOXED(1920991228,32,FLEN)
NAN_BOXED(2105032394,32,FLEN)
NAN_BOXED(1099169692,32,FLEN)
NAN_BOXED(1920991230,32,FLEN)
NAN_BOXED(2105032394,32,FLEN)
NAN_BOXED(1099169692,32,FLEN)
NAN_BOXED(1920991231,32,FLEN)
NAN_BOXED(2105032394,32,FLEN)
NAN_BOXED(1099169692,32,FLEN)
NAN_BOXED(2130706433,32,FLEN)
NAN_BOXED(2105032394,32,FLEN)
NAN_BOXED(1099169692,32,FLEN)
NAN_BOXED(2130706435,32,FLEN)
NAN_BOXED(2105032394,32,FLEN)
NAN_BOXED(1099169692,32,FLEN)
NAN_BOXED(2130706439,32,FLEN)
NAN_BOXED(2105032394,32,FLEN)
NAN_BOXED(1099169692,32,FLEN)
NAN_BOXED(2132384153,32,FLEN)
NAN_BOXED(2105032394,32,FLEN)
NAN_BOXED(1099169692,32,FLEN)
NAN_BOXED(2133103177,32,FLEN)
NAN_BOXED(2105032394,32,FLEN)
NAN_BOXED(1099169692,32,FLEN)
NAN_BOXED(2134061875,32,FLEN)
NAN_BOXED(2105032394,32,FLEN)
NAN_BOXED(1099169692,32,FLEN)
NAN_BOXED(2134301549,32,FLEN)
NAN_BOXED(2105032394,32,FLEN)
NAN_BOXED(1099169692,32,FLEN)
NAN_BOXED(2134621115,32,FLEN)
NAN_BOXED(2105032394,32,FLEN)
NAN_BOXED(1099169692,32,FLEN)
NAN_BOXED(2135180356,32,FLEN)
NAN_BOXED(2105032394,32,FLEN)
NAN_BOXED(1099169692,32,FLEN)
NAN_BOXED(2135739596,32,FLEN)
NAN_BOXED(2105032394,32,FLEN)
NAN_BOXED(1099169692,32,FLEN)
NAN_BOXED(2136698294,32,FLEN)
NAN_BOXED(2105032394,32,FLEN)
NAN_BOXED(1099169692,32,FLEN)
NAN_BOXED(2137417318,32,FLEN)
NAN_BOXED(2105032394,32,FLEN)
NAN_BOXED(1099169692,32,FLEN)
NAN_BOXED(2137896667,32,FLEN)
NAN_BOXED(2105032394,32,FLEN)
NAN_BOXED(1099169692,32,FLEN)
NAN_BOXED(2139095032,32,FLEN)
NAN_BOXED(2105032394,32,FLEN)
NAN_BOXED(1099169692,32,FLEN)
NAN_BOXED(2139095036,32,FLEN)
NAN_BOXED(2105032394,32,FLEN)
NAN_BOXED(1099169692,32,FLEN)
NAN_BOXED(2139095038,32,FLEN)
NAN_BOXED(2105573817,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2105573817,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483651,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
