
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:17:59 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_34432:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bb989 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bb989; op2val:0x0;
op3val:0xc000fff; valaddr_reg:x3; val_offset:103296*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103296*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34433:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bb989 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bb989; op2val:0x0;
op3val:0xc001fff; valaddr_reg:x3; val_offset:103299*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103299*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34434:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bb989 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bb989; op2val:0x0;
op3val:0xc003fff; valaddr_reg:x3; val_offset:103302*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103302*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34435:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bb989 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bb989; op2val:0x0;
op3val:0xc007fff; valaddr_reg:x3; val_offset:103305*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103305*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34436:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bb989 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bb989; op2val:0x0;
op3val:0xc00ffff; valaddr_reg:x3; val_offset:103308*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103308*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34437:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bb989 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bb989; op2val:0x0;
op3val:0xc01ffff; valaddr_reg:x3; val_offset:103311*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103311*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34438:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bb989 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bb989; op2val:0x0;
op3val:0xc03ffff; valaddr_reg:x3; val_offset:103314*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103314*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34439:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bb989 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bb989; op2val:0x0;
op3val:0xc07ffff; valaddr_reg:x3; val_offset:103317*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103317*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34440:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bb989 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bb989; op2val:0x0;
op3val:0xc0fffff; valaddr_reg:x3; val_offset:103320*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103320*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34441:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bb989 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bb989; op2val:0x0;
op3val:0xc1fffff; valaddr_reg:x3; val_offset:103323*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103323*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34442:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bb989 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bb989; op2val:0x0;
op3val:0xc3fffff; valaddr_reg:x3; val_offset:103326*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103326*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34443:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bb989 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bb989; op2val:0x0;
op3val:0xc400000; valaddr_reg:x3; val_offset:103329*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103329*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34444:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bb989 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bb989; op2val:0x0;
op3val:0xc600000; valaddr_reg:x3; val_offset:103332*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103332*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34445:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bb989 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bb989; op2val:0x0;
op3val:0xc700000; valaddr_reg:x3; val_offset:103335*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103335*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34446:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bb989 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bb989; op2val:0x0;
op3val:0xc780000; valaddr_reg:x3; val_offset:103338*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103338*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34447:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bb989 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bb989; op2val:0x0;
op3val:0xc7c0000; valaddr_reg:x3; val_offset:103341*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103341*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34448:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bb989 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bb989; op2val:0x0;
op3val:0xc7e0000; valaddr_reg:x3; val_offset:103344*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103344*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34449:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bb989 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bb989; op2val:0x0;
op3val:0xc7f0000; valaddr_reg:x3; val_offset:103347*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103347*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34450:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bb989 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bb989; op2val:0x0;
op3val:0xc7f8000; valaddr_reg:x3; val_offset:103350*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103350*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34451:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bb989 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bb989; op2val:0x0;
op3val:0xc7fc000; valaddr_reg:x3; val_offset:103353*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103353*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34452:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bb989 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bb989; op2val:0x0;
op3val:0xc7fe000; valaddr_reg:x3; val_offset:103356*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103356*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34453:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bb989 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bb989; op2val:0x0;
op3val:0xc7ff000; valaddr_reg:x3; val_offset:103359*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103359*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34454:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bb989 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bb989; op2val:0x0;
op3val:0xc7ff800; valaddr_reg:x3; val_offset:103362*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103362*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34455:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bb989 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bb989; op2val:0x0;
op3val:0xc7ffc00; valaddr_reg:x3; val_offset:103365*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103365*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34456:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bb989 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bb989; op2val:0x0;
op3val:0xc7ffe00; valaddr_reg:x3; val_offset:103368*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103368*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34457:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bb989 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bb989; op2val:0x0;
op3val:0xc7fff00; valaddr_reg:x3; val_offset:103371*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103371*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34458:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bb989 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bb989; op2val:0x0;
op3val:0xc7fff80; valaddr_reg:x3; val_offset:103374*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103374*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34459:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bb989 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bb989; op2val:0x0;
op3val:0xc7fffc0; valaddr_reg:x3; val_offset:103377*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103377*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34460:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bb989 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bb989; op2val:0x0;
op3val:0xc7fffe0; valaddr_reg:x3; val_offset:103380*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103380*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34461:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bb989 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bb989; op2val:0x0;
op3val:0xc7ffff0; valaddr_reg:x3; val_offset:103383*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103383*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34462:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bb989 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bb989; op2val:0x0;
op3val:0xc7ffff8; valaddr_reg:x3; val_offset:103386*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103386*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34463:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bb989 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bb989; op2val:0x0;
op3val:0xc7ffffc; valaddr_reg:x3; val_offset:103389*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103389*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34464:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bb989 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bb989; op2val:0x0;
op3val:0xc7ffffe; valaddr_reg:x3; val_offset:103392*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103392*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34465:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bb989 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bb989; op2val:0x0;
op3val:0xc7fffff; valaddr_reg:x3; val_offset:103395*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103395*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34466:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c9c0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c9c0a; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:103398*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103398*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34467:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c9c0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c9c0a; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:103401*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103401*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34468:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c9c0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c9c0a; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:103404*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103404*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34469:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c9c0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c9c0a; op2val:0x0;
op3val:0x199999; valaddr_reg:x3; val_offset:103407*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103407*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34470:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c9c0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c9c0a; op2val:0x0;
op3val:0x249249; valaddr_reg:x3; val_offset:103410*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103410*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34471:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c9c0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c9c0a; op2val:0x0;
op3val:0x333333; valaddr_reg:x3; val_offset:103413*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103413*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34472:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c9c0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c9c0a; op2val:0x0;
op3val:0x36db6d; valaddr_reg:x3; val_offset:103416*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103416*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34473:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c9c0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c9c0a; op2val:0x0;
op3val:0x3bbbbb; valaddr_reg:x3; val_offset:103419*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103419*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34474:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c9c0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c9c0a; op2val:0x0;
op3val:0x444444; valaddr_reg:x3; val_offset:103422*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103422*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34475:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c9c0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c9c0a; op2val:0x0;
op3val:0x4ccccc; valaddr_reg:x3; val_offset:103425*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103425*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34476:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c9c0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c9c0a; op2val:0x0;
op3val:0x5b6db6; valaddr_reg:x3; val_offset:103428*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103428*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34477:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c9c0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c9c0a; op2val:0x0;
op3val:0x666666; valaddr_reg:x3; val_offset:103431*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103431*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34478:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c9c0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c9c0a; op2val:0x0;
op3val:0x6db6db; valaddr_reg:x3; val_offset:103434*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103434*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34479:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c9c0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c9c0a; op2val:0x0;
op3val:0x7ffff8; valaddr_reg:x3; val_offset:103437*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103437*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34480:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c9c0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c9c0a; op2val:0x0;
op3val:0x7ffffc; valaddr_reg:x3; val_offset:103440*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103440*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34481:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c9c0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c9c0a; op2val:0x0;
op3val:0x7ffffe; valaddr_reg:x3; val_offset:103443*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103443*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34482:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c9c0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c9c0a; op2val:0x0;
op3val:0x5800000; valaddr_reg:x3; val_offset:103446*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103446*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34483:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c9c0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c9c0a; op2val:0x0;
op3val:0x5800001; valaddr_reg:x3; val_offset:103449*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103449*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34484:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c9c0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c9c0a; op2val:0x0;
op3val:0x5800003; valaddr_reg:x3; val_offset:103452*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103452*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34485:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c9c0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c9c0a; op2val:0x0;
op3val:0x5800007; valaddr_reg:x3; val_offset:103455*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103455*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34486:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c9c0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c9c0a; op2val:0x0;
op3val:0x580000f; valaddr_reg:x3; val_offset:103458*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103458*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34487:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c9c0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c9c0a; op2val:0x0;
op3val:0x580001f; valaddr_reg:x3; val_offset:103461*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103461*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34488:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c9c0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c9c0a; op2val:0x0;
op3val:0x580003f; valaddr_reg:x3; val_offset:103464*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103464*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34489:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c9c0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c9c0a; op2val:0x0;
op3val:0x580007f; valaddr_reg:x3; val_offset:103467*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103467*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34490:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c9c0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c9c0a; op2val:0x0;
op3val:0x58000ff; valaddr_reg:x3; val_offset:103470*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103470*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34491:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c9c0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c9c0a; op2val:0x0;
op3val:0x58001ff; valaddr_reg:x3; val_offset:103473*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103473*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34492:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c9c0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c9c0a; op2val:0x0;
op3val:0x58003ff; valaddr_reg:x3; val_offset:103476*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103476*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34493:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c9c0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c9c0a; op2val:0x0;
op3val:0x58007ff; valaddr_reg:x3; val_offset:103479*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103479*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34494:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c9c0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c9c0a; op2val:0x0;
op3val:0x5800fff; valaddr_reg:x3; val_offset:103482*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103482*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34495:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c9c0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c9c0a; op2val:0x0;
op3val:0x5801fff; valaddr_reg:x3; val_offset:103485*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103485*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34496:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c9c0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c9c0a; op2val:0x0;
op3val:0x5803fff; valaddr_reg:x3; val_offset:103488*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103488*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34497:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c9c0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c9c0a; op2val:0x0;
op3val:0x5807fff; valaddr_reg:x3; val_offset:103491*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103491*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34498:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c9c0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c9c0a; op2val:0x0;
op3val:0x580ffff; valaddr_reg:x3; val_offset:103494*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103494*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34499:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c9c0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c9c0a; op2val:0x0;
op3val:0x581ffff; valaddr_reg:x3; val_offset:103497*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103497*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34500:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c9c0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c9c0a; op2val:0x0;
op3val:0x583ffff; valaddr_reg:x3; val_offset:103500*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103500*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34501:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c9c0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c9c0a; op2val:0x0;
op3val:0x587ffff; valaddr_reg:x3; val_offset:103503*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103503*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34502:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c9c0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c9c0a; op2val:0x0;
op3val:0x58fffff; valaddr_reg:x3; val_offset:103506*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103506*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34503:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c9c0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c9c0a; op2val:0x0;
op3val:0x59fffff; valaddr_reg:x3; val_offset:103509*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103509*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34504:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c9c0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c9c0a; op2val:0x0;
op3val:0x5bfffff; valaddr_reg:x3; val_offset:103512*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103512*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34505:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c9c0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c9c0a; op2val:0x0;
op3val:0x5c00000; valaddr_reg:x3; val_offset:103515*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103515*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34506:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c9c0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c9c0a; op2val:0x0;
op3val:0x5e00000; valaddr_reg:x3; val_offset:103518*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103518*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34507:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c9c0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c9c0a; op2val:0x0;
op3val:0x5f00000; valaddr_reg:x3; val_offset:103521*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103521*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34508:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c9c0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c9c0a; op2val:0x0;
op3val:0x5f80000; valaddr_reg:x3; val_offset:103524*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103524*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34509:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c9c0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c9c0a; op2val:0x0;
op3val:0x5fc0000; valaddr_reg:x3; val_offset:103527*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103527*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34510:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c9c0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c9c0a; op2val:0x0;
op3val:0x5fe0000; valaddr_reg:x3; val_offset:103530*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103530*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34511:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c9c0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c9c0a; op2val:0x0;
op3val:0x5ff0000; valaddr_reg:x3; val_offset:103533*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103533*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34512:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c9c0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c9c0a; op2val:0x0;
op3val:0x5ff8000; valaddr_reg:x3; val_offset:103536*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103536*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34513:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c9c0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c9c0a; op2val:0x0;
op3val:0x5ffc000; valaddr_reg:x3; val_offset:103539*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103539*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34514:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c9c0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c9c0a; op2val:0x0;
op3val:0x5ffe000; valaddr_reg:x3; val_offset:103542*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103542*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34515:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c9c0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c9c0a; op2val:0x0;
op3val:0x5fff000; valaddr_reg:x3; val_offset:103545*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103545*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34516:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c9c0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c9c0a; op2val:0x0;
op3val:0x5fff800; valaddr_reg:x3; val_offset:103548*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103548*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34517:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c9c0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c9c0a; op2val:0x0;
op3val:0x5fffc00; valaddr_reg:x3; val_offset:103551*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103551*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34518:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c9c0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c9c0a; op2val:0x0;
op3val:0x5fffe00; valaddr_reg:x3; val_offset:103554*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103554*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34519:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c9c0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c9c0a; op2val:0x0;
op3val:0x5ffff00; valaddr_reg:x3; val_offset:103557*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103557*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34520:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c9c0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c9c0a; op2val:0x0;
op3val:0x5ffff80; valaddr_reg:x3; val_offset:103560*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103560*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34521:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c9c0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c9c0a; op2val:0x0;
op3val:0x5ffffc0; valaddr_reg:x3; val_offset:103563*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103563*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34522:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c9c0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c9c0a; op2val:0x0;
op3val:0x5ffffe0; valaddr_reg:x3; val_offset:103566*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103566*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34523:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c9c0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c9c0a; op2val:0x0;
op3val:0x5fffff0; valaddr_reg:x3; val_offset:103569*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103569*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34524:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c9c0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c9c0a; op2val:0x0;
op3val:0x5fffff8; valaddr_reg:x3; val_offset:103572*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103572*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34525:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c9c0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c9c0a; op2val:0x0;
op3val:0x5fffffc; valaddr_reg:x3; val_offset:103575*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103575*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34526:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c9c0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c9c0a; op2val:0x0;
op3val:0x5fffffe; valaddr_reg:x3; val_offset:103578*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103578*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34527:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c9c0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c9c0a; op2val:0x0;
op3val:0x5ffffff; valaddr_reg:x3; val_offset:103581*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103581*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34528:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cd19e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f66f9 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cd19e; op2val:0x2f66f9;
op3val:0x3f800001; valaddr_reg:x3; val_offset:103584*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103584*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34529:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cd19e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f66f9 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cd19e; op2val:0x2f66f9;
op3val:0x3f800003; valaddr_reg:x3; val_offset:103587*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103587*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34530:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cd19e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f66f9 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cd19e; op2val:0x2f66f9;
op3val:0x3f800007; valaddr_reg:x3; val_offset:103590*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103590*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34531:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cd19e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f66f9 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cd19e; op2val:0x2f66f9;
op3val:0x3f999999; valaddr_reg:x3; val_offset:103593*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103593*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34532:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cd19e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f66f9 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cd19e; op2val:0x2f66f9;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:103596*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103596*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34533:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cd19e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f66f9 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cd19e; op2val:0x2f66f9;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:103599*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103599*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34534:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cd19e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f66f9 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cd19e; op2val:0x2f66f9;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:103602*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103602*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34535:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cd19e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f66f9 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cd19e; op2val:0x2f66f9;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:103605*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103605*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34536:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cd19e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f66f9 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cd19e; op2val:0x2f66f9;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:103608*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103608*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34537:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cd19e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f66f9 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cd19e; op2val:0x2f66f9;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:103611*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103611*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34538:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cd19e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f66f9 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cd19e; op2val:0x2f66f9;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:103614*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103614*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34539:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cd19e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f66f9 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cd19e; op2val:0x2f66f9;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:103617*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103617*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34540:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cd19e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f66f9 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cd19e; op2val:0x2f66f9;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:103620*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103620*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34541:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cd19e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f66f9 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cd19e; op2val:0x2f66f9;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:103623*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103623*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34542:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cd19e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f66f9 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cd19e; op2val:0x2f66f9;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:103626*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103626*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34543:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cd19e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f66f9 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cd19e; op2val:0x2f66f9;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:103629*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103629*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34544:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cd19e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f66f9 and fs3 == 0 and fe3 == 0x95 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cd19e; op2val:0x2f66f9;
op3val:0x4a800000; valaddr_reg:x3; val_offset:103632*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103632*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34545:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cd19e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f66f9 and fs3 == 0 and fe3 == 0x95 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cd19e; op2val:0x2f66f9;
op3val:0x4a800001; valaddr_reg:x3; val_offset:103635*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103635*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34546:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cd19e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f66f9 and fs3 == 0 and fe3 == 0x95 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cd19e; op2val:0x2f66f9;
op3val:0x4a800003; valaddr_reg:x3; val_offset:103638*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103638*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34547:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cd19e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f66f9 and fs3 == 0 and fe3 == 0x95 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cd19e; op2val:0x2f66f9;
op3val:0x4a800007; valaddr_reg:x3; val_offset:103641*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103641*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34548:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cd19e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f66f9 and fs3 == 0 and fe3 == 0x95 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cd19e; op2val:0x2f66f9;
op3val:0x4a80000f; valaddr_reg:x3; val_offset:103644*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103644*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34549:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cd19e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f66f9 and fs3 == 0 and fe3 == 0x95 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cd19e; op2val:0x2f66f9;
op3val:0x4a80001f; valaddr_reg:x3; val_offset:103647*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103647*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34550:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cd19e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f66f9 and fs3 == 0 and fe3 == 0x95 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cd19e; op2val:0x2f66f9;
op3val:0x4a80003f; valaddr_reg:x3; val_offset:103650*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103650*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34551:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cd19e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f66f9 and fs3 == 0 and fe3 == 0x95 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cd19e; op2val:0x2f66f9;
op3val:0x4a80007f; valaddr_reg:x3; val_offset:103653*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103653*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34552:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cd19e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f66f9 and fs3 == 0 and fe3 == 0x95 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cd19e; op2val:0x2f66f9;
op3val:0x4a8000ff; valaddr_reg:x3; val_offset:103656*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103656*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34553:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cd19e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f66f9 and fs3 == 0 and fe3 == 0x95 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cd19e; op2val:0x2f66f9;
op3val:0x4a8001ff; valaddr_reg:x3; val_offset:103659*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103659*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34554:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cd19e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f66f9 and fs3 == 0 and fe3 == 0x95 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cd19e; op2val:0x2f66f9;
op3val:0x4a8003ff; valaddr_reg:x3; val_offset:103662*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103662*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34555:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cd19e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f66f9 and fs3 == 0 and fe3 == 0x95 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cd19e; op2val:0x2f66f9;
op3val:0x4a8007ff; valaddr_reg:x3; val_offset:103665*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103665*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34556:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cd19e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f66f9 and fs3 == 0 and fe3 == 0x95 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cd19e; op2val:0x2f66f9;
op3val:0x4a800fff; valaddr_reg:x3; val_offset:103668*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103668*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34557:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cd19e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f66f9 and fs3 == 0 and fe3 == 0x95 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cd19e; op2val:0x2f66f9;
op3val:0x4a801fff; valaddr_reg:x3; val_offset:103671*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103671*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34558:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cd19e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f66f9 and fs3 == 0 and fe3 == 0x95 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cd19e; op2val:0x2f66f9;
op3val:0x4a803fff; valaddr_reg:x3; val_offset:103674*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103674*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34559:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cd19e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f66f9 and fs3 == 0 and fe3 == 0x95 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cd19e; op2val:0x2f66f9;
op3val:0x4a807fff; valaddr_reg:x3; val_offset:103677*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103677*0 + 3*269*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2133571977,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(201330687,32,FLEN)
NAN_BOXED(2133571977,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(201334783,32,FLEN)
NAN_BOXED(2133571977,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(201342975,32,FLEN)
NAN_BOXED(2133571977,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(201359359,32,FLEN)
NAN_BOXED(2133571977,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(201392127,32,FLEN)
NAN_BOXED(2133571977,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(201457663,32,FLEN)
NAN_BOXED(2133571977,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(201588735,32,FLEN)
NAN_BOXED(2133571977,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(201850879,32,FLEN)
NAN_BOXED(2133571977,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(202375167,32,FLEN)
NAN_BOXED(2133571977,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(203423743,32,FLEN)
NAN_BOXED(2133571977,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(205520895,32,FLEN)
NAN_BOXED(2133571977,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(205520896,32,FLEN)
NAN_BOXED(2133571977,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(207618048,32,FLEN)
NAN_BOXED(2133571977,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(208666624,32,FLEN)
NAN_BOXED(2133571977,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209190912,32,FLEN)
NAN_BOXED(2133571977,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209453056,32,FLEN)
NAN_BOXED(2133571977,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209584128,32,FLEN)
NAN_BOXED(2133571977,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209649664,32,FLEN)
NAN_BOXED(2133571977,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209682432,32,FLEN)
NAN_BOXED(2133571977,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209698816,32,FLEN)
NAN_BOXED(2133571977,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209707008,32,FLEN)
NAN_BOXED(2133571977,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209711104,32,FLEN)
NAN_BOXED(2133571977,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209713152,32,FLEN)
NAN_BOXED(2133571977,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209714176,32,FLEN)
NAN_BOXED(2133571977,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209714688,32,FLEN)
NAN_BOXED(2133571977,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209714944,32,FLEN)
NAN_BOXED(2133571977,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209715072,32,FLEN)
NAN_BOXED(2133571977,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209715136,32,FLEN)
NAN_BOXED(2133571977,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209715168,32,FLEN)
NAN_BOXED(2133571977,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209715184,32,FLEN)
NAN_BOXED(2133571977,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209715192,32,FLEN)
NAN_BOXED(2133571977,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209715196,32,FLEN)
NAN_BOXED(2133571977,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209715198,32,FLEN)
NAN_BOXED(2133571977,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209715199,32,FLEN)
NAN_BOXED(2133629962,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2133629962,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3,32,FLEN)
NAN_BOXED(2133629962,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7,32,FLEN)
NAN_BOXED(2133629962,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1677721,32,FLEN)
NAN_BOXED(2133629962,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2396745,32,FLEN)
NAN_BOXED(2133629962,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3355443,32,FLEN)
NAN_BOXED(2133629962,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3595117,32,FLEN)
NAN_BOXED(2133629962,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3914683,32,FLEN)
NAN_BOXED(2133629962,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4473924,32,FLEN)
NAN_BOXED(2133629962,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5033164,32,FLEN)
NAN_BOXED(2133629962,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5991862,32,FLEN)
NAN_BOXED(2133629962,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(6710886,32,FLEN)
NAN_BOXED(2133629962,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7190235,32,FLEN)
NAN_BOXED(2133629962,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388600,32,FLEN)
NAN_BOXED(2133629962,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388604,32,FLEN)
NAN_BOXED(2133629962,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388606,32,FLEN)
NAN_BOXED(2133629962,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92274688,32,FLEN)
NAN_BOXED(2133629962,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92274689,32,FLEN)
NAN_BOXED(2133629962,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92274691,32,FLEN)
NAN_BOXED(2133629962,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92274695,32,FLEN)
NAN_BOXED(2133629962,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92274703,32,FLEN)
NAN_BOXED(2133629962,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92274719,32,FLEN)
NAN_BOXED(2133629962,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92274751,32,FLEN)
NAN_BOXED(2133629962,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92274815,32,FLEN)
NAN_BOXED(2133629962,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92274943,32,FLEN)
NAN_BOXED(2133629962,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92275199,32,FLEN)
NAN_BOXED(2133629962,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92275711,32,FLEN)
NAN_BOXED(2133629962,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92276735,32,FLEN)
NAN_BOXED(2133629962,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92278783,32,FLEN)
NAN_BOXED(2133629962,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92282879,32,FLEN)
NAN_BOXED(2133629962,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92291071,32,FLEN)
NAN_BOXED(2133629962,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92307455,32,FLEN)
NAN_BOXED(2133629962,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92340223,32,FLEN)
NAN_BOXED(2133629962,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92405759,32,FLEN)
NAN_BOXED(2133629962,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92536831,32,FLEN)
NAN_BOXED(2133629962,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92798975,32,FLEN)
NAN_BOXED(2133629962,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(93323263,32,FLEN)
NAN_BOXED(2133629962,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(94371839,32,FLEN)
NAN_BOXED(2133629962,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(96468991,32,FLEN)
NAN_BOXED(2133629962,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(96468992,32,FLEN)
NAN_BOXED(2133629962,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(98566144,32,FLEN)
NAN_BOXED(2133629962,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(99614720,32,FLEN)
NAN_BOXED(2133629962,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100139008,32,FLEN)
NAN_BOXED(2133629962,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100401152,32,FLEN)
NAN_BOXED(2133629962,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100532224,32,FLEN)
NAN_BOXED(2133629962,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100597760,32,FLEN)
NAN_BOXED(2133629962,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100630528,32,FLEN)
NAN_BOXED(2133629962,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100646912,32,FLEN)
NAN_BOXED(2133629962,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100655104,32,FLEN)
NAN_BOXED(2133629962,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100659200,32,FLEN)
NAN_BOXED(2133629962,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100661248,32,FLEN)
NAN_BOXED(2133629962,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100662272,32,FLEN)
NAN_BOXED(2133629962,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100662784,32,FLEN)
NAN_BOXED(2133629962,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100663040,32,FLEN)
NAN_BOXED(2133629962,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100663168,32,FLEN)
NAN_BOXED(2133629962,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100663232,32,FLEN)
NAN_BOXED(2133629962,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100663264,32,FLEN)
NAN_BOXED(2133629962,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100663280,32,FLEN)
NAN_BOXED(2133629962,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100663288,32,FLEN)
NAN_BOXED(2133629962,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100663292,32,FLEN)
NAN_BOXED(2133629962,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100663294,32,FLEN)
NAN_BOXED(2133629962,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100663295,32,FLEN)
NAN_BOXED(2133643678,32,FLEN)
NAN_BOXED(3106553,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2133643678,32,FLEN)
NAN_BOXED(3106553,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2133643678,32,FLEN)
NAN_BOXED(3106553,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2133643678,32,FLEN)
NAN_BOXED(3106553,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2133643678,32,FLEN)
NAN_BOXED(3106553,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2133643678,32,FLEN)
NAN_BOXED(3106553,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2133643678,32,FLEN)
NAN_BOXED(3106553,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2133643678,32,FLEN)
NAN_BOXED(3106553,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2133643678,32,FLEN)
NAN_BOXED(3106553,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2133643678,32,FLEN)
NAN_BOXED(3106553,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2133643678,32,FLEN)
NAN_BOXED(3106553,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2133643678,32,FLEN)
NAN_BOXED(3106553,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2133643678,32,FLEN)
NAN_BOXED(3106553,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2133643678,32,FLEN)
NAN_BOXED(3106553,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2133643678,32,FLEN)
NAN_BOXED(3106553,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2133643678,32,FLEN)
NAN_BOXED(3106553,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2133643678,32,FLEN)
NAN_BOXED(3106553,32,FLEN)
NAN_BOXED(1249902592,32,FLEN)
NAN_BOXED(2133643678,32,FLEN)
NAN_BOXED(3106553,32,FLEN)
NAN_BOXED(1249902593,32,FLEN)
NAN_BOXED(2133643678,32,FLEN)
NAN_BOXED(3106553,32,FLEN)
NAN_BOXED(1249902595,32,FLEN)
NAN_BOXED(2133643678,32,FLEN)
NAN_BOXED(3106553,32,FLEN)
NAN_BOXED(1249902599,32,FLEN)
NAN_BOXED(2133643678,32,FLEN)
NAN_BOXED(3106553,32,FLEN)
NAN_BOXED(1249902607,32,FLEN)
NAN_BOXED(2133643678,32,FLEN)
NAN_BOXED(3106553,32,FLEN)
NAN_BOXED(1249902623,32,FLEN)
NAN_BOXED(2133643678,32,FLEN)
NAN_BOXED(3106553,32,FLEN)
NAN_BOXED(1249902655,32,FLEN)
NAN_BOXED(2133643678,32,FLEN)
NAN_BOXED(3106553,32,FLEN)
NAN_BOXED(1249902719,32,FLEN)
NAN_BOXED(2133643678,32,FLEN)
NAN_BOXED(3106553,32,FLEN)
NAN_BOXED(1249902847,32,FLEN)
NAN_BOXED(2133643678,32,FLEN)
NAN_BOXED(3106553,32,FLEN)
NAN_BOXED(1249903103,32,FLEN)
NAN_BOXED(2133643678,32,FLEN)
NAN_BOXED(3106553,32,FLEN)
NAN_BOXED(1249903615,32,FLEN)
NAN_BOXED(2133643678,32,FLEN)
NAN_BOXED(3106553,32,FLEN)
NAN_BOXED(1249904639,32,FLEN)
NAN_BOXED(2133643678,32,FLEN)
NAN_BOXED(3106553,32,FLEN)
NAN_BOXED(1249906687,32,FLEN)
NAN_BOXED(2133643678,32,FLEN)
NAN_BOXED(3106553,32,FLEN)
NAN_BOXED(1249910783,32,FLEN)
NAN_BOXED(2133643678,32,FLEN)
NAN_BOXED(3106553,32,FLEN)
NAN_BOXED(1249918975,32,FLEN)
NAN_BOXED(2133643678,32,FLEN)
NAN_BOXED(3106553,32,FLEN)
NAN_BOXED(1249935359,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
