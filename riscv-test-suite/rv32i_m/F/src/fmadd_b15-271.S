
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:17:59 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_34560:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cd19e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f66f9 and fs3 == 0 and fe3 == 0x95 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cd19e; op2val:0x2f66f9;
op3val:0x4a80ffff; valaddr_reg:x3; val_offset:103680*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103680*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34561:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cd19e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f66f9 and fs3 == 0 and fe3 == 0x95 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cd19e; op2val:0x2f66f9;
op3val:0x4a81ffff; valaddr_reg:x3; val_offset:103683*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103683*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34562:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cd19e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f66f9 and fs3 == 0 and fe3 == 0x95 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cd19e; op2val:0x2f66f9;
op3val:0x4a83ffff; valaddr_reg:x3; val_offset:103686*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103686*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34563:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cd19e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f66f9 and fs3 == 0 and fe3 == 0x95 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cd19e; op2val:0x2f66f9;
op3val:0x4a87ffff; valaddr_reg:x3; val_offset:103689*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103689*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34564:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cd19e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f66f9 and fs3 == 0 and fe3 == 0x95 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cd19e; op2val:0x2f66f9;
op3val:0x4a8fffff; valaddr_reg:x3; val_offset:103692*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103692*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34565:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cd19e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f66f9 and fs3 == 0 and fe3 == 0x95 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cd19e; op2val:0x2f66f9;
op3val:0x4a9fffff; valaddr_reg:x3; val_offset:103695*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103695*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34566:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cd19e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f66f9 and fs3 == 0 and fe3 == 0x95 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cd19e; op2val:0x2f66f9;
op3val:0x4abfffff; valaddr_reg:x3; val_offset:103698*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103698*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34567:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cd19e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f66f9 and fs3 == 0 and fe3 == 0x95 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cd19e; op2val:0x2f66f9;
op3val:0x4ac00000; valaddr_reg:x3; val_offset:103701*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103701*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34568:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cd19e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f66f9 and fs3 == 0 and fe3 == 0x95 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cd19e; op2val:0x2f66f9;
op3val:0x4ae00000; valaddr_reg:x3; val_offset:103704*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103704*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34569:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cd19e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f66f9 and fs3 == 0 and fe3 == 0x95 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cd19e; op2val:0x2f66f9;
op3val:0x4af00000; valaddr_reg:x3; val_offset:103707*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103707*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34570:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cd19e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f66f9 and fs3 == 0 and fe3 == 0x95 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cd19e; op2val:0x2f66f9;
op3val:0x4af80000; valaddr_reg:x3; val_offset:103710*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103710*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34571:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cd19e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f66f9 and fs3 == 0 and fe3 == 0x95 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cd19e; op2val:0x2f66f9;
op3val:0x4afc0000; valaddr_reg:x3; val_offset:103713*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103713*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34572:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cd19e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f66f9 and fs3 == 0 and fe3 == 0x95 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cd19e; op2val:0x2f66f9;
op3val:0x4afe0000; valaddr_reg:x3; val_offset:103716*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103716*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34573:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cd19e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f66f9 and fs3 == 0 and fe3 == 0x95 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cd19e; op2val:0x2f66f9;
op3val:0x4aff0000; valaddr_reg:x3; val_offset:103719*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103719*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34574:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cd19e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f66f9 and fs3 == 0 and fe3 == 0x95 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cd19e; op2val:0x2f66f9;
op3val:0x4aff8000; valaddr_reg:x3; val_offset:103722*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103722*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34575:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cd19e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f66f9 and fs3 == 0 and fe3 == 0x95 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cd19e; op2val:0x2f66f9;
op3val:0x4affc000; valaddr_reg:x3; val_offset:103725*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103725*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34576:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cd19e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f66f9 and fs3 == 0 and fe3 == 0x95 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cd19e; op2val:0x2f66f9;
op3val:0x4affe000; valaddr_reg:x3; val_offset:103728*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103728*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34577:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cd19e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f66f9 and fs3 == 0 and fe3 == 0x95 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cd19e; op2val:0x2f66f9;
op3val:0x4afff000; valaddr_reg:x3; val_offset:103731*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103731*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34578:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cd19e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f66f9 and fs3 == 0 and fe3 == 0x95 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cd19e; op2val:0x2f66f9;
op3val:0x4afff800; valaddr_reg:x3; val_offset:103734*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103734*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34579:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cd19e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f66f9 and fs3 == 0 and fe3 == 0x95 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cd19e; op2val:0x2f66f9;
op3val:0x4afffc00; valaddr_reg:x3; val_offset:103737*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103737*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34580:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cd19e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f66f9 and fs3 == 0 and fe3 == 0x95 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cd19e; op2val:0x2f66f9;
op3val:0x4afffe00; valaddr_reg:x3; val_offset:103740*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103740*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34581:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cd19e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f66f9 and fs3 == 0 and fe3 == 0x95 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cd19e; op2val:0x2f66f9;
op3val:0x4affff00; valaddr_reg:x3; val_offset:103743*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103743*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34582:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cd19e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f66f9 and fs3 == 0 and fe3 == 0x95 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cd19e; op2val:0x2f66f9;
op3val:0x4affff80; valaddr_reg:x3; val_offset:103746*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103746*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34583:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cd19e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f66f9 and fs3 == 0 and fe3 == 0x95 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cd19e; op2val:0x2f66f9;
op3val:0x4affffc0; valaddr_reg:x3; val_offset:103749*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103749*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34584:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cd19e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f66f9 and fs3 == 0 and fe3 == 0x95 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cd19e; op2val:0x2f66f9;
op3val:0x4affffe0; valaddr_reg:x3; val_offset:103752*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103752*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34585:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cd19e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f66f9 and fs3 == 0 and fe3 == 0x95 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cd19e; op2val:0x2f66f9;
op3val:0x4afffff0; valaddr_reg:x3; val_offset:103755*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103755*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34586:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cd19e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f66f9 and fs3 == 0 and fe3 == 0x95 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cd19e; op2val:0x2f66f9;
op3val:0x4afffff8; valaddr_reg:x3; val_offset:103758*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103758*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34587:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cd19e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f66f9 and fs3 == 0 and fe3 == 0x95 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cd19e; op2val:0x2f66f9;
op3val:0x4afffffc; valaddr_reg:x3; val_offset:103761*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103761*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34588:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cd19e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f66f9 and fs3 == 0 and fe3 == 0x95 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cd19e; op2val:0x2f66f9;
op3val:0x4afffffe; valaddr_reg:x3; val_offset:103764*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103764*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34589:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cd19e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f66f9 and fs3 == 0 and fe3 == 0x95 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cd19e; op2val:0x2f66f9;
op3val:0x4affffff; valaddr_reg:x3; val_offset:103767*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103767*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34590:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cf93a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3d7079 and fs3 == 0 and fe3 == 0xd0 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cf93a; op2val:0x3fbd7079;
op3val:0x68000000; valaddr_reg:x3; val_offset:103770*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103770*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34591:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cf93a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3d7079 and fs3 == 0 and fe3 == 0xd0 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cf93a; op2val:0x3fbd7079;
op3val:0x68000001; valaddr_reg:x3; val_offset:103773*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103773*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34592:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cf93a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3d7079 and fs3 == 0 and fe3 == 0xd0 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cf93a; op2val:0x3fbd7079;
op3val:0x68000003; valaddr_reg:x3; val_offset:103776*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103776*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34593:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cf93a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3d7079 and fs3 == 0 and fe3 == 0xd0 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cf93a; op2val:0x3fbd7079;
op3val:0x68000007; valaddr_reg:x3; val_offset:103779*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103779*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34594:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cf93a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3d7079 and fs3 == 0 and fe3 == 0xd0 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cf93a; op2val:0x3fbd7079;
op3val:0x6800000f; valaddr_reg:x3; val_offset:103782*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103782*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34595:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cf93a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3d7079 and fs3 == 0 and fe3 == 0xd0 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cf93a; op2val:0x3fbd7079;
op3val:0x6800001f; valaddr_reg:x3; val_offset:103785*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103785*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34596:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cf93a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3d7079 and fs3 == 0 and fe3 == 0xd0 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cf93a; op2val:0x3fbd7079;
op3val:0x6800003f; valaddr_reg:x3; val_offset:103788*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103788*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34597:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cf93a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3d7079 and fs3 == 0 and fe3 == 0xd0 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cf93a; op2val:0x3fbd7079;
op3val:0x6800007f; valaddr_reg:x3; val_offset:103791*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103791*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34598:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cf93a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3d7079 and fs3 == 0 and fe3 == 0xd0 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cf93a; op2val:0x3fbd7079;
op3val:0x680000ff; valaddr_reg:x3; val_offset:103794*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103794*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34599:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cf93a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3d7079 and fs3 == 0 and fe3 == 0xd0 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cf93a; op2val:0x3fbd7079;
op3val:0x680001ff; valaddr_reg:x3; val_offset:103797*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103797*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34600:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cf93a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3d7079 and fs3 == 0 and fe3 == 0xd0 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cf93a; op2val:0x3fbd7079;
op3val:0x680003ff; valaddr_reg:x3; val_offset:103800*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103800*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34601:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cf93a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3d7079 and fs3 == 0 and fe3 == 0xd0 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cf93a; op2val:0x3fbd7079;
op3val:0x680007ff; valaddr_reg:x3; val_offset:103803*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103803*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34602:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cf93a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3d7079 and fs3 == 0 and fe3 == 0xd0 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cf93a; op2val:0x3fbd7079;
op3val:0x68000fff; valaddr_reg:x3; val_offset:103806*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103806*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34603:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cf93a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3d7079 and fs3 == 0 and fe3 == 0xd0 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cf93a; op2val:0x3fbd7079;
op3val:0x68001fff; valaddr_reg:x3; val_offset:103809*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103809*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34604:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cf93a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3d7079 and fs3 == 0 and fe3 == 0xd0 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cf93a; op2val:0x3fbd7079;
op3val:0x68003fff; valaddr_reg:x3; val_offset:103812*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103812*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34605:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cf93a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3d7079 and fs3 == 0 and fe3 == 0xd0 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cf93a; op2val:0x3fbd7079;
op3val:0x68007fff; valaddr_reg:x3; val_offset:103815*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103815*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34606:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cf93a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3d7079 and fs3 == 0 and fe3 == 0xd0 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cf93a; op2val:0x3fbd7079;
op3val:0x6800ffff; valaddr_reg:x3; val_offset:103818*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103818*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34607:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cf93a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3d7079 and fs3 == 0 and fe3 == 0xd0 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cf93a; op2val:0x3fbd7079;
op3val:0x6801ffff; valaddr_reg:x3; val_offset:103821*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103821*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34608:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cf93a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3d7079 and fs3 == 0 and fe3 == 0xd0 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cf93a; op2val:0x3fbd7079;
op3val:0x6803ffff; valaddr_reg:x3; val_offset:103824*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103824*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34609:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cf93a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3d7079 and fs3 == 0 and fe3 == 0xd0 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cf93a; op2val:0x3fbd7079;
op3val:0x6807ffff; valaddr_reg:x3; val_offset:103827*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103827*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34610:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cf93a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3d7079 and fs3 == 0 and fe3 == 0xd0 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cf93a; op2val:0x3fbd7079;
op3val:0x680fffff; valaddr_reg:x3; val_offset:103830*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103830*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34611:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cf93a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3d7079 and fs3 == 0 and fe3 == 0xd0 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cf93a; op2val:0x3fbd7079;
op3val:0x681fffff; valaddr_reg:x3; val_offset:103833*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103833*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34612:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cf93a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3d7079 and fs3 == 0 and fe3 == 0xd0 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cf93a; op2val:0x3fbd7079;
op3val:0x683fffff; valaddr_reg:x3; val_offset:103836*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103836*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34613:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cf93a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3d7079 and fs3 == 0 and fe3 == 0xd0 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cf93a; op2val:0x3fbd7079;
op3val:0x68400000; valaddr_reg:x3; val_offset:103839*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103839*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34614:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cf93a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3d7079 and fs3 == 0 and fe3 == 0xd0 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cf93a; op2val:0x3fbd7079;
op3val:0x68600000; valaddr_reg:x3; val_offset:103842*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103842*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34615:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cf93a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3d7079 and fs3 == 0 and fe3 == 0xd0 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cf93a; op2val:0x3fbd7079;
op3val:0x68700000; valaddr_reg:x3; val_offset:103845*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103845*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34616:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cf93a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3d7079 and fs3 == 0 and fe3 == 0xd0 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cf93a; op2val:0x3fbd7079;
op3val:0x68780000; valaddr_reg:x3; val_offset:103848*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103848*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34617:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cf93a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3d7079 and fs3 == 0 and fe3 == 0xd0 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cf93a; op2val:0x3fbd7079;
op3val:0x687c0000; valaddr_reg:x3; val_offset:103851*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103851*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34618:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cf93a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3d7079 and fs3 == 0 and fe3 == 0xd0 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cf93a; op2val:0x3fbd7079;
op3val:0x687e0000; valaddr_reg:x3; val_offset:103854*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103854*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34619:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cf93a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3d7079 and fs3 == 0 and fe3 == 0xd0 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cf93a; op2val:0x3fbd7079;
op3val:0x687f0000; valaddr_reg:x3; val_offset:103857*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103857*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34620:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cf93a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3d7079 and fs3 == 0 and fe3 == 0xd0 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cf93a; op2val:0x3fbd7079;
op3val:0x687f8000; valaddr_reg:x3; val_offset:103860*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103860*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34621:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cf93a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3d7079 and fs3 == 0 and fe3 == 0xd0 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cf93a; op2val:0x3fbd7079;
op3val:0x687fc000; valaddr_reg:x3; val_offset:103863*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103863*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34622:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cf93a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3d7079 and fs3 == 0 and fe3 == 0xd0 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cf93a; op2val:0x3fbd7079;
op3val:0x687fe000; valaddr_reg:x3; val_offset:103866*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103866*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34623:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cf93a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3d7079 and fs3 == 0 and fe3 == 0xd0 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cf93a; op2val:0x3fbd7079;
op3val:0x687ff000; valaddr_reg:x3; val_offset:103869*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103869*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34624:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cf93a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3d7079 and fs3 == 0 and fe3 == 0xd0 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cf93a; op2val:0x3fbd7079;
op3val:0x687ff800; valaddr_reg:x3; val_offset:103872*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103872*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34625:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cf93a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3d7079 and fs3 == 0 and fe3 == 0xd0 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cf93a; op2val:0x3fbd7079;
op3val:0x687ffc00; valaddr_reg:x3; val_offset:103875*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103875*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34626:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cf93a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3d7079 and fs3 == 0 and fe3 == 0xd0 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cf93a; op2val:0x3fbd7079;
op3val:0x687ffe00; valaddr_reg:x3; val_offset:103878*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103878*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34627:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cf93a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3d7079 and fs3 == 0 and fe3 == 0xd0 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cf93a; op2val:0x3fbd7079;
op3val:0x687fff00; valaddr_reg:x3; val_offset:103881*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103881*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34628:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cf93a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3d7079 and fs3 == 0 and fe3 == 0xd0 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cf93a; op2val:0x3fbd7079;
op3val:0x687fff80; valaddr_reg:x3; val_offset:103884*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103884*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34629:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cf93a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3d7079 and fs3 == 0 and fe3 == 0xd0 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cf93a; op2val:0x3fbd7079;
op3val:0x687fffc0; valaddr_reg:x3; val_offset:103887*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103887*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34630:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cf93a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3d7079 and fs3 == 0 and fe3 == 0xd0 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cf93a; op2val:0x3fbd7079;
op3val:0x687fffe0; valaddr_reg:x3; val_offset:103890*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103890*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34631:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cf93a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3d7079 and fs3 == 0 and fe3 == 0xd0 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cf93a; op2val:0x3fbd7079;
op3val:0x687ffff0; valaddr_reg:x3; val_offset:103893*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103893*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34632:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cf93a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3d7079 and fs3 == 0 and fe3 == 0xd0 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cf93a; op2val:0x3fbd7079;
op3val:0x687ffff8; valaddr_reg:x3; val_offset:103896*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103896*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34633:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cf93a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3d7079 and fs3 == 0 and fe3 == 0xd0 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cf93a; op2val:0x3fbd7079;
op3val:0x687ffffc; valaddr_reg:x3; val_offset:103899*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103899*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34634:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cf93a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3d7079 and fs3 == 0 and fe3 == 0xd0 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cf93a; op2val:0x3fbd7079;
op3val:0x687ffffe; valaddr_reg:x3; val_offset:103902*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103902*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34635:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cf93a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3d7079 and fs3 == 0 and fe3 == 0xd0 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cf93a; op2val:0x3fbd7079;
op3val:0x687fffff; valaddr_reg:x3; val_offset:103905*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103905*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34636:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cf93a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3d7079 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cf93a; op2val:0x3fbd7079;
op3val:0x7f000001; valaddr_reg:x3; val_offset:103908*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103908*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34637:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cf93a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3d7079 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cf93a; op2val:0x3fbd7079;
op3val:0x7f000003; valaddr_reg:x3; val_offset:103911*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103911*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34638:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cf93a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3d7079 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cf93a; op2val:0x3fbd7079;
op3val:0x7f000007; valaddr_reg:x3; val_offset:103914*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103914*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34639:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cf93a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3d7079 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cf93a; op2val:0x3fbd7079;
op3val:0x7f199999; valaddr_reg:x3; val_offset:103917*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103917*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34640:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cf93a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3d7079 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cf93a; op2val:0x3fbd7079;
op3val:0x7f249249; valaddr_reg:x3; val_offset:103920*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103920*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34641:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cf93a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3d7079 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cf93a; op2val:0x3fbd7079;
op3val:0x7f333333; valaddr_reg:x3; val_offset:103923*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103923*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34642:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cf93a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3d7079 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cf93a; op2val:0x3fbd7079;
op3val:0x7f36db6d; valaddr_reg:x3; val_offset:103926*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103926*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34643:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cf93a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3d7079 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cf93a; op2val:0x3fbd7079;
op3val:0x7f3bbbbb; valaddr_reg:x3; val_offset:103929*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103929*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34644:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cf93a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3d7079 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cf93a; op2val:0x3fbd7079;
op3val:0x7f444444; valaddr_reg:x3; val_offset:103932*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103932*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34645:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cf93a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3d7079 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cf93a; op2val:0x3fbd7079;
op3val:0x7f4ccccc; valaddr_reg:x3; val_offset:103935*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103935*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34646:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cf93a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3d7079 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cf93a; op2val:0x3fbd7079;
op3val:0x7f5b6db6; valaddr_reg:x3; val_offset:103938*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103938*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34647:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cf93a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3d7079 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cf93a; op2val:0x3fbd7079;
op3val:0x7f666666; valaddr_reg:x3; val_offset:103941*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103941*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34648:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cf93a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3d7079 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cf93a; op2val:0x3fbd7079;
op3val:0x7f6db6db; valaddr_reg:x3; val_offset:103944*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103944*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34649:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cf93a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3d7079 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cf93a; op2val:0x3fbd7079;
op3val:0x7f7ffff8; valaddr_reg:x3; val_offset:103947*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103947*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34650:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cf93a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3d7079 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cf93a; op2val:0x3fbd7079;
op3val:0x7f7ffffc; valaddr_reg:x3; val_offset:103950*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103950*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34651:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cf93a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3d7079 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cf93a; op2val:0x3fbd7079;
op3val:0x7f7ffffe; valaddr_reg:x3; val_offset:103953*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103953*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34652:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d0175 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d0175; op2val:0x80000000;
op3val:0x80800001; valaddr_reg:x3; val_offset:103956*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103956*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34653:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d0175 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d0175; op2val:0x80000000;
op3val:0x80800003; valaddr_reg:x3; val_offset:103959*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103959*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34654:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d0175 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d0175; op2val:0x80000000;
op3val:0x80800007; valaddr_reg:x3; val_offset:103962*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103962*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34655:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d0175 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d0175; op2val:0x80000000;
op3val:0x80999999; valaddr_reg:x3; val_offset:103965*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103965*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34656:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d0175 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d0175; op2val:0x80000000;
op3val:0x80a49249; valaddr_reg:x3; val_offset:103968*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103968*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34657:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d0175 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d0175; op2val:0x80000000;
op3val:0x80b33333; valaddr_reg:x3; val_offset:103971*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103971*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34658:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d0175 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d0175; op2val:0x80000000;
op3val:0x80b6db6d; valaddr_reg:x3; val_offset:103974*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103974*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34659:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d0175 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d0175; op2val:0x80000000;
op3val:0x80bbbbbb; valaddr_reg:x3; val_offset:103977*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103977*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34660:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d0175 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d0175; op2val:0x80000000;
op3val:0x80c44444; valaddr_reg:x3; val_offset:103980*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103980*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34661:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d0175 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d0175; op2val:0x80000000;
op3val:0x80cccccc; valaddr_reg:x3; val_offset:103983*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103983*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34662:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d0175 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d0175; op2val:0x80000000;
op3val:0x80db6db6; valaddr_reg:x3; val_offset:103986*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103986*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34663:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d0175 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d0175; op2val:0x80000000;
op3val:0x80e66666; valaddr_reg:x3; val_offset:103989*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103989*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34664:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d0175 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d0175; op2val:0x80000000;
op3val:0x80edb6db; valaddr_reg:x3; val_offset:103992*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103992*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34665:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d0175 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d0175; op2val:0x80000000;
op3val:0x80fffff8; valaddr_reg:x3; val_offset:103995*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103995*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34666:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d0175 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d0175; op2val:0x80000000;
op3val:0x80fffffc; valaddr_reg:x3; val_offset:103998*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103998*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34667:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d0175 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d0175; op2val:0x80000000;
op3val:0x80fffffe; valaddr_reg:x3; val_offset:104001*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104001*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34668:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d0175 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0e and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d0175; op2val:0x80000000;
op3val:0x87000000; valaddr_reg:x3; val_offset:104004*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104004*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34669:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d0175 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0e and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d0175; op2val:0x80000000;
op3val:0x87000001; valaddr_reg:x3; val_offset:104007*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104007*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34670:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d0175 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0e and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d0175; op2val:0x80000000;
op3val:0x87000003; valaddr_reg:x3; val_offset:104010*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104010*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34671:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d0175 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0e and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d0175; op2val:0x80000000;
op3val:0x87000007; valaddr_reg:x3; val_offset:104013*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104013*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34672:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d0175 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0e and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d0175; op2val:0x80000000;
op3val:0x8700000f; valaddr_reg:x3; val_offset:104016*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104016*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34673:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d0175 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0e and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d0175; op2val:0x80000000;
op3val:0x8700001f; valaddr_reg:x3; val_offset:104019*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104019*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34674:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d0175 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0e and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d0175; op2val:0x80000000;
op3val:0x8700003f; valaddr_reg:x3; val_offset:104022*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104022*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34675:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d0175 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0e and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d0175; op2val:0x80000000;
op3val:0x8700007f; valaddr_reg:x3; val_offset:104025*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104025*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34676:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d0175 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0e and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d0175; op2val:0x80000000;
op3val:0x870000ff; valaddr_reg:x3; val_offset:104028*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104028*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34677:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d0175 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0e and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d0175; op2val:0x80000000;
op3val:0x870001ff; valaddr_reg:x3; val_offset:104031*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104031*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34678:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d0175 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0e and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d0175; op2val:0x80000000;
op3val:0x870003ff; valaddr_reg:x3; val_offset:104034*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104034*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34679:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d0175 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0e and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d0175; op2val:0x80000000;
op3val:0x870007ff; valaddr_reg:x3; val_offset:104037*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104037*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34680:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d0175 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0e and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d0175; op2val:0x80000000;
op3val:0x87000fff; valaddr_reg:x3; val_offset:104040*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104040*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34681:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d0175 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0e and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d0175; op2val:0x80000000;
op3val:0x87001fff; valaddr_reg:x3; val_offset:104043*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104043*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34682:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d0175 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0e and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d0175; op2val:0x80000000;
op3val:0x87003fff; valaddr_reg:x3; val_offset:104046*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104046*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34683:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d0175 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0e and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d0175; op2val:0x80000000;
op3val:0x87007fff; valaddr_reg:x3; val_offset:104049*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104049*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34684:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d0175 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0e and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d0175; op2val:0x80000000;
op3val:0x8700ffff; valaddr_reg:x3; val_offset:104052*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104052*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34685:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d0175 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0e and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d0175; op2val:0x80000000;
op3val:0x8701ffff; valaddr_reg:x3; val_offset:104055*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104055*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34686:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d0175 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0e and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d0175; op2val:0x80000000;
op3val:0x8703ffff; valaddr_reg:x3; val_offset:104058*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104058*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34687:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d0175 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0e and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d0175; op2val:0x80000000;
op3val:0x8707ffff; valaddr_reg:x3; val_offset:104061*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104061*0 + 3*270*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2133643678,32,FLEN)
NAN_BOXED(3106553,32,FLEN)
NAN_BOXED(1249968127,32,FLEN)
NAN_BOXED(2133643678,32,FLEN)
NAN_BOXED(3106553,32,FLEN)
NAN_BOXED(1250033663,32,FLEN)
NAN_BOXED(2133643678,32,FLEN)
NAN_BOXED(3106553,32,FLEN)
NAN_BOXED(1250164735,32,FLEN)
NAN_BOXED(2133643678,32,FLEN)
NAN_BOXED(3106553,32,FLEN)
NAN_BOXED(1250426879,32,FLEN)
NAN_BOXED(2133643678,32,FLEN)
NAN_BOXED(3106553,32,FLEN)
NAN_BOXED(1250951167,32,FLEN)
NAN_BOXED(2133643678,32,FLEN)
NAN_BOXED(3106553,32,FLEN)
NAN_BOXED(1251999743,32,FLEN)
NAN_BOXED(2133643678,32,FLEN)
NAN_BOXED(3106553,32,FLEN)
NAN_BOXED(1254096895,32,FLEN)
NAN_BOXED(2133643678,32,FLEN)
NAN_BOXED(3106553,32,FLEN)
NAN_BOXED(1254096896,32,FLEN)
NAN_BOXED(2133643678,32,FLEN)
NAN_BOXED(3106553,32,FLEN)
NAN_BOXED(1256194048,32,FLEN)
NAN_BOXED(2133643678,32,FLEN)
NAN_BOXED(3106553,32,FLEN)
NAN_BOXED(1257242624,32,FLEN)
NAN_BOXED(2133643678,32,FLEN)
NAN_BOXED(3106553,32,FLEN)
NAN_BOXED(1257766912,32,FLEN)
NAN_BOXED(2133643678,32,FLEN)
NAN_BOXED(3106553,32,FLEN)
NAN_BOXED(1258029056,32,FLEN)
NAN_BOXED(2133643678,32,FLEN)
NAN_BOXED(3106553,32,FLEN)
NAN_BOXED(1258160128,32,FLEN)
NAN_BOXED(2133643678,32,FLEN)
NAN_BOXED(3106553,32,FLEN)
NAN_BOXED(1258225664,32,FLEN)
NAN_BOXED(2133643678,32,FLEN)
NAN_BOXED(3106553,32,FLEN)
NAN_BOXED(1258258432,32,FLEN)
NAN_BOXED(2133643678,32,FLEN)
NAN_BOXED(3106553,32,FLEN)
NAN_BOXED(1258274816,32,FLEN)
NAN_BOXED(2133643678,32,FLEN)
NAN_BOXED(3106553,32,FLEN)
NAN_BOXED(1258283008,32,FLEN)
NAN_BOXED(2133643678,32,FLEN)
NAN_BOXED(3106553,32,FLEN)
NAN_BOXED(1258287104,32,FLEN)
NAN_BOXED(2133643678,32,FLEN)
NAN_BOXED(3106553,32,FLEN)
NAN_BOXED(1258289152,32,FLEN)
NAN_BOXED(2133643678,32,FLEN)
NAN_BOXED(3106553,32,FLEN)
NAN_BOXED(1258290176,32,FLEN)
NAN_BOXED(2133643678,32,FLEN)
NAN_BOXED(3106553,32,FLEN)
NAN_BOXED(1258290688,32,FLEN)
NAN_BOXED(2133643678,32,FLEN)
NAN_BOXED(3106553,32,FLEN)
NAN_BOXED(1258290944,32,FLEN)
NAN_BOXED(2133643678,32,FLEN)
NAN_BOXED(3106553,32,FLEN)
NAN_BOXED(1258291072,32,FLEN)
NAN_BOXED(2133643678,32,FLEN)
NAN_BOXED(3106553,32,FLEN)
NAN_BOXED(1258291136,32,FLEN)
NAN_BOXED(2133643678,32,FLEN)
NAN_BOXED(3106553,32,FLEN)
NAN_BOXED(1258291168,32,FLEN)
NAN_BOXED(2133643678,32,FLEN)
NAN_BOXED(3106553,32,FLEN)
NAN_BOXED(1258291184,32,FLEN)
NAN_BOXED(2133643678,32,FLEN)
NAN_BOXED(3106553,32,FLEN)
NAN_BOXED(1258291192,32,FLEN)
NAN_BOXED(2133643678,32,FLEN)
NAN_BOXED(3106553,32,FLEN)
NAN_BOXED(1258291196,32,FLEN)
NAN_BOXED(2133643678,32,FLEN)
NAN_BOXED(3106553,32,FLEN)
NAN_BOXED(1258291198,32,FLEN)
NAN_BOXED(2133643678,32,FLEN)
NAN_BOXED(3106553,32,FLEN)
NAN_BOXED(1258291199,32,FLEN)
NAN_BOXED(2133653818,32,FLEN)
NAN_BOXED(1069379705,32,FLEN)
NAN_BOXED(1744830464,32,FLEN)
NAN_BOXED(2133653818,32,FLEN)
NAN_BOXED(1069379705,32,FLEN)
NAN_BOXED(1744830465,32,FLEN)
NAN_BOXED(2133653818,32,FLEN)
NAN_BOXED(1069379705,32,FLEN)
NAN_BOXED(1744830467,32,FLEN)
NAN_BOXED(2133653818,32,FLEN)
NAN_BOXED(1069379705,32,FLEN)
NAN_BOXED(1744830471,32,FLEN)
NAN_BOXED(2133653818,32,FLEN)
NAN_BOXED(1069379705,32,FLEN)
NAN_BOXED(1744830479,32,FLEN)
NAN_BOXED(2133653818,32,FLEN)
NAN_BOXED(1069379705,32,FLEN)
NAN_BOXED(1744830495,32,FLEN)
NAN_BOXED(2133653818,32,FLEN)
NAN_BOXED(1069379705,32,FLEN)
NAN_BOXED(1744830527,32,FLEN)
NAN_BOXED(2133653818,32,FLEN)
NAN_BOXED(1069379705,32,FLEN)
NAN_BOXED(1744830591,32,FLEN)
NAN_BOXED(2133653818,32,FLEN)
NAN_BOXED(1069379705,32,FLEN)
NAN_BOXED(1744830719,32,FLEN)
NAN_BOXED(2133653818,32,FLEN)
NAN_BOXED(1069379705,32,FLEN)
NAN_BOXED(1744830975,32,FLEN)
NAN_BOXED(2133653818,32,FLEN)
NAN_BOXED(1069379705,32,FLEN)
NAN_BOXED(1744831487,32,FLEN)
NAN_BOXED(2133653818,32,FLEN)
NAN_BOXED(1069379705,32,FLEN)
NAN_BOXED(1744832511,32,FLEN)
NAN_BOXED(2133653818,32,FLEN)
NAN_BOXED(1069379705,32,FLEN)
NAN_BOXED(1744834559,32,FLEN)
NAN_BOXED(2133653818,32,FLEN)
NAN_BOXED(1069379705,32,FLEN)
NAN_BOXED(1744838655,32,FLEN)
NAN_BOXED(2133653818,32,FLEN)
NAN_BOXED(1069379705,32,FLEN)
NAN_BOXED(1744846847,32,FLEN)
NAN_BOXED(2133653818,32,FLEN)
NAN_BOXED(1069379705,32,FLEN)
NAN_BOXED(1744863231,32,FLEN)
NAN_BOXED(2133653818,32,FLEN)
NAN_BOXED(1069379705,32,FLEN)
NAN_BOXED(1744895999,32,FLEN)
NAN_BOXED(2133653818,32,FLEN)
NAN_BOXED(1069379705,32,FLEN)
NAN_BOXED(1744961535,32,FLEN)
NAN_BOXED(2133653818,32,FLEN)
NAN_BOXED(1069379705,32,FLEN)
NAN_BOXED(1745092607,32,FLEN)
NAN_BOXED(2133653818,32,FLEN)
NAN_BOXED(1069379705,32,FLEN)
NAN_BOXED(1745354751,32,FLEN)
NAN_BOXED(2133653818,32,FLEN)
NAN_BOXED(1069379705,32,FLEN)
NAN_BOXED(1745879039,32,FLEN)
NAN_BOXED(2133653818,32,FLEN)
NAN_BOXED(1069379705,32,FLEN)
NAN_BOXED(1746927615,32,FLEN)
NAN_BOXED(2133653818,32,FLEN)
NAN_BOXED(1069379705,32,FLEN)
NAN_BOXED(1749024767,32,FLEN)
NAN_BOXED(2133653818,32,FLEN)
NAN_BOXED(1069379705,32,FLEN)
NAN_BOXED(1749024768,32,FLEN)
NAN_BOXED(2133653818,32,FLEN)
NAN_BOXED(1069379705,32,FLEN)
NAN_BOXED(1751121920,32,FLEN)
NAN_BOXED(2133653818,32,FLEN)
NAN_BOXED(1069379705,32,FLEN)
NAN_BOXED(1752170496,32,FLEN)
NAN_BOXED(2133653818,32,FLEN)
NAN_BOXED(1069379705,32,FLEN)
NAN_BOXED(1752694784,32,FLEN)
NAN_BOXED(2133653818,32,FLEN)
NAN_BOXED(1069379705,32,FLEN)
NAN_BOXED(1752956928,32,FLEN)
NAN_BOXED(2133653818,32,FLEN)
NAN_BOXED(1069379705,32,FLEN)
NAN_BOXED(1753088000,32,FLEN)
NAN_BOXED(2133653818,32,FLEN)
NAN_BOXED(1069379705,32,FLEN)
NAN_BOXED(1753153536,32,FLEN)
NAN_BOXED(2133653818,32,FLEN)
NAN_BOXED(1069379705,32,FLEN)
NAN_BOXED(1753186304,32,FLEN)
NAN_BOXED(2133653818,32,FLEN)
NAN_BOXED(1069379705,32,FLEN)
NAN_BOXED(1753202688,32,FLEN)
NAN_BOXED(2133653818,32,FLEN)
NAN_BOXED(1069379705,32,FLEN)
NAN_BOXED(1753210880,32,FLEN)
NAN_BOXED(2133653818,32,FLEN)
NAN_BOXED(1069379705,32,FLEN)
NAN_BOXED(1753214976,32,FLEN)
NAN_BOXED(2133653818,32,FLEN)
NAN_BOXED(1069379705,32,FLEN)
NAN_BOXED(1753217024,32,FLEN)
NAN_BOXED(2133653818,32,FLEN)
NAN_BOXED(1069379705,32,FLEN)
NAN_BOXED(1753218048,32,FLEN)
NAN_BOXED(2133653818,32,FLEN)
NAN_BOXED(1069379705,32,FLEN)
NAN_BOXED(1753218560,32,FLEN)
NAN_BOXED(2133653818,32,FLEN)
NAN_BOXED(1069379705,32,FLEN)
NAN_BOXED(1753218816,32,FLEN)
NAN_BOXED(2133653818,32,FLEN)
NAN_BOXED(1069379705,32,FLEN)
NAN_BOXED(1753218944,32,FLEN)
NAN_BOXED(2133653818,32,FLEN)
NAN_BOXED(1069379705,32,FLEN)
NAN_BOXED(1753219008,32,FLEN)
NAN_BOXED(2133653818,32,FLEN)
NAN_BOXED(1069379705,32,FLEN)
NAN_BOXED(1753219040,32,FLEN)
NAN_BOXED(2133653818,32,FLEN)
NAN_BOXED(1069379705,32,FLEN)
NAN_BOXED(1753219056,32,FLEN)
NAN_BOXED(2133653818,32,FLEN)
NAN_BOXED(1069379705,32,FLEN)
NAN_BOXED(1753219064,32,FLEN)
NAN_BOXED(2133653818,32,FLEN)
NAN_BOXED(1069379705,32,FLEN)
NAN_BOXED(1753219068,32,FLEN)
NAN_BOXED(2133653818,32,FLEN)
NAN_BOXED(1069379705,32,FLEN)
NAN_BOXED(1753219070,32,FLEN)
NAN_BOXED(2133653818,32,FLEN)
NAN_BOXED(1069379705,32,FLEN)
NAN_BOXED(1753219071,32,FLEN)
NAN_BOXED(2133653818,32,FLEN)
NAN_BOXED(1069379705,32,FLEN)
NAN_BOXED(2130706433,32,FLEN)
NAN_BOXED(2133653818,32,FLEN)
NAN_BOXED(1069379705,32,FLEN)
NAN_BOXED(2130706435,32,FLEN)
NAN_BOXED(2133653818,32,FLEN)
NAN_BOXED(1069379705,32,FLEN)
NAN_BOXED(2130706439,32,FLEN)
NAN_BOXED(2133653818,32,FLEN)
NAN_BOXED(1069379705,32,FLEN)
NAN_BOXED(2132384153,32,FLEN)
NAN_BOXED(2133653818,32,FLEN)
NAN_BOXED(1069379705,32,FLEN)
NAN_BOXED(2133103177,32,FLEN)
NAN_BOXED(2133653818,32,FLEN)
NAN_BOXED(1069379705,32,FLEN)
NAN_BOXED(2134061875,32,FLEN)
NAN_BOXED(2133653818,32,FLEN)
NAN_BOXED(1069379705,32,FLEN)
NAN_BOXED(2134301549,32,FLEN)
NAN_BOXED(2133653818,32,FLEN)
NAN_BOXED(1069379705,32,FLEN)
NAN_BOXED(2134621115,32,FLEN)
NAN_BOXED(2133653818,32,FLEN)
NAN_BOXED(1069379705,32,FLEN)
NAN_BOXED(2135180356,32,FLEN)
NAN_BOXED(2133653818,32,FLEN)
NAN_BOXED(1069379705,32,FLEN)
NAN_BOXED(2135739596,32,FLEN)
NAN_BOXED(2133653818,32,FLEN)
NAN_BOXED(1069379705,32,FLEN)
NAN_BOXED(2136698294,32,FLEN)
NAN_BOXED(2133653818,32,FLEN)
NAN_BOXED(1069379705,32,FLEN)
NAN_BOXED(2137417318,32,FLEN)
NAN_BOXED(2133653818,32,FLEN)
NAN_BOXED(1069379705,32,FLEN)
NAN_BOXED(2137896667,32,FLEN)
NAN_BOXED(2133653818,32,FLEN)
NAN_BOXED(1069379705,32,FLEN)
NAN_BOXED(2139095032,32,FLEN)
NAN_BOXED(2133653818,32,FLEN)
NAN_BOXED(1069379705,32,FLEN)
NAN_BOXED(2139095036,32,FLEN)
NAN_BOXED(2133653818,32,FLEN)
NAN_BOXED(1069379705,32,FLEN)
NAN_BOXED(2139095038,32,FLEN)
NAN_BOXED(2133655925,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872257,32,FLEN)
NAN_BOXED(2133655925,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872259,32,FLEN)
NAN_BOXED(2133655925,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872263,32,FLEN)
NAN_BOXED(2133655925,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2157549977,32,FLEN)
NAN_BOXED(2133655925,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2158269001,32,FLEN)
NAN_BOXED(2133655925,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2159227699,32,FLEN)
NAN_BOXED(2133655925,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2159467373,32,FLEN)
NAN_BOXED(2133655925,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2159786939,32,FLEN)
NAN_BOXED(2133655925,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2160346180,32,FLEN)
NAN_BOXED(2133655925,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2160905420,32,FLEN)
NAN_BOXED(2133655925,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2161864118,32,FLEN)
NAN_BOXED(2133655925,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2162583142,32,FLEN)
NAN_BOXED(2133655925,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2163062491,32,FLEN)
NAN_BOXED(2133655925,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260856,32,FLEN)
NAN_BOXED(2133655925,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260860,32,FLEN)
NAN_BOXED(2133655925,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260862,32,FLEN)
NAN_BOXED(2133655925,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264924160,32,FLEN)
NAN_BOXED(2133655925,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264924161,32,FLEN)
NAN_BOXED(2133655925,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264924163,32,FLEN)
NAN_BOXED(2133655925,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264924167,32,FLEN)
NAN_BOXED(2133655925,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264924175,32,FLEN)
NAN_BOXED(2133655925,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264924191,32,FLEN)
NAN_BOXED(2133655925,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264924223,32,FLEN)
NAN_BOXED(2133655925,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264924287,32,FLEN)
NAN_BOXED(2133655925,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264924415,32,FLEN)
NAN_BOXED(2133655925,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264924671,32,FLEN)
NAN_BOXED(2133655925,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264925183,32,FLEN)
NAN_BOXED(2133655925,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264926207,32,FLEN)
NAN_BOXED(2133655925,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264928255,32,FLEN)
NAN_BOXED(2133655925,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264932351,32,FLEN)
NAN_BOXED(2133655925,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264940543,32,FLEN)
NAN_BOXED(2133655925,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264956927,32,FLEN)
NAN_BOXED(2133655925,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264989695,32,FLEN)
NAN_BOXED(2133655925,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2265055231,32,FLEN)
NAN_BOXED(2133655925,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2265186303,32,FLEN)
NAN_BOXED(2133655925,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2265448447,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
