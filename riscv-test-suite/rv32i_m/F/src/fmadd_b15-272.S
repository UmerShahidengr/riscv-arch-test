
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:17:59 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_34688:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d0175 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0e and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d0175; op2val:0x80000000;
op3val:0x870fffff; valaddr_reg:x3; val_offset:104064*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104064*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34689:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d0175 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0e and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d0175; op2val:0x80000000;
op3val:0x871fffff; valaddr_reg:x3; val_offset:104067*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104067*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34690:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d0175 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0e and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d0175; op2val:0x80000000;
op3val:0x873fffff; valaddr_reg:x3; val_offset:104070*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104070*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34691:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d0175 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0e and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d0175; op2val:0x80000000;
op3val:0x87400000; valaddr_reg:x3; val_offset:104073*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104073*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34692:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d0175 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0e and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d0175; op2val:0x80000000;
op3val:0x87600000; valaddr_reg:x3; val_offset:104076*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104076*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34693:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d0175 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0e and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d0175; op2val:0x80000000;
op3val:0x87700000; valaddr_reg:x3; val_offset:104079*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104079*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34694:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d0175 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0e and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d0175; op2val:0x80000000;
op3val:0x87780000; valaddr_reg:x3; val_offset:104082*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104082*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34695:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d0175 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0e and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d0175; op2val:0x80000000;
op3val:0x877c0000; valaddr_reg:x3; val_offset:104085*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104085*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34696:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d0175 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0e and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d0175; op2val:0x80000000;
op3val:0x877e0000; valaddr_reg:x3; val_offset:104088*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104088*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34697:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d0175 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0e and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d0175; op2val:0x80000000;
op3val:0x877f0000; valaddr_reg:x3; val_offset:104091*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104091*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34698:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d0175 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0e and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d0175; op2val:0x80000000;
op3val:0x877f8000; valaddr_reg:x3; val_offset:104094*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104094*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34699:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d0175 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0e and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d0175; op2val:0x80000000;
op3val:0x877fc000; valaddr_reg:x3; val_offset:104097*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104097*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34700:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d0175 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0e and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d0175; op2val:0x80000000;
op3val:0x877fe000; valaddr_reg:x3; val_offset:104100*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104100*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34701:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d0175 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0e and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d0175; op2val:0x80000000;
op3val:0x877ff000; valaddr_reg:x3; val_offset:104103*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104103*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34702:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d0175 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0e and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d0175; op2val:0x80000000;
op3val:0x877ff800; valaddr_reg:x3; val_offset:104106*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104106*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34703:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d0175 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0e and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d0175; op2val:0x80000000;
op3val:0x877ffc00; valaddr_reg:x3; val_offset:104109*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104109*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34704:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d0175 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0e and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d0175; op2val:0x80000000;
op3val:0x877ffe00; valaddr_reg:x3; val_offset:104112*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104112*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34705:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d0175 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0e and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d0175; op2val:0x80000000;
op3val:0x877fff00; valaddr_reg:x3; val_offset:104115*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104115*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34706:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d0175 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0e and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d0175; op2val:0x80000000;
op3val:0x877fff80; valaddr_reg:x3; val_offset:104118*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104118*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34707:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d0175 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0e and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d0175; op2val:0x80000000;
op3val:0x877fffc0; valaddr_reg:x3; val_offset:104121*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104121*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34708:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d0175 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0e and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d0175; op2val:0x80000000;
op3val:0x877fffe0; valaddr_reg:x3; val_offset:104124*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104124*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34709:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d0175 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0e and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d0175; op2val:0x80000000;
op3val:0x877ffff0; valaddr_reg:x3; val_offset:104127*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104127*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34710:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d0175 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0e and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d0175; op2val:0x80000000;
op3val:0x877ffff8; valaddr_reg:x3; val_offset:104130*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104130*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34711:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d0175 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0e and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d0175; op2val:0x80000000;
op3val:0x877ffffc; valaddr_reg:x3; val_offset:104133*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104133*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34712:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d0175 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0e and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d0175; op2val:0x80000000;
op3val:0x877ffffe; valaddr_reg:x3; val_offset:104136*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104136*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34713:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d0175 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0e and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d0175; op2val:0x80000000;
op3val:0x877fffff; valaddr_reg:x3; val_offset:104139*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104139*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34714:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d04c4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d04c4; op2val:0x80000000;
op3val:0x80000001; valaddr_reg:x3; val_offset:104142*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104142*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34715:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d04c4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d04c4; op2val:0x80000000;
op3val:0x80000003; valaddr_reg:x3; val_offset:104145*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104145*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34716:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d04c4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d04c4; op2val:0x80000000;
op3val:0x80000007; valaddr_reg:x3; val_offset:104148*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104148*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34717:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d04c4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d04c4; op2val:0x80000000;
op3val:0x80199999; valaddr_reg:x3; val_offset:104151*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104151*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34718:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d04c4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d04c4; op2val:0x80000000;
op3val:0x80249249; valaddr_reg:x3; val_offset:104154*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104154*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34719:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d04c4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d04c4; op2val:0x80000000;
op3val:0x80333333; valaddr_reg:x3; val_offset:104157*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104157*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34720:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d04c4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d04c4; op2val:0x80000000;
op3val:0x8036db6d; valaddr_reg:x3; val_offset:104160*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104160*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34721:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d04c4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d04c4; op2val:0x80000000;
op3val:0x803bbbbb; valaddr_reg:x3; val_offset:104163*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104163*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34722:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d04c4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d04c4; op2val:0x80000000;
op3val:0x80444444; valaddr_reg:x3; val_offset:104166*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104166*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34723:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d04c4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d04c4; op2val:0x80000000;
op3val:0x804ccccc; valaddr_reg:x3; val_offset:104169*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104169*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34724:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d04c4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d04c4; op2val:0x80000000;
op3val:0x805b6db6; valaddr_reg:x3; val_offset:104172*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104172*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34725:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d04c4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d04c4; op2val:0x80000000;
op3val:0x80666666; valaddr_reg:x3; val_offset:104175*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104175*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34726:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d04c4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d04c4; op2val:0x80000000;
op3val:0x806db6db; valaddr_reg:x3; val_offset:104178*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104178*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34727:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d04c4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d04c4; op2val:0x80000000;
op3val:0x807ffff8; valaddr_reg:x3; val_offset:104181*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104181*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34728:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d04c4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d04c4; op2val:0x80000000;
op3val:0x807ffffc; valaddr_reg:x3; val_offset:104184*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104184*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34729:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d04c4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d04c4; op2val:0x80000000;
op3val:0x807ffffe; valaddr_reg:x3; val_offset:104187*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104187*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34730:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d04c4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d04c4; op2val:0x80000000;
op3val:0x85000000; valaddr_reg:x3; val_offset:104190*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104190*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34731:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d04c4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d04c4; op2val:0x80000000;
op3val:0x85000001; valaddr_reg:x3; val_offset:104193*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104193*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34732:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d04c4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d04c4; op2val:0x80000000;
op3val:0x85000003; valaddr_reg:x3; val_offset:104196*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104196*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34733:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d04c4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d04c4; op2val:0x80000000;
op3val:0x85000007; valaddr_reg:x3; val_offset:104199*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104199*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34734:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d04c4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d04c4; op2val:0x80000000;
op3val:0x8500000f; valaddr_reg:x3; val_offset:104202*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104202*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34735:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d04c4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d04c4; op2val:0x80000000;
op3val:0x8500001f; valaddr_reg:x3; val_offset:104205*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104205*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34736:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d04c4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d04c4; op2val:0x80000000;
op3val:0x8500003f; valaddr_reg:x3; val_offset:104208*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104208*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34737:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d04c4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d04c4; op2val:0x80000000;
op3val:0x8500007f; valaddr_reg:x3; val_offset:104211*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104211*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34738:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d04c4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d04c4; op2val:0x80000000;
op3val:0x850000ff; valaddr_reg:x3; val_offset:104214*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104214*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34739:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d04c4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d04c4; op2val:0x80000000;
op3val:0x850001ff; valaddr_reg:x3; val_offset:104217*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104217*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34740:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d04c4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d04c4; op2val:0x80000000;
op3val:0x850003ff; valaddr_reg:x3; val_offset:104220*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104220*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34741:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d04c4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d04c4; op2val:0x80000000;
op3val:0x850007ff; valaddr_reg:x3; val_offset:104223*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104223*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34742:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d04c4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d04c4; op2val:0x80000000;
op3val:0x85000fff; valaddr_reg:x3; val_offset:104226*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104226*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34743:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d04c4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d04c4; op2val:0x80000000;
op3val:0x85001fff; valaddr_reg:x3; val_offset:104229*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104229*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34744:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d04c4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d04c4; op2val:0x80000000;
op3val:0x85003fff; valaddr_reg:x3; val_offset:104232*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104232*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34745:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d04c4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d04c4; op2val:0x80000000;
op3val:0x85007fff; valaddr_reg:x3; val_offset:104235*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104235*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34746:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d04c4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d04c4; op2val:0x80000000;
op3val:0x8500ffff; valaddr_reg:x3; val_offset:104238*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104238*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34747:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d04c4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d04c4; op2val:0x80000000;
op3val:0x8501ffff; valaddr_reg:x3; val_offset:104241*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104241*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34748:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d04c4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d04c4; op2val:0x80000000;
op3val:0x8503ffff; valaddr_reg:x3; val_offset:104244*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104244*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34749:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d04c4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d04c4; op2val:0x80000000;
op3val:0x8507ffff; valaddr_reg:x3; val_offset:104247*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104247*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34750:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d04c4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d04c4; op2val:0x80000000;
op3val:0x850fffff; valaddr_reg:x3; val_offset:104250*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104250*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34751:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d04c4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d04c4; op2val:0x80000000;
op3val:0x851fffff; valaddr_reg:x3; val_offset:104253*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104253*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34752:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d04c4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d04c4; op2val:0x80000000;
op3val:0x853fffff; valaddr_reg:x3; val_offset:104256*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104256*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34753:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d04c4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d04c4; op2val:0x80000000;
op3val:0x85400000; valaddr_reg:x3; val_offset:104259*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104259*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34754:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d04c4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d04c4; op2val:0x80000000;
op3val:0x85600000; valaddr_reg:x3; val_offset:104262*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104262*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34755:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d04c4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d04c4; op2val:0x80000000;
op3val:0x85700000; valaddr_reg:x3; val_offset:104265*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104265*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34756:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d04c4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d04c4; op2val:0x80000000;
op3val:0x85780000; valaddr_reg:x3; val_offset:104268*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104268*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34757:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d04c4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d04c4; op2val:0x80000000;
op3val:0x857c0000; valaddr_reg:x3; val_offset:104271*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104271*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34758:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d04c4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d04c4; op2val:0x80000000;
op3val:0x857e0000; valaddr_reg:x3; val_offset:104274*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104274*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34759:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d04c4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d04c4; op2val:0x80000000;
op3val:0x857f0000; valaddr_reg:x3; val_offset:104277*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104277*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34760:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d04c4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d04c4; op2val:0x80000000;
op3val:0x857f8000; valaddr_reg:x3; val_offset:104280*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104280*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34761:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d04c4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d04c4; op2val:0x80000000;
op3val:0x857fc000; valaddr_reg:x3; val_offset:104283*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104283*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34762:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d04c4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d04c4; op2val:0x80000000;
op3val:0x857fe000; valaddr_reg:x3; val_offset:104286*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104286*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34763:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d04c4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d04c4; op2val:0x80000000;
op3val:0x857ff000; valaddr_reg:x3; val_offset:104289*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104289*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34764:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d04c4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d04c4; op2val:0x80000000;
op3val:0x857ff800; valaddr_reg:x3; val_offset:104292*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104292*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34765:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d04c4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d04c4; op2val:0x80000000;
op3val:0x857ffc00; valaddr_reg:x3; val_offset:104295*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104295*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34766:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d04c4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d04c4; op2val:0x80000000;
op3val:0x857ffe00; valaddr_reg:x3; val_offset:104298*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104298*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34767:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d04c4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d04c4; op2val:0x80000000;
op3val:0x857fff00; valaddr_reg:x3; val_offset:104301*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104301*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34768:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d04c4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d04c4; op2val:0x80000000;
op3val:0x857fff80; valaddr_reg:x3; val_offset:104304*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104304*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34769:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d04c4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d04c4; op2val:0x80000000;
op3val:0x857fffc0; valaddr_reg:x3; val_offset:104307*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104307*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34770:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d04c4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d04c4; op2val:0x80000000;
op3val:0x857fffe0; valaddr_reg:x3; val_offset:104310*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104310*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34771:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d04c4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d04c4; op2val:0x80000000;
op3val:0x857ffff0; valaddr_reg:x3; val_offset:104313*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104313*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34772:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d04c4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d04c4; op2val:0x80000000;
op3val:0x857ffff8; valaddr_reg:x3; val_offset:104316*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104316*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34773:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d04c4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d04c4; op2val:0x80000000;
op3val:0x857ffffc; valaddr_reg:x3; val_offset:104319*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104319*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34774:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d04c4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d04c4; op2val:0x80000000;
op3val:0x857ffffe; valaddr_reg:x3; val_offset:104322*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104322*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34775:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d04c4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d04c4; op2val:0x80000000;
op3val:0x857fffff; valaddr_reg:x3; val_offset:104325*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104325*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34776:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d3e0e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f494d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d3e0e; op2val:0x2f494d;
op3val:0x3f800001; valaddr_reg:x3; val_offset:104328*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104328*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34777:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d3e0e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f494d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d3e0e; op2val:0x2f494d;
op3val:0x3f800003; valaddr_reg:x3; val_offset:104331*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104331*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34778:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d3e0e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f494d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d3e0e; op2val:0x2f494d;
op3val:0x3f800007; valaddr_reg:x3; val_offset:104334*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104334*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34779:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d3e0e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f494d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d3e0e; op2val:0x2f494d;
op3val:0x3f999999; valaddr_reg:x3; val_offset:104337*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104337*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34780:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d3e0e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f494d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d3e0e; op2val:0x2f494d;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:104340*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104340*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34781:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d3e0e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f494d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d3e0e; op2val:0x2f494d;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:104343*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104343*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34782:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d3e0e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f494d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d3e0e; op2val:0x2f494d;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:104346*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104346*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34783:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d3e0e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f494d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d3e0e; op2val:0x2f494d;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:104349*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104349*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34784:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d3e0e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f494d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d3e0e; op2val:0x2f494d;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:104352*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104352*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34785:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d3e0e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f494d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d3e0e; op2val:0x2f494d;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:104355*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104355*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34786:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d3e0e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f494d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d3e0e; op2val:0x2f494d;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:104358*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104358*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34787:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d3e0e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f494d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d3e0e; op2val:0x2f494d;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:104361*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104361*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34788:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d3e0e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f494d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d3e0e; op2val:0x2f494d;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:104364*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104364*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34789:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d3e0e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f494d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d3e0e; op2val:0x2f494d;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:104367*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104367*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34790:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d3e0e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f494d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d3e0e; op2val:0x2f494d;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:104370*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104370*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34791:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d3e0e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f494d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d3e0e; op2val:0x2f494d;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:104373*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104373*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34792:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d3e0e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f494d and fs3 == 0 and fe3 == 0x87 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d3e0e; op2val:0x2f494d;
op3val:0x43800000; valaddr_reg:x3; val_offset:104376*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104376*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34793:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d3e0e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f494d and fs3 == 0 and fe3 == 0x87 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d3e0e; op2val:0x2f494d;
op3val:0x43800001; valaddr_reg:x3; val_offset:104379*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104379*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34794:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d3e0e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f494d and fs3 == 0 and fe3 == 0x87 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d3e0e; op2val:0x2f494d;
op3val:0x43800003; valaddr_reg:x3; val_offset:104382*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104382*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34795:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d3e0e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f494d and fs3 == 0 and fe3 == 0x87 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d3e0e; op2val:0x2f494d;
op3val:0x43800007; valaddr_reg:x3; val_offset:104385*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104385*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34796:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d3e0e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f494d and fs3 == 0 and fe3 == 0x87 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d3e0e; op2val:0x2f494d;
op3val:0x4380000f; valaddr_reg:x3; val_offset:104388*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104388*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34797:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d3e0e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f494d and fs3 == 0 and fe3 == 0x87 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d3e0e; op2val:0x2f494d;
op3val:0x4380001f; valaddr_reg:x3; val_offset:104391*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104391*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34798:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d3e0e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f494d and fs3 == 0 and fe3 == 0x87 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d3e0e; op2val:0x2f494d;
op3val:0x4380003f; valaddr_reg:x3; val_offset:104394*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104394*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34799:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d3e0e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f494d and fs3 == 0 and fe3 == 0x87 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d3e0e; op2val:0x2f494d;
op3val:0x4380007f; valaddr_reg:x3; val_offset:104397*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104397*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34800:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d3e0e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f494d and fs3 == 0 and fe3 == 0x87 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d3e0e; op2val:0x2f494d;
op3val:0x438000ff; valaddr_reg:x3; val_offset:104400*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104400*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34801:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d3e0e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f494d and fs3 == 0 and fe3 == 0x87 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d3e0e; op2val:0x2f494d;
op3val:0x438001ff; valaddr_reg:x3; val_offset:104403*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104403*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34802:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d3e0e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f494d and fs3 == 0 and fe3 == 0x87 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d3e0e; op2val:0x2f494d;
op3val:0x438003ff; valaddr_reg:x3; val_offset:104406*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104406*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34803:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d3e0e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f494d and fs3 == 0 and fe3 == 0x87 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d3e0e; op2val:0x2f494d;
op3val:0x438007ff; valaddr_reg:x3; val_offset:104409*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104409*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34804:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d3e0e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f494d and fs3 == 0 and fe3 == 0x87 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d3e0e; op2val:0x2f494d;
op3val:0x43800fff; valaddr_reg:x3; val_offset:104412*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104412*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34805:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d3e0e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f494d and fs3 == 0 and fe3 == 0x87 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d3e0e; op2val:0x2f494d;
op3val:0x43801fff; valaddr_reg:x3; val_offset:104415*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104415*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34806:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d3e0e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f494d and fs3 == 0 and fe3 == 0x87 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d3e0e; op2val:0x2f494d;
op3val:0x43803fff; valaddr_reg:x3; val_offset:104418*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104418*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34807:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d3e0e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f494d and fs3 == 0 and fe3 == 0x87 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d3e0e; op2val:0x2f494d;
op3val:0x43807fff; valaddr_reg:x3; val_offset:104421*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104421*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34808:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d3e0e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f494d and fs3 == 0 and fe3 == 0x87 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d3e0e; op2val:0x2f494d;
op3val:0x4380ffff; valaddr_reg:x3; val_offset:104424*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104424*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34809:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d3e0e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f494d and fs3 == 0 and fe3 == 0x87 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d3e0e; op2val:0x2f494d;
op3val:0x4381ffff; valaddr_reg:x3; val_offset:104427*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104427*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34810:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d3e0e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f494d and fs3 == 0 and fe3 == 0x87 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d3e0e; op2val:0x2f494d;
op3val:0x4383ffff; valaddr_reg:x3; val_offset:104430*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104430*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34811:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d3e0e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f494d and fs3 == 0 and fe3 == 0x87 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d3e0e; op2val:0x2f494d;
op3val:0x4387ffff; valaddr_reg:x3; val_offset:104433*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104433*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34812:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d3e0e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f494d and fs3 == 0 and fe3 == 0x87 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d3e0e; op2val:0x2f494d;
op3val:0x438fffff; valaddr_reg:x3; val_offset:104436*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104436*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34813:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d3e0e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f494d and fs3 == 0 and fe3 == 0x87 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d3e0e; op2val:0x2f494d;
op3val:0x439fffff; valaddr_reg:x3; val_offset:104439*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104439*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34814:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d3e0e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f494d and fs3 == 0 and fe3 == 0x87 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d3e0e; op2val:0x2f494d;
op3val:0x43bfffff; valaddr_reg:x3; val_offset:104442*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104442*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34815:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d3e0e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f494d and fs3 == 0 and fe3 == 0x87 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d3e0e; op2val:0x2f494d;
op3val:0x43c00000; valaddr_reg:x3; val_offset:104445*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104445*0 + 3*271*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2133655925,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2265972735,32,FLEN)
NAN_BOXED(2133655925,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2267021311,32,FLEN)
NAN_BOXED(2133655925,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2269118463,32,FLEN)
NAN_BOXED(2133655925,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2269118464,32,FLEN)
NAN_BOXED(2133655925,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2271215616,32,FLEN)
NAN_BOXED(2133655925,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2272264192,32,FLEN)
NAN_BOXED(2133655925,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2272788480,32,FLEN)
NAN_BOXED(2133655925,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2273050624,32,FLEN)
NAN_BOXED(2133655925,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2273181696,32,FLEN)
NAN_BOXED(2133655925,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2273247232,32,FLEN)
NAN_BOXED(2133655925,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2273280000,32,FLEN)
NAN_BOXED(2133655925,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2273296384,32,FLEN)
NAN_BOXED(2133655925,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2273304576,32,FLEN)
NAN_BOXED(2133655925,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2273308672,32,FLEN)
NAN_BOXED(2133655925,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2273310720,32,FLEN)
NAN_BOXED(2133655925,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2273311744,32,FLEN)
NAN_BOXED(2133655925,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2273312256,32,FLEN)
NAN_BOXED(2133655925,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2273312512,32,FLEN)
NAN_BOXED(2133655925,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2273312640,32,FLEN)
NAN_BOXED(2133655925,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2273312704,32,FLEN)
NAN_BOXED(2133655925,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2273312736,32,FLEN)
NAN_BOXED(2133655925,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2273312752,32,FLEN)
NAN_BOXED(2133655925,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2273312760,32,FLEN)
NAN_BOXED(2133655925,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2273312764,32,FLEN)
NAN_BOXED(2133655925,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2273312766,32,FLEN)
NAN_BOXED(2133655925,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2273312767,32,FLEN)
NAN_BOXED(2133656772,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2133656772,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483651,32,FLEN)
NAN_BOXED(2133656772,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483655,32,FLEN)
NAN_BOXED(2133656772,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149161369,32,FLEN)
NAN_BOXED(2133656772,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149880393,32,FLEN)
NAN_BOXED(2133656772,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2150839091,32,FLEN)
NAN_BOXED(2133656772,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151078765,32,FLEN)
NAN_BOXED(2133656772,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151398331,32,FLEN)
NAN_BOXED(2133656772,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151957572,32,FLEN)
NAN_BOXED(2133656772,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2152516812,32,FLEN)
NAN_BOXED(2133656772,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2153475510,32,FLEN)
NAN_BOXED(2133656772,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154194534,32,FLEN)
NAN_BOXED(2133656772,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154673883,32,FLEN)
NAN_BOXED(2133656772,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872248,32,FLEN)
NAN_BOXED(2133656772,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872252,32,FLEN)
NAN_BOXED(2133656772,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2133656772,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231369728,32,FLEN)
NAN_BOXED(2133656772,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231369729,32,FLEN)
NAN_BOXED(2133656772,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231369731,32,FLEN)
NAN_BOXED(2133656772,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231369735,32,FLEN)
NAN_BOXED(2133656772,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231369743,32,FLEN)
NAN_BOXED(2133656772,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231369759,32,FLEN)
NAN_BOXED(2133656772,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231369791,32,FLEN)
NAN_BOXED(2133656772,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231369855,32,FLEN)
NAN_BOXED(2133656772,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231369983,32,FLEN)
NAN_BOXED(2133656772,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231370239,32,FLEN)
NAN_BOXED(2133656772,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231370751,32,FLEN)
NAN_BOXED(2133656772,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231371775,32,FLEN)
NAN_BOXED(2133656772,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231373823,32,FLEN)
NAN_BOXED(2133656772,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231377919,32,FLEN)
NAN_BOXED(2133656772,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231386111,32,FLEN)
NAN_BOXED(2133656772,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231402495,32,FLEN)
NAN_BOXED(2133656772,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231435263,32,FLEN)
NAN_BOXED(2133656772,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231500799,32,FLEN)
NAN_BOXED(2133656772,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231631871,32,FLEN)
NAN_BOXED(2133656772,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231894015,32,FLEN)
NAN_BOXED(2133656772,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2232418303,32,FLEN)
NAN_BOXED(2133656772,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2233466879,32,FLEN)
NAN_BOXED(2133656772,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2235564031,32,FLEN)
NAN_BOXED(2133656772,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2235564032,32,FLEN)
NAN_BOXED(2133656772,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2237661184,32,FLEN)
NAN_BOXED(2133656772,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2238709760,32,FLEN)
NAN_BOXED(2133656772,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239234048,32,FLEN)
NAN_BOXED(2133656772,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239496192,32,FLEN)
NAN_BOXED(2133656772,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239627264,32,FLEN)
NAN_BOXED(2133656772,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239692800,32,FLEN)
NAN_BOXED(2133656772,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239725568,32,FLEN)
NAN_BOXED(2133656772,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239741952,32,FLEN)
NAN_BOXED(2133656772,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239750144,32,FLEN)
NAN_BOXED(2133656772,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239754240,32,FLEN)
NAN_BOXED(2133656772,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239756288,32,FLEN)
NAN_BOXED(2133656772,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239757312,32,FLEN)
NAN_BOXED(2133656772,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239757824,32,FLEN)
NAN_BOXED(2133656772,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239758080,32,FLEN)
NAN_BOXED(2133656772,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239758208,32,FLEN)
NAN_BOXED(2133656772,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239758272,32,FLEN)
NAN_BOXED(2133656772,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239758304,32,FLEN)
NAN_BOXED(2133656772,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239758320,32,FLEN)
NAN_BOXED(2133656772,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239758328,32,FLEN)
NAN_BOXED(2133656772,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239758332,32,FLEN)
NAN_BOXED(2133656772,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239758334,32,FLEN)
NAN_BOXED(2133656772,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239758335,32,FLEN)
NAN_BOXED(2133671438,32,FLEN)
NAN_BOXED(3098957,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2133671438,32,FLEN)
NAN_BOXED(3098957,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2133671438,32,FLEN)
NAN_BOXED(3098957,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2133671438,32,FLEN)
NAN_BOXED(3098957,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2133671438,32,FLEN)
NAN_BOXED(3098957,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2133671438,32,FLEN)
NAN_BOXED(3098957,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2133671438,32,FLEN)
NAN_BOXED(3098957,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2133671438,32,FLEN)
NAN_BOXED(3098957,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2133671438,32,FLEN)
NAN_BOXED(3098957,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2133671438,32,FLEN)
NAN_BOXED(3098957,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2133671438,32,FLEN)
NAN_BOXED(3098957,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2133671438,32,FLEN)
NAN_BOXED(3098957,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2133671438,32,FLEN)
NAN_BOXED(3098957,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2133671438,32,FLEN)
NAN_BOXED(3098957,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2133671438,32,FLEN)
NAN_BOXED(3098957,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2133671438,32,FLEN)
NAN_BOXED(3098957,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2133671438,32,FLEN)
NAN_BOXED(3098957,32,FLEN)
NAN_BOXED(1132462080,32,FLEN)
NAN_BOXED(2133671438,32,FLEN)
NAN_BOXED(3098957,32,FLEN)
NAN_BOXED(1132462081,32,FLEN)
NAN_BOXED(2133671438,32,FLEN)
NAN_BOXED(3098957,32,FLEN)
NAN_BOXED(1132462083,32,FLEN)
NAN_BOXED(2133671438,32,FLEN)
NAN_BOXED(3098957,32,FLEN)
NAN_BOXED(1132462087,32,FLEN)
NAN_BOXED(2133671438,32,FLEN)
NAN_BOXED(3098957,32,FLEN)
NAN_BOXED(1132462095,32,FLEN)
NAN_BOXED(2133671438,32,FLEN)
NAN_BOXED(3098957,32,FLEN)
NAN_BOXED(1132462111,32,FLEN)
NAN_BOXED(2133671438,32,FLEN)
NAN_BOXED(3098957,32,FLEN)
NAN_BOXED(1132462143,32,FLEN)
NAN_BOXED(2133671438,32,FLEN)
NAN_BOXED(3098957,32,FLEN)
NAN_BOXED(1132462207,32,FLEN)
NAN_BOXED(2133671438,32,FLEN)
NAN_BOXED(3098957,32,FLEN)
NAN_BOXED(1132462335,32,FLEN)
NAN_BOXED(2133671438,32,FLEN)
NAN_BOXED(3098957,32,FLEN)
NAN_BOXED(1132462591,32,FLEN)
NAN_BOXED(2133671438,32,FLEN)
NAN_BOXED(3098957,32,FLEN)
NAN_BOXED(1132463103,32,FLEN)
NAN_BOXED(2133671438,32,FLEN)
NAN_BOXED(3098957,32,FLEN)
NAN_BOXED(1132464127,32,FLEN)
NAN_BOXED(2133671438,32,FLEN)
NAN_BOXED(3098957,32,FLEN)
NAN_BOXED(1132466175,32,FLEN)
NAN_BOXED(2133671438,32,FLEN)
NAN_BOXED(3098957,32,FLEN)
NAN_BOXED(1132470271,32,FLEN)
NAN_BOXED(2133671438,32,FLEN)
NAN_BOXED(3098957,32,FLEN)
NAN_BOXED(1132478463,32,FLEN)
NAN_BOXED(2133671438,32,FLEN)
NAN_BOXED(3098957,32,FLEN)
NAN_BOXED(1132494847,32,FLEN)
NAN_BOXED(2133671438,32,FLEN)
NAN_BOXED(3098957,32,FLEN)
NAN_BOXED(1132527615,32,FLEN)
NAN_BOXED(2133671438,32,FLEN)
NAN_BOXED(3098957,32,FLEN)
NAN_BOXED(1132593151,32,FLEN)
NAN_BOXED(2133671438,32,FLEN)
NAN_BOXED(3098957,32,FLEN)
NAN_BOXED(1132724223,32,FLEN)
NAN_BOXED(2133671438,32,FLEN)
NAN_BOXED(3098957,32,FLEN)
NAN_BOXED(1132986367,32,FLEN)
NAN_BOXED(2133671438,32,FLEN)
NAN_BOXED(3098957,32,FLEN)
NAN_BOXED(1133510655,32,FLEN)
NAN_BOXED(2133671438,32,FLEN)
NAN_BOXED(3098957,32,FLEN)
NAN_BOXED(1134559231,32,FLEN)
NAN_BOXED(2133671438,32,FLEN)
NAN_BOXED(3098957,32,FLEN)
NAN_BOXED(1136656383,32,FLEN)
NAN_BOXED(2133671438,32,FLEN)
NAN_BOXED(3098957,32,FLEN)
NAN_BOXED(1136656384,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
