
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:17:59 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_34816:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d3e0e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f494d and fs3 == 0 and fe3 == 0x87 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d3e0e; op2val:0x2f494d;
op3val:0x43e00000; valaddr_reg:x3; val_offset:104448*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104448*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34817:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d3e0e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f494d and fs3 == 0 and fe3 == 0x87 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d3e0e; op2val:0x2f494d;
op3val:0x43f00000; valaddr_reg:x3; val_offset:104451*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104451*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34818:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d3e0e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f494d and fs3 == 0 and fe3 == 0x87 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d3e0e; op2val:0x2f494d;
op3val:0x43f80000; valaddr_reg:x3; val_offset:104454*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104454*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34819:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d3e0e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f494d and fs3 == 0 and fe3 == 0x87 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d3e0e; op2val:0x2f494d;
op3val:0x43fc0000; valaddr_reg:x3; val_offset:104457*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104457*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34820:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d3e0e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f494d and fs3 == 0 and fe3 == 0x87 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d3e0e; op2val:0x2f494d;
op3val:0x43fe0000; valaddr_reg:x3; val_offset:104460*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104460*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34821:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d3e0e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f494d and fs3 == 0 and fe3 == 0x87 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d3e0e; op2val:0x2f494d;
op3val:0x43ff0000; valaddr_reg:x3; val_offset:104463*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104463*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34822:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d3e0e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f494d and fs3 == 0 and fe3 == 0x87 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d3e0e; op2val:0x2f494d;
op3val:0x43ff8000; valaddr_reg:x3; val_offset:104466*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104466*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34823:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d3e0e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f494d and fs3 == 0 and fe3 == 0x87 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d3e0e; op2val:0x2f494d;
op3val:0x43ffc000; valaddr_reg:x3; val_offset:104469*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104469*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34824:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d3e0e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f494d and fs3 == 0 and fe3 == 0x87 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d3e0e; op2val:0x2f494d;
op3val:0x43ffe000; valaddr_reg:x3; val_offset:104472*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104472*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34825:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d3e0e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f494d and fs3 == 0 and fe3 == 0x87 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d3e0e; op2val:0x2f494d;
op3val:0x43fff000; valaddr_reg:x3; val_offset:104475*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104475*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34826:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d3e0e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f494d and fs3 == 0 and fe3 == 0x87 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d3e0e; op2val:0x2f494d;
op3val:0x43fff800; valaddr_reg:x3; val_offset:104478*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104478*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34827:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d3e0e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f494d and fs3 == 0 and fe3 == 0x87 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d3e0e; op2val:0x2f494d;
op3val:0x43fffc00; valaddr_reg:x3; val_offset:104481*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104481*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34828:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d3e0e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f494d and fs3 == 0 and fe3 == 0x87 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d3e0e; op2val:0x2f494d;
op3val:0x43fffe00; valaddr_reg:x3; val_offset:104484*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104484*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34829:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d3e0e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f494d and fs3 == 0 and fe3 == 0x87 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d3e0e; op2val:0x2f494d;
op3val:0x43ffff00; valaddr_reg:x3; val_offset:104487*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104487*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34830:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d3e0e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f494d and fs3 == 0 and fe3 == 0x87 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d3e0e; op2val:0x2f494d;
op3val:0x43ffff80; valaddr_reg:x3; val_offset:104490*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104490*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34831:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d3e0e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f494d and fs3 == 0 and fe3 == 0x87 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d3e0e; op2val:0x2f494d;
op3val:0x43ffffc0; valaddr_reg:x3; val_offset:104493*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104493*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34832:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d3e0e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f494d and fs3 == 0 and fe3 == 0x87 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d3e0e; op2val:0x2f494d;
op3val:0x43ffffe0; valaddr_reg:x3; val_offset:104496*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104496*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34833:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d3e0e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f494d and fs3 == 0 and fe3 == 0x87 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d3e0e; op2val:0x2f494d;
op3val:0x43fffff0; valaddr_reg:x3; val_offset:104499*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104499*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34834:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d3e0e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f494d and fs3 == 0 and fe3 == 0x87 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d3e0e; op2val:0x2f494d;
op3val:0x43fffff8; valaddr_reg:x3; val_offset:104502*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104502*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34835:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d3e0e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f494d and fs3 == 0 and fe3 == 0x87 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d3e0e; op2val:0x2f494d;
op3val:0x43fffffc; valaddr_reg:x3; val_offset:104505*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104505*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34836:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d3e0e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f494d and fs3 == 0 and fe3 == 0x87 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d3e0e; op2val:0x2f494d;
op3val:0x43fffffe; valaddr_reg:x3; val_offset:104508*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104508*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34837:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d3e0e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f494d and fs3 == 0 and fe3 == 0x87 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d3e0e; op2val:0x2f494d;
op3val:0x43ffffff; valaddr_reg:x3; val_offset:104511*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104511*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34838:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2da4ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f2d45 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2da4ff; op2val:0x2f2d45;
op3val:0x3f800001; valaddr_reg:x3; val_offset:104514*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104514*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34839:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2da4ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f2d45 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2da4ff; op2val:0x2f2d45;
op3val:0x3f800003; valaddr_reg:x3; val_offset:104517*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104517*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34840:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2da4ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f2d45 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2da4ff; op2val:0x2f2d45;
op3val:0x3f800007; valaddr_reg:x3; val_offset:104520*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104520*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34841:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2da4ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f2d45 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2da4ff; op2val:0x2f2d45;
op3val:0x3f999999; valaddr_reg:x3; val_offset:104523*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104523*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34842:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2da4ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f2d45 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2da4ff; op2val:0x2f2d45;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:104526*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104526*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34843:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2da4ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f2d45 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2da4ff; op2val:0x2f2d45;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:104529*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104529*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34844:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2da4ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f2d45 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2da4ff; op2val:0x2f2d45;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:104532*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104532*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34845:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2da4ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f2d45 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2da4ff; op2val:0x2f2d45;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:104535*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104535*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34846:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2da4ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f2d45 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2da4ff; op2val:0x2f2d45;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:104538*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104538*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34847:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2da4ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f2d45 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2da4ff; op2val:0x2f2d45;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:104541*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104541*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34848:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2da4ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f2d45 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2da4ff; op2val:0x2f2d45;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:104544*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104544*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34849:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2da4ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f2d45 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2da4ff; op2val:0x2f2d45;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:104547*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104547*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34850:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2da4ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f2d45 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2da4ff; op2val:0x2f2d45;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:104550*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104550*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34851:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2da4ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f2d45 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2da4ff; op2val:0x2f2d45;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:104553*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104553*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34852:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2da4ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f2d45 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2da4ff; op2val:0x2f2d45;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:104556*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104556*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34853:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2da4ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f2d45 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2da4ff; op2val:0x2f2d45;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:104559*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104559*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34854:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2da4ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f2d45 and fs3 == 0 and fe3 == 0x85 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2da4ff; op2val:0x2f2d45;
op3val:0x42800000; valaddr_reg:x3; val_offset:104562*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104562*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34855:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2da4ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f2d45 and fs3 == 0 and fe3 == 0x85 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2da4ff; op2val:0x2f2d45;
op3val:0x42800001; valaddr_reg:x3; val_offset:104565*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104565*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34856:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2da4ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f2d45 and fs3 == 0 and fe3 == 0x85 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2da4ff; op2val:0x2f2d45;
op3val:0x42800003; valaddr_reg:x3; val_offset:104568*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104568*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34857:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2da4ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f2d45 and fs3 == 0 and fe3 == 0x85 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2da4ff; op2val:0x2f2d45;
op3val:0x42800007; valaddr_reg:x3; val_offset:104571*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104571*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34858:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2da4ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f2d45 and fs3 == 0 and fe3 == 0x85 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2da4ff; op2val:0x2f2d45;
op3val:0x4280000f; valaddr_reg:x3; val_offset:104574*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104574*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34859:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2da4ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f2d45 and fs3 == 0 and fe3 == 0x85 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2da4ff; op2val:0x2f2d45;
op3val:0x4280001f; valaddr_reg:x3; val_offset:104577*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104577*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34860:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2da4ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f2d45 and fs3 == 0 and fe3 == 0x85 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2da4ff; op2val:0x2f2d45;
op3val:0x4280003f; valaddr_reg:x3; val_offset:104580*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104580*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34861:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2da4ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f2d45 and fs3 == 0 and fe3 == 0x85 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2da4ff; op2val:0x2f2d45;
op3val:0x4280007f; valaddr_reg:x3; val_offset:104583*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104583*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34862:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2da4ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f2d45 and fs3 == 0 and fe3 == 0x85 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2da4ff; op2val:0x2f2d45;
op3val:0x428000ff; valaddr_reg:x3; val_offset:104586*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104586*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34863:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2da4ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f2d45 and fs3 == 0 and fe3 == 0x85 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2da4ff; op2val:0x2f2d45;
op3val:0x428001ff; valaddr_reg:x3; val_offset:104589*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104589*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34864:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2da4ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f2d45 and fs3 == 0 and fe3 == 0x85 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2da4ff; op2val:0x2f2d45;
op3val:0x428003ff; valaddr_reg:x3; val_offset:104592*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104592*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34865:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2da4ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f2d45 and fs3 == 0 and fe3 == 0x85 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2da4ff; op2val:0x2f2d45;
op3val:0x428007ff; valaddr_reg:x3; val_offset:104595*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104595*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34866:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2da4ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f2d45 and fs3 == 0 and fe3 == 0x85 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2da4ff; op2val:0x2f2d45;
op3val:0x42800fff; valaddr_reg:x3; val_offset:104598*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104598*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34867:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2da4ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f2d45 and fs3 == 0 and fe3 == 0x85 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2da4ff; op2val:0x2f2d45;
op3val:0x42801fff; valaddr_reg:x3; val_offset:104601*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104601*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34868:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2da4ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f2d45 and fs3 == 0 and fe3 == 0x85 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2da4ff; op2val:0x2f2d45;
op3val:0x42803fff; valaddr_reg:x3; val_offset:104604*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104604*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34869:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2da4ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f2d45 and fs3 == 0 and fe3 == 0x85 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2da4ff; op2val:0x2f2d45;
op3val:0x42807fff; valaddr_reg:x3; val_offset:104607*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104607*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34870:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2da4ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f2d45 and fs3 == 0 and fe3 == 0x85 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2da4ff; op2val:0x2f2d45;
op3val:0x4280ffff; valaddr_reg:x3; val_offset:104610*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104610*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34871:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2da4ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f2d45 and fs3 == 0 and fe3 == 0x85 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2da4ff; op2val:0x2f2d45;
op3val:0x4281ffff; valaddr_reg:x3; val_offset:104613*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104613*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34872:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2da4ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f2d45 and fs3 == 0 and fe3 == 0x85 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2da4ff; op2val:0x2f2d45;
op3val:0x4283ffff; valaddr_reg:x3; val_offset:104616*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104616*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34873:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2da4ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f2d45 and fs3 == 0 and fe3 == 0x85 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2da4ff; op2val:0x2f2d45;
op3val:0x4287ffff; valaddr_reg:x3; val_offset:104619*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104619*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34874:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2da4ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f2d45 and fs3 == 0 and fe3 == 0x85 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2da4ff; op2val:0x2f2d45;
op3val:0x428fffff; valaddr_reg:x3; val_offset:104622*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104622*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34875:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2da4ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f2d45 and fs3 == 0 and fe3 == 0x85 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2da4ff; op2val:0x2f2d45;
op3val:0x429fffff; valaddr_reg:x3; val_offset:104625*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104625*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34876:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2da4ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f2d45 and fs3 == 0 and fe3 == 0x85 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2da4ff; op2val:0x2f2d45;
op3val:0x42bfffff; valaddr_reg:x3; val_offset:104628*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104628*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34877:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2da4ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f2d45 and fs3 == 0 and fe3 == 0x85 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2da4ff; op2val:0x2f2d45;
op3val:0x42c00000; valaddr_reg:x3; val_offset:104631*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104631*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34878:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2da4ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f2d45 and fs3 == 0 and fe3 == 0x85 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2da4ff; op2val:0x2f2d45;
op3val:0x42e00000; valaddr_reg:x3; val_offset:104634*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104634*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34879:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2da4ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f2d45 and fs3 == 0 and fe3 == 0x85 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2da4ff; op2val:0x2f2d45;
op3val:0x42f00000; valaddr_reg:x3; val_offset:104637*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104637*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34880:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2da4ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f2d45 and fs3 == 0 and fe3 == 0x85 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2da4ff; op2val:0x2f2d45;
op3val:0x42f80000; valaddr_reg:x3; val_offset:104640*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104640*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34881:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2da4ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f2d45 and fs3 == 0 and fe3 == 0x85 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2da4ff; op2val:0x2f2d45;
op3val:0x42fc0000; valaddr_reg:x3; val_offset:104643*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104643*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34882:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2da4ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f2d45 and fs3 == 0 and fe3 == 0x85 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2da4ff; op2val:0x2f2d45;
op3val:0x42fe0000; valaddr_reg:x3; val_offset:104646*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104646*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34883:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2da4ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f2d45 and fs3 == 0 and fe3 == 0x85 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2da4ff; op2val:0x2f2d45;
op3val:0x42ff0000; valaddr_reg:x3; val_offset:104649*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104649*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34884:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2da4ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f2d45 and fs3 == 0 and fe3 == 0x85 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2da4ff; op2val:0x2f2d45;
op3val:0x42ff8000; valaddr_reg:x3; val_offset:104652*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104652*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34885:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2da4ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f2d45 and fs3 == 0 and fe3 == 0x85 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2da4ff; op2val:0x2f2d45;
op3val:0x42ffc000; valaddr_reg:x3; val_offset:104655*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104655*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34886:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2da4ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f2d45 and fs3 == 0 and fe3 == 0x85 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2da4ff; op2val:0x2f2d45;
op3val:0x42ffe000; valaddr_reg:x3; val_offset:104658*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104658*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34887:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2da4ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f2d45 and fs3 == 0 and fe3 == 0x85 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2da4ff; op2val:0x2f2d45;
op3val:0x42fff000; valaddr_reg:x3; val_offset:104661*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104661*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34888:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2da4ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f2d45 and fs3 == 0 and fe3 == 0x85 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2da4ff; op2val:0x2f2d45;
op3val:0x42fff800; valaddr_reg:x3; val_offset:104664*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104664*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34889:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2da4ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f2d45 and fs3 == 0 and fe3 == 0x85 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2da4ff; op2val:0x2f2d45;
op3val:0x42fffc00; valaddr_reg:x3; val_offset:104667*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104667*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34890:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2da4ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f2d45 and fs3 == 0 and fe3 == 0x85 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2da4ff; op2val:0x2f2d45;
op3val:0x42fffe00; valaddr_reg:x3; val_offset:104670*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104670*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34891:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2da4ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f2d45 and fs3 == 0 and fe3 == 0x85 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2da4ff; op2val:0x2f2d45;
op3val:0x42ffff00; valaddr_reg:x3; val_offset:104673*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104673*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34892:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2da4ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f2d45 and fs3 == 0 and fe3 == 0x85 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2da4ff; op2val:0x2f2d45;
op3val:0x42ffff80; valaddr_reg:x3; val_offset:104676*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104676*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34893:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2da4ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f2d45 and fs3 == 0 and fe3 == 0x85 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2da4ff; op2val:0x2f2d45;
op3val:0x42ffffc0; valaddr_reg:x3; val_offset:104679*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104679*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34894:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2da4ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f2d45 and fs3 == 0 and fe3 == 0x85 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2da4ff; op2val:0x2f2d45;
op3val:0x42ffffe0; valaddr_reg:x3; val_offset:104682*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104682*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34895:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2da4ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f2d45 and fs3 == 0 and fe3 == 0x85 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2da4ff; op2val:0x2f2d45;
op3val:0x42fffff0; valaddr_reg:x3; val_offset:104685*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104685*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34896:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2da4ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f2d45 and fs3 == 0 and fe3 == 0x85 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2da4ff; op2val:0x2f2d45;
op3val:0x42fffff8; valaddr_reg:x3; val_offset:104688*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104688*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34897:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2da4ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f2d45 and fs3 == 0 and fe3 == 0x85 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2da4ff; op2val:0x2f2d45;
op3val:0x42fffffc; valaddr_reg:x3; val_offset:104691*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104691*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34898:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2da4ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f2d45 and fs3 == 0 and fe3 == 0x85 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2da4ff; op2val:0x2f2d45;
op3val:0x42fffffe; valaddr_reg:x3; val_offset:104694*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104694*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34899:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2da4ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f2d45 and fs3 == 0 and fe3 == 0x85 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2da4ff; op2val:0x2f2d45;
op3val:0x42ffffff; valaddr_reg:x3; val_offset:104697*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104697*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34900:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e57f9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2efcd7 and fs3 == 1 and fe3 == 0x5b and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2e57f9; op2val:0x802efcd7;
op3val:0xad800000; valaddr_reg:x3; val_offset:104700*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104700*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34901:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e57f9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2efcd7 and fs3 == 1 and fe3 == 0x5b and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2e57f9; op2val:0x802efcd7;
op3val:0xad800001; valaddr_reg:x3; val_offset:104703*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104703*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34902:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e57f9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2efcd7 and fs3 == 1 and fe3 == 0x5b and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2e57f9; op2val:0x802efcd7;
op3val:0xad800003; valaddr_reg:x3; val_offset:104706*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104706*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34903:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e57f9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2efcd7 and fs3 == 1 and fe3 == 0x5b and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2e57f9; op2val:0x802efcd7;
op3val:0xad800007; valaddr_reg:x3; val_offset:104709*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104709*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34904:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e57f9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2efcd7 and fs3 == 1 and fe3 == 0x5b and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2e57f9; op2val:0x802efcd7;
op3val:0xad80000f; valaddr_reg:x3; val_offset:104712*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104712*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34905:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e57f9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2efcd7 and fs3 == 1 and fe3 == 0x5b and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2e57f9; op2val:0x802efcd7;
op3val:0xad80001f; valaddr_reg:x3; val_offset:104715*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104715*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34906:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e57f9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2efcd7 and fs3 == 1 and fe3 == 0x5b and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2e57f9; op2val:0x802efcd7;
op3val:0xad80003f; valaddr_reg:x3; val_offset:104718*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104718*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34907:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e57f9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2efcd7 and fs3 == 1 and fe3 == 0x5b and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2e57f9; op2val:0x802efcd7;
op3val:0xad80007f; valaddr_reg:x3; val_offset:104721*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104721*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34908:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e57f9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2efcd7 and fs3 == 1 and fe3 == 0x5b and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2e57f9; op2val:0x802efcd7;
op3val:0xad8000ff; valaddr_reg:x3; val_offset:104724*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104724*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34909:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e57f9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2efcd7 and fs3 == 1 and fe3 == 0x5b and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2e57f9; op2val:0x802efcd7;
op3val:0xad8001ff; valaddr_reg:x3; val_offset:104727*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104727*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34910:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e57f9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2efcd7 and fs3 == 1 and fe3 == 0x5b and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2e57f9; op2val:0x802efcd7;
op3val:0xad8003ff; valaddr_reg:x3; val_offset:104730*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104730*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34911:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e57f9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2efcd7 and fs3 == 1 and fe3 == 0x5b and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2e57f9; op2val:0x802efcd7;
op3val:0xad8007ff; valaddr_reg:x3; val_offset:104733*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104733*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34912:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e57f9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2efcd7 and fs3 == 1 and fe3 == 0x5b and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2e57f9; op2val:0x802efcd7;
op3val:0xad800fff; valaddr_reg:x3; val_offset:104736*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104736*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34913:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e57f9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2efcd7 and fs3 == 1 and fe3 == 0x5b and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2e57f9; op2val:0x802efcd7;
op3val:0xad801fff; valaddr_reg:x3; val_offset:104739*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104739*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34914:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e57f9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2efcd7 and fs3 == 1 and fe3 == 0x5b and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2e57f9; op2val:0x802efcd7;
op3val:0xad803fff; valaddr_reg:x3; val_offset:104742*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104742*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34915:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e57f9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2efcd7 and fs3 == 1 and fe3 == 0x5b and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2e57f9; op2val:0x802efcd7;
op3val:0xad807fff; valaddr_reg:x3; val_offset:104745*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104745*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34916:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e57f9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2efcd7 and fs3 == 1 and fe3 == 0x5b and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2e57f9; op2val:0x802efcd7;
op3val:0xad80ffff; valaddr_reg:x3; val_offset:104748*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104748*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34917:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e57f9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2efcd7 and fs3 == 1 and fe3 == 0x5b and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2e57f9; op2val:0x802efcd7;
op3val:0xad81ffff; valaddr_reg:x3; val_offset:104751*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104751*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34918:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e57f9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2efcd7 and fs3 == 1 and fe3 == 0x5b and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2e57f9; op2val:0x802efcd7;
op3val:0xad83ffff; valaddr_reg:x3; val_offset:104754*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104754*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34919:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e57f9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2efcd7 and fs3 == 1 and fe3 == 0x5b and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2e57f9; op2val:0x802efcd7;
op3val:0xad87ffff; valaddr_reg:x3; val_offset:104757*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104757*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34920:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e57f9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2efcd7 and fs3 == 1 and fe3 == 0x5b and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2e57f9; op2val:0x802efcd7;
op3val:0xad8fffff; valaddr_reg:x3; val_offset:104760*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104760*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34921:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e57f9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2efcd7 and fs3 == 1 and fe3 == 0x5b and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2e57f9; op2val:0x802efcd7;
op3val:0xad9fffff; valaddr_reg:x3; val_offset:104763*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104763*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34922:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e57f9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2efcd7 and fs3 == 1 and fe3 == 0x5b and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2e57f9; op2val:0x802efcd7;
op3val:0xadbfffff; valaddr_reg:x3; val_offset:104766*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104766*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34923:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e57f9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2efcd7 and fs3 == 1 and fe3 == 0x5b and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2e57f9; op2val:0x802efcd7;
op3val:0xadc00000; valaddr_reg:x3; val_offset:104769*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104769*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34924:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e57f9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2efcd7 and fs3 == 1 and fe3 == 0x5b and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2e57f9; op2val:0x802efcd7;
op3val:0xade00000; valaddr_reg:x3; val_offset:104772*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104772*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34925:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e57f9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2efcd7 and fs3 == 1 and fe3 == 0x5b and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2e57f9; op2val:0x802efcd7;
op3val:0xadf00000; valaddr_reg:x3; val_offset:104775*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104775*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34926:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e57f9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2efcd7 and fs3 == 1 and fe3 == 0x5b and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2e57f9; op2val:0x802efcd7;
op3val:0xadf80000; valaddr_reg:x3; val_offset:104778*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104778*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34927:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e57f9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2efcd7 and fs3 == 1 and fe3 == 0x5b and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2e57f9; op2val:0x802efcd7;
op3val:0xadfc0000; valaddr_reg:x3; val_offset:104781*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104781*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34928:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e57f9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2efcd7 and fs3 == 1 and fe3 == 0x5b and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2e57f9; op2val:0x802efcd7;
op3val:0xadfe0000; valaddr_reg:x3; val_offset:104784*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104784*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34929:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e57f9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2efcd7 and fs3 == 1 and fe3 == 0x5b and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2e57f9; op2val:0x802efcd7;
op3val:0xadff0000; valaddr_reg:x3; val_offset:104787*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104787*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34930:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e57f9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2efcd7 and fs3 == 1 and fe3 == 0x5b and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2e57f9; op2val:0x802efcd7;
op3val:0xadff8000; valaddr_reg:x3; val_offset:104790*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104790*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34931:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e57f9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2efcd7 and fs3 == 1 and fe3 == 0x5b and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2e57f9; op2val:0x802efcd7;
op3val:0xadffc000; valaddr_reg:x3; val_offset:104793*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104793*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34932:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e57f9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2efcd7 and fs3 == 1 and fe3 == 0x5b and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2e57f9; op2val:0x802efcd7;
op3val:0xadffe000; valaddr_reg:x3; val_offset:104796*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104796*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34933:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e57f9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2efcd7 and fs3 == 1 and fe3 == 0x5b and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2e57f9; op2val:0x802efcd7;
op3val:0xadfff000; valaddr_reg:x3; val_offset:104799*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104799*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34934:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e57f9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2efcd7 and fs3 == 1 and fe3 == 0x5b and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2e57f9; op2val:0x802efcd7;
op3val:0xadfff800; valaddr_reg:x3; val_offset:104802*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104802*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34935:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e57f9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2efcd7 and fs3 == 1 and fe3 == 0x5b and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2e57f9; op2val:0x802efcd7;
op3val:0xadfffc00; valaddr_reg:x3; val_offset:104805*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104805*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34936:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e57f9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2efcd7 and fs3 == 1 and fe3 == 0x5b and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2e57f9; op2val:0x802efcd7;
op3val:0xadfffe00; valaddr_reg:x3; val_offset:104808*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104808*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34937:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e57f9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2efcd7 and fs3 == 1 and fe3 == 0x5b and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2e57f9; op2val:0x802efcd7;
op3val:0xadffff00; valaddr_reg:x3; val_offset:104811*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104811*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34938:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e57f9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2efcd7 and fs3 == 1 and fe3 == 0x5b and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2e57f9; op2val:0x802efcd7;
op3val:0xadffff80; valaddr_reg:x3; val_offset:104814*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104814*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34939:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e57f9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2efcd7 and fs3 == 1 and fe3 == 0x5b and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2e57f9; op2val:0x802efcd7;
op3val:0xadffffc0; valaddr_reg:x3; val_offset:104817*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104817*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34940:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e57f9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2efcd7 and fs3 == 1 and fe3 == 0x5b and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2e57f9; op2val:0x802efcd7;
op3val:0xadffffe0; valaddr_reg:x3; val_offset:104820*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104820*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34941:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e57f9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2efcd7 and fs3 == 1 and fe3 == 0x5b and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2e57f9; op2val:0x802efcd7;
op3val:0xadfffff0; valaddr_reg:x3; val_offset:104823*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104823*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34942:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e57f9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2efcd7 and fs3 == 1 and fe3 == 0x5b and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2e57f9; op2val:0x802efcd7;
op3val:0xadfffff8; valaddr_reg:x3; val_offset:104826*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104826*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34943:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e57f9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2efcd7 and fs3 == 1 and fe3 == 0x5b and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2e57f9; op2val:0x802efcd7;
op3val:0xadfffffc; valaddr_reg:x3; val_offset:104829*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104829*0 + 3*272*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2133671438,32,FLEN)
NAN_BOXED(3098957,32,FLEN)
NAN_BOXED(1138753536,32,FLEN)
NAN_BOXED(2133671438,32,FLEN)
NAN_BOXED(3098957,32,FLEN)
NAN_BOXED(1139802112,32,FLEN)
NAN_BOXED(2133671438,32,FLEN)
NAN_BOXED(3098957,32,FLEN)
NAN_BOXED(1140326400,32,FLEN)
NAN_BOXED(2133671438,32,FLEN)
NAN_BOXED(3098957,32,FLEN)
NAN_BOXED(1140588544,32,FLEN)
NAN_BOXED(2133671438,32,FLEN)
NAN_BOXED(3098957,32,FLEN)
NAN_BOXED(1140719616,32,FLEN)
NAN_BOXED(2133671438,32,FLEN)
NAN_BOXED(3098957,32,FLEN)
NAN_BOXED(1140785152,32,FLEN)
NAN_BOXED(2133671438,32,FLEN)
NAN_BOXED(3098957,32,FLEN)
NAN_BOXED(1140817920,32,FLEN)
NAN_BOXED(2133671438,32,FLEN)
NAN_BOXED(3098957,32,FLEN)
NAN_BOXED(1140834304,32,FLEN)
NAN_BOXED(2133671438,32,FLEN)
NAN_BOXED(3098957,32,FLEN)
NAN_BOXED(1140842496,32,FLEN)
NAN_BOXED(2133671438,32,FLEN)
NAN_BOXED(3098957,32,FLEN)
NAN_BOXED(1140846592,32,FLEN)
NAN_BOXED(2133671438,32,FLEN)
NAN_BOXED(3098957,32,FLEN)
NAN_BOXED(1140848640,32,FLEN)
NAN_BOXED(2133671438,32,FLEN)
NAN_BOXED(3098957,32,FLEN)
NAN_BOXED(1140849664,32,FLEN)
NAN_BOXED(2133671438,32,FLEN)
NAN_BOXED(3098957,32,FLEN)
NAN_BOXED(1140850176,32,FLEN)
NAN_BOXED(2133671438,32,FLEN)
NAN_BOXED(3098957,32,FLEN)
NAN_BOXED(1140850432,32,FLEN)
NAN_BOXED(2133671438,32,FLEN)
NAN_BOXED(3098957,32,FLEN)
NAN_BOXED(1140850560,32,FLEN)
NAN_BOXED(2133671438,32,FLEN)
NAN_BOXED(3098957,32,FLEN)
NAN_BOXED(1140850624,32,FLEN)
NAN_BOXED(2133671438,32,FLEN)
NAN_BOXED(3098957,32,FLEN)
NAN_BOXED(1140850656,32,FLEN)
NAN_BOXED(2133671438,32,FLEN)
NAN_BOXED(3098957,32,FLEN)
NAN_BOXED(1140850672,32,FLEN)
NAN_BOXED(2133671438,32,FLEN)
NAN_BOXED(3098957,32,FLEN)
NAN_BOXED(1140850680,32,FLEN)
NAN_BOXED(2133671438,32,FLEN)
NAN_BOXED(3098957,32,FLEN)
NAN_BOXED(1140850684,32,FLEN)
NAN_BOXED(2133671438,32,FLEN)
NAN_BOXED(3098957,32,FLEN)
NAN_BOXED(1140850686,32,FLEN)
NAN_BOXED(2133671438,32,FLEN)
NAN_BOXED(3098957,32,FLEN)
NAN_BOXED(1140850687,32,FLEN)
NAN_BOXED(2133697791,32,FLEN)
NAN_BOXED(3091781,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2133697791,32,FLEN)
NAN_BOXED(3091781,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2133697791,32,FLEN)
NAN_BOXED(3091781,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2133697791,32,FLEN)
NAN_BOXED(3091781,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2133697791,32,FLEN)
NAN_BOXED(3091781,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2133697791,32,FLEN)
NAN_BOXED(3091781,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2133697791,32,FLEN)
NAN_BOXED(3091781,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2133697791,32,FLEN)
NAN_BOXED(3091781,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2133697791,32,FLEN)
NAN_BOXED(3091781,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2133697791,32,FLEN)
NAN_BOXED(3091781,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2133697791,32,FLEN)
NAN_BOXED(3091781,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2133697791,32,FLEN)
NAN_BOXED(3091781,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2133697791,32,FLEN)
NAN_BOXED(3091781,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2133697791,32,FLEN)
NAN_BOXED(3091781,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2133697791,32,FLEN)
NAN_BOXED(3091781,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2133697791,32,FLEN)
NAN_BOXED(3091781,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2133697791,32,FLEN)
NAN_BOXED(3091781,32,FLEN)
NAN_BOXED(1115684864,32,FLEN)
NAN_BOXED(2133697791,32,FLEN)
NAN_BOXED(3091781,32,FLEN)
NAN_BOXED(1115684865,32,FLEN)
NAN_BOXED(2133697791,32,FLEN)
NAN_BOXED(3091781,32,FLEN)
NAN_BOXED(1115684867,32,FLEN)
NAN_BOXED(2133697791,32,FLEN)
NAN_BOXED(3091781,32,FLEN)
NAN_BOXED(1115684871,32,FLEN)
NAN_BOXED(2133697791,32,FLEN)
NAN_BOXED(3091781,32,FLEN)
NAN_BOXED(1115684879,32,FLEN)
NAN_BOXED(2133697791,32,FLEN)
NAN_BOXED(3091781,32,FLEN)
NAN_BOXED(1115684895,32,FLEN)
NAN_BOXED(2133697791,32,FLEN)
NAN_BOXED(3091781,32,FLEN)
NAN_BOXED(1115684927,32,FLEN)
NAN_BOXED(2133697791,32,FLEN)
NAN_BOXED(3091781,32,FLEN)
NAN_BOXED(1115684991,32,FLEN)
NAN_BOXED(2133697791,32,FLEN)
NAN_BOXED(3091781,32,FLEN)
NAN_BOXED(1115685119,32,FLEN)
NAN_BOXED(2133697791,32,FLEN)
NAN_BOXED(3091781,32,FLEN)
NAN_BOXED(1115685375,32,FLEN)
NAN_BOXED(2133697791,32,FLEN)
NAN_BOXED(3091781,32,FLEN)
NAN_BOXED(1115685887,32,FLEN)
NAN_BOXED(2133697791,32,FLEN)
NAN_BOXED(3091781,32,FLEN)
NAN_BOXED(1115686911,32,FLEN)
NAN_BOXED(2133697791,32,FLEN)
NAN_BOXED(3091781,32,FLEN)
NAN_BOXED(1115688959,32,FLEN)
NAN_BOXED(2133697791,32,FLEN)
NAN_BOXED(3091781,32,FLEN)
NAN_BOXED(1115693055,32,FLEN)
NAN_BOXED(2133697791,32,FLEN)
NAN_BOXED(3091781,32,FLEN)
NAN_BOXED(1115701247,32,FLEN)
NAN_BOXED(2133697791,32,FLEN)
NAN_BOXED(3091781,32,FLEN)
NAN_BOXED(1115717631,32,FLEN)
NAN_BOXED(2133697791,32,FLEN)
NAN_BOXED(3091781,32,FLEN)
NAN_BOXED(1115750399,32,FLEN)
NAN_BOXED(2133697791,32,FLEN)
NAN_BOXED(3091781,32,FLEN)
NAN_BOXED(1115815935,32,FLEN)
NAN_BOXED(2133697791,32,FLEN)
NAN_BOXED(3091781,32,FLEN)
NAN_BOXED(1115947007,32,FLEN)
NAN_BOXED(2133697791,32,FLEN)
NAN_BOXED(3091781,32,FLEN)
NAN_BOXED(1116209151,32,FLEN)
NAN_BOXED(2133697791,32,FLEN)
NAN_BOXED(3091781,32,FLEN)
NAN_BOXED(1116733439,32,FLEN)
NAN_BOXED(2133697791,32,FLEN)
NAN_BOXED(3091781,32,FLEN)
NAN_BOXED(1117782015,32,FLEN)
NAN_BOXED(2133697791,32,FLEN)
NAN_BOXED(3091781,32,FLEN)
NAN_BOXED(1119879167,32,FLEN)
NAN_BOXED(2133697791,32,FLEN)
NAN_BOXED(3091781,32,FLEN)
NAN_BOXED(1119879168,32,FLEN)
NAN_BOXED(2133697791,32,FLEN)
NAN_BOXED(3091781,32,FLEN)
NAN_BOXED(1121976320,32,FLEN)
NAN_BOXED(2133697791,32,FLEN)
NAN_BOXED(3091781,32,FLEN)
NAN_BOXED(1123024896,32,FLEN)
NAN_BOXED(2133697791,32,FLEN)
NAN_BOXED(3091781,32,FLEN)
NAN_BOXED(1123549184,32,FLEN)
NAN_BOXED(2133697791,32,FLEN)
NAN_BOXED(3091781,32,FLEN)
NAN_BOXED(1123811328,32,FLEN)
NAN_BOXED(2133697791,32,FLEN)
NAN_BOXED(3091781,32,FLEN)
NAN_BOXED(1123942400,32,FLEN)
NAN_BOXED(2133697791,32,FLEN)
NAN_BOXED(3091781,32,FLEN)
NAN_BOXED(1124007936,32,FLEN)
NAN_BOXED(2133697791,32,FLEN)
NAN_BOXED(3091781,32,FLEN)
NAN_BOXED(1124040704,32,FLEN)
NAN_BOXED(2133697791,32,FLEN)
NAN_BOXED(3091781,32,FLEN)
NAN_BOXED(1124057088,32,FLEN)
NAN_BOXED(2133697791,32,FLEN)
NAN_BOXED(3091781,32,FLEN)
NAN_BOXED(1124065280,32,FLEN)
NAN_BOXED(2133697791,32,FLEN)
NAN_BOXED(3091781,32,FLEN)
NAN_BOXED(1124069376,32,FLEN)
NAN_BOXED(2133697791,32,FLEN)
NAN_BOXED(3091781,32,FLEN)
NAN_BOXED(1124071424,32,FLEN)
NAN_BOXED(2133697791,32,FLEN)
NAN_BOXED(3091781,32,FLEN)
NAN_BOXED(1124072448,32,FLEN)
NAN_BOXED(2133697791,32,FLEN)
NAN_BOXED(3091781,32,FLEN)
NAN_BOXED(1124072960,32,FLEN)
NAN_BOXED(2133697791,32,FLEN)
NAN_BOXED(3091781,32,FLEN)
NAN_BOXED(1124073216,32,FLEN)
NAN_BOXED(2133697791,32,FLEN)
NAN_BOXED(3091781,32,FLEN)
NAN_BOXED(1124073344,32,FLEN)
NAN_BOXED(2133697791,32,FLEN)
NAN_BOXED(3091781,32,FLEN)
NAN_BOXED(1124073408,32,FLEN)
NAN_BOXED(2133697791,32,FLEN)
NAN_BOXED(3091781,32,FLEN)
NAN_BOXED(1124073440,32,FLEN)
NAN_BOXED(2133697791,32,FLEN)
NAN_BOXED(3091781,32,FLEN)
NAN_BOXED(1124073456,32,FLEN)
NAN_BOXED(2133697791,32,FLEN)
NAN_BOXED(3091781,32,FLEN)
NAN_BOXED(1124073464,32,FLEN)
NAN_BOXED(2133697791,32,FLEN)
NAN_BOXED(3091781,32,FLEN)
NAN_BOXED(1124073468,32,FLEN)
NAN_BOXED(2133697791,32,FLEN)
NAN_BOXED(3091781,32,FLEN)
NAN_BOXED(1124073470,32,FLEN)
NAN_BOXED(2133697791,32,FLEN)
NAN_BOXED(3091781,32,FLEN)
NAN_BOXED(1124073471,32,FLEN)
NAN_BOXED(2133743609,32,FLEN)
NAN_BOXED(2150563031,32,FLEN)
NAN_BOXED(2910846976,32,FLEN)
NAN_BOXED(2133743609,32,FLEN)
NAN_BOXED(2150563031,32,FLEN)
NAN_BOXED(2910846977,32,FLEN)
NAN_BOXED(2133743609,32,FLEN)
NAN_BOXED(2150563031,32,FLEN)
NAN_BOXED(2910846979,32,FLEN)
NAN_BOXED(2133743609,32,FLEN)
NAN_BOXED(2150563031,32,FLEN)
NAN_BOXED(2910846983,32,FLEN)
NAN_BOXED(2133743609,32,FLEN)
NAN_BOXED(2150563031,32,FLEN)
NAN_BOXED(2910846991,32,FLEN)
NAN_BOXED(2133743609,32,FLEN)
NAN_BOXED(2150563031,32,FLEN)
NAN_BOXED(2910847007,32,FLEN)
NAN_BOXED(2133743609,32,FLEN)
NAN_BOXED(2150563031,32,FLEN)
NAN_BOXED(2910847039,32,FLEN)
NAN_BOXED(2133743609,32,FLEN)
NAN_BOXED(2150563031,32,FLEN)
NAN_BOXED(2910847103,32,FLEN)
NAN_BOXED(2133743609,32,FLEN)
NAN_BOXED(2150563031,32,FLEN)
NAN_BOXED(2910847231,32,FLEN)
NAN_BOXED(2133743609,32,FLEN)
NAN_BOXED(2150563031,32,FLEN)
NAN_BOXED(2910847487,32,FLEN)
NAN_BOXED(2133743609,32,FLEN)
NAN_BOXED(2150563031,32,FLEN)
NAN_BOXED(2910847999,32,FLEN)
NAN_BOXED(2133743609,32,FLEN)
NAN_BOXED(2150563031,32,FLEN)
NAN_BOXED(2910849023,32,FLEN)
NAN_BOXED(2133743609,32,FLEN)
NAN_BOXED(2150563031,32,FLEN)
NAN_BOXED(2910851071,32,FLEN)
NAN_BOXED(2133743609,32,FLEN)
NAN_BOXED(2150563031,32,FLEN)
NAN_BOXED(2910855167,32,FLEN)
NAN_BOXED(2133743609,32,FLEN)
NAN_BOXED(2150563031,32,FLEN)
NAN_BOXED(2910863359,32,FLEN)
NAN_BOXED(2133743609,32,FLEN)
NAN_BOXED(2150563031,32,FLEN)
NAN_BOXED(2910879743,32,FLEN)
NAN_BOXED(2133743609,32,FLEN)
NAN_BOXED(2150563031,32,FLEN)
NAN_BOXED(2910912511,32,FLEN)
NAN_BOXED(2133743609,32,FLEN)
NAN_BOXED(2150563031,32,FLEN)
NAN_BOXED(2910978047,32,FLEN)
NAN_BOXED(2133743609,32,FLEN)
NAN_BOXED(2150563031,32,FLEN)
NAN_BOXED(2911109119,32,FLEN)
NAN_BOXED(2133743609,32,FLEN)
NAN_BOXED(2150563031,32,FLEN)
NAN_BOXED(2911371263,32,FLEN)
NAN_BOXED(2133743609,32,FLEN)
NAN_BOXED(2150563031,32,FLEN)
NAN_BOXED(2911895551,32,FLEN)
NAN_BOXED(2133743609,32,FLEN)
NAN_BOXED(2150563031,32,FLEN)
NAN_BOXED(2912944127,32,FLEN)
NAN_BOXED(2133743609,32,FLEN)
NAN_BOXED(2150563031,32,FLEN)
NAN_BOXED(2915041279,32,FLEN)
NAN_BOXED(2133743609,32,FLEN)
NAN_BOXED(2150563031,32,FLEN)
NAN_BOXED(2915041280,32,FLEN)
NAN_BOXED(2133743609,32,FLEN)
NAN_BOXED(2150563031,32,FLEN)
NAN_BOXED(2917138432,32,FLEN)
NAN_BOXED(2133743609,32,FLEN)
NAN_BOXED(2150563031,32,FLEN)
NAN_BOXED(2918187008,32,FLEN)
NAN_BOXED(2133743609,32,FLEN)
NAN_BOXED(2150563031,32,FLEN)
NAN_BOXED(2918711296,32,FLEN)
NAN_BOXED(2133743609,32,FLEN)
NAN_BOXED(2150563031,32,FLEN)
NAN_BOXED(2918973440,32,FLEN)
NAN_BOXED(2133743609,32,FLEN)
NAN_BOXED(2150563031,32,FLEN)
NAN_BOXED(2919104512,32,FLEN)
NAN_BOXED(2133743609,32,FLEN)
NAN_BOXED(2150563031,32,FLEN)
NAN_BOXED(2919170048,32,FLEN)
NAN_BOXED(2133743609,32,FLEN)
NAN_BOXED(2150563031,32,FLEN)
NAN_BOXED(2919202816,32,FLEN)
NAN_BOXED(2133743609,32,FLEN)
NAN_BOXED(2150563031,32,FLEN)
NAN_BOXED(2919219200,32,FLEN)
NAN_BOXED(2133743609,32,FLEN)
NAN_BOXED(2150563031,32,FLEN)
NAN_BOXED(2919227392,32,FLEN)
NAN_BOXED(2133743609,32,FLEN)
NAN_BOXED(2150563031,32,FLEN)
NAN_BOXED(2919231488,32,FLEN)
NAN_BOXED(2133743609,32,FLEN)
NAN_BOXED(2150563031,32,FLEN)
NAN_BOXED(2919233536,32,FLEN)
NAN_BOXED(2133743609,32,FLEN)
NAN_BOXED(2150563031,32,FLEN)
NAN_BOXED(2919234560,32,FLEN)
NAN_BOXED(2133743609,32,FLEN)
NAN_BOXED(2150563031,32,FLEN)
NAN_BOXED(2919235072,32,FLEN)
NAN_BOXED(2133743609,32,FLEN)
NAN_BOXED(2150563031,32,FLEN)
NAN_BOXED(2919235328,32,FLEN)
NAN_BOXED(2133743609,32,FLEN)
NAN_BOXED(2150563031,32,FLEN)
NAN_BOXED(2919235456,32,FLEN)
NAN_BOXED(2133743609,32,FLEN)
NAN_BOXED(2150563031,32,FLEN)
NAN_BOXED(2919235520,32,FLEN)
NAN_BOXED(2133743609,32,FLEN)
NAN_BOXED(2150563031,32,FLEN)
NAN_BOXED(2919235552,32,FLEN)
NAN_BOXED(2133743609,32,FLEN)
NAN_BOXED(2150563031,32,FLEN)
NAN_BOXED(2919235568,32,FLEN)
NAN_BOXED(2133743609,32,FLEN)
NAN_BOXED(2150563031,32,FLEN)
NAN_BOXED(2919235576,32,FLEN)
NAN_BOXED(2133743609,32,FLEN)
NAN_BOXED(2150563031,32,FLEN)
NAN_BOXED(2919235580,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
