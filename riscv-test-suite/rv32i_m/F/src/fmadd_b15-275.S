
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:17:59 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_35072:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e7c12 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3bcc79 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2e7c12; op2val:0xbfbbcc79;
op3val:0xff000007; valaddr_reg:x3; val_offset:105216*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105216*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35073:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e7c12 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3bcc79 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2e7c12; op2val:0xbfbbcc79;
op3val:0xff199999; valaddr_reg:x3; val_offset:105219*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105219*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35074:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e7c12 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3bcc79 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2e7c12; op2val:0xbfbbcc79;
op3val:0xff249249; valaddr_reg:x3; val_offset:105222*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105222*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35075:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e7c12 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3bcc79 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2e7c12; op2val:0xbfbbcc79;
op3val:0xff333333; valaddr_reg:x3; val_offset:105225*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105225*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35076:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e7c12 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3bcc79 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2e7c12; op2val:0xbfbbcc79;
op3val:0xff36db6d; valaddr_reg:x3; val_offset:105228*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105228*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35077:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e7c12 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3bcc79 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2e7c12; op2val:0xbfbbcc79;
op3val:0xff3bbbbb; valaddr_reg:x3; val_offset:105231*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105231*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35078:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e7c12 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3bcc79 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2e7c12; op2val:0xbfbbcc79;
op3val:0xff444444; valaddr_reg:x3; val_offset:105234*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105234*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35079:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e7c12 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3bcc79 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2e7c12; op2val:0xbfbbcc79;
op3val:0xff4ccccc; valaddr_reg:x3; val_offset:105237*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105237*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35080:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e7c12 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3bcc79 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2e7c12; op2val:0xbfbbcc79;
op3val:0xff5b6db6; valaddr_reg:x3; val_offset:105240*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105240*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35081:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e7c12 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3bcc79 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2e7c12; op2val:0xbfbbcc79;
op3val:0xff666666; valaddr_reg:x3; val_offset:105243*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105243*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35082:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e7c12 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3bcc79 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2e7c12; op2val:0xbfbbcc79;
op3val:0xff6db6db; valaddr_reg:x3; val_offset:105246*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105246*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35083:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e7c12 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3bcc79 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2e7c12; op2val:0xbfbbcc79;
op3val:0xff7ffff8; valaddr_reg:x3; val_offset:105249*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105249*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35084:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e7c12 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3bcc79 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2e7c12; op2val:0xbfbbcc79;
op3val:0xff7ffffc; valaddr_reg:x3; val_offset:105252*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105252*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35085:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e7c12 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3bcc79 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2e7c12; op2val:0xbfbbcc79;
op3val:0xff7ffffe; valaddr_reg:x3; val_offset:105255*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105255*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35086:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f0ff8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f0ff8; op2val:0x0;
op3val:0x800001; valaddr_reg:x3; val_offset:105258*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105258*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35087:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f0ff8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f0ff8; op2val:0x0;
op3val:0x800003; valaddr_reg:x3; val_offset:105261*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105261*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35088:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f0ff8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f0ff8; op2val:0x0;
op3val:0x800007; valaddr_reg:x3; val_offset:105264*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105264*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35089:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f0ff8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f0ff8; op2val:0x0;
op3val:0x999999; valaddr_reg:x3; val_offset:105267*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105267*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35090:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f0ff8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f0ff8; op2val:0x0;
op3val:0xa49249; valaddr_reg:x3; val_offset:105270*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105270*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35091:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f0ff8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f0ff8; op2val:0x0;
op3val:0xb33333; valaddr_reg:x3; val_offset:105273*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105273*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35092:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f0ff8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f0ff8; op2val:0x0;
op3val:0xb6db6d; valaddr_reg:x3; val_offset:105276*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105276*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35093:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f0ff8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f0ff8; op2val:0x0;
op3val:0xbbbbbb; valaddr_reg:x3; val_offset:105279*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105279*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35094:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f0ff8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f0ff8; op2val:0x0;
op3val:0xc44444; valaddr_reg:x3; val_offset:105282*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105282*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35095:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f0ff8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f0ff8; op2val:0x0;
op3val:0xcccccc; valaddr_reg:x3; val_offset:105285*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105285*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35096:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f0ff8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f0ff8; op2val:0x0;
op3val:0xdb6db6; valaddr_reg:x3; val_offset:105288*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105288*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35097:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f0ff8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f0ff8; op2val:0x0;
op3val:0xe66666; valaddr_reg:x3; val_offset:105291*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105291*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35098:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f0ff8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f0ff8; op2val:0x0;
op3val:0xedb6db; valaddr_reg:x3; val_offset:105294*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105294*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35099:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f0ff8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f0ff8; op2val:0x0;
op3val:0xfffff8; valaddr_reg:x3; val_offset:105297*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105297*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35100:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f0ff8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f0ff8; op2val:0x0;
op3val:0xfffffc; valaddr_reg:x3; val_offset:105300*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105300*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35101:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f0ff8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f0ff8; op2val:0x0;
op3val:0xfffffe; valaddr_reg:x3; val_offset:105303*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105303*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35102:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f0ff8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x21 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f0ff8; op2val:0x0;
op3val:0x10800000; valaddr_reg:x3; val_offset:105306*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105306*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35103:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f0ff8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x21 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f0ff8; op2val:0x0;
op3val:0x10800001; valaddr_reg:x3; val_offset:105309*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105309*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35104:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f0ff8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x21 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f0ff8; op2val:0x0;
op3val:0x10800003; valaddr_reg:x3; val_offset:105312*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105312*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35105:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f0ff8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x21 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f0ff8; op2val:0x0;
op3val:0x10800007; valaddr_reg:x3; val_offset:105315*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105315*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35106:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f0ff8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x21 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f0ff8; op2val:0x0;
op3val:0x1080000f; valaddr_reg:x3; val_offset:105318*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105318*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35107:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f0ff8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x21 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f0ff8; op2val:0x0;
op3val:0x1080001f; valaddr_reg:x3; val_offset:105321*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105321*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35108:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f0ff8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x21 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f0ff8; op2val:0x0;
op3val:0x1080003f; valaddr_reg:x3; val_offset:105324*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105324*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35109:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f0ff8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x21 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f0ff8; op2val:0x0;
op3val:0x1080007f; valaddr_reg:x3; val_offset:105327*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105327*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35110:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f0ff8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x21 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f0ff8; op2val:0x0;
op3val:0x108000ff; valaddr_reg:x3; val_offset:105330*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105330*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35111:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f0ff8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x21 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f0ff8; op2val:0x0;
op3val:0x108001ff; valaddr_reg:x3; val_offset:105333*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105333*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35112:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f0ff8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x21 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f0ff8; op2val:0x0;
op3val:0x108003ff; valaddr_reg:x3; val_offset:105336*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105336*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35113:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f0ff8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x21 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f0ff8; op2val:0x0;
op3val:0x108007ff; valaddr_reg:x3; val_offset:105339*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105339*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35114:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f0ff8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x21 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f0ff8; op2val:0x0;
op3val:0x10800fff; valaddr_reg:x3; val_offset:105342*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105342*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35115:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f0ff8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x21 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f0ff8; op2val:0x0;
op3val:0x10801fff; valaddr_reg:x3; val_offset:105345*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105345*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35116:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f0ff8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x21 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f0ff8; op2val:0x0;
op3val:0x10803fff; valaddr_reg:x3; val_offset:105348*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105348*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35117:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f0ff8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x21 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f0ff8; op2val:0x0;
op3val:0x10807fff; valaddr_reg:x3; val_offset:105351*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105351*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35118:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f0ff8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x21 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f0ff8; op2val:0x0;
op3val:0x1080ffff; valaddr_reg:x3; val_offset:105354*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105354*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35119:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f0ff8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x21 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f0ff8; op2val:0x0;
op3val:0x1081ffff; valaddr_reg:x3; val_offset:105357*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105357*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35120:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f0ff8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x21 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f0ff8; op2val:0x0;
op3val:0x1083ffff; valaddr_reg:x3; val_offset:105360*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105360*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35121:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f0ff8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x21 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f0ff8; op2val:0x0;
op3val:0x1087ffff; valaddr_reg:x3; val_offset:105363*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105363*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35122:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f0ff8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x21 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f0ff8; op2val:0x0;
op3val:0x108fffff; valaddr_reg:x3; val_offset:105366*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105366*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35123:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f0ff8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x21 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f0ff8; op2val:0x0;
op3val:0x109fffff; valaddr_reg:x3; val_offset:105369*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105369*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35124:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f0ff8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x21 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f0ff8; op2val:0x0;
op3val:0x10bfffff; valaddr_reg:x3; val_offset:105372*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105372*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35125:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f0ff8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x21 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f0ff8; op2val:0x0;
op3val:0x10c00000; valaddr_reg:x3; val_offset:105375*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105375*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35126:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f0ff8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x21 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f0ff8; op2val:0x0;
op3val:0x10e00000; valaddr_reg:x3; val_offset:105378*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105378*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35127:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f0ff8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x21 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f0ff8; op2val:0x0;
op3val:0x10f00000; valaddr_reg:x3; val_offset:105381*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105381*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35128:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f0ff8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x21 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f0ff8; op2val:0x0;
op3val:0x10f80000; valaddr_reg:x3; val_offset:105384*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105384*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35129:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f0ff8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x21 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f0ff8; op2val:0x0;
op3val:0x10fc0000; valaddr_reg:x3; val_offset:105387*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105387*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35130:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f0ff8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x21 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f0ff8; op2val:0x0;
op3val:0x10fe0000; valaddr_reg:x3; val_offset:105390*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105390*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35131:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f0ff8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x21 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f0ff8; op2val:0x0;
op3val:0x10ff0000; valaddr_reg:x3; val_offset:105393*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105393*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35132:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f0ff8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x21 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f0ff8; op2val:0x0;
op3val:0x10ff8000; valaddr_reg:x3; val_offset:105396*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105396*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35133:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f0ff8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x21 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f0ff8; op2val:0x0;
op3val:0x10ffc000; valaddr_reg:x3; val_offset:105399*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105399*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35134:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f0ff8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x21 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f0ff8; op2val:0x0;
op3val:0x10ffe000; valaddr_reg:x3; val_offset:105402*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105402*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35135:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f0ff8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x21 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f0ff8; op2val:0x0;
op3val:0x10fff000; valaddr_reg:x3; val_offset:105405*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105405*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35136:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f0ff8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x21 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f0ff8; op2val:0x0;
op3val:0x10fff800; valaddr_reg:x3; val_offset:105408*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105408*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35137:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f0ff8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x21 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f0ff8; op2val:0x0;
op3val:0x10fffc00; valaddr_reg:x3; val_offset:105411*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105411*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35138:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f0ff8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x21 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f0ff8; op2val:0x0;
op3val:0x10fffe00; valaddr_reg:x3; val_offset:105414*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105414*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35139:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f0ff8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x21 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f0ff8; op2val:0x0;
op3val:0x10ffff00; valaddr_reg:x3; val_offset:105417*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105417*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35140:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f0ff8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x21 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f0ff8; op2val:0x0;
op3val:0x10ffff80; valaddr_reg:x3; val_offset:105420*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105420*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35141:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f0ff8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x21 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f0ff8; op2val:0x0;
op3val:0x10ffffc0; valaddr_reg:x3; val_offset:105423*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105423*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35142:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f0ff8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x21 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f0ff8; op2val:0x0;
op3val:0x10ffffe0; valaddr_reg:x3; val_offset:105426*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105426*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35143:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f0ff8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x21 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f0ff8; op2val:0x0;
op3val:0x10fffff0; valaddr_reg:x3; val_offset:105429*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105429*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35144:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f0ff8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x21 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f0ff8; op2val:0x0;
op3val:0x10fffff8; valaddr_reg:x3; val_offset:105432*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105432*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35145:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f0ff8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x21 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f0ff8; op2val:0x0;
op3val:0x10fffffc; valaddr_reg:x3; val_offset:105435*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105435*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35146:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f0ff8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x21 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f0ff8; op2val:0x0;
op3val:0x10fffffe; valaddr_reg:x3; val_offset:105438*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105438*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35147:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f0ff8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x21 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f0ff8; op2val:0x0;
op3val:0x10ffffff; valaddr_reg:x3; val_offset:105441*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105441*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35148:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f7715 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2eaff4 and fs3 == 1 and fe3 == 0x7d and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f7715; op2val:0x802eaff4;
op3val:0xbe800000; valaddr_reg:x3; val_offset:105444*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105444*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35149:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f7715 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2eaff4 and fs3 == 1 and fe3 == 0x7d and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f7715; op2val:0x802eaff4;
op3val:0xbe800001; valaddr_reg:x3; val_offset:105447*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105447*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35150:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f7715 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2eaff4 and fs3 == 1 and fe3 == 0x7d and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f7715; op2val:0x802eaff4;
op3val:0xbe800003; valaddr_reg:x3; val_offset:105450*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105450*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35151:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f7715 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2eaff4 and fs3 == 1 and fe3 == 0x7d and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f7715; op2val:0x802eaff4;
op3val:0xbe800007; valaddr_reg:x3; val_offset:105453*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105453*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35152:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f7715 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2eaff4 and fs3 == 1 and fe3 == 0x7d and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f7715; op2val:0x802eaff4;
op3val:0xbe80000f; valaddr_reg:x3; val_offset:105456*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105456*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35153:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f7715 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2eaff4 and fs3 == 1 and fe3 == 0x7d and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f7715; op2val:0x802eaff4;
op3val:0xbe80001f; valaddr_reg:x3; val_offset:105459*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105459*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35154:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f7715 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2eaff4 and fs3 == 1 and fe3 == 0x7d and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f7715; op2val:0x802eaff4;
op3val:0xbe80003f; valaddr_reg:x3; val_offset:105462*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105462*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35155:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f7715 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2eaff4 and fs3 == 1 and fe3 == 0x7d and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f7715; op2val:0x802eaff4;
op3val:0xbe80007f; valaddr_reg:x3; val_offset:105465*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105465*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35156:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f7715 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2eaff4 and fs3 == 1 and fe3 == 0x7d and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f7715; op2val:0x802eaff4;
op3val:0xbe8000ff; valaddr_reg:x3; val_offset:105468*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105468*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35157:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f7715 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2eaff4 and fs3 == 1 and fe3 == 0x7d and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f7715; op2val:0x802eaff4;
op3val:0xbe8001ff; valaddr_reg:x3; val_offset:105471*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105471*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35158:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f7715 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2eaff4 and fs3 == 1 and fe3 == 0x7d and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f7715; op2val:0x802eaff4;
op3val:0xbe8003ff; valaddr_reg:x3; val_offset:105474*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105474*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35159:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f7715 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2eaff4 and fs3 == 1 and fe3 == 0x7d and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f7715; op2val:0x802eaff4;
op3val:0xbe8007ff; valaddr_reg:x3; val_offset:105477*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105477*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35160:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f7715 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2eaff4 and fs3 == 1 and fe3 == 0x7d and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f7715; op2val:0x802eaff4;
op3val:0xbe800fff; valaddr_reg:x3; val_offset:105480*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105480*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35161:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f7715 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2eaff4 and fs3 == 1 and fe3 == 0x7d and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f7715; op2val:0x802eaff4;
op3val:0xbe801fff; valaddr_reg:x3; val_offset:105483*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105483*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35162:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f7715 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2eaff4 and fs3 == 1 and fe3 == 0x7d and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f7715; op2val:0x802eaff4;
op3val:0xbe803fff; valaddr_reg:x3; val_offset:105486*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105486*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35163:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f7715 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2eaff4 and fs3 == 1 and fe3 == 0x7d and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f7715; op2val:0x802eaff4;
op3val:0xbe807fff; valaddr_reg:x3; val_offset:105489*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105489*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35164:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f7715 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2eaff4 and fs3 == 1 and fe3 == 0x7d and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f7715; op2val:0x802eaff4;
op3val:0xbe80ffff; valaddr_reg:x3; val_offset:105492*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105492*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35165:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f7715 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2eaff4 and fs3 == 1 and fe3 == 0x7d and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f7715; op2val:0x802eaff4;
op3val:0xbe81ffff; valaddr_reg:x3; val_offset:105495*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105495*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35166:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f7715 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2eaff4 and fs3 == 1 and fe3 == 0x7d and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f7715; op2val:0x802eaff4;
op3val:0xbe83ffff; valaddr_reg:x3; val_offset:105498*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105498*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35167:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f7715 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2eaff4 and fs3 == 1 and fe3 == 0x7d and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f7715; op2val:0x802eaff4;
op3val:0xbe87ffff; valaddr_reg:x3; val_offset:105501*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105501*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35168:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f7715 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2eaff4 and fs3 == 1 and fe3 == 0x7d and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f7715; op2val:0x802eaff4;
op3val:0xbe8fffff; valaddr_reg:x3; val_offset:105504*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105504*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35169:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f7715 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2eaff4 and fs3 == 1 and fe3 == 0x7d and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f7715; op2val:0x802eaff4;
op3val:0xbe9fffff; valaddr_reg:x3; val_offset:105507*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105507*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35170:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f7715 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2eaff4 and fs3 == 1 and fe3 == 0x7d and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f7715; op2val:0x802eaff4;
op3val:0xbebfffff; valaddr_reg:x3; val_offset:105510*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105510*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35171:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f7715 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2eaff4 and fs3 == 1 and fe3 == 0x7d and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f7715; op2val:0x802eaff4;
op3val:0xbec00000; valaddr_reg:x3; val_offset:105513*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105513*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35172:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f7715 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2eaff4 and fs3 == 1 and fe3 == 0x7d and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f7715; op2val:0x802eaff4;
op3val:0xbee00000; valaddr_reg:x3; val_offset:105516*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105516*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35173:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f7715 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2eaff4 and fs3 == 1 and fe3 == 0x7d and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f7715; op2val:0x802eaff4;
op3val:0xbef00000; valaddr_reg:x3; val_offset:105519*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105519*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35174:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f7715 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2eaff4 and fs3 == 1 and fe3 == 0x7d and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f7715; op2val:0x802eaff4;
op3val:0xbef80000; valaddr_reg:x3; val_offset:105522*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105522*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35175:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f7715 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2eaff4 and fs3 == 1 and fe3 == 0x7d and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f7715; op2val:0x802eaff4;
op3val:0xbefc0000; valaddr_reg:x3; val_offset:105525*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105525*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35176:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f7715 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2eaff4 and fs3 == 1 and fe3 == 0x7d and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f7715; op2val:0x802eaff4;
op3val:0xbefe0000; valaddr_reg:x3; val_offset:105528*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105528*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35177:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f7715 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2eaff4 and fs3 == 1 and fe3 == 0x7d and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f7715; op2val:0x802eaff4;
op3val:0xbeff0000; valaddr_reg:x3; val_offset:105531*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105531*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35178:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f7715 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2eaff4 and fs3 == 1 and fe3 == 0x7d and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f7715; op2val:0x802eaff4;
op3val:0xbeff8000; valaddr_reg:x3; val_offset:105534*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105534*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35179:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f7715 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2eaff4 and fs3 == 1 and fe3 == 0x7d and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f7715; op2val:0x802eaff4;
op3val:0xbeffc000; valaddr_reg:x3; val_offset:105537*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105537*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35180:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f7715 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2eaff4 and fs3 == 1 and fe3 == 0x7d and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f7715; op2val:0x802eaff4;
op3val:0xbeffe000; valaddr_reg:x3; val_offset:105540*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105540*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35181:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f7715 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2eaff4 and fs3 == 1 and fe3 == 0x7d and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f7715; op2val:0x802eaff4;
op3val:0xbefff000; valaddr_reg:x3; val_offset:105543*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105543*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35182:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f7715 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2eaff4 and fs3 == 1 and fe3 == 0x7d and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f7715; op2val:0x802eaff4;
op3val:0xbefff800; valaddr_reg:x3; val_offset:105546*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105546*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35183:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f7715 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2eaff4 and fs3 == 1 and fe3 == 0x7d and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f7715; op2val:0x802eaff4;
op3val:0xbefffc00; valaddr_reg:x3; val_offset:105549*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105549*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35184:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f7715 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2eaff4 and fs3 == 1 and fe3 == 0x7d and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f7715; op2val:0x802eaff4;
op3val:0xbefffe00; valaddr_reg:x3; val_offset:105552*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105552*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35185:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f7715 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2eaff4 and fs3 == 1 and fe3 == 0x7d and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f7715; op2val:0x802eaff4;
op3val:0xbeffff00; valaddr_reg:x3; val_offset:105555*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105555*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35186:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f7715 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2eaff4 and fs3 == 1 and fe3 == 0x7d and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f7715; op2val:0x802eaff4;
op3val:0xbeffff80; valaddr_reg:x3; val_offset:105558*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105558*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35187:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f7715 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2eaff4 and fs3 == 1 and fe3 == 0x7d and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f7715; op2val:0x802eaff4;
op3val:0xbeffffc0; valaddr_reg:x3; val_offset:105561*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105561*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35188:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f7715 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2eaff4 and fs3 == 1 and fe3 == 0x7d and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f7715; op2val:0x802eaff4;
op3val:0xbeffffe0; valaddr_reg:x3; val_offset:105564*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105564*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35189:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f7715 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2eaff4 and fs3 == 1 and fe3 == 0x7d and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f7715; op2val:0x802eaff4;
op3val:0xbefffff0; valaddr_reg:x3; val_offset:105567*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105567*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35190:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f7715 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2eaff4 and fs3 == 1 and fe3 == 0x7d and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f7715; op2val:0x802eaff4;
op3val:0xbefffff8; valaddr_reg:x3; val_offset:105570*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105570*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35191:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f7715 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2eaff4 and fs3 == 1 and fe3 == 0x7d and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f7715; op2val:0x802eaff4;
op3val:0xbefffffc; valaddr_reg:x3; val_offset:105573*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105573*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35192:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f7715 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2eaff4 and fs3 == 1 and fe3 == 0x7d and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f7715; op2val:0x802eaff4;
op3val:0xbefffffe; valaddr_reg:x3; val_offset:105576*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105576*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35193:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f7715 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2eaff4 and fs3 == 1 and fe3 == 0x7d and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f7715; op2val:0x802eaff4;
op3val:0xbeffffff; valaddr_reg:x3; val_offset:105579*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105579*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35194:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f7715 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2eaff4 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f7715; op2val:0x802eaff4;
op3val:0xbf800001; valaddr_reg:x3; val_offset:105582*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105582*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35195:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f7715 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2eaff4 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f7715; op2val:0x802eaff4;
op3val:0xbf800003; valaddr_reg:x3; val_offset:105585*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105585*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35196:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f7715 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2eaff4 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f7715; op2val:0x802eaff4;
op3val:0xbf800007; valaddr_reg:x3; val_offset:105588*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105588*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35197:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f7715 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2eaff4 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f7715; op2val:0x802eaff4;
op3val:0xbf999999; valaddr_reg:x3; val_offset:105591*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105591*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35198:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f7715 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2eaff4 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f7715; op2val:0x802eaff4;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:105594*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105594*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35199:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f7715 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2eaff4 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f7715; op2val:0x802eaff4;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:105597*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105597*0 + 3*274*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2133752850,32,FLEN)
NAN_BOXED(3216755833,32,FLEN)
NAN_BOXED(4278190087,32,FLEN)
NAN_BOXED(2133752850,32,FLEN)
NAN_BOXED(3216755833,32,FLEN)
NAN_BOXED(4279867801,32,FLEN)
NAN_BOXED(2133752850,32,FLEN)
NAN_BOXED(3216755833,32,FLEN)
NAN_BOXED(4280586825,32,FLEN)
NAN_BOXED(2133752850,32,FLEN)
NAN_BOXED(3216755833,32,FLEN)
NAN_BOXED(4281545523,32,FLEN)
NAN_BOXED(2133752850,32,FLEN)
NAN_BOXED(3216755833,32,FLEN)
NAN_BOXED(4281785197,32,FLEN)
NAN_BOXED(2133752850,32,FLEN)
NAN_BOXED(3216755833,32,FLEN)
NAN_BOXED(4282104763,32,FLEN)
NAN_BOXED(2133752850,32,FLEN)
NAN_BOXED(3216755833,32,FLEN)
NAN_BOXED(4282664004,32,FLEN)
NAN_BOXED(2133752850,32,FLEN)
NAN_BOXED(3216755833,32,FLEN)
NAN_BOXED(4283223244,32,FLEN)
NAN_BOXED(2133752850,32,FLEN)
NAN_BOXED(3216755833,32,FLEN)
NAN_BOXED(4284181942,32,FLEN)
NAN_BOXED(2133752850,32,FLEN)
NAN_BOXED(3216755833,32,FLEN)
NAN_BOXED(4284900966,32,FLEN)
NAN_BOXED(2133752850,32,FLEN)
NAN_BOXED(3216755833,32,FLEN)
NAN_BOXED(4285380315,32,FLEN)
NAN_BOXED(2133752850,32,FLEN)
NAN_BOXED(3216755833,32,FLEN)
NAN_BOXED(4286578680,32,FLEN)
NAN_BOXED(2133752850,32,FLEN)
NAN_BOXED(3216755833,32,FLEN)
NAN_BOXED(4286578684,32,FLEN)
NAN_BOXED(2133752850,32,FLEN)
NAN_BOXED(3216755833,32,FLEN)
NAN_BOXED(4286578686,32,FLEN)
NAN_BOXED(2133790712,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(2133790712,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388611,32,FLEN)
NAN_BOXED(2133790712,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388615,32,FLEN)
NAN_BOXED(2133790712,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(10066329,32,FLEN)
NAN_BOXED(2133790712,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(10785353,32,FLEN)
NAN_BOXED(2133790712,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(11744051,32,FLEN)
NAN_BOXED(2133790712,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(11983725,32,FLEN)
NAN_BOXED(2133790712,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(12303291,32,FLEN)
NAN_BOXED(2133790712,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(12862532,32,FLEN)
NAN_BOXED(2133790712,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(13421772,32,FLEN)
NAN_BOXED(2133790712,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(14380470,32,FLEN)
NAN_BOXED(2133790712,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(15099494,32,FLEN)
NAN_BOXED(2133790712,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(15578843,32,FLEN)
NAN_BOXED(2133790712,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777208,32,FLEN)
NAN_BOXED(2133790712,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777212,32,FLEN)
NAN_BOXED(2133790712,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777214,32,FLEN)
NAN_BOXED(2133790712,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(276824064,32,FLEN)
NAN_BOXED(2133790712,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(276824065,32,FLEN)
NAN_BOXED(2133790712,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(276824067,32,FLEN)
NAN_BOXED(2133790712,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(276824071,32,FLEN)
NAN_BOXED(2133790712,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(276824079,32,FLEN)
NAN_BOXED(2133790712,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(276824095,32,FLEN)
NAN_BOXED(2133790712,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(276824127,32,FLEN)
NAN_BOXED(2133790712,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(276824191,32,FLEN)
NAN_BOXED(2133790712,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(276824319,32,FLEN)
NAN_BOXED(2133790712,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(276824575,32,FLEN)
NAN_BOXED(2133790712,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(276825087,32,FLEN)
NAN_BOXED(2133790712,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(276826111,32,FLEN)
NAN_BOXED(2133790712,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(276828159,32,FLEN)
NAN_BOXED(2133790712,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(276832255,32,FLEN)
NAN_BOXED(2133790712,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(276840447,32,FLEN)
NAN_BOXED(2133790712,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(276856831,32,FLEN)
NAN_BOXED(2133790712,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(276889599,32,FLEN)
NAN_BOXED(2133790712,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(276955135,32,FLEN)
NAN_BOXED(2133790712,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(277086207,32,FLEN)
NAN_BOXED(2133790712,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(277348351,32,FLEN)
NAN_BOXED(2133790712,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(277872639,32,FLEN)
NAN_BOXED(2133790712,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(278921215,32,FLEN)
NAN_BOXED(2133790712,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(281018367,32,FLEN)
NAN_BOXED(2133790712,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(281018368,32,FLEN)
NAN_BOXED(2133790712,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(283115520,32,FLEN)
NAN_BOXED(2133790712,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(284164096,32,FLEN)
NAN_BOXED(2133790712,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(284688384,32,FLEN)
NAN_BOXED(2133790712,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(284950528,32,FLEN)
NAN_BOXED(2133790712,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(285081600,32,FLEN)
NAN_BOXED(2133790712,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(285147136,32,FLEN)
NAN_BOXED(2133790712,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(285179904,32,FLEN)
NAN_BOXED(2133790712,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(285196288,32,FLEN)
NAN_BOXED(2133790712,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(285204480,32,FLEN)
NAN_BOXED(2133790712,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(285208576,32,FLEN)
NAN_BOXED(2133790712,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(285210624,32,FLEN)
NAN_BOXED(2133790712,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(285211648,32,FLEN)
NAN_BOXED(2133790712,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(285212160,32,FLEN)
NAN_BOXED(2133790712,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(285212416,32,FLEN)
NAN_BOXED(2133790712,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(285212544,32,FLEN)
NAN_BOXED(2133790712,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(285212608,32,FLEN)
NAN_BOXED(2133790712,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(285212640,32,FLEN)
NAN_BOXED(2133790712,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(285212656,32,FLEN)
NAN_BOXED(2133790712,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(285212664,32,FLEN)
NAN_BOXED(2133790712,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(285212668,32,FLEN)
NAN_BOXED(2133790712,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(285212670,32,FLEN)
NAN_BOXED(2133790712,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(285212671,32,FLEN)
NAN_BOXED(2133817109,32,FLEN)
NAN_BOXED(2150543348,32,FLEN)
NAN_BOXED(3196059648,32,FLEN)
NAN_BOXED(2133817109,32,FLEN)
NAN_BOXED(2150543348,32,FLEN)
NAN_BOXED(3196059649,32,FLEN)
NAN_BOXED(2133817109,32,FLEN)
NAN_BOXED(2150543348,32,FLEN)
NAN_BOXED(3196059651,32,FLEN)
NAN_BOXED(2133817109,32,FLEN)
NAN_BOXED(2150543348,32,FLEN)
NAN_BOXED(3196059655,32,FLEN)
NAN_BOXED(2133817109,32,FLEN)
NAN_BOXED(2150543348,32,FLEN)
NAN_BOXED(3196059663,32,FLEN)
NAN_BOXED(2133817109,32,FLEN)
NAN_BOXED(2150543348,32,FLEN)
NAN_BOXED(3196059679,32,FLEN)
NAN_BOXED(2133817109,32,FLEN)
NAN_BOXED(2150543348,32,FLEN)
NAN_BOXED(3196059711,32,FLEN)
NAN_BOXED(2133817109,32,FLEN)
NAN_BOXED(2150543348,32,FLEN)
NAN_BOXED(3196059775,32,FLEN)
NAN_BOXED(2133817109,32,FLEN)
NAN_BOXED(2150543348,32,FLEN)
NAN_BOXED(3196059903,32,FLEN)
NAN_BOXED(2133817109,32,FLEN)
NAN_BOXED(2150543348,32,FLEN)
NAN_BOXED(3196060159,32,FLEN)
NAN_BOXED(2133817109,32,FLEN)
NAN_BOXED(2150543348,32,FLEN)
NAN_BOXED(3196060671,32,FLEN)
NAN_BOXED(2133817109,32,FLEN)
NAN_BOXED(2150543348,32,FLEN)
NAN_BOXED(3196061695,32,FLEN)
NAN_BOXED(2133817109,32,FLEN)
NAN_BOXED(2150543348,32,FLEN)
NAN_BOXED(3196063743,32,FLEN)
NAN_BOXED(2133817109,32,FLEN)
NAN_BOXED(2150543348,32,FLEN)
NAN_BOXED(3196067839,32,FLEN)
NAN_BOXED(2133817109,32,FLEN)
NAN_BOXED(2150543348,32,FLEN)
NAN_BOXED(3196076031,32,FLEN)
NAN_BOXED(2133817109,32,FLEN)
NAN_BOXED(2150543348,32,FLEN)
NAN_BOXED(3196092415,32,FLEN)
NAN_BOXED(2133817109,32,FLEN)
NAN_BOXED(2150543348,32,FLEN)
NAN_BOXED(3196125183,32,FLEN)
NAN_BOXED(2133817109,32,FLEN)
NAN_BOXED(2150543348,32,FLEN)
NAN_BOXED(3196190719,32,FLEN)
NAN_BOXED(2133817109,32,FLEN)
NAN_BOXED(2150543348,32,FLEN)
NAN_BOXED(3196321791,32,FLEN)
NAN_BOXED(2133817109,32,FLEN)
NAN_BOXED(2150543348,32,FLEN)
NAN_BOXED(3196583935,32,FLEN)
NAN_BOXED(2133817109,32,FLEN)
NAN_BOXED(2150543348,32,FLEN)
NAN_BOXED(3197108223,32,FLEN)
NAN_BOXED(2133817109,32,FLEN)
NAN_BOXED(2150543348,32,FLEN)
NAN_BOXED(3198156799,32,FLEN)
NAN_BOXED(2133817109,32,FLEN)
NAN_BOXED(2150543348,32,FLEN)
NAN_BOXED(3200253951,32,FLEN)
NAN_BOXED(2133817109,32,FLEN)
NAN_BOXED(2150543348,32,FLEN)
NAN_BOXED(3200253952,32,FLEN)
NAN_BOXED(2133817109,32,FLEN)
NAN_BOXED(2150543348,32,FLEN)
NAN_BOXED(3202351104,32,FLEN)
NAN_BOXED(2133817109,32,FLEN)
NAN_BOXED(2150543348,32,FLEN)
NAN_BOXED(3203399680,32,FLEN)
NAN_BOXED(2133817109,32,FLEN)
NAN_BOXED(2150543348,32,FLEN)
NAN_BOXED(3203923968,32,FLEN)
NAN_BOXED(2133817109,32,FLEN)
NAN_BOXED(2150543348,32,FLEN)
NAN_BOXED(3204186112,32,FLEN)
NAN_BOXED(2133817109,32,FLEN)
NAN_BOXED(2150543348,32,FLEN)
NAN_BOXED(3204317184,32,FLEN)
NAN_BOXED(2133817109,32,FLEN)
NAN_BOXED(2150543348,32,FLEN)
NAN_BOXED(3204382720,32,FLEN)
NAN_BOXED(2133817109,32,FLEN)
NAN_BOXED(2150543348,32,FLEN)
NAN_BOXED(3204415488,32,FLEN)
NAN_BOXED(2133817109,32,FLEN)
NAN_BOXED(2150543348,32,FLEN)
NAN_BOXED(3204431872,32,FLEN)
NAN_BOXED(2133817109,32,FLEN)
NAN_BOXED(2150543348,32,FLEN)
NAN_BOXED(3204440064,32,FLEN)
NAN_BOXED(2133817109,32,FLEN)
NAN_BOXED(2150543348,32,FLEN)
NAN_BOXED(3204444160,32,FLEN)
NAN_BOXED(2133817109,32,FLEN)
NAN_BOXED(2150543348,32,FLEN)
NAN_BOXED(3204446208,32,FLEN)
NAN_BOXED(2133817109,32,FLEN)
NAN_BOXED(2150543348,32,FLEN)
NAN_BOXED(3204447232,32,FLEN)
NAN_BOXED(2133817109,32,FLEN)
NAN_BOXED(2150543348,32,FLEN)
NAN_BOXED(3204447744,32,FLEN)
NAN_BOXED(2133817109,32,FLEN)
NAN_BOXED(2150543348,32,FLEN)
NAN_BOXED(3204448000,32,FLEN)
NAN_BOXED(2133817109,32,FLEN)
NAN_BOXED(2150543348,32,FLEN)
NAN_BOXED(3204448128,32,FLEN)
NAN_BOXED(2133817109,32,FLEN)
NAN_BOXED(2150543348,32,FLEN)
NAN_BOXED(3204448192,32,FLEN)
NAN_BOXED(2133817109,32,FLEN)
NAN_BOXED(2150543348,32,FLEN)
NAN_BOXED(3204448224,32,FLEN)
NAN_BOXED(2133817109,32,FLEN)
NAN_BOXED(2150543348,32,FLEN)
NAN_BOXED(3204448240,32,FLEN)
NAN_BOXED(2133817109,32,FLEN)
NAN_BOXED(2150543348,32,FLEN)
NAN_BOXED(3204448248,32,FLEN)
NAN_BOXED(2133817109,32,FLEN)
NAN_BOXED(2150543348,32,FLEN)
NAN_BOXED(3204448252,32,FLEN)
NAN_BOXED(2133817109,32,FLEN)
NAN_BOXED(2150543348,32,FLEN)
NAN_BOXED(3204448254,32,FLEN)
NAN_BOXED(2133817109,32,FLEN)
NAN_BOXED(2150543348,32,FLEN)
NAN_BOXED(3204448255,32,FLEN)
NAN_BOXED(2133817109,32,FLEN)
NAN_BOXED(2150543348,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2133817109,32,FLEN)
NAN_BOXED(2150543348,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2133817109,32,FLEN)
NAN_BOXED(2150543348,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
NAN_BOXED(2133817109,32,FLEN)
NAN_BOXED(2150543348,32,FLEN)
NAN_BOXED(3214514585,32,FLEN)
NAN_BOXED(2133817109,32,FLEN)
NAN_BOXED(2150543348,32,FLEN)
NAN_BOXED(3215233609,32,FLEN)
NAN_BOXED(2133817109,32,FLEN)
NAN_BOXED(2150543348,32,FLEN)
NAN_BOXED(3216192307,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
