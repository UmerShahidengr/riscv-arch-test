
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:17:59 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_35584:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30a2c2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3982fc and fs3 == 1 and fe3 == 0xf8 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30a2c2; op2val:0xbfb982fc;
op3val:0xfc000003; valaddr_reg:x3; val_offset:106752*0 + 3*278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106752*0 + 3*278*FLEN/8, x4, x1, x2)

inst_35585:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30a2c2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3982fc and fs3 == 1 and fe3 == 0xf8 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30a2c2; op2val:0xbfb982fc;
op3val:0xfc000007; valaddr_reg:x3; val_offset:106755*0 + 3*278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106755*0 + 3*278*FLEN/8, x4, x1, x2)

inst_35586:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30a2c2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3982fc and fs3 == 1 and fe3 == 0xf8 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30a2c2; op2val:0xbfb982fc;
op3val:0xfc00000f; valaddr_reg:x3; val_offset:106758*0 + 3*278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106758*0 + 3*278*FLEN/8, x4, x1, x2)

inst_35587:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30a2c2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3982fc and fs3 == 1 and fe3 == 0xf8 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30a2c2; op2val:0xbfb982fc;
op3val:0xfc00001f; valaddr_reg:x3; val_offset:106761*0 + 3*278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106761*0 + 3*278*FLEN/8, x4, x1, x2)

inst_35588:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30a2c2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3982fc and fs3 == 1 and fe3 == 0xf8 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30a2c2; op2val:0xbfb982fc;
op3val:0xfc00003f; valaddr_reg:x3; val_offset:106764*0 + 3*278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106764*0 + 3*278*FLEN/8, x4, x1, x2)

inst_35589:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30a2c2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3982fc and fs3 == 1 and fe3 == 0xf8 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30a2c2; op2val:0xbfb982fc;
op3val:0xfc00007f; valaddr_reg:x3; val_offset:106767*0 + 3*278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106767*0 + 3*278*FLEN/8, x4, x1, x2)

inst_35590:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30a2c2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3982fc and fs3 == 1 and fe3 == 0xf8 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30a2c2; op2val:0xbfb982fc;
op3val:0xfc0000ff; valaddr_reg:x3; val_offset:106770*0 + 3*278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106770*0 + 3*278*FLEN/8, x4, x1, x2)

inst_35591:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30a2c2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3982fc and fs3 == 1 and fe3 == 0xf8 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30a2c2; op2val:0xbfb982fc;
op3val:0xfc0001ff; valaddr_reg:x3; val_offset:106773*0 + 3*278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106773*0 + 3*278*FLEN/8, x4, x1, x2)

inst_35592:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30a2c2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3982fc and fs3 == 1 and fe3 == 0xf8 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30a2c2; op2val:0xbfb982fc;
op3val:0xfc0003ff; valaddr_reg:x3; val_offset:106776*0 + 3*278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106776*0 + 3*278*FLEN/8, x4, x1, x2)

inst_35593:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30a2c2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3982fc and fs3 == 1 and fe3 == 0xf8 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30a2c2; op2val:0xbfb982fc;
op3val:0xfc0007ff; valaddr_reg:x3; val_offset:106779*0 + 3*278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106779*0 + 3*278*FLEN/8, x4, x1, x2)

inst_35594:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30a2c2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3982fc and fs3 == 1 and fe3 == 0xf8 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30a2c2; op2val:0xbfb982fc;
op3val:0xfc000fff; valaddr_reg:x3; val_offset:106782*0 + 3*278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106782*0 + 3*278*FLEN/8, x4, x1, x2)

inst_35595:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30a2c2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3982fc and fs3 == 1 and fe3 == 0xf8 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30a2c2; op2val:0xbfb982fc;
op3val:0xfc001fff; valaddr_reg:x3; val_offset:106785*0 + 3*278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106785*0 + 3*278*FLEN/8, x4, x1, x2)

inst_35596:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30a2c2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3982fc and fs3 == 1 and fe3 == 0xf8 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30a2c2; op2val:0xbfb982fc;
op3val:0xfc003fff; valaddr_reg:x3; val_offset:106788*0 + 3*278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106788*0 + 3*278*FLEN/8, x4, x1, x2)

inst_35597:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30a2c2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3982fc and fs3 == 1 and fe3 == 0xf8 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30a2c2; op2val:0xbfb982fc;
op3val:0xfc007fff; valaddr_reg:x3; val_offset:106791*0 + 3*278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106791*0 + 3*278*FLEN/8, x4, x1, x2)

inst_35598:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30a2c2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3982fc and fs3 == 1 and fe3 == 0xf8 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30a2c2; op2val:0xbfb982fc;
op3val:0xfc00ffff; valaddr_reg:x3; val_offset:106794*0 + 3*278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106794*0 + 3*278*FLEN/8, x4, x1, x2)

inst_35599:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30a2c2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3982fc and fs3 == 1 and fe3 == 0xf8 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30a2c2; op2val:0xbfb982fc;
op3val:0xfc01ffff; valaddr_reg:x3; val_offset:106797*0 + 3*278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106797*0 + 3*278*FLEN/8, x4, x1, x2)

inst_35600:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30a2c2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3982fc and fs3 == 1 and fe3 == 0xf8 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30a2c2; op2val:0xbfb982fc;
op3val:0xfc03ffff; valaddr_reg:x3; val_offset:106800*0 + 3*278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106800*0 + 3*278*FLEN/8, x4, x1, x2)

inst_35601:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30a2c2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3982fc and fs3 == 1 and fe3 == 0xf8 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30a2c2; op2val:0xbfb982fc;
op3val:0xfc07ffff; valaddr_reg:x3; val_offset:106803*0 + 3*278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106803*0 + 3*278*FLEN/8, x4, x1, x2)

inst_35602:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30a2c2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3982fc and fs3 == 1 and fe3 == 0xf8 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30a2c2; op2val:0xbfb982fc;
op3val:0xfc0fffff; valaddr_reg:x3; val_offset:106806*0 + 3*278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106806*0 + 3*278*FLEN/8, x4, x1, x2)

inst_35603:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30a2c2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3982fc and fs3 == 1 and fe3 == 0xf8 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30a2c2; op2val:0xbfb982fc;
op3val:0xfc1fffff; valaddr_reg:x3; val_offset:106809*0 + 3*278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106809*0 + 3*278*FLEN/8, x4, x1, x2)

inst_35604:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30a2c2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3982fc and fs3 == 1 and fe3 == 0xf8 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30a2c2; op2val:0xbfb982fc;
op3val:0xfc3fffff; valaddr_reg:x3; val_offset:106812*0 + 3*278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106812*0 + 3*278*FLEN/8, x4, x1, x2)

inst_35605:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30a2c2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3982fc and fs3 == 1 and fe3 == 0xf8 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30a2c2; op2val:0xbfb982fc;
op3val:0xfc400000; valaddr_reg:x3; val_offset:106815*0 + 3*278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106815*0 + 3*278*FLEN/8, x4, x1, x2)

inst_35606:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30a2c2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3982fc and fs3 == 1 and fe3 == 0xf8 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30a2c2; op2val:0xbfb982fc;
op3val:0xfc600000; valaddr_reg:x3; val_offset:106818*0 + 3*278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106818*0 + 3*278*FLEN/8, x4, x1, x2)

inst_35607:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30a2c2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3982fc and fs3 == 1 and fe3 == 0xf8 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30a2c2; op2val:0xbfb982fc;
op3val:0xfc700000; valaddr_reg:x3; val_offset:106821*0 + 3*278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106821*0 + 3*278*FLEN/8, x4, x1, x2)

inst_35608:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30a2c2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3982fc and fs3 == 1 and fe3 == 0xf8 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30a2c2; op2val:0xbfb982fc;
op3val:0xfc780000; valaddr_reg:x3; val_offset:106824*0 + 3*278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106824*0 + 3*278*FLEN/8, x4, x1, x2)

inst_35609:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30a2c2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3982fc and fs3 == 1 and fe3 == 0xf8 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30a2c2; op2val:0xbfb982fc;
op3val:0xfc7c0000; valaddr_reg:x3; val_offset:106827*0 + 3*278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106827*0 + 3*278*FLEN/8, x4, x1, x2)

inst_35610:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30a2c2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3982fc and fs3 == 1 and fe3 == 0xf8 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30a2c2; op2val:0xbfb982fc;
op3val:0xfc7e0000; valaddr_reg:x3; val_offset:106830*0 + 3*278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106830*0 + 3*278*FLEN/8, x4, x1, x2)

inst_35611:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30a2c2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3982fc and fs3 == 1 and fe3 == 0xf8 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30a2c2; op2val:0xbfb982fc;
op3val:0xfc7f0000; valaddr_reg:x3; val_offset:106833*0 + 3*278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106833*0 + 3*278*FLEN/8, x4, x1, x2)

inst_35612:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30a2c2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3982fc and fs3 == 1 and fe3 == 0xf8 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30a2c2; op2val:0xbfb982fc;
op3val:0xfc7f8000; valaddr_reg:x3; val_offset:106836*0 + 3*278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106836*0 + 3*278*FLEN/8, x4, x1, x2)

inst_35613:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30a2c2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3982fc and fs3 == 1 and fe3 == 0xf8 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30a2c2; op2val:0xbfb982fc;
op3val:0xfc7fc000; valaddr_reg:x3; val_offset:106839*0 + 3*278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106839*0 + 3*278*FLEN/8, x4, x1, x2)

inst_35614:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30a2c2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3982fc and fs3 == 1 and fe3 == 0xf8 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30a2c2; op2val:0xbfb982fc;
op3val:0xfc7fe000; valaddr_reg:x3; val_offset:106842*0 + 3*278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106842*0 + 3*278*FLEN/8, x4, x1, x2)

inst_35615:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30a2c2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3982fc and fs3 == 1 and fe3 == 0xf8 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30a2c2; op2val:0xbfb982fc;
op3val:0xfc7ff000; valaddr_reg:x3; val_offset:106845*0 + 3*278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106845*0 + 3*278*FLEN/8, x4, x1, x2)

inst_35616:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30a2c2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3982fc and fs3 == 1 and fe3 == 0xf8 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30a2c2; op2val:0xbfb982fc;
op3val:0xfc7ff800; valaddr_reg:x3; val_offset:106848*0 + 3*278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106848*0 + 3*278*FLEN/8, x4, x1, x2)

inst_35617:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30a2c2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3982fc and fs3 == 1 and fe3 == 0xf8 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30a2c2; op2val:0xbfb982fc;
op3val:0xfc7ffc00; valaddr_reg:x3; val_offset:106851*0 + 3*278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106851*0 + 3*278*FLEN/8, x4, x1, x2)

inst_35618:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30a2c2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3982fc and fs3 == 1 and fe3 == 0xf8 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30a2c2; op2val:0xbfb982fc;
op3val:0xfc7ffe00; valaddr_reg:x3; val_offset:106854*0 + 3*278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106854*0 + 3*278*FLEN/8, x4, x1, x2)

inst_35619:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30a2c2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3982fc and fs3 == 1 and fe3 == 0xf8 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30a2c2; op2val:0xbfb982fc;
op3val:0xfc7fff00; valaddr_reg:x3; val_offset:106857*0 + 3*278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106857*0 + 3*278*FLEN/8, x4, x1, x2)

inst_35620:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30a2c2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3982fc and fs3 == 1 and fe3 == 0xf8 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30a2c2; op2val:0xbfb982fc;
op3val:0xfc7fff80; valaddr_reg:x3; val_offset:106860*0 + 3*278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106860*0 + 3*278*FLEN/8, x4, x1, x2)

inst_35621:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30a2c2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3982fc and fs3 == 1 and fe3 == 0xf8 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30a2c2; op2val:0xbfb982fc;
op3val:0xfc7fffc0; valaddr_reg:x3; val_offset:106863*0 + 3*278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106863*0 + 3*278*FLEN/8, x4, x1, x2)

inst_35622:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30a2c2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3982fc and fs3 == 1 and fe3 == 0xf8 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30a2c2; op2val:0xbfb982fc;
op3val:0xfc7fffe0; valaddr_reg:x3; val_offset:106866*0 + 3*278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106866*0 + 3*278*FLEN/8, x4, x1, x2)

inst_35623:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30a2c2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3982fc and fs3 == 1 and fe3 == 0xf8 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30a2c2; op2val:0xbfb982fc;
op3val:0xfc7ffff0; valaddr_reg:x3; val_offset:106869*0 + 3*278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106869*0 + 3*278*FLEN/8, x4, x1, x2)

inst_35624:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30a2c2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3982fc and fs3 == 1 and fe3 == 0xf8 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30a2c2; op2val:0xbfb982fc;
op3val:0xfc7ffff8; valaddr_reg:x3; val_offset:106872*0 + 3*278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106872*0 + 3*278*FLEN/8, x4, x1, x2)

inst_35625:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30a2c2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3982fc and fs3 == 1 and fe3 == 0xf8 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30a2c2; op2val:0xbfb982fc;
op3val:0xfc7ffffc; valaddr_reg:x3; val_offset:106875*0 + 3*278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106875*0 + 3*278*FLEN/8, x4, x1, x2)

inst_35626:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30a2c2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3982fc and fs3 == 1 and fe3 == 0xf8 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30a2c2; op2val:0xbfb982fc;
op3val:0xfc7ffffe; valaddr_reg:x3; val_offset:106878*0 + 3*278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106878*0 + 3*278*FLEN/8, x4, x1, x2)

inst_35627:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30a2c2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3982fc and fs3 == 1 and fe3 == 0xf8 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30a2c2; op2val:0xbfb982fc;
op3val:0xfc7fffff; valaddr_reg:x3; val_offset:106881*0 + 3*278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106881*0 + 3*278*FLEN/8, x4, x1, x2)

inst_35628:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30a2c2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3982fc and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30a2c2; op2val:0xbfb982fc;
op3val:0xff000001; valaddr_reg:x3; val_offset:106884*0 + 3*278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106884*0 + 3*278*FLEN/8, x4, x1, x2)

inst_35629:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30a2c2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3982fc and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30a2c2; op2val:0xbfb982fc;
op3val:0xff000003; valaddr_reg:x3; val_offset:106887*0 + 3*278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106887*0 + 3*278*FLEN/8, x4, x1, x2)

inst_35630:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30a2c2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3982fc and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30a2c2; op2val:0xbfb982fc;
op3val:0xff000007; valaddr_reg:x3; val_offset:106890*0 + 3*278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106890*0 + 3*278*FLEN/8, x4, x1, x2)

inst_35631:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30a2c2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3982fc and fs3 == 1 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30a2c2; op2val:0xbfb982fc;
op3val:0xff199999; valaddr_reg:x3; val_offset:106893*0 + 3*278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106893*0 + 3*278*FLEN/8, x4, x1, x2)

inst_35632:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30a2c2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3982fc and fs3 == 1 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30a2c2; op2val:0xbfb982fc;
op3val:0xff249249; valaddr_reg:x3; val_offset:106896*0 + 3*278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106896*0 + 3*278*FLEN/8, x4, x1, x2)

inst_35633:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30a2c2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3982fc and fs3 == 1 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30a2c2; op2val:0xbfb982fc;
op3val:0xff333333; valaddr_reg:x3; val_offset:106899*0 + 3*278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106899*0 + 3*278*FLEN/8, x4, x1, x2)

inst_35634:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30a2c2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3982fc and fs3 == 1 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30a2c2; op2val:0xbfb982fc;
op3val:0xff36db6d; valaddr_reg:x3; val_offset:106902*0 + 3*278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106902*0 + 3*278*FLEN/8, x4, x1, x2)

inst_35635:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30a2c2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3982fc and fs3 == 1 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30a2c2; op2val:0xbfb982fc;
op3val:0xff3bbbbb; valaddr_reg:x3; val_offset:106905*0 + 3*278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106905*0 + 3*278*FLEN/8, x4, x1, x2)

inst_35636:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30a2c2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3982fc and fs3 == 1 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30a2c2; op2val:0xbfb982fc;
op3val:0xff444444; valaddr_reg:x3; val_offset:106908*0 + 3*278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106908*0 + 3*278*FLEN/8, x4, x1, x2)

inst_35637:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30a2c2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3982fc and fs3 == 1 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30a2c2; op2val:0xbfb982fc;
op3val:0xff4ccccc; valaddr_reg:x3; val_offset:106911*0 + 3*278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106911*0 + 3*278*FLEN/8, x4, x1, x2)

inst_35638:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30a2c2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3982fc and fs3 == 1 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30a2c2; op2val:0xbfb982fc;
op3val:0xff5b6db6; valaddr_reg:x3; val_offset:106914*0 + 3*278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106914*0 + 3*278*FLEN/8, x4, x1, x2)

inst_35639:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30a2c2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3982fc and fs3 == 1 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30a2c2; op2val:0xbfb982fc;
op3val:0xff666666; valaddr_reg:x3; val_offset:106917*0 + 3*278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106917*0 + 3*278*FLEN/8, x4, x1, x2)

inst_35640:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30a2c2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3982fc and fs3 == 1 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30a2c2; op2val:0xbfb982fc;
op3val:0xff6db6db; valaddr_reg:x3; val_offset:106920*0 + 3*278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106920*0 + 3*278*FLEN/8, x4, x1, x2)

inst_35641:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30a2c2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3982fc and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30a2c2; op2val:0xbfb982fc;
op3val:0xff7ffff8; valaddr_reg:x3; val_offset:106923*0 + 3*278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106923*0 + 3*278*FLEN/8, x4, x1, x2)

inst_35642:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30a2c2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3982fc and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30a2c2; op2val:0xbfb982fc;
op3val:0xff7ffffc; valaddr_reg:x3; val_offset:106926*0 + 3*278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106926*0 + 3*278*FLEN/8, x4, x1, x2)

inst_35643:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30a2c2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3982fc and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30a2c2; op2val:0xbfb982fc;
op3val:0xff7ffffe; valaddr_reg:x3; val_offset:106929*0 + 3*278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106929*0 + 3*278*FLEN/8, x4, x1, x2)

inst_35644:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30ab57 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30ab57; op2val:0x80000000;
op3val:0x80000001; valaddr_reg:x3; val_offset:106932*0 + 3*278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106932*0 + 3*278*FLEN/8, x4, x1, x2)

inst_35645:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30ab57 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30ab57; op2val:0x80000000;
op3val:0x80000003; valaddr_reg:x3; val_offset:106935*0 + 3*278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106935*0 + 3*278*FLEN/8, x4, x1, x2)

inst_35646:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30ab57 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30ab57; op2val:0x80000000;
op3val:0x80000007; valaddr_reg:x3; val_offset:106938*0 + 3*278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106938*0 + 3*278*FLEN/8, x4, x1, x2)

inst_35647:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30ab57 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30ab57; op2val:0x80000000;
op3val:0x80199999; valaddr_reg:x3; val_offset:106941*0 + 3*278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106941*0 + 3*278*FLEN/8, x4, x1, x2)

inst_35648:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30ab57 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30ab57; op2val:0x80000000;
op3val:0x80249249; valaddr_reg:x3; val_offset:106944*0 + 3*278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106944*0 + 3*278*FLEN/8, x4, x1, x2)

inst_35649:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30ab57 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30ab57; op2val:0x80000000;
op3val:0x80333333; valaddr_reg:x3; val_offset:106947*0 + 3*278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106947*0 + 3*278*FLEN/8, x4, x1, x2)

inst_35650:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30ab57 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30ab57; op2val:0x80000000;
op3val:0x8036db6d; valaddr_reg:x3; val_offset:106950*0 + 3*278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106950*0 + 3*278*FLEN/8, x4, x1, x2)

inst_35651:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30ab57 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30ab57; op2val:0x80000000;
op3val:0x803bbbbb; valaddr_reg:x3; val_offset:106953*0 + 3*278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106953*0 + 3*278*FLEN/8, x4, x1, x2)

inst_35652:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30ab57 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30ab57; op2val:0x80000000;
op3val:0x80444444; valaddr_reg:x3; val_offset:106956*0 + 3*278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106956*0 + 3*278*FLEN/8, x4, x1, x2)

inst_35653:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30ab57 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30ab57; op2val:0x80000000;
op3val:0x804ccccc; valaddr_reg:x3; val_offset:106959*0 + 3*278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106959*0 + 3*278*FLEN/8, x4, x1, x2)

inst_35654:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30ab57 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30ab57; op2val:0x80000000;
op3val:0x805b6db6; valaddr_reg:x3; val_offset:106962*0 + 3*278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106962*0 + 3*278*FLEN/8, x4, x1, x2)

inst_35655:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30ab57 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30ab57; op2val:0x80000000;
op3val:0x80666666; valaddr_reg:x3; val_offset:106965*0 + 3*278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106965*0 + 3*278*FLEN/8, x4, x1, x2)

inst_35656:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30ab57 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30ab57; op2val:0x80000000;
op3val:0x806db6db; valaddr_reg:x3; val_offset:106968*0 + 3*278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106968*0 + 3*278*FLEN/8, x4, x1, x2)

inst_35657:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30ab57 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30ab57; op2val:0x80000000;
op3val:0x807ffff8; valaddr_reg:x3; val_offset:106971*0 + 3*278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106971*0 + 3*278*FLEN/8, x4, x1, x2)

inst_35658:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30ab57 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30ab57; op2val:0x80000000;
op3val:0x807ffffc; valaddr_reg:x3; val_offset:106974*0 + 3*278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106974*0 + 3*278*FLEN/8, x4, x1, x2)

inst_35659:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30ab57 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30ab57; op2val:0x80000000;
op3val:0x807ffffe; valaddr_reg:x3; val_offset:106977*0 + 3*278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106977*0 + 3*278*FLEN/8, x4, x1, x2)

inst_35660:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30ab57 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30ab57; op2val:0x80000000;
op3val:0x81000000; valaddr_reg:x3; val_offset:106980*0 + 3*278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106980*0 + 3*278*FLEN/8, x4, x1, x2)

inst_35661:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30ab57 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30ab57; op2val:0x80000000;
op3val:0x81000001; valaddr_reg:x3; val_offset:106983*0 + 3*278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106983*0 + 3*278*FLEN/8, x4, x1, x2)

inst_35662:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30ab57 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30ab57; op2val:0x80000000;
op3val:0x81000003; valaddr_reg:x3; val_offset:106986*0 + 3*278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106986*0 + 3*278*FLEN/8, x4, x1, x2)

inst_35663:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30ab57 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30ab57; op2val:0x80000000;
op3val:0x81000007; valaddr_reg:x3; val_offset:106989*0 + 3*278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106989*0 + 3*278*FLEN/8, x4, x1, x2)

inst_35664:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30ab57 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30ab57; op2val:0x80000000;
op3val:0x8100000f; valaddr_reg:x3; val_offset:106992*0 + 3*278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106992*0 + 3*278*FLEN/8, x4, x1, x2)

inst_35665:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30ab57 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30ab57; op2val:0x80000000;
op3val:0x8100001f; valaddr_reg:x3; val_offset:106995*0 + 3*278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106995*0 + 3*278*FLEN/8, x4, x1, x2)

inst_35666:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30ab57 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30ab57; op2val:0x80000000;
op3val:0x8100003f; valaddr_reg:x3; val_offset:106998*0 + 3*278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106998*0 + 3*278*FLEN/8, x4, x1, x2)

inst_35667:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30ab57 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30ab57; op2val:0x80000000;
op3val:0x8100007f; valaddr_reg:x3; val_offset:107001*0 + 3*278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107001*0 + 3*278*FLEN/8, x4, x1, x2)

inst_35668:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30ab57 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30ab57; op2val:0x80000000;
op3val:0x810000ff; valaddr_reg:x3; val_offset:107004*0 + 3*278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107004*0 + 3*278*FLEN/8, x4, x1, x2)

inst_35669:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30ab57 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30ab57; op2val:0x80000000;
op3val:0x810001ff; valaddr_reg:x3; val_offset:107007*0 + 3*278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107007*0 + 3*278*FLEN/8, x4, x1, x2)

inst_35670:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30ab57 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30ab57; op2val:0x80000000;
op3val:0x810003ff; valaddr_reg:x3; val_offset:107010*0 + 3*278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107010*0 + 3*278*FLEN/8, x4, x1, x2)

inst_35671:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30ab57 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30ab57; op2val:0x80000000;
op3val:0x810007ff; valaddr_reg:x3; val_offset:107013*0 + 3*278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107013*0 + 3*278*FLEN/8, x4, x1, x2)

inst_35672:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30ab57 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30ab57; op2val:0x80000000;
op3val:0x81000fff; valaddr_reg:x3; val_offset:107016*0 + 3*278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107016*0 + 3*278*FLEN/8, x4, x1, x2)

inst_35673:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30ab57 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30ab57; op2val:0x80000000;
op3val:0x81001fff; valaddr_reg:x3; val_offset:107019*0 + 3*278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107019*0 + 3*278*FLEN/8, x4, x1, x2)

inst_35674:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30ab57 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30ab57; op2val:0x80000000;
op3val:0x81003fff; valaddr_reg:x3; val_offset:107022*0 + 3*278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107022*0 + 3*278*FLEN/8, x4, x1, x2)

inst_35675:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30ab57 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30ab57; op2val:0x80000000;
op3val:0x81007fff; valaddr_reg:x3; val_offset:107025*0 + 3*278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107025*0 + 3*278*FLEN/8, x4, x1, x2)

inst_35676:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30ab57 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30ab57; op2val:0x80000000;
op3val:0x8100ffff; valaddr_reg:x3; val_offset:107028*0 + 3*278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107028*0 + 3*278*FLEN/8, x4, x1, x2)

inst_35677:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30ab57 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30ab57; op2val:0x80000000;
op3val:0x8101ffff; valaddr_reg:x3; val_offset:107031*0 + 3*278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107031*0 + 3*278*FLEN/8, x4, x1, x2)

inst_35678:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30ab57 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30ab57; op2val:0x80000000;
op3val:0x8103ffff; valaddr_reg:x3; val_offset:107034*0 + 3*278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107034*0 + 3*278*FLEN/8, x4, x1, x2)

inst_35679:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30ab57 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30ab57; op2val:0x80000000;
op3val:0x8107ffff; valaddr_reg:x3; val_offset:107037*0 + 3*278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107037*0 + 3*278*FLEN/8, x4, x1, x2)

inst_35680:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30ab57 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30ab57; op2val:0x80000000;
op3val:0x810fffff; valaddr_reg:x3; val_offset:107040*0 + 3*278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107040*0 + 3*278*FLEN/8, x4, x1, x2)

inst_35681:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30ab57 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30ab57; op2val:0x80000000;
op3val:0x811fffff; valaddr_reg:x3; val_offset:107043*0 + 3*278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107043*0 + 3*278*FLEN/8, x4, x1, x2)

inst_35682:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30ab57 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30ab57; op2val:0x80000000;
op3val:0x813fffff; valaddr_reg:x3; val_offset:107046*0 + 3*278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107046*0 + 3*278*FLEN/8, x4, x1, x2)

inst_35683:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30ab57 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30ab57; op2val:0x80000000;
op3val:0x81400000; valaddr_reg:x3; val_offset:107049*0 + 3*278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107049*0 + 3*278*FLEN/8, x4, x1, x2)

inst_35684:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30ab57 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30ab57; op2val:0x80000000;
op3val:0x81600000; valaddr_reg:x3; val_offset:107052*0 + 3*278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107052*0 + 3*278*FLEN/8, x4, x1, x2)

inst_35685:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30ab57 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30ab57; op2val:0x80000000;
op3val:0x81700000; valaddr_reg:x3; val_offset:107055*0 + 3*278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107055*0 + 3*278*FLEN/8, x4, x1, x2)

inst_35686:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30ab57 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30ab57; op2val:0x80000000;
op3val:0x81780000; valaddr_reg:x3; val_offset:107058*0 + 3*278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107058*0 + 3*278*FLEN/8, x4, x1, x2)

inst_35687:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30ab57 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30ab57; op2val:0x80000000;
op3val:0x817c0000; valaddr_reg:x3; val_offset:107061*0 + 3*278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107061*0 + 3*278*FLEN/8, x4, x1, x2)

inst_35688:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30ab57 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30ab57; op2val:0x80000000;
op3val:0x817e0000; valaddr_reg:x3; val_offset:107064*0 + 3*278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107064*0 + 3*278*FLEN/8, x4, x1, x2)

inst_35689:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30ab57 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30ab57; op2val:0x80000000;
op3val:0x817f0000; valaddr_reg:x3; val_offset:107067*0 + 3*278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107067*0 + 3*278*FLEN/8, x4, x1, x2)

inst_35690:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30ab57 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30ab57; op2val:0x80000000;
op3val:0x817f8000; valaddr_reg:x3; val_offset:107070*0 + 3*278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107070*0 + 3*278*FLEN/8, x4, x1, x2)

inst_35691:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30ab57 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30ab57; op2val:0x80000000;
op3val:0x817fc000; valaddr_reg:x3; val_offset:107073*0 + 3*278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107073*0 + 3*278*FLEN/8, x4, x1, x2)

inst_35692:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30ab57 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30ab57; op2val:0x80000000;
op3val:0x817fe000; valaddr_reg:x3; val_offset:107076*0 + 3*278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107076*0 + 3*278*FLEN/8, x4, x1, x2)

inst_35693:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30ab57 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30ab57; op2val:0x80000000;
op3val:0x817ff000; valaddr_reg:x3; val_offset:107079*0 + 3*278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107079*0 + 3*278*FLEN/8, x4, x1, x2)

inst_35694:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30ab57 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30ab57; op2val:0x80000000;
op3val:0x817ff800; valaddr_reg:x3; val_offset:107082*0 + 3*278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107082*0 + 3*278*FLEN/8, x4, x1, x2)

inst_35695:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30ab57 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30ab57; op2val:0x80000000;
op3val:0x817ffc00; valaddr_reg:x3; val_offset:107085*0 + 3*278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107085*0 + 3*278*FLEN/8, x4, x1, x2)

inst_35696:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30ab57 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30ab57; op2val:0x80000000;
op3val:0x817ffe00; valaddr_reg:x3; val_offset:107088*0 + 3*278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107088*0 + 3*278*FLEN/8, x4, x1, x2)

inst_35697:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30ab57 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30ab57; op2val:0x80000000;
op3val:0x817fff00; valaddr_reg:x3; val_offset:107091*0 + 3*278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107091*0 + 3*278*FLEN/8, x4, x1, x2)

inst_35698:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30ab57 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30ab57; op2val:0x80000000;
op3val:0x817fff80; valaddr_reg:x3; val_offset:107094*0 + 3*278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107094*0 + 3*278*FLEN/8, x4, x1, x2)

inst_35699:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30ab57 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30ab57; op2val:0x80000000;
op3val:0x817fffc0; valaddr_reg:x3; val_offset:107097*0 + 3*278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107097*0 + 3*278*FLEN/8, x4, x1, x2)

inst_35700:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30ab57 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30ab57; op2val:0x80000000;
op3val:0x817fffe0; valaddr_reg:x3; val_offset:107100*0 + 3*278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107100*0 + 3*278*FLEN/8, x4, x1, x2)

inst_35701:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30ab57 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30ab57; op2val:0x80000000;
op3val:0x817ffff0; valaddr_reg:x3; val_offset:107103*0 + 3*278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107103*0 + 3*278*FLEN/8, x4, x1, x2)

inst_35702:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30ab57 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30ab57; op2val:0x80000000;
op3val:0x817ffff8; valaddr_reg:x3; val_offset:107106*0 + 3*278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107106*0 + 3*278*FLEN/8, x4, x1, x2)

inst_35703:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30ab57 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30ab57; op2val:0x80000000;
op3val:0x817ffffc; valaddr_reg:x3; val_offset:107109*0 + 3*278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107109*0 + 3*278*FLEN/8, x4, x1, x2)

inst_35704:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30ab57 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30ab57; op2val:0x80000000;
op3val:0x817ffffe; valaddr_reg:x3; val_offset:107112*0 + 3*278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107112*0 + 3*278*FLEN/8, x4, x1, x2)

inst_35705:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30ab57 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30ab57; op2val:0x80000000;
op3val:0x817fffff; valaddr_reg:x3; val_offset:107115*0 + 3*278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107115*0 + 3*278*FLEN/8, x4, x1, x2)

inst_35706:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30e98e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e4e30 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30e98e; op2val:0x2e4e30;
op3val:0x3f800001; valaddr_reg:x3; val_offset:107118*0 + 3*278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107118*0 + 3*278*FLEN/8, x4, x1, x2)

inst_35707:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30e98e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e4e30 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30e98e; op2val:0x2e4e30;
op3val:0x3f800003; valaddr_reg:x3; val_offset:107121*0 + 3*278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107121*0 + 3*278*FLEN/8, x4, x1, x2)

inst_35708:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30e98e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e4e30 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30e98e; op2val:0x2e4e30;
op3val:0x3f800007; valaddr_reg:x3; val_offset:107124*0 + 3*278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107124*0 + 3*278*FLEN/8, x4, x1, x2)

inst_35709:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30e98e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e4e30 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30e98e; op2val:0x2e4e30;
op3val:0x3f999999; valaddr_reg:x3; val_offset:107127*0 + 3*278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107127*0 + 3*278*FLEN/8, x4, x1, x2)

inst_35710:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30e98e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e4e30 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30e98e; op2val:0x2e4e30;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:107130*0 + 3*278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107130*0 + 3*278*FLEN/8, x4, x1, x2)

inst_35711:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30e98e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e4e30 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30e98e; op2val:0x2e4e30;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:107133*0 + 3*278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107133*0 + 3*278*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2133893826,32,FLEN)
NAN_BOXED(3216605948,32,FLEN)
NAN_BOXED(4227858435,32,FLEN)
NAN_BOXED(2133893826,32,FLEN)
NAN_BOXED(3216605948,32,FLEN)
NAN_BOXED(4227858439,32,FLEN)
NAN_BOXED(2133893826,32,FLEN)
NAN_BOXED(3216605948,32,FLEN)
NAN_BOXED(4227858447,32,FLEN)
NAN_BOXED(2133893826,32,FLEN)
NAN_BOXED(3216605948,32,FLEN)
NAN_BOXED(4227858463,32,FLEN)
NAN_BOXED(2133893826,32,FLEN)
NAN_BOXED(3216605948,32,FLEN)
NAN_BOXED(4227858495,32,FLEN)
NAN_BOXED(2133893826,32,FLEN)
NAN_BOXED(3216605948,32,FLEN)
NAN_BOXED(4227858559,32,FLEN)
NAN_BOXED(2133893826,32,FLEN)
NAN_BOXED(3216605948,32,FLEN)
NAN_BOXED(4227858687,32,FLEN)
NAN_BOXED(2133893826,32,FLEN)
NAN_BOXED(3216605948,32,FLEN)
NAN_BOXED(4227858943,32,FLEN)
NAN_BOXED(2133893826,32,FLEN)
NAN_BOXED(3216605948,32,FLEN)
NAN_BOXED(4227859455,32,FLEN)
NAN_BOXED(2133893826,32,FLEN)
NAN_BOXED(3216605948,32,FLEN)
NAN_BOXED(4227860479,32,FLEN)
NAN_BOXED(2133893826,32,FLEN)
NAN_BOXED(3216605948,32,FLEN)
NAN_BOXED(4227862527,32,FLEN)
NAN_BOXED(2133893826,32,FLEN)
NAN_BOXED(3216605948,32,FLEN)
NAN_BOXED(4227866623,32,FLEN)
NAN_BOXED(2133893826,32,FLEN)
NAN_BOXED(3216605948,32,FLEN)
NAN_BOXED(4227874815,32,FLEN)
NAN_BOXED(2133893826,32,FLEN)
NAN_BOXED(3216605948,32,FLEN)
NAN_BOXED(4227891199,32,FLEN)
NAN_BOXED(2133893826,32,FLEN)
NAN_BOXED(3216605948,32,FLEN)
NAN_BOXED(4227923967,32,FLEN)
NAN_BOXED(2133893826,32,FLEN)
NAN_BOXED(3216605948,32,FLEN)
NAN_BOXED(4227989503,32,FLEN)
NAN_BOXED(2133893826,32,FLEN)
NAN_BOXED(3216605948,32,FLEN)
NAN_BOXED(4228120575,32,FLEN)
NAN_BOXED(2133893826,32,FLEN)
NAN_BOXED(3216605948,32,FLEN)
NAN_BOXED(4228382719,32,FLEN)
NAN_BOXED(2133893826,32,FLEN)
NAN_BOXED(3216605948,32,FLEN)
NAN_BOXED(4228907007,32,FLEN)
NAN_BOXED(2133893826,32,FLEN)
NAN_BOXED(3216605948,32,FLEN)
NAN_BOXED(4229955583,32,FLEN)
NAN_BOXED(2133893826,32,FLEN)
NAN_BOXED(3216605948,32,FLEN)
NAN_BOXED(4232052735,32,FLEN)
NAN_BOXED(2133893826,32,FLEN)
NAN_BOXED(3216605948,32,FLEN)
NAN_BOXED(4232052736,32,FLEN)
NAN_BOXED(2133893826,32,FLEN)
NAN_BOXED(3216605948,32,FLEN)
NAN_BOXED(4234149888,32,FLEN)
NAN_BOXED(2133893826,32,FLEN)
NAN_BOXED(3216605948,32,FLEN)
NAN_BOXED(4235198464,32,FLEN)
NAN_BOXED(2133893826,32,FLEN)
NAN_BOXED(3216605948,32,FLEN)
NAN_BOXED(4235722752,32,FLEN)
NAN_BOXED(2133893826,32,FLEN)
NAN_BOXED(3216605948,32,FLEN)
NAN_BOXED(4235984896,32,FLEN)
NAN_BOXED(2133893826,32,FLEN)
NAN_BOXED(3216605948,32,FLEN)
NAN_BOXED(4236115968,32,FLEN)
NAN_BOXED(2133893826,32,FLEN)
NAN_BOXED(3216605948,32,FLEN)
NAN_BOXED(4236181504,32,FLEN)
NAN_BOXED(2133893826,32,FLEN)
NAN_BOXED(3216605948,32,FLEN)
NAN_BOXED(4236214272,32,FLEN)
NAN_BOXED(2133893826,32,FLEN)
NAN_BOXED(3216605948,32,FLEN)
NAN_BOXED(4236230656,32,FLEN)
NAN_BOXED(2133893826,32,FLEN)
NAN_BOXED(3216605948,32,FLEN)
NAN_BOXED(4236238848,32,FLEN)
NAN_BOXED(2133893826,32,FLEN)
NAN_BOXED(3216605948,32,FLEN)
NAN_BOXED(4236242944,32,FLEN)
NAN_BOXED(2133893826,32,FLEN)
NAN_BOXED(3216605948,32,FLEN)
NAN_BOXED(4236244992,32,FLEN)
NAN_BOXED(2133893826,32,FLEN)
NAN_BOXED(3216605948,32,FLEN)
NAN_BOXED(4236246016,32,FLEN)
NAN_BOXED(2133893826,32,FLEN)
NAN_BOXED(3216605948,32,FLEN)
NAN_BOXED(4236246528,32,FLEN)
NAN_BOXED(2133893826,32,FLEN)
NAN_BOXED(3216605948,32,FLEN)
NAN_BOXED(4236246784,32,FLEN)
NAN_BOXED(2133893826,32,FLEN)
NAN_BOXED(3216605948,32,FLEN)
NAN_BOXED(4236246912,32,FLEN)
NAN_BOXED(2133893826,32,FLEN)
NAN_BOXED(3216605948,32,FLEN)
NAN_BOXED(4236246976,32,FLEN)
NAN_BOXED(2133893826,32,FLEN)
NAN_BOXED(3216605948,32,FLEN)
NAN_BOXED(4236247008,32,FLEN)
NAN_BOXED(2133893826,32,FLEN)
NAN_BOXED(3216605948,32,FLEN)
NAN_BOXED(4236247024,32,FLEN)
NAN_BOXED(2133893826,32,FLEN)
NAN_BOXED(3216605948,32,FLEN)
NAN_BOXED(4236247032,32,FLEN)
NAN_BOXED(2133893826,32,FLEN)
NAN_BOXED(3216605948,32,FLEN)
NAN_BOXED(4236247036,32,FLEN)
NAN_BOXED(2133893826,32,FLEN)
NAN_BOXED(3216605948,32,FLEN)
NAN_BOXED(4236247038,32,FLEN)
NAN_BOXED(2133893826,32,FLEN)
NAN_BOXED(3216605948,32,FLEN)
NAN_BOXED(4236247039,32,FLEN)
NAN_BOXED(2133893826,32,FLEN)
NAN_BOXED(3216605948,32,FLEN)
NAN_BOXED(4278190081,32,FLEN)
NAN_BOXED(2133893826,32,FLEN)
NAN_BOXED(3216605948,32,FLEN)
NAN_BOXED(4278190083,32,FLEN)
NAN_BOXED(2133893826,32,FLEN)
NAN_BOXED(3216605948,32,FLEN)
NAN_BOXED(4278190087,32,FLEN)
NAN_BOXED(2133893826,32,FLEN)
NAN_BOXED(3216605948,32,FLEN)
NAN_BOXED(4279867801,32,FLEN)
NAN_BOXED(2133893826,32,FLEN)
NAN_BOXED(3216605948,32,FLEN)
NAN_BOXED(4280586825,32,FLEN)
NAN_BOXED(2133893826,32,FLEN)
NAN_BOXED(3216605948,32,FLEN)
NAN_BOXED(4281545523,32,FLEN)
NAN_BOXED(2133893826,32,FLEN)
NAN_BOXED(3216605948,32,FLEN)
NAN_BOXED(4281785197,32,FLEN)
NAN_BOXED(2133893826,32,FLEN)
NAN_BOXED(3216605948,32,FLEN)
NAN_BOXED(4282104763,32,FLEN)
NAN_BOXED(2133893826,32,FLEN)
NAN_BOXED(3216605948,32,FLEN)
NAN_BOXED(4282664004,32,FLEN)
NAN_BOXED(2133893826,32,FLEN)
NAN_BOXED(3216605948,32,FLEN)
NAN_BOXED(4283223244,32,FLEN)
NAN_BOXED(2133893826,32,FLEN)
NAN_BOXED(3216605948,32,FLEN)
NAN_BOXED(4284181942,32,FLEN)
NAN_BOXED(2133893826,32,FLEN)
NAN_BOXED(3216605948,32,FLEN)
NAN_BOXED(4284900966,32,FLEN)
NAN_BOXED(2133893826,32,FLEN)
NAN_BOXED(3216605948,32,FLEN)
NAN_BOXED(4285380315,32,FLEN)
NAN_BOXED(2133893826,32,FLEN)
NAN_BOXED(3216605948,32,FLEN)
NAN_BOXED(4286578680,32,FLEN)
NAN_BOXED(2133893826,32,FLEN)
NAN_BOXED(3216605948,32,FLEN)
NAN_BOXED(4286578684,32,FLEN)
NAN_BOXED(2133893826,32,FLEN)
NAN_BOXED(3216605948,32,FLEN)
NAN_BOXED(4286578686,32,FLEN)
NAN_BOXED(2133896023,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2133896023,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483651,32,FLEN)
NAN_BOXED(2133896023,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483655,32,FLEN)
NAN_BOXED(2133896023,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149161369,32,FLEN)
NAN_BOXED(2133896023,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149880393,32,FLEN)
NAN_BOXED(2133896023,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2150839091,32,FLEN)
NAN_BOXED(2133896023,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151078765,32,FLEN)
NAN_BOXED(2133896023,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151398331,32,FLEN)
NAN_BOXED(2133896023,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151957572,32,FLEN)
NAN_BOXED(2133896023,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2152516812,32,FLEN)
NAN_BOXED(2133896023,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2153475510,32,FLEN)
NAN_BOXED(2133896023,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154194534,32,FLEN)
NAN_BOXED(2133896023,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154673883,32,FLEN)
NAN_BOXED(2133896023,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872248,32,FLEN)
NAN_BOXED(2133896023,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872252,32,FLEN)
NAN_BOXED(2133896023,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2133896023,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260864,32,FLEN)
NAN_BOXED(2133896023,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260865,32,FLEN)
NAN_BOXED(2133896023,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260867,32,FLEN)
NAN_BOXED(2133896023,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260871,32,FLEN)
NAN_BOXED(2133896023,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260879,32,FLEN)
NAN_BOXED(2133896023,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260895,32,FLEN)
NAN_BOXED(2133896023,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260927,32,FLEN)
NAN_BOXED(2133896023,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260991,32,FLEN)
NAN_BOXED(2133896023,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164261119,32,FLEN)
NAN_BOXED(2133896023,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164261375,32,FLEN)
NAN_BOXED(2133896023,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164261887,32,FLEN)
NAN_BOXED(2133896023,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164262911,32,FLEN)
NAN_BOXED(2133896023,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164264959,32,FLEN)
NAN_BOXED(2133896023,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164269055,32,FLEN)
NAN_BOXED(2133896023,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164277247,32,FLEN)
NAN_BOXED(2133896023,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164293631,32,FLEN)
NAN_BOXED(2133896023,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164326399,32,FLEN)
NAN_BOXED(2133896023,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164391935,32,FLEN)
NAN_BOXED(2133896023,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164523007,32,FLEN)
NAN_BOXED(2133896023,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164785151,32,FLEN)
NAN_BOXED(2133896023,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2165309439,32,FLEN)
NAN_BOXED(2133896023,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2166358015,32,FLEN)
NAN_BOXED(2133896023,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2168455167,32,FLEN)
NAN_BOXED(2133896023,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2168455168,32,FLEN)
NAN_BOXED(2133896023,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2170552320,32,FLEN)
NAN_BOXED(2133896023,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2171600896,32,FLEN)
NAN_BOXED(2133896023,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172125184,32,FLEN)
NAN_BOXED(2133896023,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172387328,32,FLEN)
NAN_BOXED(2133896023,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172518400,32,FLEN)
NAN_BOXED(2133896023,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172583936,32,FLEN)
NAN_BOXED(2133896023,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172616704,32,FLEN)
NAN_BOXED(2133896023,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172633088,32,FLEN)
NAN_BOXED(2133896023,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172641280,32,FLEN)
NAN_BOXED(2133896023,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172645376,32,FLEN)
NAN_BOXED(2133896023,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172647424,32,FLEN)
NAN_BOXED(2133896023,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172648448,32,FLEN)
NAN_BOXED(2133896023,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172648960,32,FLEN)
NAN_BOXED(2133896023,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172649216,32,FLEN)
NAN_BOXED(2133896023,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172649344,32,FLEN)
NAN_BOXED(2133896023,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172649408,32,FLEN)
NAN_BOXED(2133896023,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172649440,32,FLEN)
NAN_BOXED(2133896023,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172649456,32,FLEN)
NAN_BOXED(2133896023,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172649464,32,FLEN)
NAN_BOXED(2133896023,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172649468,32,FLEN)
NAN_BOXED(2133896023,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172649470,32,FLEN)
NAN_BOXED(2133896023,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172649471,32,FLEN)
NAN_BOXED(2133911950,32,FLEN)
NAN_BOXED(3034672,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2133911950,32,FLEN)
NAN_BOXED(3034672,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2133911950,32,FLEN)
NAN_BOXED(3034672,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2133911950,32,FLEN)
NAN_BOXED(3034672,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2133911950,32,FLEN)
NAN_BOXED(3034672,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2133911950,32,FLEN)
NAN_BOXED(3034672,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
