
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:17:59 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_35712:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30e98e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e4e30 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30e98e; op2val:0x2e4e30;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:107136*0 + 3*279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107136*0 + 3*279*FLEN/8, x4, x1, x2)

inst_35713:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30e98e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e4e30 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30e98e; op2val:0x2e4e30;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:107139*0 + 3*279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107139*0 + 3*279*FLEN/8, x4, x1, x2)

inst_35714:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30e98e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e4e30 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30e98e; op2val:0x2e4e30;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:107142*0 + 3*279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107142*0 + 3*279*FLEN/8, x4, x1, x2)

inst_35715:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30e98e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e4e30 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30e98e; op2val:0x2e4e30;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:107145*0 + 3*279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107145*0 + 3*279*FLEN/8, x4, x1, x2)

inst_35716:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30e98e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e4e30 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30e98e; op2val:0x2e4e30;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:107148*0 + 3*279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107148*0 + 3*279*FLEN/8, x4, x1, x2)

inst_35717:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30e98e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e4e30 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30e98e; op2val:0x2e4e30;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:107151*0 + 3*279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107151*0 + 3*279*FLEN/8, x4, x1, x2)

inst_35718:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30e98e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e4e30 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30e98e; op2val:0x2e4e30;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:107154*0 + 3*279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107154*0 + 3*279*FLEN/8, x4, x1, x2)

inst_35719:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30e98e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e4e30 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30e98e; op2val:0x2e4e30;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:107157*0 + 3*279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107157*0 + 3*279*FLEN/8, x4, x1, x2)

inst_35720:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30e98e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e4e30 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30e98e; op2val:0x2e4e30;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:107160*0 + 3*279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107160*0 + 3*279*FLEN/8, x4, x1, x2)

inst_35721:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30e98e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e4e30 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30e98e; op2val:0x2e4e30;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:107163*0 + 3*279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107163*0 + 3*279*FLEN/8, x4, x1, x2)

inst_35722:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30e98e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e4e30 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30e98e; op2val:0x2e4e30;
op3val:0x48800000; valaddr_reg:x3; val_offset:107166*0 + 3*279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107166*0 + 3*279*FLEN/8, x4, x1, x2)

inst_35723:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30e98e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e4e30 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30e98e; op2val:0x2e4e30;
op3val:0x48800001; valaddr_reg:x3; val_offset:107169*0 + 3*279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107169*0 + 3*279*FLEN/8, x4, x1, x2)

inst_35724:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30e98e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e4e30 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30e98e; op2val:0x2e4e30;
op3val:0x48800003; valaddr_reg:x3; val_offset:107172*0 + 3*279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107172*0 + 3*279*FLEN/8, x4, x1, x2)

inst_35725:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30e98e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e4e30 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30e98e; op2val:0x2e4e30;
op3val:0x48800007; valaddr_reg:x3; val_offset:107175*0 + 3*279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107175*0 + 3*279*FLEN/8, x4, x1, x2)

inst_35726:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30e98e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e4e30 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30e98e; op2val:0x2e4e30;
op3val:0x4880000f; valaddr_reg:x3; val_offset:107178*0 + 3*279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107178*0 + 3*279*FLEN/8, x4, x1, x2)

inst_35727:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30e98e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e4e30 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30e98e; op2val:0x2e4e30;
op3val:0x4880001f; valaddr_reg:x3; val_offset:107181*0 + 3*279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107181*0 + 3*279*FLEN/8, x4, x1, x2)

inst_35728:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30e98e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e4e30 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30e98e; op2val:0x2e4e30;
op3val:0x4880003f; valaddr_reg:x3; val_offset:107184*0 + 3*279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107184*0 + 3*279*FLEN/8, x4, x1, x2)

inst_35729:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30e98e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e4e30 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30e98e; op2val:0x2e4e30;
op3val:0x4880007f; valaddr_reg:x3; val_offset:107187*0 + 3*279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107187*0 + 3*279*FLEN/8, x4, x1, x2)

inst_35730:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30e98e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e4e30 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30e98e; op2val:0x2e4e30;
op3val:0x488000ff; valaddr_reg:x3; val_offset:107190*0 + 3*279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107190*0 + 3*279*FLEN/8, x4, x1, x2)

inst_35731:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30e98e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e4e30 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30e98e; op2val:0x2e4e30;
op3val:0x488001ff; valaddr_reg:x3; val_offset:107193*0 + 3*279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107193*0 + 3*279*FLEN/8, x4, x1, x2)

inst_35732:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30e98e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e4e30 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30e98e; op2val:0x2e4e30;
op3val:0x488003ff; valaddr_reg:x3; val_offset:107196*0 + 3*279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107196*0 + 3*279*FLEN/8, x4, x1, x2)

inst_35733:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30e98e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e4e30 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30e98e; op2val:0x2e4e30;
op3val:0x488007ff; valaddr_reg:x3; val_offset:107199*0 + 3*279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107199*0 + 3*279*FLEN/8, x4, x1, x2)

inst_35734:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30e98e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e4e30 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30e98e; op2val:0x2e4e30;
op3val:0x48800fff; valaddr_reg:x3; val_offset:107202*0 + 3*279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107202*0 + 3*279*FLEN/8, x4, x1, x2)

inst_35735:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30e98e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e4e30 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30e98e; op2val:0x2e4e30;
op3val:0x48801fff; valaddr_reg:x3; val_offset:107205*0 + 3*279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107205*0 + 3*279*FLEN/8, x4, x1, x2)

inst_35736:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30e98e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e4e30 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30e98e; op2val:0x2e4e30;
op3val:0x48803fff; valaddr_reg:x3; val_offset:107208*0 + 3*279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107208*0 + 3*279*FLEN/8, x4, x1, x2)

inst_35737:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30e98e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e4e30 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30e98e; op2val:0x2e4e30;
op3val:0x48807fff; valaddr_reg:x3; val_offset:107211*0 + 3*279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107211*0 + 3*279*FLEN/8, x4, x1, x2)

inst_35738:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30e98e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e4e30 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30e98e; op2val:0x2e4e30;
op3val:0x4880ffff; valaddr_reg:x3; val_offset:107214*0 + 3*279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107214*0 + 3*279*FLEN/8, x4, x1, x2)

inst_35739:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30e98e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e4e30 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30e98e; op2val:0x2e4e30;
op3val:0x4881ffff; valaddr_reg:x3; val_offset:107217*0 + 3*279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107217*0 + 3*279*FLEN/8, x4, x1, x2)

inst_35740:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30e98e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e4e30 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30e98e; op2val:0x2e4e30;
op3val:0x4883ffff; valaddr_reg:x3; val_offset:107220*0 + 3*279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107220*0 + 3*279*FLEN/8, x4, x1, x2)

inst_35741:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30e98e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e4e30 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30e98e; op2val:0x2e4e30;
op3val:0x4887ffff; valaddr_reg:x3; val_offset:107223*0 + 3*279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107223*0 + 3*279*FLEN/8, x4, x1, x2)

inst_35742:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30e98e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e4e30 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30e98e; op2val:0x2e4e30;
op3val:0x488fffff; valaddr_reg:x3; val_offset:107226*0 + 3*279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107226*0 + 3*279*FLEN/8, x4, x1, x2)

inst_35743:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30e98e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e4e30 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30e98e; op2val:0x2e4e30;
op3val:0x489fffff; valaddr_reg:x3; val_offset:107229*0 + 3*279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107229*0 + 3*279*FLEN/8, x4, x1, x2)

inst_35744:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30e98e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e4e30 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30e98e; op2val:0x2e4e30;
op3val:0x48bfffff; valaddr_reg:x3; val_offset:107232*0 + 3*279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107232*0 + 3*279*FLEN/8, x4, x1, x2)

inst_35745:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30e98e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e4e30 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30e98e; op2val:0x2e4e30;
op3val:0x48c00000; valaddr_reg:x3; val_offset:107235*0 + 3*279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107235*0 + 3*279*FLEN/8, x4, x1, x2)

inst_35746:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30e98e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e4e30 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30e98e; op2val:0x2e4e30;
op3val:0x48e00000; valaddr_reg:x3; val_offset:107238*0 + 3*279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107238*0 + 3*279*FLEN/8, x4, x1, x2)

inst_35747:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30e98e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e4e30 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30e98e; op2val:0x2e4e30;
op3val:0x48f00000; valaddr_reg:x3; val_offset:107241*0 + 3*279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107241*0 + 3*279*FLEN/8, x4, x1, x2)

inst_35748:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30e98e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e4e30 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30e98e; op2val:0x2e4e30;
op3val:0x48f80000; valaddr_reg:x3; val_offset:107244*0 + 3*279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107244*0 + 3*279*FLEN/8, x4, x1, x2)

inst_35749:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30e98e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e4e30 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30e98e; op2val:0x2e4e30;
op3val:0x48fc0000; valaddr_reg:x3; val_offset:107247*0 + 3*279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107247*0 + 3*279*FLEN/8, x4, x1, x2)

inst_35750:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30e98e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e4e30 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30e98e; op2val:0x2e4e30;
op3val:0x48fe0000; valaddr_reg:x3; val_offset:107250*0 + 3*279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107250*0 + 3*279*FLEN/8, x4, x1, x2)

inst_35751:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30e98e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e4e30 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30e98e; op2val:0x2e4e30;
op3val:0x48ff0000; valaddr_reg:x3; val_offset:107253*0 + 3*279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107253*0 + 3*279*FLEN/8, x4, x1, x2)

inst_35752:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30e98e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e4e30 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30e98e; op2val:0x2e4e30;
op3val:0x48ff8000; valaddr_reg:x3; val_offset:107256*0 + 3*279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107256*0 + 3*279*FLEN/8, x4, x1, x2)

inst_35753:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30e98e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e4e30 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30e98e; op2val:0x2e4e30;
op3val:0x48ffc000; valaddr_reg:x3; val_offset:107259*0 + 3*279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107259*0 + 3*279*FLEN/8, x4, x1, x2)

inst_35754:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30e98e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e4e30 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30e98e; op2val:0x2e4e30;
op3val:0x48ffe000; valaddr_reg:x3; val_offset:107262*0 + 3*279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107262*0 + 3*279*FLEN/8, x4, x1, x2)

inst_35755:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30e98e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e4e30 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30e98e; op2val:0x2e4e30;
op3val:0x48fff000; valaddr_reg:x3; val_offset:107265*0 + 3*279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107265*0 + 3*279*FLEN/8, x4, x1, x2)

inst_35756:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30e98e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e4e30 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30e98e; op2val:0x2e4e30;
op3val:0x48fff800; valaddr_reg:x3; val_offset:107268*0 + 3*279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107268*0 + 3*279*FLEN/8, x4, x1, x2)

inst_35757:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30e98e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e4e30 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30e98e; op2val:0x2e4e30;
op3val:0x48fffc00; valaddr_reg:x3; val_offset:107271*0 + 3*279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107271*0 + 3*279*FLEN/8, x4, x1, x2)

inst_35758:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30e98e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e4e30 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30e98e; op2val:0x2e4e30;
op3val:0x48fffe00; valaddr_reg:x3; val_offset:107274*0 + 3*279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107274*0 + 3*279*FLEN/8, x4, x1, x2)

inst_35759:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30e98e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e4e30 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30e98e; op2val:0x2e4e30;
op3val:0x48ffff00; valaddr_reg:x3; val_offset:107277*0 + 3*279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107277*0 + 3*279*FLEN/8, x4, x1, x2)

inst_35760:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30e98e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e4e30 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30e98e; op2val:0x2e4e30;
op3val:0x48ffff80; valaddr_reg:x3; val_offset:107280*0 + 3*279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107280*0 + 3*279*FLEN/8, x4, x1, x2)

inst_35761:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30e98e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e4e30 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30e98e; op2val:0x2e4e30;
op3val:0x48ffffc0; valaddr_reg:x3; val_offset:107283*0 + 3*279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107283*0 + 3*279*FLEN/8, x4, x1, x2)

inst_35762:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30e98e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e4e30 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30e98e; op2val:0x2e4e30;
op3val:0x48ffffe0; valaddr_reg:x3; val_offset:107286*0 + 3*279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107286*0 + 3*279*FLEN/8, x4, x1, x2)

inst_35763:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30e98e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e4e30 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30e98e; op2val:0x2e4e30;
op3val:0x48fffff0; valaddr_reg:x3; val_offset:107289*0 + 3*279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107289*0 + 3*279*FLEN/8, x4, x1, x2)

inst_35764:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30e98e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e4e30 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30e98e; op2val:0x2e4e30;
op3val:0x48fffff8; valaddr_reg:x3; val_offset:107292*0 + 3*279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107292*0 + 3*279*FLEN/8, x4, x1, x2)

inst_35765:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30e98e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e4e30 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30e98e; op2val:0x2e4e30;
op3val:0x48fffffc; valaddr_reg:x3; val_offset:107295*0 + 3*279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107295*0 + 3*279*FLEN/8, x4, x1, x2)

inst_35766:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30e98e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e4e30 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30e98e; op2val:0x2e4e30;
op3val:0x48fffffe; valaddr_reg:x3; val_offset:107298*0 + 3*279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107298*0 + 3*279*FLEN/8, x4, x1, x2)

inst_35767:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30e98e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e4e30 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30e98e; op2val:0x2e4e30;
op3val:0x48ffffff; valaddr_reg:x3; val_offset:107301*0 + 3*279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107301*0 + 3*279*FLEN/8, x4, x1, x2)

inst_35768:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x312bf9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e3cd4 and fs3 == 1 and fe3 == 0x7a and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f312bf9; op2val:0x802e3cd4;
op3val:0xbd000000; valaddr_reg:x3; val_offset:107304*0 + 3*279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107304*0 + 3*279*FLEN/8, x4, x1, x2)

inst_35769:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x312bf9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e3cd4 and fs3 == 1 and fe3 == 0x7a and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f312bf9; op2val:0x802e3cd4;
op3val:0xbd000001; valaddr_reg:x3; val_offset:107307*0 + 3*279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107307*0 + 3*279*FLEN/8, x4, x1, x2)

inst_35770:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x312bf9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e3cd4 and fs3 == 1 and fe3 == 0x7a and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f312bf9; op2val:0x802e3cd4;
op3val:0xbd000003; valaddr_reg:x3; val_offset:107310*0 + 3*279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107310*0 + 3*279*FLEN/8, x4, x1, x2)

inst_35771:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x312bf9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e3cd4 and fs3 == 1 and fe3 == 0x7a and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f312bf9; op2val:0x802e3cd4;
op3val:0xbd000007; valaddr_reg:x3; val_offset:107313*0 + 3*279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107313*0 + 3*279*FLEN/8, x4, x1, x2)

inst_35772:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x312bf9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e3cd4 and fs3 == 1 and fe3 == 0x7a and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f312bf9; op2val:0x802e3cd4;
op3val:0xbd00000f; valaddr_reg:x3; val_offset:107316*0 + 3*279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107316*0 + 3*279*FLEN/8, x4, x1, x2)

inst_35773:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x312bf9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e3cd4 and fs3 == 1 and fe3 == 0x7a and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f312bf9; op2val:0x802e3cd4;
op3val:0xbd00001f; valaddr_reg:x3; val_offset:107319*0 + 3*279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107319*0 + 3*279*FLEN/8, x4, x1, x2)

inst_35774:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x312bf9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e3cd4 and fs3 == 1 and fe3 == 0x7a and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f312bf9; op2val:0x802e3cd4;
op3val:0xbd00003f; valaddr_reg:x3; val_offset:107322*0 + 3*279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107322*0 + 3*279*FLEN/8, x4, x1, x2)

inst_35775:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x312bf9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e3cd4 and fs3 == 1 and fe3 == 0x7a and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f312bf9; op2val:0x802e3cd4;
op3val:0xbd00007f; valaddr_reg:x3; val_offset:107325*0 + 3*279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107325*0 + 3*279*FLEN/8, x4, x1, x2)

inst_35776:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x312bf9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e3cd4 and fs3 == 1 and fe3 == 0x7a and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f312bf9; op2val:0x802e3cd4;
op3val:0xbd0000ff; valaddr_reg:x3; val_offset:107328*0 + 3*279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107328*0 + 3*279*FLEN/8, x4, x1, x2)

inst_35777:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x312bf9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e3cd4 and fs3 == 1 and fe3 == 0x7a and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f312bf9; op2val:0x802e3cd4;
op3val:0xbd0001ff; valaddr_reg:x3; val_offset:107331*0 + 3*279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107331*0 + 3*279*FLEN/8, x4, x1, x2)

inst_35778:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x312bf9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e3cd4 and fs3 == 1 and fe3 == 0x7a and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f312bf9; op2val:0x802e3cd4;
op3val:0xbd0003ff; valaddr_reg:x3; val_offset:107334*0 + 3*279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107334*0 + 3*279*FLEN/8, x4, x1, x2)

inst_35779:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x312bf9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e3cd4 and fs3 == 1 and fe3 == 0x7a and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f312bf9; op2val:0x802e3cd4;
op3val:0xbd0007ff; valaddr_reg:x3; val_offset:107337*0 + 3*279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107337*0 + 3*279*FLEN/8, x4, x1, x2)

inst_35780:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x312bf9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e3cd4 and fs3 == 1 and fe3 == 0x7a and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f312bf9; op2val:0x802e3cd4;
op3val:0xbd000fff; valaddr_reg:x3; val_offset:107340*0 + 3*279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107340*0 + 3*279*FLEN/8, x4, x1, x2)

inst_35781:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x312bf9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e3cd4 and fs3 == 1 and fe3 == 0x7a and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f312bf9; op2val:0x802e3cd4;
op3val:0xbd001fff; valaddr_reg:x3; val_offset:107343*0 + 3*279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107343*0 + 3*279*FLEN/8, x4, x1, x2)

inst_35782:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x312bf9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e3cd4 and fs3 == 1 and fe3 == 0x7a and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f312bf9; op2val:0x802e3cd4;
op3val:0xbd003fff; valaddr_reg:x3; val_offset:107346*0 + 3*279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107346*0 + 3*279*FLEN/8, x4, x1, x2)

inst_35783:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x312bf9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e3cd4 and fs3 == 1 and fe3 == 0x7a and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f312bf9; op2val:0x802e3cd4;
op3val:0xbd007fff; valaddr_reg:x3; val_offset:107349*0 + 3*279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107349*0 + 3*279*FLEN/8, x4, x1, x2)

inst_35784:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x312bf9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e3cd4 and fs3 == 1 and fe3 == 0x7a and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f312bf9; op2val:0x802e3cd4;
op3val:0xbd00ffff; valaddr_reg:x3; val_offset:107352*0 + 3*279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107352*0 + 3*279*FLEN/8, x4, x1, x2)

inst_35785:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x312bf9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e3cd4 and fs3 == 1 and fe3 == 0x7a and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f312bf9; op2val:0x802e3cd4;
op3val:0xbd01ffff; valaddr_reg:x3; val_offset:107355*0 + 3*279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107355*0 + 3*279*FLEN/8, x4, x1, x2)

inst_35786:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x312bf9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e3cd4 and fs3 == 1 and fe3 == 0x7a and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f312bf9; op2val:0x802e3cd4;
op3val:0xbd03ffff; valaddr_reg:x3; val_offset:107358*0 + 3*279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107358*0 + 3*279*FLEN/8, x4, x1, x2)

inst_35787:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x312bf9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e3cd4 and fs3 == 1 and fe3 == 0x7a and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f312bf9; op2val:0x802e3cd4;
op3val:0xbd07ffff; valaddr_reg:x3; val_offset:107361*0 + 3*279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107361*0 + 3*279*FLEN/8, x4, x1, x2)

inst_35788:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x312bf9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e3cd4 and fs3 == 1 and fe3 == 0x7a and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f312bf9; op2val:0x802e3cd4;
op3val:0xbd0fffff; valaddr_reg:x3; val_offset:107364*0 + 3*279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107364*0 + 3*279*FLEN/8, x4, x1, x2)

inst_35789:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x312bf9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e3cd4 and fs3 == 1 and fe3 == 0x7a and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f312bf9; op2val:0x802e3cd4;
op3val:0xbd1fffff; valaddr_reg:x3; val_offset:107367*0 + 3*279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107367*0 + 3*279*FLEN/8, x4, x1, x2)

inst_35790:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x312bf9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e3cd4 and fs3 == 1 and fe3 == 0x7a and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f312bf9; op2val:0x802e3cd4;
op3val:0xbd3fffff; valaddr_reg:x3; val_offset:107370*0 + 3*279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107370*0 + 3*279*FLEN/8, x4, x1, x2)

inst_35791:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x312bf9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e3cd4 and fs3 == 1 and fe3 == 0x7a and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f312bf9; op2val:0x802e3cd4;
op3val:0xbd400000; valaddr_reg:x3; val_offset:107373*0 + 3*279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107373*0 + 3*279*FLEN/8, x4, x1, x2)

inst_35792:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x312bf9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e3cd4 and fs3 == 1 and fe3 == 0x7a and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f312bf9; op2val:0x802e3cd4;
op3val:0xbd600000; valaddr_reg:x3; val_offset:107376*0 + 3*279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107376*0 + 3*279*FLEN/8, x4, x1, x2)

inst_35793:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x312bf9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e3cd4 and fs3 == 1 and fe3 == 0x7a and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f312bf9; op2val:0x802e3cd4;
op3val:0xbd700000; valaddr_reg:x3; val_offset:107379*0 + 3*279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107379*0 + 3*279*FLEN/8, x4, x1, x2)

inst_35794:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x312bf9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e3cd4 and fs3 == 1 and fe3 == 0x7a and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f312bf9; op2val:0x802e3cd4;
op3val:0xbd780000; valaddr_reg:x3; val_offset:107382*0 + 3*279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107382*0 + 3*279*FLEN/8, x4, x1, x2)

inst_35795:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x312bf9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e3cd4 and fs3 == 1 and fe3 == 0x7a and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f312bf9; op2val:0x802e3cd4;
op3val:0xbd7c0000; valaddr_reg:x3; val_offset:107385*0 + 3*279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107385*0 + 3*279*FLEN/8, x4, x1, x2)

inst_35796:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x312bf9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e3cd4 and fs3 == 1 and fe3 == 0x7a and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f312bf9; op2val:0x802e3cd4;
op3val:0xbd7e0000; valaddr_reg:x3; val_offset:107388*0 + 3*279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107388*0 + 3*279*FLEN/8, x4, x1, x2)

inst_35797:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x312bf9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e3cd4 and fs3 == 1 and fe3 == 0x7a and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f312bf9; op2val:0x802e3cd4;
op3val:0xbd7f0000; valaddr_reg:x3; val_offset:107391*0 + 3*279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107391*0 + 3*279*FLEN/8, x4, x1, x2)

inst_35798:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x312bf9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e3cd4 and fs3 == 1 and fe3 == 0x7a and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f312bf9; op2val:0x802e3cd4;
op3val:0xbd7f8000; valaddr_reg:x3; val_offset:107394*0 + 3*279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107394*0 + 3*279*FLEN/8, x4, x1, x2)

inst_35799:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x312bf9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e3cd4 and fs3 == 1 and fe3 == 0x7a and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f312bf9; op2val:0x802e3cd4;
op3val:0xbd7fc000; valaddr_reg:x3; val_offset:107397*0 + 3*279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107397*0 + 3*279*FLEN/8, x4, x1, x2)

inst_35800:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x312bf9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e3cd4 and fs3 == 1 and fe3 == 0x7a and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f312bf9; op2val:0x802e3cd4;
op3val:0xbd7fe000; valaddr_reg:x3; val_offset:107400*0 + 3*279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107400*0 + 3*279*FLEN/8, x4, x1, x2)

inst_35801:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x312bf9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e3cd4 and fs3 == 1 and fe3 == 0x7a and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f312bf9; op2val:0x802e3cd4;
op3val:0xbd7ff000; valaddr_reg:x3; val_offset:107403*0 + 3*279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107403*0 + 3*279*FLEN/8, x4, x1, x2)

inst_35802:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x312bf9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e3cd4 and fs3 == 1 and fe3 == 0x7a and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f312bf9; op2val:0x802e3cd4;
op3val:0xbd7ff800; valaddr_reg:x3; val_offset:107406*0 + 3*279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107406*0 + 3*279*FLEN/8, x4, x1, x2)

inst_35803:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x312bf9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e3cd4 and fs3 == 1 and fe3 == 0x7a and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f312bf9; op2val:0x802e3cd4;
op3val:0xbd7ffc00; valaddr_reg:x3; val_offset:107409*0 + 3*279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107409*0 + 3*279*FLEN/8, x4, x1, x2)

inst_35804:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x312bf9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e3cd4 and fs3 == 1 and fe3 == 0x7a and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f312bf9; op2val:0x802e3cd4;
op3val:0xbd7ffe00; valaddr_reg:x3; val_offset:107412*0 + 3*279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107412*0 + 3*279*FLEN/8, x4, x1, x2)

inst_35805:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x312bf9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e3cd4 and fs3 == 1 and fe3 == 0x7a and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f312bf9; op2val:0x802e3cd4;
op3val:0xbd7fff00; valaddr_reg:x3; val_offset:107415*0 + 3*279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107415*0 + 3*279*FLEN/8, x4, x1, x2)

inst_35806:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x312bf9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e3cd4 and fs3 == 1 and fe3 == 0x7a and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f312bf9; op2val:0x802e3cd4;
op3val:0xbd7fff80; valaddr_reg:x3; val_offset:107418*0 + 3*279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107418*0 + 3*279*FLEN/8, x4, x1, x2)

inst_35807:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x312bf9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e3cd4 and fs3 == 1 and fe3 == 0x7a and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f312bf9; op2val:0x802e3cd4;
op3val:0xbd7fffc0; valaddr_reg:x3; val_offset:107421*0 + 3*279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107421*0 + 3*279*FLEN/8, x4, x1, x2)

inst_35808:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x312bf9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e3cd4 and fs3 == 1 and fe3 == 0x7a and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f312bf9; op2val:0x802e3cd4;
op3val:0xbd7fffe0; valaddr_reg:x3; val_offset:107424*0 + 3*279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107424*0 + 3*279*FLEN/8, x4, x1, x2)

inst_35809:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x312bf9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e3cd4 and fs3 == 1 and fe3 == 0x7a and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f312bf9; op2val:0x802e3cd4;
op3val:0xbd7ffff0; valaddr_reg:x3; val_offset:107427*0 + 3*279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107427*0 + 3*279*FLEN/8, x4, x1, x2)

inst_35810:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x312bf9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e3cd4 and fs3 == 1 and fe3 == 0x7a and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f312bf9; op2val:0x802e3cd4;
op3val:0xbd7ffff8; valaddr_reg:x3; val_offset:107430*0 + 3*279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107430*0 + 3*279*FLEN/8, x4, x1, x2)

inst_35811:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x312bf9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e3cd4 and fs3 == 1 and fe3 == 0x7a and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f312bf9; op2val:0x802e3cd4;
op3val:0xbd7ffffc; valaddr_reg:x3; val_offset:107433*0 + 3*279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107433*0 + 3*279*FLEN/8, x4, x1, x2)

inst_35812:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x312bf9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e3cd4 and fs3 == 1 and fe3 == 0x7a and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f312bf9; op2val:0x802e3cd4;
op3val:0xbd7ffffe; valaddr_reg:x3; val_offset:107436*0 + 3*279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107436*0 + 3*279*FLEN/8, x4, x1, x2)

inst_35813:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x312bf9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e3cd4 and fs3 == 1 and fe3 == 0x7a and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f312bf9; op2val:0x802e3cd4;
op3val:0xbd7fffff; valaddr_reg:x3; val_offset:107439*0 + 3*279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107439*0 + 3*279*FLEN/8, x4, x1, x2)

inst_35814:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x312bf9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e3cd4 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f312bf9; op2val:0x802e3cd4;
op3val:0xbf800001; valaddr_reg:x3; val_offset:107442*0 + 3*279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107442*0 + 3*279*FLEN/8, x4, x1, x2)

inst_35815:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x312bf9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e3cd4 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f312bf9; op2val:0x802e3cd4;
op3val:0xbf800003; valaddr_reg:x3; val_offset:107445*0 + 3*279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107445*0 + 3*279*FLEN/8, x4, x1, x2)

inst_35816:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x312bf9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e3cd4 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f312bf9; op2val:0x802e3cd4;
op3val:0xbf800007; valaddr_reg:x3; val_offset:107448*0 + 3*279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107448*0 + 3*279*FLEN/8, x4, x1, x2)

inst_35817:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x312bf9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e3cd4 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f312bf9; op2val:0x802e3cd4;
op3val:0xbf999999; valaddr_reg:x3; val_offset:107451*0 + 3*279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107451*0 + 3*279*FLEN/8, x4, x1, x2)

inst_35818:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x312bf9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e3cd4 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f312bf9; op2val:0x802e3cd4;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:107454*0 + 3*279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107454*0 + 3*279*FLEN/8, x4, x1, x2)

inst_35819:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x312bf9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e3cd4 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f312bf9; op2val:0x802e3cd4;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:107457*0 + 3*279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107457*0 + 3*279*FLEN/8, x4, x1, x2)

inst_35820:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x312bf9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e3cd4 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f312bf9; op2val:0x802e3cd4;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:107460*0 + 3*279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107460*0 + 3*279*FLEN/8, x4, x1, x2)

inst_35821:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x312bf9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e3cd4 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f312bf9; op2val:0x802e3cd4;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:107463*0 + 3*279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107463*0 + 3*279*FLEN/8, x4, x1, x2)

inst_35822:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x312bf9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e3cd4 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f312bf9; op2val:0x802e3cd4;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:107466*0 + 3*279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107466*0 + 3*279*FLEN/8, x4, x1, x2)

inst_35823:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x312bf9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e3cd4 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f312bf9; op2val:0x802e3cd4;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:107469*0 + 3*279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107469*0 + 3*279*FLEN/8, x4, x1, x2)

inst_35824:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x312bf9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e3cd4 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f312bf9; op2val:0x802e3cd4;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:107472*0 + 3*279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107472*0 + 3*279*FLEN/8, x4, x1, x2)

inst_35825:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x312bf9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e3cd4 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f312bf9; op2val:0x802e3cd4;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:107475*0 + 3*279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107475*0 + 3*279*FLEN/8, x4, x1, x2)

inst_35826:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x312bf9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e3cd4 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f312bf9; op2val:0x802e3cd4;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:107478*0 + 3*279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107478*0 + 3*279*FLEN/8, x4, x1, x2)

inst_35827:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x312bf9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e3cd4 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f312bf9; op2val:0x802e3cd4;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:107481*0 + 3*279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107481*0 + 3*279*FLEN/8, x4, x1, x2)

inst_35828:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x312bf9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e3cd4 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f312bf9; op2val:0x802e3cd4;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:107484*0 + 3*279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107484*0 + 3*279*FLEN/8, x4, x1, x2)

inst_35829:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x312bf9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e3cd4 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f312bf9; op2val:0x802e3cd4;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:107487*0 + 3*279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107487*0 + 3*279*FLEN/8, x4, x1, x2)

inst_35830:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31316c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31316c; op2val:0x80000000;
op3val:0x80800001; valaddr_reg:x3; val_offset:107490*0 + 3*279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107490*0 + 3*279*FLEN/8, x4, x1, x2)

inst_35831:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31316c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31316c; op2val:0x80000000;
op3val:0x80800003; valaddr_reg:x3; val_offset:107493*0 + 3*279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107493*0 + 3*279*FLEN/8, x4, x1, x2)

inst_35832:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31316c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31316c; op2val:0x80000000;
op3val:0x80800007; valaddr_reg:x3; val_offset:107496*0 + 3*279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107496*0 + 3*279*FLEN/8, x4, x1, x2)

inst_35833:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31316c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31316c; op2val:0x80000000;
op3val:0x80999999; valaddr_reg:x3; val_offset:107499*0 + 3*279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107499*0 + 3*279*FLEN/8, x4, x1, x2)

inst_35834:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31316c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31316c; op2val:0x80000000;
op3val:0x80a49249; valaddr_reg:x3; val_offset:107502*0 + 3*279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107502*0 + 3*279*FLEN/8, x4, x1, x2)

inst_35835:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31316c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31316c; op2val:0x80000000;
op3val:0x80b33333; valaddr_reg:x3; val_offset:107505*0 + 3*279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107505*0 + 3*279*FLEN/8, x4, x1, x2)

inst_35836:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31316c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31316c; op2val:0x80000000;
op3val:0x80b6db6d; valaddr_reg:x3; val_offset:107508*0 + 3*279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107508*0 + 3*279*FLEN/8, x4, x1, x2)

inst_35837:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31316c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31316c; op2val:0x80000000;
op3val:0x80bbbbbb; valaddr_reg:x3; val_offset:107511*0 + 3*279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107511*0 + 3*279*FLEN/8, x4, x1, x2)

inst_35838:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31316c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31316c; op2val:0x80000000;
op3val:0x80c44444; valaddr_reg:x3; val_offset:107514*0 + 3*279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107514*0 + 3*279*FLEN/8, x4, x1, x2)

inst_35839:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31316c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31316c; op2val:0x80000000;
op3val:0x80cccccc; valaddr_reg:x3; val_offset:107517*0 + 3*279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107517*0 + 3*279*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2133911950,32,FLEN)
NAN_BOXED(3034672,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2133911950,32,FLEN)
NAN_BOXED(3034672,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2133911950,32,FLEN)
NAN_BOXED(3034672,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2133911950,32,FLEN)
NAN_BOXED(3034672,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2133911950,32,FLEN)
NAN_BOXED(3034672,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2133911950,32,FLEN)
NAN_BOXED(3034672,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2133911950,32,FLEN)
NAN_BOXED(3034672,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2133911950,32,FLEN)
NAN_BOXED(3034672,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2133911950,32,FLEN)
NAN_BOXED(3034672,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2133911950,32,FLEN)
NAN_BOXED(3034672,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2133911950,32,FLEN)
NAN_BOXED(3034672,32,FLEN)
NAN_BOXED(1216348160,32,FLEN)
NAN_BOXED(2133911950,32,FLEN)
NAN_BOXED(3034672,32,FLEN)
NAN_BOXED(1216348161,32,FLEN)
NAN_BOXED(2133911950,32,FLEN)
NAN_BOXED(3034672,32,FLEN)
NAN_BOXED(1216348163,32,FLEN)
NAN_BOXED(2133911950,32,FLEN)
NAN_BOXED(3034672,32,FLEN)
NAN_BOXED(1216348167,32,FLEN)
NAN_BOXED(2133911950,32,FLEN)
NAN_BOXED(3034672,32,FLEN)
NAN_BOXED(1216348175,32,FLEN)
NAN_BOXED(2133911950,32,FLEN)
NAN_BOXED(3034672,32,FLEN)
NAN_BOXED(1216348191,32,FLEN)
NAN_BOXED(2133911950,32,FLEN)
NAN_BOXED(3034672,32,FLEN)
NAN_BOXED(1216348223,32,FLEN)
NAN_BOXED(2133911950,32,FLEN)
NAN_BOXED(3034672,32,FLEN)
NAN_BOXED(1216348287,32,FLEN)
NAN_BOXED(2133911950,32,FLEN)
NAN_BOXED(3034672,32,FLEN)
NAN_BOXED(1216348415,32,FLEN)
NAN_BOXED(2133911950,32,FLEN)
NAN_BOXED(3034672,32,FLEN)
NAN_BOXED(1216348671,32,FLEN)
NAN_BOXED(2133911950,32,FLEN)
NAN_BOXED(3034672,32,FLEN)
NAN_BOXED(1216349183,32,FLEN)
NAN_BOXED(2133911950,32,FLEN)
NAN_BOXED(3034672,32,FLEN)
NAN_BOXED(1216350207,32,FLEN)
NAN_BOXED(2133911950,32,FLEN)
NAN_BOXED(3034672,32,FLEN)
NAN_BOXED(1216352255,32,FLEN)
NAN_BOXED(2133911950,32,FLEN)
NAN_BOXED(3034672,32,FLEN)
NAN_BOXED(1216356351,32,FLEN)
NAN_BOXED(2133911950,32,FLEN)
NAN_BOXED(3034672,32,FLEN)
NAN_BOXED(1216364543,32,FLEN)
NAN_BOXED(2133911950,32,FLEN)
NAN_BOXED(3034672,32,FLEN)
NAN_BOXED(1216380927,32,FLEN)
NAN_BOXED(2133911950,32,FLEN)
NAN_BOXED(3034672,32,FLEN)
NAN_BOXED(1216413695,32,FLEN)
NAN_BOXED(2133911950,32,FLEN)
NAN_BOXED(3034672,32,FLEN)
NAN_BOXED(1216479231,32,FLEN)
NAN_BOXED(2133911950,32,FLEN)
NAN_BOXED(3034672,32,FLEN)
NAN_BOXED(1216610303,32,FLEN)
NAN_BOXED(2133911950,32,FLEN)
NAN_BOXED(3034672,32,FLEN)
NAN_BOXED(1216872447,32,FLEN)
NAN_BOXED(2133911950,32,FLEN)
NAN_BOXED(3034672,32,FLEN)
NAN_BOXED(1217396735,32,FLEN)
NAN_BOXED(2133911950,32,FLEN)
NAN_BOXED(3034672,32,FLEN)
NAN_BOXED(1218445311,32,FLEN)
NAN_BOXED(2133911950,32,FLEN)
NAN_BOXED(3034672,32,FLEN)
NAN_BOXED(1220542463,32,FLEN)
NAN_BOXED(2133911950,32,FLEN)
NAN_BOXED(3034672,32,FLEN)
NAN_BOXED(1220542464,32,FLEN)
NAN_BOXED(2133911950,32,FLEN)
NAN_BOXED(3034672,32,FLEN)
NAN_BOXED(1222639616,32,FLEN)
NAN_BOXED(2133911950,32,FLEN)
NAN_BOXED(3034672,32,FLEN)
NAN_BOXED(1223688192,32,FLEN)
NAN_BOXED(2133911950,32,FLEN)
NAN_BOXED(3034672,32,FLEN)
NAN_BOXED(1224212480,32,FLEN)
NAN_BOXED(2133911950,32,FLEN)
NAN_BOXED(3034672,32,FLEN)
NAN_BOXED(1224474624,32,FLEN)
NAN_BOXED(2133911950,32,FLEN)
NAN_BOXED(3034672,32,FLEN)
NAN_BOXED(1224605696,32,FLEN)
NAN_BOXED(2133911950,32,FLEN)
NAN_BOXED(3034672,32,FLEN)
NAN_BOXED(1224671232,32,FLEN)
NAN_BOXED(2133911950,32,FLEN)
NAN_BOXED(3034672,32,FLEN)
NAN_BOXED(1224704000,32,FLEN)
NAN_BOXED(2133911950,32,FLEN)
NAN_BOXED(3034672,32,FLEN)
NAN_BOXED(1224720384,32,FLEN)
NAN_BOXED(2133911950,32,FLEN)
NAN_BOXED(3034672,32,FLEN)
NAN_BOXED(1224728576,32,FLEN)
NAN_BOXED(2133911950,32,FLEN)
NAN_BOXED(3034672,32,FLEN)
NAN_BOXED(1224732672,32,FLEN)
NAN_BOXED(2133911950,32,FLEN)
NAN_BOXED(3034672,32,FLEN)
NAN_BOXED(1224734720,32,FLEN)
NAN_BOXED(2133911950,32,FLEN)
NAN_BOXED(3034672,32,FLEN)
NAN_BOXED(1224735744,32,FLEN)
NAN_BOXED(2133911950,32,FLEN)
NAN_BOXED(3034672,32,FLEN)
NAN_BOXED(1224736256,32,FLEN)
NAN_BOXED(2133911950,32,FLEN)
NAN_BOXED(3034672,32,FLEN)
NAN_BOXED(1224736512,32,FLEN)
NAN_BOXED(2133911950,32,FLEN)
NAN_BOXED(3034672,32,FLEN)
NAN_BOXED(1224736640,32,FLEN)
NAN_BOXED(2133911950,32,FLEN)
NAN_BOXED(3034672,32,FLEN)
NAN_BOXED(1224736704,32,FLEN)
NAN_BOXED(2133911950,32,FLEN)
NAN_BOXED(3034672,32,FLEN)
NAN_BOXED(1224736736,32,FLEN)
NAN_BOXED(2133911950,32,FLEN)
NAN_BOXED(3034672,32,FLEN)
NAN_BOXED(1224736752,32,FLEN)
NAN_BOXED(2133911950,32,FLEN)
NAN_BOXED(3034672,32,FLEN)
NAN_BOXED(1224736760,32,FLEN)
NAN_BOXED(2133911950,32,FLEN)
NAN_BOXED(3034672,32,FLEN)
NAN_BOXED(1224736764,32,FLEN)
NAN_BOXED(2133911950,32,FLEN)
NAN_BOXED(3034672,32,FLEN)
NAN_BOXED(1224736766,32,FLEN)
NAN_BOXED(2133911950,32,FLEN)
NAN_BOXED(3034672,32,FLEN)
NAN_BOXED(1224736767,32,FLEN)
NAN_BOXED(2133928953,32,FLEN)
NAN_BOXED(2150513876,32,FLEN)
NAN_BOXED(3170893824,32,FLEN)
NAN_BOXED(2133928953,32,FLEN)
NAN_BOXED(2150513876,32,FLEN)
NAN_BOXED(3170893825,32,FLEN)
NAN_BOXED(2133928953,32,FLEN)
NAN_BOXED(2150513876,32,FLEN)
NAN_BOXED(3170893827,32,FLEN)
NAN_BOXED(2133928953,32,FLEN)
NAN_BOXED(2150513876,32,FLEN)
NAN_BOXED(3170893831,32,FLEN)
NAN_BOXED(2133928953,32,FLEN)
NAN_BOXED(2150513876,32,FLEN)
NAN_BOXED(3170893839,32,FLEN)
NAN_BOXED(2133928953,32,FLEN)
NAN_BOXED(2150513876,32,FLEN)
NAN_BOXED(3170893855,32,FLEN)
NAN_BOXED(2133928953,32,FLEN)
NAN_BOXED(2150513876,32,FLEN)
NAN_BOXED(3170893887,32,FLEN)
NAN_BOXED(2133928953,32,FLEN)
NAN_BOXED(2150513876,32,FLEN)
NAN_BOXED(3170893951,32,FLEN)
NAN_BOXED(2133928953,32,FLEN)
NAN_BOXED(2150513876,32,FLEN)
NAN_BOXED(3170894079,32,FLEN)
NAN_BOXED(2133928953,32,FLEN)
NAN_BOXED(2150513876,32,FLEN)
NAN_BOXED(3170894335,32,FLEN)
NAN_BOXED(2133928953,32,FLEN)
NAN_BOXED(2150513876,32,FLEN)
NAN_BOXED(3170894847,32,FLEN)
NAN_BOXED(2133928953,32,FLEN)
NAN_BOXED(2150513876,32,FLEN)
NAN_BOXED(3170895871,32,FLEN)
NAN_BOXED(2133928953,32,FLEN)
NAN_BOXED(2150513876,32,FLEN)
NAN_BOXED(3170897919,32,FLEN)
NAN_BOXED(2133928953,32,FLEN)
NAN_BOXED(2150513876,32,FLEN)
NAN_BOXED(3170902015,32,FLEN)
NAN_BOXED(2133928953,32,FLEN)
NAN_BOXED(2150513876,32,FLEN)
NAN_BOXED(3170910207,32,FLEN)
NAN_BOXED(2133928953,32,FLEN)
NAN_BOXED(2150513876,32,FLEN)
NAN_BOXED(3170926591,32,FLEN)
NAN_BOXED(2133928953,32,FLEN)
NAN_BOXED(2150513876,32,FLEN)
NAN_BOXED(3170959359,32,FLEN)
NAN_BOXED(2133928953,32,FLEN)
NAN_BOXED(2150513876,32,FLEN)
NAN_BOXED(3171024895,32,FLEN)
NAN_BOXED(2133928953,32,FLEN)
NAN_BOXED(2150513876,32,FLEN)
NAN_BOXED(3171155967,32,FLEN)
NAN_BOXED(2133928953,32,FLEN)
NAN_BOXED(2150513876,32,FLEN)
NAN_BOXED(3171418111,32,FLEN)
NAN_BOXED(2133928953,32,FLEN)
NAN_BOXED(2150513876,32,FLEN)
NAN_BOXED(3171942399,32,FLEN)
NAN_BOXED(2133928953,32,FLEN)
NAN_BOXED(2150513876,32,FLEN)
NAN_BOXED(3172990975,32,FLEN)
NAN_BOXED(2133928953,32,FLEN)
NAN_BOXED(2150513876,32,FLEN)
NAN_BOXED(3175088127,32,FLEN)
NAN_BOXED(2133928953,32,FLEN)
NAN_BOXED(2150513876,32,FLEN)
NAN_BOXED(3175088128,32,FLEN)
NAN_BOXED(2133928953,32,FLEN)
NAN_BOXED(2150513876,32,FLEN)
NAN_BOXED(3177185280,32,FLEN)
NAN_BOXED(2133928953,32,FLEN)
NAN_BOXED(2150513876,32,FLEN)
NAN_BOXED(3178233856,32,FLEN)
NAN_BOXED(2133928953,32,FLEN)
NAN_BOXED(2150513876,32,FLEN)
NAN_BOXED(3178758144,32,FLEN)
NAN_BOXED(2133928953,32,FLEN)
NAN_BOXED(2150513876,32,FLEN)
NAN_BOXED(3179020288,32,FLEN)
NAN_BOXED(2133928953,32,FLEN)
NAN_BOXED(2150513876,32,FLEN)
NAN_BOXED(3179151360,32,FLEN)
NAN_BOXED(2133928953,32,FLEN)
NAN_BOXED(2150513876,32,FLEN)
NAN_BOXED(3179216896,32,FLEN)
NAN_BOXED(2133928953,32,FLEN)
NAN_BOXED(2150513876,32,FLEN)
NAN_BOXED(3179249664,32,FLEN)
NAN_BOXED(2133928953,32,FLEN)
NAN_BOXED(2150513876,32,FLEN)
NAN_BOXED(3179266048,32,FLEN)
NAN_BOXED(2133928953,32,FLEN)
NAN_BOXED(2150513876,32,FLEN)
NAN_BOXED(3179274240,32,FLEN)
NAN_BOXED(2133928953,32,FLEN)
NAN_BOXED(2150513876,32,FLEN)
NAN_BOXED(3179278336,32,FLEN)
NAN_BOXED(2133928953,32,FLEN)
NAN_BOXED(2150513876,32,FLEN)
NAN_BOXED(3179280384,32,FLEN)
NAN_BOXED(2133928953,32,FLEN)
NAN_BOXED(2150513876,32,FLEN)
NAN_BOXED(3179281408,32,FLEN)
NAN_BOXED(2133928953,32,FLEN)
NAN_BOXED(2150513876,32,FLEN)
NAN_BOXED(3179281920,32,FLEN)
NAN_BOXED(2133928953,32,FLEN)
NAN_BOXED(2150513876,32,FLEN)
NAN_BOXED(3179282176,32,FLEN)
NAN_BOXED(2133928953,32,FLEN)
NAN_BOXED(2150513876,32,FLEN)
NAN_BOXED(3179282304,32,FLEN)
NAN_BOXED(2133928953,32,FLEN)
NAN_BOXED(2150513876,32,FLEN)
NAN_BOXED(3179282368,32,FLEN)
NAN_BOXED(2133928953,32,FLEN)
NAN_BOXED(2150513876,32,FLEN)
NAN_BOXED(3179282400,32,FLEN)
NAN_BOXED(2133928953,32,FLEN)
NAN_BOXED(2150513876,32,FLEN)
NAN_BOXED(3179282416,32,FLEN)
NAN_BOXED(2133928953,32,FLEN)
NAN_BOXED(2150513876,32,FLEN)
NAN_BOXED(3179282424,32,FLEN)
NAN_BOXED(2133928953,32,FLEN)
NAN_BOXED(2150513876,32,FLEN)
NAN_BOXED(3179282428,32,FLEN)
NAN_BOXED(2133928953,32,FLEN)
NAN_BOXED(2150513876,32,FLEN)
NAN_BOXED(3179282430,32,FLEN)
NAN_BOXED(2133928953,32,FLEN)
NAN_BOXED(2150513876,32,FLEN)
NAN_BOXED(3179282431,32,FLEN)
NAN_BOXED(2133928953,32,FLEN)
NAN_BOXED(2150513876,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2133928953,32,FLEN)
NAN_BOXED(2150513876,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2133928953,32,FLEN)
NAN_BOXED(2150513876,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
NAN_BOXED(2133928953,32,FLEN)
NAN_BOXED(2150513876,32,FLEN)
NAN_BOXED(3214514585,32,FLEN)
NAN_BOXED(2133928953,32,FLEN)
NAN_BOXED(2150513876,32,FLEN)
NAN_BOXED(3215233609,32,FLEN)
NAN_BOXED(2133928953,32,FLEN)
NAN_BOXED(2150513876,32,FLEN)
NAN_BOXED(3216192307,32,FLEN)
NAN_BOXED(2133928953,32,FLEN)
NAN_BOXED(2150513876,32,FLEN)
NAN_BOXED(3216431981,32,FLEN)
NAN_BOXED(2133928953,32,FLEN)
NAN_BOXED(2150513876,32,FLEN)
NAN_BOXED(3216751547,32,FLEN)
NAN_BOXED(2133928953,32,FLEN)
NAN_BOXED(2150513876,32,FLEN)
NAN_BOXED(3217310788,32,FLEN)
NAN_BOXED(2133928953,32,FLEN)
NAN_BOXED(2150513876,32,FLEN)
NAN_BOXED(3217870028,32,FLEN)
NAN_BOXED(2133928953,32,FLEN)
NAN_BOXED(2150513876,32,FLEN)
NAN_BOXED(3218828726,32,FLEN)
NAN_BOXED(2133928953,32,FLEN)
NAN_BOXED(2150513876,32,FLEN)
NAN_BOXED(3219547750,32,FLEN)
NAN_BOXED(2133928953,32,FLEN)
NAN_BOXED(2150513876,32,FLEN)
NAN_BOXED(3220027099,32,FLEN)
NAN_BOXED(2133928953,32,FLEN)
NAN_BOXED(2150513876,32,FLEN)
NAN_BOXED(3221225464,32,FLEN)
NAN_BOXED(2133928953,32,FLEN)
NAN_BOXED(2150513876,32,FLEN)
NAN_BOXED(3221225468,32,FLEN)
NAN_BOXED(2133928953,32,FLEN)
NAN_BOXED(2150513876,32,FLEN)
NAN_BOXED(3221225470,32,FLEN)
NAN_BOXED(2133930348,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872257,32,FLEN)
NAN_BOXED(2133930348,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872259,32,FLEN)
NAN_BOXED(2133930348,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872263,32,FLEN)
NAN_BOXED(2133930348,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2157549977,32,FLEN)
NAN_BOXED(2133930348,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2158269001,32,FLEN)
NAN_BOXED(2133930348,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2159227699,32,FLEN)
NAN_BOXED(2133930348,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2159467373,32,FLEN)
NAN_BOXED(2133930348,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2159786939,32,FLEN)
NAN_BOXED(2133930348,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2160346180,32,FLEN)
NAN_BOXED(2133930348,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2160905420,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
