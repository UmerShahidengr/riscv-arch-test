
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:17:59 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_36224:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33aa37 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33aa37; op2val:0x80000000;
op3val:0x8f00003f; valaddr_reg:x3; val_offset:108672*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108672*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36225:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33aa37 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33aa37; op2val:0x80000000;
op3val:0x8f00007f; valaddr_reg:x3; val_offset:108675*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108675*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36226:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33aa37 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33aa37; op2val:0x80000000;
op3val:0x8f0000ff; valaddr_reg:x3; val_offset:108678*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108678*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36227:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33aa37 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33aa37; op2val:0x80000000;
op3val:0x8f0001ff; valaddr_reg:x3; val_offset:108681*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108681*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36228:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33aa37 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33aa37; op2val:0x80000000;
op3val:0x8f0003ff; valaddr_reg:x3; val_offset:108684*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108684*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36229:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33aa37 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33aa37; op2val:0x80000000;
op3val:0x8f0007ff; valaddr_reg:x3; val_offset:108687*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108687*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36230:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33aa37 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33aa37; op2val:0x80000000;
op3val:0x8f000fff; valaddr_reg:x3; val_offset:108690*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108690*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36231:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33aa37 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33aa37; op2val:0x80000000;
op3val:0x8f001fff; valaddr_reg:x3; val_offset:108693*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108693*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36232:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33aa37 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33aa37; op2val:0x80000000;
op3val:0x8f003fff; valaddr_reg:x3; val_offset:108696*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108696*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36233:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33aa37 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33aa37; op2val:0x80000000;
op3val:0x8f007fff; valaddr_reg:x3; val_offset:108699*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108699*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36234:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33aa37 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33aa37; op2val:0x80000000;
op3val:0x8f00ffff; valaddr_reg:x3; val_offset:108702*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108702*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36235:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33aa37 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33aa37; op2val:0x80000000;
op3val:0x8f01ffff; valaddr_reg:x3; val_offset:108705*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108705*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36236:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33aa37 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33aa37; op2val:0x80000000;
op3val:0x8f03ffff; valaddr_reg:x3; val_offset:108708*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108708*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36237:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33aa37 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33aa37; op2val:0x80000000;
op3val:0x8f07ffff; valaddr_reg:x3; val_offset:108711*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108711*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36238:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33aa37 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33aa37; op2val:0x80000000;
op3val:0x8f0fffff; valaddr_reg:x3; val_offset:108714*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108714*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36239:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33aa37 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33aa37; op2val:0x80000000;
op3val:0x8f1fffff; valaddr_reg:x3; val_offset:108717*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108717*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36240:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33aa37 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33aa37; op2val:0x80000000;
op3val:0x8f3fffff; valaddr_reg:x3; val_offset:108720*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108720*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36241:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33aa37 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33aa37; op2val:0x80000000;
op3val:0x8f400000; valaddr_reg:x3; val_offset:108723*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108723*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36242:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33aa37 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33aa37; op2val:0x80000000;
op3val:0x8f600000; valaddr_reg:x3; val_offset:108726*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108726*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36243:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33aa37 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33aa37; op2val:0x80000000;
op3val:0x8f700000; valaddr_reg:x3; val_offset:108729*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108729*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36244:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33aa37 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33aa37; op2val:0x80000000;
op3val:0x8f780000; valaddr_reg:x3; val_offset:108732*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108732*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36245:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33aa37 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33aa37; op2val:0x80000000;
op3val:0x8f7c0000; valaddr_reg:x3; val_offset:108735*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108735*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36246:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33aa37 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33aa37; op2val:0x80000000;
op3val:0x8f7e0000; valaddr_reg:x3; val_offset:108738*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108738*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36247:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33aa37 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33aa37; op2val:0x80000000;
op3val:0x8f7f0000; valaddr_reg:x3; val_offset:108741*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108741*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36248:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33aa37 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33aa37; op2val:0x80000000;
op3val:0x8f7f8000; valaddr_reg:x3; val_offset:108744*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108744*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36249:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33aa37 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33aa37; op2val:0x80000000;
op3val:0x8f7fc000; valaddr_reg:x3; val_offset:108747*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108747*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36250:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33aa37 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33aa37; op2val:0x80000000;
op3val:0x8f7fe000; valaddr_reg:x3; val_offset:108750*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108750*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36251:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33aa37 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33aa37; op2val:0x80000000;
op3val:0x8f7ff000; valaddr_reg:x3; val_offset:108753*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108753*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36252:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33aa37 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33aa37; op2val:0x80000000;
op3val:0x8f7ff800; valaddr_reg:x3; val_offset:108756*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108756*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36253:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33aa37 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33aa37; op2val:0x80000000;
op3val:0x8f7ffc00; valaddr_reg:x3; val_offset:108759*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108759*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36254:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33aa37 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33aa37; op2val:0x80000000;
op3val:0x8f7ffe00; valaddr_reg:x3; val_offset:108762*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108762*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36255:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33aa37 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33aa37; op2val:0x80000000;
op3val:0x8f7fff00; valaddr_reg:x3; val_offset:108765*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108765*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36256:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33aa37 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33aa37; op2val:0x80000000;
op3val:0x8f7fff80; valaddr_reg:x3; val_offset:108768*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108768*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36257:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33aa37 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33aa37; op2val:0x80000000;
op3val:0x8f7fffc0; valaddr_reg:x3; val_offset:108771*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108771*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36258:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33aa37 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33aa37; op2val:0x80000000;
op3val:0x8f7fffe0; valaddr_reg:x3; val_offset:108774*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108774*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36259:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33aa37 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33aa37; op2val:0x80000000;
op3val:0x8f7ffff0; valaddr_reg:x3; val_offset:108777*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108777*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36260:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33aa37 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33aa37; op2val:0x80000000;
op3val:0x8f7ffff8; valaddr_reg:x3; val_offset:108780*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108780*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36261:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33aa37 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33aa37; op2val:0x80000000;
op3val:0x8f7ffffc; valaddr_reg:x3; val_offset:108783*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108783*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36262:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33aa37 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33aa37; op2val:0x80000000;
op3val:0x8f7ffffe; valaddr_reg:x3; val_offset:108786*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108786*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36263:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33aa37 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33aa37; op2val:0x80000000;
op3val:0x8f7fffff; valaddr_reg:x3; val_offset:108789*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108789*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36264:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33cfd0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d8f0a and fs3 == 0 and fe3 == 0x66 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33cfd0; op2val:0x2d8f0a;
op3val:0x33000000; valaddr_reg:x3; val_offset:108792*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108792*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36265:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33cfd0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d8f0a and fs3 == 0 and fe3 == 0x66 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33cfd0; op2val:0x2d8f0a;
op3val:0x33000001; valaddr_reg:x3; val_offset:108795*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108795*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36266:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33cfd0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d8f0a and fs3 == 0 and fe3 == 0x66 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33cfd0; op2val:0x2d8f0a;
op3val:0x33000003; valaddr_reg:x3; val_offset:108798*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108798*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36267:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33cfd0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d8f0a and fs3 == 0 and fe3 == 0x66 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33cfd0; op2val:0x2d8f0a;
op3val:0x33000007; valaddr_reg:x3; val_offset:108801*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108801*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36268:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33cfd0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d8f0a and fs3 == 0 and fe3 == 0x66 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33cfd0; op2val:0x2d8f0a;
op3val:0x3300000f; valaddr_reg:x3; val_offset:108804*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108804*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36269:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33cfd0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d8f0a and fs3 == 0 and fe3 == 0x66 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33cfd0; op2val:0x2d8f0a;
op3val:0x3300001f; valaddr_reg:x3; val_offset:108807*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108807*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36270:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33cfd0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d8f0a and fs3 == 0 and fe3 == 0x66 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33cfd0; op2val:0x2d8f0a;
op3val:0x3300003f; valaddr_reg:x3; val_offset:108810*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108810*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36271:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33cfd0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d8f0a and fs3 == 0 and fe3 == 0x66 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33cfd0; op2val:0x2d8f0a;
op3val:0x3300007f; valaddr_reg:x3; val_offset:108813*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108813*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36272:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33cfd0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d8f0a and fs3 == 0 and fe3 == 0x66 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33cfd0; op2val:0x2d8f0a;
op3val:0x330000ff; valaddr_reg:x3; val_offset:108816*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108816*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36273:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33cfd0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d8f0a and fs3 == 0 and fe3 == 0x66 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33cfd0; op2val:0x2d8f0a;
op3val:0x330001ff; valaddr_reg:x3; val_offset:108819*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108819*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36274:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33cfd0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d8f0a and fs3 == 0 and fe3 == 0x66 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33cfd0; op2val:0x2d8f0a;
op3val:0x330003ff; valaddr_reg:x3; val_offset:108822*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108822*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36275:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33cfd0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d8f0a and fs3 == 0 and fe3 == 0x66 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33cfd0; op2val:0x2d8f0a;
op3val:0x330007ff; valaddr_reg:x3; val_offset:108825*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108825*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36276:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33cfd0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d8f0a and fs3 == 0 and fe3 == 0x66 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33cfd0; op2val:0x2d8f0a;
op3val:0x33000fff; valaddr_reg:x3; val_offset:108828*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108828*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36277:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33cfd0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d8f0a and fs3 == 0 and fe3 == 0x66 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33cfd0; op2val:0x2d8f0a;
op3val:0x33001fff; valaddr_reg:x3; val_offset:108831*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108831*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36278:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33cfd0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d8f0a and fs3 == 0 and fe3 == 0x66 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33cfd0; op2val:0x2d8f0a;
op3val:0x33003fff; valaddr_reg:x3; val_offset:108834*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108834*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36279:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33cfd0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d8f0a and fs3 == 0 and fe3 == 0x66 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33cfd0; op2val:0x2d8f0a;
op3val:0x33007fff; valaddr_reg:x3; val_offset:108837*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108837*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36280:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33cfd0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d8f0a and fs3 == 0 and fe3 == 0x66 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33cfd0; op2val:0x2d8f0a;
op3val:0x3300ffff; valaddr_reg:x3; val_offset:108840*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108840*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36281:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33cfd0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d8f0a and fs3 == 0 and fe3 == 0x66 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33cfd0; op2val:0x2d8f0a;
op3val:0x3301ffff; valaddr_reg:x3; val_offset:108843*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108843*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36282:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33cfd0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d8f0a and fs3 == 0 and fe3 == 0x66 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33cfd0; op2val:0x2d8f0a;
op3val:0x3303ffff; valaddr_reg:x3; val_offset:108846*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108846*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36283:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33cfd0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d8f0a and fs3 == 0 and fe3 == 0x66 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33cfd0; op2val:0x2d8f0a;
op3val:0x3307ffff; valaddr_reg:x3; val_offset:108849*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108849*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36284:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33cfd0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d8f0a and fs3 == 0 and fe3 == 0x66 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33cfd0; op2val:0x2d8f0a;
op3val:0x330fffff; valaddr_reg:x3; val_offset:108852*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108852*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36285:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33cfd0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d8f0a and fs3 == 0 and fe3 == 0x66 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33cfd0; op2val:0x2d8f0a;
op3val:0x331fffff; valaddr_reg:x3; val_offset:108855*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108855*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36286:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33cfd0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d8f0a and fs3 == 0 and fe3 == 0x66 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33cfd0; op2val:0x2d8f0a;
op3val:0x333fffff; valaddr_reg:x3; val_offset:108858*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108858*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36287:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33cfd0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d8f0a and fs3 == 0 and fe3 == 0x66 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33cfd0; op2val:0x2d8f0a;
op3val:0x33400000; valaddr_reg:x3; val_offset:108861*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108861*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36288:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33cfd0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d8f0a and fs3 == 0 and fe3 == 0x66 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33cfd0; op2val:0x2d8f0a;
op3val:0x33600000; valaddr_reg:x3; val_offset:108864*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108864*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36289:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33cfd0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d8f0a and fs3 == 0 and fe3 == 0x66 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33cfd0; op2val:0x2d8f0a;
op3val:0x33700000; valaddr_reg:x3; val_offset:108867*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108867*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36290:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33cfd0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d8f0a and fs3 == 0 and fe3 == 0x66 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33cfd0; op2val:0x2d8f0a;
op3val:0x33780000; valaddr_reg:x3; val_offset:108870*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108870*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36291:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33cfd0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d8f0a and fs3 == 0 and fe3 == 0x66 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33cfd0; op2val:0x2d8f0a;
op3val:0x337c0000; valaddr_reg:x3; val_offset:108873*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108873*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36292:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33cfd0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d8f0a and fs3 == 0 and fe3 == 0x66 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33cfd0; op2val:0x2d8f0a;
op3val:0x337e0000; valaddr_reg:x3; val_offset:108876*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108876*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36293:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33cfd0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d8f0a and fs3 == 0 and fe3 == 0x66 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33cfd0; op2val:0x2d8f0a;
op3val:0x337f0000; valaddr_reg:x3; val_offset:108879*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108879*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36294:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33cfd0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d8f0a and fs3 == 0 and fe3 == 0x66 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33cfd0; op2val:0x2d8f0a;
op3val:0x337f8000; valaddr_reg:x3; val_offset:108882*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108882*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36295:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33cfd0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d8f0a and fs3 == 0 and fe3 == 0x66 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33cfd0; op2val:0x2d8f0a;
op3val:0x337fc000; valaddr_reg:x3; val_offset:108885*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108885*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36296:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33cfd0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d8f0a and fs3 == 0 and fe3 == 0x66 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33cfd0; op2val:0x2d8f0a;
op3val:0x337fe000; valaddr_reg:x3; val_offset:108888*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108888*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36297:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33cfd0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d8f0a and fs3 == 0 and fe3 == 0x66 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33cfd0; op2val:0x2d8f0a;
op3val:0x337ff000; valaddr_reg:x3; val_offset:108891*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108891*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36298:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33cfd0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d8f0a and fs3 == 0 and fe3 == 0x66 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33cfd0; op2val:0x2d8f0a;
op3val:0x337ff800; valaddr_reg:x3; val_offset:108894*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108894*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36299:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33cfd0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d8f0a and fs3 == 0 and fe3 == 0x66 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33cfd0; op2val:0x2d8f0a;
op3val:0x337ffc00; valaddr_reg:x3; val_offset:108897*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108897*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36300:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33cfd0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d8f0a and fs3 == 0 and fe3 == 0x66 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33cfd0; op2val:0x2d8f0a;
op3val:0x337ffe00; valaddr_reg:x3; val_offset:108900*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108900*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36301:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33cfd0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d8f0a and fs3 == 0 and fe3 == 0x66 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33cfd0; op2val:0x2d8f0a;
op3val:0x337fff00; valaddr_reg:x3; val_offset:108903*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108903*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36302:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33cfd0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d8f0a and fs3 == 0 and fe3 == 0x66 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33cfd0; op2val:0x2d8f0a;
op3val:0x337fff80; valaddr_reg:x3; val_offset:108906*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108906*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36303:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33cfd0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d8f0a and fs3 == 0 and fe3 == 0x66 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33cfd0; op2val:0x2d8f0a;
op3val:0x337fffc0; valaddr_reg:x3; val_offset:108909*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108909*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36304:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33cfd0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d8f0a and fs3 == 0 and fe3 == 0x66 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33cfd0; op2val:0x2d8f0a;
op3val:0x337fffe0; valaddr_reg:x3; val_offset:108912*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108912*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36305:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33cfd0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d8f0a and fs3 == 0 and fe3 == 0x66 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33cfd0; op2val:0x2d8f0a;
op3val:0x337ffff0; valaddr_reg:x3; val_offset:108915*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108915*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36306:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33cfd0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d8f0a and fs3 == 0 and fe3 == 0x66 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33cfd0; op2val:0x2d8f0a;
op3val:0x337ffff8; valaddr_reg:x3; val_offset:108918*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108918*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36307:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33cfd0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d8f0a and fs3 == 0 and fe3 == 0x66 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33cfd0; op2val:0x2d8f0a;
op3val:0x337ffffc; valaddr_reg:x3; val_offset:108921*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108921*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36308:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33cfd0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d8f0a and fs3 == 0 and fe3 == 0x66 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33cfd0; op2val:0x2d8f0a;
op3val:0x337ffffe; valaddr_reg:x3; val_offset:108924*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108924*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36309:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33cfd0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d8f0a and fs3 == 0 and fe3 == 0x66 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33cfd0; op2val:0x2d8f0a;
op3val:0x337fffff; valaddr_reg:x3; val_offset:108927*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108927*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36310:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33cfd0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d8f0a and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33cfd0; op2val:0x2d8f0a;
op3val:0x3f800001; valaddr_reg:x3; val_offset:108930*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108930*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36311:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33cfd0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d8f0a and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33cfd0; op2val:0x2d8f0a;
op3val:0x3f800003; valaddr_reg:x3; val_offset:108933*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108933*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36312:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33cfd0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d8f0a and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33cfd0; op2val:0x2d8f0a;
op3val:0x3f800007; valaddr_reg:x3; val_offset:108936*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108936*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36313:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33cfd0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d8f0a and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33cfd0; op2val:0x2d8f0a;
op3val:0x3f999999; valaddr_reg:x3; val_offset:108939*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108939*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36314:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33cfd0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d8f0a and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33cfd0; op2val:0x2d8f0a;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:108942*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108942*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36315:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33cfd0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d8f0a and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33cfd0; op2val:0x2d8f0a;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:108945*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108945*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36316:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33cfd0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d8f0a and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33cfd0; op2val:0x2d8f0a;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:108948*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108948*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36317:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33cfd0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d8f0a and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33cfd0; op2val:0x2d8f0a;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:108951*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108951*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36318:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33cfd0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d8f0a and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33cfd0; op2val:0x2d8f0a;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:108954*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108954*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36319:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33cfd0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d8f0a and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33cfd0; op2val:0x2d8f0a;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:108957*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108957*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36320:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33cfd0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d8f0a and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33cfd0; op2val:0x2d8f0a;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:108960*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108960*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36321:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33cfd0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d8f0a and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33cfd0; op2val:0x2d8f0a;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:108963*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108963*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36322:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33cfd0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d8f0a and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33cfd0; op2val:0x2d8f0a;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:108966*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108966*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36323:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33cfd0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d8f0a and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33cfd0; op2val:0x2d8f0a;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:108969*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108969*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36324:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33cfd0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d8f0a and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33cfd0; op2val:0x2d8f0a;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:108972*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108972*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36325:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33cfd0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d8f0a and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33cfd0; op2val:0x2d8f0a;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:108975*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108975*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36326:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33ec90 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x361f09 and fs3 == 1 and fe3 == 0xce and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33ec90; op2val:0xbfb61f09;
op3val:0xe7000000; valaddr_reg:x3; val_offset:108978*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108978*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36327:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33ec90 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x361f09 and fs3 == 1 and fe3 == 0xce and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33ec90; op2val:0xbfb61f09;
op3val:0xe7000001; valaddr_reg:x3; val_offset:108981*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108981*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36328:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33ec90 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x361f09 and fs3 == 1 and fe3 == 0xce and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33ec90; op2val:0xbfb61f09;
op3val:0xe7000003; valaddr_reg:x3; val_offset:108984*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108984*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36329:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33ec90 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x361f09 and fs3 == 1 and fe3 == 0xce and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33ec90; op2val:0xbfb61f09;
op3val:0xe7000007; valaddr_reg:x3; val_offset:108987*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108987*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36330:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33ec90 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x361f09 and fs3 == 1 and fe3 == 0xce and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33ec90; op2val:0xbfb61f09;
op3val:0xe700000f; valaddr_reg:x3; val_offset:108990*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108990*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36331:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33ec90 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x361f09 and fs3 == 1 and fe3 == 0xce and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33ec90; op2val:0xbfb61f09;
op3val:0xe700001f; valaddr_reg:x3; val_offset:108993*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108993*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36332:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33ec90 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x361f09 and fs3 == 1 and fe3 == 0xce and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33ec90; op2val:0xbfb61f09;
op3val:0xe700003f; valaddr_reg:x3; val_offset:108996*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108996*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36333:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33ec90 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x361f09 and fs3 == 1 and fe3 == 0xce and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33ec90; op2val:0xbfb61f09;
op3val:0xe700007f; valaddr_reg:x3; val_offset:108999*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108999*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36334:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33ec90 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x361f09 and fs3 == 1 and fe3 == 0xce and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33ec90; op2val:0xbfb61f09;
op3val:0xe70000ff; valaddr_reg:x3; val_offset:109002*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109002*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36335:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33ec90 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x361f09 and fs3 == 1 and fe3 == 0xce and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33ec90; op2val:0xbfb61f09;
op3val:0xe70001ff; valaddr_reg:x3; val_offset:109005*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109005*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36336:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33ec90 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x361f09 and fs3 == 1 and fe3 == 0xce and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33ec90; op2val:0xbfb61f09;
op3val:0xe70003ff; valaddr_reg:x3; val_offset:109008*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109008*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36337:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33ec90 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x361f09 and fs3 == 1 and fe3 == 0xce and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33ec90; op2val:0xbfb61f09;
op3val:0xe70007ff; valaddr_reg:x3; val_offset:109011*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109011*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36338:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33ec90 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x361f09 and fs3 == 1 and fe3 == 0xce and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33ec90; op2val:0xbfb61f09;
op3val:0xe7000fff; valaddr_reg:x3; val_offset:109014*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109014*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36339:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33ec90 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x361f09 and fs3 == 1 and fe3 == 0xce and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33ec90; op2val:0xbfb61f09;
op3val:0xe7001fff; valaddr_reg:x3; val_offset:109017*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109017*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36340:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33ec90 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x361f09 and fs3 == 1 and fe3 == 0xce and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33ec90; op2val:0xbfb61f09;
op3val:0xe7003fff; valaddr_reg:x3; val_offset:109020*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109020*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36341:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33ec90 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x361f09 and fs3 == 1 and fe3 == 0xce and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33ec90; op2val:0xbfb61f09;
op3val:0xe7007fff; valaddr_reg:x3; val_offset:109023*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109023*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36342:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33ec90 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x361f09 and fs3 == 1 and fe3 == 0xce and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33ec90; op2val:0xbfb61f09;
op3val:0xe700ffff; valaddr_reg:x3; val_offset:109026*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109026*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36343:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33ec90 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x361f09 and fs3 == 1 and fe3 == 0xce and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33ec90; op2val:0xbfb61f09;
op3val:0xe701ffff; valaddr_reg:x3; val_offset:109029*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109029*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36344:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33ec90 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x361f09 and fs3 == 1 and fe3 == 0xce and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33ec90; op2val:0xbfb61f09;
op3val:0xe703ffff; valaddr_reg:x3; val_offset:109032*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109032*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36345:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33ec90 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x361f09 and fs3 == 1 and fe3 == 0xce and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33ec90; op2val:0xbfb61f09;
op3val:0xe707ffff; valaddr_reg:x3; val_offset:109035*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109035*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36346:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33ec90 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x361f09 and fs3 == 1 and fe3 == 0xce and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33ec90; op2val:0xbfb61f09;
op3val:0xe70fffff; valaddr_reg:x3; val_offset:109038*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109038*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36347:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33ec90 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x361f09 and fs3 == 1 and fe3 == 0xce and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33ec90; op2val:0xbfb61f09;
op3val:0xe71fffff; valaddr_reg:x3; val_offset:109041*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109041*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36348:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33ec90 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x361f09 and fs3 == 1 and fe3 == 0xce and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33ec90; op2val:0xbfb61f09;
op3val:0xe73fffff; valaddr_reg:x3; val_offset:109044*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109044*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36349:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33ec90 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x361f09 and fs3 == 1 and fe3 == 0xce and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33ec90; op2val:0xbfb61f09;
op3val:0xe7400000; valaddr_reg:x3; val_offset:109047*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109047*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36350:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33ec90 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x361f09 and fs3 == 1 and fe3 == 0xce and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33ec90; op2val:0xbfb61f09;
op3val:0xe7600000; valaddr_reg:x3; val_offset:109050*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109050*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36351:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33ec90 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x361f09 and fs3 == 1 and fe3 == 0xce and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33ec90; op2val:0xbfb61f09;
op3val:0xe7700000; valaddr_reg:x3; val_offset:109053*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109053*0 + 3*283*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2134092343,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399141951,32,FLEN)
NAN_BOXED(2134092343,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399142015,32,FLEN)
NAN_BOXED(2134092343,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399142143,32,FLEN)
NAN_BOXED(2134092343,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399142399,32,FLEN)
NAN_BOXED(2134092343,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399142911,32,FLEN)
NAN_BOXED(2134092343,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399143935,32,FLEN)
NAN_BOXED(2134092343,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399145983,32,FLEN)
NAN_BOXED(2134092343,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399150079,32,FLEN)
NAN_BOXED(2134092343,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399158271,32,FLEN)
NAN_BOXED(2134092343,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399174655,32,FLEN)
NAN_BOXED(2134092343,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399207423,32,FLEN)
NAN_BOXED(2134092343,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399272959,32,FLEN)
NAN_BOXED(2134092343,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399404031,32,FLEN)
NAN_BOXED(2134092343,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399666175,32,FLEN)
NAN_BOXED(2134092343,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2400190463,32,FLEN)
NAN_BOXED(2134092343,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2401239039,32,FLEN)
NAN_BOXED(2134092343,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2403336191,32,FLEN)
NAN_BOXED(2134092343,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2403336192,32,FLEN)
NAN_BOXED(2134092343,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2405433344,32,FLEN)
NAN_BOXED(2134092343,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2406481920,32,FLEN)
NAN_BOXED(2134092343,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407006208,32,FLEN)
NAN_BOXED(2134092343,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407268352,32,FLEN)
NAN_BOXED(2134092343,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407399424,32,FLEN)
NAN_BOXED(2134092343,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407464960,32,FLEN)
NAN_BOXED(2134092343,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407497728,32,FLEN)
NAN_BOXED(2134092343,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407514112,32,FLEN)
NAN_BOXED(2134092343,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407522304,32,FLEN)
NAN_BOXED(2134092343,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407526400,32,FLEN)
NAN_BOXED(2134092343,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407528448,32,FLEN)
NAN_BOXED(2134092343,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407529472,32,FLEN)
NAN_BOXED(2134092343,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407529984,32,FLEN)
NAN_BOXED(2134092343,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407530240,32,FLEN)
NAN_BOXED(2134092343,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407530368,32,FLEN)
NAN_BOXED(2134092343,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407530432,32,FLEN)
NAN_BOXED(2134092343,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407530464,32,FLEN)
NAN_BOXED(2134092343,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407530480,32,FLEN)
NAN_BOXED(2134092343,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407530488,32,FLEN)
NAN_BOXED(2134092343,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407530492,32,FLEN)
NAN_BOXED(2134092343,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407530494,32,FLEN)
NAN_BOXED(2134092343,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407530495,32,FLEN)
NAN_BOXED(2134101968,32,FLEN)
NAN_BOXED(2985738,32,FLEN)
NAN_BOXED(855638016,32,FLEN)
NAN_BOXED(2134101968,32,FLEN)
NAN_BOXED(2985738,32,FLEN)
NAN_BOXED(855638017,32,FLEN)
NAN_BOXED(2134101968,32,FLEN)
NAN_BOXED(2985738,32,FLEN)
NAN_BOXED(855638019,32,FLEN)
NAN_BOXED(2134101968,32,FLEN)
NAN_BOXED(2985738,32,FLEN)
NAN_BOXED(855638023,32,FLEN)
NAN_BOXED(2134101968,32,FLEN)
NAN_BOXED(2985738,32,FLEN)
NAN_BOXED(855638031,32,FLEN)
NAN_BOXED(2134101968,32,FLEN)
NAN_BOXED(2985738,32,FLEN)
NAN_BOXED(855638047,32,FLEN)
NAN_BOXED(2134101968,32,FLEN)
NAN_BOXED(2985738,32,FLEN)
NAN_BOXED(855638079,32,FLEN)
NAN_BOXED(2134101968,32,FLEN)
NAN_BOXED(2985738,32,FLEN)
NAN_BOXED(855638143,32,FLEN)
NAN_BOXED(2134101968,32,FLEN)
NAN_BOXED(2985738,32,FLEN)
NAN_BOXED(855638271,32,FLEN)
NAN_BOXED(2134101968,32,FLEN)
NAN_BOXED(2985738,32,FLEN)
NAN_BOXED(855638527,32,FLEN)
NAN_BOXED(2134101968,32,FLEN)
NAN_BOXED(2985738,32,FLEN)
NAN_BOXED(855639039,32,FLEN)
NAN_BOXED(2134101968,32,FLEN)
NAN_BOXED(2985738,32,FLEN)
NAN_BOXED(855640063,32,FLEN)
NAN_BOXED(2134101968,32,FLEN)
NAN_BOXED(2985738,32,FLEN)
NAN_BOXED(855642111,32,FLEN)
NAN_BOXED(2134101968,32,FLEN)
NAN_BOXED(2985738,32,FLEN)
NAN_BOXED(855646207,32,FLEN)
NAN_BOXED(2134101968,32,FLEN)
NAN_BOXED(2985738,32,FLEN)
NAN_BOXED(855654399,32,FLEN)
NAN_BOXED(2134101968,32,FLEN)
NAN_BOXED(2985738,32,FLEN)
NAN_BOXED(855670783,32,FLEN)
NAN_BOXED(2134101968,32,FLEN)
NAN_BOXED(2985738,32,FLEN)
NAN_BOXED(855703551,32,FLEN)
NAN_BOXED(2134101968,32,FLEN)
NAN_BOXED(2985738,32,FLEN)
NAN_BOXED(855769087,32,FLEN)
NAN_BOXED(2134101968,32,FLEN)
NAN_BOXED(2985738,32,FLEN)
NAN_BOXED(855900159,32,FLEN)
NAN_BOXED(2134101968,32,FLEN)
NAN_BOXED(2985738,32,FLEN)
NAN_BOXED(856162303,32,FLEN)
NAN_BOXED(2134101968,32,FLEN)
NAN_BOXED(2985738,32,FLEN)
NAN_BOXED(856686591,32,FLEN)
NAN_BOXED(2134101968,32,FLEN)
NAN_BOXED(2985738,32,FLEN)
NAN_BOXED(857735167,32,FLEN)
NAN_BOXED(2134101968,32,FLEN)
NAN_BOXED(2985738,32,FLEN)
NAN_BOXED(859832319,32,FLEN)
NAN_BOXED(2134101968,32,FLEN)
NAN_BOXED(2985738,32,FLEN)
NAN_BOXED(859832320,32,FLEN)
NAN_BOXED(2134101968,32,FLEN)
NAN_BOXED(2985738,32,FLEN)
NAN_BOXED(861929472,32,FLEN)
NAN_BOXED(2134101968,32,FLEN)
NAN_BOXED(2985738,32,FLEN)
NAN_BOXED(862978048,32,FLEN)
NAN_BOXED(2134101968,32,FLEN)
NAN_BOXED(2985738,32,FLEN)
NAN_BOXED(863502336,32,FLEN)
NAN_BOXED(2134101968,32,FLEN)
NAN_BOXED(2985738,32,FLEN)
NAN_BOXED(863764480,32,FLEN)
NAN_BOXED(2134101968,32,FLEN)
NAN_BOXED(2985738,32,FLEN)
NAN_BOXED(863895552,32,FLEN)
NAN_BOXED(2134101968,32,FLEN)
NAN_BOXED(2985738,32,FLEN)
NAN_BOXED(863961088,32,FLEN)
NAN_BOXED(2134101968,32,FLEN)
NAN_BOXED(2985738,32,FLEN)
NAN_BOXED(863993856,32,FLEN)
NAN_BOXED(2134101968,32,FLEN)
NAN_BOXED(2985738,32,FLEN)
NAN_BOXED(864010240,32,FLEN)
NAN_BOXED(2134101968,32,FLEN)
NAN_BOXED(2985738,32,FLEN)
NAN_BOXED(864018432,32,FLEN)
NAN_BOXED(2134101968,32,FLEN)
NAN_BOXED(2985738,32,FLEN)
NAN_BOXED(864022528,32,FLEN)
NAN_BOXED(2134101968,32,FLEN)
NAN_BOXED(2985738,32,FLEN)
NAN_BOXED(864024576,32,FLEN)
NAN_BOXED(2134101968,32,FLEN)
NAN_BOXED(2985738,32,FLEN)
NAN_BOXED(864025600,32,FLEN)
NAN_BOXED(2134101968,32,FLEN)
NAN_BOXED(2985738,32,FLEN)
NAN_BOXED(864026112,32,FLEN)
NAN_BOXED(2134101968,32,FLEN)
NAN_BOXED(2985738,32,FLEN)
NAN_BOXED(864026368,32,FLEN)
NAN_BOXED(2134101968,32,FLEN)
NAN_BOXED(2985738,32,FLEN)
NAN_BOXED(864026496,32,FLEN)
NAN_BOXED(2134101968,32,FLEN)
NAN_BOXED(2985738,32,FLEN)
NAN_BOXED(864026560,32,FLEN)
NAN_BOXED(2134101968,32,FLEN)
NAN_BOXED(2985738,32,FLEN)
NAN_BOXED(864026592,32,FLEN)
NAN_BOXED(2134101968,32,FLEN)
NAN_BOXED(2985738,32,FLEN)
NAN_BOXED(864026608,32,FLEN)
NAN_BOXED(2134101968,32,FLEN)
NAN_BOXED(2985738,32,FLEN)
NAN_BOXED(864026616,32,FLEN)
NAN_BOXED(2134101968,32,FLEN)
NAN_BOXED(2985738,32,FLEN)
NAN_BOXED(864026620,32,FLEN)
NAN_BOXED(2134101968,32,FLEN)
NAN_BOXED(2985738,32,FLEN)
NAN_BOXED(864026622,32,FLEN)
NAN_BOXED(2134101968,32,FLEN)
NAN_BOXED(2985738,32,FLEN)
NAN_BOXED(864026623,32,FLEN)
NAN_BOXED(2134101968,32,FLEN)
NAN_BOXED(2985738,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2134101968,32,FLEN)
NAN_BOXED(2985738,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2134101968,32,FLEN)
NAN_BOXED(2985738,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2134101968,32,FLEN)
NAN_BOXED(2985738,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2134101968,32,FLEN)
NAN_BOXED(2985738,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2134101968,32,FLEN)
NAN_BOXED(2985738,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2134101968,32,FLEN)
NAN_BOXED(2985738,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2134101968,32,FLEN)
NAN_BOXED(2985738,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2134101968,32,FLEN)
NAN_BOXED(2985738,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2134101968,32,FLEN)
NAN_BOXED(2985738,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2134101968,32,FLEN)
NAN_BOXED(2985738,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2134101968,32,FLEN)
NAN_BOXED(2985738,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2134101968,32,FLEN)
NAN_BOXED(2985738,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2134101968,32,FLEN)
NAN_BOXED(2985738,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2134101968,32,FLEN)
NAN_BOXED(2985738,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2134101968,32,FLEN)
NAN_BOXED(2985738,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2134109328,32,FLEN)
NAN_BOXED(3216383753,32,FLEN)
NAN_BOXED(3875536896,32,FLEN)
NAN_BOXED(2134109328,32,FLEN)
NAN_BOXED(3216383753,32,FLEN)
NAN_BOXED(3875536897,32,FLEN)
NAN_BOXED(2134109328,32,FLEN)
NAN_BOXED(3216383753,32,FLEN)
NAN_BOXED(3875536899,32,FLEN)
NAN_BOXED(2134109328,32,FLEN)
NAN_BOXED(3216383753,32,FLEN)
NAN_BOXED(3875536903,32,FLEN)
NAN_BOXED(2134109328,32,FLEN)
NAN_BOXED(3216383753,32,FLEN)
NAN_BOXED(3875536911,32,FLEN)
NAN_BOXED(2134109328,32,FLEN)
NAN_BOXED(3216383753,32,FLEN)
NAN_BOXED(3875536927,32,FLEN)
NAN_BOXED(2134109328,32,FLEN)
NAN_BOXED(3216383753,32,FLEN)
NAN_BOXED(3875536959,32,FLEN)
NAN_BOXED(2134109328,32,FLEN)
NAN_BOXED(3216383753,32,FLEN)
NAN_BOXED(3875537023,32,FLEN)
NAN_BOXED(2134109328,32,FLEN)
NAN_BOXED(3216383753,32,FLEN)
NAN_BOXED(3875537151,32,FLEN)
NAN_BOXED(2134109328,32,FLEN)
NAN_BOXED(3216383753,32,FLEN)
NAN_BOXED(3875537407,32,FLEN)
NAN_BOXED(2134109328,32,FLEN)
NAN_BOXED(3216383753,32,FLEN)
NAN_BOXED(3875537919,32,FLEN)
NAN_BOXED(2134109328,32,FLEN)
NAN_BOXED(3216383753,32,FLEN)
NAN_BOXED(3875538943,32,FLEN)
NAN_BOXED(2134109328,32,FLEN)
NAN_BOXED(3216383753,32,FLEN)
NAN_BOXED(3875540991,32,FLEN)
NAN_BOXED(2134109328,32,FLEN)
NAN_BOXED(3216383753,32,FLEN)
NAN_BOXED(3875545087,32,FLEN)
NAN_BOXED(2134109328,32,FLEN)
NAN_BOXED(3216383753,32,FLEN)
NAN_BOXED(3875553279,32,FLEN)
NAN_BOXED(2134109328,32,FLEN)
NAN_BOXED(3216383753,32,FLEN)
NAN_BOXED(3875569663,32,FLEN)
NAN_BOXED(2134109328,32,FLEN)
NAN_BOXED(3216383753,32,FLEN)
NAN_BOXED(3875602431,32,FLEN)
NAN_BOXED(2134109328,32,FLEN)
NAN_BOXED(3216383753,32,FLEN)
NAN_BOXED(3875667967,32,FLEN)
NAN_BOXED(2134109328,32,FLEN)
NAN_BOXED(3216383753,32,FLEN)
NAN_BOXED(3875799039,32,FLEN)
NAN_BOXED(2134109328,32,FLEN)
NAN_BOXED(3216383753,32,FLEN)
NAN_BOXED(3876061183,32,FLEN)
NAN_BOXED(2134109328,32,FLEN)
NAN_BOXED(3216383753,32,FLEN)
NAN_BOXED(3876585471,32,FLEN)
NAN_BOXED(2134109328,32,FLEN)
NAN_BOXED(3216383753,32,FLEN)
NAN_BOXED(3877634047,32,FLEN)
NAN_BOXED(2134109328,32,FLEN)
NAN_BOXED(3216383753,32,FLEN)
NAN_BOXED(3879731199,32,FLEN)
NAN_BOXED(2134109328,32,FLEN)
NAN_BOXED(3216383753,32,FLEN)
NAN_BOXED(3879731200,32,FLEN)
NAN_BOXED(2134109328,32,FLEN)
NAN_BOXED(3216383753,32,FLEN)
NAN_BOXED(3881828352,32,FLEN)
NAN_BOXED(2134109328,32,FLEN)
NAN_BOXED(3216383753,32,FLEN)
NAN_BOXED(3882876928,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
