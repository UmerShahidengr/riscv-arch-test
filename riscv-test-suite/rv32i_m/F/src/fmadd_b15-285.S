
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:17:59 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_36352:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33ec90 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x361f09 and fs3 == 1 and fe3 == 0xce and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33ec90; op2val:0xbfb61f09;
op3val:0xe7780000; valaddr_reg:x3; val_offset:109056*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109056*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36353:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33ec90 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x361f09 and fs3 == 1 and fe3 == 0xce and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33ec90; op2val:0xbfb61f09;
op3val:0xe77c0000; valaddr_reg:x3; val_offset:109059*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109059*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36354:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33ec90 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x361f09 and fs3 == 1 and fe3 == 0xce and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33ec90; op2val:0xbfb61f09;
op3val:0xe77e0000; valaddr_reg:x3; val_offset:109062*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109062*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36355:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33ec90 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x361f09 and fs3 == 1 and fe3 == 0xce and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33ec90; op2val:0xbfb61f09;
op3val:0xe77f0000; valaddr_reg:x3; val_offset:109065*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109065*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36356:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33ec90 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x361f09 and fs3 == 1 and fe3 == 0xce and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33ec90; op2val:0xbfb61f09;
op3val:0xe77f8000; valaddr_reg:x3; val_offset:109068*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109068*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36357:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33ec90 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x361f09 and fs3 == 1 and fe3 == 0xce and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33ec90; op2val:0xbfb61f09;
op3val:0xe77fc000; valaddr_reg:x3; val_offset:109071*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109071*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36358:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33ec90 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x361f09 and fs3 == 1 and fe3 == 0xce and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33ec90; op2val:0xbfb61f09;
op3val:0xe77fe000; valaddr_reg:x3; val_offset:109074*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109074*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36359:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33ec90 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x361f09 and fs3 == 1 and fe3 == 0xce and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33ec90; op2val:0xbfb61f09;
op3val:0xe77ff000; valaddr_reg:x3; val_offset:109077*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109077*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36360:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33ec90 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x361f09 and fs3 == 1 and fe3 == 0xce and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33ec90; op2val:0xbfb61f09;
op3val:0xe77ff800; valaddr_reg:x3; val_offset:109080*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109080*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36361:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33ec90 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x361f09 and fs3 == 1 and fe3 == 0xce and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33ec90; op2val:0xbfb61f09;
op3val:0xe77ffc00; valaddr_reg:x3; val_offset:109083*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109083*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36362:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33ec90 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x361f09 and fs3 == 1 and fe3 == 0xce and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33ec90; op2val:0xbfb61f09;
op3val:0xe77ffe00; valaddr_reg:x3; val_offset:109086*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109086*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36363:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33ec90 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x361f09 and fs3 == 1 and fe3 == 0xce and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33ec90; op2val:0xbfb61f09;
op3val:0xe77fff00; valaddr_reg:x3; val_offset:109089*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109089*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36364:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33ec90 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x361f09 and fs3 == 1 and fe3 == 0xce and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33ec90; op2val:0xbfb61f09;
op3val:0xe77fff80; valaddr_reg:x3; val_offset:109092*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109092*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36365:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33ec90 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x361f09 and fs3 == 1 and fe3 == 0xce and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33ec90; op2val:0xbfb61f09;
op3val:0xe77fffc0; valaddr_reg:x3; val_offset:109095*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109095*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36366:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33ec90 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x361f09 and fs3 == 1 and fe3 == 0xce and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33ec90; op2val:0xbfb61f09;
op3val:0xe77fffe0; valaddr_reg:x3; val_offset:109098*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109098*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36367:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33ec90 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x361f09 and fs3 == 1 and fe3 == 0xce and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33ec90; op2val:0xbfb61f09;
op3val:0xe77ffff0; valaddr_reg:x3; val_offset:109101*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109101*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36368:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33ec90 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x361f09 and fs3 == 1 and fe3 == 0xce and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33ec90; op2val:0xbfb61f09;
op3val:0xe77ffff8; valaddr_reg:x3; val_offset:109104*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109104*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36369:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33ec90 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x361f09 and fs3 == 1 and fe3 == 0xce and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33ec90; op2val:0xbfb61f09;
op3val:0xe77ffffc; valaddr_reg:x3; val_offset:109107*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109107*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36370:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33ec90 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x361f09 and fs3 == 1 and fe3 == 0xce and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33ec90; op2val:0xbfb61f09;
op3val:0xe77ffffe; valaddr_reg:x3; val_offset:109110*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109110*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36371:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33ec90 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x361f09 and fs3 == 1 and fe3 == 0xce and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33ec90; op2val:0xbfb61f09;
op3val:0xe77fffff; valaddr_reg:x3; val_offset:109113*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109113*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36372:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33ec90 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x361f09 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33ec90; op2val:0xbfb61f09;
op3val:0xff000001; valaddr_reg:x3; val_offset:109116*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109116*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36373:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33ec90 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x361f09 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33ec90; op2val:0xbfb61f09;
op3val:0xff000003; valaddr_reg:x3; val_offset:109119*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109119*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36374:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33ec90 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x361f09 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33ec90; op2val:0xbfb61f09;
op3val:0xff000007; valaddr_reg:x3; val_offset:109122*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109122*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36375:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33ec90 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x361f09 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33ec90; op2val:0xbfb61f09;
op3val:0xff199999; valaddr_reg:x3; val_offset:109125*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109125*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36376:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33ec90 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x361f09 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33ec90; op2val:0xbfb61f09;
op3val:0xff249249; valaddr_reg:x3; val_offset:109128*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109128*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36377:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33ec90 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x361f09 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33ec90; op2val:0xbfb61f09;
op3val:0xff333333; valaddr_reg:x3; val_offset:109131*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109131*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36378:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33ec90 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x361f09 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33ec90; op2val:0xbfb61f09;
op3val:0xff36db6d; valaddr_reg:x3; val_offset:109134*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109134*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36379:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33ec90 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x361f09 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33ec90; op2val:0xbfb61f09;
op3val:0xff3bbbbb; valaddr_reg:x3; val_offset:109137*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109137*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36380:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33ec90 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x361f09 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33ec90; op2val:0xbfb61f09;
op3val:0xff444444; valaddr_reg:x3; val_offset:109140*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109140*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36381:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33ec90 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x361f09 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33ec90; op2val:0xbfb61f09;
op3val:0xff4ccccc; valaddr_reg:x3; val_offset:109143*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109143*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36382:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33ec90 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x361f09 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33ec90; op2val:0xbfb61f09;
op3val:0xff5b6db6; valaddr_reg:x3; val_offset:109146*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109146*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36383:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33ec90 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x361f09 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33ec90; op2val:0xbfb61f09;
op3val:0xff666666; valaddr_reg:x3; val_offset:109149*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109149*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36384:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33ec90 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x361f09 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33ec90; op2val:0xbfb61f09;
op3val:0xff6db6db; valaddr_reg:x3; val_offset:109152*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109152*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36385:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33ec90 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x361f09 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33ec90; op2val:0xbfb61f09;
op3val:0xff7ffff8; valaddr_reg:x3; val_offset:109155*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109155*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36386:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33ec90 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x361f09 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33ec90; op2val:0xbfb61f09;
op3val:0xff7ffffc; valaddr_reg:x3; val_offset:109158*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109158*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36387:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33ec90 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x361f09 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33ec90; op2val:0xbfb61f09;
op3val:0xff7ffffe; valaddr_reg:x3; val_offset:109161*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109161*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36388:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3565fc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3565fc; op2val:0x80000000;
op3val:0x80800001; valaddr_reg:x3; val_offset:109164*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109164*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36389:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3565fc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3565fc; op2val:0x80000000;
op3val:0x80800003; valaddr_reg:x3; val_offset:109167*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109167*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36390:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3565fc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3565fc; op2val:0x80000000;
op3val:0x80800007; valaddr_reg:x3; val_offset:109170*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109170*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36391:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3565fc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3565fc; op2val:0x80000000;
op3val:0x80999999; valaddr_reg:x3; val_offset:109173*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109173*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36392:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3565fc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3565fc; op2val:0x80000000;
op3val:0x80a49249; valaddr_reg:x3; val_offset:109176*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109176*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36393:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3565fc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3565fc; op2val:0x80000000;
op3val:0x80b33333; valaddr_reg:x3; val_offset:109179*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109179*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36394:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3565fc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3565fc; op2val:0x80000000;
op3val:0x80b6db6d; valaddr_reg:x3; val_offset:109182*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109182*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36395:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3565fc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3565fc; op2val:0x80000000;
op3val:0x80bbbbbb; valaddr_reg:x3; val_offset:109185*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109185*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36396:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3565fc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3565fc; op2val:0x80000000;
op3val:0x80c44444; valaddr_reg:x3; val_offset:109188*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109188*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36397:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3565fc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3565fc; op2val:0x80000000;
op3val:0x80cccccc; valaddr_reg:x3; val_offset:109191*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109191*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36398:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3565fc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3565fc; op2val:0x80000000;
op3val:0x80db6db6; valaddr_reg:x3; val_offset:109194*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109194*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36399:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3565fc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3565fc; op2val:0x80000000;
op3val:0x80e66666; valaddr_reg:x3; val_offset:109197*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109197*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36400:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3565fc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3565fc; op2val:0x80000000;
op3val:0x80edb6db; valaddr_reg:x3; val_offset:109200*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109200*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36401:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3565fc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3565fc; op2val:0x80000000;
op3val:0x80fffff8; valaddr_reg:x3; val_offset:109203*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109203*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36402:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3565fc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3565fc; op2val:0x80000000;
op3val:0x80fffffc; valaddr_reg:x3; val_offset:109206*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109206*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36403:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3565fc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3565fc; op2val:0x80000000;
op3val:0x80fffffe; valaddr_reg:x3; val_offset:109209*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109209*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36404:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3565fc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3565fc; op2val:0x80000000;
op3val:0x87800000; valaddr_reg:x3; val_offset:109212*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109212*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36405:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3565fc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3565fc; op2val:0x80000000;
op3val:0x87800001; valaddr_reg:x3; val_offset:109215*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109215*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36406:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3565fc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3565fc; op2val:0x80000000;
op3val:0x87800003; valaddr_reg:x3; val_offset:109218*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109218*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36407:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3565fc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3565fc; op2val:0x80000000;
op3val:0x87800007; valaddr_reg:x3; val_offset:109221*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109221*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36408:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3565fc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3565fc; op2val:0x80000000;
op3val:0x8780000f; valaddr_reg:x3; val_offset:109224*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109224*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36409:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3565fc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3565fc; op2val:0x80000000;
op3val:0x8780001f; valaddr_reg:x3; val_offset:109227*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109227*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36410:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3565fc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3565fc; op2val:0x80000000;
op3val:0x8780003f; valaddr_reg:x3; val_offset:109230*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109230*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36411:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3565fc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3565fc; op2val:0x80000000;
op3val:0x8780007f; valaddr_reg:x3; val_offset:109233*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109233*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36412:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3565fc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3565fc; op2val:0x80000000;
op3val:0x878000ff; valaddr_reg:x3; val_offset:109236*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109236*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36413:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3565fc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3565fc; op2val:0x80000000;
op3val:0x878001ff; valaddr_reg:x3; val_offset:109239*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109239*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36414:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3565fc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3565fc; op2val:0x80000000;
op3val:0x878003ff; valaddr_reg:x3; val_offset:109242*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109242*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36415:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3565fc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3565fc; op2val:0x80000000;
op3val:0x878007ff; valaddr_reg:x3; val_offset:109245*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109245*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36416:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3565fc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3565fc; op2val:0x80000000;
op3val:0x87800fff; valaddr_reg:x3; val_offset:109248*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109248*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36417:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3565fc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3565fc; op2val:0x80000000;
op3val:0x87801fff; valaddr_reg:x3; val_offset:109251*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109251*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36418:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3565fc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3565fc; op2val:0x80000000;
op3val:0x87803fff; valaddr_reg:x3; val_offset:109254*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109254*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36419:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3565fc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3565fc; op2val:0x80000000;
op3val:0x87807fff; valaddr_reg:x3; val_offset:109257*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109257*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36420:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3565fc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3565fc; op2val:0x80000000;
op3val:0x8780ffff; valaddr_reg:x3; val_offset:109260*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109260*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36421:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3565fc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3565fc; op2val:0x80000000;
op3val:0x8781ffff; valaddr_reg:x3; val_offset:109263*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109263*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36422:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3565fc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3565fc; op2val:0x80000000;
op3val:0x8783ffff; valaddr_reg:x3; val_offset:109266*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109266*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36423:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3565fc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3565fc; op2val:0x80000000;
op3val:0x8787ffff; valaddr_reg:x3; val_offset:109269*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109269*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36424:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3565fc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3565fc; op2val:0x80000000;
op3val:0x878fffff; valaddr_reg:x3; val_offset:109272*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109272*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36425:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3565fc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3565fc; op2val:0x80000000;
op3val:0x879fffff; valaddr_reg:x3; val_offset:109275*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109275*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36426:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3565fc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3565fc; op2val:0x80000000;
op3val:0x87bfffff; valaddr_reg:x3; val_offset:109278*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109278*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36427:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3565fc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3565fc; op2val:0x80000000;
op3val:0x87c00000; valaddr_reg:x3; val_offset:109281*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109281*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36428:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3565fc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3565fc; op2val:0x80000000;
op3val:0x87e00000; valaddr_reg:x3; val_offset:109284*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109284*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36429:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3565fc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3565fc; op2val:0x80000000;
op3val:0x87f00000; valaddr_reg:x3; val_offset:109287*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109287*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36430:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3565fc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3565fc; op2val:0x80000000;
op3val:0x87f80000; valaddr_reg:x3; val_offset:109290*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109290*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36431:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3565fc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3565fc; op2val:0x80000000;
op3val:0x87fc0000; valaddr_reg:x3; val_offset:109293*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109293*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36432:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3565fc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3565fc; op2val:0x80000000;
op3val:0x87fe0000; valaddr_reg:x3; val_offset:109296*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109296*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36433:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3565fc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3565fc; op2val:0x80000000;
op3val:0x87ff0000; valaddr_reg:x3; val_offset:109299*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109299*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36434:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3565fc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3565fc; op2val:0x80000000;
op3val:0x87ff8000; valaddr_reg:x3; val_offset:109302*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109302*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36435:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3565fc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3565fc; op2val:0x80000000;
op3val:0x87ffc000; valaddr_reg:x3; val_offset:109305*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109305*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36436:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3565fc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3565fc; op2val:0x80000000;
op3val:0x87ffe000; valaddr_reg:x3; val_offset:109308*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109308*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36437:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3565fc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3565fc; op2val:0x80000000;
op3val:0x87fff000; valaddr_reg:x3; val_offset:109311*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109311*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36438:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3565fc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3565fc; op2val:0x80000000;
op3val:0x87fff800; valaddr_reg:x3; val_offset:109314*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109314*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36439:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3565fc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3565fc; op2val:0x80000000;
op3val:0x87fffc00; valaddr_reg:x3; val_offset:109317*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109317*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36440:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3565fc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3565fc; op2val:0x80000000;
op3val:0x87fffe00; valaddr_reg:x3; val_offset:109320*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109320*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36441:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3565fc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3565fc; op2val:0x80000000;
op3val:0x87ffff00; valaddr_reg:x3; val_offset:109323*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109323*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36442:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3565fc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3565fc; op2val:0x80000000;
op3val:0x87ffff80; valaddr_reg:x3; val_offset:109326*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109326*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36443:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3565fc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3565fc; op2val:0x80000000;
op3val:0x87ffffc0; valaddr_reg:x3; val_offset:109329*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109329*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36444:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3565fc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3565fc; op2val:0x80000000;
op3val:0x87ffffe0; valaddr_reg:x3; val_offset:109332*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109332*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36445:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3565fc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3565fc; op2val:0x80000000;
op3val:0x87fffff0; valaddr_reg:x3; val_offset:109335*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109335*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36446:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3565fc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3565fc; op2val:0x80000000;
op3val:0x87fffff8; valaddr_reg:x3; val_offset:109338*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109338*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36447:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3565fc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3565fc; op2val:0x80000000;
op3val:0x87fffffc; valaddr_reg:x3; val_offset:109341*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109341*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36448:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3565fc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3565fc; op2val:0x80000000;
op3val:0x87fffffe; valaddr_reg:x3; val_offset:109344*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109344*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36449:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3565fc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3565fc; op2val:0x80000000;
op3val:0x87ffffff; valaddr_reg:x3; val_offset:109347*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109347*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36450:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x365028 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2cef05 and fs3 == 1 and fe3 == 0x6b and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f365028; op2val:0x802cef05;
op3val:0xb5800000; valaddr_reg:x3; val_offset:109350*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109350*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36451:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x365028 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2cef05 and fs3 == 1 and fe3 == 0x6b and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f365028; op2val:0x802cef05;
op3val:0xb5800001; valaddr_reg:x3; val_offset:109353*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109353*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36452:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x365028 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2cef05 and fs3 == 1 and fe3 == 0x6b and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f365028; op2val:0x802cef05;
op3val:0xb5800003; valaddr_reg:x3; val_offset:109356*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109356*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36453:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x365028 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2cef05 and fs3 == 1 and fe3 == 0x6b and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f365028; op2val:0x802cef05;
op3val:0xb5800007; valaddr_reg:x3; val_offset:109359*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109359*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36454:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x365028 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2cef05 and fs3 == 1 and fe3 == 0x6b and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f365028; op2val:0x802cef05;
op3val:0xb580000f; valaddr_reg:x3; val_offset:109362*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109362*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36455:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x365028 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2cef05 and fs3 == 1 and fe3 == 0x6b and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f365028; op2val:0x802cef05;
op3val:0xb580001f; valaddr_reg:x3; val_offset:109365*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109365*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36456:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x365028 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2cef05 and fs3 == 1 and fe3 == 0x6b and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f365028; op2val:0x802cef05;
op3val:0xb580003f; valaddr_reg:x3; val_offset:109368*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109368*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36457:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x365028 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2cef05 and fs3 == 1 and fe3 == 0x6b and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f365028; op2val:0x802cef05;
op3val:0xb580007f; valaddr_reg:x3; val_offset:109371*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109371*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36458:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x365028 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2cef05 and fs3 == 1 and fe3 == 0x6b and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f365028; op2val:0x802cef05;
op3val:0xb58000ff; valaddr_reg:x3; val_offset:109374*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109374*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36459:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x365028 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2cef05 and fs3 == 1 and fe3 == 0x6b and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f365028; op2val:0x802cef05;
op3val:0xb58001ff; valaddr_reg:x3; val_offset:109377*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109377*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36460:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x365028 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2cef05 and fs3 == 1 and fe3 == 0x6b and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f365028; op2val:0x802cef05;
op3val:0xb58003ff; valaddr_reg:x3; val_offset:109380*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109380*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36461:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x365028 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2cef05 and fs3 == 1 and fe3 == 0x6b and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f365028; op2val:0x802cef05;
op3val:0xb58007ff; valaddr_reg:x3; val_offset:109383*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109383*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36462:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x365028 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2cef05 and fs3 == 1 and fe3 == 0x6b and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f365028; op2val:0x802cef05;
op3val:0xb5800fff; valaddr_reg:x3; val_offset:109386*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109386*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36463:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x365028 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2cef05 and fs3 == 1 and fe3 == 0x6b and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f365028; op2val:0x802cef05;
op3val:0xb5801fff; valaddr_reg:x3; val_offset:109389*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109389*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36464:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x365028 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2cef05 and fs3 == 1 and fe3 == 0x6b and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f365028; op2val:0x802cef05;
op3val:0xb5803fff; valaddr_reg:x3; val_offset:109392*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109392*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36465:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x365028 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2cef05 and fs3 == 1 and fe3 == 0x6b and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f365028; op2val:0x802cef05;
op3val:0xb5807fff; valaddr_reg:x3; val_offset:109395*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109395*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36466:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x365028 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2cef05 and fs3 == 1 and fe3 == 0x6b and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f365028; op2val:0x802cef05;
op3val:0xb580ffff; valaddr_reg:x3; val_offset:109398*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109398*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36467:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x365028 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2cef05 and fs3 == 1 and fe3 == 0x6b and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f365028; op2val:0x802cef05;
op3val:0xb581ffff; valaddr_reg:x3; val_offset:109401*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109401*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36468:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x365028 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2cef05 and fs3 == 1 and fe3 == 0x6b and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f365028; op2val:0x802cef05;
op3val:0xb583ffff; valaddr_reg:x3; val_offset:109404*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109404*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36469:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x365028 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2cef05 and fs3 == 1 and fe3 == 0x6b and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f365028; op2val:0x802cef05;
op3val:0xb587ffff; valaddr_reg:x3; val_offset:109407*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109407*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36470:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x365028 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2cef05 and fs3 == 1 and fe3 == 0x6b and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f365028; op2val:0x802cef05;
op3val:0xb58fffff; valaddr_reg:x3; val_offset:109410*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109410*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36471:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x365028 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2cef05 and fs3 == 1 and fe3 == 0x6b and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f365028; op2val:0x802cef05;
op3val:0xb59fffff; valaddr_reg:x3; val_offset:109413*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109413*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36472:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x365028 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2cef05 and fs3 == 1 and fe3 == 0x6b and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f365028; op2val:0x802cef05;
op3val:0xb5bfffff; valaddr_reg:x3; val_offset:109416*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109416*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36473:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x365028 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2cef05 and fs3 == 1 and fe3 == 0x6b and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f365028; op2val:0x802cef05;
op3val:0xb5c00000; valaddr_reg:x3; val_offset:109419*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109419*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36474:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x365028 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2cef05 and fs3 == 1 and fe3 == 0x6b and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f365028; op2val:0x802cef05;
op3val:0xb5e00000; valaddr_reg:x3; val_offset:109422*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109422*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36475:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x365028 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2cef05 and fs3 == 1 and fe3 == 0x6b and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f365028; op2val:0x802cef05;
op3val:0xb5f00000; valaddr_reg:x3; val_offset:109425*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109425*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36476:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x365028 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2cef05 and fs3 == 1 and fe3 == 0x6b and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f365028; op2val:0x802cef05;
op3val:0xb5f80000; valaddr_reg:x3; val_offset:109428*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109428*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36477:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x365028 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2cef05 and fs3 == 1 and fe3 == 0x6b and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f365028; op2val:0x802cef05;
op3val:0xb5fc0000; valaddr_reg:x3; val_offset:109431*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109431*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36478:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x365028 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2cef05 and fs3 == 1 and fe3 == 0x6b and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f365028; op2val:0x802cef05;
op3val:0xb5fe0000; valaddr_reg:x3; val_offset:109434*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109434*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36479:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x365028 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2cef05 and fs3 == 1 and fe3 == 0x6b and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f365028; op2val:0x802cef05;
op3val:0xb5ff0000; valaddr_reg:x3; val_offset:109437*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109437*0 + 3*284*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2134109328,32,FLEN)
NAN_BOXED(3216383753,32,FLEN)
NAN_BOXED(3883401216,32,FLEN)
NAN_BOXED(2134109328,32,FLEN)
NAN_BOXED(3216383753,32,FLEN)
NAN_BOXED(3883663360,32,FLEN)
NAN_BOXED(2134109328,32,FLEN)
NAN_BOXED(3216383753,32,FLEN)
NAN_BOXED(3883794432,32,FLEN)
NAN_BOXED(2134109328,32,FLEN)
NAN_BOXED(3216383753,32,FLEN)
NAN_BOXED(3883859968,32,FLEN)
NAN_BOXED(2134109328,32,FLEN)
NAN_BOXED(3216383753,32,FLEN)
NAN_BOXED(3883892736,32,FLEN)
NAN_BOXED(2134109328,32,FLEN)
NAN_BOXED(3216383753,32,FLEN)
NAN_BOXED(3883909120,32,FLEN)
NAN_BOXED(2134109328,32,FLEN)
NAN_BOXED(3216383753,32,FLEN)
NAN_BOXED(3883917312,32,FLEN)
NAN_BOXED(2134109328,32,FLEN)
NAN_BOXED(3216383753,32,FLEN)
NAN_BOXED(3883921408,32,FLEN)
NAN_BOXED(2134109328,32,FLEN)
NAN_BOXED(3216383753,32,FLEN)
NAN_BOXED(3883923456,32,FLEN)
NAN_BOXED(2134109328,32,FLEN)
NAN_BOXED(3216383753,32,FLEN)
NAN_BOXED(3883924480,32,FLEN)
NAN_BOXED(2134109328,32,FLEN)
NAN_BOXED(3216383753,32,FLEN)
NAN_BOXED(3883924992,32,FLEN)
NAN_BOXED(2134109328,32,FLEN)
NAN_BOXED(3216383753,32,FLEN)
NAN_BOXED(3883925248,32,FLEN)
NAN_BOXED(2134109328,32,FLEN)
NAN_BOXED(3216383753,32,FLEN)
NAN_BOXED(3883925376,32,FLEN)
NAN_BOXED(2134109328,32,FLEN)
NAN_BOXED(3216383753,32,FLEN)
NAN_BOXED(3883925440,32,FLEN)
NAN_BOXED(2134109328,32,FLEN)
NAN_BOXED(3216383753,32,FLEN)
NAN_BOXED(3883925472,32,FLEN)
NAN_BOXED(2134109328,32,FLEN)
NAN_BOXED(3216383753,32,FLEN)
NAN_BOXED(3883925488,32,FLEN)
NAN_BOXED(2134109328,32,FLEN)
NAN_BOXED(3216383753,32,FLEN)
NAN_BOXED(3883925496,32,FLEN)
NAN_BOXED(2134109328,32,FLEN)
NAN_BOXED(3216383753,32,FLEN)
NAN_BOXED(3883925500,32,FLEN)
NAN_BOXED(2134109328,32,FLEN)
NAN_BOXED(3216383753,32,FLEN)
NAN_BOXED(3883925502,32,FLEN)
NAN_BOXED(2134109328,32,FLEN)
NAN_BOXED(3216383753,32,FLEN)
NAN_BOXED(3883925503,32,FLEN)
NAN_BOXED(2134109328,32,FLEN)
NAN_BOXED(3216383753,32,FLEN)
NAN_BOXED(4278190081,32,FLEN)
NAN_BOXED(2134109328,32,FLEN)
NAN_BOXED(3216383753,32,FLEN)
NAN_BOXED(4278190083,32,FLEN)
NAN_BOXED(2134109328,32,FLEN)
NAN_BOXED(3216383753,32,FLEN)
NAN_BOXED(4278190087,32,FLEN)
NAN_BOXED(2134109328,32,FLEN)
NAN_BOXED(3216383753,32,FLEN)
NAN_BOXED(4279867801,32,FLEN)
NAN_BOXED(2134109328,32,FLEN)
NAN_BOXED(3216383753,32,FLEN)
NAN_BOXED(4280586825,32,FLEN)
NAN_BOXED(2134109328,32,FLEN)
NAN_BOXED(3216383753,32,FLEN)
NAN_BOXED(4281545523,32,FLEN)
NAN_BOXED(2134109328,32,FLEN)
NAN_BOXED(3216383753,32,FLEN)
NAN_BOXED(4281785197,32,FLEN)
NAN_BOXED(2134109328,32,FLEN)
NAN_BOXED(3216383753,32,FLEN)
NAN_BOXED(4282104763,32,FLEN)
NAN_BOXED(2134109328,32,FLEN)
NAN_BOXED(3216383753,32,FLEN)
NAN_BOXED(4282664004,32,FLEN)
NAN_BOXED(2134109328,32,FLEN)
NAN_BOXED(3216383753,32,FLEN)
NAN_BOXED(4283223244,32,FLEN)
NAN_BOXED(2134109328,32,FLEN)
NAN_BOXED(3216383753,32,FLEN)
NAN_BOXED(4284181942,32,FLEN)
NAN_BOXED(2134109328,32,FLEN)
NAN_BOXED(3216383753,32,FLEN)
NAN_BOXED(4284900966,32,FLEN)
NAN_BOXED(2134109328,32,FLEN)
NAN_BOXED(3216383753,32,FLEN)
NAN_BOXED(4285380315,32,FLEN)
NAN_BOXED(2134109328,32,FLEN)
NAN_BOXED(3216383753,32,FLEN)
NAN_BOXED(4286578680,32,FLEN)
NAN_BOXED(2134109328,32,FLEN)
NAN_BOXED(3216383753,32,FLEN)
NAN_BOXED(4286578684,32,FLEN)
NAN_BOXED(2134109328,32,FLEN)
NAN_BOXED(3216383753,32,FLEN)
NAN_BOXED(4286578686,32,FLEN)
NAN_BOXED(2134205948,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872257,32,FLEN)
NAN_BOXED(2134205948,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872259,32,FLEN)
NAN_BOXED(2134205948,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872263,32,FLEN)
NAN_BOXED(2134205948,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2157549977,32,FLEN)
NAN_BOXED(2134205948,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2158269001,32,FLEN)
NAN_BOXED(2134205948,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2159227699,32,FLEN)
NAN_BOXED(2134205948,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2159467373,32,FLEN)
NAN_BOXED(2134205948,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2159786939,32,FLEN)
NAN_BOXED(2134205948,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2160346180,32,FLEN)
NAN_BOXED(2134205948,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2160905420,32,FLEN)
NAN_BOXED(2134205948,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2161864118,32,FLEN)
NAN_BOXED(2134205948,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2162583142,32,FLEN)
NAN_BOXED(2134205948,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2163062491,32,FLEN)
NAN_BOXED(2134205948,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260856,32,FLEN)
NAN_BOXED(2134205948,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260860,32,FLEN)
NAN_BOXED(2134205948,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260862,32,FLEN)
NAN_BOXED(2134205948,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2273312768,32,FLEN)
NAN_BOXED(2134205948,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2273312769,32,FLEN)
NAN_BOXED(2134205948,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2273312771,32,FLEN)
NAN_BOXED(2134205948,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2273312775,32,FLEN)
NAN_BOXED(2134205948,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2273312783,32,FLEN)
NAN_BOXED(2134205948,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2273312799,32,FLEN)
NAN_BOXED(2134205948,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2273312831,32,FLEN)
NAN_BOXED(2134205948,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2273312895,32,FLEN)
NAN_BOXED(2134205948,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2273313023,32,FLEN)
NAN_BOXED(2134205948,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2273313279,32,FLEN)
NAN_BOXED(2134205948,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2273313791,32,FLEN)
NAN_BOXED(2134205948,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2273314815,32,FLEN)
NAN_BOXED(2134205948,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2273316863,32,FLEN)
NAN_BOXED(2134205948,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2273320959,32,FLEN)
NAN_BOXED(2134205948,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2273329151,32,FLEN)
NAN_BOXED(2134205948,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2273345535,32,FLEN)
NAN_BOXED(2134205948,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2273378303,32,FLEN)
NAN_BOXED(2134205948,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2273443839,32,FLEN)
NAN_BOXED(2134205948,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2273574911,32,FLEN)
NAN_BOXED(2134205948,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2273837055,32,FLEN)
NAN_BOXED(2134205948,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2274361343,32,FLEN)
NAN_BOXED(2134205948,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2275409919,32,FLEN)
NAN_BOXED(2134205948,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2277507071,32,FLEN)
NAN_BOXED(2134205948,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2277507072,32,FLEN)
NAN_BOXED(2134205948,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2279604224,32,FLEN)
NAN_BOXED(2134205948,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2280652800,32,FLEN)
NAN_BOXED(2134205948,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281177088,32,FLEN)
NAN_BOXED(2134205948,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281439232,32,FLEN)
NAN_BOXED(2134205948,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281570304,32,FLEN)
NAN_BOXED(2134205948,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281635840,32,FLEN)
NAN_BOXED(2134205948,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281668608,32,FLEN)
NAN_BOXED(2134205948,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281684992,32,FLEN)
NAN_BOXED(2134205948,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281693184,32,FLEN)
NAN_BOXED(2134205948,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281697280,32,FLEN)
NAN_BOXED(2134205948,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281699328,32,FLEN)
NAN_BOXED(2134205948,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281700352,32,FLEN)
NAN_BOXED(2134205948,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281700864,32,FLEN)
NAN_BOXED(2134205948,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701120,32,FLEN)
NAN_BOXED(2134205948,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701248,32,FLEN)
NAN_BOXED(2134205948,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701312,32,FLEN)
NAN_BOXED(2134205948,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701344,32,FLEN)
NAN_BOXED(2134205948,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701360,32,FLEN)
NAN_BOXED(2134205948,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701368,32,FLEN)
NAN_BOXED(2134205948,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701372,32,FLEN)
NAN_BOXED(2134205948,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701374,32,FLEN)
NAN_BOXED(2134205948,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701375,32,FLEN)
NAN_BOXED(2134265896,32,FLEN)
NAN_BOXED(2150428421,32,FLEN)
NAN_BOXED(3045064704,32,FLEN)
NAN_BOXED(2134265896,32,FLEN)
NAN_BOXED(2150428421,32,FLEN)
NAN_BOXED(3045064705,32,FLEN)
NAN_BOXED(2134265896,32,FLEN)
NAN_BOXED(2150428421,32,FLEN)
NAN_BOXED(3045064707,32,FLEN)
NAN_BOXED(2134265896,32,FLEN)
NAN_BOXED(2150428421,32,FLEN)
NAN_BOXED(3045064711,32,FLEN)
NAN_BOXED(2134265896,32,FLEN)
NAN_BOXED(2150428421,32,FLEN)
NAN_BOXED(3045064719,32,FLEN)
NAN_BOXED(2134265896,32,FLEN)
NAN_BOXED(2150428421,32,FLEN)
NAN_BOXED(3045064735,32,FLEN)
NAN_BOXED(2134265896,32,FLEN)
NAN_BOXED(2150428421,32,FLEN)
NAN_BOXED(3045064767,32,FLEN)
NAN_BOXED(2134265896,32,FLEN)
NAN_BOXED(2150428421,32,FLEN)
NAN_BOXED(3045064831,32,FLEN)
NAN_BOXED(2134265896,32,FLEN)
NAN_BOXED(2150428421,32,FLEN)
NAN_BOXED(3045064959,32,FLEN)
NAN_BOXED(2134265896,32,FLEN)
NAN_BOXED(2150428421,32,FLEN)
NAN_BOXED(3045065215,32,FLEN)
NAN_BOXED(2134265896,32,FLEN)
NAN_BOXED(2150428421,32,FLEN)
NAN_BOXED(3045065727,32,FLEN)
NAN_BOXED(2134265896,32,FLEN)
NAN_BOXED(2150428421,32,FLEN)
NAN_BOXED(3045066751,32,FLEN)
NAN_BOXED(2134265896,32,FLEN)
NAN_BOXED(2150428421,32,FLEN)
NAN_BOXED(3045068799,32,FLEN)
NAN_BOXED(2134265896,32,FLEN)
NAN_BOXED(2150428421,32,FLEN)
NAN_BOXED(3045072895,32,FLEN)
NAN_BOXED(2134265896,32,FLEN)
NAN_BOXED(2150428421,32,FLEN)
NAN_BOXED(3045081087,32,FLEN)
NAN_BOXED(2134265896,32,FLEN)
NAN_BOXED(2150428421,32,FLEN)
NAN_BOXED(3045097471,32,FLEN)
NAN_BOXED(2134265896,32,FLEN)
NAN_BOXED(2150428421,32,FLEN)
NAN_BOXED(3045130239,32,FLEN)
NAN_BOXED(2134265896,32,FLEN)
NAN_BOXED(2150428421,32,FLEN)
NAN_BOXED(3045195775,32,FLEN)
NAN_BOXED(2134265896,32,FLEN)
NAN_BOXED(2150428421,32,FLEN)
NAN_BOXED(3045326847,32,FLEN)
NAN_BOXED(2134265896,32,FLEN)
NAN_BOXED(2150428421,32,FLEN)
NAN_BOXED(3045588991,32,FLEN)
NAN_BOXED(2134265896,32,FLEN)
NAN_BOXED(2150428421,32,FLEN)
NAN_BOXED(3046113279,32,FLEN)
NAN_BOXED(2134265896,32,FLEN)
NAN_BOXED(2150428421,32,FLEN)
NAN_BOXED(3047161855,32,FLEN)
NAN_BOXED(2134265896,32,FLEN)
NAN_BOXED(2150428421,32,FLEN)
NAN_BOXED(3049259007,32,FLEN)
NAN_BOXED(2134265896,32,FLEN)
NAN_BOXED(2150428421,32,FLEN)
NAN_BOXED(3049259008,32,FLEN)
NAN_BOXED(2134265896,32,FLEN)
NAN_BOXED(2150428421,32,FLEN)
NAN_BOXED(3051356160,32,FLEN)
NAN_BOXED(2134265896,32,FLEN)
NAN_BOXED(2150428421,32,FLEN)
NAN_BOXED(3052404736,32,FLEN)
NAN_BOXED(2134265896,32,FLEN)
NAN_BOXED(2150428421,32,FLEN)
NAN_BOXED(3052929024,32,FLEN)
NAN_BOXED(2134265896,32,FLEN)
NAN_BOXED(2150428421,32,FLEN)
NAN_BOXED(3053191168,32,FLEN)
NAN_BOXED(2134265896,32,FLEN)
NAN_BOXED(2150428421,32,FLEN)
NAN_BOXED(3053322240,32,FLEN)
NAN_BOXED(2134265896,32,FLEN)
NAN_BOXED(2150428421,32,FLEN)
NAN_BOXED(3053387776,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
