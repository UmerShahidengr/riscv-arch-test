
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:17:59 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_36608:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37463a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x32cac5 and fs3 == 0 and fe3 == 0xbb and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37463a; op2val:0x3fb2cac5;
op3val:0x5dfff800; valaddr_reg:x3; val_offset:109824*0 + 3*286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109824*0 + 3*286*FLEN/8, x4, x1, x2)

inst_36609:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37463a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x32cac5 and fs3 == 0 and fe3 == 0xbb and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37463a; op2val:0x3fb2cac5;
op3val:0x5dfffc00; valaddr_reg:x3; val_offset:109827*0 + 3*286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109827*0 + 3*286*FLEN/8, x4, x1, x2)

inst_36610:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37463a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x32cac5 and fs3 == 0 and fe3 == 0xbb and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37463a; op2val:0x3fb2cac5;
op3val:0x5dfffe00; valaddr_reg:x3; val_offset:109830*0 + 3*286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109830*0 + 3*286*FLEN/8, x4, x1, x2)

inst_36611:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37463a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x32cac5 and fs3 == 0 and fe3 == 0xbb and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37463a; op2val:0x3fb2cac5;
op3val:0x5dffff00; valaddr_reg:x3; val_offset:109833*0 + 3*286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109833*0 + 3*286*FLEN/8, x4, x1, x2)

inst_36612:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37463a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x32cac5 and fs3 == 0 and fe3 == 0xbb and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37463a; op2val:0x3fb2cac5;
op3val:0x5dffff80; valaddr_reg:x3; val_offset:109836*0 + 3*286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109836*0 + 3*286*FLEN/8, x4, x1, x2)

inst_36613:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37463a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x32cac5 and fs3 == 0 and fe3 == 0xbb and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37463a; op2val:0x3fb2cac5;
op3val:0x5dffffc0; valaddr_reg:x3; val_offset:109839*0 + 3*286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109839*0 + 3*286*FLEN/8, x4, x1, x2)

inst_36614:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37463a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x32cac5 and fs3 == 0 and fe3 == 0xbb and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37463a; op2val:0x3fb2cac5;
op3val:0x5dffffe0; valaddr_reg:x3; val_offset:109842*0 + 3*286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109842*0 + 3*286*FLEN/8, x4, x1, x2)

inst_36615:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37463a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x32cac5 and fs3 == 0 and fe3 == 0xbb and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37463a; op2val:0x3fb2cac5;
op3val:0x5dfffff0; valaddr_reg:x3; val_offset:109845*0 + 3*286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109845*0 + 3*286*FLEN/8, x4, x1, x2)

inst_36616:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37463a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x32cac5 and fs3 == 0 and fe3 == 0xbb and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37463a; op2val:0x3fb2cac5;
op3val:0x5dfffff8; valaddr_reg:x3; val_offset:109848*0 + 3*286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109848*0 + 3*286*FLEN/8, x4, x1, x2)

inst_36617:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37463a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x32cac5 and fs3 == 0 and fe3 == 0xbb and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37463a; op2val:0x3fb2cac5;
op3val:0x5dfffffc; valaddr_reg:x3; val_offset:109851*0 + 3*286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109851*0 + 3*286*FLEN/8, x4, x1, x2)

inst_36618:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37463a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x32cac5 and fs3 == 0 and fe3 == 0xbb and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37463a; op2val:0x3fb2cac5;
op3val:0x5dfffffe; valaddr_reg:x3; val_offset:109854*0 + 3*286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109854*0 + 3*286*FLEN/8, x4, x1, x2)

inst_36619:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37463a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x32cac5 and fs3 == 0 and fe3 == 0xbb and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37463a; op2val:0x3fb2cac5;
op3val:0x5dffffff; valaddr_reg:x3; val_offset:109857*0 + 3*286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109857*0 + 3*286*FLEN/8, x4, x1, x2)

inst_36620:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37463a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x32cac5 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37463a; op2val:0x3fb2cac5;
op3val:0x7f000001; valaddr_reg:x3; val_offset:109860*0 + 3*286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109860*0 + 3*286*FLEN/8, x4, x1, x2)

inst_36621:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37463a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x32cac5 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37463a; op2val:0x3fb2cac5;
op3val:0x7f000003; valaddr_reg:x3; val_offset:109863*0 + 3*286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109863*0 + 3*286*FLEN/8, x4, x1, x2)

inst_36622:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37463a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x32cac5 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37463a; op2val:0x3fb2cac5;
op3val:0x7f000007; valaddr_reg:x3; val_offset:109866*0 + 3*286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109866*0 + 3*286*FLEN/8, x4, x1, x2)

inst_36623:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37463a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x32cac5 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37463a; op2val:0x3fb2cac5;
op3val:0x7f199999; valaddr_reg:x3; val_offset:109869*0 + 3*286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109869*0 + 3*286*FLEN/8, x4, x1, x2)

inst_36624:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37463a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x32cac5 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37463a; op2val:0x3fb2cac5;
op3val:0x7f249249; valaddr_reg:x3; val_offset:109872*0 + 3*286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109872*0 + 3*286*FLEN/8, x4, x1, x2)

inst_36625:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37463a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x32cac5 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37463a; op2val:0x3fb2cac5;
op3val:0x7f333333; valaddr_reg:x3; val_offset:109875*0 + 3*286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109875*0 + 3*286*FLEN/8, x4, x1, x2)

inst_36626:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37463a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x32cac5 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37463a; op2val:0x3fb2cac5;
op3val:0x7f36db6d; valaddr_reg:x3; val_offset:109878*0 + 3*286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109878*0 + 3*286*FLEN/8, x4, x1, x2)

inst_36627:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37463a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x32cac5 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37463a; op2val:0x3fb2cac5;
op3val:0x7f3bbbbb; valaddr_reg:x3; val_offset:109881*0 + 3*286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109881*0 + 3*286*FLEN/8, x4, x1, x2)

inst_36628:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37463a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x32cac5 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37463a; op2val:0x3fb2cac5;
op3val:0x7f444444; valaddr_reg:x3; val_offset:109884*0 + 3*286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109884*0 + 3*286*FLEN/8, x4, x1, x2)

inst_36629:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37463a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x32cac5 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37463a; op2val:0x3fb2cac5;
op3val:0x7f4ccccc; valaddr_reg:x3; val_offset:109887*0 + 3*286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109887*0 + 3*286*FLEN/8, x4, x1, x2)

inst_36630:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37463a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x32cac5 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37463a; op2val:0x3fb2cac5;
op3val:0x7f5b6db6; valaddr_reg:x3; val_offset:109890*0 + 3*286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109890*0 + 3*286*FLEN/8, x4, x1, x2)

inst_36631:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37463a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x32cac5 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37463a; op2val:0x3fb2cac5;
op3val:0x7f666666; valaddr_reg:x3; val_offset:109893*0 + 3*286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109893*0 + 3*286*FLEN/8, x4, x1, x2)

inst_36632:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37463a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x32cac5 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37463a; op2val:0x3fb2cac5;
op3val:0x7f6db6db; valaddr_reg:x3; val_offset:109896*0 + 3*286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109896*0 + 3*286*FLEN/8, x4, x1, x2)

inst_36633:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37463a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x32cac5 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37463a; op2val:0x3fb2cac5;
op3val:0x7f7ffff8; valaddr_reg:x3; val_offset:109899*0 + 3*286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109899*0 + 3*286*FLEN/8, x4, x1, x2)

inst_36634:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37463a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x32cac5 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37463a; op2val:0x3fb2cac5;
op3val:0x7f7ffffc; valaddr_reg:x3; val_offset:109902*0 + 3*286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109902*0 + 3*286*FLEN/8, x4, x1, x2)

inst_36635:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37463a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x32cac5 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37463a; op2val:0x3fb2cac5;
op3val:0x7f7ffffe; valaddr_reg:x3; val_offset:109905*0 + 3*286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109905*0 + 3*286*FLEN/8, x4, x1, x2)

inst_36636:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x387e81 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x319c25 and fs3 == 0 and fe3 == 0xde and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f387e81; op2val:0x3fb19c25;
op3val:0x6f000000; valaddr_reg:x3; val_offset:109908*0 + 3*286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109908*0 + 3*286*FLEN/8, x4, x1, x2)

inst_36637:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x387e81 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x319c25 and fs3 == 0 and fe3 == 0xde and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f387e81; op2val:0x3fb19c25;
op3val:0x6f000001; valaddr_reg:x3; val_offset:109911*0 + 3*286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109911*0 + 3*286*FLEN/8, x4, x1, x2)

inst_36638:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x387e81 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x319c25 and fs3 == 0 and fe3 == 0xde and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f387e81; op2val:0x3fb19c25;
op3val:0x6f000003; valaddr_reg:x3; val_offset:109914*0 + 3*286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109914*0 + 3*286*FLEN/8, x4, x1, x2)

inst_36639:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x387e81 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x319c25 and fs3 == 0 and fe3 == 0xde and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f387e81; op2val:0x3fb19c25;
op3val:0x6f000007; valaddr_reg:x3; val_offset:109917*0 + 3*286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109917*0 + 3*286*FLEN/8, x4, x1, x2)

inst_36640:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x387e81 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x319c25 and fs3 == 0 and fe3 == 0xde and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f387e81; op2val:0x3fb19c25;
op3val:0x6f00000f; valaddr_reg:x3; val_offset:109920*0 + 3*286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109920*0 + 3*286*FLEN/8, x4, x1, x2)

inst_36641:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x387e81 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x319c25 and fs3 == 0 and fe3 == 0xde and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f387e81; op2val:0x3fb19c25;
op3val:0x6f00001f; valaddr_reg:x3; val_offset:109923*0 + 3*286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109923*0 + 3*286*FLEN/8, x4, x1, x2)

inst_36642:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x387e81 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x319c25 and fs3 == 0 and fe3 == 0xde and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f387e81; op2val:0x3fb19c25;
op3val:0x6f00003f; valaddr_reg:x3; val_offset:109926*0 + 3*286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109926*0 + 3*286*FLEN/8, x4, x1, x2)

inst_36643:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x387e81 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x319c25 and fs3 == 0 and fe3 == 0xde and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f387e81; op2val:0x3fb19c25;
op3val:0x6f00007f; valaddr_reg:x3; val_offset:109929*0 + 3*286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109929*0 + 3*286*FLEN/8, x4, x1, x2)

inst_36644:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x387e81 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x319c25 and fs3 == 0 and fe3 == 0xde and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f387e81; op2val:0x3fb19c25;
op3val:0x6f0000ff; valaddr_reg:x3; val_offset:109932*0 + 3*286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109932*0 + 3*286*FLEN/8, x4, x1, x2)

inst_36645:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x387e81 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x319c25 and fs3 == 0 and fe3 == 0xde and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f387e81; op2val:0x3fb19c25;
op3val:0x6f0001ff; valaddr_reg:x3; val_offset:109935*0 + 3*286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109935*0 + 3*286*FLEN/8, x4, x1, x2)

inst_36646:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x387e81 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x319c25 and fs3 == 0 and fe3 == 0xde and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f387e81; op2val:0x3fb19c25;
op3val:0x6f0003ff; valaddr_reg:x3; val_offset:109938*0 + 3*286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109938*0 + 3*286*FLEN/8, x4, x1, x2)

inst_36647:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x387e81 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x319c25 and fs3 == 0 and fe3 == 0xde and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f387e81; op2val:0x3fb19c25;
op3val:0x6f0007ff; valaddr_reg:x3; val_offset:109941*0 + 3*286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109941*0 + 3*286*FLEN/8, x4, x1, x2)

inst_36648:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x387e81 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x319c25 and fs3 == 0 and fe3 == 0xde and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f387e81; op2val:0x3fb19c25;
op3val:0x6f000fff; valaddr_reg:x3; val_offset:109944*0 + 3*286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109944*0 + 3*286*FLEN/8, x4, x1, x2)

inst_36649:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x387e81 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x319c25 and fs3 == 0 and fe3 == 0xde and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f387e81; op2val:0x3fb19c25;
op3val:0x6f001fff; valaddr_reg:x3; val_offset:109947*0 + 3*286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109947*0 + 3*286*FLEN/8, x4, x1, x2)

inst_36650:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x387e81 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x319c25 and fs3 == 0 and fe3 == 0xde and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f387e81; op2val:0x3fb19c25;
op3val:0x6f003fff; valaddr_reg:x3; val_offset:109950*0 + 3*286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109950*0 + 3*286*FLEN/8, x4, x1, x2)

inst_36651:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x387e81 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x319c25 and fs3 == 0 and fe3 == 0xde and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f387e81; op2val:0x3fb19c25;
op3val:0x6f007fff; valaddr_reg:x3; val_offset:109953*0 + 3*286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109953*0 + 3*286*FLEN/8, x4, x1, x2)

inst_36652:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x387e81 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x319c25 and fs3 == 0 and fe3 == 0xde and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f387e81; op2val:0x3fb19c25;
op3val:0x6f00ffff; valaddr_reg:x3; val_offset:109956*0 + 3*286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109956*0 + 3*286*FLEN/8, x4, x1, x2)

inst_36653:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x387e81 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x319c25 and fs3 == 0 and fe3 == 0xde and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f387e81; op2val:0x3fb19c25;
op3val:0x6f01ffff; valaddr_reg:x3; val_offset:109959*0 + 3*286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109959*0 + 3*286*FLEN/8, x4, x1, x2)

inst_36654:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x387e81 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x319c25 and fs3 == 0 and fe3 == 0xde and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f387e81; op2val:0x3fb19c25;
op3val:0x6f03ffff; valaddr_reg:x3; val_offset:109962*0 + 3*286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109962*0 + 3*286*FLEN/8, x4, x1, x2)

inst_36655:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x387e81 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x319c25 and fs3 == 0 and fe3 == 0xde and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f387e81; op2val:0x3fb19c25;
op3val:0x6f07ffff; valaddr_reg:x3; val_offset:109965*0 + 3*286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109965*0 + 3*286*FLEN/8, x4, x1, x2)

inst_36656:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x387e81 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x319c25 and fs3 == 0 and fe3 == 0xde and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f387e81; op2val:0x3fb19c25;
op3val:0x6f0fffff; valaddr_reg:x3; val_offset:109968*0 + 3*286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109968*0 + 3*286*FLEN/8, x4, x1, x2)

inst_36657:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x387e81 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x319c25 and fs3 == 0 and fe3 == 0xde and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f387e81; op2val:0x3fb19c25;
op3val:0x6f1fffff; valaddr_reg:x3; val_offset:109971*0 + 3*286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109971*0 + 3*286*FLEN/8, x4, x1, x2)

inst_36658:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x387e81 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x319c25 and fs3 == 0 and fe3 == 0xde and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f387e81; op2val:0x3fb19c25;
op3val:0x6f3fffff; valaddr_reg:x3; val_offset:109974*0 + 3*286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109974*0 + 3*286*FLEN/8, x4, x1, x2)

inst_36659:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x387e81 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x319c25 and fs3 == 0 and fe3 == 0xde and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f387e81; op2val:0x3fb19c25;
op3val:0x6f400000; valaddr_reg:x3; val_offset:109977*0 + 3*286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109977*0 + 3*286*FLEN/8, x4, x1, x2)

inst_36660:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x387e81 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x319c25 and fs3 == 0 and fe3 == 0xde and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f387e81; op2val:0x3fb19c25;
op3val:0x6f600000; valaddr_reg:x3; val_offset:109980*0 + 3*286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109980*0 + 3*286*FLEN/8, x4, x1, x2)

inst_36661:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x387e81 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x319c25 and fs3 == 0 and fe3 == 0xde and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f387e81; op2val:0x3fb19c25;
op3val:0x6f700000; valaddr_reg:x3; val_offset:109983*0 + 3*286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109983*0 + 3*286*FLEN/8, x4, x1, x2)

inst_36662:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x387e81 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x319c25 and fs3 == 0 and fe3 == 0xde and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f387e81; op2val:0x3fb19c25;
op3val:0x6f780000; valaddr_reg:x3; val_offset:109986*0 + 3*286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109986*0 + 3*286*FLEN/8, x4, x1, x2)

inst_36663:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x387e81 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x319c25 and fs3 == 0 and fe3 == 0xde and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f387e81; op2val:0x3fb19c25;
op3val:0x6f7c0000; valaddr_reg:x3; val_offset:109989*0 + 3*286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109989*0 + 3*286*FLEN/8, x4, x1, x2)

inst_36664:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x387e81 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x319c25 and fs3 == 0 and fe3 == 0xde and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f387e81; op2val:0x3fb19c25;
op3val:0x6f7e0000; valaddr_reg:x3; val_offset:109992*0 + 3*286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109992*0 + 3*286*FLEN/8, x4, x1, x2)

inst_36665:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x387e81 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x319c25 and fs3 == 0 and fe3 == 0xde and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f387e81; op2val:0x3fb19c25;
op3val:0x6f7f0000; valaddr_reg:x3; val_offset:109995*0 + 3*286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109995*0 + 3*286*FLEN/8, x4, x1, x2)

inst_36666:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x387e81 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x319c25 and fs3 == 0 and fe3 == 0xde and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f387e81; op2val:0x3fb19c25;
op3val:0x6f7f8000; valaddr_reg:x3; val_offset:109998*0 + 3*286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109998*0 + 3*286*FLEN/8, x4, x1, x2)

inst_36667:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x387e81 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x319c25 and fs3 == 0 and fe3 == 0xde and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f387e81; op2val:0x3fb19c25;
op3val:0x6f7fc000; valaddr_reg:x3; val_offset:110001*0 + 3*286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110001*0 + 3*286*FLEN/8, x4, x1, x2)

inst_36668:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x387e81 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x319c25 and fs3 == 0 and fe3 == 0xde and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f387e81; op2val:0x3fb19c25;
op3val:0x6f7fe000; valaddr_reg:x3; val_offset:110004*0 + 3*286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110004*0 + 3*286*FLEN/8, x4, x1, x2)

inst_36669:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x387e81 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x319c25 and fs3 == 0 and fe3 == 0xde and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f387e81; op2val:0x3fb19c25;
op3val:0x6f7ff000; valaddr_reg:x3; val_offset:110007*0 + 3*286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110007*0 + 3*286*FLEN/8, x4, x1, x2)

inst_36670:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x387e81 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x319c25 and fs3 == 0 and fe3 == 0xde and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f387e81; op2val:0x3fb19c25;
op3val:0x6f7ff800; valaddr_reg:x3; val_offset:110010*0 + 3*286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110010*0 + 3*286*FLEN/8, x4, x1, x2)

inst_36671:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x387e81 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x319c25 and fs3 == 0 and fe3 == 0xde and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f387e81; op2val:0x3fb19c25;
op3val:0x6f7ffc00; valaddr_reg:x3; val_offset:110013*0 + 3*286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110013*0 + 3*286*FLEN/8, x4, x1, x2)

inst_36672:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x387e81 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x319c25 and fs3 == 0 and fe3 == 0xde and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f387e81; op2val:0x3fb19c25;
op3val:0x6f7ffe00; valaddr_reg:x3; val_offset:110016*0 + 3*286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110016*0 + 3*286*FLEN/8, x4, x1, x2)

inst_36673:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x387e81 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x319c25 and fs3 == 0 and fe3 == 0xde and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f387e81; op2val:0x3fb19c25;
op3val:0x6f7fff00; valaddr_reg:x3; val_offset:110019*0 + 3*286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110019*0 + 3*286*FLEN/8, x4, x1, x2)

inst_36674:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x387e81 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x319c25 and fs3 == 0 and fe3 == 0xde and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f387e81; op2val:0x3fb19c25;
op3val:0x6f7fff80; valaddr_reg:x3; val_offset:110022*0 + 3*286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110022*0 + 3*286*FLEN/8, x4, x1, x2)

inst_36675:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x387e81 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x319c25 and fs3 == 0 and fe3 == 0xde and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f387e81; op2val:0x3fb19c25;
op3val:0x6f7fffc0; valaddr_reg:x3; val_offset:110025*0 + 3*286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110025*0 + 3*286*FLEN/8, x4, x1, x2)

inst_36676:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x387e81 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x319c25 and fs3 == 0 and fe3 == 0xde and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f387e81; op2val:0x3fb19c25;
op3val:0x6f7fffe0; valaddr_reg:x3; val_offset:110028*0 + 3*286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110028*0 + 3*286*FLEN/8, x4, x1, x2)

inst_36677:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x387e81 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x319c25 and fs3 == 0 and fe3 == 0xde and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f387e81; op2val:0x3fb19c25;
op3val:0x6f7ffff0; valaddr_reg:x3; val_offset:110031*0 + 3*286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110031*0 + 3*286*FLEN/8, x4, x1, x2)

inst_36678:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x387e81 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x319c25 and fs3 == 0 and fe3 == 0xde and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f387e81; op2val:0x3fb19c25;
op3val:0x6f7ffff8; valaddr_reg:x3; val_offset:110034*0 + 3*286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110034*0 + 3*286*FLEN/8, x4, x1, x2)

inst_36679:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x387e81 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x319c25 and fs3 == 0 and fe3 == 0xde and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f387e81; op2val:0x3fb19c25;
op3val:0x6f7ffffc; valaddr_reg:x3; val_offset:110037*0 + 3*286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110037*0 + 3*286*FLEN/8, x4, x1, x2)

inst_36680:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x387e81 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x319c25 and fs3 == 0 and fe3 == 0xde and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f387e81; op2val:0x3fb19c25;
op3val:0x6f7ffffe; valaddr_reg:x3; val_offset:110040*0 + 3*286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110040*0 + 3*286*FLEN/8, x4, x1, x2)

inst_36681:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x387e81 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x319c25 and fs3 == 0 and fe3 == 0xde and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f387e81; op2val:0x3fb19c25;
op3val:0x6f7fffff; valaddr_reg:x3; val_offset:110043*0 + 3*286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110043*0 + 3*286*FLEN/8, x4, x1, x2)

inst_36682:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x387e81 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x319c25 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f387e81; op2val:0x3fb19c25;
op3val:0x7f000001; valaddr_reg:x3; val_offset:110046*0 + 3*286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110046*0 + 3*286*FLEN/8, x4, x1, x2)

inst_36683:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x387e81 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x319c25 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f387e81; op2val:0x3fb19c25;
op3val:0x7f000003; valaddr_reg:x3; val_offset:110049*0 + 3*286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110049*0 + 3*286*FLEN/8, x4, x1, x2)

inst_36684:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x387e81 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x319c25 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f387e81; op2val:0x3fb19c25;
op3val:0x7f000007; valaddr_reg:x3; val_offset:110052*0 + 3*286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110052*0 + 3*286*FLEN/8, x4, x1, x2)

inst_36685:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x387e81 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x319c25 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f387e81; op2val:0x3fb19c25;
op3val:0x7f199999; valaddr_reg:x3; val_offset:110055*0 + 3*286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110055*0 + 3*286*FLEN/8, x4, x1, x2)

inst_36686:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x387e81 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x319c25 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f387e81; op2val:0x3fb19c25;
op3val:0x7f249249; valaddr_reg:x3; val_offset:110058*0 + 3*286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110058*0 + 3*286*FLEN/8, x4, x1, x2)

inst_36687:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x387e81 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x319c25 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f387e81; op2val:0x3fb19c25;
op3val:0x7f333333; valaddr_reg:x3; val_offset:110061*0 + 3*286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110061*0 + 3*286*FLEN/8, x4, x1, x2)

inst_36688:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x387e81 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x319c25 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f387e81; op2val:0x3fb19c25;
op3val:0x7f36db6d; valaddr_reg:x3; val_offset:110064*0 + 3*286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110064*0 + 3*286*FLEN/8, x4, x1, x2)

inst_36689:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x387e81 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x319c25 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f387e81; op2val:0x3fb19c25;
op3val:0x7f3bbbbb; valaddr_reg:x3; val_offset:110067*0 + 3*286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110067*0 + 3*286*FLEN/8, x4, x1, x2)

inst_36690:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x387e81 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x319c25 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f387e81; op2val:0x3fb19c25;
op3val:0x7f444444; valaddr_reg:x3; val_offset:110070*0 + 3*286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110070*0 + 3*286*FLEN/8, x4, x1, x2)

inst_36691:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x387e81 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x319c25 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f387e81; op2val:0x3fb19c25;
op3val:0x7f4ccccc; valaddr_reg:x3; val_offset:110073*0 + 3*286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110073*0 + 3*286*FLEN/8, x4, x1, x2)

inst_36692:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x387e81 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x319c25 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f387e81; op2val:0x3fb19c25;
op3val:0x7f5b6db6; valaddr_reg:x3; val_offset:110076*0 + 3*286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110076*0 + 3*286*FLEN/8, x4, x1, x2)

inst_36693:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x387e81 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x319c25 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f387e81; op2val:0x3fb19c25;
op3val:0x7f666666; valaddr_reg:x3; val_offset:110079*0 + 3*286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110079*0 + 3*286*FLEN/8, x4, x1, x2)

inst_36694:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x387e81 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x319c25 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f387e81; op2val:0x3fb19c25;
op3val:0x7f6db6db; valaddr_reg:x3; val_offset:110082*0 + 3*286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110082*0 + 3*286*FLEN/8, x4, x1, x2)

inst_36695:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x387e81 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x319c25 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f387e81; op2val:0x3fb19c25;
op3val:0x7f7ffff8; valaddr_reg:x3; val_offset:110085*0 + 3*286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110085*0 + 3*286*FLEN/8, x4, x1, x2)

inst_36696:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x387e81 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x319c25 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f387e81; op2val:0x3fb19c25;
op3val:0x7f7ffffc; valaddr_reg:x3; val_offset:110088*0 + 3*286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110088*0 + 3*286*FLEN/8, x4, x1, x2)

inst_36697:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x387e81 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x319c25 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f387e81; op2val:0x3fb19c25;
op3val:0x7f7ffffe; valaddr_reg:x3; val_offset:110091*0 + 3*286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110091*0 + 3*286*FLEN/8, x4, x1, x2)

inst_36698:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x388d0b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2c638a and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f388d0b; op2val:0x802c638a;
op3val:0xbf800001; valaddr_reg:x3; val_offset:110094*0 + 3*286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110094*0 + 3*286*FLEN/8, x4, x1, x2)

inst_36699:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x388d0b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2c638a and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f388d0b; op2val:0x802c638a;
op3val:0xbf800003; valaddr_reg:x3; val_offset:110097*0 + 3*286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110097*0 + 3*286*FLEN/8, x4, x1, x2)

inst_36700:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x388d0b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2c638a and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f388d0b; op2val:0x802c638a;
op3val:0xbf800007; valaddr_reg:x3; val_offset:110100*0 + 3*286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110100*0 + 3*286*FLEN/8, x4, x1, x2)

inst_36701:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x388d0b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2c638a and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f388d0b; op2val:0x802c638a;
op3val:0xbf999999; valaddr_reg:x3; val_offset:110103*0 + 3*286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110103*0 + 3*286*FLEN/8, x4, x1, x2)

inst_36702:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x388d0b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2c638a and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f388d0b; op2val:0x802c638a;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:110106*0 + 3*286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110106*0 + 3*286*FLEN/8, x4, x1, x2)

inst_36703:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x388d0b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2c638a and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f388d0b; op2val:0x802c638a;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:110109*0 + 3*286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110109*0 + 3*286*FLEN/8, x4, x1, x2)

inst_36704:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x388d0b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2c638a and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f388d0b; op2val:0x802c638a;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:110112*0 + 3*286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110112*0 + 3*286*FLEN/8, x4, x1, x2)

inst_36705:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x388d0b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2c638a and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f388d0b; op2val:0x802c638a;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:110115*0 + 3*286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110115*0 + 3*286*FLEN/8, x4, x1, x2)

inst_36706:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x388d0b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2c638a and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f388d0b; op2val:0x802c638a;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:110118*0 + 3*286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110118*0 + 3*286*FLEN/8, x4, x1, x2)

inst_36707:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x388d0b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2c638a and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f388d0b; op2val:0x802c638a;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:110121*0 + 3*286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110121*0 + 3*286*FLEN/8, x4, x1, x2)

inst_36708:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x388d0b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2c638a and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f388d0b; op2val:0x802c638a;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:110124*0 + 3*286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110124*0 + 3*286*FLEN/8, x4, x1, x2)

inst_36709:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x388d0b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2c638a and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f388d0b; op2val:0x802c638a;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:110127*0 + 3*286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110127*0 + 3*286*FLEN/8, x4, x1, x2)

inst_36710:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x388d0b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2c638a and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f388d0b; op2val:0x802c638a;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:110130*0 + 3*286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110130*0 + 3*286*FLEN/8, x4, x1, x2)

inst_36711:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x388d0b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2c638a and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f388d0b; op2val:0x802c638a;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:110133*0 + 3*286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110133*0 + 3*286*FLEN/8, x4, x1, x2)

inst_36712:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x388d0b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2c638a and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f388d0b; op2val:0x802c638a;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:110136*0 + 3*286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110136*0 + 3*286*FLEN/8, x4, x1, x2)

inst_36713:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x388d0b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2c638a and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f388d0b; op2val:0x802c638a;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:110139*0 + 3*286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110139*0 + 3*286*FLEN/8, x4, x1, x2)

inst_36714:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x388d0b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2c638a and fs3 == 1 and fe3 == 0x8f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f388d0b; op2val:0x802c638a;
op3val:0xc7800000; valaddr_reg:x3; val_offset:110142*0 + 3*286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110142*0 + 3*286*FLEN/8, x4, x1, x2)

inst_36715:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x388d0b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2c638a and fs3 == 1 and fe3 == 0x8f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f388d0b; op2val:0x802c638a;
op3val:0xc7800001; valaddr_reg:x3; val_offset:110145*0 + 3*286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110145*0 + 3*286*FLEN/8, x4, x1, x2)

inst_36716:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x388d0b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2c638a and fs3 == 1 and fe3 == 0x8f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f388d0b; op2val:0x802c638a;
op3val:0xc7800003; valaddr_reg:x3; val_offset:110148*0 + 3*286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110148*0 + 3*286*FLEN/8, x4, x1, x2)

inst_36717:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x388d0b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2c638a and fs3 == 1 and fe3 == 0x8f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f388d0b; op2val:0x802c638a;
op3val:0xc7800007; valaddr_reg:x3; val_offset:110151*0 + 3*286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110151*0 + 3*286*FLEN/8, x4, x1, x2)

inst_36718:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x388d0b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2c638a and fs3 == 1 and fe3 == 0x8f and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f388d0b; op2val:0x802c638a;
op3val:0xc780000f; valaddr_reg:x3; val_offset:110154*0 + 3*286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110154*0 + 3*286*FLEN/8, x4, x1, x2)

inst_36719:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x388d0b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2c638a and fs3 == 1 and fe3 == 0x8f and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f388d0b; op2val:0x802c638a;
op3val:0xc780001f; valaddr_reg:x3; val_offset:110157*0 + 3*286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110157*0 + 3*286*FLEN/8, x4, x1, x2)

inst_36720:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x388d0b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2c638a and fs3 == 1 and fe3 == 0x8f and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f388d0b; op2val:0x802c638a;
op3val:0xc780003f; valaddr_reg:x3; val_offset:110160*0 + 3*286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110160*0 + 3*286*FLEN/8, x4, x1, x2)

inst_36721:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x388d0b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2c638a and fs3 == 1 and fe3 == 0x8f and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f388d0b; op2val:0x802c638a;
op3val:0xc780007f; valaddr_reg:x3; val_offset:110163*0 + 3*286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110163*0 + 3*286*FLEN/8, x4, x1, x2)

inst_36722:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x388d0b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2c638a and fs3 == 1 and fe3 == 0x8f and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f388d0b; op2val:0x802c638a;
op3val:0xc78000ff; valaddr_reg:x3; val_offset:110166*0 + 3*286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110166*0 + 3*286*FLEN/8, x4, x1, x2)

inst_36723:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x388d0b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2c638a and fs3 == 1 and fe3 == 0x8f and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f388d0b; op2val:0x802c638a;
op3val:0xc78001ff; valaddr_reg:x3; val_offset:110169*0 + 3*286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110169*0 + 3*286*FLEN/8, x4, x1, x2)

inst_36724:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x388d0b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2c638a and fs3 == 1 and fe3 == 0x8f and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f388d0b; op2val:0x802c638a;
op3val:0xc78003ff; valaddr_reg:x3; val_offset:110172*0 + 3*286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110172*0 + 3*286*FLEN/8, x4, x1, x2)

inst_36725:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x388d0b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2c638a and fs3 == 1 and fe3 == 0x8f and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f388d0b; op2val:0x802c638a;
op3val:0xc78007ff; valaddr_reg:x3; val_offset:110175*0 + 3*286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110175*0 + 3*286*FLEN/8, x4, x1, x2)

inst_36726:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x388d0b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2c638a and fs3 == 1 and fe3 == 0x8f and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f388d0b; op2val:0x802c638a;
op3val:0xc7800fff; valaddr_reg:x3; val_offset:110178*0 + 3*286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110178*0 + 3*286*FLEN/8, x4, x1, x2)

inst_36727:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x388d0b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2c638a and fs3 == 1 and fe3 == 0x8f and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f388d0b; op2val:0x802c638a;
op3val:0xc7801fff; valaddr_reg:x3; val_offset:110181*0 + 3*286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110181*0 + 3*286*FLEN/8, x4, x1, x2)

inst_36728:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x388d0b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2c638a and fs3 == 1 and fe3 == 0x8f and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f388d0b; op2val:0x802c638a;
op3val:0xc7803fff; valaddr_reg:x3; val_offset:110184*0 + 3*286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110184*0 + 3*286*FLEN/8, x4, x1, x2)

inst_36729:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x388d0b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2c638a and fs3 == 1 and fe3 == 0x8f and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f388d0b; op2val:0x802c638a;
op3val:0xc7807fff; valaddr_reg:x3; val_offset:110187*0 + 3*286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110187*0 + 3*286*FLEN/8, x4, x1, x2)

inst_36730:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x388d0b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2c638a and fs3 == 1 and fe3 == 0x8f and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f388d0b; op2val:0x802c638a;
op3val:0xc780ffff; valaddr_reg:x3; val_offset:110190*0 + 3*286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110190*0 + 3*286*FLEN/8, x4, x1, x2)

inst_36731:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x388d0b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2c638a and fs3 == 1 and fe3 == 0x8f and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f388d0b; op2val:0x802c638a;
op3val:0xc781ffff; valaddr_reg:x3; val_offset:110193*0 + 3*286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110193*0 + 3*286*FLEN/8, x4, x1, x2)

inst_36732:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x388d0b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2c638a and fs3 == 1 and fe3 == 0x8f and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f388d0b; op2val:0x802c638a;
op3val:0xc783ffff; valaddr_reg:x3; val_offset:110196*0 + 3*286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110196*0 + 3*286*FLEN/8, x4, x1, x2)

inst_36733:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x388d0b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2c638a and fs3 == 1 and fe3 == 0x8f and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f388d0b; op2val:0x802c638a;
op3val:0xc787ffff; valaddr_reg:x3; val_offset:110199*0 + 3*286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110199*0 + 3*286*FLEN/8, x4, x1, x2)

inst_36734:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x388d0b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2c638a and fs3 == 1 and fe3 == 0x8f and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f388d0b; op2val:0x802c638a;
op3val:0xc78fffff; valaddr_reg:x3; val_offset:110202*0 + 3*286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110202*0 + 3*286*FLEN/8, x4, x1, x2)

inst_36735:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x388d0b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2c638a and fs3 == 1 and fe3 == 0x8f and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f388d0b; op2val:0x802c638a;
op3val:0xc79fffff; valaddr_reg:x3; val_offset:110205*0 + 3*286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110205*0 + 3*286*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2134328890,32,FLEN)
NAN_BOXED(1068681925,32,FLEN)
NAN_BOXED(1577056256,32,FLEN)
NAN_BOXED(2134328890,32,FLEN)
NAN_BOXED(1068681925,32,FLEN)
NAN_BOXED(1577057280,32,FLEN)
NAN_BOXED(2134328890,32,FLEN)
NAN_BOXED(1068681925,32,FLEN)
NAN_BOXED(1577057792,32,FLEN)
NAN_BOXED(2134328890,32,FLEN)
NAN_BOXED(1068681925,32,FLEN)
NAN_BOXED(1577058048,32,FLEN)
NAN_BOXED(2134328890,32,FLEN)
NAN_BOXED(1068681925,32,FLEN)
NAN_BOXED(1577058176,32,FLEN)
NAN_BOXED(2134328890,32,FLEN)
NAN_BOXED(1068681925,32,FLEN)
NAN_BOXED(1577058240,32,FLEN)
NAN_BOXED(2134328890,32,FLEN)
NAN_BOXED(1068681925,32,FLEN)
NAN_BOXED(1577058272,32,FLEN)
NAN_BOXED(2134328890,32,FLEN)
NAN_BOXED(1068681925,32,FLEN)
NAN_BOXED(1577058288,32,FLEN)
NAN_BOXED(2134328890,32,FLEN)
NAN_BOXED(1068681925,32,FLEN)
NAN_BOXED(1577058296,32,FLEN)
NAN_BOXED(2134328890,32,FLEN)
NAN_BOXED(1068681925,32,FLEN)
NAN_BOXED(1577058300,32,FLEN)
NAN_BOXED(2134328890,32,FLEN)
NAN_BOXED(1068681925,32,FLEN)
NAN_BOXED(1577058302,32,FLEN)
NAN_BOXED(2134328890,32,FLEN)
NAN_BOXED(1068681925,32,FLEN)
NAN_BOXED(1577058303,32,FLEN)
NAN_BOXED(2134328890,32,FLEN)
NAN_BOXED(1068681925,32,FLEN)
NAN_BOXED(2130706433,32,FLEN)
NAN_BOXED(2134328890,32,FLEN)
NAN_BOXED(1068681925,32,FLEN)
NAN_BOXED(2130706435,32,FLEN)
NAN_BOXED(2134328890,32,FLEN)
NAN_BOXED(1068681925,32,FLEN)
NAN_BOXED(2130706439,32,FLEN)
NAN_BOXED(2134328890,32,FLEN)
NAN_BOXED(1068681925,32,FLEN)
NAN_BOXED(2132384153,32,FLEN)
NAN_BOXED(2134328890,32,FLEN)
NAN_BOXED(1068681925,32,FLEN)
NAN_BOXED(2133103177,32,FLEN)
NAN_BOXED(2134328890,32,FLEN)
NAN_BOXED(1068681925,32,FLEN)
NAN_BOXED(2134061875,32,FLEN)
NAN_BOXED(2134328890,32,FLEN)
NAN_BOXED(1068681925,32,FLEN)
NAN_BOXED(2134301549,32,FLEN)
NAN_BOXED(2134328890,32,FLEN)
NAN_BOXED(1068681925,32,FLEN)
NAN_BOXED(2134621115,32,FLEN)
NAN_BOXED(2134328890,32,FLEN)
NAN_BOXED(1068681925,32,FLEN)
NAN_BOXED(2135180356,32,FLEN)
NAN_BOXED(2134328890,32,FLEN)
NAN_BOXED(1068681925,32,FLEN)
NAN_BOXED(2135739596,32,FLEN)
NAN_BOXED(2134328890,32,FLEN)
NAN_BOXED(1068681925,32,FLEN)
NAN_BOXED(2136698294,32,FLEN)
NAN_BOXED(2134328890,32,FLEN)
NAN_BOXED(1068681925,32,FLEN)
NAN_BOXED(2137417318,32,FLEN)
NAN_BOXED(2134328890,32,FLEN)
NAN_BOXED(1068681925,32,FLEN)
NAN_BOXED(2137896667,32,FLEN)
NAN_BOXED(2134328890,32,FLEN)
NAN_BOXED(1068681925,32,FLEN)
NAN_BOXED(2139095032,32,FLEN)
NAN_BOXED(2134328890,32,FLEN)
NAN_BOXED(1068681925,32,FLEN)
NAN_BOXED(2139095036,32,FLEN)
NAN_BOXED(2134328890,32,FLEN)
NAN_BOXED(1068681925,32,FLEN)
NAN_BOXED(2139095038,32,FLEN)
NAN_BOXED(2134408833,32,FLEN)
NAN_BOXED(1068604453,32,FLEN)
NAN_BOXED(1862270976,32,FLEN)
NAN_BOXED(2134408833,32,FLEN)
NAN_BOXED(1068604453,32,FLEN)
NAN_BOXED(1862270977,32,FLEN)
NAN_BOXED(2134408833,32,FLEN)
NAN_BOXED(1068604453,32,FLEN)
NAN_BOXED(1862270979,32,FLEN)
NAN_BOXED(2134408833,32,FLEN)
NAN_BOXED(1068604453,32,FLEN)
NAN_BOXED(1862270983,32,FLEN)
NAN_BOXED(2134408833,32,FLEN)
NAN_BOXED(1068604453,32,FLEN)
NAN_BOXED(1862270991,32,FLEN)
NAN_BOXED(2134408833,32,FLEN)
NAN_BOXED(1068604453,32,FLEN)
NAN_BOXED(1862271007,32,FLEN)
NAN_BOXED(2134408833,32,FLEN)
NAN_BOXED(1068604453,32,FLEN)
NAN_BOXED(1862271039,32,FLEN)
NAN_BOXED(2134408833,32,FLEN)
NAN_BOXED(1068604453,32,FLEN)
NAN_BOXED(1862271103,32,FLEN)
NAN_BOXED(2134408833,32,FLEN)
NAN_BOXED(1068604453,32,FLEN)
NAN_BOXED(1862271231,32,FLEN)
NAN_BOXED(2134408833,32,FLEN)
NAN_BOXED(1068604453,32,FLEN)
NAN_BOXED(1862271487,32,FLEN)
NAN_BOXED(2134408833,32,FLEN)
NAN_BOXED(1068604453,32,FLEN)
NAN_BOXED(1862271999,32,FLEN)
NAN_BOXED(2134408833,32,FLEN)
NAN_BOXED(1068604453,32,FLEN)
NAN_BOXED(1862273023,32,FLEN)
NAN_BOXED(2134408833,32,FLEN)
NAN_BOXED(1068604453,32,FLEN)
NAN_BOXED(1862275071,32,FLEN)
NAN_BOXED(2134408833,32,FLEN)
NAN_BOXED(1068604453,32,FLEN)
NAN_BOXED(1862279167,32,FLEN)
NAN_BOXED(2134408833,32,FLEN)
NAN_BOXED(1068604453,32,FLEN)
NAN_BOXED(1862287359,32,FLEN)
NAN_BOXED(2134408833,32,FLEN)
NAN_BOXED(1068604453,32,FLEN)
NAN_BOXED(1862303743,32,FLEN)
NAN_BOXED(2134408833,32,FLEN)
NAN_BOXED(1068604453,32,FLEN)
NAN_BOXED(1862336511,32,FLEN)
NAN_BOXED(2134408833,32,FLEN)
NAN_BOXED(1068604453,32,FLEN)
NAN_BOXED(1862402047,32,FLEN)
NAN_BOXED(2134408833,32,FLEN)
NAN_BOXED(1068604453,32,FLEN)
NAN_BOXED(1862533119,32,FLEN)
NAN_BOXED(2134408833,32,FLEN)
NAN_BOXED(1068604453,32,FLEN)
NAN_BOXED(1862795263,32,FLEN)
NAN_BOXED(2134408833,32,FLEN)
NAN_BOXED(1068604453,32,FLEN)
NAN_BOXED(1863319551,32,FLEN)
NAN_BOXED(2134408833,32,FLEN)
NAN_BOXED(1068604453,32,FLEN)
NAN_BOXED(1864368127,32,FLEN)
NAN_BOXED(2134408833,32,FLEN)
NAN_BOXED(1068604453,32,FLEN)
NAN_BOXED(1866465279,32,FLEN)
NAN_BOXED(2134408833,32,FLEN)
NAN_BOXED(1068604453,32,FLEN)
NAN_BOXED(1866465280,32,FLEN)
NAN_BOXED(2134408833,32,FLEN)
NAN_BOXED(1068604453,32,FLEN)
NAN_BOXED(1868562432,32,FLEN)
NAN_BOXED(2134408833,32,FLEN)
NAN_BOXED(1068604453,32,FLEN)
NAN_BOXED(1869611008,32,FLEN)
NAN_BOXED(2134408833,32,FLEN)
NAN_BOXED(1068604453,32,FLEN)
NAN_BOXED(1870135296,32,FLEN)
NAN_BOXED(2134408833,32,FLEN)
NAN_BOXED(1068604453,32,FLEN)
NAN_BOXED(1870397440,32,FLEN)
NAN_BOXED(2134408833,32,FLEN)
NAN_BOXED(1068604453,32,FLEN)
NAN_BOXED(1870528512,32,FLEN)
NAN_BOXED(2134408833,32,FLEN)
NAN_BOXED(1068604453,32,FLEN)
NAN_BOXED(1870594048,32,FLEN)
NAN_BOXED(2134408833,32,FLEN)
NAN_BOXED(1068604453,32,FLEN)
NAN_BOXED(1870626816,32,FLEN)
NAN_BOXED(2134408833,32,FLEN)
NAN_BOXED(1068604453,32,FLEN)
NAN_BOXED(1870643200,32,FLEN)
NAN_BOXED(2134408833,32,FLEN)
NAN_BOXED(1068604453,32,FLEN)
NAN_BOXED(1870651392,32,FLEN)
NAN_BOXED(2134408833,32,FLEN)
NAN_BOXED(1068604453,32,FLEN)
NAN_BOXED(1870655488,32,FLEN)
NAN_BOXED(2134408833,32,FLEN)
NAN_BOXED(1068604453,32,FLEN)
NAN_BOXED(1870657536,32,FLEN)
NAN_BOXED(2134408833,32,FLEN)
NAN_BOXED(1068604453,32,FLEN)
NAN_BOXED(1870658560,32,FLEN)
NAN_BOXED(2134408833,32,FLEN)
NAN_BOXED(1068604453,32,FLEN)
NAN_BOXED(1870659072,32,FLEN)
NAN_BOXED(2134408833,32,FLEN)
NAN_BOXED(1068604453,32,FLEN)
NAN_BOXED(1870659328,32,FLEN)
NAN_BOXED(2134408833,32,FLEN)
NAN_BOXED(1068604453,32,FLEN)
NAN_BOXED(1870659456,32,FLEN)
NAN_BOXED(2134408833,32,FLEN)
NAN_BOXED(1068604453,32,FLEN)
NAN_BOXED(1870659520,32,FLEN)
NAN_BOXED(2134408833,32,FLEN)
NAN_BOXED(1068604453,32,FLEN)
NAN_BOXED(1870659552,32,FLEN)
NAN_BOXED(2134408833,32,FLEN)
NAN_BOXED(1068604453,32,FLEN)
NAN_BOXED(1870659568,32,FLEN)
NAN_BOXED(2134408833,32,FLEN)
NAN_BOXED(1068604453,32,FLEN)
NAN_BOXED(1870659576,32,FLEN)
NAN_BOXED(2134408833,32,FLEN)
NAN_BOXED(1068604453,32,FLEN)
NAN_BOXED(1870659580,32,FLEN)
NAN_BOXED(2134408833,32,FLEN)
NAN_BOXED(1068604453,32,FLEN)
NAN_BOXED(1870659582,32,FLEN)
NAN_BOXED(2134408833,32,FLEN)
NAN_BOXED(1068604453,32,FLEN)
NAN_BOXED(1870659583,32,FLEN)
NAN_BOXED(2134408833,32,FLEN)
NAN_BOXED(1068604453,32,FLEN)
NAN_BOXED(2130706433,32,FLEN)
NAN_BOXED(2134408833,32,FLEN)
NAN_BOXED(1068604453,32,FLEN)
NAN_BOXED(2130706435,32,FLEN)
NAN_BOXED(2134408833,32,FLEN)
NAN_BOXED(1068604453,32,FLEN)
NAN_BOXED(2130706439,32,FLEN)
NAN_BOXED(2134408833,32,FLEN)
NAN_BOXED(1068604453,32,FLEN)
NAN_BOXED(2132384153,32,FLEN)
NAN_BOXED(2134408833,32,FLEN)
NAN_BOXED(1068604453,32,FLEN)
NAN_BOXED(2133103177,32,FLEN)
NAN_BOXED(2134408833,32,FLEN)
NAN_BOXED(1068604453,32,FLEN)
NAN_BOXED(2134061875,32,FLEN)
NAN_BOXED(2134408833,32,FLEN)
NAN_BOXED(1068604453,32,FLEN)
NAN_BOXED(2134301549,32,FLEN)
NAN_BOXED(2134408833,32,FLEN)
NAN_BOXED(1068604453,32,FLEN)
NAN_BOXED(2134621115,32,FLEN)
NAN_BOXED(2134408833,32,FLEN)
NAN_BOXED(1068604453,32,FLEN)
NAN_BOXED(2135180356,32,FLEN)
NAN_BOXED(2134408833,32,FLEN)
NAN_BOXED(1068604453,32,FLEN)
NAN_BOXED(2135739596,32,FLEN)
NAN_BOXED(2134408833,32,FLEN)
NAN_BOXED(1068604453,32,FLEN)
NAN_BOXED(2136698294,32,FLEN)
NAN_BOXED(2134408833,32,FLEN)
NAN_BOXED(1068604453,32,FLEN)
NAN_BOXED(2137417318,32,FLEN)
NAN_BOXED(2134408833,32,FLEN)
NAN_BOXED(1068604453,32,FLEN)
NAN_BOXED(2137896667,32,FLEN)
NAN_BOXED(2134408833,32,FLEN)
NAN_BOXED(1068604453,32,FLEN)
NAN_BOXED(2139095032,32,FLEN)
NAN_BOXED(2134408833,32,FLEN)
NAN_BOXED(1068604453,32,FLEN)
NAN_BOXED(2139095036,32,FLEN)
NAN_BOXED(2134408833,32,FLEN)
NAN_BOXED(1068604453,32,FLEN)
NAN_BOXED(2139095038,32,FLEN)
NAN_BOXED(2134412555,32,FLEN)
NAN_BOXED(2150392714,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2134412555,32,FLEN)
NAN_BOXED(2150392714,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2134412555,32,FLEN)
NAN_BOXED(2150392714,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
NAN_BOXED(2134412555,32,FLEN)
NAN_BOXED(2150392714,32,FLEN)
NAN_BOXED(3214514585,32,FLEN)
NAN_BOXED(2134412555,32,FLEN)
NAN_BOXED(2150392714,32,FLEN)
NAN_BOXED(3215233609,32,FLEN)
NAN_BOXED(2134412555,32,FLEN)
NAN_BOXED(2150392714,32,FLEN)
NAN_BOXED(3216192307,32,FLEN)
NAN_BOXED(2134412555,32,FLEN)
NAN_BOXED(2150392714,32,FLEN)
NAN_BOXED(3216431981,32,FLEN)
NAN_BOXED(2134412555,32,FLEN)
NAN_BOXED(2150392714,32,FLEN)
NAN_BOXED(3216751547,32,FLEN)
NAN_BOXED(2134412555,32,FLEN)
NAN_BOXED(2150392714,32,FLEN)
NAN_BOXED(3217310788,32,FLEN)
NAN_BOXED(2134412555,32,FLEN)
NAN_BOXED(2150392714,32,FLEN)
NAN_BOXED(3217870028,32,FLEN)
NAN_BOXED(2134412555,32,FLEN)
NAN_BOXED(2150392714,32,FLEN)
NAN_BOXED(3218828726,32,FLEN)
NAN_BOXED(2134412555,32,FLEN)
NAN_BOXED(2150392714,32,FLEN)
NAN_BOXED(3219547750,32,FLEN)
NAN_BOXED(2134412555,32,FLEN)
NAN_BOXED(2150392714,32,FLEN)
NAN_BOXED(3220027099,32,FLEN)
NAN_BOXED(2134412555,32,FLEN)
NAN_BOXED(2150392714,32,FLEN)
NAN_BOXED(3221225464,32,FLEN)
NAN_BOXED(2134412555,32,FLEN)
NAN_BOXED(2150392714,32,FLEN)
NAN_BOXED(3221225468,32,FLEN)
NAN_BOXED(2134412555,32,FLEN)
NAN_BOXED(2150392714,32,FLEN)
NAN_BOXED(3221225470,32,FLEN)
NAN_BOXED(2134412555,32,FLEN)
NAN_BOXED(2150392714,32,FLEN)
NAN_BOXED(3347054592,32,FLEN)
NAN_BOXED(2134412555,32,FLEN)
NAN_BOXED(2150392714,32,FLEN)
NAN_BOXED(3347054593,32,FLEN)
NAN_BOXED(2134412555,32,FLEN)
NAN_BOXED(2150392714,32,FLEN)
NAN_BOXED(3347054595,32,FLEN)
NAN_BOXED(2134412555,32,FLEN)
NAN_BOXED(2150392714,32,FLEN)
NAN_BOXED(3347054599,32,FLEN)
NAN_BOXED(2134412555,32,FLEN)
NAN_BOXED(2150392714,32,FLEN)
NAN_BOXED(3347054607,32,FLEN)
NAN_BOXED(2134412555,32,FLEN)
NAN_BOXED(2150392714,32,FLEN)
NAN_BOXED(3347054623,32,FLEN)
NAN_BOXED(2134412555,32,FLEN)
NAN_BOXED(2150392714,32,FLEN)
NAN_BOXED(3347054655,32,FLEN)
NAN_BOXED(2134412555,32,FLEN)
NAN_BOXED(2150392714,32,FLEN)
NAN_BOXED(3347054719,32,FLEN)
NAN_BOXED(2134412555,32,FLEN)
NAN_BOXED(2150392714,32,FLEN)
NAN_BOXED(3347054847,32,FLEN)
NAN_BOXED(2134412555,32,FLEN)
NAN_BOXED(2150392714,32,FLEN)
NAN_BOXED(3347055103,32,FLEN)
NAN_BOXED(2134412555,32,FLEN)
NAN_BOXED(2150392714,32,FLEN)
NAN_BOXED(3347055615,32,FLEN)
NAN_BOXED(2134412555,32,FLEN)
NAN_BOXED(2150392714,32,FLEN)
NAN_BOXED(3347056639,32,FLEN)
NAN_BOXED(2134412555,32,FLEN)
NAN_BOXED(2150392714,32,FLEN)
NAN_BOXED(3347058687,32,FLEN)
NAN_BOXED(2134412555,32,FLEN)
NAN_BOXED(2150392714,32,FLEN)
NAN_BOXED(3347062783,32,FLEN)
NAN_BOXED(2134412555,32,FLEN)
NAN_BOXED(2150392714,32,FLEN)
NAN_BOXED(3347070975,32,FLEN)
NAN_BOXED(2134412555,32,FLEN)
NAN_BOXED(2150392714,32,FLEN)
NAN_BOXED(3347087359,32,FLEN)
NAN_BOXED(2134412555,32,FLEN)
NAN_BOXED(2150392714,32,FLEN)
NAN_BOXED(3347120127,32,FLEN)
NAN_BOXED(2134412555,32,FLEN)
NAN_BOXED(2150392714,32,FLEN)
NAN_BOXED(3347185663,32,FLEN)
NAN_BOXED(2134412555,32,FLEN)
NAN_BOXED(2150392714,32,FLEN)
NAN_BOXED(3347316735,32,FLEN)
NAN_BOXED(2134412555,32,FLEN)
NAN_BOXED(2150392714,32,FLEN)
NAN_BOXED(3347578879,32,FLEN)
NAN_BOXED(2134412555,32,FLEN)
NAN_BOXED(2150392714,32,FLEN)
NAN_BOXED(3348103167,32,FLEN)
NAN_BOXED(2134412555,32,FLEN)
NAN_BOXED(2150392714,32,FLEN)
NAN_BOXED(3349151743,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
