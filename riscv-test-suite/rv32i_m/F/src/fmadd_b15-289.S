
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:17:59 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_36864:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38e73b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2c4de3 and fs3 == 1 and fe3 == 0x66 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38e73b; op2val:0x802c4de3;
op3val:0xb37ffff8; valaddr_reg:x3; val_offset:110592*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110592*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36865:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38e73b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2c4de3 and fs3 == 1 and fe3 == 0x66 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38e73b; op2val:0x802c4de3;
op3val:0xb37ffffc; valaddr_reg:x3; val_offset:110595*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110595*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36866:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38e73b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2c4de3 and fs3 == 1 and fe3 == 0x66 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38e73b; op2val:0x802c4de3;
op3val:0xb37ffffe; valaddr_reg:x3; val_offset:110598*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110598*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36867:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38e73b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2c4de3 and fs3 == 1 and fe3 == 0x66 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38e73b; op2val:0x802c4de3;
op3val:0xb37fffff; valaddr_reg:x3; val_offset:110601*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110601*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36868:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38e73b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2c4de3 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38e73b; op2val:0x802c4de3;
op3val:0xbf800001; valaddr_reg:x3; val_offset:110604*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110604*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36869:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38e73b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2c4de3 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38e73b; op2val:0x802c4de3;
op3val:0xbf800003; valaddr_reg:x3; val_offset:110607*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110607*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36870:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38e73b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2c4de3 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38e73b; op2val:0x802c4de3;
op3val:0xbf800007; valaddr_reg:x3; val_offset:110610*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110610*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36871:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38e73b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2c4de3 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38e73b; op2val:0x802c4de3;
op3val:0xbf999999; valaddr_reg:x3; val_offset:110613*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110613*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36872:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38e73b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2c4de3 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38e73b; op2val:0x802c4de3;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:110616*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110616*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36873:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38e73b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2c4de3 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38e73b; op2val:0x802c4de3;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:110619*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110619*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36874:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38e73b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2c4de3 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38e73b; op2val:0x802c4de3;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:110622*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110622*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36875:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38e73b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2c4de3 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38e73b; op2val:0x802c4de3;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:110625*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110625*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36876:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38e73b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2c4de3 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38e73b; op2val:0x802c4de3;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:110628*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110628*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36877:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38e73b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2c4de3 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38e73b; op2val:0x802c4de3;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:110631*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110631*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36878:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38e73b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2c4de3 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38e73b; op2val:0x802c4de3;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:110634*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110634*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36879:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38e73b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2c4de3 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38e73b; op2val:0x802c4de3;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:110637*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110637*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36880:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38e73b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2c4de3 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38e73b; op2val:0x802c4de3;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:110640*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110640*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36881:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38e73b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2c4de3 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38e73b; op2val:0x802c4de3;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:110643*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110643*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36882:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38e73b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2c4de3 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38e73b; op2val:0x802c4de3;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:110646*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110646*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36883:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38e73b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2c4de3 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38e73b; op2val:0x802c4de3;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:110649*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110649*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36884:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x390e97 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f390e97; op2val:0x80000000;
op3val:0x80000001; valaddr_reg:x3; val_offset:110652*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110652*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36885:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x390e97 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f390e97; op2val:0x80000000;
op3val:0x80000003; valaddr_reg:x3; val_offset:110655*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110655*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36886:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x390e97 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f390e97; op2val:0x80000000;
op3val:0x80000007; valaddr_reg:x3; val_offset:110658*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110658*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36887:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x390e97 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f390e97; op2val:0x80000000;
op3val:0x80199999; valaddr_reg:x3; val_offset:110661*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110661*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36888:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x390e97 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f390e97; op2val:0x80000000;
op3val:0x80249249; valaddr_reg:x3; val_offset:110664*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110664*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36889:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x390e97 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f390e97; op2val:0x80000000;
op3val:0x80333333; valaddr_reg:x3; val_offset:110667*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110667*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36890:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x390e97 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f390e97; op2val:0x80000000;
op3val:0x8036db6d; valaddr_reg:x3; val_offset:110670*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110670*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36891:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x390e97 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f390e97; op2val:0x80000000;
op3val:0x803bbbbb; valaddr_reg:x3; val_offset:110673*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110673*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36892:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x390e97 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f390e97; op2val:0x80000000;
op3val:0x80444444; valaddr_reg:x3; val_offset:110676*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110676*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36893:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x390e97 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f390e97; op2val:0x80000000;
op3val:0x804ccccc; valaddr_reg:x3; val_offset:110679*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110679*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36894:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x390e97 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f390e97; op2val:0x80000000;
op3val:0x805b6db6; valaddr_reg:x3; val_offset:110682*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110682*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36895:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x390e97 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f390e97; op2val:0x80000000;
op3val:0x80666666; valaddr_reg:x3; val_offset:110685*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110685*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36896:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x390e97 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f390e97; op2val:0x80000000;
op3val:0x806db6db; valaddr_reg:x3; val_offset:110688*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110688*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36897:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x390e97 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f390e97; op2val:0x80000000;
op3val:0x807ffff8; valaddr_reg:x3; val_offset:110691*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110691*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36898:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x390e97 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f390e97; op2val:0x80000000;
op3val:0x807ffffc; valaddr_reg:x3; val_offset:110694*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110694*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36899:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x390e97 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f390e97; op2val:0x80000000;
op3val:0x807ffffe; valaddr_reg:x3; val_offset:110697*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110697*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36900:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x390e97 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f390e97; op2val:0x80000000;
op3val:0x8c000000; valaddr_reg:x3; val_offset:110700*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110700*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36901:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x390e97 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f390e97; op2val:0x80000000;
op3val:0x8c000001; valaddr_reg:x3; val_offset:110703*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110703*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36902:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x390e97 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f390e97; op2val:0x80000000;
op3val:0x8c000003; valaddr_reg:x3; val_offset:110706*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110706*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36903:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x390e97 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f390e97; op2val:0x80000000;
op3val:0x8c000007; valaddr_reg:x3; val_offset:110709*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110709*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36904:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x390e97 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f390e97; op2val:0x80000000;
op3val:0x8c00000f; valaddr_reg:x3; val_offset:110712*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110712*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36905:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x390e97 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f390e97; op2val:0x80000000;
op3val:0x8c00001f; valaddr_reg:x3; val_offset:110715*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110715*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36906:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x390e97 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f390e97; op2val:0x80000000;
op3val:0x8c00003f; valaddr_reg:x3; val_offset:110718*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110718*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36907:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x390e97 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f390e97; op2val:0x80000000;
op3val:0x8c00007f; valaddr_reg:x3; val_offset:110721*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110721*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36908:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x390e97 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f390e97; op2val:0x80000000;
op3val:0x8c0000ff; valaddr_reg:x3; val_offset:110724*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110724*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36909:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x390e97 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f390e97; op2val:0x80000000;
op3val:0x8c0001ff; valaddr_reg:x3; val_offset:110727*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110727*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36910:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x390e97 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f390e97; op2val:0x80000000;
op3val:0x8c0003ff; valaddr_reg:x3; val_offset:110730*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110730*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36911:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x390e97 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f390e97; op2val:0x80000000;
op3val:0x8c0007ff; valaddr_reg:x3; val_offset:110733*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110733*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36912:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x390e97 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f390e97; op2val:0x80000000;
op3val:0x8c000fff; valaddr_reg:x3; val_offset:110736*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110736*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36913:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x390e97 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f390e97; op2val:0x80000000;
op3val:0x8c001fff; valaddr_reg:x3; val_offset:110739*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110739*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36914:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x390e97 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f390e97; op2val:0x80000000;
op3val:0x8c003fff; valaddr_reg:x3; val_offset:110742*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110742*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36915:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x390e97 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f390e97; op2val:0x80000000;
op3val:0x8c007fff; valaddr_reg:x3; val_offset:110745*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110745*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36916:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x390e97 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f390e97; op2val:0x80000000;
op3val:0x8c00ffff; valaddr_reg:x3; val_offset:110748*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110748*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36917:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x390e97 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f390e97; op2val:0x80000000;
op3val:0x8c01ffff; valaddr_reg:x3; val_offset:110751*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110751*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36918:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x390e97 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f390e97; op2val:0x80000000;
op3val:0x8c03ffff; valaddr_reg:x3; val_offset:110754*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110754*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36919:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x390e97 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f390e97; op2val:0x80000000;
op3val:0x8c07ffff; valaddr_reg:x3; val_offset:110757*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110757*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36920:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x390e97 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f390e97; op2val:0x80000000;
op3val:0x8c0fffff; valaddr_reg:x3; val_offset:110760*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110760*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36921:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x390e97 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f390e97; op2val:0x80000000;
op3val:0x8c1fffff; valaddr_reg:x3; val_offset:110763*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110763*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36922:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x390e97 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f390e97; op2val:0x80000000;
op3val:0x8c3fffff; valaddr_reg:x3; val_offset:110766*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110766*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36923:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x390e97 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f390e97; op2val:0x80000000;
op3val:0x8c400000; valaddr_reg:x3; val_offset:110769*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110769*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36924:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x390e97 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f390e97; op2val:0x80000000;
op3val:0x8c600000; valaddr_reg:x3; val_offset:110772*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110772*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36925:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x390e97 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f390e97; op2val:0x80000000;
op3val:0x8c700000; valaddr_reg:x3; val_offset:110775*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110775*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36926:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x390e97 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f390e97; op2val:0x80000000;
op3val:0x8c780000; valaddr_reg:x3; val_offset:110778*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110778*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36927:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x390e97 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f390e97; op2val:0x80000000;
op3val:0x8c7c0000; valaddr_reg:x3; val_offset:110781*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110781*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36928:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x390e97 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f390e97; op2val:0x80000000;
op3val:0x8c7e0000; valaddr_reg:x3; val_offset:110784*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110784*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36929:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x390e97 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f390e97; op2val:0x80000000;
op3val:0x8c7f0000; valaddr_reg:x3; val_offset:110787*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110787*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36930:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x390e97 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f390e97; op2val:0x80000000;
op3val:0x8c7f8000; valaddr_reg:x3; val_offset:110790*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110790*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36931:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x390e97 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f390e97; op2val:0x80000000;
op3val:0x8c7fc000; valaddr_reg:x3; val_offset:110793*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110793*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36932:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x390e97 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f390e97; op2val:0x80000000;
op3val:0x8c7fe000; valaddr_reg:x3; val_offset:110796*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110796*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36933:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x390e97 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f390e97; op2val:0x80000000;
op3val:0x8c7ff000; valaddr_reg:x3; val_offset:110799*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110799*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36934:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x390e97 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f390e97; op2val:0x80000000;
op3val:0x8c7ff800; valaddr_reg:x3; val_offset:110802*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110802*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36935:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x390e97 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f390e97; op2val:0x80000000;
op3val:0x8c7ffc00; valaddr_reg:x3; val_offset:110805*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110805*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36936:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x390e97 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f390e97; op2val:0x80000000;
op3val:0x8c7ffe00; valaddr_reg:x3; val_offset:110808*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110808*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36937:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x390e97 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f390e97; op2val:0x80000000;
op3val:0x8c7fff00; valaddr_reg:x3; val_offset:110811*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110811*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36938:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x390e97 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f390e97; op2val:0x80000000;
op3val:0x8c7fff80; valaddr_reg:x3; val_offset:110814*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110814*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36939:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x390e97 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f390e97; op2val:0x80000000;
op3val:0x8c7fffc0; valaddr_reg:x3; val_offset:110817*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110817*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36940:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x390e97 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f390e97; op2val:0x80000000;
op3val:0x8c7fffe0; valaddr_reg:x3; val_offset:110820*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110820*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36941:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x390e97 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f390e97; op2val:0x80000000;
op3val:0x8c7ffff0; valaddr_reg:x3; val_offset:110823*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110823*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36942:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x390e97 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f390e97; op2val:0x80000000;
op3val:0x8c7ffff8; valaddr_reg:x3; val_offset:110826*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110826*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36943:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x390e97 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f390e97; op2val:0x80000000;
op3val:0x8c7ffffc; valaddr_reg:x3; val_offset:110829*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110829*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36944:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x390e97 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f390e97; op2val:0x80000000;
op3val:0x8c7ffffe; valaddr_reg:x3; val_offset:110832*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110832*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36945:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x390e97 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f390e97; op2val:0x80000000;
op3val:0x8c7fffff; valaddr_reg:x3; val_offset:110835*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110835*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36946:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x395e87 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f395e87; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:110838*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110838*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36947:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x395e87 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f395e87; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:110841*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110841*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36948:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x395e87 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f395e87; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:110844*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110844*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36949:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x395e87 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f395e87; op2val:0x0;
op3val:0x199999; valaddr_reg:x3; val_offset:110847*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110847*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36950:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x395e87 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f395e87; op2val:0x0;
op3val:0x249249; valaddr_reg:x3; val_offset:110850*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110850*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36951:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x395e87 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f395e87; op2val:0x0;
op3val:0x333333; valaddr_reg:x3; val_offset:110853*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110853*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36952:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x395e87 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f395e87; op2val:0x0;
op3val:0x36db6d; valaddr_reg:x3; val_offset:110856*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110856*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36953:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x395e87 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f395e87; op2val:0x0;
op3val:0x3bbbbb; valaddr_reg:x3; val_offset:110859*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110859*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36954:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x395e87 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f395e87; op2val:0x0;
op3val:0x444444; valaddr_reg:x3; val_offset:110862*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110862*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36955:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x395e87 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f395e87; op2val:0x0;
op3val:0x4ccccc; valaddr_reg:x3; val_offset:110865*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110865*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36956:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x395e87 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f395e87; op2val:0x0;
op3val:0x5b6db6; valaddr_reg:x3; val_offset:110868*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110868*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36957:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x395e87 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f395e87; op2val:0x0;
op3val:0x666666; valaddr_reg:x3; val_offset:110871*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110871*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36958:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x395e87 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f395e87; op2val:0x0;
op3val:0x6db6db; valaddr_reg:x3; val_offset:110874*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110874*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36959:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x395e87 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f395e87; op2val:0x0;
op3val:0x7ffff8; valaddr_reg:x3; val_offset:110877*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110877*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36960:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x395e87 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f395e87; op2val:0x0;
op3val:0x7ffffc; valaddr_reg:x3; val_offset:110880*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110880*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36961:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x395e87 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f395e87; op2val:0x0;
op3val:0x7ffffe; valaddr_reg:x3; val_offset:110883*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110883*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36962:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x395e87 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f395e87; op2val:0x0;
op3val:0x800000; valaddr_reg:x3; val_offset:110886*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110886*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36963:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x395e87 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f395e87; op2val:0x0;
op3val:0x800001; valaddr_reg:x3; val_offset:110889*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110889*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36964:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x395e87 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f395e87; op2val:0x0;
op3val:0x800003; valaddr_reg:x3; val_offset:110892*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110892*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36965:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x395e87 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f395e87; op2val:0x0;
op3val:0x800007; valaddr_reg:x3; val_offset:110895*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110895*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36966:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x395e87 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f395e87; op2val:0x0;
op3val:0x80000f; valaddr_reg:x3; val_offset:110898*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110898*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36967:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x395e87 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f395e87; op2val:0x0;
op3val:0x80001f; valaddr_reg:x3; val_offset:110901*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110901*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36968:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x395e87 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f395e87; op2val:0x0;
op3val:0x80003f; valaddr_reg:x3; val_offset:110904*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110904*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36969:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x395e87 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f395e87; op2val:0x0;
op3val:0x80007f; valaddr_reg:x3; val_offset:110907*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110907*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36970:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x395e87 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f395e87; op2val:0x0;
op3val:0x8000ff; valaddr_reg:x3; val_offset:110910*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110910*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36971:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x395e87 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f395e87; op2val:0x0;
op3val:0x8001ff; valaddr_reg:x3; val_offset:110913*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110913*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36972:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x395e87 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f395e87; op2val:0x0;
op3val:0x8003ff; valaddr_reg:x3; val_offset:110916*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110916*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36973:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x395e87 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f395e87; op2val:0x0;
op3val:0x8007ff; valaddr_reg:x3; val_offset:110919*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110919*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36974:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x395e87 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f395e87; op2val:0x0;
op3val:0x800fff; valaddr_reg:x3; val_offset:110922*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110922*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36975:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x395e87 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f395e87; op2val:0x0;
op3val:0x801fff; valaddr_reg:x3; val_offset:110925*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110925*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36976:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x395e87 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f395e87; op2val:0x0;
op3val:0x803fff; valaddr_reg:x3; val_offset:110928*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110928*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36977:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x395e87 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f395e87; op2val:0x0;
op3val:0x807fff; valaddr_reg:x3; val_offset:110931*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110931*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36978:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x395e87 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f395e87; op2val:0x0;
op3val:0x80ffff; valaddr_reg:x3; val_offset:110934*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110934*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36979:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x395e87 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f395e87; op2val:0x0;
op3val:0x81ffff; valaddr_reg:x3; val_offset:110937*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110937*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36980:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x395e87 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f395e87; op2val:0x0;
op3val:0x83ffff; valaddr_reg:x3; val_offset:110940*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110940*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36981:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x395e87 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f395e87; op2val:0x0;
op3val:0x87ffff; valaddr_reg:x3; val_offset:110943*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110943*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36982:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x395e87 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f395e87; op2val:0x0;
op3val:0x8fffff; valaddr_reg:x3; val_offset:110946*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110946*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36983:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x395e87 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f395e87; op2val:0x0;
op3val:0x9fffff; valaddr_reg:x3; val_offset:110949*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110949*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36984:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x395e87 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f395e87; op2val:0x0;
op3val:0xbfffff; valaddr_reg:x3; val_offset:110952*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110952*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36985:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x395e87 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f395e87; op2val:0x0;
op3val:0xc00000; valaddr_reg:x3; val_offset:110955*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110955*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36986:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x395e87 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f395e87; op2val:0x0;
op3val:0xe00000; valaddr_reg:x3; val_offset:110958*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110958*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36987:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x395e87 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f395e87; op2val:0x0;
op3val:0xf00000; valaddr_reg:x3; val_offset:110961*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110961*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36988:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x395e87 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f395e87; op2val:0x0;
op3val:0xf80000; valaddr_reg:x3; val_offset:110964*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110964*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36989:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x395e87 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f395e87; op2val:0x0;
op3val:0xfc0000; valaddr_reg:x3; val_offset:110967*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110967*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36990:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x395e87 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f395e87; op2val:0x0;
op3val:0xfe0000; valaddr_reg:x3; val_offset:110970*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110970*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36991:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x395e87 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f395e87; op2val:0x0;
op3val:0xff0000; valaddr_reg:x3; val_offset:110973*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110973*0 + 3*288*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2134435643,32,FLEN)
NAN_BOXED(2150387171,32,FLEN)
NAN_BOXED(3011510264,32,FLEN)
NAN_BOXED(2134435643,32,FLEN)
NAN_BOXED(2150387171,32,FLEN)
NAN_BOXED(3011510268,32,FLEN)
NAN_BOXED(2134435643,32,FLEN)
NAN_BOXED(2150387171,32,FLEN)
NAN_BOXED(3011510270,32,FLEN)
NAN_BOXED(2134435643,32,FLEN)
NAN_BOXED(2150387171,32,FLEN)
NAN_BOXED(3011510271,32,FLEN)
NAN_BOXED(2134435643,32,FLEN)
NAN_BOXED(2150387171,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2134435643,32,FLEN)
NAN_BOXED(2150387171,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2134435643,32,FLEN)
NAN_BOXED(2150387171,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
NAN_BOXED(2134435643,32,FLEN)
NAN_BOXED(2150387171,32,FLEN)
NAN_BOXED(3214514585,32,FLEN)
NAN_BOXED(2134435643,32,FLEN)
NAN_BOXED(2150387171,32,FLEN)
NAN_BOXED(3215233609,32,FLEN)
NAN_BOXED(2134435643,32,FLEN)
NAN_BOXED(2150387171,32,FLEN)
NAN_BOXED(3216192307,32,FLEN)
NAN_BOXED(2134435643,32,FLEN)
NAN_BOXED(2150387171,32,FLEN)
NAN_BOXED(3216431981,32,FLEN)
NAN_BOXED(2134435643,32,FLEN)
NAN_BOXED(2150387171,32,FLEN)
NAN_BOXED(3216751547,32,FLEN)
NAN_BOXED(2134435643,32,FLEN)
NAN_BOXED(2150387171,32,FLEN)
NAN_BOXED(3217310788,32,FLEN)
NAN_BOXED(2134435643,32,FLEN)
NAN_BOXED(2150387171,32,FLEN)
NAN_BOXED(3217870028,32,FLEN)
NAN_BOXED(2134435643,32,FLEN)
NAN_BOXED(2150387171,32,FLEN)
NAN_BOXED(3218828726,32,FLEN)
NAN_BOXED(2134435643,32,FLEN)
NAN_BOXED(2150387171,32,FLEN)
NAN_BOXED(3219547750,32,FLEN)
NAN_BOXED(2134435643,32,FLEN)
NAN_BOXED(2150387171,32,FLEN)
NAN_BOXED(3220027099,32,FLEN)
NAN_BOXED(2134435643,32,FLEN)
NAN_BOXED(2150387171,32,FLEN)
NAN_BOXED(3221225464,32,FLEN)
NAN_BOXED(2134435643,32,FLEN)
NAN_BOXED(2150387171,32,FLEN)
NAN_BOXED(3221225468,32,FLEN)
NAN_BOXED(2134435643,32,FLEN)
NAN_BOXED(2150387171,32,FLEN)
NAN_BOXED(3221225470,32,FLEN)
NAN_BOXED(2134445719,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2134445719,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483651,32,FLEN)
NAN_BOXED(2134445719,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483655,32,FLEN)
NAN_BOXED(2134445719,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149161369,32,FLEN)
NAN_BOXED(2134445719,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149880393,32,FLEN)
NAN_BOXED(2134445719,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2150839091,32,FLEN)
NAN_BOXED(2134445719,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151078765,32,FLEN)
NAN_BOXED(2134445719,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151398331,32,FLEN)
NAN_BOXED(2134445719,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151957572,32,FLEN)
NAN_BOXED(2134445719,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2152516812,32,FLEN)
NAN_BOXED(2134445719,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2153475510,32,FLEN)
NAN_BOXED(2134445719,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154194534,32,FLEN)
NAN_BOXED(2134445719,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154673883,32,FLEN)
NAN_BOXED(2134445719,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872248,32,FLEN)
NAN_BOXED(2134445719,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872252,32,FLEN)
NAN_BOXED(2134445719,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2134445719,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348810240,32,FLEN)
NAN_BOXED(2134445719,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348810241,32,FLEN)
NAN_BOXED(2134445719,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348810243,32,FLEN)
NAN_BOXED(2134445719,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348810247,32,FLEN)
NAN_BOXED(2134445719,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348810255,32,FLEN)
NAN_BOXED(2134445719,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348810271,32,FLEN)
NAN_BOXED(2134445719,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348810303,32,FLEN)
NAN_BOXED(2134445719,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348810367,32,FLEN)
NAN_BOXED(2134445719,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348810495,32,FLEN)
NAN_BOXED(2134445719,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348810751,32,FLEN)
NAN_BOXED(2134445719,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348811263,32,FLEN)
NAN_BOXED(2134445719,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348812287,32,FLEN)
NAN_BOXED(2134445719,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348814335,32,FLEN)
NAN_BOXED(2134445719,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348818431,32,FLEN)
NAN_BOXED(2134445719,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348826623,32,FLEN)
NAN_BOXED(2134445719,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348843007,32,FLEN)
NAN_BOXED(2134445719,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348875775,32,FLEN)
NAN_BOXED(2134445719,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348941311,32,FLEN)
NAN_BOXED(2134445719,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2349072383,32,FLEN)
NAN_BOXED(2134445719,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2349334527,32,FLEN)
NAN_BOXED(2134445719,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2349858815,32,FLEN)
NAN_BOXED(2134445719,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2350907391,32,FLEN)
NAN_BOXED(2134445719,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2353004543,32,FLEN)
NAN_BOXED(2134445719,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2353004544,32,FLEN)
NAN_BOXED(2134445719,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2355101696,32,FLEN)
NAN_BOXED(2134445719,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2356150272,32,FLEN)
NAN_BOXED(2134445719,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2356674560,32,FLEN)
NAN_BOXED(2134445719,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2356936704,32,FLEN)
NAN_BOXED(2134445719,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357067776,32,FLEN)
NAN_BOXED(2134445719,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357133312,32,FLEN)
NAN_BOXED(2134445719,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357166080,32,FLEN)
NAN_BOXED(2134445719,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357182464,32,FLEN)
NAN_BOXED(2134445719,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357190656,32,FLEN)
NAN_BOXED(2134445719,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357194752,32,FLEN)
NAN_BOXED(2134445719,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357196800,32,FLEN)
NAN_BOXED(2134445719,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357197824,32,FLEN)
NAN_BOXED(2134445719,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357198336,32,FLEN)
NAN_BOXED(2134445719,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357198592,32,FLEN)
NAN_BOXED(2134445719,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357198720,32,FLEN)
NAN_BOXED(2134445719,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357198784,32,FLEN)
NAN_BOXED(2134445719,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357198816,32,FLEN)
NAN_BOXED(2134445719,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357198832,32,FLEN)
NAN_BOXED(2134445719,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357198840,32,FLEN)
NAN_BOXED(2134445719,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357198844,32,FLEN)
NAN_BOXED(2134445719,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357198846,32,FLEN)
NAN_BOXED(2134445719,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357198847,32,FLEN)
NAN_BOXED(2134466183,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2134466183,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3,32,FLEN)
NAN_BOXED(2134466183,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7,32,FLEN)
NAN_BOXED(2134466183,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1677721,32,FLEN)
NAN_BOXED(2134466183,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2396745,32,FLEN)
NAN_BOXED(2134466183,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3355443,32,FLEN)
NAN_BOXED(2134466183,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3595117,32,FLEN)
NAN_BOXED(2134466183,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3914683,32,FLEN)
NAN_BOXED(2134466183,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4473924,32,FLEN)
NAN_BOXED(2134466183,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5033164,32,FLEN)
NAN_BOXED(2134466183,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5991862,32,FLEN)
NAN_BOXED(2134466183,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(6710886,32,FLEN)
NAN_BOXED(2134466183,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7190235,32,FLEN)
NAN_BOXED(2134466183,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388600,32,FLEN)
NAN_BOXED(2134466183,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388604,32,FLEN)
NAN_BOXED(2134466183,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388606,32,FLEN)
NAN_BOXED(2134466183,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2134466183,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(2134466183,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388611,32,FLEN)
NAN_BOXED(2134466183,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388615,32,FLEN)
NAN_BOXED(2134466183,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388623,32,FLEN)
NAN_BOXED(2134466183,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388639,32,FLEN)
NAN_BOXED(2134466183,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388671,32,FLEN)
NAN_BOXED(2134466183,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388735,32,FLEN)
NAN_BOXED(2134466183,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388863,32,FLEN)
NAN_BOXED(2134466183,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8389119,32,FLEN)
NAN_BOXED(2134466183,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8389631,32,FLEN)
NAN_BOXED(2134466183,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8390655,32,FLEN)
NAN_BOXED(2134466183,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8392703,32,FLEN)
NAN_BOXED(2134466183,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8396799,32,FLEN)
NAN_BOXED(2134466183,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8404991,32,FLEN)
NAN_BOXED(2134466183,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8421375,32,FLEN)
NAN_BOXED(2134466183,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8454143,32,FLEN)
NAN_BOXED(2134466183,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8519679,32,FLEN)
NAN_BOXED(2134466183,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8650751,32,FLEN)
NAN_BOXED(2134466183,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8912895,32,FLEN)
NAN_BOXED(2134466183,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(9437183,32,FLEN)
NAN_BOXED(2134466183,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(10485759,32,FLEN)
NAN_BOXED(2134466183,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(12582911,32,FLEN)
NAN_BOXED(2134466183,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(12582912,32,FLEN)
NAN_BOXED(2134466183,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(14680064,32,FLEN)
NAN_BOXED(2134466183,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(15728640,32,FLEN)
NAN_BOXED(2134466183,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16252928,32,FLEN)
NAN_BOXED(2134466183,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16515072,32,FLEN)
NAN_BOXED(2134466183,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16646144,32,FLEN)
NAN_BOXED(2134466183,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16711680,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
