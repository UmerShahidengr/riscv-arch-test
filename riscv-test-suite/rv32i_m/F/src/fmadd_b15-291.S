
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:17:59 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_37120:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x39d14d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f39d14d; op2val:0x0;
op3val:0x2fff800; valaddr_reg:x3; val_offset:111360*0 + 3*290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111360*0 + 3*290*FLEN/8, x4, x1, x2)

inst_37121:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x39d14d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f39d14d; op2val:0x0;
op3val:0x2fffc00; valaddr_reg:x3; val_offset:111363*0 + 3*290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111363*0 + 3*290*FLEN/8, x4, x1, x2)

inst_37122:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x39d14d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f39d14d; op2val:0x0;
op3val:0x2fffe00; valaddr_reg:x3; val_offset:111366*0 + 3*290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111366*0 + 3*290*FLEN/8, x4, x1, x2)

inst_37123:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x39d14d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f39d14d; op2val:0x0;
op3val:0x2ffff00; valaddr_reg:x3; val_offset:111369*0 + 3*290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111369*0 + 3*290*FLEN/8, x4, x1, x2)

inst_37124:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x39d14d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f39d14d; op2val:0x0;
op3val:0x2ffff80; valaddr_reg:x3; val_offset:111372*0 + 3*290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111372*0 + 3*290*FLEN/8, x4, x1, x2)

inst_37125:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x39d14d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f39d14d; op2val:0x0;
op3val:0x2ffffc0; valaddr_reg:x3; val_offset:111375*0 + 3*290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111375*0 + 3*290*FLEN/8, x4, x1, x2)

inst_37126:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x39d14d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f39d14d; op2val:0x0;
op3val:0x2ffffe0; valaddr_reg:x3; val_offset:111378*0 + 3*290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111378*0 + 3*290*FLEN/8, x4, x1, x2)

inst_37127:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x39d14d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f39d14d; op2val:0x0;
op3val:0x2fffff0; valaddr_reg:x3; val_offset:111381*0 + 3*290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111381*0 + 3*290*FLEN/8, x4, x1, x2)

inst_37128:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x39d14d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f39d14d; op2val:0x0;
op3val:0x2fffff8; valaddr_reg:x3; val_offset:111384*0 + 3*290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111384*0 + 3*290*FLEN/8, x4, x1, x2)

inst_37129:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x39d14d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f39d14d; op2val:0x0;
op3val:0x2fffffc; valaddr_reg:x3; val_offset:111387*0 + 3*290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111387*0 + 3*290*FLEN/8, x4, x1, x2)

inst_37130:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x39d14d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f39d14d; op2val:0x0;
op3val:0x2fffffe; valaddr_reg:x3; val_offset:111390*0 + 3*290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111390*0 + 3*290*FLEN/8, x4, x1, x2)

inst_37131:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x39d14d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f39d14d; op2val:0x0;
op3val:0x2ffffff; valaddr_reg:x3; val_offset:111393*0 + 3*290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111393*0 + 3*290*FLEN/8, x4, x1, x2)

inst_37132:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x39f88a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f39f88a; op2val:0x80000000;
op3val:0x80000000; valaddr_reg:x3; val_offset:111396*0 + 3*290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111396*0 + 3*290*FLEN/8, x4, x1, x2)

inst_37133:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x39f88a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f39f88a; op2val:0x80000000;
op3val:0x80000001; valaddr_reg:x3; val_offset:111399*0 + 3*290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111399*0 + 3*290*FLEN/8, x4, x1, x2)

inst_37134:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x39f88a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f39f88a; op2val:0x80000000;
op3val:0x80000003; valaddr_reg:x3; val_offset:111402*0 + 3*290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111402*0 + 3*290*FLEN/8, x4, x1, x2)

inst_37135:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x39f88a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f39f88a; op2val:0x80000000;
op3val:0x80000007; valaddr_reg:x3; val_offset:111405*0 + 3*290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111405*0 + 3*290*FLEN/8, x4, x1, x2)

inst_37136:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x39f88a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f39f88a; op2val:0x80000000;
op3val:0x8000000f; valaddr_reg:x3; val_offset:111408*0 + 3*290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111408*0 + 3*290*FLEN/8, x4, x1, x2)

inst_37137:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x39f88a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f39f88a; op2val:0x80000000;
op3val:0x8000001f; valaddr_reg:x3; val_offset:111411*0 + 3*290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111411*0 + 3*290*FLEN/8, x4, x1, x2)

inst_37138:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x39f88a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f39f88a; op2val:0x80000000;
op3val:0x8000003f; valaddr_reg:x3; val_offset:111414*0 + 3*290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111414*0 + 3*290*FLEN/8, x4, x1, x2)

inst_37139:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x39f88a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f39f88a; op2val:0x80000000;
op3val:0x8000007f; valaddr_reg:x3; val_offset:111417*0 + 3*290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111417*0 + 3*290*FLEN/8, x4, x1, x2)

inst_37140:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x39f88a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f39f88a; op2val:0x80000000;
op3val:0x800000ff; valaddr_reg:x3; val_offset:111420*0 + 3*290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111420*0 + 3*290*FLEN/8, x4, x1, x2)

inst_37141:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x39f88a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f39f88a; op2val:0x80000000;
op3val:0x800001ff; valaddr_reg:x3; val_offset:111423*0 + 3*290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111423*0 + 3*290*FLEN/8, x4, x1, x2)

inst_37142:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x39f88a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f39f88a; op2val:0x80000000;
op3val:0x800003ff; valaddr_reg:x3; val_offset:111426*0 + 3*290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111426*0 + 3*290*FLEN/8, x4, x1, x2)

inst_37143:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x39f88a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f39f88a; op2val:0x80000000;
op3val:0x800007ff; valaddr_reg:x3; val_offset:111429*0 + 3*290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111429*0 + 3*290*FLEN/8, x4, x1, x2)

inst_37144:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x39f88a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f39f88a; op2val:0x80000000;
op3val:0x80000fff; valaddr_reg:x3; val_offset:111432*0 + 3*290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111432*0 + 3*290*FLEN/8, x4, x1, x2)

inst_37145:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x39f88a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f39f88a; op2val:0x80000000;
op3val:0x80001fff; valaddr_reg:x3; val_offset:111435*0 + 3*290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111435*0 + 3*290*FLEN/8, x4, x1, x2)

inst_37146:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x39f88a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f39f88a; op2val:0x80000000;
op3val:0x80003fff; valaddr_reg:x3; val_offset:111438*0 + 3*290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111438*0 + 3*290*FLEN/8, x4, x1, x2)

inst_37147:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x39f88a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f39f88a; op2val:0x80000000;
op3val:0x80007fff; valaddr_reg:x3; val_offset:111441*0 + 3*290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111441*0 + 3*290*FLEN/8, x4, x1, x2)

inst_37148:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x39f88a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f39f88a; op2val:0x80000000;
op3val:0x8000ffff; valaddr_reg:x3; val_offset:111444*0 + 3*290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111444*0 + 3*290*FLEN/8, x4, x1, x2)

inst_37149:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x39f88a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f39f88a; op2val:0x80000000;
op3val:0x8001ffff; valaddr_reg:x3; val_offset:111447*0 + 3*290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111447*0 + 3*290*FLEN/8, x4, x1, x2)

inst_37150:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x39f88a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f39f88a; op2val:0x80000000;
op3val:0x8003ffff; valaddr_reg:x3; val_offset:111450*0 + 3*290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111450*0 + 3*290*FLEN/8, x4, x1, x2)

inst_37151:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x39f88a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f39f88a; op2val:0x80000000;
op3val:0x8007ffff; valaddr_reg:x3; val_offset:111453*0 + 3*290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111453*0 + 3*290*FLEN/8, x4, x1, x2)

inst_37152:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x39f88a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f39f88a; op2val:0x80000000;
op3val:0x800fffff; valaddr_reg:x3; val_offset:111456*0 + 3*290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111456*0 + 3*290*FLEN/8, x4, x1, x2)

inst_37153:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x39f88a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f39f88a; op2val:0x80000000;
op3val:0x80199999; valaddr_reg:x3; val_offset:111459*0 + 3*290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111459*0 + 3*290*FLEN/8, x4, x1, x2)

inst_37154:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x39f88a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f39f88a; op2val:0x80000000;
op3val:0x801fffff; valaddr_reg:x3; val_offset:111462*0 + 3*290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111462*0 + 3*290*FLEN/8, x4, x1, x2)

inst_37155:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x39f88a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f39f88a; op2val:0x80000000;
op3val:0x80249249; valaddr_reg:x3; val_offset:111465*0 + 3*290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111465*0 + 3*290*FLEN/8, x4, x1, x2)

inst_37156:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x39f88a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f39f88a; op2val:0x80000000;
op3val:0x80333333; valaddr_reg:x3; val_offset:111468*0 + 3*290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111468*0 + 3*290*FLEN/8, x4, x1, x2)

inst_37157:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x39f88a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f39f88a; op2val:0x80000000;
op3val:0x8036db6d; valaddr_reg:x3; val_offset:111471*0 + 3*290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111471*0 + 3*290*FLEN/8, x4, x1, x2)

inst_37158:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x39f88a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f39f88a; op2val:0x80000000;
op3val:0x803bbbbb; valaddr_reg:x3; val_offset:111474*0 + 3*290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111474*0 + 3*290*FLEN/8, x4, x1, x2)

inst_37159:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x39f88a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f39f88a; op2val:0x80000000;
op3val:0x803fffff; valaddr_reg:x3; val_offset:111477*0 + 3*290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111477*0 + 3*290*FLEN/8, x4, x1, x2)

inst_37160:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x39f88a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f39f88a; op2val:0x80000000;
op3val:0x80400000; valaddr_reg:x3; val_offset:111480*0 + 3*290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111480*0 + 3*290*FLEN/8, x4, x1, x2)

inst_37161:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x39f88a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f39f88a; op2val:0x80000000;
op3val:0x80444444; valaddr_reg:x3; val_offset:111483*0 + 3*290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111483*0 + 3*290*FLEN/8, x4, x1, x2)

inst_37162:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x39f88a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f39f88a; op2val:0x80000000;
op3val:0x804ccccc; valaddr_reg:x3; val_offset:111486*0 + 3*290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111486*0 + 3*290*FLEN/8, x4, x1, x2)

inst_37163:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x39f88a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f39f88a; op2val:0x80000000;
op3val:0x805b6db6; valaddr_reg:x3; val_offset:111489*0 + 3*290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111489*0 + 3*290*FLEN/8, x4, x1, x2)

inst_37164:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x39f88a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f39f88a; op2val:0x80000000;
op3val:0x80600000; valaddr_reg:x3; val_offset:111492*0 + 3*290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111492*0 + 3*290*FLEN/8, x4, x1, x2)

inst_37165:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x39f88a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f39f88a; op2val:0x80000000;
op3val:0x80666666; valaddr_reg:x3; val_offset:111495*0 + 3*290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111495*0 + 3*290*FLEN/8, x4, x1, x2)

inst_37166:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x39f88a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f39f88a; op2val:0x80000000;
op3val:0x806db6db; valaddr_reg:x3; val_offset:111498*0 + 3*290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111498*0 + 3*290*FLEN/8, x4, x1, x2)

inst_37167:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x39f88a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f39f88a; op2val:0x80000000;
op3val:0x80700000; valaddr_reg:x3; val_offset:111501*0 + 3*290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111501*0 + 3*290*FLEN/8, x4, x1, x2)

inst_37168:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x39f88a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f39f88a; op2val:0x80000000;
op3val:0x80780000; valaddr_reg:x3; val_offset:111504*0 + 3*290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111504*0 + 3*290*FLEN/8, x4, x1, x2)

inst_37169:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x39f88a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f39f88a; op2val:0x80000000;
op3val:0x807c0000; valaddr_reg:x3; val_offset:111507*0 + 3*290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111507*0 + 3*290*FLEN/8, x4, x1, x2)

inst_37170:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x39f88a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f39f88a; op2val:0x80000000;
op3val:0x807e0000; valaddr_reg:x3; val_offset:111510*0 + 3*290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111510*0 + 3*290*FLEN/8, x4, x1, x2)

inst_37171:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x39f88a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f39f88a; op2val:0x80000000;
op3val:0x807f0000; valaddr_reg:x3; val_offset:111513*0 + 3*290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111513*0 + 3*290*FLEN/8, x4, x1, x2)

inst_37172:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x39f88a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f39f88a; op2val:0x80000000;
op3val:0x807f8000; valaddr_reg:x3; val_offset:111516*0 + 3*290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111516*0 + 3*290*FLEN/8, x4, x1, x2)

inst_37173:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x39f88a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f39f88a; op2val:0x80000000;
op3val:0x807fc000; valaddr_reg:x3; val_offset:111519*0 + 3*290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111519*0 + 3*290*FLEN/8, x4, x1, x2)

inst_37174:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x39f88a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f39f88a; op2val:0x80000000;
op3val:0x807fe000; valaddr_reg:x3; val_offset:111522*0 + 3*290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111522*0 + 3*290*FLEN/8, x4, x1, x2)

inst_37175:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x39f88a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f39f88a; op2val:0x80000000;
op3val:0x807ff000; valaddr_reg:x3; val_offset:111525*0 + 3*290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111525*0 + 3*290*FLEN/8, x4, x1, x2)

inst_37176:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x39f88a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f39f88a; op2val:0x80000000;
op3val:0x807ff800; valaddr_reg:x3; val_offset:111528*0 + 3*290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111528*0 + 3*290*FLEN/8, x4, x1, x2)

inst_37177:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x39f88a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f39f88a; op2val:0x80000000;
op3val:0x807ffc00; valaddr_reg:x3; val_offset:111531*0 + 3*290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111531*0 + 3*290*FLEN/8, x4, x1, x2)

inst_37178:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x39f88a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f39f88a; op2val:0x80000000;
op3val:0x807ffe00; valaddr_reg:x3; val_offset:111534*0 + 3*290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111534*0 + 3*290*FLEN/8, x4, x1, x2)

inst_37179:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x39f88a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f39f88a; op2val:0x80000000;
op3val:0x807fff00; valaddr_reg:x3; val_offset:111537*0 + 3*290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111537*0 + 3*290*FLEN/8, x4, x1, x2)

inst_37180:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x39f88a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f39f88a; op2val:0x80000000;
op3val:0x807fff80; valaddr_reg:x3; val_offset:111540*0 + 3*290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111540*0 + 3*290*FLEN/8, x4, x1, x2)

inst_37181:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x39f88a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f39f88a; op2val:0x80000000;
op3val:0x807fffc0; valaddr_reg:x3; val_offset:111543*0 + 3*290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111543*0 + 3*290*FLEN/8, x4, x1, x2)

inst_37182:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x39f88a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f39f88a; op2val:0x80000000;
op3val:0x807fffe0; valaddr_reg:x3; val_offset:111546*0 + 3*290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111546*0 + 3*290*FLEN/8, x4, x1, x2)

inst_37183:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x39f88a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f39f88a; op2val:0x80000000;
op3val:0x807ffff0; valaddr_reg:x3; val_offset:111549*0 + 3*290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111549*0 + 3*290*FLEN/8, x4, x1, x2)

inst_37184:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x39f88a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f39f88a; op2val:0x80000000;
op3val:0x807ffff8; valaddr_reg:x3; val_offset:111552*0 + 3*290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111552*0 + 3*290*FLEN/8, x4, x1, x2)

inst_37185:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x39f88a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f39f88a; op2val:0x80000000;
op3val:0x807ffffc; valaddr_reg:x3; val_offset:111555*0 + 3*290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111555*0 + 3*290*FLEN/8, x4, x1, x2)

inst_37186:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x39f88a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f39f88a; op2val:0x80000000;
op3val:0x807ffffe; valaddr_reg:x3; val_offset:111558*0 + 3*290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111558*0 + 3*290*FLEN/8, x4, x1, x2)

inst_37187:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x39f88a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f39f88a; op2val:0x80000000;
op3val:0x807fffff; valaddr_reg:x3; val_offset:111561*0 + 3*290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111561*0 + 3*290*FLEN/8, x4, x1, x2)

inst_37188:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a5f72 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf474 and fs3 == 0 and fe3 == 0x72 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a5f72; op2val:0x2bf474;
op3val:0x39000000; valaddr_reg:x3; val_offset:111564*0 + 3*290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111564*0 + 3*290*FLEN/8, x4, x1, x2)

inst_37189:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a5f72 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf474 and fs3 == 0 and fe3 == 0x72 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a5f72; op2val:0x2bf474;
op3val:0x39000001; valaddr_reg:x3; val_offset:111567*0 + 3*290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111567*0 + 3*290*FLEN/8, x4, x1, x2)

inst_37190:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a5f72 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf474 and fs3 == 0 and fe3 == 0x72 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a5f72; op2val:0x2bf474;
op3val:0x39000003; valaddr_reg:x3; val_offset:111570*0 + 3*290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111570*0 + 3*290*FLEN/8, x4, x1, x2)

inst_37191:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a5f72 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf474 and fs3 == 0 and fe3 == 0x72 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a5f72; op2val:0x2bf474;
op3val:0x39000007; valaddr_reg:x3; val_offset:111573*0 + 3*290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111573*0 + 3*290*FLEN/8, x4, x1, x2)

inst_37192:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a5f72 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf474 and fs3 == 0 and fe3 == 0x72 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a5f72; op2val:0x2bf474;
op3val:0x3900000f; valaddr_reg:x3; val_offset:111576*0 + 3*290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111576*0 + 3*290*FLEN/8, x4, x1, x2)

inst_37193:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a5f72 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf474 and fs3 == 0 and fe3 == 0x72 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a5f72; op2val:0x2bf474;
op3val:0x3900001f; valaddr_reg:x3; val_offset:111579*0 + 3*290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111579*0 + 3*290*FLEN/8, x4, x1, x2)

inst_37194:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a5f72 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf474 and fs3 == 0 and fe3 == 0x72 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a5f72; op2val:0x2bf474;
op3val:0x3900003f; valaddr_reg:x3; val_offset:111582*0 + 3*290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111582*0 + 3*290*FLEN/8, x4, x1, x2)

inst_37195:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a5f72 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf474 and fs3 == 0 and fe3 == 0x72 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a5f72; op2val:0x2bf474;
op3val:0x3900007f; valaddr_reg:x3; val_offset:111585*0 + 3*290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111585*0 + 3*290*FLEN/8, x4, x1, x2)

inst_37196:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a5f72 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf474 and fs3 == 0 and fe3 == 0x72 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a5f72; op2val:0x2bf474;
op3val:0x390000ff; valaddr_reg:x3; val_offset:111588*0 + 3*290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111588*0 + 3*290*FLEN/8, x4, x1, x2)

inst_37197:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a5f72 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf474 and fs3 == 0 and fe3 == 0x72 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a5f72; op2val:0x2bf474;
op3val:0x390001ff; valaddr_reg:x3; val_offset:111591*0 + 3*290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111591*0 + 3*290*FLEN/8, x4, x1, x2)

inst_37198:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a5f72 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf474 and fs3 == 0 and fe3 == 0x72 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a5f72; op2val:0x2bf474;
op3val:0x390003ff; valaddr_reg:x3; val_offset:111594*0 + 3*290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111594*0 + 3*290*FLEN/8, x4, x1, x2)

inst_37199:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a5f72 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf474 and fs3 == 0 and fe3 == 0x72 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a5f72; op2val:0x2bf474;
op3val:0x390007ff; valaddr_reg:x3; val_offset:111597*0 + 3*290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111597*0 + 3*290*FLEN/8, x4, x1, x2)

inst_37200:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a5f72 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf474 and fs3 == 0 and fe3 == 0x72 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a5f72; op2val:0x2bf474;
op3val:0x39000fff; valaddr_reg:x3; val_offset:111600*0 + 3*290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111600*0 + 3*290*FLEN/8, x4, x1, x2)

inst_37201:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a5f72 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf474 and fs3 == 0 and fe3 == 0x72 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a5f72; op2val:0x2bf474;
op3val:0x39001fff; valaddr_reg:x3; val_offset:111603*0 + 3*290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111603*0 + 3*290*FLEN/8, x4, x1, x2)

inst_37202:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a5f72 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf474 and fs3 == 0 and fe3 == 0x72 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a5f72; op2val:0x2bf474;
op3val:0x39003fff; valaddr_reg:x3; val_offset:111606*0 + 3*290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111606*0 + 3*290*FLEN/8, x4, x1, x2)

inst_37203:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a5f72 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf474 and fs3 == 0 and fe3 == 0x72 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a5f72; op2val:0x2bf474;
op3val:0x39007fff; valaddr_reg:x3; val_offset:111609*0 + 3*290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111609*0 + 3*290*FLEN/8, x4, x1, x2)

inst_37204:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a5f72 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf474 and fs3 == 0 and fe3 == 0x72 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a5f72; op2val:0x2bf474;
op3val:0x3900ffff; valaddr_reg:x3; val_offset:111612*0 + 3*290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111612*0 + 3*290*FLEN/8, x4, x1, x2)

inst_37205:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a5f72 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf474 and fs3 == 0 and fe3 == 0x72 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a5f72; op2val:0x2bf474;
op3val:0x3901ffff; valaddr_reg:x3; val_offset:111615*0 + 3*290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111615*0 + 3*290*FLEN/8, x4, x1, x2)

inst_37206:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a5f72 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf474 and fs3 == 0 and fe3 == 0x72 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a5f72; op2val:0x2bf474;
op3val:0x3903ffff; valaddr_reg:x3; val_offset:111618*0 + 3*290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111618*0 + 3*290*FLEN/8, x4, x1, x2)

inst_37207:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a5f72 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf474 and fs3 == 0 and fe3 == 0x72 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a5f72; op2val:0x2bf474;
op3val:0x3907ffff; valaddr_reg:x3; val_offset:111621*0 + 3*290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111621*0 + 3*290*FLEN/8, x4, x1, x2)

inst_37208:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a5f72 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf474 and fs3 == 0 and fe3 == 0x72 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a5f72; op2val:0x2bf474;
op3val:0x390fffff; valaddr_reg:x3; val_offset:111624*0 + 3*290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111624*0 + 3*290*FLEN/8, x4, x1, x2)

inst_37209:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a5f72 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf474 and fs3 == 0 and fe3 == 0x72 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a5f72; op2val:0x2bf474;
op3val:0x391fffff; valaddr_reg:x3; val_offset:111627*0 + 3*290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111627*0 + 3*290*FLEN/8, x4, x1, x2)

inst_37210:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a5f72 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf474 and fs3 == 0 and fe3 == 0x72 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a5f72; op2val:0x2bf474;
op3val:0x393fffff; valaddr_reg:x3; val_offset:111630*0 + 3*290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111630*0 + 3*290*FLEN/8, x4, x1, x2)

inst_37211:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a5f72 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf474 and fs3 == 0 and fe3 == 0x72 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a5f72; op2val:0x2bf474;
op3val:0x39400000; valaddr_reg:x3; val_offset:111633*0 + 3*290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111633*0 + 3*290*FLEN/8, x4, x1, x2)

inst_37212:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a5f72 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf474 and fs3 == 0 and fe3 == 0x72 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a5f72; op2val:0x2bf474;
op3val:0x39600000; valaddr_reg:x3; val_offset:111636*0 + 3*290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111636*0 + 3*290*FLEN/8, x4, x1, x2)

inst_37213:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a5f72 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf474 and fs3 == 0 and fe3 == 0x72 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a5f72; op2val:0x2bf474;
op3val:0x39700000; valaddr_reg:x3; val_offset:111639*0 + 3*290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111639*0 + 3*290*FLEN/8, x4, x1, x2)

inst_37214:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a5f72 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf474 and fs3 == 0 and fe3 == 0x72 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a5f72; op2val:0x2bf474;
op3val:0x39780000; valaddr_reg:x3; val_offset:111642*0 + 3*290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111642*0 + 3*290*FLEN/8, x4, x1, x2)

inst_37215:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a5f72 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf474 and fs3 == 0 and fe3 == 0x72 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a5f72; op2val:0x2bf474;
op3val:0x397c0000; valaddr_reg:x3; val_offset:111645*0 + 3*290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111645*0 + 3*290*FLEN/8, x4, x1, x2)

inst_37216:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a5f72 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf474 and fs3 == 0 and fe3 == 0x72 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a5f72; op2val:0x2bf474;
op3val:0x397e0000; valaddr_reg:x3; val_offset:111648*0 + 3*290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111648*0 + 3*290*FLEN/8, x4, x1, x2)

inst_37217:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a5f72 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf474 and fs3 == 0 and fe3 == 0x72 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a5f72; op2val:0x2bf474;
op3val:0x397f0000; valaddr_reg:x3; val_offset:111651*0 + 3*290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111651*0 + 3*290*FLEN/8, x4, x1, x2)

inst_37218:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a5f72 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf474 and fs3 == 0 and fe3 == 0x72 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a5f72; op2val:0x2bf474;
op3val:0x397f8000; valaddr_reg:x3; val_offset:111654*0 + 3*290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111654*0 + 3*290*FLEN/8, x4, x1, x2)

inst_37219:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a5f72 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf474 and fs3 == 0 and fe3 == 0x72 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a5f72; op2val:0x2bf474;
op3val:0x397fc000; valaddr_reg:x3; val_offset:111657*0 + 3*290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111657*0 + 3*290*FLEN/8, x4, x1, x2)

inst_37220:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a5f72 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf474 and fs3 == 0 and fe3 == 0x72 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a5f72; op2val:0x2bf474;
op3val:0x397fe000; valaddr_reg:x3; val_offset:111660*0 + 3*290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111660*0 + 3*290*FLEN/8, x4, x1, x2)

inst_37221:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a5f72 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf474 and fs3 == 0 and fe3 == 0x72 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a5f72; op2val:0x2bf474;
op3val:0x397ff000; valaddr_reg:x3; val_offset:111663*0 + 3*290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111663*0 + 3*290*FLEN/8, x4, x1, x2)

inst_37222:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a5f72 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf474 and fs3 == 0 and fe3 == 0x72 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a5f72; op2val:0x2bf474;
op3val:0x397ff800; valaddr_reg:x3; val_offset:111666*0 + 3*290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111666*0 + 3*290*FLEN/8, x4, x1, x2)

inst_37223:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a5f72 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf474 and fs3 == 0 and fe3 == 0x72 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a5f72; op2val:0x2bf474;
op3val:0x397ffc00; valaddr_reg:x3; val_offset:111669*0 + 3*290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111669*0 + 3*290*FLEN/8, x4, x1, x2)

inst_37224:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a5f72 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf474 and fs3 == 0 and fe3 == 0x72 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a5f72; op2val:0x2bf474;
op3val:0x397ffe00; valaddr_reg:x3; val_offset:111672*0 + 3*290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111672*0 + 3*290*FLEN/8, x4, x1, x2)

inst_37225:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a5f72 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf474 and fs3 == 0 and fe3 == 0x72 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a5f72; op2val:0x2bf474;
op3val:0x397fff00; valaddr_reg:x3; val_offset:111675*0 + 3*290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111675*0 + 3*290*FLEN/8, x4, x1, x2)

inst_37226:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a5f72 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf474 and fs3 == 0 and fe3 == 0x72 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a5f72; op2val:0x2bf474;
op3val:0x397fff80; valaddr_reg:x3; val_offset:111678*0 + 3*290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111678*0 + 3*290*FLEN/8, x4, x1, x2)

inst_37227:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a5f72 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf474 and fs3 == 0 and fe3 == 0x72 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a5f72; op2val:0x2bf474;
op3val:0x397fffc0; valaddr_reg:x3; val_offset:111681*0 + 3*290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111681*0 + 3*290*FLEN/8, x4, x1, x2)

inst_37228:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a5f72 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf474 and fs3 == 0 and fe3 == 0x72 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a5f72; op2val:0x2bf474;
op3val:0x397fffe0; valaddr_reg:x3; val_offset:111684*0 + 3*290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111684*0 + 3*290*FLEN/8, x4, x1, x2)

inst_37229:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a5f72 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf474 and fs3 == 0 and fe3 == 0x72 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a5f72; op2val:0x2bf474;
op3val:0x397ffff0; valaddr_reg:x3; val_offset:111687*0 + 3*290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111687*0 + 3*290*FLEN/8, x4, x1, x2)

inst_37230:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a5f72 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf474 and fs3 == 0 and fe3 == 0x72 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a5f72; op2val:0x2bf474;
op3val:0x397ffff8; valaddr_reg:x3; val_offset:111690*0 + 3*290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111690*0 + 3*290*FLEN/8, x4, x1, x2)

inst_37231:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a5f72 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf474 and fs3 == 0 and fe3 == 0x72 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a5f72; op2val:0x2bf474;
op3val:0x397ffffc; valaddr_reg:x3; val_offset:111693*0 + 3*290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111693*0 + 3*290*FLEN/8, x4, x1, x2)

inst_37232:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a5f72 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf474 and fs3 == 0 and fe3 == 0x72 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a5f72; op2val:0x2bf474;
op3val:0x397ffffe; valaddr_reg:x3; val_offset:111696*0 + 3*290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111696*0 + 3*290*FLEN/8, x4, x1, x2)

inst_37233:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a5f72 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf474 and fs3 == 0 and fe3 == 0x72 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a5f72; op2val:0x2bf474;
op3val:0x397fffff; valaddr_reg:x3; val_offset:111699*0 + 3*290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111699*0 + 3*290*FLEN/8, x4, x1, x2)

inst_37234:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a5f72 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf474 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a5f72; op2val:0x2bf474;
op3val:0x3f800001; valaddr_reg:x3; val_offset:111702*0 + 3*290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111702*0 + 3*290*FLEN/8, x4, x1, x2)

inst_37235:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a5f72 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf474 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a5f72; op2val:0x2bf474;
op3val:0x3f800003; valaddr_reg:x3; val_offset:111705*0 + 3*290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111705*0 + 3*290*FLEN/8, x4, x1, x2)

inst_37236:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a5f72 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf474 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a5f72; op2val:0x2bf474;
op3val:0x3f800007; valaddr_reg:x3; val_offset:111708*0 + 3*290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111708*0 + 3*290*FLEN/8, x4, x1, x2)

inst_37237:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a5f72 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf474 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a5f72; op2val:0x2bf474;
op3val:0x3f999999; valaddr_reg:x3; val_offset:111711*0 + 3*290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111711*0 + 3*290*FLEN/8, x4, x1, x2)

inst_37238:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a5f72 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf474 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a5f72; op2val:0x2bf474;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:111714*0 + 3*290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111714*0 + 3*290*FLEN/8, x4, x1, x2)

inst_37239:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a5f72 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf474 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a5f72; op2val:0x2bf474;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:111717*0 + 3*290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111717*0 + 3*290*FLEN/8, x4, x1, x2)

inst_37240:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a5f72 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf474 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a5f72; op2val:0x2bf474;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:111720*0 + 3*290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111720*0 + 3*290*FLEN/8, x4, x1, x2)

inst_37241:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a5f72 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf474 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a5f72; op2val:0x2bf474;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:111723*0 + 3*290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111723*0 + 3*290*FLEN/8, x4, x1, x2)

inst_37242:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a5f72 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf474 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a5f72; op2val:0x2bf474;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:111726*0 + 3*290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111726*0 + 3*290*FLEN/8, x4, x1, x2)

inst_37243:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a5f72 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf474 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a5f72; op2val:0x2bf474;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:111729*0 + 3*290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111729*0 + 3*290*FLEN/8, x4, x1, x2)

inst_37244:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a5f72 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf474 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a5f72; op2val:0x2bf474;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:111732*0 + 3*290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111732*0 + 3*290*FLEN/8, x4, x1, x2)

inst_37245:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a5f72 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf474 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a5f72; op2val:0x2bf474;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:111735*0 + 3*290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111735*0 + 3*290*FLEN/8, x4, x1, x2)

inst_37246:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a5f72 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf474 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a5f72; op2val:0x2bf474;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:111738*0 + 3*290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111738*0 + 3*290*FLEN/8, x4, x1, x2)

inst_37247:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a5f72 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf474 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a5f72; op2val:0x2bf474;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:111741*0 + 3*290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111741*0 + 3*290*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2134495565,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50329600,32,FLEN)
NAN_BOXED(2134495565,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50330624,32,FLEN)
NAN_BOXED(2134495565,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50331136,32,FLEN)
NAN_BOXED(2134495565,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50331392,32,FLEN)
NAN_BOXED(2134495565,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50331520,32,FLEN)
NAN_BOXED(2134495565,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50331584,32,FLEN)
NAN_BOXED(2134495565,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50331616,32,FLEN)
NAN_BOXED(2134495565,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50331632,32,FLEN)
NAN_BOXED(2134495565,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50331640,32,FLEN)
NAN_BOXED(2134495565,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50331644,32,FLEN)
NAN_BOXED(2134495565,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50331646,32,FLEN)
NAN_BOXED(2134495565,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50331647,32,FLEN)
NAN_BOXED(2134505610,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2134505610,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2134505610,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483651,32,FLEN)
NAN_BOXED(2134505610,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483655,32,FLEN)
NAN_BOXED(2134505610,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483663,32,FLEN)
NAN_BOXED(2134505610,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483679,32,FLEN)
NAN_BOXED(2134505610,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483711,32,FLEN)
NAN_BOXED(2134505610,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483775,32,FLEN)
NAN_BOXED(2134505610,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483903,32,FLEN)
NAN_BOXED(2134505610,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147484159,32,FLEN)
NAN_BOXED(2134505610,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147484671,32,FLEN)
NAN_BOXED(2134505610,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147485695,32,FLEN)
NAN_BOXED(2134505610,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147487743,32,FLEN)
NAN_BOXED(2134505610,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147491839,32,FLEN)
NAN_BOXED(2134505610,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147500031,32,FLEN)
NAN_BOXED(2134505610,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147516415,32,FLEN)
NAN_BOXED(2134505610,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147549183,32,FLEN)
NAN_BOXED(2134505610,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147614719,32,FLEN)
NAN_BOXED(2134505610,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147745791,32,FLEN)
NAN_BOXED(2134505610,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2148007935,32,FLEN)
NAN_BOXED(2134505610,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2148532223,32,FLEN)
NAN_BOXED(2134505610,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149161369,32,FLEN)
NAN_BOXED(2134505610,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149580799,32,FLEN)
NAN_BOXED(2134505610,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149880393,32,FLEN)
NAN_BOXED(2134505610,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2150839091,32,FLEN)
NAN_BOXED(2134505610,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151078765,32,FLEN)
NAN_BOXED(2134505610,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151398331,32,FLEN)
NAN_BOXED(2134505610,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151677951,32,FLEN)
NAN_BOXED(2134505610,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151677952,32,FLEN)
NAN_BOXED(2134505610,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151957572,32,FLEN)
NAN_BOXED(2134505610,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2152516812,32,FLEN)
NAN_BOXED(2134505610,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2153475510,32,FLEN)
NAN_BOXED(2134505610,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2153775104,32,FLEN)
NAN_BOXED(2134505610,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154194534,32,FLEN)
NAN_BOXED(2134505610,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154673883,32,FLEN)
NAN_BOXED(2134505610,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154823680,32,FLEN)
NAN_BOXED(2134505610,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155347968,32,FLEN)
NAN_BOXED(2134505610,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155610112,32,FLEN)
NAN_BOXED(2134505610,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155741184,32,FLEN)
NAN_BOXED(2134505610,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155806720,32,FLEN)
NAN_BOXED(2134505610,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155839488,32,FLEN)
NAN_BOXED(2134505610,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155855872,32,FLEN)
NAN_BOXED(2134505610,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155864064,32,FLEN)
NAN_BOXED(2134505610,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155868160,32,FLEN)
NAN_BOXED(2134505610,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155870208,32,FLEN)
NAN_BOXED(2134505610,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155871232,32,FLEN)
NAN_BOXED(2134505610,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155871744,32,FLEN)
NAN_BOXED(2134505610,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872000,32,FLEN)
NAN_BOXED(2134505610,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872128,32,FLEN)
NAN_BOXED(2134505610,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872192,32,FLEN)
NAN_BOXED(2134505610,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872224,32,FLEN)
NAN_BOXED(2134505610,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872240,32,FLEN)
NAN_BOXED(2134505610,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872248,32,FLEN)
NAN_BOXED(2134505610,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872252,32,FLEN)
NAN_BOXED(2134505610,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2134505610,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2134531954,32,FLEN)
NAN_BOXED(2880628,32,FLEN)
NAN_BOXED(956301312,32,FLEN)
NAN_BOXED(2134531954,32,FLEN)
NAN_BOXED(2880628,32,FLEN)
NAN_BOXED(956301313,32,FLEN)
NAN_BOXED(2134531954,32,FLEN)
NAN_BOXED(2880628,32,FLEN)
NAN_BOXED(956301315,32,FLEN)
NAN_BOXED(2134531954,32,FLEN)
NAN_BOXED(2880628,32,FLEN)
NAN_BOXED(956301319,32,FLEN)
NAN_BOXED(2134531954,32,FLEN)
NAN_BOXED(2880628,32,FLEN)
NAN_BOXED(956301327,32,FLEN)
NAN_BOXED(2134531954,32,FLEN)
NAN_BOXED(2880628,32,FLEN)
NAN_BOXED(956301343,32,FLEN)
NAN_BOXED(2134531954,32,FLEN)
NAN_BOXED(2880628,32,FLEN)
NAN_BOXED(956301375,32,FLEN)
NAN_BOXED(2134531954,32,FLEN)
NAN_BOXED(2880628,32,FLEN)
NAN_BOXED(956301439,32,FLEN)
NAN_BOXED(2134531954,32,FLEN)
NAN_BOXED(2880628,32,FLEN)
NAN_BOXED(956301567,32,FLEN)
NAN_BOXED(2134531954,32,FLEN)
NAN_BOXED(2880628,32,FLEN)
NAN_BOXED(956301823,32,FLEN)
NAN_BOXED(2134531954,32,FLEN)
NAN_BOXED(2880628,32,FLEN)
NAN_BOXED(956302335,32,FLEN)
NAN_BOXED(2134531954,32,FLEN)
NAN_BOXED(2880628,32,FLEN)
NAN_BOXED(956303359,32,FLEN)
NAN_BOXED(2134531954,32,FLEN)
NAN_BOXED(2880628,32,FLEN)
NAN_BOXED(956305407,32,FLEN)
NAN_BOXED(2134531954,32,FLEN)
NAN_BOXED(2880628,32,FLEN)
NAN_BOXED(956309503,32,FLEN)
NAN_BOXED(2134531954,32,FLEN)
NAN_BOXED(2880628,32,FLEN)
NAN_BOXED(956317695,32,FLEN)
NAN_BOXED(2134531954,32,FLEN)
NAN_BOXED(2880628,32,FLEN)
NAN_BOXED(956334079,32,FLEN)
NAN_BOXED(2134531954,32,FLEN)
NAN_BOXED(2880628,32,FLEN)
NAN_BOXED(956366847,32,FLEN)
NAN_BOXED(2134531954,32,FLEN)
NAN_BOXED(2880628,32,FLEN)
NAN_BOXED(956432383,32,FLEN)
NAN_BOXED(2134531954,32,FLEN)
NAN_BOXED(2880628,32,FLEN)
NAN_BOXED(956563455,32,FLEN)
NAN_BOXED(2134531954,32,FLEN)
NAN_BOXED(2880628,32,FLEN)
NAN_BOXED(956825599,32,FLEN)
NAN_BOXED(2134531954,32,FLEN)
NAN_BOXED(2880628,32,FLEN)
NAN_BOXED(957349887,32,FLEN)
NAN_BOXED(2134531954,32,FLEN)
NAN_BOXED(2880628,32,FLEN)
NAN_BOXED(958398463,32,FLEN)
NAN_BOXED(2134531954,32,FLEN)
NAN_BOXED(2880628,32,FLEN)
NAN_BOXED(960495615,32,FLEN)
NAN_BOXED(2134531954,32,FLEN)
NAN_BOXED(2880628,32,FLEN)
NAN_BOXED(960495616,32,FLEN)
NAN_BOXED(2134531954,32,FLEN)
NAN_BOXED(2880628,32,FLEN)
NAN_BOXED(962592768,32,FLEN)
NAN_BOXED(2134531954,32,FLEN)
NAN_BOXED(2880628,32,FLEN)
NAN_BOXED(963641344,32,FLEN)
NAN_BOXED(2134531954,32,FLEN)
NAN_BOXED(2880628,32,FLEN)
NAN_BOXED(964165632,32,FLEN)
NAN_BOXED(2134531954,32,FLEN)
NAN_BOXED(2880628,32,FLEN)
NAN_BOXED(964427776,32,FLEN)
NAN_BOXED(2134531954,32,FLEN)
NAN_BOXED(2880628,32,FLEN)
NAN_BOXED(964558848,32,FLEN)
NAN_BOXED(2134531954,32,FLEN)
NAN_BOXED(2880628,32,FLEN)
NAN_BOXED(964624384,32,FLEN)
NAN_BOXED(2134531954,32,FLEN)
NAN_BOXED(2880628,32,FLEN)
NAN_BOXED(964657152,32,FLEN)
NAN_BOXED(2134531954,32,FLEN)
NAN_BOXED(2880628,32,FLEN)
NAN_BOXED(964673536,32,FLEN)
NAN_BOXED(2134531954,32,FLEN)
NAN_BOXED(2880628,32,FLEN)
NAN_BOXED(964681728,32,FLEN)
NAN_BOXED(2134531954,32,FLEN)
NAN_BOXED(2880628,32,FLEN)
NAN_BOXED(964685824,32,FLEN)
NAN_BOXED(2134531954,32,FLEN)
NAN_BOXED(2880628,32,FLEN)
NAN_BOXED(964687872,32,FLEN)
NAN_BOXED(2134531954,32,FLEN)
NAN_BOXED(2880628,32,FLEN)
NAN_BOXED(964688896,32,FLEN)
NAN_BOXED(2134531954,32,FLEN)
NAN_BOXED(2880628,32,FLEN)
NAN_BOXED(964689408,32,FLEN)
NAN_BOXED(2134531954,32,FLEN)
NAN_BOXED(2880628,32,FLEN)
NAN_BOXED(964689664,32,FLEN)
NAN_BOXED(2134531954,32,FLEN)
NAN_BOXED(2880628,32,FLEN)
NAN_BOXED(964689792,32,FLEN)
NAN_BOXED(2134531954,32,FLEN)
NAN_BOXED(2880628,32,FLEN)
NAN_BOXED(964689856,32,FLEN)
NAN_BOXED(2134531954,32,FLEN)
NAN_BOXED(2880628,32,FLEN)
NAN_BOXED(964689888,32,FLEN)
NAN_BOXED(2134531954,32,FLEN)
NAN_BOXED(2880628,32,FLEN)
NAN_BOXED(964689904,32,FLEN)
NAN_BOXED(2134531954,32,FLEN)
NAN_BOXED(2880628,32,FLEN)
NAN_BOXED(964689912,32,FLEN)
NAN_BOXED(2134531954,32,FLEN)
NAN_BOXED(2880628,32,FLEN)
NAN_BOXED(964689916,32,FLEN)
NAN_BOXED(2134531954,32,FLEN)
NAN_BOXED(2880628,32,FLEN)
NAN_BOXED(964689918,32,FLEN)
NAN_BOXED(2134531954,32,FLEN)
NAN_BOXED(2880628,32,FLEN)
NAN_BOXED(964689919,32,FLEN)
NAN_BOXED(2134531954,32,FLEN)
NAN_BOXED(2880628,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2134531954,32,FLEN)
NAN_BOXED(2880628,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2134531954,32,FLEN)
NAN_BOXED(2880628,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2134531954,32,FLEN)
NAN_BOXED(2880628,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2134531954,32,FLEN)
NAN_BOXED(2880628,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2134531954,32,FLEN)
NAN_BOXED(2880628,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2134531954,32,FLEN)
NAN_BOXED(2880628,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2134531954,32,FLEN)
NAN_BOXED(2880628,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2134531954,32,FLEN)
NAN_BOXED(2880628,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2134531954,32,FLEN)
NAN_BOXED(2880628,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2134531954,32,FLEN)
NAN_BOXED(2880628,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2134531954,32,FLEN)
NAN_BOXED(2880628,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2134531954,32,FLEN)
NAN_BOXED(2880628,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2134531954,32,FLEN)
NAN_BOXED(2880628,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
