
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:17:59 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_37376:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3b0abd and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2bcc33 and fs3 == 1 and fe3 == 0x63 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3b0abd; op2val:0x802bcc33;
op3val:0xb1800003; valaddr_reg:x3; val_offset:112128*0 + 3*292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112128*0 + 3*292*FLEN/8, x4, x1, x2)

inst_37377:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3b0abd and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2bcc33 and fs3 == 1 and fe3 == 0x63 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3b0abd; op2val:0x802bcc33;
op3val:0xb1800007; valaddr_reg:x3; val_offset:112131*0 + 3*292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112131*0 + 3*292*FLEN/8, x4, x1, x2)

inst_37378:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3b0abd and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2bcc33 and fs3 == 1 and fe3 == 0x63 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3b0abd; op2val:0x802bcc33;
op3val:0xb180000f; valaddr_reg:x3; val_offset:112134*0 + 3*292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112134*0 + 3*292*FLEN/8, x4, x1, x2)

inst_37379:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3b0abd and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2bcc33 and fs3 == 1 and fe3 == 0x63 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3b0abd; op2val:0x802bcc33;
op3val:0xb180001f; valaddr_reg:x3; val_offset:112137*0 + 3*292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112137*0 + 3*292*FLEN/8, x4, x1, x2)

inst_37380:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3b0abd and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2bcc33 and fs3 == 1 and fe3 == 0x63 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3b0abd; op2val:0x802bcc33;
op3val:0xb180003f; valaddr_reg:x3; val_offset:112140*0 + 3*292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112140*0 + 3*292*FLEN/8, x4, x1, x2)

inst_37381:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3b0abd and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2bcc33 and fs3 == 1 and fe3 == 0x63 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3b0abd; op2val:0x802bcc33;
op3val:0xb180007f; valaddr_reg:x3; val_offset:112143*0 + 3*292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112143*0 + 3*292*FLEN/8, x4, x1, x2)

inst_37382:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3b0abd and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2bcc33 and fs3 == 1 and fe3 == 0x63 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3b0abd; op2val:0x802bcc33;
op3val:0xb18000ff; valaddr_reg:x3; val_offset:112146*0 + 3*292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112146*0 + 3*292*FLEN/8, x4, x1, x2)

inst_37383:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3b0abd and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2bcc33 and fs3 == 1 and fe3 == 0x63 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3b0abd; op2val:0x802bcc33;
op3val:0xb18001ff; valaddr_reg:x3; val_offset:112149*0 + 3*292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112149*0 + 3*292*FLEN/8, x4, x1, x2)

inst_37384:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3b0abd and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2bcc33 and fs3 == 1 and fe3 == 0x63 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3b0abd; op2val:0x802bcc33;
op3val:0xb18003ff; valaddr_reg:x3; val_offset:112152*0 + 3*292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112152*0 + 3*292*FLEN/8, x4, x1, x2)

inst_37385:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3b0abd and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2bcc33 and fs3 == 1 and fe3 == 0x63 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3b0abd; op2val:0x802bcc33;
op3val:0xb18007ff; valaddr_reg:x3; val_offset:112155*0 + 3*292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112155*0 + 3*292*FLEN/8, x4, x1, x2)

inst_37386:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3b0abd and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2bcc33 and fs3 == 1 and fe3 == 0x63 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3b0abd; op2val:0x802bcc33;
op3val:0xb1800fff; valaddr_reg:x3; val_offset:112158*0 + 3*292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112158*0 + 3*292*FLEN/8, x4, x1, x2)

inst_37387:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3b0abd and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2bcc33 and fs3 == 1 and fe3 == 0x63 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3b0abd; op2val:0x802bcc33;
op3val:0xb1801fff; valaddr_reg:x3; val_offset:112161*0 + 3*292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112161*0 + 3*292*FLEN/8, x4, x1, x2)

inst_37388:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3b0abd and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2bcc33 and fs3 == 1 and fe3 == 0x63 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3b0abd; op2val:0x802bcc33;
op3val:0xb1803fff; valaddr_reg:x3; val_offset:112164*0 + 3*292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112164*0 + 3*292*FLEN/8, x4, x1, x2)

inst_37389:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3b0abd and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2bcc33 and fs3 == 1 and fe3 == 0x63 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3b0abd; op2val:0x802bcc33;
op3val:0xb1807fff; valaddr_reg:x3; val_offset:112167*0 + 3*292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112167*0 + 3*292*FLEN/8, x4, x1, x2)

inst_37390:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3b0abd and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2bcc33 and fs3 == 1 and fe3 == 0x63 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3b0abd; op2val:0x802bcc33;
op3val:0xb180ffff; valaddr_reg:x3; val_offset:112170*0 + 3*292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112170*0 + 3*292*FLEN/8, x4, x1, x2)

inst_37391:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3b0abd and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2bcc33 and fs3 == 1 and fe3 == 0x63 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3b0abd; op2val:0x802bcc33;
op3val:0xb181ffff; valaddr_reg:x3; val_offset:112173*0 + 3*292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112173*0 + 3*292*FLEN/8, x4, x1, x2)

inst_37392:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3b0abd and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2bcc33 and fs3 == 1 and fe3 == 0x63 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3b0abd; op2val:0x802bcc33;
op3val:0xb183ffff; valaddr_reg:x3; val_offset:112176*0 + 3*292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112176*0 + 3*292*FLEN/8, x4, x1, x2)

inst_37393:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3b0abd and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2bcc33 and fs3 == 1 and fe3 == 0x63 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3b0abd; op2val:0x802bcc33;
op3val:0xb187ffff; valaddr_reg:x3; val_offset:112179*0 + 3*292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112179*0 + 3*292*FLEN/8, x4, x1, x2)

inst_37394:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3b0abd and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2bcc33 and fs3 == 1 and fe3 == 0x63 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3b0abd; op2val:0x802bcc33;
op3val:0xb18fffff; valaddr_reg:x3; val_offset:112182*0 + 3*292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112182*0 + 3*292*FLEN/8, x4, x1, x2)

inst_37395:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3b0abd and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2bcc33 and fs3 == 1 and fe3 == 0x63 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3b0abd; op2val:0x802bcc33;
op3val:0xb19fffff; valaddr_reg:x3; val_offset:112185*0 + 3*292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112185*0 + 3*292*FLEN/8, x4, x1, x2)

inst_37396:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3b0abd and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2bcc33 and fs3 == 1 and fe3 == 0x63 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3b0abd; op2val:0x802bcc33;
op3val:0xb1bfffff; valaddr_reg:x3; val_offset:112188*0 + 3*292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112188*0 + 3*292*FLEN/8, x4, x1, x2)

inst_37397:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3b0abd and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2bcc33 and fs3 == 1 and fe3 == 0x63 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3b0abd; op2val:0x802bcc33;
op3val:0xb1c00000; valaddr_reg:x3; val_offset:112191*0 + 3*292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112191*0 + 3*292*FLEN/8, x4, x1, x2)

inst_37398:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3b0abd and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2bcc33 and fs3 == 1 and fe3 == 0x63 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3b0abd; op2val:0x802bcc33;
op3val:0xb1e00000; valaddr_reg:x3; val_offset:112194*0 + 3*292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112194*0 + 3*292*FLEN/8, x4, x1, x2)

inst_37399:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3b0abd and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2bcc33 and fs3 == 1 and fe3 == 0x63 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3b0abd; op2val:0x802bcc33;
op3val:0xb1f00000; valaddr_reg:x3; val_offset:112197*0 + 3*292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112197*0 + 3*292*FLEN/8, x4, x1, x2)

inst_37400:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3b0abd and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2bcc33 and fs3 == 1 and fe3 == 0x63 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3b0abd; op2val:0x802bcc33;
op3val:0xb1f80000; valaddr_reg:x3; val_offset:112200*0 + 3*292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112200*0 + 3*292*FLEN/8, x4, x1, x2)

inst_37401:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3b0abd and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2bcc33 and fs3 == 1 and fe3 == 0x63 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3b0abd; op2val:0x802bcc33;
op3val:0xb1fc0000; valaddr_reg:x3; val_offset:112203*0 + 3*292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112203*0 + 3*292*FLEN/8, x4, x1, x2)

inst_37402:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3b0abd and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2bcc33 and fs3 == 1 and fe3 == 0x63 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3b0abd; op2val:0x802bcc33;
op3val:0xb1fe0000; valaddr_reg:x3; val_offset:112206*0 + 3*292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112206*0 + 3*292*FLEN/8, x4, x1, x2)

inst_37403:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3b0abd and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2bcc33 and fs3 == 1 and fe3 == 0x63 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3b0abd; op2val:0x802bcc33;
op3val:0xb1ff0000; valaddr_reg:x3; val_offset:112209*0 + 3*292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112209*0 + 3*292*FLEN/8, x4, x1, x2)

inst_37404:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3b0abd and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2bcc33 and fs3 == 1 and fe3 == 0x63 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3b0abd; op2val:0x802bcc33;
op3val:0xb1ff8000; valaddr_reg:x3; val_offset:112212*0 + 3*292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112212*0 + 3*292*FLEN/8, x4, x1, x2)

inst_37405:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3b0abd and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2bcc33 and fs3 == 1 and fe3 == 0x63 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3b0abd; op2val:0x802bcc33;
op3val:0xb1ffc000; valaddr_reg:x3; val_offset:112215*0 + 3*292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112215*0 + 3*292*FLEN/8, x4, x1, x2)

inst_37406:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3b0abd and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2bcc33 and fs3 == 1 and fe3 == 0x63 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3b0abd; op2val:0x802bcc33;
op3val:0xb1ffe000; valaddr_reg:x3; val_offset:112218*0 + 3*292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112218*0 + 3*292*FLEN/8, x4, x1, x2)

inst_37407:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3b0abd and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2bcc33 and fs3 == 1 and fe3 == 0x63 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3b0abd; op2val:0x802bcc33;
op3val:0xb1fff000; valaddr_reg:x3; val_offset:112221*0 + 3*292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112221*0 + 3*292*FLEN/8, x4, x1, x2)

inst_37408:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3b0abd and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2bcc33 and fs3 == 1 and fe3 == 0x63 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3b0abd; op2val:0x802bcc33;
op3val:0xb1fff800; valaddr_reg:x3; val_offset:112224*0 + 3*292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112224*0 + 3*292*FLEN/8, x4, x1, x2)

inst_37409:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3b0abd and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2bcc33 and fs3 == 1 and fe3 == 0x63 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3b0abd; op2val:0x802bcc33;
op3val:0xb1fffc00; valaddr_reg:x3; val_offset:112227*0 + 3*292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112227*0 + 3*292*FLEN/8, x4, x1, x2)

inst_37410:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3b0abd and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2bcc33 and fs3 == 1 and fe3 == 0x63 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3b0abd; op2val:0x802bcc33;
op3val:0xb1fffe00; valaddr_reg:x3; val_offset:112230*0 + 3*292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112230*0 + 3*292*FLEN/8, x4, x1, x2)

inst_37411:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3b0abd and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2bcc33 and fs3 == 1 and fe3 == 0x63 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3b0abd; op2val:0x802bcc33;
op3val:0xb1ffff00; valaddr_reg:x3; val_offset:112233*0 + 3*292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112233*0 + 3*292*FLEN/8, x4, x1, x2)

inst_37412:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3b0abd and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2bcc33 and fs3 == 1 and fe3 == 0x63 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3b0abd; op2val:0x802bcc33;
op3val:0xb1ffff80; valaddr_reg:x3; val_offset:112236*0 + 3*292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112236*0 + 3*292*FLEN/8, x4, x1, x2)

inst_37413:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3b0abd and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2bcc33 and fs3 == 1 and fe3 == 0x63 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3b0abd; op2val:0x802bcc33;
op3val:0xb1ffffc0; valaddr_reg:x3; val_offset:112239*0 + 3*292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112239*0 + 3*292*FLEN/8, x4, x1, x2)

inst_37414:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3b0abd and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2bcc33 and fs3 == 1 and fe3 == 0x63 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3b0abd; op2val:0x802bcc33;
op3val:0xb1ffffe0; valaddr_reg:x3; val_offset:112242*0 + 3*292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112242*0 + 3*292*FLEN/8, x4, x1, x2)

inst_37415:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3b0abd and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2bcc33 and fs3 == 1 and fe3 == 0x63 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3b0abd; op2val:0x802bcc33;
op3val:0xb1fffff0; valaddr_reg:x3; val_offset:112245*0 + 3*292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112245*0 + 3*292*FLEN/8, x4, x1, x2)

inst_37416:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3b0abd and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2bcc33 and fs3 == 1 and fe3 == 0x63 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3b0abd; op2val:0x802bcc33;
op3val:0xb1fffff8; valaddr_reg:x3; val_offset:112248*0 + 3*292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112248*0 + 3*292*FLEN/8, x4, x1, x2)

inst_37417:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3b0abd and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2bcc33 and fs3 == 1 and fe3 == 0x63 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3b0abd; op2val:0x802bcc33;
op3val:0xb1fffffc; valaddr_reg:x3; val_offset:112251*0 + 3*292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112251*0 + 3*292*FLEN/8, x4, x1, x2)

inst_37418:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3b0abd and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2bcc33 and fs3 == 1 and fe3 == 0x63 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3b0abd; op2val:0x802bcc33;
op3val:0xb1fffffe; valaddr_reg:x3; val_offset:112254*0 + 3*292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112254*0 + 3*292*FLEN/8, x4, x1, x2)

inst_37419:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3b0abd and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2bcc33 and fs3 == 1 and fe3 == 0x63 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3b0abd; op2val:0x802bcc33;
op3val:0xb1ffffff; valaddr_reg:x3; val_offset:112257*0 + 3*292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112257*0 + 3*292*FLEN/8, x4, x1, x2)

inst_37420:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3b0abd and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2bcc33 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3b0abd; op2val:0x802bcc33;
op3val:0xbf800001; valaddr_reg:x3; val_offset:112260*0 + 3*292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112260*0 + 3*292*FLEN/8, x4, x1, x2)

inst_37421:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3b0abd and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2bcc33 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3b0abd; op2val:0x802bcc33;
op3val:0xbf800003; valaddr_reg:x3; val_offset:112263*0 + 3*292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112263*0 + 3*292*FLEN/8, x4, x1, x2)

inst_37422:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3b0abd and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2bcc33 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3b0abd; op2val:0x802bcc33;
op3val:0xbf800007; valaddr_reg:x3; val_offset:112266*0 + 3*292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112266*0 + 3*292*FLEN/8, x4, x1, x2)

inst_37423:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3b0abd and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2bcc33 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3b0abd; op2val:0x802bcc33;
op3val:0xbf999999; valaddr_reg:x3; val_offset:112269*0 + 3*292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112269*0 + 3*292*FLEN/8, x4, x1, x2)

inst_37424:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3b0abd and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2bcc33 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3b0abd; op2val:0x802bcc33;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:112272*0 + 3*292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112272*0 + 3*292*FLEN/8, x4, x1, x2)

inst_37425:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3b0abd and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2bcc33 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3b0abd; op2val:0x802bcc33;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:112275*0 + 3*292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112275*0 + 3*292*FLEN/8, x4, x1, x2)

inst_37426:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3b0abd and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2bcc33 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3b0abd; op2val:0x802bcc33;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:112278*0 + 3*292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112278*0 + 3*292*FLEN/8, x4, x1, x2)

inst_37427:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3b0abd and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2bcc33 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3b0abd; op2val:0x802bcc33;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:112281*0 + 3*292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112281*0 + 3*292*FLEN/8, x4, x1, x2)

inst_37428:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3b0abd and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2bcc33 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3b0abd; op2val:0x802bcc33;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:112284*0 + 3*292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112284*0 + 3*292*FLEN/8, x4, x1, x2)

inst_37429:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3b0abd and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2bcc33 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3b0abd; op2val:0x802bcc33;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:112287*0 + 3*292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112287*0 + 3*292*FLEN/8, x4, x1, x2)

inst_37430:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3b0abd and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2bcc33 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3b0abd; op2val:0x802bcc33;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:112290*0 + 3*292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112290*0 + 3*292*FLEN/8, x4, x1, x2)

inst_37431:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3b0abd and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2bcc33 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3b0abd; op2val:0x802bcc33;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:112293*0 + 3*292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112293*0 + 3*292*FLEN/8, x4, x1, x2)

inst_37432:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3b0abd and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2bcc33 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3b0abd; op2val:0x802bcc33;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:112296*0 + 3*292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112296*0 + 3*292*FLEN/8, x4, x1, x2)

inst_37433:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3b0abd and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2bcc33 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3b0abd; op2val:0x802bcc33;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:112299*0 + 3*292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112299*0 + 3*292*FLEN/8, x4, x1, x2)

inst_37434:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3b0abd and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2bcc33 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3b0abd; op2val:0x802bcc33;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:112302*0 + 3*292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112302*0 + 3*292*FLEN/8, x4, x1, x2)

inst_37435:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3b0abd and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2bcc33 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3b0abd; op2val:0x802bcc33;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:112305*0 + 3*292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112305*0 + 3*292*FLEN/8, x4, x1, x2)

inst_37436:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3b1d98 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3b1d98; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:112308*0 + 3*292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112308*0 + 3*292*FLEN/8, x4, x1, x2)

inst_37437:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3b1d98 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3b1d98; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:112311*0 + 3*292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112311*0 + 3*292*FLEN/8, x4, x1, x2)

inst_37438:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3b1d98 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3b1d98; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:112314*0 + 3*292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112314*0 + 3*292*FLEN/8, x4, x1, x2)

inst_37439:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3b1d98 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3b1d98; op2val:0x0;
op3val:0x199999; valaddr_reg:x3; val_offset:112317*0 + 3*292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112317*0 + 3*292*FLEN/8, x4, x1, x2)

inst_37440:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3b1d98 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3b1d98; op2val:0x0;
op3val:0x249249; valaddr_reg:x3; val_offset:112320*0 + 3*292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112320*0 + 3*292*FLEN/8, x4, x1, x2)

inst_37441:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3b1d98 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3b1d98; op2val:0x0;
op3val:0x333333; valaddr_reg:x3; val_offset:112323*0 + 3*292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112323*0 + 3*292*FLEN/8, x4, x1, x2)

inst_37442:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3b1d98 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3b1d98; op2val:0x0;
op3val:0x36db6d; valaddr_reg:x3; val_offset:112326*0 + 3*292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112326*0 + 3*292*FLEN/8, x4, x1, x2)

inst_37443:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3b1d98 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3b1d98; op2val:0x0;
op3val:0x3bbbbb; valaddr_reg:x3; val_offset:112329*0 + 3*292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112329*0 + 3*292*FLEN/8, x4, x1, x2)

inst_37444:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3b1d98 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3b1d98; op2val:0x0;
op3val:0x444444; valaddr_reg:x3; val_offset:112332*0 + 3*292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112332*0 + 3*292*FLEN/8, x4, x1, x2)

inst_37445:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3b1d98 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3b1d98; op2val:0x0;
op3val:0x4ccccc; valaddr_reg:x3; val_offset:112335*0 + 3*292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112335*0 + 3*292*FLEN/8, x4, x1, x2)

inst_37446:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3b1d98 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3b1d98; op2val:0x0;
op3val:0x5b6db6; valaddr_reg:x3; val_offset:112338*0 + 3*292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112338*0 + 3*292*FLEN/8, x4, x1, x2)

inst_37447:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3b1d98 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3b1d98; op2val:0x0;
op3val:0x666666; valaddr_reg:x3; val_offset:112341*0 + 3*292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112341*0 + 3*292*FLEN/8, x4, x1, x2)

inst_37448:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3b1d98 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3b1d98; op2val:0x0;
op3val:0x6db6db; valaddr_reg:x3; val_offset:112344*0 + 3*292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112344*0 + 3*292*FLEN/8, x4, x1, x2)

inst_37449:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3b1d98 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3b1d98; op2val:0x0;
op3val:0x7ffff8; valaddr_reg:x3; val_offset:112347*0 + 3*292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112347*0 + 3*292*FLEN/8, x4, x1, x2)

inst_37450:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3b1d98 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3b1d98; op2val:0x0;
op3val:0x7ffffc; valaddr_reg:x3; val_offset:112350*0 + 3*292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112350*0 + 3*292*FLEN/8, x4, x1, x2)

inst_37451:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3b1d98 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3b1d98; op2val:0x0;
op3val:0x7ffffe; valaddr_reg:x3; val_offset:112353*0 + 3*292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112353*0 + 3*292*FLEN/8, x4, x1, x2)

inst_37452:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3b1d98 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3b1d98; op2val:0x0;
op3val:0xe000000; valaddr_reg:x3; val_offset:112356*0 + 3*292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112356*0 + 3*292*FLEN/8, x4, x1, x2)

inst_37453:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3b1d98 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3b1d98; op2val:0x0;
op3val:0xe000001; valaddr_reg:x3; val_offset:112359*0 + 3*292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112359*0 + 3*292*FLEN/8, x4, x1, x2)

inst_37454:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3b1d98 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3b1d98; op2val:0x0;
op3val:0xe000003; valaddr_reg:x3; val_offset:112362*0 + 3*292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112362*0 + 3*292*FLEN/8, x4, x1, x2)

inst_37455:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3b1d98 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3b1d98; op2val:0x0;
op3val:0xe000007; valaddr_reg:x3; val_offset:112365*0 + 3*292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112365*0 + 3*292*FLEN/8, x4, x1, x2)

inst_37456:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3b1d98 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3b1d98; op2val:0x0;
op3val:0xe00000f; valaddr_reg:x3; val_offset:112368*0 + 3*292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112368*0 + 3*292*FLEN/8, x4, x1, x2)

inst_37457:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3b1d98 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3b1d98; op2val:0x0;
op3val:0xe00001f; valaddr_reg:x3; val_offset:112371*0 + 3*292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112371*0 + 3*292*FLEN/8, x4, x1, x2)

inst_37458:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3b1d98 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3b1d98; op2val:0x0;
op3val:0xe00003f; valaddr_reg:x3; val_offset:112374*0 + 3*292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112374*0 + 3*292*FLEN/8, x4, x1, x2)

inst_37459:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3b1d98 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3b1d98; op2val:0x0;
op3val:0xe00007f; valaddr_reg:x3; val_offset:112377*0 + 3*292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112377*0 + 3*292*FLEN/8, x4, x1, x2)

inst_37460:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3b1d98 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3b1d98; op2val:0x0;
op3val:0xe0000ff; valaddr_reg:x3; val_offset:112380*0 + 3*292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112380*0 + 3*292*FLEN/8, x4, x1, x2)

inst_37461:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3b1d98 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3b1d98; op2val:0x0;
op3val:0xe0001ff; valaddr_reg:x3; val_offset:112383*0 + 3*292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112383*0 + 3*292*FLEN/8, x4, x1, x2)

inst_37462:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3b1d98 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3b1d98; op2val:0x0;
op3val:0xe0003ff; valaddr_reg:x3; val_offset:112386*0 + 3*292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112386*0 + 3*292*FLEN/8, x4, x1, x2)

inst_37463:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3b1d98 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3b1d98; op2val:0x0;
op3val:0xe0007ff; valaddr_reg:x3; val_offset:112389*0 + 3*292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112389*0 + 3*292*FLEN/8, x4, x1, x2)

inst_37464:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3b1d98 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3b1d98; op2val:0x0;
op3val:0xe000fff; valaddr_reg:x3; val_offset:112392*0 + 3*292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112392*0 + 3*292*FLEN/8, x4, x1, x2)

inst_37465:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3b1d98 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3b1d98; op2val:0x0;
op3val:0xe001fff; valaddr_reg:x3; val_offset:112395*0 + 3*292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112395*0 + 3*292*FLEN/8, x4, x1, x2)

inst_37466:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3b1d98 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3b1d98; op2val:0x0;
op3val:0xe003fff; valaddr_reg:x3; val_offset:112398*0 + 3*292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112398*0 + 3*292*FLEN/8, x4, x1, x2)

inst_37467:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3b1d98 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3b1d98; op2val:0x0;
op3val:0xe007fff; valaddr_reg:x3; val_offset:112401*0 + 3*292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112401*0 + 3*292*FLEN/8, x4, x1, x2)

inst_37468:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3b1d98 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3b1d98; op2val:0x0;
op3val:0xe00ffff; valaddr_reg:x3; val_offset:112404*0 + 3*292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112404*0 + 3*292*FLEN/8, x4, x1, x2)

inst_37469:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3b1d98 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3b1d98; op2val:0x0;
op3val:0xe01ffff; valaddr_reg:x3; val_offset:112407*0 + 3*292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112407*0 + 3*292*FLEN/8, x4, x1, x2)

inst_37470:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3b1d98 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3b1d98; op2val:0x0;
op3val:0xe03ffff; valaddr_reg:x3; val_offset:112410*0 + 3*292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112410*0 + 3*292*FLEN/8, x4, x1, x2)

inst_37471:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3b1d98 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3b1d98; op2val:0x0;
op3val:0xe07ffff; valaddr_reg:x3; val_offset:112413*0 + 3*292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112413*0 + 3*292*FLEN/8, x4, x1, x2)

inst_37472:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3b1d98 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3b1d98; op2val:0x0;
op3val:0xe0fffff; valaddr_reg:x3; val_offset:112416*0 + 3*292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112416*0 + 3*292*FLEN/8, x4, x1, x2)

inst_37473:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3b1d98 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3b1d98; op2val:0x0;
op3val:0xe1fffff; valaddr_reg:x3; val_offset:112419*0 + 3*292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112419*0 + 3*292*FLEN/8, x4, x1, x2)

inst_37474:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3b1d98 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3b1d98; op2val:0x0;
op3val:0xe3fffff; valaddr_reg:x3; val_offset:112422*0 + 3*292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112422*0 + 3*292*FLEN/8, x4, x1, x2)

inst_37475:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3b1d98 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3b1d98; op2val:0x0;
op3val:0xe400000; valaddr_reg:x3; val_offset:112425*0 + 3*292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112425*0 + 3*292*FLEN/8, x4, x1, x2)

inst_37476:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3b1d98 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3b1d98; op2val:0x0;
op3val:0xe600000; valaddr_reg:x3; val_offset:112428*0 + 3*292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112428*0 + 3*292*FLEN/8, x4, x1, x2)

inst_37477:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3b1d98 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3b1d98; op2val:0x0;
op3val:0xe700000; valaddr_reg:x3; val_offset:112431*0 + 3*292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112431*0 + 3*292*FLEN/8, x4, x1, x2)

inst_37478:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3b1d98 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3b1d98; op2val:0x0;
op3val:0xe780000; valaddr_reg:x3; val_offset:112434*0 + 3*292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112434*0 + 3*292*FLEN/8, x4, x1, x2)

inst_37479:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3b1d98 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3b1d98; op2val:0x0;
op3val:0xe7c0000; valaddr_reg:x3; val_offset:112437*0 + 3*292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112437*0 + 3*292*FLEN/8, x4, x1, x2)

inst_37480:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3b1d98 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3b1d98; op2val:0x0;
op3val:0xe7e0000; valaddr_reg:x3; val_offset:112440*0 + 3*292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112440*0 + 3*292*FLEN/8, x4, x1, x2)

inst_37481:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3b1d98 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3b1d98; op2val:0x0;
op3val:0xe7f0000; valaddr_reg:x3; val_offset:112443*0 + 3*292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112443*0 + 3*292*FLEN/8, x4, x1, x2)

inst_37482:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3b1d98 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3b1d98; op2val:0x0;
op3val:0xe7f8000; valaddr_reg:x3; val_offset:112446*0 + 3*292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112446*0 + 3*292*FLEN/8, x4, x1, x2)

inst_37483:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3b1d98 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3b1d98; op2val:0x0;
op3val:0xe7fc000; valaddr_reg:x3; val_offset:112449*0 + 3*292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112449*0 + 3*292*FLEN/8, x4, x1, x2)

inst_37484:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3b1d98 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3b1d98; op2val:0x0;
op3val:0xe7fe000; valaddr_reg:x3; val_offset:112452*0 + 3*292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112452*0 + 3*292*FLEN/8, x4, x1, x2)

inst_37485:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3b1d98 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3b1d98; op2val:0x0;
op3val:0xe7ff000; valaddr_reg:x3; val_offset:112455*0 + 3*292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112455*0 + 3*292*FLEN/8, x4, x1, x2)

inst_37486:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3b1d98 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3b1d98; op2val:0x0;
op3val:0xe7ff800; valaddr_reg:x3; val_offset:112458*0 + 3*292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112458*0 + 3*292*FLEN/8, x4, x1, x2)

inst_37487:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3b1d98 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3b1d98; op2val:0x0;
op3val:0xe7ffc00; valaddr_reg:x3; val_offset:112461*0 + 3*292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112461*0 + 3*292*FLEN/8, x4, x1, x2)

inst_37488:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3b1d98 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3b1d98; op2val:0x0;
op3val:0xe7ffe00; valaddr_reg:x3; val_offset:112464*0 + 3*292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112464*0 + 3*292*FLEN/8, x4, x1, x2)

inst_37489:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3b1d98 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3b1d98; op2val:0x0;
op3val:0xe7fff00; valaddr_reg:x3; val_offset:112467*0 + 3*292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112467*0 + 3*292*FLEN/8, x4, x1, x2)

inst_37490:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3b1d98 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3b1d98; op2val:0x0;
op3val:0xe7fff80; valaddr_reg:x3; val_offset:112470*0 + 3*292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112470*0 + 3*292*FLEN/8, x4, x1, x2)

inst_37491:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3b1d98 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3b1d98; op2val:0x0;
op3val:0xe7fffc0; valaddr_reg:x3; val_offset:112473*0 + 3*292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112473*0 + 3*292*FLEN/8, x4, x1, x2)

inst_37492:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3b1d98 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3b1d98; op2val:0x0;
op3val:0xe7fffe0; valaddr_reg:x3; val_offset:112476*0 + 3*292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112476*0 + 3*292*FLEN/8, x4, x1, x2)

inst_37493:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3b1d98 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3b1d98; op2val:0x0;
op3val:0xe7ffff0; valaddr_reg:x3; val_offset:112479*0 + 3*292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112479*0 + 3*292*FLEN/8, x4, x1, x2)

inst_37494:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3b1d98 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3b1d98; op2val:0x0;
op3val:0xe7ffff8; valaddr_reg:x3; val_offset:112482*0 + 3*292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112482*0 + 3*292*FLEN/8, x4, x1, x2)

inst_37495:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3b1d98 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3b1d98; op2val:0x0;
op3val:0xe7ffffc; valaddr_reg:x3; val_offset:112485*0 + 3*292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112485*0 + 3*292*FLEN/8, x4, x1, x2)

inst_37496:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3b1d98 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3b1d98; op2val:0x0;
op3val:0xe7ffffe; valaddr_reg:x3; val_offset:112488*0 + 3*292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112488*0 + 3*292*FLEN/8, x4, x1, x2)

inst_37497:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3b1d98 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3b1d98; op2val:0x0;
op3val:0xe7fffff; valaddr_reg:x3; val_offset:112491*0 + 3*292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112491*0 + 3*292*FLEN/8, x4, x1, x2)

inst_37498:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3b6fa0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3b6fa0; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:112494*0 + 3*292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112494*0 + 3*292*FLEN/8, x4, x1, x2)

inst_37499:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3b6fa0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3b6fa0; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:112497*0 + 3*292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112497*0 + 3*292*FLEN/8, x4, x1, x2)

inst_37500:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3b6fa0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3b6fa0; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:112500*0 + 3*292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112500*0 + 3*292*FLEN/8, x4, x1, x2)

inst_37501:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3b6fa0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3b6fa0; op2val:0x0;
op3val:0x199999; valaddr_reg:x3; val_offset:112503*0 + 3*292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112503*0 + 3*292*FLEN/8, x4, x1, x2)

inst_37502:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3b6fa0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3b6fa0; op2val:0x0;
op3val:0x249249; valaddr_reg:x3; val_offset:112506*0 + 3*292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112506*0 + 3*292*FLEN/8, x4, x1, x2)

inst_37503:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3b6fa0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3b6fa0; op2val:0x0;
op3val:0x333333; valaddr_reg:x3; val_offset:112509*0 + 3*292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112509*0 + 3*292*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2134575805,32,FLEN)
NAN_BOXED(2150353971,32,FLEN)
NAN_BOXED(2977955843,32,FLEN)
NAN_BOXED(2134575805,32,FLEN)
NAN_BOXED(2150353971,32,FLEN)
NAN_BOXED(2977955847,32,FLEN)
NAN_BOXED(2134575805,32,FLEN)
NAN_BOXED(2150353971,32,FLEN)
NAN_BOXED(2977955855,32,FLEN)
NAN_BOXED(2134575805,32,FLEN)
NAN_BOXED(2150353971,32,FLEN)
NAN_BOXED(2977955871,32,FLEN)
NAN_BOXED(2134575805,32,FLEN)
NAN_BOXED(2150353971,32,FLEN)
NAN_BOXED(2977955903,32,FLEN)
NAN_BOXED(2134575805,32,FLEN)
NAN_BOXED(2150353971,32,FLEN)
NAN_BOXED(2977955967,32,FLEN)
NAN_BOXED(2134575805,32,FLEN)
NAN_BOXED(2150353971,32,FLEN)
NAN_BOXED(2977956095,32,FLEN)
NAN_BOXED(2134575805,32,FLEN)
NAN_BOXED(2150353971,32,FLEN)
NAN_BOXED(2977956351,32,FLEN)
NAN_BOXED(2134575805,32,FLEN)
NAN_BOXED(2150353971,32,FLEN)
NAN_BOXED(2977956863,32,FLEN)
NAN_BOXED(2134575805,32,FLEN)
NAN_BOXED(2150353971,32,FLEN)
NAN_BOXED(2977957887,32,FLEN)
NAN_BOXED(2134575805,32,FLEN)
NAN_BOXED(2150353971,32,FLEN)
NAN_BOXED(2977959935,32,FLEN)
NAN_BOXED(2134575805,32,FLEN)
NAN_BOXED(2150353971,32,FLEN)
NAN_BOXED(2977964031,32,FLEN)
NAN_BOXED(2134575805,32,FLEN)
NAN_BOXED(2150353971,32,FLEN)
NAN_BOXED(2977972223,32,FLEN)
NAN_BOXED(2134575805,32,FLEN)
NAN_BOXED(2150353971,32,FLEN)
NAN_BOXED(2977988607,32,FLEN)
NAN_BOXED(2134575805,32,FLEN)
NAN_BOXED(2150353971,32,FLEN)
NAN_BOXED(2978021375,32,FLEN)
NAN_BOXED(2134575805,32,FLEN)
NAN_BOXED(2150353971,32,FLEN)
NAN_BOXED(2978086911,32,FLEN)
NAN_BOXED(2134575805,32,FLEN)
NAN_BOXED(2150353971,32,FLEN)
NAN_BOXED(2978217983,32,FLEN)
NAN_BOXED(2134575805,32,FLEN)
NAN_BOXED(2150353971,32,FLEN)
NAN_BOXED(2978480127,32,FLEN)
NAN_BOXED(2134575805,32,FLEN)
NAN_BOXED(2150353971,32,FLEN)
NAN_BOXED(2979004415,32,FLEN)
NAN_BOXED(2134575805,32,FLEN)
NAN_BOXED(2150353971,32,FLEN)
NAN_BOXED(2980052991,32,FLEN)
NAN_BOXED(2134575805,32,FLEN)
NAN_BOXED(2150353971,32,FLEN)
NAN_BOXED(2982150143,32,FLEN)
NAN_BOXED(2134575805,32,FLEN)
NAN_BOXED(2150353971,32,FLEN)
NAN_BOXED(2982150144,32,FLEN)
NAN_BOXED(2134575805,32,FLEN)
NAN_BOXED(2150353971,32,FLEN)
NAN_BOXED(2984247296,32,FLEN)
NAN_BOXED(2134575805,32,FLEN)
NAN_BOXED(2150353971,32,FLEN)
NAN_BOXED(2985295872,32,FLEN)
NAN_BOXED(2134575805,32,FLEN)
NAN_BOXED(2150353971,32,FLEN)
NAN_BOXED(2985820160,32,FLEN)
NAN_BOXED(2134575805,32,FLEN)
NAN_BOXED(2150353971,32,FLEN)
NAN_BOXED(2986082304,32,FLEN)
NAN_BOXED(2134575805,32,FLEN)
NAN_BOXED(2150353971,32,FLEN)
NAN_BOXED(2986213376,32,FLEN)
NAN_BOXED(2134575805,32,FLEN)
NAN_BOXED(2150353971,32,FLEN)
NAN_BOXED(2986278912,32,FLEN)
NAN_BOXED(2134575805,32,FLEN)
NAN_BOXED(2150353971,32,FLEN)
NAN_BOXED(2986311680,32,FLEN)
NAN_BOXED(2134575805,32,FLEN)
NAN_BOXED(2150353971,32,FLEN)
NAN_BOXED(2986328064,32,FLEN)
NAN_BOXED(2134575805,32,FLEN)
NAN_BOXED(2150353971,32,FLEN)
NAN_BOXED(2986336256,32,FLEN)
NAN_BOXED(2134575805,32,FLEN)
NAN_BOXED(2150353971,32,FLEN)
NAN_BOXED(2986340352,32,FLEN)
NAN_BOXED(2134575805,32,FLEN)
NAN_BOXED(2150353971,32,FLEN)
NAN_BOXED(2986342400,32,FLEN)
NAN_BOXED(2134575805,32,FLEN)
NAN_BOXED(2150353971,32,FLEN)
NAN_BOXED(2986343424,32,FLEN)
NAN_BOXED(2134575805,32,FLEN)
NAN_BOXED(2150353971,32,FLEN)
NAN_BOXED(2986343936,32,FLEN)
NAN_BOXED(2134575805,32,FLEN)
NAN_BOXED(2150353971,32,FLEN)
NAN_BOXED(2986344192,32,FLEN)
NAN_BOXED(2134575805,32,FLEN)
NAN_BOXED(2150353971,32,FLEN)
NAN_BOXED(2986344320,32,FLEN)
NAN_BOXED(2134575805,32,FLEN)
NAN_BOXED(2150353971,32,FLEN)
NAN_BOXED(2986344384,32,FLEN)
NAN_BOXED(2134575805,32,FLEN)
NAN_BOXED(2150353971,32,FLEN)
NAN_BOXED(2986344416,32,FLEN)
NAN_BOXED(2134575805,32,FLEN)
NAN_BOXED(2150353971,32,FLEN)
NAN_BOXED(2986344432,32,FLEN)
NAN_BOXED(2134575805,32,FLEN)
NAN_BOXED(2150353971,32,FLEN)
NAN_BOXED(2986344440,32,FLEN)
NAN_BOXED(2134575805,32,FLEN)
NAN_BOXED(2150353971,32,FLEN)
NAN_BOXED(2986344444,32,FLEN)
NAN_BOXED(2134575805,32,FLEN)
NAN_BOXED(2150353971,32,FLEN)
NAN_BOXED(2986344446,32,FLEN)
NAN_BOXED(2134575805,32,FLEN)
NAN_BOXED(2150353971,32,FLEN)
NAN_BOXED(2986344447,32,FLEN)
NAN_BOXED(2134575805,32,FLEN)
NAN_BOXED(2150353971,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2134575805,32,FLEN)
NAN_BOXED(2150353971,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2134575805,32,FLEN)
NAN_BOXED(2150353971,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
NAN_BOXED(2134575805,32,FLEN)
NAN_BOXED(2150353971,32,FLEN)
NAN_BOXED(3214514585,32,FLEN)
NAN_BOXED(2134575805,32,FLEN)
NAN_BOXED(2150353971,32,FLEN)
NAN_BOXED(3215233609,32,FLEN)
NAN_BOXED(2134575805,32,FLEN)
NAN_BOXED(2150353971,32,FLEN)
NAN_BOXED(3216192307,32,FLEN)
NAN_BOXED(2134575805,32,FLEN)
NAN_BOXED(2150353971,32,FLEN)
NAN_BOXED(3216431981,32,FLEN)
NAN_BOXED(2134575805,32,FLEN)
NAN_BOXED(2150353971,32,FLEN)
NAN_BOXED(3216751547,32,FLEN)
NAN_BOXED(2134575805,32,FLEN)
NAN_BOXED(2150353971,32,FLEN)
NAN_BOXED(3217310788,32,FLEN)
NAN_BOXED(2134575805,32,FLEN)
NAN_BOXED(2150353971,32,FLEN)
NAN_BOXED(3217870028,32,FLEN)
NAN_BOXED(2134575805,32,FLEN)
NAN_BOXED(2150353971,32,FLEN)
NAN_BOXED(3218828726,32,FLEN)
NAN_BOXED(2134575805,32,FLEN)
NAN_BOXED(2150353971,32,FLEN)
NAN_BOXED(3219547750,32,FLEN)
NAN_BOXED(2134575805,32,FLEN)
NAN_BOXED(2150353971,32,FLEN)
NAN_BOXED(3220027099,32,FLEN)
NAN_BOXED(2134575805,32,FLEN)
NAN_BOXED(2150353971,32,FLEN)
NAN_BOXED(3221225464,32,FLEN)
NAN_BOXED(2134575805,32,FLEN)
NAN_BOXED(2150353971,32,FLEN)
NAN_BOXED(3221225468,32,FLEN)
NAN_BOXED(2134575805,32,FLEN)
NAN_BOXED(2150353971,32,FLEN)
NAN_BOXED(3221225470,32,FLEN)
NAN_BOXED(2134580632,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2134580632,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3,32,FLEN)
NAN_BOXED(2134580632,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7,32,FLEN)
NAN_BOXED(2134580632,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1677721,32,FLEN)
NAN_BOXED(2134580632,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2396745,32,FLEN)
NAN_BOXED(2134580632,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3355443,32,FLEN)
NAN_BOXED(2134580632,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3595117,32,FLEN)
NAN_BOXED(2134580632,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3914683,32,FLEN)
NAN_BOXED(2134580632,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4473924,32,FLEN)
NAN_BOXED(2134580632,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5033164,32,FLEN)
NAN_BOXED(2134580632,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5991862,32,FLEN)
NAN_BOXED(2134580632,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(6710886,32,FLEN)
NAN_BOXED(2134580632,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7190235,32,FLEN)
NAN_BOXED(2134580632,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388600,32,FLEN)
NAN_BOXED(2134580632,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388604,32,FLEN)
NAN_BOXED(2134580632,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388606,32,FLEN)
NAN_BOXED(2134580632,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234881024,32,FLEN)
NAN_BOXED(2134580632,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234881025,32,FLEN)
NAN_BOXED(2134580632,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234881027,32,FLEN)
NAN_BOXED(2134580632,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234881031,32,FLEN)
NAN_BOXED(2134580632,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234881039,32,FLEN)
NAN_BOXED(2134580632,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234881055,32,FLEN)
NAN_BOXED(2134580632,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234881087,32,FLEN)
NAN_BOXED(2134580632,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234881151,32,FLEN)
NAN_BOXED(2134580632,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234881279,32,FLEN)
NAN_BOXED(2134580632,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234881535,32,FLEN)
NAN_BOXED(2134580632,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234882047,32,FLEN)
NAN_BOXED(2134580632,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234883071,32,FLEN)
NAN_BOXED(2134580632,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234885119,32,FLEN)
NAN_BOXED(2134580632,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234889215,32,FLEN)
NAN_BOXED(2134580632,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234897407,32,FLEN)
NAN_BOXED(2134580632,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234913791,32,FLEN)
NAN_BOXED(2134580632,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234946559,32,FLEN)
NAN_BOXED(2134580632,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(235012095,32,FLEN)
NAN_BOXED(2134580632,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(235143167,32,FLEN)
NAN_BOXED(2134580632,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(235405311,32,FLEN)
NAN_BOXED(2134580632,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(235929599,32,FLEN)
NAN_BOXED(2134580632,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(236978175,32,FLEN)
NAN_BOXED(2134580632,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(239075327,32,FLEN)
NAN_BOXED(2134580632,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(239075328,32,FLEN)
NAN_BOXED(2134580632,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(241172480,32,FLEN)
NAN_BOXED(2134580632,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(242221056,32,FLEN)
NAN_BOXED(2134580632,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(242745344,32,FLEN)
NAN_BOXED(2134580632,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243007488,32,FLEN)
NAN_BOXED(2134580632,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243138560,32,FLEN)
NAN_BOXED(2134580632,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243204096,32,FLEN)
NAN_BOXED(2134580632,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243236864,32,FLEN)
NAN_BOXED(2134580632,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243253248,32,FLEN)
NAN_BOXED(2134580632,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243261440,32,FLEN)
NAN_BOXED(2134580632,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243265536,32,FLEN)
NAN_BOXED(2134580632,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243267584,32,FLEN)
NAN_BOXED(2134580632,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243268608,32,FLEN)
NAN_BOXED(2134580632,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243269120,32,FLEN)
NAN_BOXED(2134580632,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243269376,32,FLEN)
NAN_BOXED(2134580632,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243269504,32,FLEN)
NAN_BOXED(2134580632,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243269568,32,FLEN)
NAN_BOXED(2134580632,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243269600,32,FLEN)
NAN_BOXED(2134580632,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243269616,32,FLEN)
NAN_BOXED(2134580632,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243269624,32,FLEN)
NAN_BOXED(2134580632,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243269628,32,FLEN)
NAN_BOXED(2134580632,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243269630,32,FLEN)
NAN_BOXED(2134580632,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243269631,32,FLEN)
NAN_BOXED(2134601632,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2134601632,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3,32,FLEN)
NAN_BOXED(2134601632,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7,32,FLEN)
NAN_BOXED(2134601632,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1677721,32,FLEN)
NAN_BOXED(2134601632,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2396745,32,FLEN)
NAN_BOXED(2134601632,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3355443,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
