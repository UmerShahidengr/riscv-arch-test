
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:17:59 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_37632:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3c34fb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2b86cc and fs3 == 1 and fe3 == 0x70 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3c34fb; op2val:0x802b86cc;
op3val:0xb80003ff; valaddr_reg:x3; val_offset:112896*0 + 3*294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112896*0 + 3*294*FLEN/8, x4, x1, x2)

inst_37633:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3c34fb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2b86cc and fs3 == 1 and fe3 == 0x70 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3c34fb; op2val:0x802b86cc;
op3val:0xb80007ff; valaddr_reg:x3; val_offset:112899*0 + 3*294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112899*0 + 3*294*FLEN/8, x4, x1, x2)

inst_37634:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3c34fb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2b86cc and fs3 == 1 and fe3 == 0x70 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3c34fb; op2val:0x802b86cc;
op3val:0xb8000fff; valaddr_reg:x3; val_offset:112902*0 + 3*294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112902*0 + 3*294*FLEN/8, x4, x1, x2)

inst_37635:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3c34fb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2b86cc and fs3 == 1 and fe3 == 0x70 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3c34fb; op2val:0x802b86cc;
op3val:0xb8001fff; valaddr_reg:x3; val_offset:112905*0 + 3*294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112905*0 + 3*294*FLEN/8, x4, x1, x2)

inst_37636:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3c34fb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2b86cc and fs3 == 1 and fe3 == 0x70 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3c34fb; op2val:0x802b86cc;
op3val:0xb8003fff; valaddr_reg:x3; val_offset:112908*0 + 3*294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112908*0 + 3*294*FLEN/8, x4, x1, x2)

inst_37637:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3c34fb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2b86cc and fs3 == 1 and fe3 == 0x70 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3c34fb; op2val:0x802b86cc;
op3val:0xb8007fff; valaddr_reg:x3; val_offset:112911*0 + 3*294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112911*0 + 3*294*FLEN/8, x4, x1, x2)

inst_37638:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3c34fb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2b86cc and fs3 == 1 and fe3 == 0x70 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3c34fb; op2val:0x802b86cc;
op3val:0xb800ffff; valaddr_reg:x3; val_offset:112914*0 + 3*294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112914*0 + 3*294*FLEN/8, x4, x1, x2)

inst_37639:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3c34fb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2b86cc and fs3 == 1 and fe3 == 0x70 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3c34fb; op2val:0x802b86cc;
op3val:0xb801ffff; valaddr_reg:x3; val_offset:112917*0 + 3*294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112917*0 + 3*294*FLEN/8, x4, x1, x2)

inst_37640:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3c34fb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2b86cc and fs3 == 1 and fe3 == 0x70 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3c34fb; op2val:0x802b86cc;
op3val:0xb803ffff; valaddr_reg:x3; val_offset:112920*0 + 3*294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112920*0 + 3*294*FLEN/8, x4, x1, x2)

inst_37641:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3c34fb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2b86cc and fs3 == 1 and fe3 == 0x70 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3c34fb; op2val:0x802b86cc;
op3val:0xb807ffff; valaddr_reg:x3; val_offset:112923*0 + 3*294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112923*0 + 3*294*FLEN/8, x4, x1, x2)

inst_37642:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3c34fb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2b86cc and fs3 == 1 and fe3 == 0x70 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3c34fb; op2val:0x802b86cc;
op3val:0xb80fffff; valaddr_reg:x3; val_offset:112926*0 + 3*294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112926*0 + 3*294*FLEN/8, x4, x1, x2)

inst_37643:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3c34fb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2b86cc and fs3 == 1 and fe3 == 0x70 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3c34fb; op2val:0x802b86cc;
op3val:0xb81fffff; valaddr_reg:x3; val_offset:112929*0 + 3*294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112929*0 + 3*294*FLEN/8, x4, x1, x2)

inst_37644:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3c34fb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2b86cc and fs3 == 1 and fe3 == 0x70 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3c34fb; op2val:0x802b86cc;
op3val:0xb83fffff; valaddr_reg:x3; val_offset:112932*0 + 3*294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112932*0 + 3*294*FLEN/8, x4, x1, x2)

inst_37645:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3c34fb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2b86cc and fs3 == 1 and fe3 == 0x70 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3c34fb; op2val:0x802b86cc;
op3val:0xb8400000; valaddr_reg:x3; val_offset:112935*0 + 3*294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112935*0 + 3*294*FLEN/8, x4, x1, x2)

inst_37646:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3c34fb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2b86cc and fs3 == 1 and fe3 == 0x70 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3c34fb; op2val:0x802b86cc;
op3val:0xb8600000; valaddr_reg:x3; val_offset:112938*0 + 3*294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112938*0 + 3*294*FLEN/8, x4, x1, x2)

inst_37647:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3c34fb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2b86cc and fs3 == 1 and fe3 == 0x70 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3c34fb; op2val:0x802b86cc;
op3val:0xb8700000; valaddr_reg:x3; val_offset:112941*0 + 3*294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112941*0 + 3*294*FLEN/8, x4, x1, x2)

inst_37648:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3c34fb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2b86cc and fs3 == 1 and fe3 == 0x70 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3c34fb; op2val:0x802b86cc;
op3val:0xb8780000; valaddr_reg:x3; val_offset:112944*0 + 3*294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112944*0 + 3*294*FLEN/8, x4, x1, x2)

inst_37649:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3c34fb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2b86cc and fs3 == 1 and fe3 == 0x70 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3c34fb; op2val:0x802b86cc;
op3val:0xb87c0000; valaddr_reg:x3; val_offset:112947*0 + 3*294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112947*0 + 3*294*FLEN/8, x4, x1, x2)

inst_37650:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3c34fb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2b86cc and fs3 == 1 and fe3 == 0x70 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3c34fb; op2val:0x802b86cc;
op3val:0xb87e0000; valaddr_reg:x3; val_offset:112950*0 + 3*294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112950*0 + 3*294*FLEN/8, x4, x1, x2)

inst_37651:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3c34fb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2b86cc and fs3 == 1 and fe3 == 0x70 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3c34fb; op2val:0x802b86cc;
op3val:0xb87f0000; valaddr_reg:x3; val_offset:112953*0 + 3*294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112953*0 + 3*294*FLEN/8, x4, x1, x2)

inst_37652:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3c34fb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2b86cc and fs3 == 1 and fe3 == 0x70 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3c34fb; op2val:0x802b86cc;
op3val:0xb87f8000; valaddr_reg:x3; val_offset:112956*0 + 3*294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112956*0 + 3*294*FLEN/8, x4, x1, x2)

inst_37653:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3c34fb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2b86cc and fs3 == 1 and fe3 == 0x70 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3c34fb; op2val:0x802b86cc;
op3val:0xb87fc000; valaddr_reg:x3; val_offset:112959*0 + 3*294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112959*0 + 3*294*FLEN/8, x4, x1, x2)

inst_37654:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3c34fb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2b86cc and fs3 == 1 and fe3 == 0x70 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3c34fb; op2val:0x802b86cc;
op3val:0xb87fe000; valaddr_reg:x3; val_offset:112962*0 + 3*294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112962*0 + 3*294*FLEN/8, x4, x1, x2)

inst_37655:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3c34fb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2b86cc and fs3 == 1 and fe3 == 0x70 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3c34fb; op2val:0x802b86cc;
op3val:0xb87ff000; valaddr_reg:x3; val_offset:112965*0 + 3*294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112965*0 + 3*294*FLEN/8, x4, x1, x2)

inst_37656:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3c34fb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2b86cc and fs3 == 1 and fe3 == 0x70 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3c34fb; op2val:0x802b86cc;
op3val:0xb87ff800; valaddr_reg:x3; val_offset:112968*0 + 3*294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112968*0 + 3*294*FLEN/8, x4, x1, x2)

inst_37657:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3c34fb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2b86cc and fs3 == 1 and fe3 == 0x70 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3c34fb; op2val:0x802b86cc;
op3val:0xb87ffc00; valaddr_reg:x3; val_offset:112971*0 + 3*294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112971*0 + 3*294*FLEN/8, x4, x1, x2)

inst_37658:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3c34fb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2b86cc and fs3 == 1 and fe3 == 0x70 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3c34fb; op2val:0x802b86cc;
op3val:0xb87ffe00; valaddr_reg:x3; val_offset:112974*0 + 3*294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112974*0 + 3*294*FLEN/8, x4, x1, x2)

inst_37659:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3c34fb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2b86cc and fs3 == 1 and fe3 == 0x70 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3c34fb; op2val:0x802b86cc;
op3val:0xb87fff00; valaddr_reg:x3; val_offset:112977*0 + 3*294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112977*0 + 3*294*FLEN/8, x4, x1, x2)

inst_37660:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3c34fb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2b86cc and fs3 == 1 and fe3 == 0x70 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3c34fb; op2val:0x802b86cc;
op3val:0xb87fff80; valaddr_reg:x3; val_offset:112980*0 + 3*294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112980*0 + 3*294*FLEN/8, x4, x1, x2)

inst_37661:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3c34fb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2b86cc and fs3 == 1 and fe3 == 0x70 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3c34fb; op2val:0x802b86cc;
op3val:0xb87fffc0; valaddr_reg:x3; val_offset:112983*0 + 3*294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112983*0 + 3*294*FLEN/8, x4, x1, x2)

inst_37662:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3c34fb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2b86cc and fs3 == 1 and fe3 == 0x70 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3c34fb; op2val:0x802b86cc;
op3val:0xb87fffe0; valaddr_reg:x3; val_offset:112986*0 + 3*294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112986*0 + 3*294*FLEN/8, x4, x1, x2)

inst_37663:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3c34fb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2b86cc and fs3 == 1 and fe3 == 0x70 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3c34fb; op2val:0x802b86cc;
op3val:0xb87ffff0; valaddr_reg:x3; val_offset:112989*0 + 3*294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112989*0 + 3*294*FLEN/8, x4, x1, x2)

inst_37664:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3c34fb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2b86cc and fs3 == 1 and fe3 == 0x70 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3c34fb; op2val:0x802b86cc;
op3val:0xb87ffff8; valaddr_reg:x3; val_offset:112992*0 + 3*294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112992*0 + 3*294*FLEN/8, x4, x1, x2)

inst_37665:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3c34fb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2b86cc and fs3 == 1 and fe3 == 0x70 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3c34fb; op2val:0x802b86cc;
op3val:0xb87ffffc; valaddr_reg:x3; val_offset:112995*0 + 3*294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112995*0 + 3*294*FLEN/8, x4, x1, x2)

inst_37666:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3c34fb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2b86cc and fs3 == 1 and fe3 == 0x70 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3c34fb; op2val:0x802b86cc;
op3val:0xb87ffffe; valaddr_reg:x3; val_offset:112998*0 + 3*294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112998*0 + 3*294*FLEN/8, x4, x1, x2)

inst_37667:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3c34fb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2b86cc and fs3 == 1 and fe3 == 0x70 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3c34fb; op2val:0x802b86cc;
op3val:0xb87fffff; valaddr_reg:x3; val_offset:113001*0 + 3*294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113001*0 + 3*294*FLEN/8, x4, x1, x2)

inst_37668:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3c34fb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2b86cc and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3c34fb; op2val:0x802b86cc;
op3val:0xbf800001; valaddr_reg:x3; val_offset:113004*0 + 3*294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113004*0 + 3*294*FLEN/8, x4, x1, x2)

inst_37669:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3c34fb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2b86cc and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3c34fb; op2val:0x802b86cc;
op3val:0xbf800003; valaddr_reg:x3; val_offset:113007*0 + 3*294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113007*0 + 3*294*FLEN/8, x4, x1, x2)

inst_37670:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3c34fb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2b86cc and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3c34fb; op2val:0x802b86cc;
op3val:0xbf800007; valaddr_reg:x3; val_offset:113010*0 + 3*294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113010*0 + 3*294*FLEN/8, x4, x1, x2)

inst_37671:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3c34fb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2b86cc and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3c34fb; op2val:0x802b86cc;
op3val:0xbf999999; valaddr_reg:x3; val_offset:113013*0 + 3*294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113013*0 + 3*294*FLEN/8, x4, x1, x2)

inst_37672:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3c34fb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2b86cc and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3c34fb; op2val:0x802b86cc;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:113016*0 + 3*294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113016*0 + 3*294*FLEN/8, x4, x1, x2)

inst_37673:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3c34fb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2b86cc and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3c34fb; op2val:0x802b86cc;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:113019*0 + 3*294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113019*0 + 3*294*FLEN/8, x4, x1, x2)

inst_37674:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3c34fb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2b86cc and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3c34fb; op2val:0x802b86cc;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:113022*0 + 3*294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113022*0 + 3*294*FLEN/8, x4, x1, x2)

inst_37675:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3c34fb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2b86cc and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3c34fb; op2val:0x802b86cc;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:113025*0 + 3*294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113025*0 + 3*294*FLEN/8, x4, x1, x2)

inst_37676:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3c34fb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2b86cc and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3c34fb; op2val:0x802b86cc;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:113028*0 + 3*294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113028*0 + 3*294*FLEN/8, x4, x1, x2)

inst_37677:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3c34fb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2b86cc and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3c34fb; op2val:0x802b86cc;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:113031*0 + 3*294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113031*0 + 3*294*FLEN/8, x4, x1, x2)

inst_37678:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3c34fb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2b86cc and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3c34fb; op2val:0x802b86cc;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:113034*0 + 3*294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113034*0 + 3*294*FLEN/8, x4, x1, x2)

inst_37679:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3c34fb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2b86cc and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3c34fb; op2val:0x802b86cc;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:113037*0 + 3*294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113037*0 + 3*294*FLEN/8, x4, x1, x2)

inst_37680:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3c34fb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2b86cc and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3c34fb; op2val:0x802b86cc;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:113040*0 + 3*294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113040*0 + 3*294*FLEN/8, x4, x1, x2)

inst_37681:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3c34fb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2b86cc and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3c34fb; op2val:0x802b86cc;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:113043*0 + 3*294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113043*0 + 3*294*FLEN/8, x4, x1, x2)

inst_37682:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3c34fb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2b86cc and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3c34fb; op2val:0x802b86cc;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:113046*0 + 3*294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113046*0 + 3*294*FLEN/8, x4, x1, x2)

inst_37683:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3c34fb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2b86cc and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3c34fb; op2val:0x802b86cc;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:113049*0 + 3*294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113049*0 + 3*294*FLEN/8, x4, x1, x2)

inst_37684:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3c8709 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3c8709; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:113052*0 + 3*294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113052*0 + 3*294*FLEN/8, x4, x1, x2)

inst_37685:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3c8709 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3c8709; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:113055*0 + 3*294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113055*0 + 3*294*FLEN/8, x4, x1, x2)

inst_37686:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3c8709 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3c8709; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:113058*0 + 3*294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113058*0 + 3*294*FLEN/8, x4, x1, x2)

inst_37687:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3c8709 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3c8709; op2val:0x0;
op3val:0x199999; valaddr_reg:x3; val_offset:113061*0 + 3*294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113061*0 + 3*294*FLEN/8, x4, x1, x2)

inst_37688:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3c8709 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3c8709; op2val:0x0;
op3val:0x249249; valaddr_reg:x3; val_offset:113064*0 + 3*294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113064*0 + 3*294*FLEN/8, x4, x1, x2)

inst_37689:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3c8709 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3c8709; op2val:0x0;
op3val:0x333333; valaddr_reg:x3; val_offset:113067*0 + 3*294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113067*0 + 3*294*FLEN/8, x4, x1, x2)

inst_37690:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3c8709 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3c8709; op2val:0x0;
op3val:0x36db6d; valaddr_reg:x3; val_offset:113070*0 + 3*294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113070*0 + 3*294*FLEN/8, x4, x1, x2)

inst_37691:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3c8709 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3c8709; op2val:0x0;
op3val:0x3bbbbb; valaddr_reg:x3; val_offset:113073*0 + 3*294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113073*0 + 3*294*FLEN/8, x4, x1, x2)

inst_37692:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3c8709 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3c8709; op2val:0x0;
op3val:0x444444; valaddr_reg:x3; val_offset:113076*0 + 3*294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113076*0 + 3*294*FLEN/8, x4, x1, x2)

inst_37693:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3c8709 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3c8709; op2val:0x0;
op3val:0x4ccccc; valaddr_reg:x3; val_offset:113079*0 + 3*294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113079*0 + 3*294*FLEN/8, x4, x1, x2)

inst_37694:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3c8709 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3c8709; op2val:0x0;
op3val:0x5b6db6; valaddr_reg:x3; val_offset:113082*0 + 3*294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113082*0 + 3*294*FLEN/8, x4, x1, x2)

inst_37695:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3c8709 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3c8709; op2val:0x0;
op3val:0x666666; valaddr_reg:x3; val_offset:113085*0 + 3*294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113085*0 + 3*294*FLEN/8, x4, x1, x2)

inst_37696:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3c8709 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3c8709; op2val:0x0;
op3val:0x6db6db; valaddr_reg:x3; val_offset:113088*0 + 3*294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113088*0 + 3*294*FLEN/8, x4, x1, x2)

inst_37697:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3c8709 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3c8709; op2val:0x0;
op3val:0x7ffff8; valaddr_reg:x3; val_offset:113091*0 + 3*294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113091*0 + 3*294*FLEN/8, x4, x1, x2)

inst_37698:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3c8709 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3c8709; op2val:0x0;
op3val:0x7ffffc; valaddr_reg:x3; val_offset:113094*0 + 3*294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113094*0 + 3*294*FLEN/8, x4, x1, x2)

inst_37699:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3c8709 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3c8709; op2val:0x0;
op3val:0x7ffffe; valaddr_reg:x3; val_offset:113097*0 + 3*294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113097*0 + 3*294*FLEN/8, x4, x1, x2)

inst_37700:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3c8709 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x47 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3c8709; op2val:0x0;
op3val:0x23800000; valaddr_reg:x3; val_offset:113100*0 + 3*294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113100*0 + 3*294*FLEN/8, x4, x1, x2)

inst_37701:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3c8709 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x47 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3c8709; op2val:0x0;
op3val:0x23800001; valaddr_reg:x3; val_offset:113103*0 + 3*294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113103*0 + 3*294*FLEN/8, x4, x1, x2)

inst_37702:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3c8709 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x47 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3c8709; op2val:0x0;
op3val:0x23800003; valaddr_reg:x3; val_offset:113106*0 + 3*294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113106*0 + 3*294*FLEN/8, x4, x1, x2)

inst_37703:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3c8709 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x47 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3c8709; op2val:0x0;
op3val:0x23800007; valaddr_reg:x3; val_offset:113109*0 + 3*294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113109*0 + 3*294*FLEN/8, x4, x1, x2)

inst_37704:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3c8709 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x47 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3c8709; op2val:0x0;
op3val:0x2380000f; valaddr_reg:x3; val_offset:113112*0 + 3*294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113112*0 + 3*294*FLEN/8, x4, x1, x2)

inst_37705:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3c8709 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x47 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3c8709; op2val:0x0;
op3val:0x2380001f; valaddr_reg:x3; val_offset:113115*0 + 3*294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113115*0 + 3*294*FLEN/8, x4, x1, x2)

inst_37706:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3c8709 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x47 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3c8709; op2val:0x0;
op3val:0x2380003f; valaddr_reg:x3; val_offset:113118*0 + 3*294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113118*0 + 3*294*FLEN/8, x4, x1, x2)

inst_37707:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3c8709 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x47 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3c8709; op2val:0x0;
op3val:0x2380007f; valaddr_reg:x3; val_offset:113121*0 + 3*294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113121*0 + 3*294*FLEN/8, x4, x1, x2)

inst_37708:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3c8709 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x47 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3c8709; op2val:0x0;
op3val:0x238000ff; valaddr_reg:x3; val_offset:113124*0 + 3*294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113124*0 + 3*294*FLEN/8, x4, x1, x2)

inst_37709:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3c8709 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x47 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3c8709; op2val:0x0;
op3val:0x238001ff; valaddr_reg:x3; val_offset:113127*0 + 3*294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113127*0 + 3*294*FLEN/8, x4, x1, x2)

inst_37710:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3c8709 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x47 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3c8709; op2val:0x0;
op3val:0x238003ff; valaddr_reg:x3; val_offset:113130*0 + 3*294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113130*0 + 3*294*FLEN/8, x4, x1, x2)

inst_37711:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3c8709 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x47 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3c8709; op2val:0x0;
op3val:0x238007ff; valaddr_reg:x3; val_offset:113133*0 + 3*294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113133*0 + 3*294*FLEN/8, x4, x1, x2)

inst_37712:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3c8709 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x47 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3c8709; op2val:0x0;
op3val:0x23800fff; valaddr_reg:x3; val_offset:113136*0 + 3*294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113136*0 + 3*294*FLEN/8, x4, x1, x2)

inst_37713:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3c8709 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x47 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3c8709; op2val:0x0;
op3val:0x23801fff; valaddr_reg:x3; val_offset:113139*0 + 3*294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113139*0 + 3*294*FLEN/8, x4, x1, x2)

inst_37714:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3c8709 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x47 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3c8709; op2val:0x0;
op3val:0x23803fff; valaddr_reg:x3; val_offset:113142*0 + 3*294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113142*0 + 3*294*FLEN/8, x4, x1, x2)

inst_37715:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3c8709 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x47 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3c8709; op2val:0x0;
op3val:0x23807fff; valaddr_reg:x3; val_offset:113145*0 + 3*294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113145*0 + 3*294*FLEN/8, x4, x1, x2)

inst_37716:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3c8709 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x47 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3c8709; op2val:0x0;
op3val:0x2380ffff; valaddr_reg:x3; val_offset:113148*0 + 3*294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113148*0 + 3*294*FLEN/8, x4, x1, x2)

inst_37717:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3c8709 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x47 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3c8709; op2val:0x0;
op3val:0x2381ffff; valaddr_reg:x3; val_offset:113151*0 + 3*294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113151*0 + 3*294*FLEN/8, x4, x1, x2)

inst_37718:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3c8709 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x47 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3c8709; op2val:0x0;
op3val:0x2383ffff; valaddr_reg:x3; val_offset:113154*0 + 3*294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113154*0 + 3*294*FLEN/8, x4, x1, x2)

inst_37719:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3c8709 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x47 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3c8709; op2val:0x0;
op3val:0x2387ffff; valaddr_reg:x3; val_offset:113157*0 + 3*294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113157*0 + 3*294*FLEN/8, x4, x1, x2)

inst_37720:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3c8709 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x47 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3c8709; op2val:0x0;
op3val:0x238fffff; valaddr_reg:x3; val_offset:113160*0 + 3*294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113160*0 + 3*294*FLEN/8, x4, x1, x2)

inst_37721:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3c8709 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x47 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3c8709; op2val:0x0;
op3val:0x239fffff; valaddr_reg:x3; val_offset:113163*0 + 3*294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113163*0 + 3*294*FLEN/8, x4, x1, x2)

inst_37722:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3c8709 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x47 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3c8709; op2val:0x0;
op3val:0x23bfffff; valaddr_reg:x3; val_offset:113166*0 + 3*294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113166*0 + 3*294*FLEN/8, x4, x1, x2)

inst_37723:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3c8709 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x47 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3c8709; op2val:0x0;
op3val:0x23c00000; valaddr_reg:x3; val_offset:113169*0 + 3*294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113169*0 + 3*294*FLEN/8, x4, x1, x2)

inst_37724:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3c8709 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x47 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3c8709; op2val:0x0;
op3val:0x23e00000; valaddr_reg:x3; val_offset:113172*0 + 3*294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113172*0 + 3*294*FLEN/8, x4, x1, x2)

inst_37725:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3c8709 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x47 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3c8709; op2val:0x0;
op3val:0x23f00000; valaddr_reg:x3; val_offset:113175*0 + 3*294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113175*0 + 3*294*FLEN/8, x4, x1, x2)

inst_37726:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3c8709 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x47 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3c8709; op2val:0x0;
op3val:0x23f80000; valaddr_reg:x3; val_offset:113178*0 + 3*294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113178*0 + 3*294*FLEN/8, x4, x1, x2)

inst_37727:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3c8709 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x47 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3c8709; op2val:0x0;
op3val:0x23fc0000; valaddr_reg:x3; val_offset:113181*0 + 3*294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113181*0 + 3*294*FLEN/8, x4, x1, x2)

inst_37728:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3c8709 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x47 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3c8709; op2val:0x0;
op3val:0x23fe0000; valaddr_reg:x3; val_offset:113184*0 + 3*294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113184*0 + 3*294*FLEN/8, x4, x1, x2)

inst_37729:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3c8709 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x47 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3c8709; op2val:0x0;
op3val:0x23ff0000; valaddr_reg:x3; val_offset:113187*0 + 3*294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113187*0 + 3*294*FLEN/8, x4, x1, x2)

inst_37730:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3c8709 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x47 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3c8709; op2val:0x0;
op3val:0x23ff8000; valaddr_reg:x3; val_offset:113190*0 + 3*294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113190*0 + 3*294*FLEN/8, x4, x1, x2)

inst_37731:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3c8709 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x47 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3c8709; op2val:0x0;
op3val:0x23ffc000; valaddr_reg:x3; val_offset:113193*0 + 3*294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113193*0 + 3*294*FLEN/8, x4, x1, x2)

inst_37732:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3c8709 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x47 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3c8709; op2val:0x0;
op3val:0x23ffe000; valaddr_reg:x3; val_offset:113196*0 + 3*294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113196*0 + 3*294*FLEN/8, x4, x1, x2)

inst_37733:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3c8709 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x47 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3c8709; op2val:0x0;
op3val:0x23fff000; valaddr_reg:x3; val_offset:113199*0 + 3*294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113199*0 + 3*294*FLEN/8, x4, x1, x2)

inst_37734:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3c8709 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x47 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3c8709; op2val:0x0;
op3val:0x23fff800; valaddr_reg:x3; val_offset:113202*0 + 3*294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113202*0 + 3*294*FLEN/8, x4, x1, x2)

inst_37735:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3c8709 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x47 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3c8709; op2val:0x0;
op3val:0x23fffc00; valaddr_reg:x3; val_offset:113205*0 + 3*294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113205*0 + 3*294*FLEN/8, x4, x1, x2)

inst_37736:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3c8709 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x47 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3c8709; op2val:0x0;
op3val:0x23fffe00; valaddr_reg:x3; val_offset:113208*0 + 3*294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113208*0 + 3*294*FLEN/8, x4, x1, x2)

inst_37737:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3c8709 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x47 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3c8709; op2val:0x0;
op3val:0x23ffff00; valaddr_reg:x3; val_offset:113211*0 + 3*294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113211*0 + 3*294*FLEN/8, x4, x1, x2)

inst_37738:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3c8709 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x47 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3c8709; op2val:0x0;
op3val:0x23ffff80; valaddr_reg:x3; val_offset:113214*0 + 3*294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113214*0 + 3*294*FLEN/8, x4, x1, x2)

inst_37739:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3c8709 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x47 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3c8709; op2val:0x0;
op3val:0x23ffffc0; valaddr_reg:x3; val_offset:113217*0 + 3*294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113217*0 + 3*294*FLEN/8, x4, x1, x2)

inst_37740:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3c8709 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x47 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3c8709; op2val:0x0;
op3val:0x23ffffe0; valaddr_reg:x3; val_offset:113220*0 + 3*294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113220*0 + 3*294*FLEN/8, x4, x1, x2)

inst_37741:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3c8709 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x47 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3c8709; op2val:0x0;
op3val:0x23fffff0; valaddr_reg:x3; val_offset:113223*0 + 3*294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113223*0 + 3*294*FLEN/8, x4, x1, x2)

inst_37742:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3c8709 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x47 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3c8709; op2val:0x0;
op3val:0x23fffff8; valaddr_reg:x3; val_offset:113226*0 + 3*294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113226*0 + 3*294*FLEN/8, x4, x1, x2)

inst_37743:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3c8709 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x47 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3c8709; op2val:0x0;
op3val:0x23fffffc; valaddr_reg:x3; val_offset:113229*0 + 3*294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113229*0 + 3*294*FLEN/8, x4, x1, x2)

inst_37744:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3c8709 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x47 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3c8709; op2val:0x0;
op3val:0x23fffffe; valaddr_reg:x3; val_offset:113232*0 + 3*294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113232*0 + 3*294*FLEN/8, x4, x1, x2)

inst_37745:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3c8709 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x47 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3c8709; op2val:0x0;
op3val:0x23ffffff; valaddr_reg:x3; val_offset:113235*0 + 3*294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113235*0 + 3*294*FLEN/8, x4, x1, x2)

inst_37746:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3ca1e4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2b6daa and fs3 == 0 and fe3 == 0x53 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3ca1e4; op2val:0x2b6daa;
op3val:0x29800000; valaddr_reg:x3; val_offset:113238*0 + 3*294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113238*0 + 3*294*FLEN/8, x4, x1, x2)

inst_37747:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3ca1e4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2b6daa and fs3 == 0 and fe3 == 0x53 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3ca1e4; op2val:0x2b6daa;
op3val:0x29800001; valaddr_reg:x3; val_offset:113241*0 + 3*294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113241*0 + 3*294*FLEN/8, x4, x1, x2)

inst_37748:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3ca1e4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2b6daa and fs3 == 0 and fe3 == 0x53 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3ca1e4; op2val:0x2b6daa;
op3val:0x29800003; valaddr_reg:x3; val_offset:113244*0 + 3*294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113244*0 + 3*294*FLEN/8, x4, x1, x2)

inst_37749:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3ca1e4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2b6daa and fs3 == 0 and fe3 == 0x53 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3ca1e4; op2val:0x2b6daa;
op3val:0x29800007; valaddr_reg:x3; val_offset:113247*0 + 3*294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113247*0 + 3*294*FLEN/8, x4, x1, x2)

inst_37750:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3ca1e4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2b6daa and fs3 == 0 and fe3 == 0x53 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3ca1e4; op2val:0x2b6daa;
op3val:0x2980000f; valaddr_reg:x3; val_offset:113250*0 + 3*294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113250*0 + 3*294*FLEN/8, x4, x1, x2)

inst_37751:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3ca1e4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2b6daa and fs3 == 0 and fe3 == 0x53 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3ca1e4; op2val:0x2b6daa;
op3val:0x2980001f; valaddr_reg:x3; val_offset:113253*0 + 3*294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113253*0 + 3*294*FLEN/8, x4, x1, x2)

inst_37752:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3ca1e4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2b6daa and fs3 == 0 and fe3 == 0x53 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3ca1e4; op2val:0x2b6daa;
op3val:0x2980003f; valaddr_reg:x3; val_offset:113256*0 + 3*294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113256*0 + 3*294*FLEN/8, x4, x1, x2)

inst_37753:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3ca1e4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2b6daa and fs3 == 0 and fe3 == 0x53 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3ca1e4; op2val:0x2b6daa;
op3val:0x2980007f; valaddr_reg:x3; val_offset:113259*0 + 3*294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113259*0 + 3*294*FLEN/8, x4, x1, x2)

inst_37754:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3ca1e4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2b6daa and fs3 == 0 and fe3 == 0x53 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3ca1e4; op2val:0x2b6daa;
op3val:0x298000ff; valaddr_reg:x3; val_offset:113262*0 + 3*294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113262*0 + 3*294*FLEN/8, x4, x1, x2)

inst_37755:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3ca1e4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2b6daa and fs3 == 0 and fe3 == 0x53 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3ca1e4; op2val:0x2b6daa;
op3val:0x298001ff; valaddr_reg:x3; val_offset:113265*0 + 3*294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113265*0 + 3*294*FLEN/8, x4, x1, x2)

inst_37756:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3ca1e4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2b6daa and fs3 == 0 and fe3 == 0x53 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3ca1e4; op2val:0x2b6daa;
op3val:0x298003ff; valaddr_reg:x3; val_offset:113268*0 + 3*294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113268*0 + 3*294*FLEN/8, x4, x1, x2)

inst_37757:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3ca1e4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2b6daa and fs3 == 0 and fe3 == 0x53 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3ca1e4; op2val:0x2b6daa;
op3val:0x298007ff; valaddr_reg:x3; val_offset:113271*0 + 3*294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113271*0 + 3*294*FLEN/8, x4, x1, x2)

inst_37758:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3ca1e4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2b6daa and fs3 == 0 and fe3 == 0x53 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3ca1e4; op2val:0x2b6daa;
op3val:0x29800fff; valaddr_reg:x3; val_offset:113274*0 + 3*294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113274*0 + 3*294*FLEN/8, x4, x1, x2)

inst_37759:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3ca1e4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2b6daa and fs3 == 0 and fe3 == 0x53 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3ca1e4; op2val:0x2b6daa;
op3val:0x29801fff; valaddr_reg:x3; val_offset:113277*0 + 3*294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113277*0 + 3*294*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2134652155,32,FLEN)
NAN_BOXED(2150336204,32,FLEN)
NAN_BOXED(3087008767,32,FLEN)
NAN_BOXED(2134652155,32,FLEN)
NAN_BOXED(2150336204,32,FLEN)
NAN_BOXED(3087009791,32,FLEN)
NAN_BOXED(2134652155,32,FLEN)
NAN_BOXED(2150336204,32,FLEN)
NAN_BOXED(3087011839,32,FLEN)
NAN_BOXED(2134652155,32,FLEN)
NAN_BOXED(2150336204,32,FLEN)
NAN_BOXED(3087015935,32,FLEN)
NAN_BOXED(2134652155,32,FLEN)
NAN_BOXED(2150336204,32,FLEN)
NAN_BOXED(3087024127,32,FLEN)
NAN_BOXED(2134652155,32,FLEN)
NAN_BOXED(2150336204,32,FLEN)
NAN_BOXED(3087040511,32,FLEN)
NAN_BOXED(2134652155,32,FLEN)
NAN_BOXED(2150336204,32,FLEN)
NAN_BOXED(3087073279,32,FLEN)
NAN_BOXED(2134652155,32,FLEN)
NAN_BOXED(2150336204,32,FLEN)
NAN_BOXED(3087138815,32,FLEN)
NAN_BOXED(2134652155,32,FLEN)
NAN_BOXED(2150336204,32,FLEN)
NAN_BOXED(3087269887,32,FLEN)
NAN_BOXED(2134652155,32,FLEN)
NAN_BOXED(2150336204,32,FLEN)
NAN_BOXED(3087532031,32,FLEN)
NAN_BOXED(2134652155,32,FLEN)
NAN_BOXED(2150336204,32,FLEN)
NAN_BOXED(3088056319,32,FLEN)
NAN_BOXED(2134652155,32,FLEN)
NAN_BOXED(2150336204,32,FLEN)
NAN_BOXED(3089104895,32,FLEN)
NAN_BOXED(2134652155,32,FLEN)
NAN_BOXED(2150336204,32,FLEN)
NAN_BOXED(3091202047,32,FLEN)
NAN_BOXED(2134652155,32,FLEN)
NAN_BOXED(2150336204,32,FLEN)
NAN_BOXED(3091202048,32,FLEN)
NAN_BOXED(2134652155,32,FLEN)
NAN_BOXED(2150336204,32,FLEN)
NAN_BOXED(3093299200,32,FLEN)
NAN_BOXED(2134652155,32,FLEN)
NAN_BOXED(2150336204,32,FLEN)
NAN_BOXED(3094347776,32,FLEN)
NAN_BOXED(2134652155,32,FLEN)
NAN_BOXED(2150336204,32,FLEN)
NAN_BOXED(3094872064,32,FLEN)
NAN_BOXED(2134652155,32,FLEN)
NAN_BOXED(2150336204,32,FLEN)
NAN_BOXED(3095134208,32,FLEN)
NAN_BOXED(2134652155,32,FLEN)
NAN_BOXED(2150336204,32,FLEN)
NAN_BOXED(3095265280,32,FLEN)
NAN_BOXED(2134652155,32,FLEN)
NAN_BOXED(2150336204,32,FLEN)
NAN_BOXED(3095330816,32,FLEN)
NAN_BOXED(2134652155,32,FLEN)
NAN_BOXED(2150336204,32,FLEN)
NAN_BOXED(3095363584,32,FLEN)
NAN_BOXED(2134652155,32,FLEN)
NAN_BOXED(2150336204,32,FLEN)
NAN_BOXED(3095379968,32,FLEN)
NAN_BOXED(2134652155,32,FLEN)
NAN_BOXED(2150336204,32,FLEN)
NAN_BOXED(3095388160,32,FLEN)
NAN_BOXED(2134652155,32,FLEN)
NAN_BOXED(2150336204,32,FLEN)
NAN_BOXED(3095392256,32,FLEN)
NAN_BOXED(2134652155,32,FLEN)
NAN_BOXED(2150336204,32,FLEN)
NAN_BOXED(3095394304,32,FLEN)
NAN_BOXED(2134652155,32,FLEN)
NAN_BOXED(2150336204,32,FLEN)
NAN_BOXED(3095395328,32,FLEN)
NAN_BOXED(2134652155,32,FLEN)
NAN_BOXED(2150336204,32,FLEN)
NAN_BOXED(3095395840,32,FLEN)
NAN_BOXED(2134652155,32,FLEN)
NAN_BOXED(2150336204,32,FLEN)
NAN_BOXED(3095396096,32,FLEN)
NAN_BOXED(2134652155,32,FLEN)
NAN_BOXED(2150336204,32,FLEN)
NAN_BOXED(3095396224,32,FLEN)
NAN_BOXED(2134652155,32,FLEN)
NAN_BOXED(2150336204,32,FLEN)
NAN_BOXED(3095396288,32,FLEN)
NAN_BOXED(2134652155,32,FLEN)
NAN_BOXED(2150336204,32,FLEN)
NAN_BOXED(3095396320,32,FLEN)
NAN_BOXED(2134652155,32,FLEN)
NAN_BOXED(2150336204,32,FLEN)
NAN_BOXED(3095396336,32,FLEN)
NAN_BOXED(2134652155,32,FLEN)
NAN_BOXED(2150336204,32,FLEN)
NAN_BOXED(3095396344,32,FLEN)
NAN_BOXED(2134652155,32,FLEN)
NAN_BOXED(2150336204,32,FLEN)
NAN_BOXED(3095396348,32,FLEN)
NAN_BOXED(2134652155,32,FLEN)
NAN_BOXED(2150336204,32,FLEN)
NAN_BOXED(3095396350,32,FLEN)
NAN_BOXED(2134652155,32,FLEN)
NAN_BOXED(2150336204,32,FLEN)
NAN_BOXED(3095396351,32,FLEN)
NAN_BOXED(2134652155,32,FLEN)
NAN_BOXED(2150336204,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2134652155,32,FLEN)
NAN_BOXED(2150336204,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2134652155,32,FLEN)
NAN_BOXED(2150336204,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
NAN_BOXED(2134652155,32,FLEN)
NAN_BOXED(2150336204,32,FLEN)
NAN_BOXED(3214514585,32,FLEN)
NAN_BOXED(2134652155,32,FLEN)
NAN_BOXED(2150336204,32,FLEN)
NAN_BOXED(3215233609,32,FLEN)
NAN_BOXED(2134652155,32,FLEN)
NAN_BOXED(2150336204,32,FLEN)
NAN_BOXED(3216192307,32,FLEN)
NAN_BOXED(2134652155,32,FLEN)
NAN_BOXED(2150336204,32,FLEN)
NAN_BOXED(3216431981,32,FLEN)
NAN_BOXED(2134652155,32,FLEN)
NAN_BOXED(2150336204,32,FLEN)
NAN_BOXED(3216751547,32,FLEN)
NAN_BOXED(2134652155,32,FLEN)
NAN_BOXED(2150336204,32,FLEN)
NAN_BOXED(3217310788,32,FLEN)
NAN_BOXED(2134652155,32,FLEN)
NAN_BOXED(2150336204,32,FLEN)
NAN_BOXED(3217870028,32,FLEN)
NAN_BOXED(2134652155,32,FLEN)
NAN_BOXED(2150336204,32,FLEN)
NAN_BOXED(3218828726,32,FLEN)
NAN_BOXED(2134652155,32,FLEN)
NAN_BOXED(2150336204,32,FLEN)
NAN_BOXED(3219547750,32,FLEN)
NAN_BOXED(2134652155,32,FLEN)
NAN_BOXED(2150336204,32,FLEN)
NAN_BOXED(3220027099,32,FLEN)
NAN_BOXED(2134652155,32,FLEN)
NAN_BOXED(2150336204,32,FLEN)
NAN_BOXED(3221225464,32,FLEN)
NAN_BOXED(2134652155,32,FLEN)
NAN_BOXED(2150336204,32,FLEN)
NAN_BOXED(3221225468,32,FLEN)
NAN_BOXED(2134652155,32,FLEN)
NAN_BOXED(2150336204,32,FLEN)
NAN_BOXED(3221225470,32,FLEN)
NAN_BOXED(2134673161,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2134673161,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3,32,FLEN)
NAN_BOXED(2134673161,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7,32,FLEN)
NAN_BOXED(2134673161,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1677721,32,FLEN)
NAN_BOXED(2134673161,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2396745,32,FLEN)
NAN_BOXED(2134673161,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3355443,32,FLEN)
NAN_BOXED(2134673161,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3595117,32,FLEN)
NAN_BOXED(2134673161,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3914683,32,FLEN)
NAN_BOXED(2134673161,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4473924,32,FLEN)
NAN_BOXED(2134673161,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5033164,32,FLEN)
NAN_BOXED(2134673161,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5991862,32,FLEN)
NAN_BOXED(2134673161,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(6710886,32,FLEN)
NAN_BOXED(2134673161,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7190235,32,FLEN)
NAN_BOXED(2134673161,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388600,32,FLEN)
NAN_BOXED(2134673161,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388604,32,FLEN)
NAN_BOXED(2134673161,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388606,32,FLEN)
NAN_BOXED(2134673161,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(595591168,32,FLEN)
NAN_BOXED(2134673161,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(595591169,32,FLEN)
NAN_BOXED(2134673161,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(595591171,32,FLEN)
NAN_BOXED(2134673161,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(595591175,32,FLEN)
NAN_BOXED(2134673161,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(595591183,32,FLEN)
NAN_BOXED(2134673161,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(595591199,32,FLEN)
NAN_BOXED(2134673161,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(595591231,32,FLEN)
NAN_BOXED(2134673161,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(595591295,32,FLEN)
NAN_BOXED(2134673161,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(595591423,32,FLEN)
NAN_BOXED(2134673161,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(595591679,32,FLEN)
NAN_BOXED(2134673161,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(595592191,32,FLEN)
NAN_BOXED(2134673161,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(595593215,32,FLEN)
NAN_BOXED(2134673161,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(595595263,32,FLEN)
NAN_BOXED(2134673161,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(595599359,32,FLEN)
NAN_BOXED(2134673161,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(595607551,32,FLEN)
NAN_BOXED(2134673161,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(595623935,32,FLEN)
NAN_BOXED(2134673161,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(595656703,32,FLEN)
NAN_BOXED(2134673161,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(595722239,32,FLEN)
NAN_BOXED(2134673161,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(595853311,32,FLEN)
NAN_BOXED(2134673161,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(596115455,32,FLEN)
NAN_BOXED(2134673161,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(596639743,32,FLEN)
NAN_BOXED(2134673161,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(597688319,32,FLEN)
NAN_BOXED(2134673161,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(599785471,32,FLEN)
NAN_BOXED(2134673161,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(599785472,32,FLEN)
NAN_BOXED(2134673161,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(601882624,32,FLEN)
NAN_BOXED(2134673161,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(602931200,32,FLEN)
NAN_BOXED(2134673161,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(603455488,32,FLEN)
NAN_BOXED(2134673161,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(603717632,32,FLEN)
NAN_BOXED(2134673161,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(603848704,32,FLEN)
NAN_BOXED(2134673161,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(603914240,32,FLEN)
NAN_BOXED(2134673161,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(603947008,32,FLEN)
NAN_BOXED(2134673161,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(603963392,32,FLEN)
NAN_BOXED(2134673161,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(603971584,32,FLEN)
NAN_BOXED(2134673161,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(603975680,32,FLEN)
NAN_BOXED(2134673161,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(603977728,32,FLEN)
NAN_BOXED(2134673161,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(603978752,32,FLEN)
NAN_BOXED(2134673161,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(603979264,32,FLEN)
NAN_BOXED(2134673161,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(603979520,32,FLEN)
NAN_BOXED(2134673161,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(603979648,32,FLEN)
NAN_BOXED(2134673161,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(603979712,32,FLEN)
NAN_BOXED(2134673161,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(603979744,32,FLEN)
NAN_BOXED(2134673161,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(603979760,32,FLEN)
NAN_BOXED(2134673161,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(603979768,32,FLEN)
NAN_BOXED(2134673161,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(603979772,32,FLEN)
NAN_BOXED(2134673161,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(603979774,32,FLEN)
NAN_BOXED(2134673161,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(603979775,32,FLEN)
NAN_BOXED(2134680036,32,FLEN)
NAN_BOXED(2846122,32,FLEN)
NAN_BOXED(696254464,32,FLEN)
NAN_BOXED(2134680036,32,FLEN)
NAN_BOXED(2846122,32,FLEN)
NAN_BOXED(696254465,32,FLEN)
NAN_BOXED(2134680036,32,FLEN)
NAN_BOXED(2846122,32,FLEN)
NAN_BOXED(696254467,32,FLEN)
NAN_BOXED(2134680036,32,FLEN)
NAN_BOXED(2846122,32,FLEN)
NAN_BOXED(696254471,32,FLEN)
NAN_BOXED(2134680036,32,FLEN)
NAN_BOXED(2846122,32,FLEN)
NAN_BOXED(696254479,32,FLEN)
NAN_BOXED(2134680036,32,FLEN)
NAN_BOXED(2846122,32,FLEN)
NAN_BOXED(696254495,32,FLEN)
NAN_BOXED(2134680036,32,FLEN)
NAN_BOXED(2846122,32,FLEN)
NAN_BOXED(696254527,32,FLEN)
NAN_BOXED(2134680036,32,FLEN)
NAN_BOXED(2846122,32,FLEN)
NAN_BOXED(696254591,32,FLEN)
NAN_BOXED(2134680036,32,FLEN)
NAN_BOXED(2846122,32,FLEN)
NAN_BOXED(696254719,32,FLEN)
NAN_BOXED(2134680036,32,FLEN)
NAN_BOXED(2846122,32,FLEN)
NAN_BOXED(696254975,32,FLEN)
NAN_BOXED(2134680036,32,FLEN)
NAN_BOXED(2846122,32,FLEN)
NAN_BOXED(696255487,32,FLEN)
NAN_BOXED(2134680036,32,FLEN)
NAN_BOXED(2846122,32,FLEN)
NAN_BOXED(696256511,32,FLEN)
NAN_BOXED(2134680036,32,FLEN)
NAN_BOXED(2846122,32,FLEN)
NAN_BOXED(696258559,32,FLEN)
NAN_BOXED(2134680036,32,FLEN)
NAN_BOXED(2846122,32,FLEN)
NAN_BOXED(696262655,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
