
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:17:59 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_4736:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x30ced5 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x3954be and fs3 == 1 and fe3 == 0x84 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db0ced5; op2val:0x813954be;
op3val:0xc27fe000; valaddr_reg:x3; val_offset:14208*0 + 3*37*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14208*0 + 3*37*FLEN/8, x4, x1, x2)

inst_4737:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x30ced5 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x3954be and fs3 == 1 and fe3 == 0x84 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db0ced5; op2val:0x813954be;
op3val:0xc27ff000; valaddr_reg:x3; val_offset:14211*0 + 3*37*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14211*0 + 3*37*FLEN/8, x4, x1, x2)

inst_4738:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x30ced5 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x3954be and fs3 == 1 and fe3 == 0x84 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db0ced5; op2val:0x813954be;
op3val:0xc27ff800; valaddr_reg:x3; val_offset:14214*0 + 3*37*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14214*0 + 3*37*FLEN/8, x4, x1, x2)

inst_4739:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x30ced5 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x3954be and fs3 == 1 and fe3 == 0x84 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db0ced5; op2val:0x813954be;
op3val:0xc27ffc00; valaddr_reg:x3; val_offset:14217*0 + 3*37*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14217*0 + 3*37*FLEN/8, x4, x1, x2)

inst_4740:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x30ced5 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x3954be and fs3 == 1 and fe3 == 0x84 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db0ced5; op2val:0x813954be;
op3val:0xc27ffe00; valaddr_reg:x3; val_offset:14220*0 + 3*37*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14220*0 + 3*37*FLEN/8, x4, x1, x2)

inst_4741:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x30ced5 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x3954be and fs3 == 1 and fe3 == 0x84 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db0ced5; op2val:0x813954be;
op3val:0xc27fff00; valaddr_reg:x3; val_offset:14223*0 + 3*37*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14223*0 + 3*37*FLEN/8, x4, x1, x2)

inst_4742:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x30ced5 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x3954be and fs3 == 1 and fe3 == 0x84 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db0ced5; op2val:0x813954be;
op3val:0xc27fff80; valaddr_reg:x3; val_offset:14226*0 + 3*37*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14226*0 + 3*37*FLEN/8, x4, x1, x2)

inst_4743:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x30ced5 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x3954be and fs3 == 1 and fe3 == 0x84 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db0ced5; op2val:0x813954be;
op3val:0xc27fffc0; valaddr_reg:x3; val_offset:14229*0 + 3*37*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14229*0 + 3*37*FLEN/8, x4, x1, x2)

inst_4744:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x30ced5 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x3954be and fs3 == 1 and fe3 == 0x84 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db0ced5; op2val:0x813954be;
op3val:0xc27fffe0; valaddr_reg:x3; val_offset:14232*0 + 3*37*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14232*0 + 3*37*FLEN/8, x4, x1, x2)

inst_4745:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x30ced5 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x3954be and fs3 == 1 and fe3 == 0x84 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db0ced5; op2val:0x813954be;
op3val:0xc27ffff0; valaddr_reg:x3; val_offset:14235*0 + 3*37*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14235*0 + 3*37*FLEN/8, x4, x1, x2)

inst_4746:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x30ced5 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x3954be and fs3 == 1 and fe3 == 0x84 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db0ced5; op2val:0x813954be;
op3val:0xc27ffff8; valaddr_reg:x3; val_offset:14238*0 + 3*37*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14238*0 + 3*37*FLEN/8, x4, x1, x2)

inst_4747:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x30ced5 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x3954be and fs3 == 1 and fe3 == 0x84 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db0ced5; op2val:0x813954be;
op3val:0xc27ffffc; valaddr_reg:x3; val_offset:14241*0 + 3*37*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14241*0 + 3*37*FLEN/8, x4, x1, x2)

inst_4748:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x30ced5 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x3954be and fs3 == 1 and fe3 == 0x84 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db0ced5; op2val:0x813954be;
op3val:0xc27ffffe; valaddr_reg:x3; val_offset:14244*0 + 3*37*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14244*0 + 3*37*FLEN/8, x4, x1, x2)

inst_4749:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x30ced5 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x3954be and fs3 == 1 and fe3 == 0x84 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db0ced5; op2val:0x813954be;
op3val:0xc27fffff; valaddr_reg:x3; val_offset:14247*0 + 3*37*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14247*0 + 3*37*FLEN/8, x4, x1, x2)

inst_4750:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x312d5c and fs2 == 0 and fe2 == 0x02 and fm2 == 0x38f1dd and fs3 == 0 and fe3 == 0x56 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db12d5c; op2val:0x138f1dd;
op3val:0x2b000000; valaddr_reg:x3; val_offset:14250*0 + 3*37*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14250*0 + 3*37*FLEN/8, x4, x1, x2)

inst_4751:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x312d5c and fs2 == 0 and fe2 == 0x02 and fm2 == 0x38f1dd and fs3 == 0 and fe3 == 0x56 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db12d5c; op2val:0x138f1dd;
op3val:0x2b000001; valaddr_reg:x3; val_offset:14253*0 + 3*37*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14253*0 + 3*37*FLEN/8, x4, x1, x2)

inst_4752:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x312d5c and fs2 == 0 and fe2 == 0x02 and fm2 == 0x38f1dd and fs3 == 0 and fe3 == 0x56 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db12d5c; op2val:0x138f1dd;
op3val:0x2b000003; valaddr_reg:x3; val_offset:14256*0 + 3*37*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14256*0 + 3*37*FLEN/8, x4, x1, x2)

inst_4753:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x312d5c and fs2 == 0 and fe2 == 0x02 and fm2 == 0x38f1dd and fs3 == 0 and fe3 == 0x56 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db12d5c; op2val:0x138f1dd;
op3val:0x2b000007; valaddr_reg:x3; val_offset:14259*0 + 3*37*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14259*0 + 3*37*FLEN/8, x4, x1, x2)

inst_4754:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x312d5c and fs2 == 0 and fe2 == 0x02 and fm2 == 0x38f1dd and fs3 == 0 and fe3 == 0x56 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db12d5c; op2val:0x138f1dd;
op3val:0x2b00000f; valaddr_reg:x3; val_offset:14262*0 + 3*37*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14262*0 + 3*37*FLEN/8, x4, x1, x2)

inst_4755:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x312d5c and fs2 == 0 and fe2 == 0x02 and fm2 == 0x38f1dd and fs3 == 0 and fe3 == 0x56 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db12d5c; op2val:0x138f1dd;
op3val:0x2b00001f; valaddr_reg:x3; val_offset:14265*0 + 3*37*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14265*0 + 3*37*FLEN/8, x4, x1, x2)

inst_4756:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x312d5c and fs2 == 0 and fe2 == 0x02 and fm2 == 0x38f1dd and fs3 == 0 and fe3 == 0x56 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db12d5c; op2val:0x138f1dd;
op3val:0x2b00003f; valaddr_reg:x3; val_offset:14268*0 + 3*37*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14268*0 + 3*37*FLEN/8, x4, x1, x2)

inst_4757:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x312d5c and fs2 == 0 and fe2 == 0x02 and fm2 == 0x38f1dd and fs3 == 0 and fe3 == 0x56 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db12d5c; op2val:0x138f1dd;
op3val:0x2b00007f; valaddr_reg:x3; val_offset:14271*0 + 3*37*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14271*0 + 3*37*FLEN/8, x4, x1, x2)

inst_4758:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x312d5c and fs2 == 0 and fe2 == 0x02 and fm2 == 0x38f1dd and fs3 == 0 and fe3 == 0x56 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db12d5c; op2val:0x138f1dd;
op3val:0x2b0000ff; valaddr_reg:x3; val_offset:14274*0 + 3*37*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14274*0 + 3*37*FLEN/8, x4, x1, x2)

inst_4759:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x312d5c and fs2 == 0 and fe2 == 0x02 and fm2 == 0x38f1dd and fs3 == 0 and fe3 == 0x56 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db12d5c; op2val:0x138f1dd;
op3val:0x2b0001ff; valaddr_reg:x3; val_offset:14277*0 + 3*37*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14277*0 + 3*37*FLEN/8, x4, x1, x2)

inst_4760:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x312d5c and fs2 == 0 and fe2 == 0x02 and fm2 == 0x38f1dd and fs3 == 0 and fe3 == 0x56 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db12d5c; op2val:0x138f1dd;
op3val:0x2b0003ff; valaddr_reg:x3; val_offset:14280*0 + 3*37*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14280*0 + 3*37*FLEN/8, x4, x1, x2)

inst_4761:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x312d5c and fs2 == 0 and fe2 == 0x02 and fm2 == 0x38f1dd and fs3 == 0 and fe3 == 0x56 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db12d5c; op2val:0x138f1dd;
op3val:0x2b0007ff; valaddr_reg:x3; val_offset:14283*0 + 3*37*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14283*0 + 3*37*FLEN/8, x4, x1, x2)

inst_4762:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x312d5c and fs2 == 0 and fe2 == 0x02 and fm2 == 0x38f1dd and fs3 == 0 and fe3 == 0x56 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db12d5c; op2val:0x138f1dd;
op3val:0x2b000fff; valaddr_reg:x3; val_offset:14286*0 + 3*37*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14286*0 + 3*37*FLEN/8, x4, x1, x2)

inst_4763:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x312d5c and fs2 == 0 and fe2 == 0x02 and fm2 == 0x38f1dd and fs3 == 0 and fe3 == 0x56 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db12d5c; op2val:0x138f1dd;
op3val:0x2b001fff; valaddr_reg:x3; val_offset:14289*0 + 3*37*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14289*0 + 3*37*FLEN/8, x4, x1, x2)

inst_4764:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x312d5c and fs2 == 0 and fe2 == 0x02 and fm2 == 0x38f1dd and fs3 == 0 and fe3 == 0x56 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db12d5c; op2val:0x138f1dd;
op3val:0x2b003fff; valaddr_reg:x3; val_offset:14292*0 + 3*37*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14292*0 + 3*37*FLEN/8, x4, x1, x2)

inst_4765:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x312d5c and fs2 == 0 and fe2 == 0x02 and fm2 == 0x38f1dd and fs3 == 0 and fe3 == 0x56 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db12d5c; op2val:0x138f1dd;
op3val:0x2b007fff; valaddr_reg:x3; val_offset:14295*0 + 3*37*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14295*0 + 3*37*FLEN/8, x4, x1, x2)

inst_4766:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x312d5c and fs2 == 0 and fe2 == 0x02 and fm2 == 0x38f1dd and fs3 == 0 and fe3 == 0x56 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db12d5c; op2val:0x138f1dd;
op3val:0x2b00ffff; valaddr_reg:x3; val_offset:14298*0 + 3*37*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14298*0 + 3*37*FLEN/8, x4, x1, x2)

inst_4767:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x312d5c and fs2 == 0 and fe2 == 0x02 and fm2 == 0x38f1dd and fs3 == 0 and fe3 == 0x56 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db12d5c; op2val:0x138f1dd;
op3val:0x2b01ffff; valaddr_reg:x3; val_offset:14301*0 + 3*37*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14301*0 + 3*37*FLEN/8, x4, x1, x2)

inst_4768:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x312d5c and fs2 == 0 and fe2 == 0x02 and fm2 == 0x38f1dd and fs3 == 0 and fe3 == 0x56 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db12d5c; op2val:0x138f1dd;
op3val:0x2b03ffff; valaddr_reg:x3; val_offset:14304*0 + 3*37*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14304*0 + 3*37*FLEN/8, x4, x1, x2)

inst_4769:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x312d5c and fs2 == 0 and fe2 == 0x02 and fm2 == 0x38f1dd and fs3 == 0 and fe3 == 0x56 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db12d5c; op2val:0x138f1dd;
op3val:0x2b07ffff; valaddr_reg:x3; val_offset:14307*0 + 3*37*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14307*0 + 3*37*FLEN/8, x4, x1, x2)

inst_4770:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x312d5c and fs2 == 0 and fe2 == 0x02 and fm2 == 0x38f1dd and fs3 == 0 and fe3 == 0x56 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db12d5c; op2val:0x138f1dd;
op3val:0x2b0fffff; valaddr_reg:x3; val_offset:14310*0 + 3*37*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14310*0 + 3*37*FLEN/8, x4, x1, x2)

inst_4771:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x312d5c and fs2 == 0 and fe2 == 0x02 and fm2 == 0x38f1dd and fs3 == 0 and fe3 == 0x56 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db12d5c; op2val:0x138f1dd;
op3val:0x2b1fffff; valaddr_reg:x3; val_offset:14313*0 + 3*37*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14313*0 + 3*37*FLEN/8, x4, x1, x2)

inst_4772:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x312d5c and fs2 == 0 and fe2 == 0x02 and fm2 == 0x38f1dd and fs3 == 0 and fe3 == 0x56 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db12d5c; op2val:0x138f1dd;
op3val:0x2b3fffff; valaddr_reg:x3; val_offset:14316*0 + 3*37*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14316*0 + 3*37*FLEN/8, x4, x1, x2)

inst_4773:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x312d5c and fs2 == 0 and fe2 == 0x02 and fm2 == 0x38f1dd and fs3 == 0 and fe3 == 0x56 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db12d5c; op2val:0x138f1dd;
op3val:0x2b400000; valaddr_reg:x3; val_offset:14319*0 + 3*37*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14319*0 + 3*37*FLEN/8, x4, x1, x2)

inst_4774:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x312d5c and fs2 == 0 and fe2 == 0x02 and fm2 == 0x38f1dd and fs3 == 0 and fe3 == 0x56 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db12d5c; op2val:0x138f1dd;
op3val:0x2b600000; valaddr_reg:x3; val_offset:14322*0 + 3*37*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14322*0 + 3*37*FLEN/8, x4, x1, x2)

inst_4775:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x312d5c and fs2 == 0 and fe2 == 0x02 and fm2 == 0x38f1dd and fs3 == 0 and fe3 == 0x56 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db12d5c; op2val:0x138f1dd;
op3val:0x2b700000; valaddr_reg:x3; val_offset:14325*0 + 3*37*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14325*0 + 3*37*FLEN/8, x4, x1, x2)

inst_4776:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x312d5c and fs2 == 0 and fe2 == 0x02 and fm2 == 0x38f1dd and fs3 == 0 and fe3 == 0x56 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db12d5c; op2val:0x138f1dd;
op3val:0x2b780000; valaddr_reg:x3; val_offset:14328*0 + 3*37*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14328*0 + 3*37*FLEN/8, x4, x1, x2)

inst_4777:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x312d5c and fs2 == 0 and fe2 == 0x02 and fm2 == 0x38f1dd and fs3 == 0 and fe3 == 0x56 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db12d5c; op2val:0x138f1dd;
op3val:0x2b7c0000; valaddr_reg:x3; val_offset:14331*0 + 3*37*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14331*0 + 3*37*FLEN/8, x4, x1, x2)

inst_4778:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x312d5c and fs2 == 0 and fe2 == 0x02 and fm2 == 0x38f1dd and fs3 == 0 and fe3 == 0x56 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db12d5c; op2val:0x138f1dd;
op3val:0x2b7e0000; valaddr_reg:x3; val_offset:14334*0 + 3*37*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14334*0 + 3*37*FLEN/8, x4, x1, x2)

inst_4779:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x312d5c and fs2 == 0 and fe2 == 0x02 and fm2 == 0x38f1dd and fs3 == 0 and fe3 == 0x56 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db12d5c; op2val:0x138f1dd;
op3val:0x2b7f0000; valaddr_reg:x3; val_offset:14337*0 + 3*37*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14337*0 + 3*37*FLEN/8, x4, x1, x2)

inst_4780:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x312d5c and fs2 == 0 and fe2 == 0x02 and fm2 == 0x38f1dd and fs3 == 0 and fe3 == 0x56 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db12d5c; op2val:0x138f1dd;
op3val:0x2b7f8000; valaddr_reg:x3; val_offset:14340*0 + 3*37*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14340*0 + 3*37*FLEN/8, x4, x1, x2)

inst_4781:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x312d5c and fs2 == 0 and fe2 == 0x02 and fm2 == 0x38f1dd and fs3 == 0 and fe3 == 0x56 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db12d5c; op2val:0x138f1dd;
op3val:0x2b7fc000; valaddr_reg:x3; val_offset:14343*0 + 3*37*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14343*0 + 3*37*FLEN/8, x4, x1, x2)

inst_4782:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x312d5c and fs2 == 0 and fe2 == 0x02 and fm2 == 0x38f1dd and fs3 == 0 and fe3 == 0x56 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db12d5c; op2val:0x138f1dd;
op3val:0x2b7fe000; valaddr_reg:x3; val_offset:14346*0 + 3*37*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14346*0 + 3*37*FLEN/8, x4, x1, x2)

inst_4783:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x312d5c and fs2 == 0 and fe2 == 0x02 and fm2 == 0x38f1dd and fs3 == 0 and fe3 == 0x56 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db12d5c; op2val:0x138f1dd;
op3val:0x2b7ff000; valaddr_reg:x3; val_offset:14349*0 + 3*37*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14349*0 + 3*37*FLEN/8, x4, x1, x2)

inst_4784:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x312d5c and fs2 == 0 and fe2 == 0x02 and fm2 == 0x38f1dd and fs3 == 0 and fe3 == 0x56 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db12d5c; op2val:0x138f1dd;
op3val:0x2b7ff800; valaddr_reg:x3; val_offset:14352*0 + 3*37*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14352*0 + 3*37*FLEN/8, x4, x1, x2)

inst_4785:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x312d5c and fs2 == 0 and fe2 == 0x02 and fm2 == 0x38f1dd and fs3 == 0 and fe3 == 0x56 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db12d5c; op2val:0x138f1dd;
op3val:0x2b7ffc00; valaddr_reg:x3; val_offset:14355*0 + 3*37*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14355*0 + 3*37*FLEN/8, x4, x1, x2)

inst_4786:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x312d5c and fs2 == 0 and fe2 == 0x02 and fm2 == 0x38f1dd and fs3 == 0 and fe3 == 0x56 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db12d5c; op2val:0x138f1dd;
op3val:0x2b7ffe00; valaddr_reg:x3; val_offset:14358*0 + 3*37*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14358*0 + 3*37*FLEN/8, x4, x1, x2)

inst_4787:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x312d5c and fs2 == 0 and fe2 == 0x02 and fm2 == 0x38f1dd and fs3 == 0 and fe3 == 0x56 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db12d5c; op2val:0x138f1dd;
op3val:0x2b7fff00; valaddr_reg:x3; val_offset:14361*0 + 3*37*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14361*0 + 3*37*FLEN/8, x4, x1, x2)

inst_4788:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x312d5c and fs2 == 0 and fe2 == 0x02 and fm2 == 0x38f1dd and fs3 == 0 and fe3 == 0x56 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db12d5c; op2val:0x138f1dd;
op3val:0x2b7fff80; valaddr_reg:x3; val_offset:14364*0 + 3*37*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14364*0 + 3*37*FLEN/8, x4, x1, x2)

inst_4789:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x312d5c and fs2 == 0 and fe2 == 0x02 and fm2 == 0x38f1dd and fs3 == 0 and fe3 == 0x56 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db12d5c; op2val:0x138f1dd;
op3val:0x2b7fffc0; valaddr_reg:x3; val_offset:14367*0 + 3*37*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14367*0 + 3*37*FLEN/8, x4, x1, x2)

inst_4790:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x312d5c and fs2 == 0 and fe2 == 0x02 and fm2 == 0x38f1dd and fs3 == 0 and fe3 == 0x56 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db12d5c; op2val:0x138f1dd;
op3val:0x2b7fffe0; valaddr_reg:x3; val_offset:14370*0 + 3*37*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14370*0 + 3*37*FLEN/8, x4, x1, x2)

inst_4791:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x312d5c and fs2 == 0 and fe2 == 0x02 and fm2 == 0x38f1dd and fs3 == 0 and fe3 == 0x56 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db12d5c; op2val:0x138f1dd;
op3val:0x2b7ffff0; valaddr_reg:x3; val_offset:14373*0 + 3*37*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14373*0 + 3*37*FLEN/8, x4, x1, x2)

inst_4792:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x312d5c and fs2 == 0 and fe2 == 0x02 and fm2 == 0x38f1dd and fs3 == 0 and fe3 == 0x56 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db12d5c; op2val:0x138f1dd;
op3val:0x2b7ffff8; valaddr_reg:x3; val_offset:14376*0 + 3*37*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14376*0 + 3*37*FLEN/8, x4, x1, x2)

inst_4793:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x312d5c and fs2 == 0 and fe2 == 0x02 and fm2 == 0x38f1dd and fs3 == 0 and fe3 == 0x56 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db12d5c; op2val:0x138f1dd;
op3val:0x2b7ffffc; valaddr_reg:x3; val_offset:14379*0 + 3*37*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14379*0 + 3*37*FLEN/8, x4, x1, x2)

inst_4794:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x312d5c and fs2 == 0 and fe2 == 0x02 and fm2 == 0x38f1dd and fs3 == 0 and fe3 == 0x56 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db12d5c; op2val:0x138f1dd;
op3val:0x2b7ffffe; valaddr_reg:x3; val_offset:14382*0 + 3*37*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14382*0 + 3*37*FLEN/8, x4, x1, x2)

inst_4795:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x312d5c and fs2 == 0 and fe2 == 0x02 and fm2 == 0x38f1dd and fs3 == 0 and fe3 == 0x56 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db12d5c; op2val:0x138f1dd;
op3val:0x2b7fffff; valaddr_reg:x3; val_offset:14385*0 + 3*37*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14385*0 + 3*37*FLEN/8, x4, x1, x2)

inst_4796:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x312d5c and fs2 == 0 and fe2 == 0x02 and fm2 == 0x38f1dd and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db12d5c; op2val:0x138f1dd;
op3val:0x3f800001; valaddr_reg:x3; val_offset:14388*0 + 3*37*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14388*0 + 3*37*FLEN/8, x4, x1, x2)

inst_4797:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x312d5c and fs2 == 0 and fe2 == 0x02 and fm2 == 0x38f1dd and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db12d5c; op2val:0x138f1dd;
op3val:0x3f800003; valaddr_reg:x3; val_offset:14391*0 + 3*37*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14391*0 + 3*37*FLEN/8, x4, x1, x2)

inst_4798:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x312d5c and fs2 == 0 and fe2 == 0x02 and fm2 == 0x38f1dd and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db12d5c; op2val:0x138f1dd;
op3val:0x3f800007; valaddr_reg:x3; val_offset:14394*0 + 3*37*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14394*0 + 3*37*FLEN/8, x4, x1, x2)

inst_4799:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x312d5c and fs2 == 0 and fe2 == 0x02 and fm2 == 0x38f1dd and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db12d5c; op2val:0x138f1dd;
op3val:0x3f999999; valaddr_reg:x3; val_offset:14397*0 + 3*37*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14397*0 + 3*37*FLEN/8, x4, x1, x2)

inst_4800:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x312d5c and fs2 == 0 and fe2 == 0x02 and fm2 == 0x38f1dd and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db12d5c; op2val:0x138f1dd;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:14400*0 + 3*37*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14400*0 + 3*37*FLEN/8, x4, x1, x2)

inst_4801:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x312d5c and fs2 == 0 and fe2 == 0x02 and fm2 == 0x38f1dd and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db12d5c; op2val:0x138f1dd;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:14403*0 + 3*37*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14403*0 + 3*37*FLEN/8, x4, x1, x2)

inst_4802:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x312d5c and fs2 == 0 and fe2 == 0x02 and fm2 == 0x38f1dd and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db12d5c; op2val:0x138f1dd;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:14406*0 + 3*37*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14406*0 + 3*37*FLEN/8, x4, x1, x2)

inst_4803:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x312d5c and fs2 == 0 and fe2 == 0x02 and fm2 == 0x38f1dd and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db12d5c; op2val:0x138f1dd;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:14409*0 + 3*37*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14409*0 + 3*37*FLEN/8, x4, x1, x2)

inst_4804:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x312d5c and fs2 == 0 and fe2 == 0x02 and fm2 == 0x38f1dd and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db12d5c; op2val:0x138f1dd;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:14412*0 + 3*37*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14412*0 + 3*37*FLEN/8, x4, x1, x2)

inst_4805:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x312d5c and fs2 == 0 and fe2 == 0x02 and fm2 == 0x38f1dd and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db12d5c; op2val:0x138f1dd;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:14415*0 + 3*37*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14415*0 + 3*37*FLEN/8, x4, x1, x2)

inst_4806:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x312d5c and fs2 == 0 and fe2 == 0x02 and fm2 == 0x38f1dd and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db12d5c; op2val:0x138f1dd;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:14418*0 + 3*37*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14418*0 + 3*37*FLEN/8, x4, x1, x2)

inst_4807:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x312d5c and fs2 == 0 and fe2 == 0x02 and fm2 == 0x38f1dd and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db12d5c; op2val:0x138f1dd;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:14421*0 + 3*37*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14421*0 + 3*37*FLEN/8, x4, x1, x2)

inst_4808:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x312d5c and fs2 == 0 and fe2 == 0x02 and fm2 == 0x38f1dd and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db12d5c; op2val:0x138f1dd;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:14424*0 + 3*37*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14424*0 + 3*37*FLEN/8, x4, x1, x2)

inst_4809:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x312d5c and fs2 == 0 and fe2 == 0x02 and fm2 == 0x38f1dd and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db12d5c; op2val:0x138f1dd;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:14427*0 + 3*37*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14427*0 + 3*37*FLEN/8, x4, x1, x2)

inst_4810:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x312d5c and fs2 == 0 and fe2 == 0x02 and fm2 == 0x38f1dd and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db12d5c; op2val:0x138f1dd;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:14430*0 + 3*37*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14430*0 + 3*37*FLEN/8, x4, x1, x2)

inst_4811:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x312d5c and fs2 == 0 and fe2 == 0x02 and fm2 == 0x38f1dd and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db12d5c; op2val:0x138f1dd;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:14433*0 + 3*37*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14433*0 + 3*37*FLEN/8, x4, x1, x2)

inst_4812:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x31d64f and fs2 == 1 and fe2 == 0x02 and fm2 == 0x38422a and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db1d64f; op2val:0x8138422a;
op3val:0xbf800000; valaddr_reg:x3; val_offset:14436*0 + 3*37*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14436*0 + 3*37*FLEN/8, x4, x1, x2)

inst_4813:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x31d64f and fs2 == 1 and fe2 == 0x02 and fm2 == 0x38422a and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db1d64f; op2val:0x8138422a;
op3val:0xbf800001; valaddr_reg:x3; val_offset:14439*0 + 3*37*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14439*0 + 3*37*FLEN/8, x4, x1, x2)

inst_4814:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x31d64f and fs2 == 1 and fe2 == 0x02 and fm2 == 0x38422a and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db1d64f; op2val:0x8138422a;
op3val:0xbf800003; valaddr_reg:x3; val_offset:14442*0 + 3*37*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14442*0 + 3*37*FLEN/8, x4, x1, x2)

inst_4815:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x31d64f and fs2 == 1 and fe2 == 0x02 and fm2 == 0x38422a and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db1d64f; op2val:0x8138422a;
op3val:0xbf800007; valaddr_reg:x3; val_offset:14445*0 + 3*37*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14445*0 + 3*37*FLEN/8, x4, x1, x2)

inst_4816:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x31d64f and fs2 == 1 and fe2 == 0x02 and fm2 == 0x38422a and fs3 == 1 and fe3 == 0x7f and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db1d64f; op2val:0x8138422a;
op3val:0xbf80000f; valaddr_reg:x3; val_offset:14448*0 + 3*37*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14448*0 + 3*37*FLEN/8, x4, x1, x2)

inst_4817:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x31d64f and fs2 == 1 and fe2 == 0x02 and fm2 == 0x38422a and fs3 == 1 and fe3 == 0x7f and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db1d64f; op2val:0x8138422a;
op3val:0xbf80001f; valaddr_reg:x3; val_offset:14451*0 + 3*37*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14451*0 + 3*37*FLEN/8, x4, x1, x2)

inst_4818:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x31d64f and fs2 == 1 and fe2 == 0x02 and fm2 == 0x38422a and fs3 == 1 and fe3 == 0x7f and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db1d64f; op2val:0x8138422a;
op3val:0xbf80003f; valaddr_reg:x3; val_offset:14454*0 + 3*37*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14454*0 + 3*37*FLEN/8, x4, x1, x2)

inst_4819:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x31d64f and fs2 == 1 and fe2 == 0x02 and fm2 == 0x38422a and fs3 == 1 and fe3 == 0x7f and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db1d64f; op2val:0x8138422a;
op3val:0xbf80007f; valaddr_reg:x3; val_offset:14457*0 + 3*37*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14457*0 + 3*37*FLEN/8, x4, x1, x2)

inst_4820:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x31d64f and fs2 == 1 and fe2 == 0x02 and fm2 == 0x38422a and fs3 == 1 and fe3 == 0x7f and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db1d64f; op2val:0x8138422a;
op3val:0xbf8000ff; valaddr_reg:x3; val_offset:14460*0 + 3*37*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14460*0 + 3*37*FLEN/8, x4, x1, x2)

inst_4821:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x31d64f and fs2 == 1 and fe2 == 0x02 and fm2 == 0x38422a and fs3 == 1 and fe3 == 0x7f and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db1d64f; op2val:0x8138422a;
op3val:0xbf8001ff; valaddr_reg:x3; val_offset:14463*0 + 3*37*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14463*0 + 3*37*FLEN/8, x4, x1, x2)

inst_4822:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x31d64f and fs2 == 1 and fe2 == 0x02 and fm2 == 0x38422a and fs3 == 1 and fe3 == 0x7f and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db1d64f; op2val:0x8138422a;
op3val:0xbf8003ff; valaddr_reg:x3; val_offset:14466*0 + 3*37*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14466*0 + 3*37*FLEN/8, x4, x1, x2)

inst_4823:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x31d64f and fs2 == 1 and fe2 == 0x02 and fm2 == 0x38422a and fs3 == 1 and fe3 == 0x7f and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db1d64f; op2val:0x8138422a;
op3val:0xbf8007ff; valaddr_reg:x3; val_offset:14469*0 + 3*37*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14469*0 + 3*37*FLEN/8, x4, x1, x2)

inst_4824:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x31d64f and fs2 == 1 and fe2 == 0x02 and fm2 == 0x38422a and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db1d64f; op2val:0x8138422a;
op3val:0xbf800fff; valaddr_reg:x3; val_offset:14472*0 + 3*37*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14472*0 + 3*37*FLEN/8, x4, x1, x2)

inst_4825:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x31d64f and fs2 == 1 and fe2 == 0x02 and fm2 == 0x38422a and fs3 == 1 and fe3 == 0x7f and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db1d64f; op2val:0x8138422a;
op3val:0xbf801fff; valaddr_reg:x3; val_offset:14475*0 + 3*37*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14475*0 + 3*37*FLEN/8, x4, x1, x2)

inst_4826:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x31d64f and fs2 == 1 and fe2 == 0x02 and fm2 == 0x38422a and fs3 == 1 and fe3 == 0x7f and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db1d64f; op2val:0x8138422a;
op3val:0xbf803fff; valaddr_reg:x3; val_offset:14478*0 + 3*37*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14478*0 + 3*37*FLEN/8, x4, x1, x2)

inst_4827:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x31d64f and fs2 == 1 and fe2 == 0x02 and fm2 == 0x38422a and fs3 == 1 and fe3 == 0x7f and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db1d64f; op2val:0x8138422a;
op3val:0xbf807fff; valaddr_reg:x3; val_offset:14481*0 + 3*37*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14481*0 + 3*37*FLEN/8, x4, x1, x2)

inst_4828:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x31d64f and fs2 == 1 and fe2 == 0x02 and fm2 == 0x38422a and fs3 == 1 and fe3 == 0x7f and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db1d64f; op2val:0x8138422a;
op3val:0xbf80ffff; valaddr_reg:x3; val_offset:14484*0 + 3*37*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14484*0 + 3*37*FLEN/8, x4, x1, x2)

inst_4829:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x31d64f and fs2 == 1 and fe2 == 0x02 and fm2 == 0x38422a and fs3 == 1 and fe3 == 0x7f and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db1d64f; op2val:0x8138422a;
op3val:0xbf81ffff; valaddr_reg:x3; val_offset:14487*0 + 3*37*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14487*0 + 3*37*FLEN/8, x4, x1, x2)

inst_4830:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x31d64f and fs2 == 1 and fe2 == 0x02 and fm2 == 0x38422a and fs3 == 1 and fe3 == 0x7f and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db1d64f; op2val:0x8138422a;
op3val:0xbf83ffff; valaddr_reg:x3; val_offset:14490*0 + 3*37*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14490*0 + 3*37*FLEN/8, x4, x1, x2)

inst_4831:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x31d64f and fs2 == 1 and fe2 == 0x02 and fm2 == 0x38422a and fs3 == 1 and fe3 == 0x7f and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db1d64f; op2val:0x8138422a;
op3val:0xbf87ffff; valaddr_reg:x3; val_offset:14493*0 + 3*37*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14493*0 + 3*37*FLEN/8, x4, x1, x2)

inst_4832:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x31d64f and fs2 == 1 and fe2 == 0x02 and fm2 == 0x38422a and fs3 == 1 and fe3 == 0x7f and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db1d64f; op2val:0x8138422a;
op3val:0xbf8fffff; valaddr_reg:x3; val_offset:14496*0 + 3*37*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14496*0 + 3*37*FLEN/8, x4, x1, x2)

inst_4833:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x31d64f and fs2 == 1 and fe2 == 0x02 and fm2 == 0x38422a and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db1d64f; op2val:0x8138422a;
op3val:0xbf999999; valaddr_reg:x3; val_offset:14499*0 + 3*37*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14499*0 + 3*37*FLEN/8, x4, x1, x2)

inst_4834:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x31d64f and fs2 == 1 and fe2 == 0x02 and fm2 == 0x38422a and fs3 == 1 and fe3 == 0x7f and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db1d64f; op2val:0x8138422a;
op3val:0xbf9fffff; valaddr_reg:x3; val_offset:14502*0 + 3*37*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14502*0 + 3*37*FLEN/8, x4, x1, x2)

inst_4835:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x31d64f and fs2 == 1 and fe2 == 0x02 and fm2 == 0x38422a and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db1d64f; op2val:0x8138422a;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:14505*0 + 3*37*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14505*0 + 3*37*FLEN/8, x4, x1, x2)

inst_4836:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x31d64f and fs2 == 1 and fe2 == 0x02 and fm2 == 0x38422a and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db1d64f; op2val:0x8138422a;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:14508*0 + 3*37*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14508*0 + 3*37*FLEN/8, x4, x1, x2)

inst_4837:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x31d64f and fs2 == 1 and fe2 == 0x02 and fm2 == 0x38422a and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db1d64f; op2val:0x8138422a;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:14511*0 + 3*37*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14511*0 + 3*37*FLEN/8, x4, x1, x2)

inst_4838:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x31d64f and fs2 == 1 and fe2 == 0x02 and fm2 == 0x38422a and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db1d64f; op2val:0x8138422a;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:14514*0 + 3*37*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14514*0 + 3*37*FLEN/8, x4, x1, x2)

inst_4839:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x31d64f and fs2 == 1 and fe2 == 0x02 and fm2 == 0x38422a and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db1d64f; op2val:0x8138422a;
op3val:0xbfbfffff; valaddr_reg:x3; val_offset:14517*0 + 3*37*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14517*0 + 3*37*FLEN/8, x4, x1, x2)

inst_4840:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x31d64f and fs2 == 1 and fe2 == 0x02 and fm2 == 0x38422a and fs3 == 1 and fe3 == 0x7f and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db1d64f; op2val:0x8138422a;
op3val:0xbfc00000; valaddr_reg:x3; val_offset:14520*0 + 3*37*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14520*0 + 3*37*FLEN/8, x4, x1, x2)

inst_4841:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x31d64f and fs2 == 1 and fe2 == 0x02 and fm2 == 0x38422a and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db1d64f; op2val:0x8138422a;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:14523*0 + 3*37*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14523*0 + 3*37*FLEN/8, x4, x1, x2)

inst_4842:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x31d64f and fs2 == 1 and fe2 == 0x02 and fm2 == 0x38422a and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db1d64f; op2val:0x8138422a;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:14526*0 + 3*37*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14526*0 + 3*37*FLEN/8, x4, x1, x2)

inst_4843:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x31d64f and fs2 == 1 and fe2 == 0x02 and fm2 == 0x38422a and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db1d64f; op2val:0x8138422a;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:14529*0 + 3*37*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14529*0 + 3*37*FLEN/8, x4, x1, x2)

inst_4844:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x31d64f and fs2 == 1 and fe2 == 0x02 and fm2 == 0x38422a and fs3 == 1 and fe3 == 0x7f and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db1d64f; op2val:0x8138422a;
op3val:0xbfe00000; valaddr_reg:x3; val_offset:14532*0 + 3*37*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14532*0 + 3*37*FLEN/8, x4, x1, x2)

inst_4845:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x31d64f and fs2 == 1 and fe2 == 0x02 and fm2 == 0x38422a and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db1d64f; op2val:0x8138422a;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:14535*0 + 3*37*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14535*0 + 3*37*FLEN/8, x4, x1, x2)

inst_4846:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x31d64f and fs2 == 1 and fe2 == 0x02 and fm2 == 0x38422a and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db1d64f; op2val:0x8138422a;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:14538*0 + 3*37*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14538*0 + 3*37*FLEN/8, x4, x1, x2)

inst_4847:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x31d64f and fs2 == 1 and fe2 == 0x02 and fm2 == 0x38422a and fs3 == 1 and fe3 == 0x7f and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db1d64f; op2val:0x8138422a;
op3val:0xbff00000; valaddr_reg:x3; val_offset:14541*0 + 3*37*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14541*0 + 3*37*FLEN/8, x4, x1, x2)

inst_4848:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x31d64f and fs2 == 1 and fe2 == 0x02 and fm2 == 0x38422a and fs3 == 1 and fe3 == 0x7f and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db1d64f; op2val:0x8138422a;
op3val:0xbff80000; valaddr_reg:x3; val_offset:14544*0 + 3*37*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14544*0 + 3*37*FLEN/8, x4, x1, x2)

inst_4849:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x31d64f and fs2 == 1 and fe2 == 0x02 and fm2 == 0x38422a and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db1d64f; op2val:0x8138422a;
op3val:0xbffc0000; valaddr_reg:x3; val_offset:14547*0 + 3*37*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14547*0 + 3*37*FLEN/8, x4, x1, x2)

inst_4850:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x31d64f and fs2 == 1 and fe2 == 0x02 and fm2 == 0x38422a and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db1d64f; op2val:0x8138422a;
op3val:0xbffe0000; valaddr_reg:x3; val_offset:14550*0 + 3*37*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14550*0 + 3*37*FLEN/8, x4, x1, x2)

inst_4851:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x31d64f and fs2 == 1 and fe2 == 0x02 and fm2 == 0x38422a and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db1d64f; op2val:0x8138422a;
op3val:0xbfff0000; valaddr_reg:x3; val_offset:14553*0 + 3*37*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14553*0 + 3*37*FLEN/8, x4, x1, x2)

inst_4852:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x31d64f and fs2 == 1 and fe2 == 0x02 and fm2 == 0x38422a and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db1d64f; op2val:0x8138422a;
op3val:0xbfff8000; valaddr_reg:x3; val_offset:14556*0 + 3*37*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14556*0 + 3*37*FLEN/8, x4, x1, x2)

inst_4853:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x31d64f and fs2 == 1 and fe2 == 0x02 and fm2 == 0x38422a and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db1d64f; op2val:0x8138422a;
op3val:0xbfffc000; valaddr_reg:x3; val_offset:14559*0 + 3*37*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14559*0 + 3*37*FLEN/8, x4, x1, x2)

inst_4854:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x31d64f and fs2 == 1 and fe2 == 0x02 and fm2 == 0x38422a and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db1d64f; op2val:0x8138422a;
op3val:0xbfffe000; valaddr_reg:x3; val_offset:14562*0 + 3*37*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14562*0 + 3*37*FLEN/8, x4, x1, x2)

inst_4855:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x31d64f and fs2 == 1 and fe2 == 0x02 and fm2 == 0x38422a and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db1d64f; op2val:0x8138422a;
op3val:0xbffff000; valaddr_reg:x3; val_offset:14565*0 + 3*37*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14565*0 + 3*37*FLEN/8, x4, x1, x2)

inst_4856:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x31d64f and fs2 == 1 and fe2 == 0x02 and fm2 == 0x38422a and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db1d64f; op2val:0x8138422a;
op3val:0xbffff800; valaddr_reg:x3; val_offset:14568*0 + 3*37*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14568*0 + 3*37*FLEN/8, x4, x1, x2)

inst_4857:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x31d64f and fs2 == 1 and fe2 == 0x02 and fm2 == 0x38422a and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db1d64f; op2val:0x8138422a;
op3val:0xbffffc00; valaddr_reg:x3; val_offset:14571*0 + 3*37*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14571*0 + 3*37*FLEN/8, x4, x1, x2)

inst_4858:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x31d64f and fs2 == 1 and fe2 == 0x02 and fm2 == 0x38422a and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db1d64f; op2val:0x8138422a;
op3val:0xbffffe00; valaddr_reg:x3; val_offset:14574*0 + 3*37*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14574*0 + 3*37*FLEN/8, x4, x1, x2)

inst_4859:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x31d64f and fs2 == 1 and fe2 == 0x02 and fm2 == 0x38422a and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db1d64f; op2val:0x8138422a;
op3val:0xbfffff00; valaddr_reg:x3; val_offset:14577*0 + 3*37*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14577*0 + 3*37*FLEN/8, x4, x1, x2)

inst_4860:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x31d64f and fs2 == 1 and fe2 == 0x02 and fm2 == 0x38422a and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db1d64f; op2val:0x8138422a;
op3val:0xbfffff80; valaddr_reg:x3; val_offset:14580*0 + 3*37*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14580*0 + 3*37*FLEN/8, x4, x1, x2)

inst_4861:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x31d64f and fs2 == 1 and fe2 == 0x02 and fm2 == 0x38422a and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db1d64f; op2val:0x8138422a;
op3val:0xbfffffc0; valaddr_reg:x3; val_offset:14583*0 + 3*37*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14583*0 + 3*37*FLEN/8, x4, x1, x2)

inst_4862:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x31d64f and fs2 == 1 and fe2 == 0x02 and fm2 == 0x38422a and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db1d64f; op2val:0x8138422a;
op3val:0xbfffffe0; valaddr_reg:x3; val_offset:14586*0 + 3*37*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14586*0 + 3*37*FLEN/8, x4, x1, x2)

inst_4863:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x31d64f and fs2 == 1 and fe2 == 0x02 and fm2 == 0x38422a and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db1d64f; op2val:0x8138422a;
op3val:0xbffffff0; valaddr_reg:x3; val_offset:14589*0 + 3*37*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14589*0 + 3*37*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2108739285,32,FLEN)
NAN_BOXED(2168018110,32,FLEN)
NAN_BOXED(3263160320,32,FLEN)
NAN_BOXED(2108739285,32,FLEN)
NAN_BOXED(2168018110,32,FLEN)
NAN_BOXED(3263164416,32,FLEN)
NAN_BOXED(2108739285,32,FLEN)
NAN_BOXED(2168018110,32,FLEN)
NAN_BOXED(3263166464,32,FLEN)
NAN_BOXED(2108739285,32,FLEN)
NAN_BOXED(2168018110,32,FLEN)
NAN_BOXED(3263167488,32,FLEN)
NAN_BOXED(2108739285,32,FLEN)
NAN_BOXED(2168018110,32,FLEN)
NAN_BOXED(3263168000,32,FLEN)
NAN_BOXED(2108739285,32,FLEN)
NAN_BOXED(2168018110,32,FLEN)
NAN_BOXED(3263168256,32,FLEN)
NAN_BOXED(2108739285,32,FLEN)
NAN_BOXED(2168018110,32,FLEN)
NAN_BOXED(3263168384,32,FLEN)
NAN_BOXED(2108739285,32,FLEN)
NAN_BOXED(2168018110,32,FLEN)
NAN_BOXED(3263168448,32,FLEN)
NAN_BOXED(2108739285,32,FLEN)
NAN_BOXED(2168018110,32,FLEN)
NAN_BOXED(3263168480,32,FLEN)
NAN_BOXED(2108739285,32,FLEN)
NAN_BOXED(2168018110,32,FLEN)
NAN_BOXED(3263168496,32,FLEN)
NAN_BOXED(2108739285,32,FLEN)
NAN_BOXED(2168018110,32,FLEN)
NAN_BOXED(3263168504,32,FLEN)
NAN_BOXED(2108739285,32,FLEN)
NAN_BOXED(2168018110,32,FLEN)
NAN_BOXED(3263168508,32,FLEN)
NAN_BOXED(2108739285,32,FLEN)
NAN_BOXED(2168018110,32,FLEN)
NAN_BOXED(3263168510,32,FLEN)
NAN_BOXED(2108739285,32,FLEN)
NAN_BOXED(2168018110,32,FLEN)
NAN_BOXED(3263168511,32,FLEN)
NAN_BOXED(2108763484,32,FLEN)
NAN_BOXED(20509149,32,FLEN)
NAN_BOXED(721420288,32,FLEN)
NAN_BOXED(2108763484,32,FLEN)
NAN_BOXED(20509149,32,FLEN)
NAN_BOXED(721420289,32,FLEN)
NAN_BOXED(2108763484,32,FLEN)
NAN_BOXED(20509149,32,FLEN)
NAN_BOXED(721420291,32,FLEN)
NAN_BOXED(2108763484,32,FLEN)
NAN_BOXED(20509149,32,FLEN)
NAN_BOXED(721420295,32,FLEN)
NAN_BOXED(2108763484,32,FLEN)
NAN_BOXED(20509149,32,FLEN)
NAN_BOXED(721420303,32,FLEN)
NAN_BOXED(2108763484,32,FLEN)
NAN_BOXED(20509149,32,FLEN)
NAN_BOXED(721420319,32,FLEN)
NAN_BOXED(2108763484,32,FLEN)
NAN_BOXED(20509149,32,FLEN)
NAN_BOXED(721420351,32,FLEN)
NAN_BOXED(2108763484,32,FLEN)
NAN_BOXED(20509149,32,FLEN)
NAN_BOXED(721420415,32,FLEN)
NAN_BOXED(2108763484,32,FLEN)
NAN_BOXED(20509149,32,FLEN)
NAN_BOXED(721420543,32,FLEN)
NAN_BOXED(2108763484,32,FLEN)
NAN_BOXED(20509149,32,FLEN)
NAN_BOXED(721420799,32,FLEN)
NAN_BOXED(2108763484,32,FLEN)
NAN_BOXED(20509149,32,FLEN)
NAN_BOXED(721421311,32,FLEN)
NAN_BOXED(2108763484,32,FLEN)
NAN_BOXED(20509149,32,FLEN)
NAN_BOXED(721422335,32,FLEN)
NAN_BOXED(2108763484,32,FLEN)
NAN_BOXED(20509149,32,FLEN)
NAN_BOXED(721424383,32,FLEN)
NAN_BOXED(2108763484,32,FLEN)
NAN_BOXED(20509149,32,FLEN)
NAN_BOXED(721428479,32,FLEN)
NAN_BOXED(2108763484,32,FLEN)
NAN_BOXED(20509149,32,FLEN)
NAN_BOXED(721436671,32,FLEN)
NAN_BOXED(2108763484,32,FLEN)
NAN_BOXED(20509149,32,FLEN)
NAN_BOXED(721453055,32,FLEN)
NAN_BOXED(2108763484,32,FLEN)
NAN_BOXED(20509149,32,FLEN)
NAN_BOXED(721485823,32,FLEN)
NAN_BOXED(2108763484,32,FLEN)
NAN_BOXED(20509149,32,FLEN)
NAN_BOXED(721551359,32,FLEN)
NAN_BOXED(2108763484,32,FLEN)
NAN_BOXED(20509149,32,FLEN)
NAN_BOXED(721682431,32,FLEN)
NAN_BOXED(2108763484,32,FLEN)
NAN_BOXED(20509149,32,FLEN)
NAN_BOXED(721944575,32,FLEN)
NAN_BOXED(2108763484,32,FLEN)
NAN_BOXED(20509149,32,FLEN)
NAN_BOXED(722468863,32,FLEN)
NAN_BOXED(2108763484,32,FLEN)
NAN_BOXED(20509149,32,FLEN)
NAN_BOXED(723517439,32,FLEN)
NAN_BOXED(2108763484,32,FLEN)
NAN_BOXED(20509149,32,FLEN)
NAN_BOXED(725614591,32,FLEN)
NAN_BOXED(2108763484,32,FLEN)
NAN_BOXED(20509149,32,FLEN)
NAN_BOXED(725614592,32,FLEN)
NAN_BOXED(2108763484,32,FLEN)
NAN_BOXED(20509149,32,FLEN)
NAN_BOXED(727711744,32,FLEN)
NAN_BOXED(2108763484,32,FLEN)
NAN_BOXED(20509149,32,FLEN)
NAN_BOXED(728760320,32,FLEN)
NAN_BOXED(2108763484,32,FLEN)
NAN_BOXED(20509149,32,FLEN)
NAN_BOXED(729284608,32,FLEN)
NAN_BOXED(2108763484,32,FLEN)
NAN_BOXED(20509149,32,FLEN)
NAN_BOXED(729546752,32,FLEN)
NAN_BOXED(2108763484,32,FLEN)
NAN_BOXED(20509149,32,FLEN)
NAN_BOXED(729677824,32,FLEN)
NAN_BOXED(2108763484,32,FLEN)
NAN_BOXED(20509149,32,FLEN)
NAN_BOXED(729743360,32,FLEN)
NAN_BOXED(2108763484,32,FLEN)
NAN_BOXED(20509149,32,FLEN)
NAN_BOXED(729776128,32,FLEN)
NAN_BOXED(2108763484,32,FLEN)
NAN_BOXED(20509149,32,FLEN)
NAN_BOXED(729792512,32,FLEN)
NAN_BOXED(2108763484,32,FLEN)
NAN_BOXED(20509149,32,FLEN)
NAN_BOXED(729800704,32,FLEN)
NAN_BOXED(2108763484,32,FLEN)
NAN_BOXED(20509149,32,FLEN)
NAN_BOXED(729804800,32,FLEN)
NAN_BOXED(2108763484,32,FLEN)
NAN_BOXED(20509149,32,FLEN)
NAN_BOXED(729806848,32,FLEN)
NAN_BOXED(2108763484,32,FLEN)
NAN_BOXED(20509149,32,FLEN)
NAN_BOXED(729807872,32,FLEN)
NAN_BOXED(2108763484,32,FLEN)
NAN_BOXED(20509149,32,FLEN)
NAN_BOXED(729808384,32,FLEN)
NAN_BOXED(2108763484,32,FLEN)
NAN_BOXED(20509149,32,FLEN)
NAN_BOXED(729808640,32,FLEN)
NAN_BOXED(2108763484,32,FLEN)
NAN_BOXED(20509149,32,FLEN)
NAN_BOXED(729808768,32,FLEN)
NAN_BOXED(2108763484,32,FLEN)
NAN_BOXED(20509149,32,FLEN)
NAN_BOXED(729808832,32,FLEN)
NAN_BOXED(2108763484,32,FLEN)
NAN_BOXED(20509149,32,FLEN)
NAN_BOXED(729808864,32,FLEN)
NAN_BOXED(2108763484,32,FLEN)
NAN_BOXED(20509149,32,FLEN)
NAN_BOXED(729808880,32,FLEN)
NAN_BOXED(2108763484,32,FLEN)
NAN_BOXED(20509149,32,FLEN)
NAN_BOXED(729808888,32,FLEN)
NAN_BOXED(2108763484,32,FLEN)
NAN_BOXED(20509149,32,FLEN)
NAN_BOXED(729808892,32,FLEN)
NAN_BOXED(2108763484,32,FLEN)
NAN_BOXED(20509149,32,FLEN)
NAN_BOXED(729808894,32,FLEN)
NAN_BOXED(2108763484,32,FLEN)
NAN_BOXED(20509149,32,FLEN)
NAN_BOXED(729808895,32,FLEN)
NAN_BOXED(2108763484,32,FLEN)
NAN_BOXED(20509149,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2108763484,32,FLEN)
NAN_BOXED(20509149,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2108763484,32,FLEN)
NAN_BOXED(20509149,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2108763484,32,FLEN)
NAN_BOXED(20509149,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2108763484,32,FLEN)
NAN_BOXED(20509149,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2108763484,32,FLEN)
NAN_BOXED(20509149,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2108763484,32,FLEN)
NAN_BOXED(20509149,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2108763484,32,FLEN)
NAN_BOXED(20509149,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2108763484,32,FLEN)
NAN_BOXED(20509149,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2108763484,32,FLEN)
NAN_BOXED(20509149,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2108763484,32,FLEN)
NAN_BOXED(20509149,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2108763484,32,FLEN)
NAN_BOXED(20509149,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2108763484,32,FLEN)
NAN_BOXED(20509149,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2108763484,32,FLEN)
NAN_BOXED(20509149,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2108763484,32,FLEN)
NAN_BOXED(20509149,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2108763484,32,FLEN)
NAN_BOXED(20509149,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2108806735,32,FLEN)
NAN_BOXED(2167947818,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(2108806735,32,FLEN)
NAN_BOXED(2167947818,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2108806735,32,FLEN)
NAN_BOXED(2167947818,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2108806735,32,FLEN)
NAN_BOXED(2167947818,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
NAN_BOXED(2108806735,32,FLEN)
NAN_BOXED(2167947818,32,FLEN)
NAN_BOXED(3212836879,32,FLEN)
NAN_BOXED(2108806735,32,FLEN)
NAN_BOXED(2167947818,32,FLEN)
NAN_BOXED(3212836895,32,FLEN)
NAN_BOXED(2108806735,32,FLEN)
NAN_BOXED(2167947818,32,FLEN)
NAN_BOXED(3212836927,32,FLEN)
NAN_BOXED(2108806735,32,FLEN)
NAN_BOXED(2167947818,32,FLEN)
NAN_BOXED(3212836991,32,FLEN)
NAN_BOXED(2108806735,32,FLEN)
NAN_BOXED(2167947818,32,FLEN)
NAN_BOXED(3212837119,32,FLEN)
NAN_BOXED(2108806735,32,FLEN)
NAN_BOXED(2167947818,32,FLEN)
NAN_BOXED(3212837375,32,FLEN)
NAN_BOXED(2108806735,32,FLEN)
NAN_BOXED(2167947818,32,FLEN)
NAN_BOXED(3212837887,32,FLEN)
NAN_BOXED(2108806735,32,FLEN)
NAN_BOXED(2167947818,32,FLEN)
NAN_BOXED(3212838911,32,FLEN)
NAN_BOXED(2108806735,32,FLEN)
NAN_BOXED(2167947818,32,FLEN)
NAN_BOXED(3212840959,32,FLEN)
NAN_BOXED(2108806735,32,FLEN)
NAN_BOXED(2167947818,32,FLEN)
NAN_BOXED(3212845055,32,FLEN)
NAN_BOXED(2108806735,32,FLEN)
NAN_BOXED(2167947818,32,FLEN)
NAN_BOXED(3212853247,32,FLEN)
NAN_BOXED(2108806735,32,FLEN)
NAN_BOXED(2167947818,32,FLEN)
NAN_BOXED(3212869631,32,FLEN)
NAN_BOXED(2108806735,32,FLEN)
NAN_BOXED(2167947818,32,FLEN)
NAN_BOXED(3212902399,32,FLEN)
NAN_BOXED(2108806735,32,FLEN)
NAN_BOXED(2167947818,32,FLEN)
NAN_BOXED(3212967935,32,FLEN)
NAN_BOXED(2108806735,32,FLEN)
NAN_BOXED(2167947818,32,FLEN)
NAN_BOXED(3213099007,32,FLEN)
NAN_BOXED(2108806735,32,FLEN)
NAN_BOXED(2167947818,32,FLEN)
NAN_BOXED(3213361151,32,FLEN)
NAN_BOXED(2108806735,32,FLEN)
NAN_BOXED(2167947818,32,FLEN)
NAN_BOXED(3213885439,32,FLEN)
NAN_BOXED(2108806735,32,FLEN)
NAN_BOXED(2167947818,32,FLEN)
NAN_BOXED(3214514585,32,FLEN)
NAN_BOXED(2108806735,32,FLEN)
NAN_BOXED(2167947818,32,FLEN)
NAN_BOXED(3214934015,32,FLEN)
NAN_BOXED(2108806735,32,FLEN)
NAN_BOXED(2167947818,32,FLEN)
NAN_BOXED(3215233609,32,FLEN)
NAN_BOXED(2108806735,32,FLEN)
NAN_BOXED(2167947818,32,FLEN)
NAN_BOXED(3216192307,32,FLEN)
NAN_BOXED(2108806735,32,FLEN)
NAN_BOXED(2167947818,32,FLEN)
NAN_BOXED(3216431981,32,FLEN)
NAN_BOXED(2108806735,32,FLEN)
NAN_BOXED(2167947818,32,FLEN)
NAN_BOXED(3216751547,32,FLEN)
NAN_BOXED(2108806735,32,FLEN)
NAN_BOXED(2167947818,32,FLEN)
NAN_BOXED(3217031167,32,FLEN)
NAN_BOXED(2108806735,32,FLEN)
NAN_BOXED(2167947818,32,FLEN)
NAN_BOXED(3217031168,32,FLEN)
NAN_BOXED(2108806735,32,FLEN)
NAN_BOXED(2167947818,32,FLEN)
NAN_BOXED(3217310788,32,FLEN)
NAN_BOXED(2108806735,32,FLEN)
NAN_BOXED(2167947818,32,FLEN)
NAN_BOXED(3217870028,32,FLEN)
NAN_BOXED(2108806735,32,FLEN)
NAN_BOXED(2167947818,32,FLEN)
NAN_BOXED(3218828726,32,FLEN)
NAN_BOXED(2108806735,32,FLEN)
NAN_BOXED(2167947818,32,FLEN)
NAN_BOXED(3219128320,32,FLEN)
NAN_BOXED(2108806735,32,FLEN)
NAN_BOXED(2167947818,32,FLEN)
NAN_BOXED(3219547750,32,FLEN)
NAN_BOXED(2108806735,32,FLEN)
NAN_BOXED(2167947818,32,FLEN)
NAN_BOXED(3220027099,32,FLEN)
NAN_BOXED(2108806735,32,FLEN)
NAN_BOXED(2167947818,32,FLEN)
NAN_BOXED(3220176896,32,FLEN)
NAN_BOXED(2108806735,32,FLEN)
NAN_BOXED(2167947818,32,FLEN)
NAN_BOXED(3220701184,32,FLEN)
NAN_BOXED(2108806735,32,FLEN)
NAN_BOXED(2167947818,32,FLEN)
NAN_BOXED(3220963328,32,FLEN)
NAN_BOXED(2108806735,32,FLEN)
NAN_BOXED(2167947818,32,FLEN)
NAN_BOXED(3221094400,32,FLEN)
NAN_BOXED(2108806735,32,FLEN)
NAN_BOXED(2167947818,32,FLEN)
NAN_BOXED(3221159936,32,FLEN)
NAN_BOXED(2108806735,32,FLEN)
NAN_BOXED(2167947818,32,FLEN)
NAN_BOXED(3221192704,32,FLEN)
NAN_BOXED(2108806735,32,FLEN)
NAN_BOXED(2167947818,32,FLEN)
NAN_BOXED(3221209088,32,FLEN)
NAN_BOXED(2108806735,32,FLEN)
NAN_BOXED(2167947818,32,FLEN)
NAN_BOXED(3221217280,32,FLEN)
NAN_BOXED(2108806735,32,FLEN)
NAN_BOXED(2167947818,32,FLEN)
NAN_BOXED(3221221376,32,FLEN)
NAN_BOXED(2108806735,32,FLEN)
NAN_BOXED(2167947818,32,FLEN)
NAN_BOXED(3221223424,32,FLEN)
NAN_BOXED(2108806735,32,FLEN)
NAN_BOXED(2167947818,32,FLEN)
NAN_BOXED(3221224448,32,FLEN)
NAN_BOXED(2108806735,32,FLEN)
NAN_BOXED(2167947818,32,FLEN)
NAN_BOXED(3221224960,32,FLEN)
NAN_BOXED(2108806735,32,FLEN)
NAN_BOXED(2167947818,32,FLEN)
NAN_BOXED(3221225216,32,FLEN)
NAN_BOXED(2108806735,32,FLEN)
NAN_BOXED(2167947818,32,FLEN)
NAN_BOXED(3221225344,32,FLEN)
NAN_BOXED(2108806735,32,FLEN)
NAN_BOXED(2167947818,32,FLEN)
NAN_BOXED(3221225408,32,FLEN)
NAN_BOXED(2108806735,32,FLEN)
NAN_BOXED(2167947818,32,FLEN)
NAN_BOXED(3221225440,32,FLEN)
NAN_BOXED(2108806735,32,FLEN)
NAN_BOXED(2167947818,32,FLEN)
NAN_BOXED(3221225456,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
