
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:17:59 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_5120:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3a6fc5 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x2fc26c and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dba6fc5; op2val:0x412fc26c;
op3val:0x6200000f; valaddr_reg:x3; val_offset:15360*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15360*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5121:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3a6fc5 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x2fc26c and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dba6fc5; op2val:0x412fc26c;
op3val:0x6200001f; valaddr_reg:x3; val_offset:15363*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15363*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5122:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3a6fc5 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x2fc26c and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dba6fc5; op2val:0x412fc26c;
op3val:0x6200003f; valaddr_reg:x3; val_offset:15366*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15366*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5123:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3a6fc5 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x2fc26c and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dba6fc5; op2val:0x412fc26c;
op3val:0x6200007f; valaddr_reg:x3; val_offset:15369*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15369*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5124:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3a6fc5 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x2fc26c and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dba6fc5; op2val:0x412fc26c;
op3val:0x620000ff; valaddr_reg:x3; val_offset:15372*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15372*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5125:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3a6fc5 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x2fc26c and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dba6fc5; op2val:0x412fc26c;
op3val:0x620001ff; valaddr_reg:x3; val_offset:15375*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15375*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5126:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3a6fc5 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x2fc26c and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dba6fc5; op2val:0x412fc26c;
op3val:0x620003ff; valaddr_reg:x3; val_offset:15378*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15378*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5127:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3a6fc5 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x2fc26c and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dba6fc5; op2val:0x412fc26c;
op3val:0x620007ff; valaddr_reg:x3; val_offset:15381*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15381*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5128:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3a6fc5 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x2fc26c and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dba6fc5; op2val:0x412fc26c;
op3val:0x62000fff; valaddr_reg:x3; val_offset:15384*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15384*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5129:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3a6fc5 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x2fc26c and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dba6fc5; op2val:0x412fc26c;
op3val:0x62001fff; valaddr_reg:x3; val_offset:15387*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15387*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5130:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3a6fc5 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x2fc26c and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dba6fc5; op2val:0x412fc26c;
op3val:0x62003fff; valaddr_reg:x3; val_offset:15390*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15390*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5131:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3a6fc5 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x2fc26c and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dba6fc5; op2val:0x412fc26c;
op3val:0x62007fff; valaddr_reg:x3; val_offset:15393*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15393*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5132:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3a6fc5 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x2fc26c and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dba6fc5; op2val:0x412fc26c;
op3val:0x6200ffff; valaddr_reg:x3; val_offset:15396*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15396*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5133:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3a6fc5 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x2fc26c and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dba6fc5; op2val:0x412fc26c;
op3val:0x6201ffff; valaddr_reg:x3; val_offset:15399*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15399*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5134:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3a6fc5 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x2fc26c and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dba6fc5; op2val:0x412fc26c;
op3val:0x6203ffff; valaddr_reg:x3; val_offset:15402*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15402*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5135:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3a6fc5 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x2fc26c and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dba6fc5; op2val:0x412fc26c;
op3val:0x6207ffff; valaddr_reg:x3; val_offset:15405*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15405*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5136:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3a6fc5 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x2fc26c and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dba6fc5; op2val:0x412fc26c;
op3val:0x620fffff; valaddr_reg:x3; val_offset:15408*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15408*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5137:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3a6fc5 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x2fc26c and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dba6fc5; op2val:0x412fc26c;
op3val:0x621fffff; valaddr_reg:x3; val_offset:15411*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15411*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5138:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3a6fc5 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x2fc26c and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dba6fc5; op2val:0x412fc26c;
op3val:0x623fffff; valaddr_reg:x3; val_offset:15414*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15414*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5139:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3a6fc5 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x2fc26c and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dba6fc5; op2val:0x412fc26c;
op3val:0x62400000; valaddr_reg:x3; val_offset:15417*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15417*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5140:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3a6fc5 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x2fc26c and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dba6fc5; op2val:0x412fc26c;
op3val:0x62600000; valaddr_reg:x3; val_offset:15420*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15420*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5141:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3a6fc5 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x2fc26c and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dba6fc5; op2val:0x412fc26c;
op3val:0x62700000; valaddr_reg:x3; val_offset:15423*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15423*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5142:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3a6fc5 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x2fc26c and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dba6fc5; op2val:0x412fc26c;
op3val:0x62780000; valaddr_reg:x3; val_offset:15426*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15426*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5143:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3a6fc5 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x2fc26c and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dba6fc5; op2val:0x412fc26c;
op3val:0x627c0000; valaddr_reg:x3; val_offset:15429*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15429*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5144:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3a6fc5 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x2fc26c and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dba6fc5; op2val:0x412fc26c;
op3val:0x627e0000; valaddr_reg:x3; val_offset:15432*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15432*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5145:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3a6fc5 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x2fc26c and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dba6fc5; op2val:0x412fc26c;
op3val:0x627f0000; valaddr_reg:x3; val_offset:15435*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15435*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5146:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3a6fc5 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x2fc26c and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dba6fc5; op2val:0x412fc26c;
op3val:0x627f8000; valaddr_reg:x3; val_offset:15438*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15438*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5147:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3a6fc5 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x2fc26c and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dba6fc5; op2val:0x412fc26c;
op3val:0x627fc000; valaddr_reg:x3; val_offset:15441*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15441*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5148:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3a6fc5 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x2fc26c and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dba6fc5; op2val:0x412fc26c;
op3val:0x627fe000; valaddr_reg:x3; val_offset:15444*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15444*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5149:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3a6fc5 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x2fc26c and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dba6fc5; op2val:0x412fc26c;
op3val:0x627ff000; valaddr_reg:x3; val_offset:15447*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15447*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5150:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3a6fc5 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x2fc26c and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dba6fc5; op2val:0x412fc26c;
op3val:0x627ff800; valaddr_reg:x3; val_offset:15450*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15450*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5151:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3a6fc5 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x2fc26c and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dba6fc5; op2val:0x412fc26c;
op3val:0x627ffc00; valaddr_reg:x3; val_offset:15453*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15453*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5152:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3a6fc5 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x2fc26c and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dba6fc5; op2val:0x412fc26c;
op3val:0x627ffe00; valaddr_reg:x3; val_offset:15456*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15456*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5153:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3a6fc5 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x2fc26c and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dba6fc5; op2val:0x412fc26c;
op3val:0x627fff00; valaddr_reg:x3; val_offset:15459*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15459*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5154:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3a6fc5 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x2fc26c and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dba6fc5; op2val:0x412fc26c;
op3val:0x627fff80; valaddr_reg:x3; val_offset:15462*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15462*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5155:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3a6fc5 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x2fc26c and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dba6fc5; op2val:0x412fc26c;
op3val:0x627fffc0; valaddr_reg:x3; val_offset:15465*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15465*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5156:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3a6fc5 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x2fc26c and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dba6fc5; op2val:0x412fc26c;
op3val:0x627fffe0; valaddr_reg:x3; val_offset:15468*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15468*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5157:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3a6fc5 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x2fc26c and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dba6fc5; op2val:0x412fc26c;
op3val:0x627ffff0; valaddr_reg:x3; val_offset:15471*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15471*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5158:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3a6fc5 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x2fc26c and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dba6fc5; op2val:0x412fc26c;
op3val:0x627ffff8; valaddr_reg:x3; val_offset:15474*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15474*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5159:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3a6fc5 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x2fc26c and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dba6fc5; op2val:0x412fc26c;
op3val:0x627ffffc; valaddr_reg:x3; val_offset:15477*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15477*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5160:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3a6fc5 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x2fc26c and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dba6fc5; op2val:0x412fc26c;
op3val:0x627ffffe; valaddr_reg:x3; val_offset:15480*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15480*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5161:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3a6fc5 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x2fc26c and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dba6fc5; op2val:0x412fc26c;
op3val:0x627fffff; valaddr_reg:x3; val_offset:15483*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15483*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5162:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3a6fc5 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x2fc26c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dba6fc5; op2val:0x412fc26c;
op3val:0x7f000001; valaddr_reg:x3; val_offset:15486*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15486*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5163:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3a6fc5 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x2fc26c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dba6fc5; op2val:0x412fc26c;
op3val:0x7f000003; valaddr_reg:x3; val_offset:15489*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15489*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5164:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3a6fc5 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x2fc26c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dba6fc5; op2val:0x412fc26c;
op3val:0x7f000007; valaddr_reg:x3; val_offset:15492*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15492*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5165:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3a6fc5 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x2fc26c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dba6fc5; op2val:0x412fc26c;
op3val:0x7f199999; valaddr_reg:x3; val_offset:15495*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15495*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5166:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3a6fc5 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x2fc26c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dba6fc5; op2val:0x412fc26c;
op3val:0x7f249249; valaddr_reg:x3; val_offset:15498*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15498*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5167:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3a6fc5 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x2fc26c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dba6fc5; op2val:0x412fc26c;
op3val:0x7f333333; valaddr_reg:x3; val_offset:15501*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15501*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5168:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3a6fc5 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x2fc26c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dba6fc5; op2val:0x412fc26c;
op3val:0x7f36db6d; valaddr_reg:x3; val_offset:15504*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15504*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5169:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3a6fc5 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x2fc26c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dba6fc5; op2val:0x412fc26c;
op3val:0x7f3bbbbb; valaddr_reg:x3; val_offset:15507*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15507*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5170:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3a6fc5 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x2fc26c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dba6fc5; op2val:0x412fc26c;
op3val:0x7f444444; valaddr_reg:x3; val_offset:15510*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15510*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5171:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3a6fc5 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x2fc26c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dba6fc5; op2val:0x412fc26c;
op3val:0x7f4ccccc; valaddr_reg:x3; val_offset:15513*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15513*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5172:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3a6fc5 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x2fc26c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dba6fc5; op2val:0x412fc26c;
op3val:0x7f5b6db6; valaddr_reg:x3; val_offset:15516*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15516*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5173:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3a6fc5 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x2fc26c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dba6fc5; op2val:0x412fc26c;
op3val:0x7f666666; valaddr_reg:x3; val_offset:15519*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15519*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5174:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3a6fc5 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x2fc26c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dba6fc5; op2val:0x412fc26c;
op3val:0x7f6db6db; valaddr_reg:x3; val_offset:15522*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15522*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5175:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3a6fc5 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x2fc26c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dba6fc5; op2val:0x412fc26c;
op3val:0x7f7ffff8; valaddr_reg:x3; val_offset:15525*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15525*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5176:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3a6fc5 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x2fc26c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dba6fc5; op2val:0x412fc26c;
op3val:0x7f7ffffc; valaddr_reg:x3; val_offset:15528*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15528*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5177:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3a6fc5 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x2fc26c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dba6fc5; op2val:0x412fc26c;
op3val:0x7f7ffffe; valaddr_reg:x3; val_offset:15531*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15531*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5178:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3ef61a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbef61a; op2val:0x0;
op3val:0x800001; valaddr_reg:x3; val_offset:15534*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15534*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5179:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3ef61a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbef61a; op2val:0x0;
op3val:0x800003; valaddr_reg:x3; val_offset:15537*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15537*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5180:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3ef61a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbef61a; op2val:0x0;
op3val:0x800007; valaddr_reg:x3; val_offset:15540*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15540*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5181:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3ef61a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbef61a; op2val:0x0;
op3val:0x999999; valaddr_reg:x3; val_offset:15543*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15543*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5182:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3ef61a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbef61a; op2val:0x0;
op3val:0xa49249; valaddr_reg:x3; val_offset:15546*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15546*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5183:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3ef61a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbef61a; op2val:0x0;
op3val:0xb33333; valaddr_reg:x3; val_offset:15549*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15549*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5184:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3ef61a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbef61a; op2val:0x0;
op3val:0xb6db6d; valaddr_reg:x3; val_offset:15552*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15552*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5185:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3ef61a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbef61a; op2val:0x0;
op3val:0xbbbbbb; valaddr_reg:x3; val_offset:15555*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15555*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5186:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3ef61a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbef61a; op2val:0x0;
op3val:0xc44444; valaddr_reg:x3; val_offset:15558*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15558*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5187:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3ef61a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbef61a; op2val:0x0;
op3val:0xcccccc; valaddr_reg:x3; val_offset:15561*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15561*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5188:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3ef61a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbef61a; op2val:0x0;
op3val:0xdb6db6; valaddr_reg:x3; val_offset:15564*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15564*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5189:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3ef61a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbef61a; op2val:0x0;
op3val:0xe66666; valaddr_reg:x3; val_offset:15567*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15567*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5190:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3ef61a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbef61a; op2val:0x0;
op3val:0xedb6db; valaddr_reg:x3; val_offset:15570*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15570*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5191:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3ef61a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbef61a; op2val:0x0;
op3val:0xfffff8; valaddr_reg:x3; val_offset:15573*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15573*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5192:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3ef61a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbef61a; op2val:0x0;
op3val:0xfffffc; valaddr_reg:x3; val_offset:15576*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15576*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5193:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3ef61a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbef61a; op2val:0x0;
op3val:0xfffffe; valaddr_reg:x3; val_offset:15579*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15579*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5194:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3ef61a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbef61a; op2val:0x0;
op3val:0xe000000; valaddr_reg:x3; val_offset:15582*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15582*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5195:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3ef61a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbef61a; op2val:0x0;
op3val:0xe000001; valaddr_reg:x3; val_offset:15585*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15585*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5196:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3ef61a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbef61a; op2val:0x0;
op3val:0xe000003; valaddr_reg:x3; val_offset:15588*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15588*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5197:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3ef61a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbef61a; op2val:0x0;
op3val:0xe000007; valaddr_reg:x3; val_offset:15591*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15591*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5198:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3ef61a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbef61a; op2val:0x0;
op3val:0xe00000f; valaddr_reg:x3; val_offset:15594*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15594*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5199:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3ef61a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbef61a; op2val:0x0;
op3val:0xe00001f; valaddr_reg:x3; val_offset:15597*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15597*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5200:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3ef61a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbef61a; op2val:0x0;
op3val:0xe00003f; valaddr_reg:x3; val_offset:15600*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15600*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5201:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3ef61a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbef61a; op2val:0x0;
op3val:0xe00007f; valaddr_reg:x3; val_offset:15603*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15603*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5202:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3ef61a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbef61a; op2val:0x0;
op3val:0xe0000ff; valaddr_reg:x3; val_offset:15606*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15606*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5203:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3ef61a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbef61a; op2val:0x0;
op3val:0xe0001ff; valaddr_reg:x3; val_offset:15609*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15609*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5204:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3ef61a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbef61a; op2val:0x0;
op3val:0xe0003ff; valaddr_reg:x3; val_offset:15612*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15612*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5205:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3ef61a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbef61a; op2val:0x0;
op3val:0xe0007ff; valaddr_reg:x3; val_offset:15615*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15615*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5206:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3ef61a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbef61a; op2val:0x0;
op3val:0xe000fff; valaddr_reg:x3; val_offset:15618*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15618*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5207:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3ef61a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbef61a; op2val:0x0;
op3val:0xe001fff; valaddr_reg:x3; val_offset:15621*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15621*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5208:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3ef61a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbef61a; op2val:0x0;
op3val:0xe003fff; valaddr_reg:x3; val_offset:15624*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15624*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5209:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3ef61a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbef61a; op2val:0x0;
op3val:0xe007fff; valaddr_reg:x3; val_offset:15627*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15627*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5210:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3ef61a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbef61a; op2val:0x0;
op3val:0xe00ffff; valaddr_reg:x3; val_offset:15630*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15630*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5211:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3ef61a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbef61a; op2val:0x0;
op3val:0xe01ffff; valaddr_reg:x3; val_offset:15633*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15633*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5212:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3ef61a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbef61a; op2val:0x0;
op3val:0xe03ffff; valaddr_reg:x3; val_offset:15636*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15636*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5213:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3ef61a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbef61a; op2val:0x0;
op3val:0xe07ffff; valaddr_reg:x3; val_offset:15639*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15639*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5214:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3ef61a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbef61a; op2val:0x0;
op3val:0xe0fffff; valaddr_reg:x3; val_offset:15642*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15642*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5215:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3ef61a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbef61a; op2val:0x0;
op3val:0xe1fffff; valaddr_reg:x3; val_offset:15645*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15645*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5216:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3ef61a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbef61a; op2val:0x0;
op3val:0xe3fffff; valaddr_reg:x3; val_offset:15648*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15648*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5217:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3ef61a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbef61a; op2val:0x0;
op3val:0xe400000; valaddr_reg:x3; val_offset:15651*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15651*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5218:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3ef61a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbef61a; op2val:0x0;
op3val:0xe600000; valaddr_reg:x3; val_offset:15654*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15654*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5219:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3ef61a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbef61a; op2val:0x0;
op3val:0xe700000; valaddr_reg:x3; val_offset:15657*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15657*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5220:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3ef61a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbef61a; op2val:0x0;
op3val:0xe780000; valaddr_reg:x3; val_offset:15660*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15660*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5221:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3ef61a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbef61a; op2val:0x0;
op3val:0xe7c0000; valaddr_reg:x3; val_offset:15663*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15663*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5222:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3ef61a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbef61a; op2val:0x0;
op3val:0xe7e0000; valaddr_reg:x3; val_offset:15666*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15666*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5223:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3ef61a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbef61a; op2val:0x0;
op3val:0xe7f0000; valaddr_reg:x3; val_offset:15669*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15669*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5224:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3ef61a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbef61a; op2val:0x0;
op3val:0xe7f8000; valaddr_reg:x3; val_offset:15672*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15672*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5225:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3ef61a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbef61a; op2val:0x0;
op3val:0xe7fc000; valaddr_reg:x3; val_offset:15675*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15675*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5226:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3ef61a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbef61a; op2val:0x0;
op3val:0xe7fe000; valaddr_reg:x3; val_offset:15678*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15678*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5227:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3ef61a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbef61a; op2val:0x0;
op3val:0xe7ff000; valaddr_reg:x3; val_offset:15681*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15681*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5228:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3ef61a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbef61a; op2val:0x0;
op3val:0xe7ff800; valaddr_reg:x3; val_offset:15684*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15684*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5229:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3ef61a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbef61a; op2val:0x0;
op3val:0xe7ffc00; valaddr_reg:x3; val_offset:15687*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15687*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5230:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3ef61a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbef61a; op2val:0x0;
op3val:0xe7ffe00; valaddr_reg:x3; val_offset:15690*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15690*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5231:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3ef61a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbef61a; op2val:0x0;
op3val:0xe7fff00; valaddr_reg:x3; val_offset:15693*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15693*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5232:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3ef61a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbef61a; op2val:0x0;
op3val:0xe7fff80; valaddr_reg:x3; val_offset:15696*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15696*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5233:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3ef61a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbef61a; op2val:0x0;
op3val:0xe7fffc0; valaddr_reg:x3; val_offset:15699*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15699*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5234:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3ef61a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbef61a; op2val:0x0;
op3val:0xe7fffe0; valaddr_reg:x3; val_offset:15702*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15702*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5235:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3ef61a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbef61a; op2val:0x0;
op3val:0xe7ffff0; valaddr_reg:x3; val_offset:15705*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15705*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5236:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3ef61a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbef61a; op2val:0x0;
op3val:0xe7ffff8; valaddr_reg:x3; val_offset:15708*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15708*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5237:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3ef61a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbef61a; op2val:0x0;
op3val:0xe7ffffc; valaddr_reg:x3; val_offset:15711*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15711*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5238:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3ef61a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbef61a; op2val:0x0;
op3val:0xe7ffffe; valaddr_reg:x3; val_offset:15714*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15714*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5239:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3ef61a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbef61a; op2val:0x0;
op3val:0xe7fffff; valaddr_reg:x3; val_offset:15717*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15717*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5240:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3f2542 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x2b6df8 and fs3 == 0 and fe3 == 0x69 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbf2542; op2val:0x12b6df8;
op3val:0x34800000; valaddr_reg:x3; val_offset:15720*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15720*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5241:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3f2542 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x2b6df8 and fs3 == 0 and fe3 == 0x69 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbf2542; op2val:0x12b6df8;
op3val:0x34800001; valaddr_reg:x3; val_offset:15723*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15723*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5242:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3f2542 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x2b6df8 and fs3 == 0 and fe3 == 0x69 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbf2542; op2val:0x12b6df8;
op3val:0x34800003; valaddr_reg:x3; val_offset:15726*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15726*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5243:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3f2542 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x2b6df8 and fs3 == 0 and fe3 == 0x69 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbf2542; op2val:0x12b6df8;
op3val:0x34800007; valaddr_reg:x3; val_offset:15729*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15729*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5244:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3f2542 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x2b6df8 and fs3 == 0 and fe3 == 0x69 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbf2542; op2val:0x12b6df8;
op3val:0x3480000f; valaddr_reg:x3; val_offset:15732*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15732*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5245:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3f2542 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x2b6df8 and fs3 == 0 and fe3 == 0x69 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbf2542; op2val:0x12b6df8;
op3val:0x3480001f; valaddr_reg:x3; val_offset:15735*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15735*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5246:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3f2542 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x2b6df8 and fs3 == 0 and fe3 == 0x69 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbf2542; op2val:0x12b6df8;
op3val:0x3480003f; valaddr_reg:x3; val_offset:15738*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15738*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5247:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3f2542 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x2b6df8 and fs3 == 0 and fe3 == 0x69 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbf2542; op2val:0x12b6df8;
op3val:0x3480007f; valaddr_reg:x3; val_offset:15741*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15741*0 + 3*40*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2109370309,32,FLEN)
NAN_BOXED(1093649004,32,FLEN)
NAN_BOXED(1644167183,32,FLEN)
NAN_BOXED(2109370309,32,FLEN)
NAN_BOXED(1093649004,32,FLEN)
NAN_BOXED(1644167199,32,FLEN)
NAN_BOXED(2109370309,32,FLEN)
NAN_BOXED(1093649004,32,FLEN)
NAN_BOXED(1644167231,32,FLEN)
NAN_BOXED(2109370309,32,FLEN)
NAN_BOXED(1093649004,32,FLEN)
NAN_BOXED(1644167295,32,FLEN)
NAN_BOXED(2109370309,32,FLEN)
NAN_BOXED(1093649004,32,FLEN)
NAN_BOXED(1644167423,32,FLEN)
NAN_BOXED(2109370309,32,FLEN)
NAN_BOXED(1093649004,32,FLEN)
NAN_BOXED(1644167679,32,FLEN)
NAN_BOXED(2109370309,32,FLEN)
NAN_BOXED(1093649004,32,FLEN)
NAN_BOXED(1644168191,32,FLEN)
NAN_BOXED(2109370309,32,FLEN)
NAN_BOXED(1093649004,32,FLEN)
NAN_BOXED(1644169215,32,FLEN)
NAN_BOXED(2109370309,32,FLEN)
NAN_BOXED(1093649004,32,FLEN)
NAN_BOXED(1644171263,32,FLEN)
NAN_BOXED(2109370309,32,FLEN)
NAN_BOXED(1093649004,32,FLEN)
NAN_BOXED(1644175359,32,FLEN)
NAN_BOXED(2109370309,32,FLEN)
NAN_BOXED(1093649004,32,FLEN)
NAN_BOXED(1644183551,32,FLEN)
NAN_BOXED(2109370309,32,FLEN)
NAN_BOXED(1093649004,32,FLEN)
NAN_BOXED(1644199935,32,FLEN)
NAN_BOXED(2109370309,32,FLEN)
NAN_BOXED(1093649004,32,FLEN)
NAN_BOXED(1644232703,32,FLEN)
NAN_BOXED(2109370309,32,FLEN)
NAN_BOXED(1093649004,32,FLEN)
NAN_BOXED(1644298239,32,FLEN)
NAN_BOXED(2109370309,32,FLEN)
NAN_BOXED(1093649004,32,FLEN)
NAN_BOXED(1644429311,32,FLEN)
NAN_BOXED(2109370309,32,FLEN)
NAN_BOXED(1093649004,32,FLEN)
NAN_BOXED(1644691455,32,FLEN)
NAN_BOXED(2109370309,32,FLEN)
NAN_BOXED(1093649004,32,FLEN)
NAN_BOXED(1645215743,32,FLEN)
NAN_BOXED(2109370309,32,FLEN)
NAN_BOXED(1093649004,32,FLEN)
NAN_BOXED(1646264319,32,FLEN)
NAN_BOXED(2109370309,32,FLEN)
NAN_BOXED(1093649004,32,FLEN)
NAN_BOXED(1648361471,32,FLEN)
NAN_BOXED(2109370309,32,FLEN)
NAN_BOXED(1093649004,32,FLEN)
NAN_BOXED(1648361472,32,FLEN)
NAN_BOXED(2109370309,32,FLEN)
NAN_BOXED(1093649004,32,FLEN)
NAN_BOXED(1650458624,32,FLEN)
NAN_BOXED(2109370309,32,FLEN)
NAN_BOXED(1093649004,32,FLEN)
NAN_BOXED(1651507200,32,FLEN)
NAN_BOXED(2109370309,32,FLEN)
NAN_BOXED(1093649004,32,FLEN)
NAN_BOXED(1652031488,32,FLEN)
NAN_BOXED(2109370309,32,FLEN)
NAN_BOXED(1093649004,32,FLEN)
NAN_BOXED(1652293632,32,FLEN)
NAN_BOXED(2109370309,32,FLEN)
NAN_BOXED(1093649004,32,FLEN)
NAN_BOXED(1652424704,32,FLEN)
NAN_BOXED(2109370309,32,FLEN)
NAN_BOXED(1093649004,32,FLEN)
NAN_BOXED(1652490240,32,FLEN)
NAN_BOXED(2109370309,32,FLEN)
NAN_BOXED(1093649004,32,FLEN)
NAN_BOXED(1652523008,32,FLEN)
NAN_BOXED(2109370309,32,FLEN)
NAN_BOXED(1093649004,32,FLEN)
NAN_BOXED(1652539392,32,FLEN)
NAN_BOXED(2109370309,32,FLEN)
NAN_BOXED(1093649004,32,FLEN)
NAN_BOXED(1652547584,32,FLEN)
NAN_BOXED(2109370309,32,FLEN)
NAN_BOXED(1093649004,32,FLEN)
NAN_BOXED(1652551680,32,FLEN)
NAN_BOXED(2109370309,32,FLEN)
NAN_BOXED(1093649004,32,FLEN)
NAN_BOXED(1652553728,32,FLEN)
NAN_BOXED(2109370309,32,FLEN)
NAN_BOXED(1093649004,32,FLEN)
NAN_BOXED(1652554752,32,FLEN)
NAN_BOXED(2109370309,32,FLEN)
NAN_BOXED(1093649004,32,FLEN)
NAN_BOXED(1652555264,32,FLEN)
NAN_BOXED(2109370309,32,FLEN)
NAN_BOXED(1093649004,32,FLEN)
NAN_BOXED(1652555520,32,FLEN)
NAN_BOXED(2109370309,32,FLEN)
NAN_BOXED(1093649004,32,FLEN)
NAN_BOXED(1652555648,32,FLEN)
NAN_BOXED(2109370309,32,FLEN)
NAN_BOXED(1093649004,32,FLEN)
NAN_BOXED(1652555712,32,FLEN)
NAN_BOXED(2109370309,32,FLEN)
NAN_BOXED(1093649004,32,FLEN)
NAN_BOXED(1652555744,32,FLEN)
NAN_BOXED(2109370309,32,FLEN)
NAN_BOXED(1093649004,32,FLEN)
NAN_BOXED(1652555760,32,FLEN)
NAN_BOXED(2109370309,32,FLEN)
NAN_BOXED(1093649004,32,FLEN)
NAN_BOXED(1652555768,32,FLEN)
NAN_BOXED(2109370309,32,FLEN)
NAN_BOXED(1093649004,32,FLEN)
NAN_BOXED(1652555772,32,FLEN)
NAN_BOXED(2109370309,32,FLEN)
NAN_BOXED(1093649004,32,FLEN)
NAN_BOXED(1652555774,32,FLEN)
NAN_BOXED(2109370309,32,FLEN)
NAN_BOXED(1093649004,32,FLEN)
NAN_BOXED(1652555775,32,FLEN)
NAN_BOXED(2109370309,32,FLEN)
NAN_BOXED(1093649004,32,FLEN)
NAN_BOXED(2130706433,32,FLEN)
NAN_BOXED(2109370309,32,FLEN)
NAN_BOXED(1093649004,32,FLEN)
NAN_BOXED(2130706435,32,FLEN)
NAN_BOXED(2109370309,32,FLEN)
NAN_BOXED(1093649004,32,FLEN)
NAN_BOXED(2130706439,32,FLEN)
NAN_BOXED(2109370309,32,FLEN)
NAN_BOXED(1093649004,32,FLEN)
NAN_BOXED(2132384153,32,FLEN)
NAN_BOXED(2109370309,32,FLEN)
NAN_BOXED(1093649004,32,FLEN)
NAN_BOXED(2133103177,32,FLEN)
NAN_BOXED(2109370309,32,FLEN)
NAN_BOXED(1093649004,32,FLEN)
NAN_BOXED(2134061875,32,FLEN)
NAN_BOXED(2109370309,32,FLEN)
NAN_BOXED(1093649004,32,FLEN)
NAN_BOXED(2134301549,32,FLEN)
NAN_BOXED(2109370309,32,FLEN)
NAN_BOXED(1093649004,32,FLEN)
NAN_BOXED(2134621115,32,FLEN)
NAN_BOXED(2109370309,32,FLEN)
NAN_BOXED(1093649004,32,FLEN)
NAN_BOXED(2135180356,32,FLEN)
NAN_BOXED(2109370309,32,FLEN)
NAN_BOXED(1093649004,32,FLEN)
NAN_BOXED(2135739596,32,FLEN)
NAN_BOXED(2109370309,32,FLEN)
NAN_BOXED(1093649004,32,FLEN)
NAN_BOXED(2136698294,32,FLEN)
NAN_BOXED(2109370309,32,FLEN)
NAN_BOXED(1093649004,32,FLEN)
NAN_BOXED(2137417318,32,FLEN)
NAN_BOXED(2109370309,32,FLEN)
NAN_BOXED(1093649004,32,FLEN)
NAN_BOXED(2137896667,32,FLEN)
NAN_BOXED(2109370309,32,FLEN)
NAN_BOXED(1093649004,32,FLEN)
NAN_BOXED(2139095032,32,FLEN)
NAN_BOXED(2109370309,32,FLEN)
NAN_BOXED(1093649004,32,FLEN)
NAN_BOXED(2139095036,32,FLEN)
NAN_BOXED(2109370309,32,FLEN)
NAN_BOXED(1093649004,32,FLEN)
NAN_BOXED(2139095038,32,FLEN)
NAN_BOXED(2109666842,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(2109666842,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388611,32,FLEN)
NAN_BOXED(2109666842,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388615,32,FLEN)
NAN_BOXED(2109666842,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(10066329,32,FLEN)
NAN_BOXED(2109666842,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(10785353,32,FLEN)
NAN_BOXED(2109666842,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(11744051,32,FLEN)
NAN_BOXED(2109666842,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(11983725,32,FLEN)
NAN_BOXED(2109666842,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(12303291,32,FLEN)
NAN_BOXED(2109666842,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(12862532,32,FLEN)
NAN_BOXED(2109666842,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(13421772,32,FLEN)
NAN_BOXED(2109666842,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(14380470,32,FLEN)
NAN_BOXED(2109666842,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(15099494,32,FLEN)
NAN_BOXED(2109666842,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(15578843,32,FLEN)
NAN_BOXED(2109666842,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777208,32,FLEN)
NAN_BOXED(2109666842,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777212,32,FLEN)
NAN_BOXED(2109666842,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777214,32,FLEN)
NAN_BOXED(2109666842,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234881024,32,FLEN)
NAN_BOXED(2109666842,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234881025,32,FLEN)
NAN_BOXED(2109666842,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234881027,32,FLEN)
NAN_BOXED(2109666842,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234881031,32,FLEN)
NAN_BOXED(2109666842,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234881039,32,FLEN)
NAN_BOXED(2109666842,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234881055,32,FLEN)
NAN_BOXED(2109666842,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234881087,32,FLEN)
NAN_BOXED(2109666842,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234881151,32,FLEN)
NAN_BOXED(2109666842,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234881279,32,FLEN)
NAN_BOXED(2109666842,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234881535,32,FLEN)
NAN_BOXED(2109666842,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234882047,32,FLEN)
NAN_BOXED(2109666842,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234883071,32,FLEN)
NAN_BOXED(2109666842,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234885119,32,FLEN)
NAN_BOXED(2109666842,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234889215,32,FLEN)
NAN_BOXED(2109666842,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234897407,32,FLEN)
NAN_BOXED(2109666842,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234913791,32,FLEN)
NAN_BOXED(2109666842,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234946559,32,FLEN)
NAN_BOXED(2109666842,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(235012095,32,FLEN)
NAN_BOXED(2109666842,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(235143167,32,FLEN)
NAN_BOXED(2109666842,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(235405311,32,FLEN)
NAN_BOXED(2109666842,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(235929599,32,FLEN)
NAN_BOXED(2109666842,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(236978175,32,FLEN)
NAN_BOXED(2109666842,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(239075327,32,FLEN)
NAN_BOXED(2109666842,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(239075328,32,FLEN)
NAN_BOXED(2109666842,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(241172480,32,FLEN)
NAN_BOXED(2109666842,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(242221056,32,FLEN)
NAN_BOXED(2109666842,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(242745344,32,FLEN)
NAN_BOXED(2109666842,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243007488,32,FLEN)
NAN_BOXED(2109666842,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243138560,32,FLEN)
NAN_BOXED(2109666842,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243204096,32,FLEN)
NAN_BOXED(2109666842,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243236864,32,FLEN)
NAN_BOXED(2109666842,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243253248,32,FLEN)
NAN_BOXED(2109666842,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243261440,32,FLEN)
NAN_BOXED(2109666842,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243265536,32,FLEN)
NAN_BOXED(2109666842,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243267584,32,FLEN)
NAN_BOXED(2109666842,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243268608,32,FLEN)
NAN_BOXED(2109666842,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243269120,32,FLEN)
NAN_BOXED(2109666842,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243269376,32,FLEN)
NAN_BOXED(2109666842,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243269504,32,FLEN)
NAN_BOXED(2109666842,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243269568,32,FLEN)
NAN_BOXED(2109666842,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243269600,32,FLEN)
NAN_BOXED(2109666842,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243269616,32,FLEN)
NAN_BOXED(2109666842,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243269624,32,FLEN)
NAN_BOXED(2109666842,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243269628,32,FLEN)
NAN_BOXED(2109666842,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243269630,32,FLEN)
NAN_BOXED(2109666842,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243269631,32,FLEN)
NAN_BOXED(2109678914,32,FLEN)
NAN_BOXED(19623416,32,FLEN)
NAN_BOXED(880803840,32,FLEN)
NAN_BOXED(2109678914,32,FLEN)
NAN_BOXED(19623416,32,FLEN)
NAN_BOXED(880803841,32,FLEN)
NAN_BOXED(2109678914,32,FLEN)
NAN_BOXED(19623416,32,FLEN)
NAN_BOXED(880803843,32,FLEN)
NAN_BOXED(2109678914,32,FLEN)
NAN_BOXED(19623416,32,FLEN)
NAN_BOXED(880803847,32,FLEN)
NAN_BOXED(2109678914,32,FLEN)
NAN_BOXED(19623416,32,FLEN)
NAN_BOXED(880803855,32,FLEN)
NAN_BOXED(2109678914,32,FLEN)
NAN_BOXED(19623416,32,FLEN)
NAN_BOXED(880803871,32,FLEN)
NAN_BOXED(2109678914,32,FLEN)
NAN_BOXED(19623416,32,FLEN)
NAN_BOXED(880803903,32,FLEN)
NAN_BOXED(2109678914,32,FLEN)
NAN_BOXED(19623416,32,FLEN)
NAN_BOXED(880803967,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
