
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:17:59 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_5376:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x433d56 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc33d56; op2val:0x0;
op3val:0xedb6db; valaddr_reg:x3; val_offset:16128*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16128*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5377:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x433d56 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc33d56; op2val:0x0;
op3val:0xfffff8; valaddr_reg:x3; val_offset:16131*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16131*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5378:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x433d56 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc33d56; op2val:0x0;
op3val:0xfffffc; valaddr_reg:x3; val_offset:16134*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16134*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5379:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x433d56 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc33d56; op2val:0x0;
op3val:0xfffffe; valaddr_reg:x3; val_offset:16137*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16137*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5380:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x433d56 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc33d56; op2val:0x0;
op3val:0x10000000; valaddr_reg:x3; val_offset:16140*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16140*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5381:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x433d56 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc33d56; op2val:0x0;
op3val:0x10000001; valaddr_reg:x3; val_offset:16143*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16143*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5382:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x433d56 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc33d56; op2val:0x0;
op3val:0x10000003; valaddr_reg:x3; val_offset:16146*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16146*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5383:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x433d56 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc33d56; op2val:0x0;
op3val:0x10000007; valaddr_reg:x3; val_offset:16149*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16149*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5384:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x433d56 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc33d56; op2val:0x0;
op3val:0x1000000f; valaddr_reg:x3; val_offset:16152*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16152*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5385:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x433d56 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc33d56; op2val:0x0;
op3val:0x1000001f; valaddr_reg:x3; val_offset:16155*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16155*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5386:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x433d56 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc33d56; op2val:0x0;
op3val:0x1000003f; valaddr_reg:x3; val_offset:16158*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16158*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5387:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x433d56 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc33d56; op2val:0x0;
op3val:0x1000007f; valaddr_reg:x3; val_offset:16161*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16161*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5388:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x433d56 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc33d56; op2val:0x0;
op3val:0x100000ff; valaddr_reg:x3; val_offset:16164*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16164*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5389:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x433d56 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc33d56; op2val:0x0;
op3val:0x100001ff; valaddr_reg:x3; val_offset:16167*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16167*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5390:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x433d56 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc33d56; op2val:0x0;
op3val:0x100003ff; valaddr_reg:x3; val_offset:16170*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16170*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5391:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x433d56 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc33d56; op2val:0x0;
op3val:0x100007ff; valaddr_reg:x3; val_offset:16173*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16173*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5392:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x433d56 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc33d56; op2val:0x0;
op3val:0x10000fff; valaddr_reg:x3; val_offset:16176*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16176*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5393:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x433d56 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc33d56; op2val:0x0;
op3val:0x10001fff; valaddr_reg:x3; val_offset:16179*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16179*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5394:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x433d56 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc33d56; op2val:0x0;
op3val:0x10003fff; valaddr_reg:x3; val_offset:16182*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16182*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5395:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x433d56 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc33d56; op2val:0x0;
op3val:0x10007fff; valaddr_reg:x3; val_offset:16185*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16185*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5396:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x433d56 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc33d56; op2val:0x0;
op3val:0x1000ffff; valaddr_reg:x3; val_offset:16188*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16188*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5397:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x433d56 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc33d56; op2val:0x0;
op3val:0x1001ffff; valaddr_reg:x3; val_offset:16191*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16191*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5398:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x433d56 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc33d56; op2val:0x0;
op3val:0x1003ffff; valaddr_reg:x3; val_offset:16194*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16194*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5399:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x433d56 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc33d56; op2val:0x0;
op3val:0x1007ffff; valaddr_reg:x3; val_offset:16197*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16197*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5400:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x433d56 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc33d56; op2val:0x0;
op3val:0x100fffff; valaddr_reg:x3; val_offset:16200*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16200*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5401:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x433d56 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc33d56; op2val:0x0;
op3val:0x101fffff; valaddr_reg:x3; val_offset:16203*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16203*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5402:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x433d56 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc33d56; op2val:0x0;
op3val:0x103fffff; valaddr_reg:x3; val_offset:16206*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16206*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5403:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x433d56 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc33d56; op2val:0x0;
op3val:0x10400000; valaddr_reg:x3; val_offset:16209*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16209*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5404:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x433d56 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc33d56; op2val:0x0;
op3val:0x10600000; valaddr_reg:x3; val_offset:16212*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16212*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5405:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x433d56 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc33d56; op2val:0x0;
op3val:0x10700000; valaddr_reg:x3; val_offset:16215*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16215*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5406:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x433d56 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc33d56; op2val:0x0;
op3val:0x10780000; valaddr_reg:x3; val_offset:16218*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16218*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5407:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x433d56 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc33d56; op2val:0x0;
op3val:0x107c0000; valaddr_reg:x3; val_offset:16221*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16221*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5408:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x433d56 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc33d56; op2val:0x0;
op3val:0x107e0000; valaddr_reg:x3; val_offset:16224*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16224*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5409:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x433d56 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc33d56; op2val:0x0;
op3val:0x107f0000; valaddr_reg:x3; val_offset:16227*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16227*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5410:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x433d56 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc33d56; op2val:0x0;
op3val:0x107f8000; valaddr_reg:x3; val_offset:16230*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16230*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5411:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x433d56 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc33d56; op2val:0x0;
op3val:0x107fc000; valaddr_reg:x3; val_offset:16233*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16233*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5412:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x433d56 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc33d56; op2val:0x0;
op3val:0x107fe000; valaddr_reg:x3; val_offset:16236*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16236*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5413:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x433d56 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc33d56; op2val:0x0;
op3val:0x107ff000; valaddr_reg:x3; val_offset:16239*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16239*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5414:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x433d56 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc33d56; op2val:0x0;
op3val:0x107ff800; valaddr_reg:x3; val_offset:16242*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16242*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5415:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x433d56 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc33d56; op2val:0x0;
op3val:0x107ffc00; valaddr_reg:x3; val_offset:16245*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16245*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5416:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x433d56 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc33d56; op2val:0x0;
op3val:0x107ffe00; valaddr_reg:x3; val_offset:16248*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16248*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5417:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x433d56 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc33d56; op2val:0x0;
op3val:0x107fff00; valaddr_reg:x3; val_offset:16251*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16251*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5418:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x433d56 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc33d56; op2val:0x0;
op3val:0x107fff80; valaddr_reg:x3; val_offset:16254*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16254*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5419:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x433d56 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc33d56; op2val:0x0;
op3val:0x107fffc0; valaddr_reg:x3; val_offset:16257*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16257*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5420:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x433d56 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc33d56; op2val:0x0;
op3val:0x107fffe0; valaddr_reg:x3; val_offset:16260*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16260*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5421:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x433d56 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc33d56; op2val:0x0;
op3val:0x107ffff0; valaddr_reg:x3; val_offset:16263*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16263*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5422:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x433d56 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc33d56; op2val:0x0;
op3val:0x107ffff8; valaddr_reg:x3; val_offset:16266*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16266*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5423:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x433d56 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc33d56; op2val:0x0;
op3val:0x107ffffc; valaddr_reg:x3; val_offset:16269*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16269*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5424:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x433d56 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc33d56; op2val:0x0;
op3val:0x107ffffe; valaddr_reg:x3; val_offset:16272*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16272*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5425:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x433d56 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc33d56; op2val:0x0;
op3val:0x107fffff; valaddr_reg:x3; val_offset:16275*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16275*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5426:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x480655 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x23d1d9 and fs3 == 0 and fe3 == 0x40 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc80655; op2val:0x123d1d9;
op3val:0x20000000; valaddr_reg:x3; val_offset:16278*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16278*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5427:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x480655 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x23d1d9 and fs3 == 0 and fe3 == 0x40 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc80655; op2val:0x123d1d9;
op3val:0x20000001; valaddr_reg:x3; val_offset:16281*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16281*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5428:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x480655 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x23d1d9 and fs3 == 0 and fe3 == 0x40 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc80655; op2val:0x123d1d9;
op3val:0x20000003; valaddr_reg:x3; val_offset:16284*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16284*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5429:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x480655 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x23d1d9 and fs3 == 0 and fe3 == 0x40 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc80655; op2val:0x123d1d9;
op3val:0x20000007; valaddr_reg:x3; val_offset:16287*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16287*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5430:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x480655 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x23d1d9 and fs3 == 0 and fe3 == 0x40 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc80655; op2val:0x123d1d9;
op3val:0x2000000f; valaddr_reg:x3; val_offset:16290*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16290*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5431:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x480655 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x23d1d9 and fs3 == 0 and fe3 == 0x40 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc80655; op2val:0x123d1d9;
op3val:0x2000001f; valaddr_reg:x3; val_offset:16293*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16293*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5432:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x480655 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x23d1d9 and fs3 == 0 and fe3 == 0x40 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc80655; op2val:0x123d1d9;
op3val:0x2000003f; valaddr_reg:x3; val_offset:16296*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16296*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5433:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x480655 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x23d1d9 and fs3 == 0 and fe3 == 0x40 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc80655; op2val:0x123d1d9;
op3val:0x2000007f; valaddr_reg:x3; val_offset:16299*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16299*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5434:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x480655 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x23d1d9 and fs3 == 0 and fe3 == 0x40 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc80655; op2val:0x123d1d9;
op3val:0x200000ff; valaddr_reg:x3; val_offset:16302*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16302*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5435:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x480655 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x23d1d9 and fs3 == 0 and fe3 == 0x40 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc80655; op2val:0x123d1d9;
op3val:0x200001ff; valaddr_reg:x3; val_offset:16305*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16305*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5436:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x480655 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x23d1d9 and fs3 == 0 and fe3 == 0x40 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc80655; op2val:0x123d1d9;
op3val:0x200003ff; valaddr_reg:x3; val_offset:16308*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16308*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5437:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x480655 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x23d1d9 and fs3 == 0 and fe3 == 0x40 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc80655; op2val:0x123d1d9;
op3val:0x200007ff; valaddr_reg:x3; val_offset:16311*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16311*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5438:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x480655 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x23d1d9 and fs3 == 0 and fe3 == 0x40 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc80655; op2val:0x123d1d9;
op3val:0x20000fff; valaddr_reg:x3; val_offset:16314*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16314*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5439:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x480655 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x23d1d9 and fs3 == 0 and fe3 == 0x40 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc80655; op2val:0x123d1d9;
op3val:0x20001fff; valaddr_reg:x3; val_offset:16317*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16317*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5440:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x480655 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x23d1d9 and fs3 == 0 and fe3 == 0x40 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc80655; op2val:0x123d1d9;
op3val:0x20003fff; valaddr_reg:x3; val_offset:16320*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16320*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5441:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x480655 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x23d1d9 and fs3 == 0 and fe3 == 0x40 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc80655; op2val:0x123d1d9;
op3val:0x20007fff; valaddr_reg:x3; val_offset:16323*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16323*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5442:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x480655 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x23d1d9 and fs3 == 0 and fe3 == 0x40 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc80655; op2val:0x123d1d9;
op3val:0x2000ffff; valaddr_reg:x3; val_offset:16326*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16326*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5443:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x480655 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x23d1d9 and fs3 == 0 and fe3 == 0x40 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc80655; op2val:0x123d1d9;
op3val:0x2001ffff; valaddr_reg:x3; val_offset:16329*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16329*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5444:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x480655 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x23d1d9 and fs3 == 0 and fe3 == 0x40 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc80655; op2val:0x123d1d9;
op3val:0x2003ffff; valaddr_reg:x3; val_offset:16332*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16332*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5445:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x480655 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x23d1d9 and fs3 == 0 and fe3 == 0x40 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc80655; op2val:0x123d1d9;
op3val:0x2007ffff; valaddr_reg:x3; val_offset:16335*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16335*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5446:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x480655 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x23d1d9 and fs3 == 0 and fe3 == 0x40 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc80655; op2val:0x123d1d9;
op3val:0x200fffff; valaddr_reg:x3; val_offset:16338*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16338*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5447:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x480655 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x23d1d9 and fs3 == 0 and fe3 == 0x40 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc80655; op2val:0x123d1d9;
op3val:0x201fffff; valaddr_reg:x3; val_offset:16341*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16341*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5448:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x480655 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x23d1d9 and fs3 == 0 and fe3 == 0x40 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc80655; op2val:0x123d1d9;
op3val:0x203fffff; valaddr_reg:x3; val_offset:16344*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16344*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5449:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x480655 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x23d1d9 and fs3 == 0 and fe3 == 0x40 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc80655; op2val:0x123d1d9;
op3val:0x20400000; valaddr_reg:x3; val_offset:16347*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16347*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5450:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x480655 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x23d1d9 and fs3 == 0 and fe3 == 0x40 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc80655; op2val:0x123d1d9;
op3val:0x20600000; valaddr_reg:x3; val_offset:16350*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16350*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5451:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x480655 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x23d1d9 and fs3 == 0 and fe3 == 0x40 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc80655; op2val:0x123d1d9;
op3val:0x20700000; valaddr_reg:x3; val_offset:16353*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16353*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5452:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x480655 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x23d1d9 and fs3 == 0 and fe3 == 0x40 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc80655; op2val:0x123d1d9;
op3val:0x20780000; valaddr_reg:x3; val_offset:16356*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16356*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5453:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x480655 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x23d1d9 and fs3 == 0 and fe3 == 0x40 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc80655; op2val:0x123d1d9;
op3val:0x207c0000; valaddr_reg:x3; val_offset:16359*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16359*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5454:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x480655 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x23d1d9 and fs3 == 0 and fe3 == 0x40 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc80655; op2val:0x123d1d9;
op3val:0x207e0000; valaddr_reg:x3; val_offset:16362*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16362*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5455:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x480655 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x23d1d9 and fs3 == 0 and fe3 == 0x40 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc80655; op2val:0x123d1d9;
op3val:0x207f0000; valaddr_reg:x3; val_offset:16365*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16365*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5456:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x480655 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x23d1d9 and fs3 == 0 and fe3 == 0x40 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc80655; op2val:0x123d1d9;
op3val:0x207f8000; valaddr_reg:x3; val_offset:16368*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16368*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5457:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x480655 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x23d1d9 and fs3 == 0 and fe3 == 0x40 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc80655; op2val:0x123d1d9;
op3val:0x207fc000; valaddr_reg:x3; val_offset:16371*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16371*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5458:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x480655 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x23d1d9 and fs3 == 0 and fe3 == 0x40 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc80655; op2val:0x123d1d9;
op3val:0x207fe000; valaddr_reg:x3; val_offset:16374*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16374*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5459:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x480655 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x23d1d9 and fs3 == 0 and fe3 == 0x40 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc80655; op2val:0x123d1d9;
op3val:0x207ff000; valaddr_reg:x3; val_offset:16377*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16377*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5460:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x480655 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x23d1d9 and fs3 == 0 and fe3 == 0x40 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc80655; op2val:0x123d1d9;
op3val:0x207ff800; valaddr_reg:x3; val_offset:16380*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16380*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5461:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x480655 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x23d1d9 and fs3 == 0 and fe3 == 0x40 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc80655; op2val:0x123d1d9;
op3val:0x207ffc00; valaddr_reg:x3; val_offset:16383*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16383*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5462:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x480655 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x23d1d9 and fs3 == 0 and fe3 == 0x40 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc80655; op2val:0x123d1d9;
op3val:0x207ffe00; valaddr_reg:x3; val_offset:16386*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16386*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5463:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x480655 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x23d1d9 and fs3 == 0 and fe3 == 0x40 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc80655; op2val:0x123d1d9;
op3val:0x207fff00; valaddr_reg:x3; val_offset:16389*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16389*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5464:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x480655 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x23d1d9 and fs3 == 0 and fe3 == 0x40 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc80655; op2val:0x123d1d9;
op3val:0x207fff80; valaddr_reg:x3; val_offset:16392*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16392*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5465:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x480655 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x23d1d9 and fs3 == 0 and fe3 == 0x40 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc80655; op2val:0x123d1d9;
op3val:0x207fffc0; valaddr_reg:x3; val_offset:16395*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16395*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5466:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x480655 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x23d1d9 and fs3 == 0 and fe3 == 0x40 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc80655; op2val:0x123d1d9;
op3val:0x207fffe0; valaddr_reg:x3; val_offset:16398*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16398*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5467:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x480655 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x23d1d9 and fs3 == 0 and fe3 == 0x40 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc80655; op2val:0x123d1d9;
op3val:0x207ffff0; valaddr_reg:x3; val_offset:16401*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16401*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5468:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x480655 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x23d1d9 and fs3 == 0 and fe3 == 0x40 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc80655; op2val:0x123d1d9;
op3val:0x207ffff8; valaddr_reg:x3; val_offset:16404*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16404*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5469:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x480655 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x23d1d9 and fs3 == 0 and fe3 == 0x40 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc80655; op2val:0x123d1d9;
op3val:0x207ffffc; valaddr_reg:x3; val_offset:16407*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16407*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5470:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x480655 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x23d1d9 and fs3 == 0 and fe3 == 0x40 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc80655; op2val:0x123d1d9;
op3val:0x207ffffe; valaddr_reg:x3; val_offset:16410*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16410*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5471:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x480655 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x23d1d9 and fs3 == 0 and fe3 == 0x40 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc80655; op2val:0x123d1d9;
op3val:0x207fffff; valaddr_reg:x3; val_offset:16413*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16413*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5472:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x480655 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x23d1d9 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc80655; op2val:0x123d1d9;
op3val:0x3f800001; valaddr_reg:x3; val_offset:16416*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16416*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5473:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x480655 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x23d1d9 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc80655; op2val:0x123d1d9;
op3val:0x3f800003; valaddr_reg:x3; val_offset:16419*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16419*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5474:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x480655 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x23d1d9 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc80655; op2val:0x123d1d9;
op3val:0x3f800007; valaddr_reg:x3; val_offset:16422*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16422*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5475:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x480655 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x23d1d9 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc80655; op2val:0x123d1d9;
op3val:0x3f999999; valaddr_reg:x3; val_offset:16425*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16425*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5476:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x480655 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x23d1d9 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc80655; op2val:0x123d1d9;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:16428*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16428*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5477:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x480655 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x23d1d9 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc80655; op2val:0x123d1d9;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:16431*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16431*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5478:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x480655 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x23d1d9 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc80655; op2val:0x123d1d9;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:16434*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16434*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5479:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x480655 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x23d1d9 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc80655; op2val:0x123d1d9;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:16437*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16437*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5480:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x480655 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x23d1d9 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc80655; op2val:0x123d1d9;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:16440*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16440*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5481:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x480655 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x23d1d9 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc80655; op2val:0x123d1d9;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:16443*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16443*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5482:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x480655 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x23d1d9 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc80655; op2val:0x123d1d9;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:16446*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16446*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5483:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x480655 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x23d1d9 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc80655; op2val:0x123d1d9;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:16449*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16449*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5484:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x480655 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x23d1d9 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc80655; op2val:0x123d1d9;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:16452*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16452*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5485:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x480655 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x23d1d9 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc80655; op2val:0x123d1d9;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:16455*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16455*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5486:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x480655 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x23d1d9 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc80655; op2val:0x123d1d9;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:16458*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16458*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5487:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x480655 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x23d1d9 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc80655; op2val:0x123d1d9;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:16461*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16461*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5488:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x487b3d and fs2 == 1 and fe2 == 0x02 and fm2 == 0x237253 and fs3 == 1 and fe3 == 0x69 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc87b3d; op2val:0x81237253;
op3val:0xb4800000; valaddr_reg:x3; val_offset:16464*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16464*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5489:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x487b3d and fs2 == 1 and fe2 == 0x02 and fm2 == 0x237253 and fs3 == 1 and fe3 == 0x69 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc87b3d; op2val:0x81237253;
op3val:0xb4800001; valaddr_reg:x3; val_offset:16467*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16467*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5490:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x487b3d and fs2 == 1 and fe2 == 0x02 and fm2 == 0x237253 and fs3 == 1 and fe3 == 0x69 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc87b3d; op2val:0x81237253;
op3val:0xb4800003; valaddr_reg:x3; val_offset:16470*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16470*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5491:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x487b3d and fs2 == 1 and fe2 == 0x02 and fm2 == 0x237253 and fs3 == 1 and fe3 == 0x69 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc87b3d; op2val:0x81237253;
op3val:0xb4800007; valaddr_reg:x3; val_offset:16473*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16473*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5492:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x487b3d and fs2 == 1 and fe2 == 0x02 and fm2 == 0x237253 and fs3 == 1 and fe3 == 0x69 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc87b3d; op2val:0x81237253;
op3val:0xb480000f; valaddr_reg:x3; val_offset:16476*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16476*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5493:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x487b3d and fs2 == 1 and fe2 == 0x02 and fm2 == 0x237253 and fs3 == 1 and fe3 == 0x69 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc87b3d; op2val:0x81237253;
op3val:0xb480001f; valaddr_reg:x3; val_offset:16479*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16479*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5494:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x487b3d and fs2 == 1 and fe2 == 0x02 and fm2 == 0x237253 and fs3 == 1 and fe3 == 0x69 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc87b3d; op2val:0x81237253;
op3val:0xb480003f; valaddr_reg:x3; val_offset:16482*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16482*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5495:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x487b3d and fs2 == 1 and fe2 == 0x02 and fm2 == 0x237253 and fs3 == 1 and fe3 == 0x69 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc87b3d; op2val:0x81237253;
op3val:0xb480007f; valaddr_reg:x3; val_offset:16485*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16485*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5496:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x487b3d and fs2 == 1 and fe2 == 0x02 and fm2 == 0x237253 and fs3 == 1 and fe3 == 0x69 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc87b3d; op2val:0x81237253;
op3val:0xb48000ff; valaddr_reg:x3; val_offset:16488*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16488*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5497:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x487b3d and fs2 == 1 and fe2 == 0x02 and fm2 == 0x237253 and fs3 == 1 and fe3 == 0x69 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc87b3d; op2val:0x81237253;
op3val:0xb48001ff; valaddr_reg:x3; val_offset:16491*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16491*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5498:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x487b3d and fs2 == 1 and fe2 == 0x02 and fm2 == 0x237253 and fs3 == 1 and fe3 == 0x69 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc87b3d; op2val:0x81237253;
op3val:0xb48003ff; valaddr_reg:x3; val_offset:16494*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16494*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5499:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x487b3d and fs2 == 1 and fe2 == 0x02 and fm2 == 0x237253 and fs3 == 1 and fe3 == 0x69 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc87b3d; op2val:0x81237253;
op3val:0xb48007ff; valaddr_reg:x3; val_offset:16497*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16497*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5500:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x487b3d and fs2 == 1 and fe2 == 0x02 and fm2 == 0x237253 and fs3 == 1 and fe3 == 0x69 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc87b3d; op2val:0x81237253;
op3val:0xb4800fff; valaddr_reg:x3; val_offset:16500*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16500*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5501:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x487b3d and fs2 == 1 and fe2 == 0x02 and fm2 == 0x237253 and fs3 == 1 and fe3 == 0x69 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc87b3d; op2val:0x81237253;
op3val:0xb4801fff; valaddr_reg:x3; val_offset:16503*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16503*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5502:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x487b3d and fs2 == 1 and fe2 == 0x02 and fm2 == 0x237253 and fs3 == 1 and fe3 == 0x69 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc87b3d; op2val:0x81237253;
op3val:0xb4803fff; valaddr_reg:x3; val_offset:16506*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16506*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5503:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x487b3d and fs2 == 1 and fe2 == 0x02 and fm2 == 0x237253 and fs3 == 1 and fe3 == 0x69 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc87b3d; op2val:0x81237253;
op3val:0xb4807fff; valaddr_reg:x3; val_offset:16509*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16509*0 + 3*42*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2109947222,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(15578843,32,FLEN)
NAN_BOXED(2109947222,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777208,32,FLEN)
NAN_BOXED(2109947222,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777212,32,FLEN)
NAN_BOXED(2109947222,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777214,32,FLEN)
NAN_BOXED(2109947222,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268435456,32,FLEN)
NAN_BOXED(2109947222,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268435457,32,FLEN)
NAN_BOXED(2109947222,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268435459,32,FLEN)
NAN_BOXED(2109947222,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268435463,32,FLEN)
NAN_BOXED(2109947222,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268435471,32,FLEN)
NAN_BOXED(2109947222,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268435487,32,FLEN)
NAN_BOXED(2109947222,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268435519,32,FLEN)
NAN_BOXED(2109947222,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268435583,32,FLEN)
NAN_BOXED(2109947222,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268435711,32,FLEN)
NAN_BOXED(2109947222,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268435967,32,FLEN)
NAN_BOXED(2109947222,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268436479,32,FLEN)
NAN_BOXED(2109947222,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268437503,32,FLEN)
NAN_BOXED(2109947222,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268439551,32,FLEN)
NAN_BOXED(2109947222,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268443647,32,FLEN)
NAN_BOXED(2109947222,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268451839,32,FLEN)
NAN_BOXED(2109947222,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268468223,32,FLEN)
NAN_BOXED(2109947222,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268500991,32,FLEN)
NAN_BOXED(2109947222,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268566527,32,FLEN)
NAN_BOXED(2109947222,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268697599,32,FLEN)
NAN_BOXED(2109947222,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268959743,32,FLEN)
NAN_BOXED(2109947222,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(269484031,32,FLEN)
NAN_BOXED(2109947222,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(270532607,32,FLEN)
NAN_BOXED(2109947222,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(272629759,32,FLEN)
NAN_BOXED(2109947222,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(272629760,32,FLEN)
NAN_BOXED(2109947222,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(274726912,32,FLEN)
NAN_BOXED(2109947222,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(275775488,32,FLEN)
NAN_BOXED(2109947222,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(276299776,32,FLEN)
NAN_BOXED(2109947222,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(276561920,32,FLEN)
NAN_BOXED(2109947222,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(276692992,32,FLEN)
NAN_BOXED(2109947222,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(276758528,32,FLEN)
NAN_BOXED(2109947222,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(276791296,32,FLEN)
NAN_BOXED(2109947222,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(276807680,32,FLEN)
NAN_BOXED(2109947222,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(276815872,32,FLEN)
NAN_BOXED(2109947222,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(276819968,32,FLEN)
NAN_BOXED(2109947222,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(276822016,32,FLEN)
NAN_BOXED(2109947222,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(276823040,32,FLEN)
NAN_BOXED(2109947222,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(276823552,32,FLEN)
NAN_BOXED(2109947222,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(276823808,32,FLEN)
NAN_BOXED(2109947222,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(276823936,32,FLEN)
NAN_BOXED(2109947222,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(276824000,32,FLEN)
NAN_BOXED(2109947222,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(276824032,32,FLEN)
NAN_BOXED(2109947222,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(276824048,32,FLEN)
NAN_BOXED(2109947222,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(276824056,32,FLEN)
NAN_BOXED(2109947222,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(276824060,32,FLEN)
NAN_BOXED(2109947222,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(276824062,32,FLEN)
NAN_BOXED(2109947222,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(276824063,32,FLEN)
NAN_BOXED(2110260821,32,FLEN)
NAN_BOXED(19124697,32,FLEN)
NAN_BOXED(536870912,32,FLEN)
NAN_BOXED(2110260821,32,FLEN)
NAN_BOXED(19124697,32,FLEN)
NAN_BOXED(536870913,32,FLEN)
NAN_BOXED(2110260821,32,FLEN)
NAN_BOXED(19124697,32,FLEN)
NAN_BOXED(536870915,32,FLEN)
NAN_BOXED(2110260821,32,FLEN)
NAN_BOXED(19124697,32,FLEN)
NAN_BOXED(536870919,32,FLEN)
NAN_BOXED(2110260821,32,FLEN)
NAN_BOXED(19124697,32,FLEN)
NAN_BOXED(536870927,32,FLEN)
NAN_BOXED(2110260821,32,FLEN)
NAN_BOXED(19124697,32,FLEN)
NAN_BOXED(536870943,32,FLEN)
NAN_BOXED(2110260821,32,FLEN)
NAN_BOXED(19124697,32,FLEN)
NAN_BOXED(536870975,32,FLEN)
NAN_BOXED(2110260821,32,FLEN)
NAN_BOXED(19124697,32,FLEN)
NAN_BOXED(536871039,32,FLEN)
NAN_BOXED(2110260821,32,FLEN)
NAN_BOXED(19124697,32,FLEN)
NAN_BOXED(536871167,32,FLEN)
NAN_BOXED(2110260821,32,FLEN)
NAN_BOXED(19124697,32,FLEN)
NAN_BOXED(536871423,32,FLEN)
NAN_BOXED(2110260821,32,FLEN)
NAN_BOXED(19124697,32,FLEN)
NAN_BOXED(536871935,32,FLEN)
NAN_BOXED(2110260821,32,FLEN)
NAN_BOXED(19124697,32,FLEN)
NAN_BOXED(536872959,32,FLEN)
NAN_BOXED(2110260821,32,FLEN)
NAN_BOXED(19124697,32,FLEN)
NAN_BOXED(536875007,32,FLEN)
NAN_BOXED(2110260821,32,FLEN)
NAN_BOXED(19124697,32,FLEN)
NAN_BOXED(536879103,32,FLEN)
NAN_BOXED(2110260821,32,FLEN)
NAN_BOXED(19124697,32,FLEN)
NAN_BOXED(536887295,32,FLEN)
NAN_BOXED(2110260821,32,FLEN)
NAN_BOXED(19124697,32,FLEN)
NAN_BOXED(536903679,32,FLEN)
NAN_BOXED(2110260821,32,FLEN)
NAN_BOXED(19124697,32,FLEN)
NAN_BOXED(536936447,32,FLEN)
NAN_BOXED(2110260821,32,FLEN)
NAN_BOXED(19124697,32,FLEN)
NAN_BOXED(537001983,32,FLEN)
NAN_BOXED(2110260821,32,FLEN)
NAN_BOXED(19124697,32,FLEN)
NAN_BOXED(537133055,32,FLEN)
NAN_BOXED(2110260821,32,FLEN)
NAN_BOXED(19124697,32,FLEN)
NAN_BOXED(537395199,32,FLEN)
NAN_BOXED(2110260821,32,FLEN)
NAN_BOXED(19124697,32,FLEN)
NAN_BOXED(537919487,32,FLEN)
NAN_BOXED(2110260821,32,FLEN)
NAN_BOXED(19124697,32,FLEN)
NAN_BOXED(538968063,32,FLEN)
NAN_BOXED(2110260821,32,FLEN)
NAN_BOXED(19124697,32,FLEN)
NAN_BOXED(541065215,32,FLEN)
NAN_BOXED(2110260821,32,FLEN)
NAN_BOXED(19124697,32,FLEN)
NAN_BOXED(541065216,32,FLEN)
NAN_BOXED(2110260821,32,FLEN)
NAN_BOXED(19124697,32,FLEN)
NAN_BOXED(543162368,32,FLEN)
NAN_BOXED(2110260821,32,FLEN)
NAN_BOXED(19124697,32,FLEN)
NAN_BOXED(544210944,32,FLEN)
NAN_BOXED(2110260821,32,FLEN)
NAN_BOXED(19124697,32,FLEN)
NAN_BOXED(544735232,32,FLEN)
NAN_BOXED(2110260821,32,FLEN)
NAN_BOXED(19124697,32,FLEN)
NAN_BOXED(544997376,32,FLEN)
NAN_BOXED(2110260821,32,FLEN)
NAN_BOXED(19124697,32,FLEN)
NAN_BOXED(545128448,32,FLEN)
NAN_BOXED(2110260821,32,FLEN)
NAN_BOXED(19124697,32,FLEN)
NAN_BOXED(545193984,32,FLEN)
NAN_BOXED(2110260821,32,FLEN)
NAN_BOXED(19124697,32,FLEN)
NAN_BOXED(545226752,32,FLEN)
NAN_BOXED(2110260821,32,FLEN)
NAN_BOXED(19124697,32,FLEN)
NAN_BOXED(545243136,32,FLEN)
NAN_BOXED(2110260821,32,FLEN)
NAN_BOXED(19124697,32,FLEN)
NAN_BOXED(545251328,32,FLEN)
NAN_BOXED(2110260821,32,FLEN)
NAN_BOXED(19124697,32,FLEN)
NAN_BOXED(545255424,32,FLEN)
NAN_BOXED(2110260821,32,FLEN)
NAN_BOXED(19124697,32,FLEN)
NAN_BOXED(545257472,32,FLEN)
NAN_BOXED(2110260821,32,FLEN)
NAN_BOXED(19124697,32,FLEN)
NAN_BOXED(545258496,32,FLEN)
NAN_BOXED(2110260821,32,FLEN)
NAN_BOXED(19124697,32,FLEN)
NAN_BOXED(545259008,32,FLEN)
NAN_BOXED(2110260821,32,FLEN)
NAN_BOXED(19124697,32,FLEN)
NAN_BOXED(545259264,32,FLEN)
NAN_BOXED(2110260821,32,FLEN)
NAN_BOXED(19124697,32,FLEN)
NAN_BOXED(545259392,32,FLEN)
NAN_BOXED(2110260821,32,FLEN)
NAN_BOXED(19124697,32,FLEN)
NAN_BOXED(545259456,32,FLEN)
NAN_BOXED(2110260821,32,FLEN)
NAN_BOXED(19124697,32,FLEN)
NAN_BOXED(545259488,32,FLEN)
NAN_BOXED(2110260821,32,FLEN)
NAN_BOXED(19124697,32,FLEN)
NAN_BOXED(545259504,32,FLEN)
NAN_BOXED(2110260821,32,FLEN)
NAN_BOXED(19124697,32,FLEN)
NAN_BOXED(545259512,32,FLEN)
NAN_BOXED(2110260821,32,FLEN)
NAN_BOXED(19124697,32,FLEN)
NAN_BOXED(545259516,32,FLEN)
NAN_BOXED(2110260821,32,FLEN)
NAN_BOXED(19124697,32,FLEN)
NAN_BOXED(545259518,32,FLEN)
NAN_BOXED(2110260821,32,FLEN)
NAN_BOXED(19124697,32,FLEN)
NAN_BOXED(545259519,32,FLEN)
NAN_BOXED(2110260821,32,FLEN)
NAN_BOXED(19124697,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2110260821,32,FLEN)
NAN_BOXED(19124697,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2110260821,32,FLEN)
NAN_BOXED(19124697,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2110260821,32,FLEN)
NAN_BOXED(19124697,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2110260821,32,FLEN)
NAN_BOXED(19124697,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2110260821,32,FLEN)
NAN_BOXED(19124697,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2110260821,32,FLEN)
NAN_BOXED(19124697,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2110260821,32,FLEN)
NAN_BOXED(19124697,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2110260821,32,FLEN)
NAN_BOXED(19124697,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2110260821,32,FLEN)
NAN_BOXED(19124697,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2110260821,32,FLEN)
NAN_BOXED(19124697,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2110260821,32,FLEN)
NAN_BOXED(19124697,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2110260821,32,FLEN)
NAN_BOXED(19124697,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2110260821,32,FLEN)
NAN_BOXED(19124697,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2110260821,32,FLEN)
NAN_BOXED(19124697,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2110260821,32,FLEN)
NAN_BOXED(19124697,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2110290749,32,FLEN)
NAN_BOXED(2166583891,32,FLEN)
NAN_BOXED(3028287488,32,FLEN)
NAN_BOXED(2110290749,32,FLEN)
NAN_BOXED(2166583891,32,FLEN)
NAN_BOXED(3028287489,32,FLEN)
NAN_BOXED(2110290749,32,FLEN)
NAN_BOXED(2166583891,32,FLEN)
NAN_BOXED(3028287491,32,FLEN)
NAN_BOXED(2110290749,32,FLEN)
NAN_BOXED(2166583891,32,FLEN)
NAN_BOXED(3028287495,32,FLEN)
NAN_BOXED(2110290749,32,FLEN)
NAN_BOXED(2166583891,32,FLEN)
NAN_BOXED(3028287503,32,FLEN)
NAN_BOXED(2110290749,32,FLEN)
NAN_BOXED(2166583891,32,FLEN)
NAN_BOXED(3028287519,32,FLEN)
NAN_BOXED(2110290749,32,FLEN)
NAN_BOXED(2166583891,32,FLEN)
NAN_BOXED(3028287551,32,FLEN)
NAN_BOXED(2110290749,32,FLEN)
NAN_BOXED(2166583891,32,FLEN)
NAN_BOXED(3028287615,32,FLEN)
NAN_BOXED(2110290749,32,FLEN)
NAN_BOXED(2166583891,32,FLEN)
NAN_BOXED(3028287743,32,FLEN)
NAN_BOXED(2110290749,32,FLEN)
NAN_BOXED(2166583891,32,FLEN)
NAN_BOXED(3028287999,32,FLEN)
NAN_BOXED(2110290749,32,FLEN)
NAN_BOXED(2166583891,32,FLEN)
NAN_BOXED(3028288511,32,FLEN)
NAN_BOXED(2110290749,32,FLEN)
NAN_BOXED(2166583891,32,FLEN)
NAN_BOXED(3028289535,32,FLEN)
NAN_BOXED(2110290749,32,FLEN)
NAN_BOXED(2166583891,32,FLEN)
NAN_BOXED(3028291583,32,FLEN)
NAN_BOXED(2110290749,32,FLEN)
NAN_BOXED(2166583891,32,FLEN)
NAN_BOXED(3028295679,32,FLEN)
NAN_BOXED(2110290749,32,FLEN)
NAN_BOXED(2166583891,32,FLEN)
NAN_BOXED(3028303871,32,FLEN)
NAN_BOXED(2110290749,32,FLEN)
NAN_BOXED(2166583891,32,FLEN)
NAN_BOXED(3028320255,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
