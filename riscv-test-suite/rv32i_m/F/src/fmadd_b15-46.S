
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:17:59 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_5760:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x55eca5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd5eca5; op2val:0x0;
op3val:0x48000ff; valaddr_reg:x3; val_offset:17280*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17280*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5761:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x55eca5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd5eca5; op2val:0x0;
op3val:0x48001ff; valaddr_reg:x3; val_offset:17283*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17283*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5762:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x55eca5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd5eca5; op2val:0x0;
op3val:0x48003ff; valaddr_reg:x3; val_offset:17286*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17286*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5763:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x55eca5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd5eca5; op2val:0x0;
op3val:0x48007ff; valaddr_reg:x3; val_offset:17289*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17289*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5764:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x55eca5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd5eca5; op2val:0x0;
op3val:0x4800fff; valaddr_reg:x3; val_offset:17292*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17292*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5765:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x55eca5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd5eca5; op2val:0x0;
op3val:0x4801fff; valaddr_reg:x3; val_offset:17295*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17295*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5766:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x55eca5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd5eca5; op2val:0x0;
op3val:0x4803fff; valaddr_reg:x3; val_offset:17298*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17298*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5767:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x55eca5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd5eca5; op2val:0x0;
op3val:0x4807fff; valaddr_reg:x3; val_offset:17301*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17301*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5768:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x55eca5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd5eca5; op2val:0x0;
op3val:0x480ffff; valaddr_reg:x3; val_offset:17304*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17304*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5769:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x55eca5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd5eca5; op2val:0x0;
op3val:0x481ffff; valaddr_reg:x3; val_offset:17307*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17307*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5770:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x55eca5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd5eca5; op2val:0x0;
op3val:0x483ffff; valaddr_reg:x3; val_offset:17310*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17310*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5771:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x55eca5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd5eca5; op2val:0x0;
op3val:0x487ffff; valaddr_reg:x3; val_offset:17313*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17313*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5772:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x55eca5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd5eca5; op2val:0x0;
op3val:0x48fffff; valaddr_reg:x3; val_offset:17316*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17316*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5773:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x55eca5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd5eca5; op2val:0x0;
op3val:0x49fffff; valaddr_reg:x3; val_offset:17319*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17319*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5774:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x55eca5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd5eca5; op2val:0x0;
op3val:0x4bfffff; valaddr_reg:x3; val_offset:17322*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17322*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5775:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x55eca5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd5eca5; op2val:0x0;
op3val:0x4c00000; valaddr_reg:x3; val_offset:17325*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17325*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5776:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x55eca5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd5eca5; op2val:0x0;
op3val:0x4e00000; valaddr_reg:x3; val_offset:17328*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17328*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5777:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x55eca5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd5eca5; op2val:0x0;
op3val:0x4f00000; valaddr_reg:x3; val_offset:17331*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17331*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5778:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x55eca5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd5eca5; op2val:0x0;
op3val:0x4f80000; valaddr_reg:x3; val_offset:17334*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17334*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5779:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x55eca5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd5eca5; op2val:0x0;
op3val:0x4fc0000; valaddr_reg:x3; val_offset:17337*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17337*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5780:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x55eca5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd5eca5; op2val:0x0;
op3val:0x4fe0000; valaddr_reg:x3; val_offset:17340*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17340*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5781:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x55eca5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd5eca5; op2val:0x0;
op3val:0x4ff0000; valaddr_reg:x3; val_offset:17343*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17343*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5782:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x55eca5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd5eca5; op2val:0x0;
op3val:0x4ff8000; valaddr_reg:x3; val_offset:17346*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17346*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5783:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x55eca5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd5eca5; op2val:0x0;
op3val:0x4ffc000; valaddr_reg:x3; val_offset:17349*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17349*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5784:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x55eca5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd5eca5; op2val:0x0;
op3val:0x4ffe000; valaddr_reg:x3; val_offset:17352*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17352*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5785:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x55eca5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd5eca5; op2val:0x0;
op3val:0x4fff000; valaddr_reg:x3; val_offset:17355*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17355*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5786:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x55eca5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd5eca5; op2val:0x0;
op3val:0x4fff800; valaddr_reg:x3; val_offset:17358*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17358*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5787:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x55eca5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd5eca5; op2val:0x0;
op3val:0x4fffc00; valaddr_reg:x3; val_offset:17361*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17361*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5788:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x55eca5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd5eca5; op2val:0x0;
op3val:0x4fffe00; valaddr_reg:x3; val_offset:17364*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17364*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5789:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x55eca5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd5eca5; op2val:0x0;
op3val:0x4ffff00; valaddr_reg:x3; val_offset:17367*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17367*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5790:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x55eca5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd5eca5; op2val:0x0;
op3val:0x4ffff80; valaddr_reg:x3; val_offset:17370*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17370*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5791:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x55eca5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd5eca5; op2val:0x0;
op3val:0x4ffffc0; valaddr_reg:x3; val_offset:17373*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17373*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5792:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x55eca5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd5eca5; op2val:0x0;
op3val:0x4ffffe0; valaddr_reg:x3; val_offset:17376*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17376*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5793:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x55eca5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd5eca5; op2val:0x0;
op3val:0x4fffff0; valaddr_reg:x3; val_offset:17379*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17379*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5794:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x55eca5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd5eca5; op2val:0x0;
op3val:0x4fffff8; valaddr_reg:x3; val_offset:17382*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17382*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5795:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x55eca5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd5eca5; op2val:0x0;
op3val:0x4fffffc; valaddr_reg:x3; val_offset:17385*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17385*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5796:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x55eca5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd5eca5; op2val:0x0;
op3val:0x4fffffe; valaddr_reg:x3; val_offset:17388*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17388*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5797:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x55eca5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd5eca5; op2val:0x0;
op3val:0x4ffffff; valaddr_reg:x3; val_offset:17391*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17391*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5798:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x56a646 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd6a646; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:17394*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17394*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5799:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x56a646 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd6a646; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:17397*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17397*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5800:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x56a646 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd6a646; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:17400*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17400*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5801:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x56a646 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd6a646; op2val:0x0;
op3val:0x199999; valaddr_reg:x3; val_offset:17403*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17403*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5802:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x56a646 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd6a646; op2val:0x0;
op3val:0x249249; valaddr_reg:x3; val_offset:17406*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17406*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5803:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x56a646 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd6a646; op2val:0x0;
op3val:0x333333; valaddr_reg:x3; val_offset:17409*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17409*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5804:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x56a646 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd6a646; op2val:0x0;
op3val:0x36db6d; valaddr_reg:x3; val_offset:17412*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17412*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5805:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x56a646 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd6a646; op2val:0x0;
op3val:0x3bbbbb; valaddr_reg:x3; val_offset:17415*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17415*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5806:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x56a646 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd6a646; op2val:0x0;
op3val:0x444444; valaddr_reg:x3; val_offset:17418*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17418*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5807:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x56a646 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd6a646; op2val:0x0;
op3val:0x4ccccc; valaddr_reg:x3; val_offset:17421*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17421*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5808:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x56a646 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd6a646; op2val:0x0;
op3val:0x5b6db6; valaddr_reg:x3; val_offset:17424*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17424*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5809:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x56a646 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd6a646; op2val:0x0;
op3val:0x666666; valaddr_reg:x3; val_offset:17427*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17427*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5810:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x56a646 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd6a646; op2val:0x0;
op3val:0x6db6db; valaddr_reg:x3; val_offset:17430*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17430*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5811:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x56a646 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd6a646; op2val:0x0;
op3val:0x7ffff8; valaddr_reg:x3; val_offset:17433*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17433*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5812:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x56a646 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd6a646; op2val:0x0;
op3val:0x7ffffc; valaddr_reg:x3; val_offset:17436*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17436*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5813:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x56a646 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd6a646; op2val:0x0;
op3val:0x7ffffe; valaddr_reg:x3; val_offset:17439*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17439*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5814:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x56a646 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd6a646; op2val:0x0;
op3val:0x5000000; valaddr_reg:x3; val_offset:17442*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17442*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5815:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x56a646 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd6a646; op2val:0x0;
op3val:0x5000001; valaddr_reg:x3; val_offset:17445*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17445*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5816:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x56a646 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd6a646; op2val:0x0;
op3val:0x5000003; valaddr_reg:x3; val_offset:17448*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17448*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5817:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x56a646 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd6a646; op2val:0x0;
op3val:0x5000007; valaddr_reg:x3; val_offset:17451*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17451*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5818:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x56a646 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd6a646; op2val:0x0;
op3val:0x500000f; valaddr_reg:x3; val_offset:17454*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17454*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5819:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x56a646 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd6a646; op2val:0x0;
op3val:0x500001f; valaddr_reg:x3; val_offset:17457*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17457*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5820:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x56a646 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd6a646; op2val:0x0;
op3val:0x500003f; valaddr_reg:x3; val_offset:17460*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17460*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5821:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x56a646 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd6a646; op2val:0x0;
op3val:0x500007f; valaddr_reg:x3; val_offset:17463*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17463*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5822:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x56a646 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd6a646; op2val:0x0;
op3val:0x50000ff; valaddr_reg:x3; val_offset:17466*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17466*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5823:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x56a646 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd6a646; op2val:0x0;
op3val:0x50001ff; valaddr_reg:x3; val_offset:17469*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17469*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5824:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x56a646 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd6a646; op2val:0x0;
op3val:0x50003ff; valaddr_reg:x3; val_offset:17472*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17472*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5825:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x56a646 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd6a646; op2val:0x0;
op3val:0x50007ff; valaddr_reg:x3; val_offset:17475*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17475*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5826:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x56a646 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd6a646; op2val:0x0;
op3val:0x5000fff; valaddr_reg:x3; val_offset:17478*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17478*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5827:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x56a646 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd6a646; op2val:0x0;
op3val:0x5001fff; valaddr_reg:x3; val_offset:17481*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17481*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5828:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x56a646 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd6a646; op2val:0x0;
op3val:0x5003fff; valaddr_reg:x3; val_offset:17484*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17484*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5829:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x56a646 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd6a646; op2val:0x0;
op3val:0x5007fff; valaddr_reg:x3; val_offset:17487*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17487*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5830:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x56a646 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd6a646; op2val:0x0;
op3val:0x500ffff; valaddr_reg:x3; val_offset:17490*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17490*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5831:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x56a646 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd6a646; op2val:0x0;
op3val:0x501ffff; valaddr_reg:x3; val_offset:17493*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17493*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5832:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x56a646 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd6a646; op2val:0x0;
op3val:0x503ffff; valaddr_reg:x3; val_offset:17496*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17496*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5833:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x56a646 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd6a646; op2val:0x0;
op3val:0x507ffff; valaddr_reg:x3; val_offset:17499*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17499*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5834:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x56a646 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd6a646; op2val:0x0;
op3val:0x50fffff; valaddr_reg:x3; val_offset:17502*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17502*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5835:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x56a646 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd6a646; op2val:0x0;
op3val:0x51fffff; valaddr_reg:x3; val_offset:17505*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17505*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5836:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x56a646 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd6a646; op2val:0x0;
op3val:0x53fffff; valaddr_reg:x3; val_offset:17508*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17508*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5837:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x56a646 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd6a646; op2val:0x0;
op3val:0x5400000; valaddr_reg:x3; val_offset:17511*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17511*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5838:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x56a646 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd6a646; op2val:0x0;
op3val:0x5600000; valaddr_reg:x3; val_offset:17514*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17514*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5839:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x56a646 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd6a646; op2val:0x0;
op3val:0x5700000; valaddr_reg:x3; val_offset:17517*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17517*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5840:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x56a646 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd6a646; op2val:0x0;
op3val:0x5780000; valaddr_reg:x3; val_offset:17520*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17520*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5841:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x56a646 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd6a646; op2val:0x0;
op3val:0x57c0000; valaddr_reg:x3; val_offset:17523*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17523*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5842:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x56a646 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd6a646; op2val:0x0;
op3val:0x57e0000; valaddr_reg:x3; val_offset:17526*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17526*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5843:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x56a646 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd6a646; op2val:0x0;
op3val:0x57f0000; valaddr_reg:x3; val_offset:17529*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17529*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5844:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x56a646 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd6a646; op2val:0x0;
op3val:0x57f8000; valaddr_reg:x3; val_offset:17532*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17532*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5845:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x56a646 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd6a646; op2val:0x0;
op3val:0x57fc000; valaddr_reg:x3; val_offset:17535*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17535*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5846:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x56a646 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd6a646; op2val:0x0;
op3val:0x57fe000; valaddr_reg:x3; val_offset:17538*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17538*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5847:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x56a646 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd6a646; op2val:0x0;
op3val:0x57ff000; valaddr_reg:x3; val_offset:17541*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17541*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5848:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x56a646 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd6a646; op2val:0x0;
op3val:0x57ff800; valaddr_reg:x3; val_offset:17544*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17544*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5849:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x56a646 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd6a646; op2val:0x0;
op3val:0x57ffc00; valaddr_reg:x3; val_offset:17547*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17547*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5850:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x56a646 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd6a646; op2val:0x0;
op3val:0x57ffe00; valaddr_reg:x3; val_offset:17550*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17550*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5851:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x56a646 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd6a646; op2val:0x0;
op3val:0x57fff00; valaddr_reg:x3; val_offset:17553*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17553*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5852:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x56a646 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd6a646; op2val:0x0;
op3val:0x57fff80; valaddr_reg:x3; val_offset:17556*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17556*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5853:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x56a646 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd6a646; op2val:0x0;
op3val:0x57fffc0; valaddr_reg:x3; val_offset:17559*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17559*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5854:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x56a646 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd6a646; op2val:0x0;
op3val:0x57fffe0; valaddr_reg:x3; val_offset:17562*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17562*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5855:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x56a646 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd6a646; op2val:0x0;
op3val:0x57ffff0; valaddr_reg:x3; val_offset:17565*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17565*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5856:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x56a646 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd6a646; op2val:0x0;
op3val:0x57ffff8; valaddr_reg:x3; val_offset:17568*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17568*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5857:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x56a646 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd6a646; op2val:0x0;
op3val:0x57ffffc; valaddr_reg:x3; val_offset:17571*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17571*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5858:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x56a646 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd6a646; op2val:0x0;
op3val:0x57ffffe; valaddr_reg:x3; val_offset:17574*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17574*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5859:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x56a646 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd6a646; op2val:0x0;
op3val:0x57fffff; valaddr_reg:x3; val_offset:17577*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17577*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5860:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x59f068 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x165a9a and fs3 == 0 and fe3 == 0xd6 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd9f068; op2val:0x41165a9a;
op3val:0x6b000000; valaddr_reg:x3; val_offset:17580*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17580*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5861:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x59f068 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x165a9a and fs3 == 0 and fe3 == 0xd6 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd9f068; op2val:0x41165a9a;
op3val:0x6b000001; valaddr_reg:x3; val_offset:17583*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17583*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5862:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x59f068 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x165a9a and fs3 == 0 and fe3 == 0xd6 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd9f068; op2val:0x41165a9a;
op3val:0x6b000003; valaddr_reg:x3; val_offset:17586*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17586*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5863:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x59f068 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x165a9a and fs3 == 0 and fe3 == 0xd6 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd9f068; op2val:0x41165a9a;
op3val:0x6b000007; valaddr_reg:x3; val_offset:17589*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17589*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5864:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x59f068 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x165a9a and fs3 == 0 and fe3 == 0xd6 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd9f068; op2val:0x41165a9a;
op3val:0x6b00000f; valaddr_reg:x3; val_offset:17592*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17592*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5865:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x59f068 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x165a9a and fs3 == 0 and fe3 == 0xd6 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd9f068; op2val:0x41165a9a;
op3val:0x6b00001f; valaddr_reg:x3; val_offset:17595*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17595*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5866:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x59f068 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x165a9a and fs3 == 0 and fe3 == 0xd6 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd9f068; op2val:0x41165a9a;
op3val:0x6b00003f; valaddr_reg:x3; val_offset:17598*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17598*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5867:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x59f068 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x165a9a and fs3 == 0 and fe3 == 0xd6 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd9f068; op2val:0x41165a9a;
op3val:0x6b00007f; valaddr_reg:x3; val_offset:17601*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17601*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5868:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x59f068 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x165a9a and fs3 == 0 and fe3 == 0xd6 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd9f068; op2val:0x41165a9a;
op3val:0x6b0000ff; valaddr_reg:x3; val_offset:17604*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17604*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5869:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x59f068 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x165a9a and fs3 == 0 and fe3 == 0xd6 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd9f068; op2val:0x41165a9a;
op3val:0x6b0001ff; valaddr_reg:x3; val_offset:17607*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17607*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5870:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x59f068 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x165a9a and fs3 == 0 and fe3 == 0xd6 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd9f068; op2val:0x41165a9a;
op3val:0x6b0003ff; valaddr_reg:x3; val_offset:17610*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17610*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5871:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x59f068 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x165a9a and fs3 == 0 and fe3 == 0xd6 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd9f068; op2val:0x41165a9a;
op3val:0x6b0007ff; valaddr_reg:x3; val_offset:17613*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17613*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5872:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x59f068 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x165a9a and fs3 == 0 and fe3 == 0xd6 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd9f068; op2val:0x41165a9a;
op3val:0x6b000fff; valaddr_reg:x3; val_offset:17616*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17616*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5873:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x59f068 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x165a9a and fs3 == 0 and fe3 == 0xd6 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd9f068; op2val:0x41165a9a;
op3val:0x6b001fff; valaddr_reg:x3; val_offset:17619*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17619*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5874:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x59f068 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x165a9a and fs3 == 0 and fe3 == 0xd6 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd9f068; op2val:0x41165a9a;
op3val:0x6b003fff; valaddr_reg:x3; val_offset:17622*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17622*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5875:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x59f068 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x165a9a and fs3 == 0 and fe3 == 0xd6 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd9f068; op2val:0x41165a9a;
op3val:0x6b007fff; valaddr_reg:x3; val_offset:17625*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17625*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5876:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x59f068 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x165a9a and fs3 == 0 and fe3 == 0xd6 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd9f068; op2val:0x41165a9a;
op3val:0x6b00ffff; valaddr_reg:x3; val_offset:17628*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17628*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5877:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x59f068 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x165a9a and fs3 == 0 and fe3 == 0xd6 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd9f068; op2val:0x41165a9a;
op3val:0x6b01ffff; valaddr_reg:x3; val_offset:17631*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17631*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5878:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x59f068 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x165a9a and fs3 == 0 and fe3 == 0xd6 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd9f068; op2val:0x41165a9a;
op3val:0x6b03ffff; valaddr_reg:x3; val_offset:17634*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17634*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5879:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x59f068 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x165a9a and fs3 == 0 and fe3 == 0xd6 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd9f068; op2val:0x41165a9a;
op3val:0x6b07ffff; valaddr_reg:x3; val_offset:17637*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17637*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5880:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x59f068 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x165a9a and fs3 == 0 and fe3 == 0xd6 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd9f068; op2val:0x41165a9a;
op3val:0x6b0fffff; valaddr_reg:x3; val_offset:17640*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17640*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5881:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x59f068 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x165a9a and fs3 == 0 and fe3 == 0xd6 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd9f068; op2val:0x41165a9a;
op3val:0x6b1fffff; valaddr_reg:x3; val_offset:17643*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17643*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5882:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x59f068 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x165a9a and fs3 == 0 and fe3 == 0xd6 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd9f068; op2val:0x41165a9a;
op3val:0x6b3fffff; valaddr_reg:x3; val_offset:17646*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17646*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5883:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x59f068 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x165a9a and fs3 == 0 and fe3 == 0xd6 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd9f068; op2val:0x41165a9a;
op3val:0x6b400000; valaddr_reg:x3; val_offset:17649*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17649*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5884:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x59f068 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x165a9a and fs3 == 0 and fe3 == 0xd6 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd9f068; op2val:0x41165a9a;
op3val:0x6b600000; valaddr_reg:x3; val_offset:17652*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17652*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5885:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x59f068 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x165a9a and fs3 == 0 and fe3 == 0xd6 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd9f068; op2val:0x41165a9a;
op3val:0x6b700000; valaddr_reg:x3; val_offset:17655*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17655*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5886:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x59f068 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x165a9a and fs3 == 0 and fe3 == 0xd6 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd9f068; op2val:0x41165a9a;
op3val:0x6b780000; valaddr_reg:x3; val_offset:17658*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17658*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5887:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x59f068 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x165a9a and fs3 == 0 and fe3 == 0xd6 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd9f068; op2val:0x41165a9a;
op3val:0x6b7c0000; valaddr_reg:x3; val_offset:17661*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17661*0 + 3*45*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2111171749,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75497727,32,FLEN)
NAN_BOXED(2111171749,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75497983,32,FLEN)
NAN_BOXED(2111171749,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75498495,32,FLEN)
NAN_BOXED(2111171749,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75499519,32,FLEN)
NAN_BOXED(2111171749,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75501567,32,FLEN)
NAN_BOXED(2111171749,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75505663,32,FLEN)
NAN_BOXED(2111171749,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75513855,32,FLEN)
NAN_BOXED(2111171749,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75530239,32,FLEN)
NAN_BOXED(2111171749,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75563007,32,FLEN)
NAN_BOXED(2111171749,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75628543,32,FLEN)
NAN_BOXED(2111171749,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75759615,32,FLEN)
NAN_BOXED(2111171749,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(76021759,32,FLEN)
NAN_BOXED(2111171749,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(76546047,32,FLEN)
NAN_BOXED(2111171749,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(77594623,32,FLEN)
NAN_BOXED(2111171749,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(79691775,32,FLEN)
NAN_BOXED(2111171749,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(79691776,32,FLEN)
NAN_BOXED(2111171749,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(81788928,32,FLEN)
NAN_BOXED(2111171749,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(82837504,32,FLEN)
NAN_BOXED(2111171749,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83361792,32,FLEN)
NAN_BOXED(2111171749,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83623936,32,FLEN)
NAN_BOXED(2111171749,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83755008,32,FLEN)
NAN_BOXED(2111171749,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83820544,32,FLEN)
NAN_BOXED(2111171749,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83853312,32,FLEN)
NAN_BOXED(2111171749,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83869696,32,FLEN)
NAN_BOXED(2111171749,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83877888,32,FLEN)
NAN_BOXED(2111171749,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83881984,32,FLEN)
NAN_BOXED(2111171749,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83884032,32,FLEN)
NAN_BOXED(2111171749,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83885056,32,FLEN)
NAN_BOXED(2111171749,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83885568,32,FLEN)
NAN_BOXED(2111171749,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83885824,32,FLEN)
NAN_BOXED(2111171749,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83885952,32,FLEN)
NAN_BOXED(2111171749,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83886016,32,FLEN)
NAN_BOXED(2111171749,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83886048,32,FLEN)
NAN_BOXED(2111171749,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83886064,32,FLEN)
NAN_BOXED(2111171749,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83886072,32,FLEN)
NAN_BOXED(2111171749,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83886076,32,FLEN)
NAN_BOXED(2111171749,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83886078,32,FLEN)
NAN_BOXED(2111171749,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83886079,32,FLEN)
NAN_BOXED(2111219270,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2111219270,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3,32,FLEN)
NAN_BOXED(2111219270,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7,32,FLEN)
NAN_BOXED(2111219270,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1677721,32,FLEN)
NAN_BOXED(2111219270,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2396745,32,FLEN)
NAN_BOXED(2111219270,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3355443,32,FLEN)
NAN_BOXED(2111219270,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3595117,32,FLEN)
NAN_BOXED(2111219270,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3914683,32,FLEN)
NAN_BOXED(2111219270,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4473924,32,FLEN)
NAN_BOXED(2111219270,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5033164,32,FLEN)
NAN_BOXED(2111219270,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5991862,32,FLEN)
NAN_BOXED(2111219270,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(6710886,32,FLEN)
NAN_BOXED(2111219270,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7190235,32,FLEN)
NAN_BOXED(2111219270,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388600,32,FLEN)
NAN_BOXED(2111219270,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388604,32,FLEN)
NAN_BOXED(2111219270,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388606,32,FLEN)
NAN_BOXED(2111219270,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83886080,32,FLEN)
NAN_BOXED(2111219270,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83886081,32,FLEN)
NAN_BOXED(2111219270,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83886083,32,FLEN)
NAN_BOXED(2111219270,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83886087,32,FLEN)
NAN_BOXED(2111219270,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83886095,32,FLEN)
NAN_BOXED(2111219270,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83886111,32,FLEN)
NAN_BOXED(2111219270,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83886143,32,FLEN)
NAN_BOXED(2111219270,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83886207,32,FLEN)
NAN_BOXED(2111219270,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83886335,32,FLEN)
NAN_BOXED(2111219270,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83886591,32,FLEN)
NAN_BOXED(2111219270,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83887103,32,FLEN)
NAN_BOXED(2111219270,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83888127,32,FLEN)
NAN_BOXED(2111219270,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83890175,32,FLEN)
NAN_BOXED(2111219270,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83894271,32,FLEN)
NAN_BOXED(2111219270,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83902463,32,FLEN)
NAN_BOXED(2111219270,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83918847,32,FLEN)
NAN_BOXED(2111219270,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83951615,32,FLEN)
NAN_BOXED(2111219270,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(84017151,32,FLEN)
NAN_BOXED(2111219270,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(84148223,32,FLEN)
NAN_BOXED(2111219270,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(84410367,32,FLEN)
NAN_BOXED(2111219270,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(84934655,32,FLEN)
NAN_BOXED(2111219270,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(85983231,32,FLEN)
NAN_BOXED(2111219270,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(88080383,32,FLEN)
NAN_BOXED(2111219270,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(88080384,32,FLEN)
NAN_BOXED(2111219270,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(90177536,32,FLEN)
NAN_BOXED(2111219270,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(91226112,32,FLEN)
NAN_BOXED(2111219270,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(91750400,32,FLEN)
NAN_BOXED(2111219270,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92012544,32,FLEN)
NAN_BOXED(2111219270,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92143616,32,FLEN)
NAN_BOXED(2111219270,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92209152,32,FLEN)
NAN_BOXED(2111219270,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92241920,32,FLEN)
NAN_BOXED(2111219270,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92258304,32,FLEN)
NAN_BOXED(2111219270,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92266496,32,FLEN)
NAN_BOXED(2111219270,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92270592,32,FLEN)
NAN_BOXED(2111219270,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92272640,32,FLEN)
NAN_BOXED(2111219270,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92273664,32,FLEN)
NAN_BOXED(2111219270,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92274176,32,FLEN)
NAN_BOXED(2111219270,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92274432,32,FLEN)
NAN_BOXED(2111219270,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92274560,32,FLEN)
NAN_BOXED(2111219270,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92274624,32,FLEN)
NAN_BOXED(2111219270,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92274656,32,FLEN)
NAN_BOXED(2111219270,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92274672,32,FLEN)
NAN_BOXED(2111219270,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92274680,32,FLEN)
NAN_BOXED(2111219270,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92274684,32,FLEN)
NAN_BOXED(2111219270,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92274686,32,FLEN)
NAN_BOXED(2111219270,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92274687,32,FLEN)
NAN_BOXED(2111434856,32,FLEN)
NAN_BOXED(1091984026,32,FLEN)
NAN_BOXED(1795162112,32,FLEN)
NAN_BOXED(2111434856,32,FLEN)
NAN_BOXED(1091984026,32,FLEN)
NAN_BOXED(1795162113,32,FLEN)
NAN_BOXED(2111434856,32,FLEN)
NAN_BOXED(1091984026,32,FLEN)
NAN_BOXED(1795162115,32,FLEN)
NAN_BOXED(2111434856,32,FLEN)
NAN_BOXED(1091984026,32,FLEN)
NAN_BOXED(1795162119,32,FLEN)
NAN_BOXED(2111434856,32,FLEN)
NAN_BOXED(1091984026,32,FLEN)
NAN_BOXED(1795162127,32,FLEN)
NAN_BOXED(2111434856,32,FLEN)
NAN_BOXED(1091984026,32,FLEN)
NAN_BOXED(1795162143,32,FLEN)
NAN_BOXED(2111434856,32,FLEN)
NAN_BOXED(1091984026,32,FLEN)
NAN_BOXED(1795162175,32,FLEN)
NAN_BOXED(2111434856,32,FLEN)
NAN_BOXED(1091984026,32,FLEN)
NAN_BOXED(1795162239,32,FLEN)
NAN_BOXED(2111434856,32,FLEN)
NAN_BOXED(1091984026,32,FLEN)
NAN_BOXED(1795162367,32,FLEN)
NAN_BOXED(2111434856,32,FLEN)
NAN_BOXED(1091984026,32,FLEN)
NAN_BOXED(1795162623,32,FLEN)
NAN_BOXED(2111434856,32,FLEN)
NAN_BOXED(1091984026,32,FLEN)
NAN_BOXED(1795163135,32,FLEN)
NAN_BOXED(2111434856,32,FLEN)
NAN_BOXED(1091984026,32,FLEN)
NAN_BOXED(1795164159,32,FLEN)
NAN_BOXED(2111434856,32,FLEN)
NAN_BOXED(1091984026,32,FLEN)
NAN_BOXED(1795166207,32,FLEN)
NAN_BOXED(2111434856,32,FLEN)
NAN_BOXED(1091984026,32,FLEN)
NAN_BOXED(1795170303,32,FLEN)
NAN_BOXED(2111434856,32,FLEN)
NAN_BOXED(1091984026,32,FLEN)
NAN_BOXED(1795178495,32,FLEN)
NAN_BOXED(2111434856,32,FLEN)
NAN_BOXED(1091984026,32,FLEN)
NAN_BOXED(1795194879,32,FLEN)
NAN_BOXED(2111434856,32,FLEN)
NAN_BOXED(1091984026,32,FLEN)
NAN_BOXED(1795227647,32,FLEN)
NAN_BOXED(2111434856,32,FLEN)
NAN_BOXED(1091984026,32,FLEN)
NAN_BOXED(1795293183,32,FLEN)
NAN_BOXED(2111434856,32,FLEN)
NAN_BOXED(1091984026,32,FLEN)
NAN_BOXED(1795424255,32,FLEN)
NAN_BOXED(2111434856,32,FLEN)
NAN_BOXED(1091984026,32,FLEN)
NAN_BOXED(1795686399,32,FLEN)
NAN_BOXED(2111434856,32,FLEN)
NAN_BOXED(1091984026,32,FLEN)
NAN_BOXED(1796210687,32,FLEN)
NAN_BOXED(2111434856,32,FLEN)
NAN_BOXED(1091984026,32,FLEN)
NAN_BOXED(1797259263,32,FLEN)
NAN_BOXED(2111434856,32,FLEN)
NAN_BOXED(1091984026,32,FLEN)
NAN_BOXED(1799356415,32,FLEN)
NAN_BOXED(2111434856,32,FLEN)
NAN_BOXED(1091984026,32,FLEN)
NAN_BOXED(1799356416,32,FLEN)
NAN_BOXED(2111434856,32,FLEN)
NAN_BOXED(1091984026,32,FLEN)
NAN_BOXED(1801453568,32,FLEN)
NAN_BOXED(2111434856,32,FLEN)
NAN_BOXED(1091984026,32,FLEN)
NAN_BOXED(1802502144,32,FLEN)
NAN_BOXED(2111434856,32,FLEN)
NAN_BOXED(1091984026,32,FLEN)
NAN_BOXED(1803026432,32,FLEN)
NAN_BOXED(2111434856,32,FLEN)
NAN_BOXED(1091984026,32,FLEN)
NAN_BOXED(1803288576,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
