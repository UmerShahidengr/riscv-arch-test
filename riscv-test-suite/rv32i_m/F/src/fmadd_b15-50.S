
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:17:59 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_6272:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x649633 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de49633; op2val:0x0;
op3val:0xfe00000; valaddr_reg:x3; val_offset:18816*0 + 3*49*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18816*0 + 3*49*FLEN/8, x4, x1, x2)

inst_6273:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x649633 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de49633; op2val:0x0;
op3val:0xff00000; valaddr_reg:x3; val_offset:18819*0 + 3*49*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18819*0 + 3*49*FLEN/8, x4, x1, x2)

inst_6274:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x649633 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de49633; op2val:0x0;
op3val:0xff80000; valaddr_reg:x3; val_offset:18822*0 + 3*49*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18822*0 + 3*49*FLEN/8, x4, x1, x2)

inst_6275:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x649633 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de49633; op2val:0x0;
op3val:0xffc0000; valaddr_reg:x3; val_offset:18825*0 + 3*49*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18825*0 + 3*49*FLEN/8, x4, x1, x2)

inst_6276:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x649633 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de49633; op2val:0x0;
op3val:0xffe0000; valaddr_reg:x3; val_offset:18828*0 + 3*49*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18828*0 + 3*49*FLEN/8, x4, x1, x2)

inst_6277:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x649633 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de49633; op2val:0x0;
op3val:0xfff0000; valaddr_reg:x3; val_offset:18831*0 + 3*49*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18831*0 + 3*49*FLEN/8, x4, x1, x2)

inst_6278:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x649633 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de49633; op2val:0x0;
op3val:0xfff8000; valaddr_reg:x3; val_offset:18834*0 + 3*49*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18834*0 + 3*49*FLEN/8, x4, x1, x2)

inst_6279:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x649633 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de49633; op2val:0x0;
op3val:0xfffc000; valaddr_reg:x3; val_offset:18837*0 + 3*49*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18837*0 + 3*49*FLEN/8, x4, x1, x2)

inst_6280:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x649633 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de49633; op2val:0x0;
op3val:0xfffe000; valaddr_reg:x3; val_offset:18840*0 + 3*49*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18840*0 + 3*49*FLEN/8, x4, x1, x2)

inst_6281:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x649633 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de49633; op2val:0x0;
op3val:0xffff000; valaddr_reg:x3; val_offset:18843*0 + 3*49*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18843*0 + 3*49*FLEN/8, x4, x1, x2)

inst_6282:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x649633 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de49633; op2val:0x0;
op3val:0xffff800; valaddr_reg:x3; val_offset:18846*0 + 3*49*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18846*0 + 3*49*FLEN/8, x4, x1, x2)

inst_6283:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x649633 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de49633; op2val:0x0;
op3val:0xffffc00; valaddr_reg:x3; val_offset:18849*0 + 3*49*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18849*0 + 3*49*FLEN/8, x4, x1, x2)

inst_6284:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x649633 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de49633; op2val:0x0;
op3val:0xffffe00; valaddr_reg:x3; val_offset:18852*0 + 3*49*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18852*0 + 3*49*FLEN/8, x4, x1, x2)

inst_6285:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x649633 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de49633; op2val:0x0;
op3val:0xfffff00; valaddr_reg:x3; val_offset:18855*0 + 3*49*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18855*0 + 3*49*FLEN/8, x4, x1, x2)

inst_6286:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x649633 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de49633; op2val:0x0;
op3val:0xfffff80; valaddr_reg:x3; val_offset:18858*0 + 3*49*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18858*0 + 3*49*FLEN/8, x4, x1, x2)

inst_6287:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x649633 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de49633; op2val:0x0;
op3val:0xfffffc0; valaddr_reg:x3; val_offset:18861*0 + 3*49*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18861*0 + 3*49*FLEN/8, x4, x1, x2)

inst_6288:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x649633 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de49633; op2val:0x0;
op3val:0xfffffe0; valaddr_reg:x3; val_offset:18864*0 + 3*49*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18864*0 + 3*49*FLEN/8, x4, x1, x2)

inst_6289:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x649633 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de49633; op2val:0x0;
op3val:0xffffff0; valaddr_reg:x3; val_offset:18867*0 + 3*49*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18867*0 + 3*49*FLEN/8, x4, x1, x2)

inst_6290:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x649633 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de49633; op2val:0x0;
op3val:0xffffff8; valaddr_reg:x3; val_offset:18870*0 + 3*49*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18870*0 + 3*49*FLEN/8, x4, x1, x2)

inst_6291:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x649633 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de49633; op2val:0x0;
op3val:0xffffffc; valaddr_reg:x3; val_offset:18873*0 + 3*49*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18873*0 + 3*49*FLEN/8, x4, x1, x2)

inst_6292:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x649633 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de49633; op2val:0x0;
op3val:0xffffffe; valaddr_reg:x3; val_offset:18876*0 + 3*49*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18876*0 + 3*49*FLEN/8, x4, x1, x2)

inst_6293:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x649633 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de49633; op2val:0x0;
op3val:0xfffffff; valaddr_reg:x3; val_offset:18879*0 + 3*49*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18879*0 + 3*49*FLEN/8, x4, x1, x2)

inst_6294:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x65b594 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0ea65d and fs3 == 0 and fe3 == 0x41 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de5b594; op2val:0x10ea65d;
op3val:0x20800000; valaddr_reg:x3; val_offset:18882*0 + 3*49*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18882*0 + 3*49*FLEN/8, x4, x1, x2)

inst_6295:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x65b594 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0ea65d and fs3 == 0 and fe3 == 0x41 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de5b594; op2val:0x10ea65d;
op3val:0x20800001; valaddr_reg:x3; val_offset:18885*0 + 3*49*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18885*0 + 3*49*FLEN/8, x4, x1, x2)

inst_6296:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x65b594 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0ea65d and fs3 == 0 and fe3 == 0x41 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de5b594; op2val:0x10ea65d;
op3val:0x20800003; valaddr_reg:x3; val_offset:18888*0 + 3*49*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18888*0 + 3*49*FLEN/8, x4, x1, x2)

inst_6297:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x65b594 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0ea65d and fs3 == 0 and fe3 == 0x41 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de5b594; op2val:0x10ea65d;
op3val:0x20800007; valaddr_reg:x3; val_offset:18891*0 + 3*49*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18891*0 + 3*49*FLEN/8, x4, x1, x2)

inst_6298:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x65b594 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0ea65d and fs3 == 0 and fe3 == 0x41 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de5b594; op2val:0x10ea65d;
op3val:0x2080000f; valaddr_reg:x3; val_offset:18894*0 + 3*49*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18894*0 + 3*49*FLEN/8, x4, x1, x2)

inst_6299:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x65b594 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0ea65d and fs3 == 0 and fe3 == 0x41 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de5b594; op2val:0x10ea65d;
op3val:0x2080001f; valaddr_reg:x3; val_offset:18897*0 + 3*49*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18897*0 + 3*49*FLEN/8, x4, x1, x2)

inst_6300:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x65b594 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0ea65d and fs3 == 0 and fe3 == 0x41 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de5b594; op2val:0x10ea65d;
op3val:0x2080003f; valaddr_reg:x3; val_offset:18900*0 + 3*49*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18900*0 + 3*49*FLEN/8, x4, x1, x2)

inst_6301:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x65b594 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0ea65d and fs3 == 0 and fe3 == 0x41 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de5b594; op2val:0x10ea65d;
op3val:0x2080007f; valaddr_reg:x3; val_offset:18903*0 + 3*49*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18903*0 + 3*49*FLEN/8, x4, x1, x2)

inst_6302:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x65b594 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0ea65d and fs3 == 0 and fe3 == 0x41 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de5b594; op2val:0x10ea65d;
op3val:0x208000ff; valaddr_reg:x3; val_offset:18906*0 + 3*49*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18906*0 + 3*49*FLEN/8, x4, x1, x2)

inst_6303:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x65b594 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0ea65d and fs3 == 0 and fe3 == 0x41 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de5b594; op2val:0x10ea65d;
op3val:0x208001ff; valaddr_reg:x3; val_offset:18909*0 + 3*49*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18909*0 + 3*49*FLEN/8, x4, x1, x2)

inst_6304:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x65b594 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0ea65d and fs3 == 0 and fe3 == 0x41 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de5b594; op2val:0x10ea65d;
op3val:0x208003ff; valaddr_reg:x3; val_offset:18912*0 + 3*49*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18912*0 + 3*49*FLEN/8, x4, x1, x2)

inst_6305:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x65b594 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0ea65d and fs3 == 0 and fe3 == 0x41 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de5b594; op2val:0x10ea65d;
op3val:0x208007ff; valaddr_reg:x3; val_offset:18915*0 + 3*49*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18915*0 + 3*49*FLEN/8, x4, x1, x2)

inst_6306:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x65b594 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0ea65d and fs3 == 0 and fe3 == 0x41 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de5b594; op2val:0x10ea65d;
op3val:0x20800fff; valaddr_reg:x3; val_offset:18918*0 + 3*49*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18918*0 + 3*49*FLEN/8, x4, x1, x2)

inst_6307:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x65b594 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0ea65d and fs3 == 0 and fe3 == 0x41 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de5b594; op2val:0x10ea65d;
op3val:0x20801fff; valaddr_reg:x3; val_offset:18921*0 + 3*49*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18921*0 + 3*49*FLEN/8, x4, x1, x2)

inst_6308:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x65b594 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0ea65d and fs3 == 0 and fe3 == 0x41 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de5b594; op2val:0x10ea65d;
op3val:0x20803fff; valaddr_reg:x3; val_offset:18924*0 + 3*49*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18924*0 + 3*49*FLEN/8, x4, x1, x2)

inst_6309:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x65b594 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0ea65d and fs3 == 0 and fe3 == 0x41 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de5b594; op2val:0x10ea65d;
op3val:0x20807fff; valaddr_reg:x3; val_offset:18927*0 + 3*49*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18927*0 + 3*49*FLEN/8, x4, x1, x2)

inst_6310:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x65b594 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0ea65d and fs3 == 0 and fe3 == 0x41 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de5b594; op2val:0x10ea65d;
op3val:0x2080ffff; valaddr_reg:x3; val_offset:18930*0 + 3*49*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18930*0 + 3*49*FLEN/8, x4, x1, x2)

inst_6311:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x65b594 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0ea65d and fs3 == 0 and fe3 == 0x41 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de5b594; op2val:0x10ea65d;
op3val:0x2081ffff; valaddr_reg:x3; val_offset:18933*0 + 3*49*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18933*0 + 3*49*FLEN/8, x4, x1, x2)

inst_6312:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x65b594 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0ea65d and fs3 == 0 and fe3 == 0x41 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de5b594; op2val:0x10ea65d;
op3val:0x2083ffff; valaddr_reg:x3; val_offset:18936*0 + 3*49*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18936*0 + 3*49*FLEN/8, x4, x1, x2)

inst_6313:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x65b594 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0ea65d and fs3 == 0 and fe3 == 0x41 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de5b594; op2val:0x10ea65d;
op3val:0x2087ffff; valaddr_reg:x3; val_offset:18939*0 + 3*49*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18939*0 + 3*49*FLEN/8, x4, x1, x2)

inst_6314:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x65b594 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0ea65d and fs3 == 0 and fe3 == 0x41 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de5b594; op2val:0x10ea65d;
op3val:0x208fffff; valaddr_reg:x3; val_offset:18942*0 + 3*49*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18942*0 + 3*49*FLEN/8, x4, x1, x2)

inst_6315:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x65b594 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0ea65d and fs3 == 0 and fe3 == 0x41 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de5b594; op2val:0x10ea65d;
op3val:0x209fffff; valaddr_reg:x3; val_offset:18945*0 + 3*49*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18945*0 + 3*49*FLEN/8, x4, x1, x2)

inst_6316:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x65b594 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0ea65d and fs3 == 0 and fe3 == 0x41 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de5b594; op2val:0x10ea65d;
op3val:0x20bfffff; valaddr_reg:x3; val_offset:18948*0 + 3*49*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18948*0 + 3*49*FLEN/8, x4, x1, x2)

inst_6317:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x65b594 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0ea65d and fs3 == 0 and fe3 == 0x41 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de5b594; op2val:0x10ea65d;
op3val:0x20c00000; valaddr_reg:x3; val_offset:18951*0 + 3*49*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18951*0 + 3*49*FLEN/8, x4, x1, x2)

inst_6318:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x65b594 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0ea65d and fs3 == 0 and fe3 == 0x41 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de5b594; op2val:0x10ea65d;
op3val:0x20e00000; valaddr_reg:x3; val_offset:18954*0 + 3*49*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18954*0 + 3*49*FLEN/8, x4, x1, x2)

inst_6319:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x65b594 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0ea65d and fs3 == 0 and fe3 == 0x41 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de5b594; op2val:0x10ea65d;
op3val:0x20f00000; valaddr_reg:x3; val_offset:18957*0 + 3*49*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18957*0 + 3*49*FLEN/8, x4, x1, x2)

inst_6320:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x65b594 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0ea65d and fs3 == 0 and fe3 == 0x41 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de5b594; op2val:0x10ea65d;
op3val:0x20f80000; valaddr_reg:x3; val_offset:18960*0 + 3*49*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18960*0 + 3*49*FLEN/8, x4, x1, x2)

inst_6321:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x65b594 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0ea65d and fs3 == 0 and fe3 == 0x41 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de5b594; op2val:0x10ea65d;
op3val:0x20fc0000; valaddr_reg:x3; val_offset:18963*0 + 3*49*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18963*0 + 3*49*FLEN/8, x4, x1, x2)

inst_6322:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x65b594 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0ea65d and fs3 == 0 and fe3 == 0x41 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de5b594; op2val:0x10ea65d;
op3val:0x20fe0000; valaddr_reg:x3; val_offset:18966*0 + 3*49*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18966*0 + 3*49*FLEN/8, x4, x1, x2)

inst_6323:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x65b594 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0ea65d and fs3 == 0 and fe3 == 0x41 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de5b594; op2val:0x10ea65d;
op3val:0x20ff0000; valaddr_reg:x3; val_offset:18969*0 + 3*49*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18969*0 + 3*49*FLEN/8, x4, x1, x2)

inst_6324:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x65b594 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0ea65d and fs3 == 0 and fe3 == 0x41 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de5b594; op2val:0x10ea65d;
op3val:0x20ff8000; valaddr_reg:x3; val_offset:18972*0 + 3*49*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18972*0 + 3*49*FLEN/8, x4, x1, x2)

inst_6325:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x65b594 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0ea65d and fs3 == 0 and fe3 == 0x41 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de5b594; op2val:0x10ea65d;
op3val:0x20ffc000; valaddr_reg:x3; val_offset:18975*0 + 3*49*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18975*0 + 3*49*FLEN/8, x4, x1, x2)

inst_6326:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x65b594 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0ea65d and fs3 == 0 and fe3 == 0x41 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de5b594; op2val:0x10ea65d;
op3val:0x20ffe000; valaddr_reg:x3; val_offset:18978*0 + 3*49*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18978*0 + 3*49*FLEN/8, x4, x1, x2)

inst_6327:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x65b594 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0ea65d and fs3 == 0 and fe3 == 0x41 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de5b594; op2val:0x10ea65d;
op3val:0x20fff000; valaddr_reg:x3; val_offset:18981*0 + 3*49*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18981*0 + 3*49*FLEN/8, x4, x1, x2)

inst_6328:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x65b594 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0ea65d and fs3 == 0 and fe3 == 0x41 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de5b594; op2val:0x10ea65d;
op3val:0x20fff800; valaddr_reg:x3; val_offset:18984*0 + 3*49*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18984*0 + 3*49*FLEN/8, x4, x1, x2)

inst_6329:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x65b594 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0ea65d and fs3 == 0 and fe3 == 0x41 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de5b594; op2val:0x10ea65d;
op3val:0x20fffc00; valaddr_reg:x3; val_offset:18987*0 + 3*49*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18987*0 + 3*49*FLEN/8, x4, x1, x2)

inst_6330:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x65b594 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0ea65d and fs3 == 0 and fe3 == 0x41 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de5b594; op2val:0x10ea65d;
op3val:0x20fffe00; valaddr_reg:x3; val_offset:18990*0 + 3*49*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18990*0 + 3*49*FLEN/8, x4, x1, x2)

inst_6331:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x65b594 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0ea65d and fs3 == 0 and fe3 == 0x41 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de5b594; op2val:0x10ea65d;
op3val:0x20ffff00; valaddr_reg:x3; val_offset:18993*0 + 3*49*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18993*0 + 3*49*FLEN/8, x4, x1, x2)

inst_6332:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x65b594 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0ea65d and fs3 == 0 and fe3 == 0x41 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de5b594; op2val:0x10ea65d;
op3val:0x20ffff80; valaddr_reg:x3; val_offset:18996*0 + 3*49*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18996*0 + 3*49*FLEN/8, x4, x1, x2)

inst_6333:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x65b594 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0ea65d and fs3 == 0 and fe3 == 0x41 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de5b594; op2val:0x10ea65d;
op3val:0x20ffffc0; valaddr_reg:x3; val_offset:18999*0 + 3*49*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18999*0 + 3*49*FLEN/8, x4, x1, x2)

inst_6334:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x65b594 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0ea65d and fs3 == 0 and fe3 == 0x41 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de5b594; op2val:0x10ea65d;
op3val:0x20ffffe0; valaddr_reg:x3; val_offset:19002*0 + 3*49*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19002*0 + 3*49*FLEN/8, x4, x1, x2)

inst_6335:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x65b594 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0ea65d and fs3 == 0 and fe3 == 0x41 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de5b594; op2val:0x10ea65d;
op3val:0x20fffff0; valaddr_reg:x3; val_offset:19005*0 + 3*49*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19005*0 + 3*49*FLEN/8, x4, x1, x2)

inst_6336:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x65b594 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0ea65d and fs3 == 0 and fe3 == 0x41 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de5b594; op2val:0x10ea65d;
op3val:0x20fffff8; valaddr_reg:x3; val_offset:19008*0 + 3*49*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19008*0 + 3*49*FLEN/8, x4, x1, x2)

inst_6337:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x65b594 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0ea65d and fs3 == 0 and fe3 == 0x41 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de5b594; op2val:0x10ea65d;
op3val:0x20fffffc; valaddr_reg:x3; val_offset:19011*0 + 3*49*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19011*0 + 3*49*FLEN/8, x4, x1, x2)

inst_6338:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x65b594 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0ea65d and fs3 == 0 and fe3 == 0x41 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de5b594; op2val:0x10ea65d;
op3val:0x20fffffe; valaddr_reg:x3; val_offset:19014*0 + 3*49*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19014*0 + 3*49*FLEN/8, x4, x1, x2)

inst_6339:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x65b594 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0ea65d and fs3 == 0 and fe3 == 0x41 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de5b594; op2val:0x10ea65d;
op3val:0x20ffffff; valaddr_reg:x3; val_offset:19017*0 + 3*49*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19017*0 + 3*49*FLEN/8, x4, x1, x2)

inst_6340:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x65b594 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0ea65d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de5b594; op2val:0x10ea65d;
op3val:0x3f800001; valaddr_reg:x3; val_offset:19020*0 + 3*49*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19020*0 + 3*49*FLEN/8, x4, x1, x2)

inst_6341:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x65b594 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0ea65d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de5b594; op2val:0x10ea65d;
op3val:0x3f800003; valaddr_reg:x3; val_offset:19023*0 + 3*49*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19023*0 + 3*49*FLEN/8, x4, x1, x2)

inst_6342:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x65b594 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0ea65d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de5b594; op2val:0x10ea65d;
op3val:0x3f800007; valaddr_reg:x3; val_offset:19026*0 + 3*49*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19026*0 + 3*49*FLEN/8, x4, x1, x2)

inst_6343:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x65b594 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0ea65d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de5b594; op2val:0x10ea65d;
op3val:0x3f999999; valaddr_reg:x3; val_offset:19029*0 + 3*49*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19029*0 + 3*49*FLEN/8, x4, x1, x2)

inst_6344:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x65b594 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0ea65d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de5b594; op2val:0x10ea65d;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:19032*0 + 3*49*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19032*0 + 3*49*FLEN/8, x4, x1, x2)

inst_6345:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x65b594 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0ea65d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de5b594; op2val:0x10ea65d;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:19035*0 + 3*49*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19035*0 + 3*49*FLEN/8, x4, x1, x2)

inst_6346:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x65b594 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0ea65d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de5b594; op2val:0x10ea65d;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:19038*0 + 3*49*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19038*0 + 3*49*FLEN/8, x4, x1, x2)

inst_6347:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x65b594 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0ea65d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de5b594; op2val:0x10ea65d;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:19041*0 + 3*49*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19041*0 + 3*49*FLEN/8, x4, x1, x2)

inst_6348:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x65b594 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0ea65d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de5b594; op2val:0x10ea65d;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:19044*0 + 3*49*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19044*0 + 3*49*FLEN/8, x4, x1, x2)

inst_6349:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x65b594 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0ea65d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de5b594; op2val:0x10ea65d;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:19047*0 + 3*49*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19047*0 + 3*49*FLEN/8, x4, x1, x2)

inst_6350:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x65b594 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0ea65d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de5b594; op2val:0x10ea65d;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:19050*0 + 3*49*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19050*0 + 3*49*FLEN/8, x4, x1, x2)

inst_6351:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x65b594 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0ea65d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de5b594; op2val:0x10ea65d;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:19053*0 + 3*49*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19053*0 + 3*49*FLEN/8, x4, x1, x2)

inst_6352:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x65b594 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0ea65d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de5b594; op2val:0x10ea65d;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:19056*0 + 3*49*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19056*0 + 3*49*FLEN/8, x4, x1, x2)

inst_6353:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x65b594 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0ea65d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de5b594; op2val:0x10ea65d;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:19059*0 + 3*49*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19059*0 + 3*49*FLEN/8, x4, x1, x2)

inst_6354:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x65b594 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0ea65d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de5b594; op2val:0x10ea65d;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:19062*0 + 3*49*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19062*0 + 3*49*FLEN/8, x4, x1, x2)

inst_6355:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x65b594 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0ea65d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de5b594; op2val:0x10ea65d;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:19065*0 + 3*49*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19065*0 + 3*49*FLEN/8, x4, x1, x2)

inst_6356:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x688038 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de88038; op2val:0x0;
op3val:0x800001; valaddr_reg:x3; val_offset:19068*0 + 3*49*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19068*0 + 3*49*FLEN/8, x4, x1, x2)

inst_6357:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x688038 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de88038; op2val:0x0;
op3val:0x800003; valaddr_reg:x3; val_offset:19071*0 + 3*49*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19071*0 + 3*49*FLEN/8, x4, x1, x2)

inst_6358:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x688038 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de88038; op2val:0x0;
op3val:0x800007; valaddr_reg:x3; val_offset:19074*0 + 3*49*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19074*0 + 3*49*FLEN/8, x4, x1, x2)

inst_6359:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x688038 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de88038; op2val:0x0;
op3val:0x999999; valaddr_reg:x3; val_offset:19077*0 + 3*49*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19077*0 + 3*49*FLEN/8, x4, x1, x2)

inst_6360:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x688038 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de88038; op2val:0x0;
op3val:0xa49249; valaddr_reg:x3; val_offset:19080*0 + 3*49*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19080*0 + 3*49*FLEN/8, x4, x1, x2)

inst_6361:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x688038 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de88038; op2val:0x0;
op3val:0xb33333; valaddr_reg:x3; val_offset:19083*0 + 3*49*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19083*0 + 3*49*FLEN/8, x4, x1, x2)

inst_6362:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x688038 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de88038; op2val:0x0;
op3val:0xb6db6d; valaddr_reg:x3; val_offset:19086*0 + 3*49*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19086*0 + 3*49*FLEN/8, x4, x1, x2)

inst_6363:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x688038 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de88038; op2val:0x0;
op3val:0xbbbbbb; valaddr_reg:x3; val_offset:19089*0 + 3*49*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19089*0 + 3*49*FLEN/8, x4, x1, x2)

inst_6364:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x688038 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de88038; op2val:0x0;
op3val:0xc44444; valaddr_reg:x3; val_offset:19092*0 + 3*49*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19092*0 + 3*49*FLEN/8, x4, x1, x2)

inst_6365:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x688038 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de88038; op2val:0x0;
op3val:0xcccccc; valaddr_reg:x3; val_offset:19095*0 + 3*49*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19095*0 + 3*49*FLEN/8, x4, x1, x2)

inst_6366:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x688038 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de88038; op2val:0x0;
op3val:0xdb6db6; valaddr_reg:x3; val_offset:19098*0 + 3*49*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19098*0 + 3*49*FLEN/8, x4, x1, x2)

inst_6367:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x688038 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de88038; op2val:0x0;
op3val:0xe66666; valaddr_reg:x3; val_offset:19101*0 + 3*49*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19101*0 + 3*49*FLEN/8, x4, x1, x2)

inst_6368:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x688038 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de88038; op2val:0x0;
op3val:0xedb6db; valaddr_reg:x3; val_offset:19104*0 + 3*49*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19104*0 + 3*49*FLEN/8, x4, x1, x2)

inst_6369:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x688038 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de88038; op2val:0x0;
op3val:0xfffff8; valaddr_reg:x3; val_offset:19107*0 + 3*49*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19107*0 + 3*49*FLEN/8, x4, x1, x2)

inst_6370:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x688038 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de88038; op2val:0x0;
op3val:0xfffffc; valaddr_reg:x3; val_offset:19110*0 + 3*49*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19110*0 + 3*49*FLEN/8, x4, x1, x2)

inst_6371:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x688038 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de88038; op2val:0x0;
op3val:0xfffffe; valaddr_reg:x3; val_offset:19113*0 + 3*49*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19113*0 + 3*49*FLEN/8, x4, x1, x2)

inst_6372:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x688038 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de88038; op2val:0x0;
op3val:0x6800000; valaddr_reg:x3; val_offset:19116*0 + 3*49*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19116*0 + 3*49*FLEN/8, x4, x1, x2)

inst_6373:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x688038 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de88038; op2val:0x0;
op3val:0x6800001; valaddr_reg:x3; val_offset:19119*0 + 3*49*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19119*0 + 3*49*FLEN/8, x4, x1, x2)

inst_6374:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x688038 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de88038; op2val:0x0;
op3val:0x6800003; valaddr_reg:x3; val_offset:19122*0 + 3*49*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19122*0 + 3*49*FLEN/8, x4, x1, x2)

inst_6375:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x688038 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de88038; op2val:0x0;
op3val:0x6800007; valaddr_reg:x3; val_offset:19125*0 + 3*49*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19125*0 + 3*49*FLEN/8, x4, x1, x2)

inst_6376:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x688038 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de88038; op2val:0x0;
op3val:0x680000f; valaddr_reg:x3; val_offset:19128*0 + 3*49*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19128*0 + 3*49*FLEN/8, x4, x1, x2)

inst_6377:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x688038 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de88038; op2val:0x0;
op3val:0x680001f; valaddr_reg:x3; val_offset:19131*0 + 3*49*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19131*0 + 3*49*FLEN/8, x4, x1, x2)

inst_6378:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x688038 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de88038; op2val:0x0;
op3val:0x680003f; valaddr_reg:x3; val_offset:19134*0 + 3*49*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19134*0 + 3*49*FLEN/8, x4, x1, x2)

inst_6379:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x688038 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de88038; op2val:0x0;
op3val:0x680007f; valaddr_reg:x3; val_offset:19137*0 + 3*49*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19137*0 + 3*49*FLEN/8, x4, x1, x2)

inst_6380:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x688038 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de88038; op2val:0x0;
op3val:0x68000ff; valaddr_reg:x3; val_offset:19140*0 + 3*49*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19140*0 + 3*49*FLEN/8, x4, x1, x2)

inst_6381:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x688038 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de88038; op2val:0x0;
op3val:0x68001ff; valaddr_reg:x3; val_offset:19143*0 + 3*49*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19143*0 + 3*49*FLEN/8, x4, x1, x2)

inst_6382:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x688038 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de88038; op2val:0x0;
op3val:0x68003ff; valaddr_reg:x3; val_offset:19146*0 + 3*49*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19146*0 + 3*49*FLEN/8, x4, x1, x2)

inst_6383:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x688038 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de88038; op2val:0x0;
op3val:0x68007ff; valaddr_reg:x3; val_offset:19149*0 + 3*49*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19149*0 + 3*49*FLEN/8, x4, x1, x2)

inst_6384:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x688038 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de88038; op2val:0x0;
op3val:0x6800fff; valaddr_reg:x3; val_offset:19152*0 + 3*49*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19152*0 + 3*49*FLEN/8, x4, x1, x2)

inst_6385:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x688038 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de88038; op2val:0x0;
op3val:0x6801fff; valaddr_reg:x3; val_offset:19155*0 + 3*49*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19155*0 + 3*49*FLEN/8, x4, x1, x2)

inst_6386:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x688038 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de88038; op2val:0x0;
op3val:0x6803fff; valaddr_reg:x3; val_offset:19158*0 + 3*49*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19158*0 + 3*49*FLEN/8, x4, x1, x2)

inst_6387:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x688038 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de88038; op2val:0x0;
op3val:0x6807fff; valaddr_reg:x3; val_offset:19161*0 + 3*49*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19161*0 + 3*49*FLEN/8, x4, x1, x2)

inst_6388:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x688038 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de88038; op2val:0x0;
op3val:0x680ffff; valaddr_reg:x3; val_offset:19164*0 + 3*49*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19164*0 + 3*49*FLEN/8, x4, x1, x2)

inst_6389:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x688038 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de88038; op2val:0x0;
op3val:0x681ffff; valaddr_reg:x3; val_offset:19167*0 + 3*49*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19167*0 + 3*49*FLEN/8, x4, x1, x2)

inst_6390:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x688038 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de88038; op2val:0x0;
op3val:0x683ffff; valaddr_reg:x3; val_offset:19170*0 + 3*49*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19170*0 + 3*49*FLEN/8, x4, x1, x2)

inst_6391:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x688038 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de88038; op2val:0x0;
op3val:0x687ffff; valaddr_reg:x3; val_offset:19173*0 + 3*49*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19173*0 + 3*49*FLEN/8, x4, x1, x2)

inst_6392:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x688038 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de88038; op2val:0x0;
op3val:0x68fffff; valaddr_reg:x3; val_offset:19176*0 + 3*49*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19176*0 + 3*49*FLEN/8, x4, x1, x2)

inst_6393:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x688038 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de88038; op2val:0x0;
op3val:0x69fffff; valaddr_reg:x3; val_offset:19179*0 + 3*49*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19179*0 + 3*49*FLEN/8, x4, x1, x2)

inst_6394:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x688038 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de88038; op2val:0x0;
op3val:0x6bfffff; valaddr_reg:x3; val_offset:19182*0 + 3*49*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19182*0 + 3*49*FLEN/8, x4, x1, x2)

inst_6395:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x688038 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de88038; op2val:0x0;
op3val:0x6c00000; valaddr_reg:x3; val_offset:19185*0 + 3*49*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19185*0 + 3*49*FLEN/8, x4, x1, x2)

inst_6396:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x688038 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de88038; op2val:0x0;
op3val:0x6e00000; valaddr_reg:x3; val_offset:19188*0 + 3*49*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19188*0 + 3*49*FLEN/8, x4, x1, x2)

inst_6397:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x688038 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de88038; op2val:0x0;
op3val:0x6f00000; valaddr_reg:x3; val_offset:19191*0 + 3*49*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19191*0 + 3*49*FLEN/8, x4, x1, x2)

inst_6398:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x688038 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de88038; op2val:0x0;
op3val:0x6f80000; valaddr_reg:x3; val_offset:19194*0 + 3*49*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19194*0 + 3*49*FLEN/8, x4, x1, x2)

inst_6399:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x688038 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de88038; op2val:0x0;
op3val:0x6fc0000; valaddr_reg:x3; val_offset:19197*0 + 3*49*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19197*0 + 3*49*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2112132659,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(266338304,32,FLEN)
NAN_BOXED(2112132659,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(267386880,32,FLEN)
NAN_BOXED(2112132659,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(267911168,32,FLEN)
NAN_BOXED(2112132659,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268173312,32,FLEN)
NAN_BOXED(2112132659,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268304384,32,FLEN)
NAN_BOXED(2112132659,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268369920,32,FLEN)
NAN_BOXED(2112132659,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268402688,32,FLEN)
NAN_BOXED(2112132659,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268419072,32,FLEN)
NAN_BOXED(2112132659,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268427264,32,FLEN)
NAN_BOXED(2112132659,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268431360,32,FLEN)
NAN_BOXED(2112132659,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268433408,32,FLEN)
NAN_BOXED(2112132659,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268434432,32,FLEN)
NAN_BOXED(2112132659,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268434944,32,FLEN)
NAN_BOXED(2112132659,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268435200,32,FLEN)
NAN_BOXED(2112132659,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268435328,32,FLEN)
NAN_BOXED(2112132659,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268435392,32,FLEN)
NAN_BOXED(2112132659,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268435424,32,FLEN)
NAN_BOXED(2112132659,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268435440,32,FLEN)
NAN_BOXED(2112132659,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268435448,32,FLEN)
NAN_BOXED(2112132659,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268435452,32,FLEN)
NAN_BOXED(2112132659,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268435454,32,FLEN)
NAN_BOXED(2112132659,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268435455,32,FLEN)
NAN_BOXED(2112206228,32,FLEN)
NAN_BOXED(17737309,32,FLEN)
NAN_BOXED(545259520,32,FLEN)
NAN_BOXED(2112206228,32,FLEN)
NAN_BOXED(17737309,32,FLEN)
NAN_BOXED(545259521,32,FLEN)
NAN_BOXED(2112206228,32,FLEN)
NAN_BOXED(17737309,32,FLEN)
NAN_BOXED(545259523,32,FLEN)
NAN_BOXED(2112206228,32,FLEN)
NAN_BOXED(17737309,32,FLEN)
NAN_BOXED(545259527,32,FLEN)
NAN_BOXED(2112206228,32,FLEN)
NAN_BOXED(17737309,32,FLEN)
NAN_BOXED(545259535,32,FLEN)
NAN_BOXED(2112206228,32,FLEN)
NAN_BOXED(17737309,32,FLEN)
NAN_BOXED(545259551,32,FLEN)
NAN_BOXED(2112206228,32,FLEN)
NAN_BOXED(17737309,32,FLEN)
NAN_BOXED(545259583,32,FLEN)
NAN_BOXED(2112206228,32,FLEN)
NAN_BOXED(17737309,32,FLEN)
NAN_BOXED(545259647,32,FLEN)
NAN_BOXED(2112206228,32,FLEN)
NAN_BOXED(17737309,32,FLEN)
NAN_BOXED(545259775,32,FLEN)
NAN_BOXED(2112206228,32,FLEN)
NAN_BOXED(17737309,32,FLEN)
NAN_BOXED(545260031,32,FLEN)
NAN_BOXED(2112206228,32,FLEN)
NAN_BOXED(17737309,32,FLEN)
NAN_BOXED(545260543,32,FLEN)
NAN_BOXED(2112206228,32,FLEN)
NAN_BOXED(17737309,32,FLEN)
NAN_BOXED(545261567,32,FLEN)
NAN_BOXED(2112206228,32,FLEN)
NAN_BOXED(17737309,32,FLEN)
NAN_BOXED(545263615,32,FLEN)
NAN_BOXED(2112206228,32,FLEN)
NAN_BOXED(17737309,32,FLEN)
NAN_BOXED(545267711,32,FLEN)
NAN_BOXED(2112206228,32,FLEN)
NAN_BOXED(17737309,32,FLEN)
NAN_BOXED(545275903,32,FLEN)
NAN_BOXED(2112206228,32,FLEN)
NAN_BOXED(17737309,32,FLEN)
NAN_BOXED(545292287,32,FLEN)
NAN_BOXED(2112206228,32,FLEN)
NAN_BOXED(17737309,32,FLEN)
NAN_BOXED(545325055,32,FLEN)
NAN_BOXED(2112206228,32,FLEN)
NAN_BOXED(17737309,32,FLEN)
NAN_BOXED(545390591,32,FLEN)
NAN_BOXED(2112206228,32,FLEN)
NAN_BOXED(17737309,32,FLEN)
NAN_BOXED(545521663,32,FLEN)
NAN_BOXED(2112206228,32,FLEN)
NAN_BOXED(17737309,32,FLEN)
NAN_BOXED(545783807,32,FLEN)
NAN_BOXED(2112206228,32,FLEN)
NAN_BOXED(17737309,32,FLEN)
NAN_BOXED(546308095,32,FLEN)
NAN_BOXED(2112206228,32,FLEN)
NAN_BOXED(17737309,32,FLEN)
NAN_BOXED(547356671,32,FLEN)
NAN_BOXED(2112206228,32,FLEN)
NAN_BOXED(17737309,32,FLEN)
NAN_BOXED(549453823,32,FLEN)
NAN_BOXED(2112206228,32,FLEN)
NAN_BOXED(17737309,32,FLEN)
NAN_BOXED(549453824,32,FLEN)
NAN_BOXED(2112206228,32,FLEN)
NAN_BOXED(17737309,32,FLEN)
NAN_BOXED(551550976,32,FLEN)
NAN_BOXED(2112206228,32,FLEN)
NAN_BOXED(17737309,32,FLEN)
NAN_BOXED(552599552,32,FLEN)
NAN_BOXED(2112206228,32,FLEN)
NAN_BOXED(17737309,32,FLEN)
NAN_BOXED(553123840,32,FLEN)
NAN_BOXED(2112206228,32,FLEN)
NAN_BOXED(17737309,32,FLEN)
NAN_BOXED(553385984,32,FLEN)
NAN_BOXED(2112206228,32,FLEN)
NAN_BOXED(17737309,32,FLEN)
NAN_BOXED(553517056,32,FLEN)
NAN_BOXED(2112206228,32,FLEN)
NAN_BOXED(17737309,32,FLEN)
NAN_BOXED(553582592,32,FLEN)
NAN_BOXED(2112206228,32,FLEN)
NAN_BOXED(17737309,32,FLEN)
NAN_BOXED(553615360,32,FLEN)
NAN_BOXED(2112206228,32,FLEN)
NAN_BOXED(17737309,32,FLEN)
NAN_BOXED(553631744,32,FLEN)
NAN_BOXED(2112206228,32,FLEN)
NAN_BOXED(17737309,32,FLEN)
NAN_BOXED(553639936,32,FLEN)
NAN_BOXED(2112206228,32,FLEN)
NAN_BOXED(17737309,32,FLEN)
NAN_BOXED(553644032,32,FLEN)
NAN_BOXED(2112206228,32,FLEN)
NAN_BOXED(17737309,32,FLEN)
NAN_BOXED(553646080,32,FLEN)
NAN_BOXED(2112206228,32,FLEN)
NAN_BOXED(17737309,32,FLEN)
NAN_BOXED(553647104,32,FLEN)
NAN_BOXED(2112206228,32,FLEN)
NAN_BOXED(17737309,32,FLEN)
NAN_BOXED(553647616,32,FLEN)
NAN_BOXED(2112206228,32,FLEN)
NAN_BOXED(17737309,32,FLEN)
NAN_BOXED(553647872,32,FLEN)
NAN_BOXED(2112206228,32,FLEN)
NAN_BOXED(17737309,32,FLEN)
NAN_BOXED(553648000,32,FLEN)
NAN_BOXED(2112206228,32,FLEN)
NAN_BOXED(17737309,32,FLEN)
NAN_BOXED(553648064,32,FLEN)
NAN_BOXED(2112206228,32,FLEN)
NAN_BOXED(17737309,32,FLEN)
NAN_BOXED(553648096,32,FLEN)
NAN_BOXED(2112206228,32,FLEN)
NAN_BOXED(17737309,32,FLEN)
NAN_BOXED(553648112,32,FLEN)
NAN_BOXED(2112206228,32,FLEN)
NAN_BOXED(17737309,32,FLEN)
NAN_BOXED(553648120,32,FLEN)
NAN_BOXED(2112206228,32,FLEN)
NAN_BOXED(17737309,32,FLEN)
NAN_BOXED(553648124,32,FLEN)
NAN_BOXED(2112206228,32,FLEN)
NAN_BOXED(17737309,32,FLEN)
NAN_BOXED(553648126,32,FLEN)
NAN_BOXED(2112206228,32,FLEN)
NAN_BOXED(17737309,32,FLEN)
NAN_BOXED(553648127,32,FLEN)
NAN_BOXED(2112206228,32,FLEN)
NAN_BOXED(17737309,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2112206228,32,FLEN)
NAN_BOXED(17737309,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2112206228,32,FLEN)
NAN_BOXED(17737309,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2112206228,32,FLEN)
NAN_BOXED(17737309,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2112206228,32,FLEN)
NAN_BOXED(17737309,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2112206228,32,FLEN)
NAN_BOXED(17737309,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2112206228,32,FLEN)
NAN_BOXED(17737309,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2112206228,32,FLEN)
NAN_BOXED(17737309,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2112206228,32,FLEN)
NAN_BOXED(17737309,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2112206228,32,FLEN)
NAN_BOXED(17737309,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2112206228,32,FLEN)
NAN_BOXED(17737309,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2112206228,32,FLEN)
NAN_BOXED(17737309,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2112206228,32,FLEN)
NAN_BOXED(17737309,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2112206228,32,FLEN)
NAN_BOXED(17737309,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2112206228,32,FLEN)
NAN_BOXED(17737309,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2112206228,32,FLEN)
NAN_BOXED(17737309,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2112389176,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(2112389176,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388611,32,FLEN)
NAN_BOXED(2112389176,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388615,32,FLEN)
NAN_BOXED(2112389176,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(10066329,32,FLEN)
NAN_BOXED(2112389176,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(10785353,32,FLEN)
NAN_BOXED(2112389176,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(11744051,32,FLEN)
NAN_BOXED(2112389176,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(11983725,32,FLEN)
NAN_BOXED(2112389176,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(12303291,32,FLEN)
NAN_BOXED(2112389176,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(12862532,32,FLEN)
NAN_BOXED(2112389176,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(13421772,32,FLEN)
NAN_BOXED(2112389176,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(14380470,32,FLEN)
NAN_BOXED(2112389176,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(15099494,32,FLEN)
NAN_BOXED(2112389176,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(15578843,32,FLEN)
NAN_BOXED(2112389176,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777208,32,FLEN)
NAN_BOXED(2112389176,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777212,32,FLEN)
NAN_BOXED(2112389176,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777214,32,FLEN)
NAN_BOXED(2112389176,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109051904,32,FLEN)
NAN_BOXED(2112389176,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109051905,32,FLEN)
NAN_BOXED(2112389176,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109051907,32,FLEN)
NAN_BOXED(2112389176,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109051911,32,FLEN)
NAN_BOXED(2112389176,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109051919,32,FLEN)
NAN_BOXED(2112389176,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109051935,32,FLEN)
NAN_BOXED(2112389176,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109051967,32,FLEN)
NAN_BOXED(2112389176,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109052031,32,FLEN)
NAN_BOXED(2112389176,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109052159,32,FLEN)
NAN_BOXED(2112389176,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109052415,32,FLEN)
NAN_BOXED(2112389176,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109052927,32,FLEN)
NAN_BOXED(2112389176,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109053951,32,FLEN)
NAN_BOXED(2112389176,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109055999,32,FLEN)
NAN_BOXED(2112389176,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109060095,32,FLEN)
NAN_BOXED(2112389176,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109068287,32,FLEN)
NAN_BOXED(2112389176,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109084671,32,FLEN)
NAN_BOXED(2112389176,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109117439,32,FLEN)
NAN_BOXED(2112389176,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109182975,32,FLEN)
NAN_BOXED(2112389176,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109314047,32,FLEN)
NAN_BOXED(2112389176,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109576191,32,FLEN)
NAN_BOXED(2112389176,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(110100479,32,FLEN)
NAN_BOXED(2112389176,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(111149055,32,FLEN)
NAN_BOXED(2112389176,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(113246207,32,FLEN)
NAN_BOXED(2112389176,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(113246208,32,FLEN)
NAN_BOXED(2112389176,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(115343360,32,FLEN)
NAN_BOXED(2112389176,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(116391936,32,FLEN)
NAN_BOXED(2112389176,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(116916224,32,FLEN)
NAN_BOXED(2112389176,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117178368,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
