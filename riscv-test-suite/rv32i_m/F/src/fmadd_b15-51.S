
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:17:59 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_6400:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x688038 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de88038; op2val:0x0;
op3val:0x6fe0000; valaddr_reg:x3; val_offset:19200*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19200*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6401:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x688038 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de88038; op2val:0x0;
op3val:0x6ff0000; valaddr_reg:x3; val_offset:19203*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19203*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6402:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x688038 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de88038; op2val:0x0;
op3val:0x6ff8000; valaddr_reg:x3; val_offset:19206*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19206*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6403:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x688038 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de88038; op2val:0x0;
op3val:0x6ffc000; valaddr_reg:x3; val_offset:19209*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19209*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6404:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x688038 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de88038; op2val:0x0;
op3val:0x6ffe000; valaddr_reg:x3; val_offset:19212*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19212*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6405:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x688038 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de88038; op2val:0x0;
op3val:0x6fff000; valaddr_reg:x3; val_offset:19215*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19215*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6406:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x688038 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de88038; op2val:0x0;
op3val:0x6fff800; valaddr_reg:x3; val_offset:19218*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19218*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6407:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x688038 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de88038; op2val:0x0;
op3val:0x6fffc00; valaddr_reg:x3; val_offset:19221*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19221*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6408:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x688038 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de88038; op2val:0x0;
op3val:0x6fffe00; valaddr_reg:x3; val_offset:19224*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19224*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6409:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x688038 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de88038; op2val:0x0;
op3val:0x6ffff00; valaddr_reg:x3; val_offset:19227*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19227*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6410:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x688038 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de88038; op2val:0x0;
op3val:0x6ffff80; valaddr_reg:x3; val_offset:19230*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19230*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6411:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x688038 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de88038; op2val:0x0;
op3val:0x6ffffc0; valaddr_reg:x3; val_offset:19233*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19233*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6412:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x688038 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de88038; op2val:0x0;
op3val:0x6ffffe0; valaddr_reg:x3; val_offset:19236*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19236*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6413:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x688038 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de88038; op2val:0x0;
op3val:0x6fffff0; valaddr_reg:x3; val_offset:19239*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19239*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6414:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x688038 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de88038; op2val:0x0;
op3val:0x6fffff8; valaddr_reg:x3; val_offset:19242*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19242*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6415:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x688038 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de88038; op2val:0x0;
op3val:0x6fffffc; valaddr_reg:x3; val_offset:19245*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19245*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6416:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x688038 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de88038; op2val:0x0;
op3val:0x6fffffe; valaddr_reg:x3; val_offset:19248*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19248*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6417:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x688038 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de88038; op2val:0x0;
op3val:0x6ffffff; valaddr_reg:x3; val_offset:19251*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19251*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6418:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x688296 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de88296; op2val:0x0;
op3val:0x800001; valaddr_reg:x3; val_offset:19254*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19254*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6419:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x688296 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de88296; op2val:0x0;
op3val:0x800003; valaddr_reg:x3; val_offset:19257*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19257*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6420:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x688296 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de88296; op2val:0x0;
op3val:0x800007; valaddr_reg:x3; val_offset:19260*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19260*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6421:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x688296 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de88296; op2val:0x0;
op3val:0x999999; valaddr_reg:x3; val_offset:19263*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19263*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6422:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x688296 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de88296; op2val:0x0;
op3val:0xa49249; valaddr_reg:x3; val_offset:19266*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19266*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6423:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x688296 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de88296; op2val:0x0;
op3val:0xb33333; valaddr_reg:x3; val_offset:19269*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19269*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6424:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x688296 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de88296; op2val:0x0;
op3val:0xb6db6d; valaddr_reg:x3; val_offset:19272*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19272*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6425:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x688296 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de88296; op2val:0x0;
op3val:0xbbbbbb; valaddr_reg:x3; val_offset:19275*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19275*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6426:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x688296 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de88296; op2val:0x0;
op3val:0xc44444; valaddr_reg:x3; val_offset:19278*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19278*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6427:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x688296 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de88296; op2val:0x0;
op3val:0xcccccc; valaddr_reg:x3; val_offset:19281*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19281*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6428:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x688296 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de88296; op2val:0x0;
op3val:0xdb6db6; valaddr_reg:x3; val_offset:19284*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19284*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6429:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x688296 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de88296; op2val:0x0;
op3val:0xe66666; valaddr_reg:x3; val_offset:19287*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19287*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6430:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x688296 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de88296; op2val:0x0;
op3val:0xedb6db; valaddr_reg:x3; val_offset:19290*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19290*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6431:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x688296 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de88296; op2val:0x0;
op3val:0xfffff8; valaddr_reg:x3; val_offset:19293*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19293*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6432:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x688296 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de88296; op2val:0x0;
op3val:0xfffffc; valaddr_reg:x3; val_offset:19296*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19296*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6433:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x688296 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de88296; op2val:0x0;
op3val:0xfffffe; valaddr_reg:x3; val_offset:19299*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19299*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6434:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x688296 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de88296; op2val:0x0;
op3val:0x3000000; valaddr_reg:x3; val_offset:19302*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19302*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6435:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x688296 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de88296; op2val:0x0;
op3val:0x3000001; valaddr_reg:x3; val_offset:19305*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19305*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6436:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x688296 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de88296; op2val:0x0;
op3val:0x3000003; valaddr_reg:x3; val_offset:19308*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19308*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6437:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x688296 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de88296; op2val:0x0;
op3val:0x3000007; valaddr_reg:x3; val_offset:19311*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19311*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6438:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x688296 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de88296; op2val:0x0;
op3val:0x300000f; valaddr_reg:x3; val_offset:19314*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19314*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6439:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x688296 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de88296; op2val:0x0;
op3val:0x300001f; valaddr_reg:x3; val_offset:19317*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19317*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6440:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x688296 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de88296; op2val:0x0;
op3val:0x300003f; valaddr_reg:x3; val_offset:19320*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19320*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6441:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x688296 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de88296; op2val:0x0;
op3val:0x300007f; valaddr_reg:x3; val_offset:19323*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19323*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6442:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x688296 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de88296; op2val:0x0;
op3val:0x30000ff; valaddr_reg:x3; val_offset:19326*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19326*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6443:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x688296 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de88296; op2val:0x0;
op3val:0x30001ff; valaddr_reg:x3; val_offset:19329*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19329*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6444:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x688296 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de88296; op2val:0x0;
op3val:0x30003ff; valaddr_reg:x3; val_offset:19332*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19332*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6445:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x688296 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de88296; op2val:0x0;
op3val:0x30007ff; valaddr_reg:x3; val_offset:19335*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19335*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6446:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x688296 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de88296; op2val:0x0;
op3val:0x3000fff; valaddr_reg:x3; val_offset:19338*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19338*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6447:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x688296 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de88296; op2val:0x0;
op3val:0x3001fff; valaddr_reg:x3; val_offset:19341*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19341*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6448:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x688296 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de88296; op2val:0x0;
op3val:0x3003fff; valaddr_reg:x3; val_offset:19344*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19344*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6449:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x688296 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de88296; op2val:0x0;
op3val:0x3007fff; valaddr_reg:x3; val_offset:19347*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19347*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6450:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x688296 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de88296; op2val:0x0;
op3val:0x300ffff; valaddr_reg:x3; val_offset:19350*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19350*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6451:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x688296 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de88296; op2val:0x0;
op3val:0x301ffff; valaddr_reg:x3; val_offset:19353*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19353*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6452:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x688296 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de88296; op2val:0x0;
op3val:0x303ffff; valaddr_reg:x3; val_offset:19356*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19356*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6453:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x688296 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de88296; op2val:0x0;
op3val:0x307ffff; valaddr_reg:x3; val_offset:19359*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19359*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6454:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x688296 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de88296; op2val:0x0;
op3val:0x30fffff; valaddr_reg:x3; val_offset:19362*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19362*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6455:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x688296 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de88296; op2val:0x0;
op3val:0x31fffff; valaddr_reg:x3; val_offset:19365*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19365*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6456:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x688296 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de88296; op2val:0x0;
op3val:0x33fffff; valaddr_reg:x3; val_offset:19368*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19368*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6457:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x688296 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de88296; op2val:0x0;
op3val:0x3400000; valaddr_reg:x3; val_offset:19371*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19371*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6458:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x688296 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de88296; op2val:0x0;
op3val:0x3600000; valaddr_reg:x3; val_offset:19374*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19374*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6459:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x688296 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de88296; op2val:0x0;
op3val:0x3700000; valaddr_reg:x3; val_offset:19377*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19377*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6460:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x688296 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de88296; op2val:0x0;
op3val:0x3780000; valaddr_reg:x3; val_offset:19380*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19380*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6461:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x688296 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de88296; op2val:0x0;
op3val:0x37c0000; valaddr_reg:x3; val_offset:19383*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19383*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6462:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x688296 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de88296; op2val:0x0;
op3val:0x37e0000; valaddr_reg:x3; val_offset:19386*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19386*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6463:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x688296 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de88296; op2val:0x0;
op3val:0x37f0000; valaddr_reg:x3; val_offset:19389*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19389*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6464:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x688296 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de88296; op2val:0x0;
op3val:0x37f8000; valaddr_reg:x3; val_offset:19392*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19392*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6465:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x688296 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de88296; op2val:0x0;
op3val:0x37fc000; valaddr_reg:x3; val_offset:19395*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19395*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6466:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x688296 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de88296; op2val:0x0;
op3val:0x37fe000; valaddr_reg:x3; val_offset:19398*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19398*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6467:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x688296 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de88296; op2val:0x0;
op3val:0x37ff000; valaddr_reg:x3; val_offset:19401*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19401*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6468:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x688296 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de88296; op2val:0x0;
op3val:0x37ff800; valaddr_reg:x3; val_offset:19404*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19404*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6469:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x688296 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de88296; op2val:0x0;
op3val:0x37ffc00; valaddr_reg:x3; val_offset:19407*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19407*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6470:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x688296 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de88296; op2val:0x0;
op3val:0x37ffe00; valaddr_reg:x3; val_offset:19410*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19410*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6471:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x688296 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de88296; op2val:0x0;
op3val:0x37fff00; valaddr_reg:x3; val_offset:19413*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19413*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6472:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x688296 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de88296; op2val:0x0;
op3val:0x37fff80; valaddr_reg:x3; val_offset:19416*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19416*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6473:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x688296 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de88296; op2val:0x0;
op3val:0x37fffc0; valaddr_reg:x3; val_offset:19419*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19419*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6474:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x688296 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de88296; op2val:0x0;
op3val:0x37fffe0; valaddr_reg:x3; val_offset:19422*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19422*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6475:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x688296 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de88296; op2val:0x0;
op3val:0x37ffff0; valaddr_reg:x3; val_offset:19425*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19425*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6476:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x688296 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de88296; op2val:0x0;
op3val:0x37ffff8; valaddr_reg:x3; val_offset:19428*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19428*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6477:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x688296 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de88296; op2val:0x0;
op3val:0x37ffffc; valaddr_reg:x3; val_offset:19431*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19431*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6478:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x688296 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de88296; op2val:0x0;
op3val:0x37ffffe; valaddr_reg:x3; val_offset:19434*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19434*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6479:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x688296 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de88296; op2val:0x0;
op3val:0x37fffff; valaddr_reg:x3; val_offset:19437*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19437*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6480:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6ba45a and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0b0ef3 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7deba45a; op2val:0x10b0ef3;
op3val:0x3f800001; valaddr_reg:x3; val_offset:19440*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19440*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6481:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6ba45a and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0b0ef3 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7deba45a; op2val:0x10b0ef3;
op3val:0x3f800003; valaddr_reg:x3; val_offset:19443*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19443*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6482:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6ba45a and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0b0ef3 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7deba45a; op2val:0x10b0ef3;
op3val:0x3f800007; valaddr_reg:x3; val_offset:19446*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19446*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6483:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6ba45a and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0b0ef3 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7deba45a; op2val:0x10b0ef3;
op3val:0x3f999999; valaddr_reg:x3; val_offset:19449*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19449*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6484:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6ba45a and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0b0ef3 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7deba45a; op2val:0x10b0ef3;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:19452*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19452*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6485:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6ba45a and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0b0ef3 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7deba45a; op2val:0x10b0ef3;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:19455*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19455*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6486:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6ba45a and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0b0ef3 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7deba45a; op2val:0x10b0ef3;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:19458*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19458*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6487:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6ba45a and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0b0ef3 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7deba45a; op2val:0x10b0ef3;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:19461*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19461*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6488:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6ba45a and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0b0ef3 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7deba45a; op2val:0x10b0ef3;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:19464*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19464*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6489:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6ba45a and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0b0ef3 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7deba45a; op2val:0x10b0ef3;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:19467*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19467*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6490:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6ba45a and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0b0ef3 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7deba45a; op2val:0x10b0ef3;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:19470*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19470*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6491:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6ba45a and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0b0ef3 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7deba45a; op2val:0x10b0ef3;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:19473*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19473*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6492:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6ba45a and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0b0ef3 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7deba45a; op2val:0x10b0ef3;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:19476*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19476*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6493:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6ba45a and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0b0ef3 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7deba45a; op2val:0x10b0ef3;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:19479*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19479*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6494:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6ba45a and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0b0ef3 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7deba45a; op2val:0x10b0ef3;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:19482*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19482*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6495:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6ba45a and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0b0ef3 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7deba45a; op2val:0x10b0ef3;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:19485*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19485*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6496:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6ba45a and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0b0ef3 and fs3 == 0 and fe3 == 0x9b and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7deba45a; op2val:0x10b0ef3;
op3val:0x4d800000; valaddr_reg:x3; val_offset:19488*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19488*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6497:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6ba45a and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0b0ef3 and fs3 == 0 and fe3 == 0x9b and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7deba45a; op2val:0x10b0ef3;
op3val:0x4d800001; valaddr_reg:x3; val_offset:19491*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19491*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6498:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6ba45a and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0b0ef3 and fs3 == 0 and fe3 == 0x9b and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7deba45a; op2val:0x10b0ef3;
op3val:0x4d800003; valaddr_reg:x3; val_offset:19494*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19494*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6499:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6ba45a and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0b0ef3 and fs3 == 0 and fe3 == 0x9b and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7deba45a; op2val:0x10b0ef3;
op3val:0x4d800007; valaddr_reg:x3; val_offset:19497*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19497*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6500:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6ba45a and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0b0ef3 and fs3 == 0 and fe3 == 0x9b and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7deba45a; op2val:0x10b0ef3;
op3val:0x4d80000f; valaddr_reg:x3; val_offset:19500*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19500*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6501:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6ba45a and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0b0ef3 and fs3 == 0 and fe3 == 0x9b and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7deba45a; op2val:0x10b0ef3;
op3val:0x4d80001f; valaddr_reg:x3; val_offset:19503*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19503*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6502:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6ba45a and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0b0ef3 and fs3 == 0 and fe3 == 0x9b and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7deba45a; op2val:0x10b0ef3;
op3val:0x4d80003f; valaddr_reg:x3; val_offset:19506*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19506*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6503:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6ba45a and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0b0ef3 and fs3 == 0 and fe3 == 0x9b and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7deba45a; op2val:0x10b0ef3;
op3val:0x4d80007f; valaddr_reg:x3; val_offset:19509*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19509*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6504:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6ba45a and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0b0ef3 and fs3 == 0 and fe3 == 0x9b and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7deba45a; op2val:0x10b0ef3;
op3val:0x4d8000ff; valaddr_reg:x3; val_offset:19512*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19512*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6505:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6ba45a and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0b0ef3 and fs3 == 0 and fe3 == 0x9b and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7deba45a; op2val:0x10b0ef3;
op3val:0x4d8001ff; valaddr_reg:x3; val_offset:19515*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19515*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6506:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6ba45a and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0b0ef3 and fs3 == 0 and fe3 == 0x9b and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7deba45a; op2val:0x10b0ef3;
op3val:0x4d8003ff; valaddr_reg:x3; val_offset:19518*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19518*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6507:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6ba45a and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0b0ef3 and fs3 == 0 and fe3 == 0x9b and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7deba45a; op2val:0x10b0ef3;
op3val:0x4d8007ff; valaddr_reg:x3; val_offset:19521*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19521*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6508:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6ba45a and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0b0ef3 and fs3 == 0 and fe3 == 0x9b and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7deba45a; op2val:0x10b0ef3;
op3val:0x4d800fff; valaddr_reg:x3; val_offset:19524*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19524*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6509:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6ba45a and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0b0ef3 and fs3 == 0 and fe3 == 0x9b and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7deba45a; op2val:0x10b0ef3;
op3val:0x4d801fff; valaddr_reg:x3; val_offset:19527*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19527*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6510:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6ba45a and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0b0ef3 and fs3 == 0 and fe3 == 0x9b and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7deba45a; op2val:0x10b0ef3;
op3val:0x4d803fff; valaddr_reg:x3; val_offset:19530*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19530*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6511:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6ba45a and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0b0ef3 and fs3 == 0 and fe3 == 0x9b and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7deba45a; op2val:0x10b0ef3;
op3val:0x4d807fff; valaddr_reg:x3; val_offset:19533*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19533*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6512:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6ba45a and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0b0ef3 and fs3 == 0 and fe3 == 0x9b and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7deba45a; op2val:0x10b0ef3;
op3val:0x4d80ffff; valaddr_reg:x3; val_offset:19536*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19536*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6513:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6ba45a and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0b0ef3 and fs3 == 0 and fe3 == 0x9b and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7deba45a; op2val:0x10b0ef3;
op3val:0x4d81ffff; valaddr_reg:x3; val_offset:19539*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19539*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6514:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6ba45a and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0b0ef3 and fs3 == 0 and fe3 == 0x9b and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7deba45a; op2val:0x10b0ef3;
op3val:0x4d83ffff; valaddr_reg:x3; val_offset:19542*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19542*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6515:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6ba45a and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0b0ef3 and fs3 == 0 and fe3 == 0x9b and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7deba45a; op2val:0x10b0ef3;
op3val:0x4d87ffff; valaddr_reg:x3; val_offset:19545*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19545*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6516:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6ba45a and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0b0ef3 and fs3 == 0 and fe3 == 0x9b and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7deba45a; op2val:0x10b0ef3;
op3val:0x4d8fffff; valaddr_reg:x3; val_offset:19548*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19548*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6517:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6ba45a and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0b0ef3 and fs3 == 0 and fe3 == 0x9b and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7deba45a; op2val:0x10b0ef3;
op3val:0x4d9fffff; valaddr_reg:x3; val_offset:19551*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19551*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6518:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6ba45a and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0b0ef3 and fs3 == 0 and fe3 == 0x9b and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7deba45a; op2val:0x10b0ef3;
op3val:0x4dbfffff; valaddr_reg:x3; val_offset:19554*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19554*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6519:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6ba45a and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0b0ef3 and fs3 == 0 and fe3 == 0x9b and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7deba45a; op2val:0x10b0ef3;
op3val:0x4dc00000; valaddr_reg:x3; val_offset:19557*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19557*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6520:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6ba45a and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0b0ef3 and fs3 == 0 and fe3 == 0x9b and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7deba45a; op2val:0x10b0ef3;
op3val:0x4de00000; valaddr_reg:x3; val_offset:19560*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19560*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6521:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6ba45a and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0b0ef3 and fs3 == 0 and fe3 == 0x9b and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7deba45a; op2val:0x10b0ef3;
op3val:0x4df00000; valaddr_reg:x3; val_offset:19563*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19563*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6522:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6ba45a and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0b0ef3 and fs3 == 0 and fe3 == 0x9b and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7deba45a; op2val:0x10b0ef3;
op3val:0x4df80000; valaddr_reg:x3; val_offset:19566*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19566*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6523:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6ba45a and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0b0ef3 and fs3 == 0 and fe3 == 0x9b and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7deba45a; op2val:0x10b0ef3;
op3val:0x4dfc0000; valaddr_reg:x3; val_offset:19569*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19569*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6524:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6ba45a and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0b0ef3 and fs3 == 0 and fe3 == 0x9b and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7deba45a; op2val:0x10b0ef3;
op3val:0x4dfe0000; valaddr_reg:x3; val_offset:19572*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19572*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6525:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6ba45a and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0b0ef3 and fs3 == 0 and fe3 == 0x9b and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7deba45a; op2val:0x10b0ef3;
op3val:0x4dff0000; valaddr_reg:x3; val_offset:19575*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19575*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6526:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6ba45a and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0b0ef3 and fs3 == 0 and fe3 == 0x9b and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7deba45a; op2val:0x10b0ef3;
op3val:0x4dff8000; valaddr_reg:x3; val_offset:19578*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19578*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6527:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6ba45a and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0b0ef3 and fs3 == 0 and fe3 == 0x9b and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7deba45a; op2val:0x10b0ef3;
op3val:0x4dffc000; valaddr_reg:x3; val_offset:19581*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19581*0 + 3*50*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2112389176,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117309440,32,FLEN)
NAN_BOXED(2112389176,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117374976,32,FLEN)
NAN_BOXED(2112389176,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117407744,32,FLEN)
NAN_BOXED(2112389176,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117424128,32,FLEN)
NAN_BOXED(2112389176,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117432320,32,FLEN)
NAN_BOXED(2112389176,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117436416,32,FLEN)
NAN_BOXED(2112389176,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117438464,32,FLEN)
NAN_BOXED(2112389176,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117439488,32,FLEN)
NAN_BOXED(2112389176,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117440000,32,FLEN)
NAN_BOXED(2112389176,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117440256,32,FLEN)
NAN_BOXED(2112389176,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117440384,32,FLEN)
NAN_BOXED(2112389176,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117440448,32,FLEN)
NAN_BOXED(2112389176,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117440480,32,FLEN)
NAN_BOXED(2112389176,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117440496,32,FLEN)
NAN_BOXED(2112389176,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117440504,32,FLEN)
NAN_BOXED(2112389176,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117440508,32,FLEN)
NAN_BOXED(2112389176,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117440510,32,FLEN)
NAN_BOXED(2112389176,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117440511,32,FLEN)
NAN_BOXED(2112389782,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(2112389782,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388611,32,FLEN)
NAN_BOXED(2112389782,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388615,32,FLEN)
NAN_BOXED(2112389782,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(10066329,32,FLEN)
NAN_BOXED(2112389782,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(10785353,32,FLEN)
NAN_BOXED(2112389782,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(11744051,32,FLEN)
NAN_BOXED(2112389782,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(11983725,32,FLEN)
NAN_BOXED(2112389782,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(12303291,32,FLEN)
NAN_BOXED(2112389782,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(12862532,32,FLEN)
NAN_BOXED(2112389782,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(13421772,32,FLEN)
NAN_BOXED(2112389782,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(14380470,32,FLEN)
NAN_BOXED(2112389782,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(15099494,32,FLEN)
NAN_BOXED(2112389782,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(15578843,32,FLEN)
NAN_BOXED(2112389782,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777208,32,FLEN)
NAN_BOXED(2112389782,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777212,32,FLEN)
NAN_BOXED(2112389782,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777214,32,FLEN)
NAN_BOXED(2112389782,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50331648,32,FLEN)
NAN_BOXED(2112389782,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50331649,32,FLEN)
NAN_BOXED(2112389782,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50331651,32,FLEN)
NAN_BOXED(2112389782,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50331655,32,FLEN)
NAN_BOXED(2112389782,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50331663,32,FLEN)
NAN_BOXED(2112389782,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50331679,32,FLEN)
NAN_BOXED(2112389782,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50331711,32,FLEN)
NAN_BOXED(2112389782,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50331775,32,FLEN)
NAN_BOXED(2112389782,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50331903,32,FLEN)
NAN_BOXED(2112389782,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50332159,32,FLEN)
NAN_BOXED(2112389782,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50332671,32,FLEN)
NAN_BOXED(2112389782,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50333695,32,FLEN)
NAN_BOXED(2112389782,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50335743,32,FLEN)
NAN_BOXED(2112389782,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50339839,32,FLEN)
NAN_BOXED(2112389782,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50348031,32,FLEN)
NAN_BOXED(2112389782,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50364415,32,FLEN)
NAN_BOXED(2112389782,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50397183,32,FLEN)
NAN_BOXED(2112389782,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50462719,32,FLEN)
NAN_BOXED(2112389782,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50593791,32,FLEN)
NAN_BOXED(2112389782,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50855935,32,FLEN)
NAN_BOXED(2112389782,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(51380223,32,FLEN)
NAN_BOXED(2112389782,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(52428799,32,FLEN)
NAN_BOXED(2112389782,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(54525951,32,FLEN)
NAN_BOXED(2112389782,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(54525952,32,FLEN)
NAN_BOXED(2112389782,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(56623104,32,FLEN)
NAN_BOXED(2112389782,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(57671680,32,FLEN)
NAN_BOXED(2112389782,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58195968,32,FLEN)
NAN_BOXED(2112389782,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58458112,32,FLEN)
NAN_BOXED(2112389782,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58589184,32,FLEN)
NAN_BOXED(2112389782,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58654720,32,FLEN)
NAN_BOXED(2112389782,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58687488,32,FLEN)
NAN_BOXED(2112389782,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58703872,32,FLEN)
NAN_BOXED(2112389782,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58712064,32,FLEN)
NAN_BOXED(2112389782,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58716160,32,FLEN)
NAN_BOXED(2112389782,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58718208,32,FLEN)
NAN_BOXED(2112389782,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58719232,32,FLEN)
NAN_BOXED(2112389782,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58719744,32,FLEN)
NAN_BOXED(2112389782,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58720000,32,FLEN)
NAN_BOXED(2112389782,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58720128,32,FLEN)
NAN_BOXED(2112389782,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58720192,32,FLEN)
NAN_BOXED(2112389782,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58720224,32,FLEN)
NAN_BOXED(2112389782,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58720240,32,FLEN)
NAN_BOXED(2112389782,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58720248,32,FLEN)
NAN_BOXED(2112389782,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58720252,32,FLEN)
NAN_BOXED(2112389782,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58720254,32,FLEN)
NAN_BOXED(2112389782,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58720255,32,FLEN)
NAN_BOXED(2112595034,32,FLEN)
NAN_BOXED(17501939,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2112595034,32,FLEN)
NAN_BOXED(17501939,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2112595034,32,FLEN)
NAN_BOXED(17501939,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2112595034,32,FLEN)
NAN_BOXED(17501939,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2112595034,32,FLEN)
NAN_BOXED(17501939,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2112595034,32,FLEN)
NAN_BOXED(17501939,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2112595034,32,FLEN)
NAN_BOXED(17501939,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2112595034,32,FLEN)
NAN_BOXED(17501939,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2112595034,32,FLEN)
NAN_BOXED(17501939,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2112595034,32,FLEN)
NAN_BOXED(17501939,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2112595034,32,FLEN)
NAN_BOXED(17501939,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2112595034,32,FLEN)
NAN_BOXED(17501939,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2112595034,32,FLEN)
NAN_BOXED(17501939,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2112595034,32,FLEN)
NAN_BOXED(17501939,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2112595034,32,FLEN)
NAN_BOXED(17501939,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2112595034,32,FLEN)
NAN_BOXED(17501939,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2112595034,32,FLEN)
NAN_BOXED(17501939,32,FLEN)
NAN_BOXED(1300234240,32,FLEN)
NAN_BOXED(2112595034,32,FLEN)
NAN_BOXED(17501939,32,FLEN)
NAN_BOXED(1300234241,32,FLEN)
NAN_BOXED(2112595034,32,FLEN)
NAN_BOXED(17501939,32,FLEN)
NAN_BOXED(1300234243,32,FLEN)
NAN_BOXED(2112595034,32,FLEN)
NAN_BOXED(17501939,32,FLEN)
NAN_BOXED(1300234247,32,FLEN)
NAN_BOXED(2112595034,32,FLEN)
NAN_BOXED(17501939,32,FLEN)
NAN_BOXED(1300234255,32,FLEN)
NAN_BOXED(2112595034,32,FLEN)
NAN_BOXED(17501939,32,FLEN)
NAN_BOXED(1300234271,32,FLEN)
NAN_BOXED(2112595034,32,FLEN)
NAN_BOXED(17501939,32,FLEN)
NAN_BOXED(1300234303,32,FLEN)
NAN_BOXED(2112595034,32,FLEN)
NAN_BOXED(17501939,32,FLEN)
NAN_BOXED(1300234367,32,FLEN)
NAN_BOXED(2112595034,32,FLEN)
NAN_BOXED(17501939,32,FLEN)
NAN_BOXED(1300234495,32,FLEN)
NAN_BOXED(2112595034,32,FLEN)
NAN_BOXED(17501939,32,FLEN)
NAN_BOXED(1300234751,32,FLEN)
NAN_BOXED(2112595034,32,FLEN)
NAN_BOXED(17501939,32,FLEN)
NAN_BOXED(1300235263,32,FLEN)
NAN_BOXED(2112595034,32,FLEN)
NAN_BOXED(17501939,32,FLEN)
NAN_BOXED(1300236287,32,FLEN)
NAN_BOXED(2112595034,32,FLEN)
NAN_BOXED(17501939,32,FLEN)
NAN_BOXED(1300238335,32,FLEN)
NAN_BOXED(2112595034,32,FLEN)
NAN_BOXED(17501939,32,FLEN)
NAN_BOXED(1300242431,32,FLEN)
NAN_BOXED(2112595034,32,FLEN)
NAN_BOXED(17501939,32,FLEN)
NAN_BOXED(1300250623,32,FLEN)
NAN_BOXED(2112595034,32,FLEN)
NAN_BOXED(17501939,32,FLEN)
NAN_BOXED(1300267007,32,FLEN)
NAN_BOXED(2112595034,32,FLEN)
NAN_BOXED(17501939,32,FLEN)
NAN_BOXED(1300299775,32,FLEN)
NAN_BOXED(2112595034,32,FLEN)
NAN_BOXED(17501939,32,FLEN)
NAN_BOXED(1300365311,32,FLEN)
NAN_BOXED(2112595034,32,FLEN)
NAN_BOXED(17501939,32,FLEN)
NAN_BOXED(1300496383,32,FLEN)
NAN_BOXED(2112595034,32,FLEN)
NAN_BOXED(17501939,32,FLEN)
NAN_BOXED(1300758527,32,FLEN)
NAN_BOXED(2112595034,32,FLEN)
NAN_BOXED(17501939,32,FLEN)
NAN_BOXED(1301282815,32,FLEN)
NAN_BOXED(2112595034,32,FLEN)
NAN_BOXED(17501939,32,FLEN)
NAN_BOXED(1302331391,32,FLEN)
NAN_BOXED(2112595034,32,FLEN)
NAN_BOXED(17501939,32,FLEN)
NAN_BOXED(1304428543,32,FLEN)
NAN_BOXED(2112595034,32,FLEN)
NAN_BOXED(17501939,32,FLEN)
NAN_BOXED(1304428544,32,FLEN)
NAN_BOXED(2112595034,32,FLEN)
NAN_BOXED(17501939,32,FLEN)
NAN_BOXED(1306525696,32,FLEN)
NAN_BOXED(2112595034,32,FLEN)
NAN_BOXED(17501939,32,FLEN)
NAN_BOXED(1307574272,32,FLEN)
NAN_BOXED(2112595034,32,FLEN)
NAN_BOXED(17501939,32,FLEN)
NAN_BOXED(1308098560,32,FLEN)
NAN_BOXED(2112595034,32,FLEN)
NAN_BOXED(17501939,32,FLEN)
NAN_BOXED(1308360704,32,FLEN)
NAN_BOXED(2112595034,32,FLEN)
NAN_BOXED(17501939,32,FLEN)
NAN_BOXED(1308491776,32,FLEN)
NAN_BOXED(2112595034,32,FLEN)
NAN_BOXED(17501939,32,FLEN)
NAN_BOXED(1308557312,32,FLEN)
NAN_BOXED(2112595034,32,FLEN)
NAN_BOXED(17501939,32,FLEN)
NAN_BOXED(1308590080,32,FLEN)
NAN_BOXED(2112595034,32,FLEN)
NAN_BOXED(17501939,32,FLEN)
NAN_BOXED(1308606464,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
