
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:17:59 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_6656:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6ff4a3 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x088eff and fs3 == 1 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7deff4a3; op2val:0xc1088eff;
op3val:0xff36db6d; valaddr_reg:x3; val_offset:19968*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19968*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6657:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6ff4a3 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x088eff and fs3 == 1 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7deff4a3; op2val:0xc1088eff;
op3val:0xff3bbbbb; valaddr_reg:x3; val_offset:19971*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19971*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6658:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6ff4a3 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x088eff and fs3 == 1 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7deff4a3; op2val:0xc1088eff;
op3val:0xff444444; valaddr_reg:x3; val_offset:19974*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19974*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6659:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6ff4a3 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x088eff and fs3 == 1 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7deff4a3; op2val:0xc1088eff;
op3val:0xff4ccccc; valaddr_reg:x3; val_offset:19977*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19977*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6660:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6ff4a3 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x088eff and fs3 == 1 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7deff4a3; op2val:0xc1088eff;
op3val:0xff5b6db6; valaddr_reg:x3; val_offset:19980*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19980*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6661:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6ff4a3 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x088eff and fs3 == 1 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7deff4a3; op2val:0xc1088eff;
op3val:0xff666666; valaddr_reg:x3; val_offset:19983*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19983*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6662:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6ff4a3 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x088eff and fs3 == 1 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7deff4a3; op2val:0xc1088eff;
op3val:0xff6db6db; valaddr_reg:x3; val_offset:19986*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19986*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6663:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6ff4a3 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x088eff and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7deff4a3; op2val:0xc1088eff;
op3val:0xff7ffff8; valaddr_reg:x3; val_offset:19989*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19989*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6664:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6ff4a3 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x088eff and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7deff4a3; op2val:0xc1088eff;
op3val:0xff7ffffc; valaddr_reg:x3; val_offset:19992*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19992*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6665:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6ff4a3 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x088eff and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7deff4a3; op2val:0xc1088eff;
op3val:0xff7ffffe; valaddr_reg:x3; val_offset:19995*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19995*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6666:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x730229 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x06d7d2 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df30229; op2val:0x106d7d2;
op3val:0x3f800001; valaddr_reg:x3; val_offset:19998*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19998*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6667:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x730229 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x06d7d2 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df30229; op2val:0x106d7d2;
op3val:0x3f800003; valaddr_reg:x3; val_offset:20001*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20001*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6668:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x730229 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x06d7d2 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df30229; op2val:0x106d7d2;
op3val:0x3f800007; valaddr_reg:x3; val_offset:20004*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20004*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6669:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x730229 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x06d7d2 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df30229; op2val:0x106d7d2;
op3val:0x3f999999; valaddr_reg:x3; val_offset:20007*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20007*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6670:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x730229 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x06d7d2 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df30229; op2val:0x106d7d2;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:20010*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20010*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6671:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x730229 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x06d7d2 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df30229; op2val:0x106d7d2;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:20013*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20013*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6672:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x730229 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x06d7d2 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df30229; op2val:0x106d7d2;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:20016*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20016*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6673:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x730229 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x06d7d2 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df30229; op2val:0x106d7d2;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:20019*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20019*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6674:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x730229 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x06d7d2 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df30229; op2val:0x106d7d2;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:20022*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20022*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6675:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x730229 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x06d7d2 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df30229; op2val:0x106d7d2;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:20025*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20025*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6676:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x730229 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x06d7d2 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df30229; op2val:0x106d7d2;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:20028*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20028*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6677:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x730229 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x06d7d2 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df30229; op2val:0x106d7d2;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:20031*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20031*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6678:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x730229 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x06d7d2 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df30229; op2val:0x106d7d2;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:20034*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20034*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6679:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x730229 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x06d7d2 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df30229; op2val:0x106d7d2;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:20037*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20037*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6680:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x730229 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x06d7d2 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df30229; op2val:0x106d7d2;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:20040*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20040*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6681:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x730229 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x06d7d2 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df30229; op2val:0x106d7d2;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:20043*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20043*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6682:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x730229 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x06d7d2 and fs3 == 0 and fe3 == 0x8d and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df30229; op2val:0x106d7d2;
op3val:0x46800000; valaddr_reg:x3; val_offset:20046*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20046*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6683:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x730229 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x06d7d2 and fs3 == 0 and fe3 == 0x8d and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df30229; op2val:0x106d7d2;
op3val:0x46800001; valaddr_reg:x3; val_offset:20049*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20049*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6684:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x730229 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x06d7d2 and fs3 == 0 and fe3 == 0x8d and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df30229; op2val:0x106d7d2;
op3val:0x46800003; valaddr_reg:x3; val_offset:20052*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20052*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6685:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x730229 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x06d7d2 and fs3 == 0 and fe3 == 0x8d and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df30229; op2val:0x106d7d2;
op3val:0x46800007; valaddr_reg:x3; val_offset:20055*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20055*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6686:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x730229 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x06d7d2 and fs3 == 0 and fe3 == 0x8d and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df30229; op2val:0x106d7d2;
op3val:0x4680000f; valaddr_reg:x3; val_offset:20058*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20058*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6687:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x730229 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x06d7d2 and fs3 == 0 and fe3 == 0x8d and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df30229; op2val:0x106d7d2;
op3val:0x4680001f; valaddr_reg:x3; val_offset:20061*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20061*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6688:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x730229 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x06d7d2 and fs3 == 0 and fe3 == 0x8d and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df30229; op2val:0x106d7d2;
op3val:0x4680003f; valaddr_reg:x3; val_offset:20064*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20064*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6689:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x730229 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x06d7d2 and fs3 == 0 and fe3 == 0x8d and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df30229; op2val:0x106d7d2;
op3val:0x4680007f; valaddr_reg:x3; val_offset:20067*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20067*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6690:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x730229 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x06d7d2 and fs3 == 0 and fe3 == 0x8d and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df30229; op2val:0x106d7d2;
op3val:0x468000ff; valaddr_reg:x3; val_offset:20070*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20070*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6691:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x730229 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x06d7d2 and fs3 == 0 and fe3 == 0x8d and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df30229; op2val:0x106d7d2;
op3val:0x468001ff; valaddr_reg:x3; val_offset:20073*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20073*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6692:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x730229 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x06d7d2 and fs3 == 0 and fe3 == 0x8d and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df30229; op2val:0x106d7d2;
op3val:0x468003ff; valaddr_reg:x3; val_offset:20076*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20076*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6693:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x730229 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x06d7d2 and fs3 == 0 and fe3 == 0x8d and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df30229; op2val:0x106d7d2;
op3val:0x468007ff; valaddr_reg:x3; val_offset:20079*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20079*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6694:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x730229 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x06d7d2 and fs3 == 0 and fe3 == 0x8d and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df30229; op2val:0x106d7d2;
op3val:0x46800fff; valaddr_reg:x3; val_offset:20082*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20082*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6695:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x730229 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x06d7d2 and fs3 == 0 and fe3 == 0x8d and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df30229; op2val:0x106d7d2;
op3val:0x46801fff; valaddr_reg:x3; val_offset:20085*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20085*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6696:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x730229 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x06d7d2 and fs3 == 0 and fe3 == 0x8d and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df30229; op2val:0x106d7d2;
op3val:0x46803fff; valaddr_reg:x3; val_offset:20088*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20088*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6697:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x730229 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x06d7d2 and fs3 == 0 and fe3 == 0x8d and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df30229; op2val:0x106d7d2;
op3val:0x46807fff; valaddr_reg:x3; val_offset:20091*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20091*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6698:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x730229 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x06d7d2 and fs3 == 0 and fe3 == 0x8d and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df30229; op2val:0x106d7d2;
op3val:0x4680ffff; valaddr_reg:x3; val_offset:20094*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20094*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6699:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x730229 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x06d7d2 and fs3 == 0 and fe3 == 0x8d and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df30229; op2val:0x106d7d2;
op3val:0x4681ffff; valaddr_reg:x3; val_offset:20097*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20097*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6700:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x730229 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x06d7d2 and fs3 == 0 and fe3 == 0x8d and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df30229; op2val:0x106d7d2;
op3val:0x4683ffff; valaddr_reg:x3; val_offset:20100*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20100*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6701:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x730229 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x06d7d2 and fs3 == 0 and fe3 == 0x8d and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df30229; op2val:0x106d7d2;
op3val:0x4687ffff; valaddr_reg:x3; val_offset:20103*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20103*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6702:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x730229 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x06d7d2 and fs3 == 0 and fe3 == 0x8d and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df30229; op2val:0x106d7d2;
op3val:0x468fffff; valaddr_reg:x3; val_offset:20106*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20106*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6703:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x730229 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x06d7d2 and fs3 == 0 and fe3 == 0x8d and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df30229; op2val:0x106d7d2;
op3val:0x469fffff; valaddr_reg:x3; val_offset:20109*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20109*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6704:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x730229 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x06d7d2 and fs3 == 0 and fe3 == 0x8d and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df30229; op2val:0x106d7d2;
op3val:0x46bfffff; valaddr_reg:x3; val_offset:20112*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20112*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6705:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x730229 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x06d7d2 and fs3 == 0 and fe3 == 0x8d and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df30229; op2val:0x106d7d2;
op3val:0x46c00000; valaddr_reg:x3; val_offset:20115*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20115*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6706:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x730229 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x06d7d2 and fs3 == 0 and fe3 == 0x8d and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df30229; op2val:0x106d7d2;
op3val:0x46e00000; valaddr_reg:x3; val_offset:20118*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20118*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6707:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x730229 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x06d7d2 and fs3 == 0 and fe3 == 0x8d and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df30229; op2val:0x106d7d2;
op3val:0x46f00000; valaddr_reg:x3; val_offset:20121*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20121*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6708:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x730229 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x06d7d2 and fs3 == 0 and fe3 == 0x8d and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df30229; op2val:0x106d7d2;
op3val:0x46f80000; valaddr_reg:x3; val_offset:20124*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20124*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6709:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x730229 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x06d7d2 and fs3 == 0 and fe3 == 0x8d and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df30229; op2val:0x106d7d2;
op3val:0x46fc0000; valaddr_reg:x3; val_offset:20127*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20127*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6710:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x730229 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x06d7d2 and fs3 == 0 and fe3 == 0x8d and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df30229; op2val:0x106d7d2;
op3val:0x46fe0000; valaddr_reg:x3; val_offset:20130*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20130*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6711:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x730229 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x06d7d2 and fs3 == 0 and fe3 == 0x8d and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df30229; op2val:0x106d7d2;
op3val:0x46ff0000; valaddr_reg:x3; val_offset:20133*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20133*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6712:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x730229 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x06d7d2 and fs3 == 0 and fe3 == 0x8d and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df30229; op2val:0x106d7d2;
op3val:0x46ff8000; valaddr_reg:x3; val_offset:20136*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20136*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6713:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x730229 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x06d7d2 and fs3 == 0 and fe3 == 0x8d and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df30229; op2val:0x106d7d2;
op3val:0x46ffc000; valaddr_reg:x3; val_offset:20139*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20139*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6714:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x730229 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x06d7d2 and fs3 == 0 and fe3 == 0x8d and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df30229; op2val:0x106d7d2;
op3val:0x46ffe000; valaddr_reg:x3; val_offset:20142*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20142*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6715:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x730229 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x06d7d2 and fs3 == 0 and fe3 == 0x8d and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df30229; op2val:0x106d7d2;
op3val:0x46fff000; valaddr_reg:x3; val_offset:20145*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20145*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6716:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x730229 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x06d7d2 and fs3 == 0 and fe3 == 0x8d and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df30229; op2val:0x106d7d2;
op3val:0x46fff800; valaddr_reg:x3; val_offset:20148*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20148*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6717:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x730229 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x06d7d2 and fs3 == 0 and fe3 == 0x8d and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df30229; op2val:0x106d7d2;
op3val:0x46fffc00; valaddr_reg:x3; val_offset:20151*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20151*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6718:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x730229 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x06d7d2 and fs3 == 0 and fe3 == 0x8d and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df30229; op2val:0x106d7d2;
op3val:0x46fffe00; valaddr_reg:x3; val_offset:20154*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20154*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6719:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x730229 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x06d7d2 and fs3 == 0 and fe3 == 0x8d and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df30229; op2val:0x106d7d2;
op3val:0x46ffff00; valaddr_reg:x3; val_offset:20157*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20157*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6720:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x730229 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x06d7d2 and fs3 == 0 and fe3 == 0x8d and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df30229; op2val:0x106d7d2;
op3val:0x46ffff80; valaddr_reg:x3; val_offset:20160*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20160*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6721:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x730229 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x06d7d2 and fs3 == 0 and fe3 == 0x8d and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df30229; op2val:0x106d7d2;
op3val:0x46ffffc0; valaddr_reg:x3; val_offset:20163*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20163*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6722:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x730229 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x06d7d2 and fs3 == 0 and fe3 == 0x8d and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df30229; op2val:0x106d7d2;
op3val:0x46ffffe0; valaddr_reg:x3; val_offset:20166*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20166*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6723:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x730229 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x06d7d2 and fs3 == 0 and fe3 == 0x8d and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df30229; op2val:0x106d7d2;
op3val:0x46fffff0; valaddr_reg:x3; val_offset:20169*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20169*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6724:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x730229 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x06d7d2 and fs3 == 0 and fe3 == 0x8d and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df30229; op2val:0x106d7d2;
op3val:0x46fffff8; valaddr_reg:x3; val_offset:20172*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20172*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6725:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x730229 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x06d7d2 and fs3 == 0 and fe3 == 0x8d and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df30229; op2val:0x106d7d2;
op3val:0x46fffffc; valaddr_reg:x3; val_offset:20175*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20175*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6726:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x730229 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x06d7d2 and fs3 == 0 and fe3 == 0x8d and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df30229; op2val:0x106d7d2;
op3val:0x46fffffe; valaddr_reg:x3; val_offset:20178*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20178*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6727:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x730229 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x06d7d2 and fs3 == 0 and fe3 == 0x8d and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df30229; op2val:0x106d7d2;
op3val:0x46ffffff; valaddr_reg:x3; val_offset:20181*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20181*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6728:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x75e1ed and fs2 == 1 and fe2 == 0x02 and fm2 == 0x054452 and fs3 == 1 and fe3 == 0x4b and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df5e1ed; op2val:0x81054452;
op3val:0xa5800000; valaddr_reg:x3; val_offset:20184*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20184*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6729:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x75e1ed and fs2 == 1 and fe2 == 0x02 and fm2 == 0x054452 and fs3 == 1 and fe3 == 0x4b and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df5e1ed; op2val:0x81054452;
op3val:0xa5800001; valaddr_reg:x3; val_offset:20187*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20187*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6730:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x75e1ed and fs2 == 1 and fe2 == 0x02 and fm2 == 0x054452 and fs3 == 1 and fe3 == 0x4b and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df5e1ed; op2val:0x81054452;
op3val:0xa5800003; valaddr_reg:x3; val_offset:20190*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20190*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6731:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x75e1ed and fs2 == 1 and fe2 == 0x02 and fm2 == 0x054452 and fs3 == 1 and fe3 == 0x4b and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df5e1ed; op2val:0x81054452;
op3val:0xa5800007; valaddr_reg:x3; val_offset:20193*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20193*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6732:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x75e1ed and fs2 == 1 and fe2 == 0x02 and fm2 == 0x054452 and fs3 == 1 and fe3 == 0x4b and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df5e1ed; op2val:0x81054452;
op3val:0xa580000f; valaddr_reg:x3; val_offset:20196*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20196*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6733:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x75e1ed and fs2 == 1 and fe2 == 0x02 and fm2 == 0x054452 and fs3 == 1 and fe3 == 0x4b and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df5e1ed; op2val:0x81054452;
op3val:0xa580001f; valaddr_reg:x3; val_offset:20199*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20199*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6734:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x75e1ed and fs2 == 1 and fe2 == 0x02 and fm2 == 0x054452 and fs3 == 1 and fe3 == 0x4b and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df5e1ed; op2val:0x81054452;
op3val:0xa580003f; valaddr_reg:x3; val_offset:20202*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20202*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6735:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x75e1ed and fs2 == 1 and fe2 == 0x02 and fm2 == 0x054452 and fs3 == 1 and fe3 == 0x4b and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df5e1ed; op2val:0x81054452;
op3val:0xa580007f; valaddr_reg:x3; val_offset:20205*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20205*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6736:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x75e1ed and fs2 == 1 and fe2 == 0x02 and fm2 == 0x054452 and fs3 == 1 and fe3 == 0x4b and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df5e1ed; op2val:0x81054452;
op3val:0xa58000ff; valaddr_reg:x3; val_offset:20208*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20208*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6737:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x75e1ed and fs2 == 1 and fe2 == 0x02 and fm2 == 0x054452 and fs3 == 1 and fe3 == 0x4b and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df5e1ed; op2val:0x81054452;
op3val:0xa58001ff; valaddr_reg:x3; val_offset:20211*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20211*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6738:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x75e1ed and fs2 == 1 and fe2 == 0x02 and fm2 == 0x054452 and fs3 == 1 and fe3 == 0x4b and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df5e1ed; op2val:0x81054452;
op3val:0xa58003ff; valaddr_reg:x3; val_offset:20214*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20214*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6739:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x75e1ed and fs2 == 1 and fe2 == 0x02 and fm2 == 0x054452 and fs3 == 1 and fe3 == 0x4b and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df5e1ed; op2val:0x81054452;
op3val:0xa58007ff; valaddr_reg:x3; val_offset:20217*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20217*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6740:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x75e1ed and fs2 == 1 and fe2 == 0x02 and fm2 == 0x054452 and fs3 == 1 and fe3 == 0x4b and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df5e1ed; op2val:0x81054452;
op3val:0xa5800fff; valaddr_reg:x3; val_offset:20220*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20220*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6741:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x75e1ed and fs2 == 1 and fe2 == 0x02 and fm2 == 0x054452 and fs3 == 1 and fe3 == 0x4b and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df5e1ed; op2val:0x81054452;
op3val:0xa5801fff; valaddr_reg:x3; val_offset:20223*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20223*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6742:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x75e1ed and fs2 == 1 and fe2 == 0x02 and fm2 == 0x054452 and fs3 == 1 and fe3 == 0x4b and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df5e1ed; op2val:0x81054452;
op3val:0xa5803fff; valaddr_reg:x3; val_offset:20226*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20226*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6743:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x75e1ed and fs2 == 1 and fe2 == 0x02 and fm2 == 0x054452 and fs3 == 1 and fe3 == 0x4b and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df5e1ed; op2val:0x81054452;
op3val:0xa5807fff; valaddr_reg:x3; val_offset:20229*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20229*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6744:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x75e1ed and fs2 == 1 and fe2 == 0x02 and fm2 == 0x054452 and fs3 == 1 and fe3 == 0x4b and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df5e1ed; op2val:0x81054452;
op3val:0xa580ffff; valaddr_reg:x3; val_offset:20232*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20232*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6745:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x75e1ed and fs2 == 1 and fe2 == 0x02 and fm2 == 0x054452 and fs3 == 1 and fe3 == 0x4b and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df5e1ed; op2val:0x81054452;
op3val:0xa581ffff; valaddr_reg:x3; val_offset:20235*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20235*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6746:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x75e1ed and fs2 == 1 and fe2 == 0x02 and fm2 == 0x054452 and fs3 == 1 and fe3 == 0x4b and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df5e1ed; op2val:0x81054452;
op3val:0xa583ffff; valaddr_reg:x3; val_offset:20238*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20238*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6747:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x75e1ed and fs2 == 1 and fe2 == 0x02 and fm2 == 0x054452 and fs3 == 1 and fe3 == 0x4b and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df5e1ed; op2val:0x81054452;
op3val:0xa587ffff; valaddr_reg:x3; val_offset:20241*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20241*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6748:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x75e1ed and fs2 == 1 and fe2 == 0x02 and fm2 == 0x054452 and fs3 == 1 and fe3 == 0x4b and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df5e1ed; op2val:0x81054452;
op3val:0xa58fffff; valaddr_reg:x3; val_offset:20244*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20244*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6749:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x75e1ed and fs2 == 1 and fe2 == 0x02 and fm2 == 0x054452 and fs3 == 1 and fe3 == 0x4b and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df5e1ed; op2val:0x81054452;
op3val:0xa59fffff; valaddr_reg:x3; val_offset:20247*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20247*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6750:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x75e1ed and fs2 == 1 and fe2 == 0x02 and fm2 == 0x054452 and fs3 == 1 and fe3 == 0x4b and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df5e1ed; op2val:0x81054452;
op3val:0xa5bfffff; valaddr_reg:x3; val_offset:20250*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20250*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6751:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x75e1ed and fs2 == 1 and fe2 == 0x02 and fm2 == 0x054452 and fs3 == 1 and fe3 == 0x4b and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df5e1ed; op2val:0x81054452;
op3val:0xa5c00000; valaddr_reg:x3; val_offset:20253*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20253*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6752:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x75e1ed and fs2 == 1 and fe2 == 0x02 and fm2 == 0x054452 and fs3 == 1 and fe3 == 0x4b and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df5e1ed; op2val:0x81054452;
op3val:0xa5e00000; valaddr_reg:x3; val_offset:20256*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20256*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6753:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x75e1ed and fs2 == 1 and fe2 == 0x02 and fm2 == 0x054452 and fs3 == 1 and fe3 == 0x4b and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df5e1ed; op2val:0x81054452;
op3val:0xa5f00000; valaddr_reg:x3; val_offset:20259*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20259*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6754:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x75e1ed and fs2 == 1 and fe2 == 0x02 and fm2 == 0x054452 and fs3 == 1 and fe3 == 0x4b and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df5e1ed; op2val:0x81054452;
op3val:0xa5f80000; valaddr_reg:x3; val_offset:20262*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20262*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6755:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x75e1ed and fs2 == 1 and fe2 == 0x02 and fm2 == 0x054452 and fs3 == 1 and fe3 == 0x4b and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df5e1ed; op2val:0x81054452;
op3val:0xa5fc0000; valaddr_reg:x3; val_offset:20265*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20265*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6756:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x75e1ed and fs2 == 1 and fe2 == 0x02 and fm2 == 0x054452 and fs3 == 1 and fe3 == 0x4b and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df5e1ed; op2val:0x81054452;
op3val:0xa5fe0000; valaddr_reg:x3; val_offset:20268*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20268*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6757:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x75e1ed and fs2 == 1 and fe2 == 0x02 and fm2 == 0x054452 and fs3 == 1 and fe3 == 0x4b and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df5e1ed; op2val:0x81054452;
op3val:0xa5ff0000; valaddr_reg:x3; val_offset:20271*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20271*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6758:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x75e1ed and fs2 == 1 and fe2 == 0x02 and fm2 == 0x054452 and fs3 == 1 and fe3 == 0x4b and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df5e1ed; op2val:0x81054452;
op3val:0xa5ff8000; valaddr_reg:x3; val_offset:20274*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20274*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6759:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x75e1ed and fs2 == 1 and fe2 == 0x02 and fm2 == 0x054452 and fs3 == 1 and fe3 == 0x4b and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df5e1ed; op2val:0x81054452;
op3val:0xa5ffc000; valaddr_reg:x3; val_offset:20277*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20277*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6760:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x75e1ed and fs2 == 1 and fe2 == 0x02 and fm2 == 0x054452 and fs3 == 1 and fe3 == 0x4b and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df5e1ed; op2val:0x81054452;
op3val:0xa5ffe000; valaddr_reg:x3; val_offset:20280*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20280*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6761:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x75e1ed and fs2 == 1 and fe2 == 0x02 and fm2 == 0x054452 and fs3 == 1 and fe3 == 0x4b and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df5e1ed; op2val:0x81054452;
op3val:0xa5fff000; valaddr_reg:x3; val_offset:20283*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20283*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6762:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x75e1ed and fs2 == 1 and fe2 == 0x02 and fm2 == 0x054452 and fs3 == 1 and fe3 == 0x4b and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df5e1ed; op2val:0x81054452;
op3val:0xa5fff800; valaddr_reg:x3; val_offset:20286*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20286*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6763:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x75e1ed and fs2 == 1 and fe2 == 0x02 and fm2 == 0x054452 and fs3 == 1 and fe3 == 0x4b and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df5e1ed; op2val:0x81054452;
op3val:0xa5fffc00; valaddr_reg:x3; val_offset:20289*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20289*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6764:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x75e1ed and fs2 == 1 and fe2 == 0x02 and fm2 == 0x054452 and fs3 == 1 and fe3 == 0x4b and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df5e1ed; op2val:0x81054452;
op3val:0xa5fffe00; valaddr_reg:x3; val_offset:20292*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20292*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6765:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x75e1ed and fs2 == 1 and fe2 == 0x02 and fm2 == 0x054452 and fs3 == 1 and fe3 == 0x4b and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df5e1ed; op2val:0x81054452;
op3val:0xa5ffff00; valaddr_reg:x3; val_offset:20295*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20295*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6766:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x75e1ed and fs2 == 1 and fe2 == 0x02 and fm2 == 0x054452 and fs3 == 1 and fe3 == 0x4b and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df5e1ed; op2val:0x81054452;
op3val:0xa5ffff80; valaddr_reg:x3; val_offset:20298*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20298*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6767:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x75e1ed and fs2 == 1 and fe2 == 0x02 and fm2 == 0x054452 and fs3 == 1 and fe3 == 0x4b and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df5e1ed; op2val:0x81054452;
op3val:0xa5ffffc0; valaddr_reg:x3; val_offset:20301*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20301*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6768:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x75e1ed and fs2 == 1 and fe2 == 0x02 and fm2 == 0x054452 and fs3 == 1 and fe3 == 0x4b and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df5e1ed; op2val:0x81054452;
op3val:0xa5ffffe0; valaddr_reg:x3; val_offset:20304*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20304*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6769:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x75e1ed and fs2 == 1 and fe2 == 0x02 and fm2 == 0x054452 and fs3 == 1 and fe3 == 0x4b and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df5e1ed; op2val:0x81054452;
op3val:0xa5fffff0; valaddr_reg:x3; val_offset:20307*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20307*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6770:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x75e1ed and fs2 == 1 and fe2 == 0x02 and fm2 == 0x054452 and fs3 == 1 and fe3 == 0x4b and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df5e1ed; op2val:0x81054452;
op3val:0xa5fffff8; valaddr_reg:x3; val_offset:20310*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20310*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6771:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x75e1ed and fs2 == 1 and fe2 == 0x02 and fm2 == 0x054452 and fs3 == 1 and fe3 == 0x4b and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df5e1ed; op2val:0x81054452;
op3val:0xa5fffffc; valaddr_reg:x3; val_offset:20313*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20313*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6772:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x75e1ed and fs2 == 1 and fe2 == 0x02 and fm2 == 0x054452 and fs3 == 1 and fe3 == 0x4b and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df5e1ed; op2val:0x81054452;
op3val:0xa5fffffe; valaddr_reg:x3; val_offset:20316*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20316*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6773:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x75e1ed and fs2 == 1 and fe2 == 0x02 and fm2 == 0x054452 and fs3 == 1 and fe3 == 0x4b and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df5e1ed; op2val:0x81054452;
op3val:0xa5ffffff; valaddr_reg:x3; val_offset:20319*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20319*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6774:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x75e1ed and fs2 == 1 and fe2 == 0x02 and fm2 == 0x054452 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df5e1ed; op2val:0x81054452;
op3val:0xbf800001; valaddr_reg:x3; val_offset:20322*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20322*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6775:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x75e1ed and fs2 == 1 and fe2 == 0x02 and fm2 == 0x054452 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df5e1ed; op2val:0x81054452;
op3val:0xbf800003; valaddr_reg:x3; val_offset:20325*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20325*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6776:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x75e1ed and fs2 == 1 and fe2 == 0x02 and fm2 == 0x054452 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df5e1ed; op2val:0x81054452;
op3val:0xbf800007; valaddr_reg:x3; val_offset:20328*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20328*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6777:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x75e1ed and fs2 == 1 and fe2 == 0x02 and fm2 == 0x054452 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df5e1ed; op2val:0x81054452;
op3val:0xbf999999; valaddr_reg:x3; val_offset:20331*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20331*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6778:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x75e1ed and fs2 == 1 and fe2 == 0x02 and fm2 == 0x054452 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df5e1ed; op2val:0x81054452;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:20334*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20334*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6779:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x75e1ed and fs2 == 1 and fe2 == 0x02 and fm2 == 0x054452 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df5e1ed; op2val:0x81054452;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:20337*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20337*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6780:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x75e1ed and fs2 == 1 and fe2 == 0x02 and fm2 == 0x054452 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df5e1ed; op2val:0x81054452;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:20340*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20340*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6781:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x75e1ed and fs2 == 1 and fe2 == 0x02 and fm2 == 0x054452 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df5e1ed; op2val:0x81054452;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:20343*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20343*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6782:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x75e1ed and fs2 == 1 and fe2 == 0x02 and fm2 == 0x054452 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df5e1ed; op2val:0x81054452;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:20346*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20346*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6783:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x75e1ed and fs2 == 1 and fe2 == 0x02 and fm2 == 0x054452 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df5e1ed; op2val:0x81054452;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:20349*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20349*0 + 3*52*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2112877731,32,FLEN)
NAN_BOXED(3238563583,32,FLEN)
NAN_BOXED(4281785197,32,FLEN)
NAN_BOXED(2112877731,32,FLEN)
NAN_BOXED(3238563583,32,FLEN)
NAN_BOXED(4282104763,32,FLEN)
NAN_BOXED(2112877731,32,FLEN)
NAN_BOXED(3238563583,32,FLEN)
NAN_BOXED(4282664004,32,FLEN)
NAN_BOXED(2112877731,32,FLEN)
NAN_BOXED(3238563583,32,FLEN)
NAN_BOXED(4283223244,32,FLEN)
NAN_BOXED(2112877731,32,FLEN)
NAN_BOXED(3238563583,32,FLEN)
NAN_BOXED(4284181942,32,FLEN)
NAN_BOXED(2112877731,32,FLEN)
NAN_BOXED(3238563583,32,FLEN)
NAN_BOXED(4284900966,32,FLEN)
NAN_BOXED(2112877731,32,FLEN)
NAN_BOXED(3238563583,32,FLEN)
NAN_BOXED(4285380315,32,FLEN)
NAN_BOXED(2112877731,32,FLEN)
NAN_BOXED(3238563583,32,FLEN)
NAN_BOXED(4286578680,32,FLEN)
NAN_BOXED(2112877731,32,FLEN)
NAN_BOXED(3238563583,32,FLEN)
NAN_BOXED(4286578684,32,FLEN)
NAN_BOXED(2112877731,32,FLEN)
NAN_BOXED(3238563583,32,FLEN)
NAN_BOXED(4286578686,32,FLEN)
NAN_BOXED(2113077801,32,FLEN)
NAN_BOXED(17225682,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2113077801,32,FLEN)
NAN_BOXED(17225682,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2113077801,32,FLEN)
NAN_BOXED(17225682,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2113077801,32,FLEN)
NAN_BOXED(17225682,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2113077801,32,FLEN)
NAN_BOXED(17225682,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2113077801,32,FLEN)
NAN_BOXED(17225682,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2113077801,32,FLEN)
NAN_BOXED(17225682,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2113077801,32,FLEN)
NAN_BOXED(17225682,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2113077801,32,FLEN)
NAN_BOXED(17225682,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2113077801,32,FLEN)
NAN_BOXED(17225682,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2113077801,32,FLEN)
NAN_BOXED(17225682,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2113077801,32,FLEN)
NAN_BOXED(17225682,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2113077801,32,FLEN)
NAN_BOXED(17225682,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2113077801,32,FLEN)
NAN_BOXED(17225682,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2113077801,32,FLEN)
NAN_BOXED(17225682,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2113077801,32,FLEN)
NAN_BOXED(17225682,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2113077801,32,FLEN)
NAN_BOXED(17225682,32,FLEN)
NAN_BOXED(1182793728,32,FLEN)
NAN_BOXED(2113077801,32,FLEN)
NAN_BOXED(17225682,32,FLEN)
NAN_BOXED(1182793729,32,FLEN)
NAN_BOXED(2113077801,32,FLEN)
NAN_BOXED(17225682,32,FLEN)
NAN_BOXED(1182793731,32,FLEN)
NAN_BOXED(2113077801,32,FLEN)
NAN_BOXED(17225682,32,FLEN)
NAN_BOXED(1182793735,32,FLEN)
NAN_BOXED(2113077801,32,FLEN)
NAN_BOXED(17225682,32,FLEN)
NAN_BOXED(1182793743,32,FLEN)
NAN_BOXED(2113077801,32,FLEN)
NAN_BOXED(17225682,32,FLEN)
NAN_BOXED(1182793759,32,FLEN)
NAN_BOXED(2113077801,32,FLEN)
NAN_BOXED(17225682,32,FLEN)
NAN_BOXED(1182793791,32,FLEN)
NAN_BOXED(2113077801,32,FLEN)
NAN_BOXED(17225682,32,FLEN)
NAN_BOXED(1182793855,32,FLEN)
NAN_BOXED(2113077801,32,FLEN)
NAN_BOXED(17225682,32,FLEN)
NAN_BOXED(1182793983,32,FLEN)
NAN_BOXED(2113077801,32,FLEN)
NAN_BOXED(17225682,32,FLEN)
NAN_BOXED(1182794239,32,FLEN)
NAN_BOXED(2113077801,32,FLEN)
NAN_BOXED(17225682,32,FLEN)
NAN_BOXED(1182794751,32,FLEN)
NAN_BOXED(2113077801,32,FLEN)
NAN_BOXED(17225682,32,FLEN)
NAN_BOXED(1182795775,32,FLEN)
NAN_BOXED(2113077801,32,FLEN)
NAN_BOXED(17225682,32,FLEN)
NAN_BOXED(1182797823,32,FLEN)
NAN_BOXED(2113077801,32,FLEN)
NAN_BOXED(17225682,32,FLEN)
NAN_BOXED(1182801919,32,FLEN)
NAN_BOXED(2113077801,32,FLEN)
NAN_BOXED(17225682,32,FLEN)
NAN_BOXED(1182810111,32,FLEN)
NAN_BOXED(2113077801,32,FLEN)
NAN_BOXED(17225682,32,FLEN)
NAN_BOXED(1182826495,32,FLEN)
NAN_BOXED(2113077801,32,FLEN)
NAN_BOXED(17225682,32,FLEN)
NAN_BOXED(1182859263,32,FLEN)
NAN_BOXED(2113077801,32,FLEN)
NAN_BOXED(17225682,32,FLEN)
NAN_BOXED(1182924799,32,FLEN)
NAN_BOXED(2113077801,32,FLEN)
NAN_BOXED(17225682,32,FLEN)
NAN_BOXED(1183055871,32,FLEN)
NAN_BOXED(2113077801,32,FLEN)
NAN_BOXED(17225682,32,FLEN)
NAN_BOXED(1183318015,32,FLEN)
NAN_BOXED(2113077801,32,FLEN)
NAN_BOXED(17225682,32,FLEN)
NAN_BOXED(1183842303,32,FLEN)
NAN_BOXED(2113077801,32,FLEN)
NAN_BOXED(17225682,32,FLEN)
NAN_BOXED(1184890879,32,FLEN)
NAN_BOXED(2113077801,32,FLEN)
NAN_BOXED(17225682,32,FLEN)
NAN_BOXED(1186988031,32,FLEN)
NAN_BOXED(2113077801,32,FLEN)
NAN_BOXED(17225682,32,FLEN)
NAN_BOXED(1186988032,32,FLEN)
NAN_BOXED(2113077801,32,FLEN)
NAN_BOXED(17225682,32,FLEN)
NAN_BOXED(1189085184,32,FLEN)
NAN_BOXED(2113077801,32,FLEN)
NAN_BOXED(17225682,32,FLEN)
NAN_BOXED(1190133760,32,FLEN)
NAN_BOXED(2113077801,32,FLEN)
NAN_BOXED(17225682,32,FLEN)
NAN_BOXED(1190658048,32,FLEN)
NAN_BOXED(2113077801,32,FLEN)
NAN_BOXED(17225682,32,FLEN)
NAN_BOXED(1190920192,32,FLEN)
NAN_BOXED(2113077801,32,FLEN)
NAN_BOXED(17225682,32,FLEN)
NAN_BOXED(1191051264,32,FLEN)
NAN_BOXED(2113077801,32,FLEN)
NAN_BOXED(17225682,32,FLEN)
NAN_BOXED(1191116800,32,FLEN)
NAN_BOXED(2113077801,32,FLEN)
NAN_BOXED(17225682,32,FLEN)
NAN_BOXED(1191149568,32,FLEN)
NAN_BOXED(2113077801,32,FLEN)
NAN_BOXED(17225682,32,FLEN)
NAN_BOXED(1191165952,32,FLEN)
NAN_BOXED(2113077801,32,FLEN)
NAN_BOXED(17225682,32,FLEN)
NAN_BOXED(1191174144,32,FLEN)
NAN_BOXED(2113077801,32,FLEN)
NAN_BOXED(17225682,32,FLEN)
NAN_BOXED(1191178240,32,FLEN)
NAN_BOXED(2113077801,32,FLEN)
NAN_BOXED(17225682,32,FLEN)
NAN_BOXED(1191180288,32,FLEN)
NAN_BOXED(2113077801,32,FLEN)
NAN_BOXED(17225682,32,FLEN)
NAN_BOXED(1191181312,32,FLEN)
NAN_BOXED(2113077801,32,FLEN)
NAN_BOXED(17225682,32,FLEN)
NAN_BOXED(1191181824,32,FLEN)
NAN_BOXED(2113077801,32,FLEN)
NAN_BOXED(17225682,32,FLEN)
NAN_BOXED(1191182080,32,FLEN)
NAN_BOXED(2113077801,32,FLEN)
NAN_BOXED(17225682,32,FLEN)
NAN_BOXED(1191182208,32,FLEN)
NAN_BOXED(2113077801,32,FLEN)
NAN_BOXED(17225682,32,FLEN)
NAN_BOXED(1191182272,32,FLEN)
NAN_BOXED(2113077801,32,FLEN)
NAN_BOXED(17225682,32,FLEN)
NAN_BOXED(1191182304,32,FLEN)
NAN_BOXED(2113077801,32,FLEN)
NAN_BOXED(17225682,32,FLEN)
NAN_BOXED(1191182320,32,FLEN)
NAN_BOXED(2113077801,32,FLEN)
NAN_BOXED(17225682,32,FLEN)
NAN_BOXED(1191182328,32,FLEN)
NAN_BOXED(2113077801,32,FLEN)
NAN_BOXED(17225682,32,FLEN)
NAN_BOXED(1191182332,32,FLEN)
NAN_BOXED(2113077801,32,FLEN)
NAN_BOXED(17225682,32,FLEN)
NAN_BOXED(1191182334,32,FLEN)
NAN_BOXED(2113077801,32,FLEN)
NAN_BOXED(17225682,32,FLEN)
NAN_BOXED(1191182335,32,FLEN)
NAN_BOXED(2113266157,32,FLEN)
NAN_BOXED(2164606034,32,FLEN)
NAN_BOXED(2776629248,32,FLEN)
NAN_BOXED(2113266157,32,FLEN)
NAN_BOXED(2164606034,32,FLEN)
NAN_BOXED(2776629249,32,FLEN)
NAN_BOXED(2113266157,32,FLEN)
NAN_BOXED(2164606034,32,FLEN)
NAN_BOXED(2776629251,32,FLEN)
NAN_BOXED(2113266157,32,FLEN)
NAN_BOXED(2164606034,32,FLEN)
NAN_BOXED(2776629255,32,FLEN)
NAN_BOXED(2113266157,32,FLEN)
NAN_BOXED(2164606034,32,FLEN)
NAN_BOXED(2776629263,32,FLEN)
NAN_BOXED(2113266157,32,FLEN)
NAN_BOXED(2164606034,32,FLEN)
NAN_BOXED(2776629279,32,FLEN)
NAN_BOXED(2113266157,32,FLEN)
NAN_BOXED(2164606034,32,FLEN)
NAN_BOXED(2776629311,32,FLEN)
NAN_BOXED(2113266157,32,FLEN)
NAN_BOXED(2164606034,32,FLEN)
NAN_BOXED(2776629375,32,FLEN)
NAN_BOXED(2113266157,32,FLEN)
NAN_BOXED(2164606034,32,FLEN)
NAN_BOXED(2776629503,32,FLEN)
NAN_BOXED(2113266157,32,FLEN)
NAN_BOXED(2164606034,32,FLEN)
NAN_BOXED(2776629759,32,FLEN)
NAN_BOXED(2113266157,32,FLEN)
NAN_BOXED(2164606034,32,FLEN)
NAN_BOXED(2776630271,32,FLEN)
NAN_BOXED(2113266157,32,FLEN)
NAN_BOXED(2164606034,32,FLEN)
NAN_BOXED(2776631295,32,FLEN)
NAN_BOXED(2113266157,32,FLEN)
NAN_BOXED(2164606034,32,FLEN)
NAN_BOXED(2776633343,32,FLEN)
NAN_BOXED(2113266157,32,FLEN)
NAN_BOXED(2164606034,32,FLEN)
NAN_BOXED(2776637439,32,FLEN)
NAN_BOXED(2113266157,32,FLEN)
NAN_BOXED(2164606034,32,FLEN)
NAN_BOXED(2776645631,32,FLEN)
NAN_BOXED(2113266157,32,FLEN)
NAN_BOXED(2164606034,32,FLEN)
NAN_BOXED(2776662015,32,FLEN)
NAN_BOXED(2113266157,32,FLEN)
NAN_BOXED(2164606034,32,FLEN)
NAN_BOXED(2776694783,32,FLEN)
NAN_BOXED(2113266157,32,FLEN)
NAN_BOXED(2164606034,32,FLEN)
NAN_BOXED(2776760319,32,FLEN)
NAN_BOXED(2113266157,32,FLEN)
NAN_BOXED(2164606034,32,FLEN)
NAN_BOXED(2776891391,32,FLEN)
NAN_BOXED(2113266157,32,FLEN)
NAN_BOXED(2164606034,32,FLEN)
NAN_BOXED(2777153535,32,FLEN)
NAN_BOXED(2113266157,32,FLEN)
NAN_BOXED(2164606034,32,FLEN)
NAN_BOXED(2777677823,32,FLEN)
NAN_BOXED(2113266157,32,FLEN)
NAN_BOXED(2164606034,32,FLEN)
NAN_BOXED(2778726399,32,FLEN)
NAN_BOXED(2113266157,32,FLEN)
NAN_BOXED(2164606034,32,FLEN)
NAN_BOXED(2780823551,32,FLEN)
NAN_BOXED(2113266157,32,FLEN)
NAN_BOXED(2164606034,32,FLEN)
NAN_BOXED(2780823552,32,FLEN)
NAN_BOXED(2113266157,32,FLEN)
NAN_BOXED(2164606034,32,FLEN)
NAN_BOXED(2782920704,32,FLEN)
NAN_BOXED(2113266157,32,FLEN)
NAN_BOXED(2164606034,32,FLEN)
NAN_BOXED(2783969280,32,FLEN)
NAN_BOXED(2113266157,32,FLEN)
NAN_BOXED(2164606034,32,FLEN)
NAN_BOXED(2784493568,32,FLEN)
NAN_BOXED(2113266157,32,FLEN)
NAN_BOXED(2164606034,32,FLEN)
NAN_BOXED(2784755712,32,FLEN)
NAN_BOXED(2113266157,32,FLEN)
NAN_BOXED(2164606034,32,FLEN)
NAN_BOXED(2784886784,32,FLEN)
NAN_BOXED(2113266157,32,FLEN)
NAN_BOXED(2164606034,32,FLEN)
NAN_BOXED(2784952320,32,FLEN)
NAN_BOXED(2113266157,32,FLEN)
NAN_BOXED(2164606034,32,FLEN)
NAN_BOXED(2784985088,32,FLEN)
NAN_BOXED(2113266157,32,FLEN)
NAN_BOXED(2164606034,32,FLEN)
NAN_BOXED(2785001472,32,FLEN)
NAN_BOXED(2113266157,32,FLEN)
NAN_BOXED(2164606034,32,FLEN)
NAN_BOXED(2785009664,32,FLEN)
NAN_BOXED(2113266157,32,FLEN)
NAN_BOXED(2164606034,32,FLEN)
NAN_BOXED(2785013760,32,FLEN)
NAN_BOXED(2113266157,32,FLEN)
NAN_BOXED(2164606034,32,FLEN)
NAN_BOXED(2785015808,32,FLEN)
NAN_BOXED(2113266157,32,FLEN)
NAN_BOXED(2164606034,32,FLEN)
NAN_BOXED(2785016832,32,FLEN)
NAN_BOXED(2113266157,32,FLEN)
NAN_BOXED(2164606034,32,FLEN)
NAN_BOXED(2785017344,32,FLEN)
NAN_BOXED(2113266157,32,FLEN)
NAN_BOXED(2164606034,32,FLEN)
NAN_BOXED(2785017600,32,FLEN)
NAN_BOXED(2113266157,32,FLEN)
NAN_BOXED(2164606034,32,FLEN)
NAN_BOXED(2785017728,32,FLEN)
NAN_BOXED(2113266157,32,FLEN)
NAN_BOXED(2164606034,32,FLEN)
NAN_BOXED(2785017792,32,FLEN)
NAN_BOXED(2113266157,32,FLEN)
NAN_BOXED(2164606034,32,FLEN)
NAN_BOXED(2785017824,32,FLEN)
NAN_BOXED(2113266157,32,FLEN)
NAN_BOXED(2164606034,32,FLEN)
NAN_BOXED(2785017840,32,FLEN)
NAN_BOXED(2113266157,32,FLEN)
NAN_BOXED(2164606034,32,FLEN)
NAN_BOXED(2785017848,32,FLEN)
NAN_BOXED(2113266157,32,FLEN)
NAN_BOXED(2164606034,32,FLEN)
NAN_BOXED(2785017852,32,FLEN)
NAN_BOXED(2113266157,32,FLEN)
NAN_BOXED(2164606034,32,FLEN)
NAN_BOXED(2785017854,32,FLEN)
NAN_BOXED(2113266157,32,FLEN)
NAN_BOXED(2164606034,32,FLEN)
NAN_BOXED(2785017855,32,FLEN)
NAN_BOXED(2113266157,32,FLEN)
NAN_BOXED(2164606034,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2113266157,32,FLEN)
NAN_BOXED(2164606034,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2113266157,32,FLEN)
NAN_BOXED(2164606034,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
NAN_BOXED(2113266157,32,FLEN)
NAN_BOXED(2164606034,32,FLEN)
NAN_BOXED(3214514585,32,FLEN)
NAN_BOXED(2113266157,32,FLEN)
NAN_BOXED(2164606034,32,FLEN)
NAN_BOXED(3215233609,32,FLEN)
NAN_BOXED(2113266157,32,FLEN)
NAN_BOXED(2164606034,32,FLEN)
NAN_BOXED(3216192307,32,FLEN)
NAN_BOXED(2113266157,32,FLEN)
NAN_BOXED(2164606034,32,FLEN)
NAN_BOXED(3216431981,32,FLEN)
NAN_BOXED(2113266157,32,FLEN)
NAN_BOXED(2164606034,32,FLEN)
NAN_BOXED(3216751547,32,FLEN)
NAN_BOXED(2113266157,32,FLEN)
NAN_BOXED(2164606034,32,FLEN)
NAN_BOXED(3217310788,32,FLEN)
NAN_BOXED(2113266157,32,FLEN)
NAN_BOXED(2164606034,32,FLEN)
NAN_BOXED(3217870028,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
