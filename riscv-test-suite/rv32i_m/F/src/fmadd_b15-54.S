
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:17:59 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_6784:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x75e1ed and fs2 == 1 and fe2 == 0x02 and fm2 == 0x054452 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df5e1ed; op2val:0x81054452;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:20352*0 + 3*53*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20352*0 + 3*53*FLEN/8, x4, x1, x2)

inst_6785:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x75e1ed and fs2 == 1 and fe2 == 0x02 and fm2 == 0x054452 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df5e1ed; op2val:0x81054452;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:20355*0 + 3*53*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20355*0 + 3*53*FLEN/8, x4, x1, x2)

inst_6786:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x75e1ed and fs2 == 1 and fe2 == 0x02 and fm2 == 0x054452 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df5e1ed; op2val:0x81054452;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:20358*0 + 3*53*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20358*0 + 3*53*FLEN/8, x4, x1, x2)

inst_6787:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x75e1ed and fs2 == 1 and fe2 == 0x02 and fm2 == 0x054452 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df5e1ed; op2val:0x81054452;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:20361*0 + 3*53*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20361*0 + 3*53*FLEN/8, x4, x1, x2)

inst_6788:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x75e1ed and fs2 == 1 and fe2 == 0x02 and fm2 == 0x054452 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df5e1ed; op2val:0x81054452;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:20364*0 + 3*53*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20364*0 + 3*53*FLEN/8, x4, x1, x2)

inst_6789:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x75e1ed and fs2 == 1 and fe2 == 0x02 and fm2 == 0x054452 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df5e1ed; op2val:0x81054452;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:20367*0 + 3*53*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20367*0 + 3*53*FLEN/8, x4, x1, x2)

inst_6790:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x76d1e6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df6d1e6; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:20370*0 + 3*53*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20370*0 + 3*53*FLEN/8, x4, x1, x2)

inst_6791:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x76d1e6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df6d1e6; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:20373*0 + 3*53*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20373*0 + 3*53*FLEN/8, x4, x1, x2)

inst_6792:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x76d1e6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df6d1e6; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:20376*0 + 3*53*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20376*0 + 3*53*FLEN/8, x4, x1, x2)

inst_6793:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x76d1e6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df6d1e6; op2val:0x0;
op3val:0x199999; valaddr_reg:x3; val_offset:20379*0 + 3*53*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20379*0 + 3*53*FLEN/8, x4, x1, x2)

inst_6794:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x76d1e6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df6d1e6; op2val:0x0;
op3val:0x249249; valaddr_reg:x3; val_offset:20382*0 + 3*53*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20382*0 + 3*53*FLEN/8, x4, x1, x2)

inst_6795:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x76d1e6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df6d1e6; op2val:0x0;
op3val:0x333333; valaddr_reg:x3; val_offset:20385*0 + 3*53*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20385*0 + 3*53*FLEN/8, x4, x1, x2)

inst_6796:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x76d1e6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df6d1e6; op2val:0x0;
op3val:0x36db6d; valaddr_reg:x3; val_offset:20388*0 + 3*53*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20388*0 + 3*53*FLEN/8, x4, x1, x2)

inst_6797:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x76d1e6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df6d1e6; op2val:0x0;
op3val:0x3bbbbb; valaddr_reg:x3; val_offset:20391*0 + 3*53*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20391*0 + 3*53*FLEN/8, x4, x1, x2)

inst_6798:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x76d1e6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df6d1e6; op2val:0x0;
op3val:0x444444; valaddr_reg:x3; val_offset:20394*0 + 3*53*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20394*0 + 3*53*FLEN/8, x4, x1, x2)

inst_6799:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x76d1e6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df6d1e6; op2val:0x0;
op3val:0x4ccccc; valaddr_reg:x3; val_offset:20397*0 + 3*53*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20397*0 + 3*53*FLEN/8, x4, x1, x2)

inst_6800:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x76d1e6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df6d1e6; op2val:0x0;
op3val:0x5b6db6; valaddr_reg:x3; val_offset:20400*0 + 3*53*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20400*0 + 3*53*FLEN/8, x4, x1, x2)

inst_6801:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x76d1e6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df6d1e6; op2val:0x0;
op3val:0x666666; valaddr_reg:x3; val_offset:20403*0 + 3*53*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20403*0 + 3*53*FLEN/8, x4, x1, x2)

inst_6802:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x76d1e6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df6d1e6; op2val:0x0;
op3val:0x6db6db; valaddr_reg:x3; val_offset:20406*0 + 3*53*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20406*0 + 3*53*FLEN/8, x4, x1, x2)

inst_6803:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x76d1e6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df6d1e6; op2val:0x0;
op3val:0x7ffff8; valaddr_reg:x3; val_offset:20409*0 + 3*53*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20409*0 + 3*53*FLEN/8, x4, x1, x2)

inst_6804:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x76d1e6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df6d1e6; op2val:0x0;
op3val:0x7ffffc; valaddr_reg:x3; val_offset:20412*0 + 3*53*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20412*0 + 3*53*FLEN/8, x4, x1, x2)

inst_6805:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x76d1e6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df6d1e6; op2val:0x0;
op3val:0x7ffffe; valaddr_reg:x3; val_offset:20415*0 + 3*53*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20415*0 + 3*53*FLEN/8, x4, x1, x2)

inst_6806:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x76d1e6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df6d1e6; op2val:0x0;
op3val:0xf000000; valaddr_reg:x3; val_offset:20418*0 + 3*53*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20418*0 + 3*53*FLEN/8, x4, x1, x2)

inst_6807:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x76d1e6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df6d1e6; op2val:0x0;
op3val:0xf000001; valaddr_reg:x3; val_offset:20421*0 + 3*53*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20421*0 + 3*53*FLEN/8, x4, x1, x2)

inst_6808:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x76d1e6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df6d1e6; op2val:0x0;
op3val:0xf000003; valaddr_reg:x3; val_offset:20424*0 + 3*53*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20424*0 + 3*53*FLEN/8, x4, x1, x2)

inst_6809:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x76d1e6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df6d1e6; op2val:0x0;
op3val:0xf000007; valaddr_reg:x3; val_offset:20427*0 + 3*53*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20427*0 + 3*53*FLEN/8, x4, x1, x2)

inst_6810:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x76d1e6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df6d1e6; op2val:0x0;
op3val:0xf00000f; valaddr_reg:x3; val_offset:20430*0 + 3*53*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20430*0 + 3*53*FLEN/8, x4, x1, x2)

inst_6811:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x76d1e6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df6d1e6; op2val:0x0;
op3val:0xf00001f; valaddr_reg:x3; val_offset:20433*0 + 3*53*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20433*0 + 3*53*FLEN/8, x4, x1, x2)

inst_6812:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x76d1e6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df6d1e6; op2val:0x0;
op3val:0xf00003f; valaddr_reg:x3; val_offset:20436*0 + 3*53*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20436*0 + 3*53*FLEN/8, x4, x1, x2)

inst_6813:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x76d1e6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df6d1e6; op2val:0x0;
op3val:0xf00007f; valaddr_reg:x3; val_offset:20439*0 + 3*53*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20439*0 + 3*53*FLEN/8, x4, x1, x2)

inst_6814:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x76d1e6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df6d1e6; op2val:0x0;
op3val:0xf0000ff; valaddr_reg:x3; val_offset:20442*0 + 3*53*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20442*0 + 3*53*FLEN/8, x4, x1, x2)

inst_6815:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x76d1e6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df6d1e6; op2val:0x0;
op3val:0xf0001ff; valaddr_reg:x3; val_offset:20445*0 + 3*53*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20445*0 + 3*53*FLEN/8, x4, x1, x2)

inst_6816:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x76d1e6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df6d1e6; op2val:0x0;
op3val:0xf0003ff; valaddr_reg:x3; val_offset:20448*0 + 3*53*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20448*0 + 3*53*FLEN/8, x4, x1, x2)

inst_6817:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x76d1e6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df6d1e6; op2val:0x0;
op3val:0xf0007ff; valaddr_reg:x3; val_offset:20451*0 + 3*53*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20451*0 + 3*53*FLEN/8, x4, x1, x2)

inst_6818:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x76d1e6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df6d1e6; op2val:0x0;
op3val:0xf000fff; valaddr_reg:x3; val_offset:20454*0 + 3*53*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20454*0 + 3*53*FLEN/8, x4, x1, x2)

inst_6819:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x76d1e6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df6d1e6; op2val:0x0;
op3val:0xf001fff; valaddr_reg:x3; val_offset:20457*0 + 3*53*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20457*0 + 3*53*FLEN/8, x4, x1, x2)

inst_6820:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x76d1e6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df6d1e6; op2val:0x0;
op3val:0xf003fff; valaddr_reg:x3; val_offset:20460*0 + 3*53*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20460*0 + 3*53*FLEN/8, x4, x1, x2)

inst_6821:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x76d1e6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df6d1e6; op2val:0x0;
op3val:0xf007fff; valaddr_reg:x3; val_offset:20463*0 + 3*53*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20463*0 + 3*53*FLEN/8, x4, x1, x2)

inst_6822:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x76d1e6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df6d1e6; op2val:0x0;
op3val:0xf00ffff; valaddr_reg:x3; val_offset:20466*0 + 3*53*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20466*0 + 3*53*FLEN/8, x4, x1, x2)

inst_6823:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x76d1e6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df6d1e6; op2val:0x0;
op3val:0xf01ffff; valaddr_reg:x3; val_offset:20469*0 + 3*53*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20469*0 + 3*53*FLEN/8, x4, x1, x2)

inst_6824:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x76d1e6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df6d1e6; op2val:0x0;
op3val:0xf03ffff; valaddr_reg:x3; val_offset:20472*0 + 3*53*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20472*0 + 3*53*FLEN/8, x4, x1, x2)

inst_6825:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x76d1e6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df6d1e6; op2val:0x0;
op3val:0xf07ffff; valaddr_reg:x3; val_offset:20475*0 + 3*53*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20475*0 + 3*53*FLEN/8, x4, x1, x2)

inst_6826:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x76d1e6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df6d1e6; op2val:0x0;
op3val:0xf0fffff; valaddr_reg:x3; val_offset:20478*0 + 3*53*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20478*0 + 3*53*FLEN/8, x4, x1, x2)

inst_6827:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x76d1e6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df6d1e6; op2val:0x0;
op3val:0xf1fffff; valaddr_reg:x3; val_offset:20481*0 + 3*53*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20481*0 + 3*53*FLEN/8, x4, x1, x2)

inst_6828:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x76d1e6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df6d1e6; op2val:0x0;
op3val:0xf3fffff; valaddr_reg:x3; val_offset:20484*0 + 3*53*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20484*0 + 3*53*FLEN/8, x4, x1, x2)

inst_6829:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x76d1e6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df6d1e6; op2val:0x0;
op3val:0xf400000; valaddr_reg:x3; val_offset:20487*0 + 3*53*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20487*0 + 3*53*FLEN/8, x4, x1, x2)

inst_6830:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x76d1e6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df6d1e6; op2val:0x0;
op3val:0xf600000; valaddr_reg:x3; val_offset:20490*0 + 3*53*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20490*0 + 3*53*FLEN/8, x4, x1, x2)

inst_6831:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x76d1e6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df6d1e6; op2val:0x0;
op3val:0xf700000; valaddr_reg:x3; val_offset:20493*0 + 3*53*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20493*0 + 3*53*FLEN/8, x4, x1, x2)

inst_6832:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x76d1e6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df6d1e6; op2val:0x0;
op3val:0xf780000; valaddr_reg:x3; val_offset:20496*0 + 3*53*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20496*0 + 3*53*FLEN/8, x4, x1, x2)

inst_6833:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x76d1e6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df6d1e6; op2val:0x0;
op3val:0xf7c0000; valaddr_reg:x3; val_offset:20499*0 + 3*53*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20499*0 + 3*53*FLEN/8, x4, x1, x2)

inst_6834:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x76d1e6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df6d1e6; op2val:0x0;
op3val:0xf7e0000; valaddr_reg:x3; val_offset:20502*0 + 3*53*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20502*0 + 3*53*FLEN/8, x4, x1, x2)

inst_6835:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x76d1e6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df6d1e6; op2val:0x0;
op3val:0xf7f0000; valaddr_reg:x3; val_offset:20505*0 + 3*53*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20505*0 + 3*53*FLEN/8, x4, x1, x2)

inst_6836:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x76d1e6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df6d1e6; op2val:0x0;
op3val:0xf7f8000; valaddr_reg:x3; val_offset:20508*0 + 3*53*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20508*0 + 3*53*FLEN/8, x4, x1, x2)

inst_6837:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x76d1e6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df6d1e6; op2val:0x0;
op3val:0xf7fc000; valaddr_reg:x3; val_offset:20511*0 + 3*53*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20511*0 + 3*53*FLEN/8, x4, x1, x2)

inst_6838:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x76d1e6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df6d1e6; op2val:0x0;
op3val:0xf7fe000; valaddr_reg:x3; val_offset:20514*0 + 3*53*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20514*0 + 3*53*FLEN/8, x4, x1, x2)

inst_6839:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x76d1e6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df6d1e6; op2val:0x0;
op3val:0xf7ff000; valaddr_reg:x3; val_offset:20517*0 + 3*53*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20517*0 + 3*53*FLEN/8, x4, x1, x2)

inst_6840:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x76d1e6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df6d1e6; op2val:0x0;
op3val:0xf7ff800; valaddr_reg:x3; val_offset:20520*0 + 3*53*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20520*0 + 3*53*FLEN/8, x4, x1, x2)

inst_6841:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x76d1e6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df6d1e6; op2val:0x0;
op3val:0xf7ffc00; valaddr_reg:x3; val_offset:20523*0 + 3*53*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20523*0 + 3*53*FLEN/8, x4, x1, x2)

inst_6842:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x76d1e6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df6d1e6; op2val:0x0;
op3val:0xf7ffe00; valaddr_reg:x3; val_offset:20526*0 + 3*53*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20526*0 + 3*53*FLEN/8, x4, x1, x2)

inst_6843:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x76d1e6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df6d1e6; op2val:0x0;
op3val:0xf7fff00; valaddr_reg:x3; val_offset:20529*0 + 3*53*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20529*0 + 3*53*FLEN/8, x4, x1, x2)

inst_6844:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x76d1e6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df6d1e6; op2val:0x0;
op3val:0xf7fff80; valaddr_reg:x3; val_offset:20532*0 + 3*53*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20532*0 + 3*53*FLEN/8, x4, x1, x2)

inst_6845:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x76d1e6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df6d1e6; op2val:0x0;
op3val:0xf7fffc0; valaddr_reg:x3; val_offset:20535*0 + 3*53*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20535*0 + 3*53*FLEN/8, x4, x1, x2)

inst_6846:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x76d1e6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df6d1e6; op2val:0x0;
op3val:0xf7fffe0; valaddr_reg:x3; val_offset:20538*0 + 3*53*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20538*0 + 3*53*FLEN/8, x4, x1, x2)

inst_6847:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x76d1e6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df6d1e6; op2val:0x0;
op3val:0xf7ffff0; valaddr_reg:x3; val_offset:20541*0 + 3*53*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20541*0 + 3*53*FLEN/8, x4, x1, x2)

inst_6848:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x76d1e6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df6d1e6; op2val:0x0;
op3val:0xf7ffff8; valaddr_reg:x3; val_offset:20544*0 + 3*53*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20544*0 + 3*53*FLEN/8, x4, x1, x2)

inst_6849:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x76d1e6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df6d1e6; op2val:0x0;
op3val:0xf7ffffc; valaddr_reg:x3; val_offset:20547*0 + 3*53*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20547*0 + 3*53*FLEN/8, x4, x1, x2)

inst_6850:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x76d1e6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df6d1e6; op2val:0x0;
op3val:0xf7ffffe; valaddr_reg:x3; val_offset:20550*0 + 3*53*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20550*0 + 3*53*FLEN/8, x4, x1, x2)

inst_6851:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x76d1e6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df6d1e6; op2val:0x0;
op3val:0xf7fffff; valaddr_reg:x3; val_offset:20553*0 + 3*53*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20553*0 + 3*53*FLEN/8, x4, x1, x2)

inst_6852:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x78c2ed and fs2 == 0 and fe2 == 0x02 and fm2 == 0x03b97f and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df8c2ed; op2val:0x103b97f;
op3val:0x3f800001; valaddr_reg:x3; val_offset:20556*0 + 3*53*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20556*0 + 3*53*FLEN/8, x4, x1, x2)

inst_6853:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x78c2ed and fs2 == 0 and fe2 == 0x02 and fm2 == 0x03b97f and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df8c2ed; op2val:0x103b97f;
op3val:0x3f800003; valaddr_reg:x3; val_offset:20559*0 + 3*53*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20559*0 + 3*53*FLEN/8, x4, x1, x2)

inst_6854:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x78c2ed and fs2 == 0 and fe2 == 0x02 and fm2 == 0x03b97f and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df8c2ed; op2val:0x103b97f;
op3val:0x3f800007; valaddr_reg:x3; val_offset:20562*0 + 3*53*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20562*0 + 3*53*FLEN/8, x4, x1, x2)

inst_6855:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x78c2ed and fs2 == 0 and fe2 == 0x02 and fm2 == 0x03b97f and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df8c2ed; op2val:0x103b97f;
op3val:0x3f999999; valaddr_reg:x3; val_offset:20565*0 + 3*53*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20565*0 + 3*53*FLEN/8, x4, x1, x2)

inst_6856:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x78c2ed and fs2 == 0 and fe2 == 0x02 and fm2 == 0x03b97f and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df8c2ed; op2val:0x103b97f;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:20568*0 + 3*53*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20568*0 + 3*53*FLEN/8, x4, x1, x2)

inst_6857:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x78c2ed and fs2 == 0 and fe2 == 0x02 and fm2 == 0x03b97f and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df8c2ed; op2val:0x103b97f;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:20571*0 + 3*53*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20571*0 + 3*53*FLEN/8, x4, x1, x2)

inst_6858:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x78c2ed and fs2 == 0 and fe2 == 0x02 and fm2 == 0x03b97f and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df8c2ed; op2val:0x103b97f;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:20574*0 + 3*53*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20574*0 + 3*53*FLEN/8, x4, x1, x2)

inst_6859:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x78c2ed and fs2 == 0 and fe2 == 0x02 and fm2 == 0x03b97f and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df8c2ed; op2val:0x103b97f;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:20577*0 + 3*53*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20577*0 + 3*53*FLEN/8, x4, x1, x2)

inst_6860:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x78c2ed and fs2 == 0 and fe2 == 0x02 and fm2 == 0x03b97f and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df8c2ed; op2val:0x103b97f;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:20580*0 + 3*53*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20580*0 + 3*53*FLEN/8, x4, x1, x2)

inst_6861:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x78c2ed and fs2 == 0 and fe2 == 0x02 and fm2 == 0x03b97f and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df8c2ed; op2val:0x103b97f;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:20583*0 + 3*53*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20583*0 + 3*53*FLEN/8, x4, x1, x2)

inst_6862:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x78c2ed and fs2 == 0 and fe2 == 0x02 and fm2 == 0x03b97f and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df8c2ed; op2val:0x103b97f;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:20586*0 + 3*53*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20586*0 + 3*53*FLEN/8, x4, x1, x2)

inst_6863:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x78c2ed and fs2 == 0 and fe2 == 0x02 and fm2 == 0x03b97f and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df8c2ed; op2val:0x103b97f;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:20589*0 + 3*53*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20589*0 + 3*53*FLEN/8, x4, x1, x2)

inst_6864:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x78c2ed and fs2 == 0 and fe2 == 0x02 and fm2 == 0x03b97f and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df8c2ed; op2val:0x103b97f;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:20592*0 + 3*53*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20592*0 + 3*53*FLEN/8, x4, x1, x2)

inst_6865:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x78c2ed and fs2 == 0 and fe2 == 0x02 and fm2 == 0x03b97f and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df8c2ed; op2val:0x103b97f;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:20595*0 + 3*53*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20595*0 + 3*53*FLEN/8, x4, x1, x2)

inst_6866:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x78c2ed and fs2 == 0 and fe2 == 0x02 and fm2 == 0x03b97f and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df8c2ed; op2val:0x103b97f;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:20598*0 + 3*53*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20598*0 + 3*53*FLEN/8, x4, x1, x2)

inst_6867:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x78c2ed and fs2 == 0 and fe2 == 0x02 and fm2 == 0x03b97f and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df8c2ed; op2val:0x103b97f;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:20601*0 + 3*53*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20601*0 + 3*53*FLEN/8, x4, x1, x2)

inst_6868:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x78c2ed and fs2 == 0 and fe2 == 0x02 and fm2 == 0x03b97f and fs3 == 0 and fe3 == 0x8e and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df8c2ed; op2val:0x103b97f;
op3val:0x47000000; valaddr_reg:x3; val_offset:20604*0 + 3*53*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20604*0 + 3*53*FLEN/8, x4, x1, x2)

inst_6869:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x78c2ed and fs2 == 0 and fe2 == 0x02 and fm2 == 0x03b97f and fs3 == 0 and fe3 == 0x8e and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df8c2ed; op2val:0x103b97f;
op3val:0x47000001; valaddr_reg:x3; val_offset:20607*0 + 3*53*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20607*0 + 3*53*FLEN/8, x4, x1, x2)

inst_6870:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x78c2ed and fs2 == 0 and fe2 == 0x02 and fm2 == 0x03b97f and fs3 == 0 and fe3 == 0x8e and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df8c2ed; op2val:0x103b97f;
op3val:0x47000003; valaddr_reg:x3; val_offset:20610*0 + 3*53*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20610*0 + 3*53*FLEN/8, x4, x1, x2)

inst_6871:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x78c2ed and fs2 == 0 and fe2 == 0x02 and fm2 == 0x03b97f and fs3 == 0 and fe3 == 0x8e and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df8c2ed; op2val:0x103b97f;
op3val:0x47000007; valaddr_reg:x3; val_offset:20613*0 + 3*53*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20613*0 + 3*53*FLEN/8, x4, x1, x2)

inst_6872:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x78c2ed and fs2 == 0 and fe2 == 0x02 and fm2 == 0x03b97f and fs3 == 0 and fe3 == 0x8e and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df8c2ed; op2val:0x103b97f;
op3val:0x4700000f; valaddr_reg:x3; val_offset:20616*0 + 3*53*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20616*0 + 3*53*FLEN/8, x4, x1, x2)

inst_6873:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x78c2ed and fs2 == 0 and fe2 == 0x02 and fm2 == 0x03b97f and fs3 == 0 and fe3 == 0x8e and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df8c2ed; op2val:0x103b97f;
op3val:0x4700001f; valaddr_reg:x3; val_offset:20619*0 + 3*53*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20619*0 + 3*53*FLEN/8, x4, x1, x2)

inst_6874:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x78c2ed and fs2 == 0 and fe2 == 0x02 and fm2 == 0x03b97f and fs3 == 0 and fe3 == 0x8e and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df8c2ed; op2val:0x103b97f;
op3val:0x4700003f; valaddr_reg:x3; val_offset:20622*0 + 3*53*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20622*0 + 3*53*FLEN/8, x4, x1, x2)

inst_6875:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x78c2ed and fs2 == 0 and fe2 == 0x02 and fm2 == 0x03b97f and fs3 == 0 and fe3 == 0x8e and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df8c2ed; op2val:0x103b97f;
op3val:0x4700007f; valaddr_reg:x3; val_offset:20625*0 + 3*53*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20625*0 + 3*53*FLEN/8, x4, x1, x2)

inst_6876:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x78c2ed and fs2 == 0 and fe2 == 0x02 and fm2 == 0x03b97f and fs3 == 0 and fe3 == 0x8e and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df8c2ed; op2val:0x103b97f;
op3val:0x470000ff; valaddr_reg:x3; val_offset:20628*0 + 3*53*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20628*0 + 3*53*FLEN/8, x4, x1, x2)

inst_6877:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x78c2ed and fs2 == 0 and fe2 == 0x02 and fm2 == 0x03b97f and fs3 == 0 and fe3 == 0x8e and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df8c2ed; op2val:0x103b97f;
op3val:0x470001ff; valaddr_reg:x3; val_offset:20631*0 + 3*53*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20631*0 + 3*53*FLEN/8, x4, x1, x2)

inst_6878:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x78c2ed and fs2 == 0 and fe2 == 0x02 and fm2 == 0x03b97f and fs3 == 0 and fe3 == 0x8e and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df8c2ed; op2val:0x103b97f;
op3val:0x470003ff; valaddr_reg:x3; val_offset:20634*0 + 3*53*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20634*0 + 3*53*FLEN/8, x4, x1, x2)

inst_6879:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x78c2ed and fs2 == 0 and fe2 == 0x02 and fm2 == 0x03b97f and fs3 == 0 and fe3 == 0x8e and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df8c2ed; op2val:0x103b97f;
op3val:0x470007ff; valaddr_reg:x3; val_offset:20637*0 + 3*53*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20637*0 + 3*53*FLEN/8, x4, x1, x2)

inst_6880:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x78c2ed and fs2 == 0 and fe2 == 0x02 and fm2 == 0x03b97f and fs3 == 0 and fe3 == 0x8e and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df8c2ed; op2val:0x103b97f;
op3val:0x47000fff; valaddr_reg:x3; val_offset:20640*0 + 3*53*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20640*0 + 3*53*FLEN/8, x4, x1, x2)

inst_6881:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x78c2ed and fs2 == 0 and fe2 == 0x02 and fm2 == 0x03b97f and fs3 == 0 and fe3 == 0x8e and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df8c2ed; op2val:0x103b97f;
op3val:0x47001fff; valaddr_reg:x3; val_offset:20643*0 + 3*53*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20643*0 + 3*53*FLEN/8, x4, x1, x2)

inst_6882:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x78c2ed and fs2 == 0 and fe2 == 0x02 and fm2 == 0x03b97f and fs3 == 0 and fe3 == 0x8e and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df8c2ed; op2val:0x103b97f;
op3val:0x47003fff; valaddr_reg:x3; val_offset:20646*0 + 3*53*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20646*0 + 3*53*FLEN/8, x4, x1, x2)

inst_6883:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x78c2ed and fs2 == 0 and fe2 == 0x02 and fm2 == 0x03b97f and fs3 == 0 and fe3 == 0x8e and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df8c2ed; op2val:0x103b97f;
op3val:0x47007fff; valaddr_reg:x3; val_offset:20649*0 + 3*53*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20649*0 + 3*53*FLEN/8, x4, x1, x2)

inst_6884:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x78c2ed and fs2 == 0 and fe2 == 0x02 and fm2 == 0x03b97f and fs3 == 0 and fe3 == 0x8e and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df8c2ed; op2val:0x103b97f;
op3val:0x4700ffff; valaddr_reg:x3; val_offset:20652*0 + 3*53*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20652*0 + 3*53*FLEN/8, x4, x1, x2)

inst_6885:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x78c2ed and fs2 == 0 and fe2 == 0x02 and fm2 == 0x03b97f and fs3 == 0 and fe3 == 0x8e and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df8c2ed; op2val:0x103b97f;
op3val:0x4701ffff; valaddr_reg:x3; val_offset:20655*0 + 3*53*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20655*0 + 3*53*FLEN/8, x4, x1, x2)

inst_6886:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x78c2ed and fs2 == 0 and fe2 == 0x02 and fm2 == 0x03b97f and fs3 == 0 and fe3 == 0x8e and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df8c2ed; op2val:0x103b97f;
op3val:0x4703ffff; valaddr_reg:x3; val_offset:20658*0 + 3*53*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20658*0 + 3*53*FLEN/8, x4, x1, x2)

inst_6887:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x78c2ed and fs2 == 0 and fe2 == 0x02 and fm2 == 0x03b97f and fs3 == 0 and fe3 == 0x8e and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df8c2ed; op2val:0x103b97f;
op3val:0x4707ffff; valaddr_reg:x3; val_offset:20661*0 + 3*53*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20661*0 + 3*53*FLEN/8, x4, x1, x2)

inst_6888:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x78c2ed and fs2 == 0 and fe2 == 0x02 and fm2 == 0x03b97f and fs3 == 0 and fe3 == 0x8e and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df8c2ed; op2val:0x103b97f;
op3val:0x470fffff; valaddr_reg:x3; val_offset:20664*0 + 3*53*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20664*0 + 3*53*FLEN/8, x4, x1, x2)

inst_6889:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x78c2ed and fs2 == 0 and fe2 == 0x02 and fm2 == 0x03b97f and fs3 == 0 and fe3 == 0x8e and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df8c2ed; op2val:0x103b97f;
op3val:0x471fffff; valaddr_reg:x3; val_offset:20667*0 + 3*53*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20667*0 + 3*53*FLEN/8, x4, x1, x2)

inst_6890:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x78c2ed and fs2 == 0 and fe2 == 0x02 and fm2 == 0x03b97f and fs3 == 0 and fe3 == 0x8e and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df8c2ed; op2val:0x103b97f;
op3val:0x473fffff; valaddr_reg:x3; val_offset:20670*0 + 3*53*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20670*0 + 3*53*FLEN/8, x4, x1, x2)

inst_6891:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x78c2ed and fs2 == 0 and fe2 == 0x02 and fm2 == 0x03b97f and fs3 == 0 and fe3 == 0x8e and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df8c2ed; op2val:0x103b97f;
op3val:0x47400000; valaddr_reg:x3; val_offset:20673*0 + 3*53*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20673*0 + 3*53*FLEN/8, x4, x1, x2)

inst_6892:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x78c2ed and fs2 == 0 and fe2 == 0x02 and fm2 == 0x03b97f and fs3 == 0 and fe3 == 0x8e and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df8c2ed; op2val:0x103b97f;
op3val:0x47600000; valaddr_reg:x3; val_offset:20676*0 + 3*53*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20676*0 + 3*53*FLEN/8, x4, x1, x2)

inst_6893:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x78c2ed and fs2 == 0 and fe2 == 0x02 and fm2 == 0x03b97f and fs3 == 0 and fe3 == 0x8e and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df8c2ed; op2val:0x103b97f;
op3val:0x47700000; valaddr_reg:x3; val_offset:20679*0 + 3*53*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20679*0 + 3*53*FLEN/8, x4, x1, x2)

inst_6894:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x78c2ed and fs2 == 0 and fe2 == 0x02 and fm2 == 0x03b97f and fs3 == 0 and fe3 == 0x8e and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df8c2ed; op2val:0x103b97f;
op3val:0x47780000; valaddr_reg:x3; val_offset:20682*0 + 3*53*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20682*0 + 3*53*FLEN/8, x4, x1, x2)

inst_6895:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x78c2ed and fs2 == 0 and fe2 == 0x02 and fm2 == 0x03b97f and fs3 == 0 and fe3 == 0x8e and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df8c2ed; op2val:0x103b97f;
op3val:0x477c0000; valaddr_reg:x3; val_offset:20685*0 + 3*53*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20685*0 + 3*53*FLEN/8, x4, x1, x2)

inst_6896:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x78c2ed and fs2 == 0 and fe2 == 0x02 and fm2 == 0x03b97f and fs3 == 0 and fe3 == 0x8e and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df8c2ed; op2val:0x103b97f;
op3val:0x477e0000; valaddr_reg:x3; val_offset:20688*0 + 3*53*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20688*0 + 3*53*FLEN/8, x4, x1, x2)

inst_6897:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x78c2ed and fs2 == 0 and fe2 == 0x02 and fm2 == 0x03b97f and fs3 == 0 and fe3 == 0x8e and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df8c2ed; op2val:0x103b97f;
op3val:0x477f0000; valaddr_reg:x3; val_offset:20691*0 + 3*53*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20691*0 + 3*53*FLEN/8, x4, x1, x2)

inst_6898:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x78c2ed and fs2 == 0 and fe2 == 0x02 and fm2 == 0x03b97f and fs3 == 0 and fe3 == 0x8e and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df8c2ed; op2val:0x103b97f;
op3val:0x477f8000; valaddr_reg:x3; val_offset:20694*0 + 3*53*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20694*0 + 3*53*FLEN/8, x4, x1, x2)

inst_6899:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x78c2ed and fs2 == 0 and fe2 == 0x02 and fm2 == 0x03b97f and fs3 == 0 and fe3 == 0x8e and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df8c2ed; op2val:0x103b97f;
op3val:0x477fc000; valaddr_reg:x3; val_offset:20697*0 + 3*53*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20697*0 + 3*53*FLEN/8, x4, x1, x2)

inst_6900:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x78c2ed and fs2 == 0 and fe2 == 0x02 and fm2 == 0x03b97f and fs3 == 0 and fe3 == 0x8e and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df8c2ed; op2val:0x103b97f;
op3val:0x477fe000; valaddr_reg:x3; val_offset:20700*0 + 3*53*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20700*0 + 3*53*FLEN/8, x4, x1, x2)

inst_6901:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x78c2ed and fs2 == 0 and fe2 == 0x02 and fm2 == 0x03b97f and fs3 == 0 and fe3 == 0x8e and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df8c2ed; op2val:0x103b97f;
op3val:0x477ff000; valaddr_reg:x3; val_offset:20703*0 + 3*53*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20703*0 + 3*53*FLEN/8, x4, x1, x2)

inst_6902:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x78c2ed and fs2 == 0 and fe2 == 0x02 and fm2 == 0x03b97f and fs3 == 0 and fe3 == 0x8e and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df8c2ed; op2val:0x103b97f;
op3val:0x477ff800; valaddr_reg:x3; val_offset:20706*0 + 3*53*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20706*0 + 3*53*FLEN/8, x4, x1, x2)

inst_6903:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x78c2ed and fs2 == 0 and fe2 == 0x02 and fm2 == 0x03b97f and fs3 == 0 and fe3 == 0x8e and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df8c2ed; op2val:0x103b97f;
op3val:0x477ffc00; valaddr_reg:x3; val_offset:20709*0 + 3*53*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20709*0 + 3*53*FLEN/8, x4, x1, x2)

inst_6904:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x78c2ed and fs2 == 0 and fe2 == 0x02 and fm2 == 0x03b97f and fs3 == 0 and fe3 == 0x8e and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df8c2ed; op2val:0x103b97f;
op3val:0x477ffe00; valaddr_reg:x3; val_offset:20712*0 + 3*53*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20712*0 + 3*53*FLEN/8, x4, x1, x2)

inst_6905:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x78c2ed and fs2 == 0 and fe2 == 0x02 and fm2 == 0x03b97f and fs3 == 0 and fe3 == 0x8e and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df8c2ed; op2val:0x103b97f;
op3val:0x477fff00; valaddr_reg:x3; val_offset:20715*0 + 3*53*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20715*0 + 3*53*FLEN/8, x4, x1, x2)

inst_6906:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x78c2ed and fs2 == 0 and fe2 == 0x02 and fm2 == 0x03b97f and fs3 == 0 and fe3 == 0x8e and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df8c2ed; op2val:0x103b97f;
op3val:0x477fff80; valaddr_reg:x3; val_offset:20718*0 + 3*53*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20718*0 + 3*53*FLEN/8, x4, x1, x2)

inst_6907:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x78c2ed and fs2 == 0 and fe2 == 0x02 and fm2 == 0x03b97f and fs3 == 0 and fe3 == 0x8e and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df8c2ed; op2val:0x103b97f;
op3val:0x477fffc0; valaddr_reg:x3; val_offset:20721*0 + 3*53*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20721*0 + 3*53*FLEN/8, x4, x1, x2)

inst_6908:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x78c2ed and fs2 == 0 and fe2 == 0x02 and fm2 == 0x03b97f and fs3 == 0 and fe3 == 0x8e and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df8c2ed; op2val:0x103b97f;
op3val:0x477fffe0; valaddr_reg:x3; val_offset:20724*0 + 3*53*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20724*0 + 3*53*FLEN/8, x4, x1, x2)

inst_6909:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x78c2ed and fs2 == 0 and fe2 == 0x02 and fm2 == 0x03b97f and fs3 == 0 and fe3 == 0x8e and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df8c2ed; op2val:0x103b97f;
op3val:0x477ffff0; valaddr_reg:x3; val_offset:20727*0 + 3*53*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20727*0 + 3*53*FLEN/8, x4, x1, x2)

inst_6910:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x78c2ed and fs2 == 0 and fe2 == 0x02 and fm2 == 0x03b97f and fs3 == 0 and fe3 == 0x8e and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df8c2ed; op2val:0x103b97f;
op3val:0x477ffff8; valaddr_reg:x3; val_offset:20730*0 + 3*53*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20730*0 + 3*53*FLEN/8, x4, x1, x2)

inst_6911:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x78c2ed and fs2 == 0 and fe2 == 0x02 and fm2 == 0x03b97f and fs3 == 0 and fe3 == 0x8e and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df8c2ed; op2val:0x103b97f;
op3val:0x477ffffc; valaddr_reg:x3; val_offset:20733*0 + 3*53*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20733*0 + 3*53*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2113266157,32,FLEN)
NAN_BOXED(2164606034,32,FLEN)
NAN_BOXED(3218828726,32,FLEN)
NAN_BOXED(2113266157,32,FLEN)
NAN_BOXED(2164606034,32,FLEN)
NAN_BOXED(3219547750,32,FLEN)
NAN_BOXED(2113266157,32,FLEN)
NAN_BOXED(2164606034,32,FLEN)
NAN_BOXED(3220027099,32,FLEN)
NAN_BOXED(2113266157,32,FLEN)
NAN_BOXED(2164606034,32,FLEN)
NAN_BOXED(3221225464,32,FLEN)
NAN_BOXED(2113266157,32,FLEN)
NAN_BOXED(2164606034,32,FLEN)
NAN_BOXED(3221225468,32,FLEN)
NAN_BOXED(2113266157,32,FLEN)
NAN_BOXED(2164606034,32,FLEN)
NAN_BOXED(3221225470,32,FLEN)
NAN_BOXED(2113327590,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2113327590,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3,32,FLEN)
NAN_BOXED(2113327590,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7,32,FLEN)
NAN_BOXED(2113327590,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1677721,32,FLEN)
NAN_BOXED(2113327590,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2396745,32,FLEN)
NAN_BOXED(2113327590,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3355443,32,FLEN)
NAN_BOXED(2113327590,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3595117,32,FLEN)
NAN_BOXED(2113327590,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3914683,32,FLEN)
NAN_BOXED(2113327590,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4473924,32,FLEN)
NAN_BOXED(2113327590,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5033164,32,FLEN)
NAN_BOXED(2113327590,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5991862,32,FLEN)
NAN_BOXED(2113327590,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(6710886,32,FLEN)
NAN_BOXED(2113327590,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7190235,32,FLEN)
NAN_BOXED(2113327590,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388600,32,FLEN)
NAN_BOXED(2113327590,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388604,32,FLEN)
NAN_BOXED(2113327590,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388606,32,FLEN)
NAN_BOXED(2113327590,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251658240,32,FLEN)
NAN_BOXED(2113327590,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251658241,32,FLEN)
NAN_BOXED(2113327590,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251658243,32,FLEN)
NAN_BOXED(2113327590,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251658247,32,FLEN)
NAN_BOXED(2113327590,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251658255,32,FLEN)
NAN_BOXED(2113327590,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251658271,32,FLEN)
NAN_BOXED(2113327590,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251658303,32,FLEN)
NAN_BOXED(2113327590,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251658367,32,FLEN)
NAN_BOXED(2113327590,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251658495,32,FLEN)
NAN_BOXED(2113327590,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251658751,32,FLEN)
NAN_BOXED(2113327590,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251659263,32,FLEN)
NAN_BOXED(2113327590,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251660287,32,FLEN)
NAN_BOXED(2113327590,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251662335,32,FLEN)
NAN_BOXED(2113327590,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251666431,32,FLEN)
NAN_BOXED(2113327590,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251674623,32,FLEN)
NAN_BOXED(2113327590,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251691007,32,FLEN)
NAN_BOXED(2113327590,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251723775,32,FLEN)
NAN_BOXED(2113327590,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251789311,32,FLEN)
NAN_BOXED(2113327590,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251920383,32,FLEN)
NAN_BOXED(2113327590,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(252182527,32,FLEN)
NAN_BOXED(2113327590,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(252706815,32,FLEN)
NAN_BOXED(2113327590,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(253755391,32,FLEN)
NAN_BOXED(2113327590,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(255852543,32,FLEN)
NAN_BOXED(2113327590,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(255852544,32,FLEN)
NAN_BOXED(2113327590,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(257949696,32,FLEN)
NAN_BOXED(2113327590,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(258998272,32,FLEN)
NAN_BOXED(2113327590,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(259522560,32,FLEN)
NAN_BOXED(2113327590,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(259784704,32,FLEN)
NAN_BOXED(2113327590,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(259915776,32,FLEN)
NAN_BOXED(2113327590,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(259981312,32,FLEN)
NAN_BOXED(2113327590,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260014080,32,FLEN)
NAN_BOXED(2113327590,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260030464,32,FLEN)
NAN_BOXED(2113327590,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260038656,32,FLEN)
NAN_BOXED(2113327590,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260042752,32,FLEN)
NAN_BOXED(2113327590,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260044800,32,FLEN)
NAN_BOXED(2113327590,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260045824,32,FLEN)
NAN_BOXED(2113327590,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260046336,32,FLEN)
NAN_BOXED(2113327590,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260046592,32,FLEN)
NAN_BOXED(2113327590,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260046720,32,FLEN)
NAN_BOXED(2113327590,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260046784,32,FLEN)
NAN_BOXED(2113327590,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260046816,32,FLEN)
NAN_BOXED(2113327590,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260046832,32,FLEN)
NAN_BOXED(2113327590,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260046840,32,FLEN)
NAN_BOXED(2113327590,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260046844,32,FLEN)
NAN_BOXED(2113327590,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260046846,32,FLEN)
NAN_BOXED(2113327590,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260046847,32,FLEN)
NAN_BOXED(2113454829,32,FLEN)
NAN_BOXED(17021311,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2113454829,32,FLEN)
NAN_BOXED(17021311,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2113454829,32,FLEN)
NAN_BOXED(17021311,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2113454829,32,FLEN)
NAN_BOXED(17021311,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2113454829,32,FLEN)
NAN_BOXED(17021311,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2113454829,32,FLEN)
NAN_BOXED(17021311,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2113454829,32,FLEN)
NAN_BOXED(17021311,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2113454829,32,FLEN)
NAN_BOXED(17021311,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2113454829,32,FLEN)
NAN_BOXED(17021311,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2113454829,32,FLEN)
NAN_BOXED(17021311,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2113454829,32,FLEN)
NAN_BOXED(17021311,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2113454829,32,FLEN)
NAN_BOXED(17021311,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2113454829,32,FLEN)
NAN_BOXED(17021311,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2113454829,32,FLEN)
NAN_BOXED(17021311,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2113454829,32,FLEN)
NAN_BOXED(17021311,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2113454829,32,FLEN)
NAN_BOXED(17021311,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2113454829,32,FLEN)
NAN_BOXED(17021311,32,FLEN)
NAN_BOXED(1191182336,32,FLEN)
NAN_BOXED(2113454829,32,FLEN)
NAN_BOXED(17021311,32,FLEN)
NAN_BOXED(1191182337,32,FLEN)
NAN_BOXED(2113454829,32,FLEN)
NAN_BOXED(17021311,32,FLEN)
NAN_BOXED(1191182339,32,FLEN)
NAN_BOXED(2113454829,32,FLEN)
NAN_BOXED(17021311,32,FLEN)
NAN_BOXED(1191182343,32,FLEN)
NAN_BOXED(2113454829,32,FLEN)
NAN_BOXED(17021311,32,FLEN)
NAN_BOXED(1191182351,32,FLEN)
NAN_BOXED(2113454829,32,FLEN)
NAN_BOXED(17021311,32,FLEN)
NAN_BOXED(1191182367,32,FLEN)
NAN_BOXED(2113454829,32,FLEN)
NAN_BOXED(17021311,32,FLEN)
NAN_BOXED(1191182399,32,FLEN)
NAN_BOXED(2113454829,32,FLEN)
NAN_BOXED(17021311,32,FLEN)
NAN_BOXED(1191182463,32,FLEN)
NAN_BOXED(2113454829,32,FLEN)
NAN_BOXED(17021311,32,FLEN)
NAN_BOXED(1191182591,32,FLEN)
NAN_BOXED(2113454829,32,FLEN)
NAN_BOXED(17021311,32,FLEN)
NAN_BOXED(1191182847,32,FLEN)
NAN_BOXED(2113454829,32,FLEN)
NAN_BOXED(17021311,32,FLEN)
NAN_BOXED(1191183359,32,FLEN)
NAN_BOXED(2113454829,32,FLEN)
NAN_BOXED(17021311,32,FLEN)
NAN_BOXED(1191184383,32,FLEN)
NAN_BOXED(2113454829,32,FLEN)
NAN_BOXED(17021311,32,FLEN)
NAN_BOXED(1191186431,32,FLEN)
NAN_BOXED(2113454829,32,FLEN)
NAN_BOXED(17021311,32,FLEN)
NAN_BOXED(1191190527,32,FLEN)
NAN_BOXED(2113454829,32,FLEN)
NAN_BOXED(17021311,32,FLEN)
NAN_BOXED(1191198719,32,FLEN)
NAN_BOXED(2113454829,32,FLEN)
NAN_BOXED(17021311,32,FLEN)
NAN_BOXED(1191215103,32,FLEN)
NAN_BOXED(2113454829,32,FLEN)
NAN_BOXED(17021311,32,FLEN)
NAN_BOXED(1191247871,32,FLEN)
NAN_BOXED(2113454829,32,FLEN)
NAN_BOXED(17021311,32,FLEN)
NAN_BOXED(1191313407,32,FLEN)
NAN_BOXED(2113454829,32,FLEN)
NAN_BOXED(17021311,32,FLEN)
NAN_BOXED(1191444479,32,FLEN)
NAN_BOXED(2113454829,32,FLEN)
NAN_BOXED(17021311,32,FLEN)
NAN_BOXED(1191706623,32,FLEN)
NAN_BOXED(2113454829,32,FLEN)
NAN_BOXED(17021311,32,FLEN)
NAN_BOXED(1192230911,32,FLEN)
NAN_BOXED(2113454829,32,FLEN)
NAN_BOXED(17021311,32,FLEN)
NAN_BOXED(1193279487,32,FLEN)
NAN_BOXED(2113454829,32,FLEN)
NAN_BOXED(17021311,32,FLEN)
NAN_BOXED(1195376639,32,FLEN)
NAN_BOXED(2113454829,32,FLEN)
NAN_BOXED(17021311,32,FLEN)
NAN_BOXED(1195376640,32,FLEN)
NAN_BOXED(2113454829,32,FLEN)
NAN_BOXED(17021311,32,FLEN)
NAN_BOXED(1197473792,32,FLEN)
NAN_BOXED(2113454829,32,FLEN)
NAN_BOXED(17021311,32,FLEN)
NAN_BOXED(1198522368,32,FLEN)
NAN_BOXED(2113454829,32,FLEN)
NAN_BOXED(17021311,32,FLEN)
NAN_BOXED(1199046656,32,FLEN)
NAN_BOXED(2113454829,32,FLEN)
NAN_BOXED(17021311,32,FLEN)
NAN_BOXED(1199308800,32,FLEN)
NAN_BOXED(2113454829,32,FLEN)
NAN_BOXED(17021311,32,FLEN)
NAN_BOXED(1199439872,32,FLEN)
NAN_BOXED(2113454829,32,FLEN)
NAN_BOXED(17021311,32,FLEN)
NAN_BOXED(1199505408,32,FLEN)
NAN_BOXED(2113454829,32,FLEN)
NAN_BOXED(17021311,32,FLEN)
NAN_BOXED(1199538176,32,FLEN)
NAN_BOXED(2113454829,32,FLEN)
NAN_BOXED(17021311,32,FLEN)
NAN_BOXED(1199554560,32,FLEN)
NAN_BOXED(2113454829,32,FLEN)
NAN_BOXED(17021311,32,FLEN)
NAN_BOXED(1199562752,32,FLEN)
NAN_BOXED(2113454829,32,FLEN)
NAN_BOXED(17021311,32,FLEN)
NAN_BOXED(1199566848,32,FLEN)
NAN_BOXED(2113454829,32,FLEN)
NAN_BOXED(17021311,32,FLEN)
NAN_BOXED(1199568896,32,FLEN)
NAN_BOXED(2113454829,32,FLEN)
NAN_BOXED(17021311,32,FLEN)
NAN_BOXED(1199569920,32,FLEN)
NAN_BOXED(2113454829,32,FLEN)
NAN_BOXED(17021311,32,FLEN)
NAN_BOXED(1199570432,32,FLEN)
NAN_BOXED(2113454829,32,FLEN)
NAN_BOXED(17021311,32,FLEN)
NAN_BOXED(1199570688,32,FLEN)
NAN_BOXED(2113454829,32,FLEN)
NAN_BOXED(17021311,32,FLEN)
NAN_BOXED(1199570816,32,FLEN)
NAN_BOXED(2113454829,32,FLEN)
NAN_BOXED(17021311,32,FLEN)
NAN_BOXED(1199570880,32,FLEN)
NAN_BOXED(2113454829,32,FLEN)
NAN_BOXED(17021311,32,FLEN)
NAN_BOXED(1199570912,32,FLEN)
NAN_BOXED(2113454829,32,FLEN)
NAN_BOXED(17021311,32,FLEN)
NAN_BOXED(1199570928,32,FLEN)
NAN_BOXED(2113454829,32,FLEN)
NAN_BOXED(17021311,32,FLEN)
NAN_BOXED(1199570936,32,FLEN)
NAN_BOXED(2113454829,32,FLEN)
NAN_BOXED(17021311,32,FLEN)
NAN_BOXED(1199570940,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
