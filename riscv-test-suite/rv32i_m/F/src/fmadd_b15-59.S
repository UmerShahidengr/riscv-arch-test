
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:17:59 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_7424:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0bf222 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x6a25d1 and fs3 == 1 and fe3 == 0x78 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0bf222; op2val:0x80ea25d1;
op3val:0xbc003fff; valaddr_reg:x3; val_offset:22272*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22272*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7425:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0bf222 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x6a25d1 and fs3 == 1 and fe3 == 0x78 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0bf222; op2val:0x80ea25d1;
op3val:0xbc007fff; valaddr_reg:x3; val_offset:22275*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22275*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7426:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0bf222 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x6a25d1 and fs3 == 1 and fe3 == 0x78 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0bf222; op2val:0x80ea25d1;
op3val:0xbc00ffff; valaddr_reg:x3; val_offset:22278*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22278*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7427:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0bf222 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x6a25d1 and fs3 == 1 and fe3 == 0x78 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0bf222; op2val:0x80ea25d1;
op3val:0xbc01ffff; valaddr_reg:x3; val_offset:22281*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22281*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7428:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0bf222 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x6a25d1 and fs3 == 1 and fe3 == 0x78 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0bf222; op2val:0x80ea25d1;
op3val:0xbc03ffff; valaddr_reg:x3; val_offset:22284*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22284*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7429:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0bf222 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x6a25d1 and fs3 == 1 and fe3 == 0x78 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0bf222; op2val:0x80ea25d1;
op3val:0xbc07ffff; valaddr_reg:x3; val_offset:22287*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22287*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7430:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0bf222 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x6a25d1 and fs3 == 1 and fe3 == 0x78 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0bf222; op2val:0x80ea25d1;
op3val:0xbc0fffff; valaddr_reg:x3; val_offset:22290*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22290*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7431:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0bf222 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x6a25d1 and fs3 == 1 and fe3 == 0x78 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0bf222; op2val:0x80ea25d1;
op3val:0xbc1fffff; valaddr_reg:x3; val_offset:22293*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22293*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7432:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0bf222 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x6a25d1 and fs3 == 1 and fe3 == 0x78 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0bf222; op2val:0x80ea25d1;
op3val:0xbc3fffff; valaddr_reg:x3; val_offset:22296*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22296*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7433:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0bf222 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x6a25d1 and fs3 == 1 and fe3 == 0x78 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0bf222; op2val:0x80ea25d1;
op3val:0xbc400000; valaddr_reg:x3; val_offset:22299*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22299*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7434:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0bf222 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x6a25d1 and fs3 == 1 and fe3 == 0x78 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0bf222; op2val:0x80ea25d1;
op3val:0xbc600000; valaddr_reg:x3; val_offset:22302*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22302*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7435:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0bf222 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x6a25d1 and fs3 == 1 and fe3 == 0x78 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0bf222; op2val:0x80ea25d1;
op3val:0xbc700000; valaddr_reg:x3; val_offset:22305*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22305*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7436:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0bf222 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x6a25d1 and fs3 == 1 and fe3 == 0x78 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0bf222; op2val:0x80ea25d1;
op3val:0xbc780000; valaddr_reg:x3; val_offset:22308*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22308*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7437:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0bf222 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x6a25d1 and fs3 == 1 and fe3 == 0x78 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0bf222; op2val:0x80ea25d1;
op3val:0xbc7c0000; valaddr_reg:x3; val_offset:22311*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22311*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7438:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0bf222 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x6a25d1 and fs3 == 1 and fe3 == 0x78 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0bf222; op2val:0x80ea25d1;
op3val:0xbc7e0000; valaddr_reg:x3; val_offset:22314*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22314*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7439:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0bf222 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x6a25d1 and fs3 == 1 and fe3 == 0x78 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0bf222; op2val:0x80ea25d1;
op3val:0xbc7f0000; valaddr_reg:x3; val_offset:22317*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22317*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7440:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0bf222 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x6a25d1 and fs3 == 1 and fe3 == 0x78 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0bf222; op2val:0x80ea25d1;
op3val:0xbc7f8000; valaddr_reg:x3; val_offset:22320*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22320*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7441:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0bf222 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x6a25d1 and fs3 == 1 and fe3 == 0x78 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0bf222; op2val:0x80ea25d1;
op3val:0xbc7fc000; valaddr_reg:x3; val_offset:22323*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22323*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7442:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0bf222 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x6a25d1 and fs3 == 1 and fe3 == 0x78 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0bf222; op2val:0x80ea25d1;
op3val:0xbc7fe000; valaddr_reg:x3; val_offset:22326*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22326*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7443:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0bf222 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x6a25d1 and fs3 == 1 and fe3 == 0x78 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0bf222; op2val:0x80ea25d1;
op3val:0xbc7ff000; valaddr_reg:x3; val_offset:22329*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22329*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7444:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0bf222 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x6a25d1 and fs3 == 1 and fe3 == 0x78 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0bf222; op2val:0x80ea25d1;
op3val:0xbc7ff800; valaddr_reg:x3; val_offset:22332*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22332*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7445:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0bf222 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x6a25d1 and fs3 == 1 and fe3 == 0x78 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0bf222; op2val:0x80ea25d1;
op3val:0xbc7ffc00; valaddr_reg:x3; val_offset:22335*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22335*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7446:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0bf222 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x6a25d1 and fs3 == 1 and fe3 == 0x78 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0bf222; op2val:0x80ea25d1;
op3val:0xbc7ffe00; valaddr_reg:x3; val_offset:22338*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22338*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7447:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0bf222 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x6a25d1 and fs3 == 1 and fe3 == 0x78 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0bf222; op2val:0x80ea25d1;
op3val:0xbc7fff00; valaddr_reg:x3; val_offset:22341*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22341*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7448:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0bf222 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x6a25d1 and fs3 == 1 and fe3 == 0x78 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0bf222; op2val:0x80ea25d1;
op3val:0xbc7fff80; valaddr_reg:x3; val_offset:22344*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22344*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7449:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0bf222 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x6a25d1 and fs3 == 1 and fe3 == 0x78 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0bf222; op2val:0x80ea25d1;
op3val:0xbc7fffc0; valaddr_reg:x3; val_offset:22347*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22347*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7450:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0bf222 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x6a25d1 and fs3 == 1 and fe3 == 0x78 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0bf222; op2val:0x80ea25d1;
op3val:0xbc7fffe0; valaddr_reg:x3; val_offset:22350*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22350*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7451:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0bf222 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x6a25d1 and fs3 == 1 and fe3 == 0x78 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0bf222; op2val:0x80ea25d1;
op3val:0xbc7ffff0; valaddr_reg:x3; val_offset:22353*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22353*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7452:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0bf222 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x6a25d1 and fs3 == 1 and fe3 == 0x78 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0bf222; op2val:0x80ea25d1;
op3val:0xbc7ffff8; valaddr_reg:x3; val_offset:22356*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22356*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7453:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0bf222 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x6a25d1 and fs3 == 1 and fe3 == 0x78 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0bf222; op2val:0x80ea25d1;
op3val:0xbc7ffffc; valaddr_reg:x3; val_offset:22359*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22359*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7454:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0bf222 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x6a25d1 and fs3 == 1 and fe3 == 0x78 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0bf222; op2val:0x80ea25d1;
op3val:0xbc7ffffe; valaddr_reg:x3; val_offset:22362*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22362*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7455:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0bf222 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x6a25d1 and fs3 == 1 and fe3 == 0x78 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0bf222; op2val:0x80ea25d1;
op3val:0xbc7fffff; valaddr_reg:x3; val_offset:22365*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22365*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7456:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0bf222 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x6a25d1 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0bf222; op2val:0x80ea25d1;
op3val:0xbf800001; valaddr_reg:x3; val_offset:22368*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22368*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7457:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0bf222 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x6a25d1 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0bf222; op2val:0x80ea25d1;
op3val:0xbf800003; valaddr_reg:x3; val_offset:22371*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22371*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7458:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0bf222 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x6a25d1 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0bf222; op2val:0x80ea25d1;
op3val:0xbf800007; valaddr_reg:x3; val_offset:22374*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22374*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7459:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0bf222 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x6a25d1 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0bf222; op2val:0x80ea25d1;
op3val:0xbf999999; valaddr_reg:x3; val_offset:22377*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22377*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7460:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0bf222 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x6a25d1 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0bf222; op2val:0x80ea25d1;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:22380*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22380*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7461:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0bf222 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x6a25d1 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0bf222; op2val:0x80ea25d1;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:22383*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22383*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7462:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0bf222 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x6a25d1 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0bf222; op2val:0x80ea25d1;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:22386*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22386*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7463:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0bf222 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x6a25d1 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0bf222; op2val:0x80ea25d1;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:22389*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22389*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7464:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0bf222 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x6a25d1 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0bf222; op2val:0x80ea25d1;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:22392*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22392*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7465:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0bf222 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x6a25d1 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0bf222; op2val:0x80ea25d1;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:22395*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22395*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7466:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0bf222 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x6a25d1 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0bf222; op2val:0x80ea25d1;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:22398*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22398*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7467:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0bf222 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x6a25d1 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0bf222; op2val:0x80ea25d1;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:22401*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22401*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7468:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0bf222 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x6a25d1 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0bf222; op2val:0x80ea25d1;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:22404*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22404*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7469:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0bf222 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x6a25d1 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0bf222; op2val:0x80ea25d1;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:22407*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22407*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7470:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0bf222 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x6a25d1 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0bf222; op2val:0x80ea25d1;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:22410*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22410*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7471:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0bf222 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x6a25d1 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0bf222; op2val:0x80ea25d1;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:22413*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22413*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7472:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0d44f1 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x67f441 and fs3 == 0 and fe3 == 0xed and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0d44f1; op2val:0x40e7f441;
op3val:0x76800000; valaddr_reg:x3; val_offset:22416*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22416*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7473:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0d44f1 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x67f441 and fs3 == 0 and fe3 == 0xed and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0d44f1; op2val:0x40e7f441;
op3val:0x76800001; valaddr_reg:x3; val_offset:22419*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22419*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7474:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0d44f1 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x67f441 and fs3 == 0 and fe3 == 0xed and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0d44f1; op2val:0x40e7f441;
op3val:0x76800003; valaddr_reg:x3; val_offset:22422*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22422*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7475:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0d44f1 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x67f441 and fs3 == 0 and fe3 == 0xed and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0d44f1; op2val:0x40e7f441;
op3val:0x76800007; valaddr_reg:x3; val_offset:22425*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22425*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7476:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0d44f1 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x67f441 and fs3 == 0 and fe3 == 0xed and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0d44f1; op2val:0x40e7f441;
op3val:0x7680000f; valaddr_reg:x3; val_offset:22428*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22428*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7477:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0d44f1 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x67f441 and fs3 == 0 and fe3 == 0xed and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0d44f1; op2val:0x40e7f441;
op3val:0x7680001f; valaddr_reg:x3; val_offset:22431*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22431*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7478:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0d44f1 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x67f441 and fs3 == 0 and fe3 == 0xed and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0d44f1; op2val:0x40e7f441;
op3val:0x7680003f; valaddr_reg:x3; val_offset:22434*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22434*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7479:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0d44f1 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x67f441 and fs3 == 0 and fe3 == 0xed and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0d44f1; op2val:0x40e7f441;
op3val:0x7680007f; valaddr_reg:x3; val_offset:22437*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22437*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7480:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0d44f1 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x67f441 and fs3 == 0 and fe3 == 0xed and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0d44f1; op2val:0x40e7f441;
op3val:0x768000ff; valaddr_reg:x3; val_offset:22440*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22440*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7481:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0d44f1 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x67f441 and fs3 == 0 and fe3 == 0xed and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0d44f1; op2val:0x40e7f441;
op3val:0x768001ff; valaddr_reg:x3; val_offset:22443*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22443*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7482:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0d44f1 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x67f441 and fs3 == 0 and fe3 == 0xed and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0d44f1; op2val:0x40e7f441;
op3val:0x768003ff; valaddr_reg:x3; val_offset:22446*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22446*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7483:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0d44f1 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x67f441 and fs3 == 0 and fe3 == 0xed and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0d44f1; op2val:0x40e7f441;
op3val:0x768007ff; valaddr_reg:x3; val_offset:22449*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22449*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7484:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0d44f1 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x67f441 and fs3 == 0 and fe3 == 0xed and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0d44f1; op2val:0x40e7f441;
op3val:0x76800fff; valaddr_reg:x3; val_offset:22452*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22452*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7485:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0d44f1 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x67f441 and fs3 == 0 and fe3 == 0xed and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0d44f1; op2val:0x40e7f441;
op3val:0x76801fff; valaddr_reg:x3; val_offset:22455*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22455*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7486:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0d44f1 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x67f441 and fs3 == 0 and fe3 == 0xed and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0d44f1; op2val:0x40e7f441;
op3val:0x76803fff; valaddr_reg:x3; val_offset:22458*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22458*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7487:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0d44f1 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x67f441 and fs3 == 0 and fe3 == 0xed and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0d44f1; op2val:0x40e7f441;
op3val:0x76807fff; valaddr_reg:x3; val_offset:22461*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22461*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7488:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0d44f1 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x67f441 and fs3 == 0 and fe3 == 0xed and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0d44f1; op2val:0x40e7f441;
op3val:0x7680ffff; valaddr_reg:x3; val_offset:22464*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22464*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7489:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0d44f1 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x67f441 and fs3 == 0 and fe3 == 0xed and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0d44f1; op2val:0x40e7f441;
op3val:0x7681ffff; valaddr_reg:x3; val_offset:22467*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22467*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7490:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0d44f1 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x67f441 and fs3 == 0 and fe3 == 0xed and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0d44f1; op2val:0x40e7f441;
op3val:0x7683ffff; valaddr_reg:x3; val_offset:22470*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22470*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7491:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0d44f1 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x67f441 and fs3 == 0 and fe3 == 0xed and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0d44f1; op2val:0x40e7f441;
op3val:0x7687ffff; valaddr_reg:x3; val_offset:22473*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22473*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7492:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0d44f1 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x67f441 and fs3 == 0 and fe3 == 0xed and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0d44f1; op2val:0x40e7f441;
op3val:0x768fffff; valaddr_reg:x3; val_offset:22476*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22476*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7493:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0d44f1 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x67f441 and fs3 == 0 and fe3 == 0xed and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0d44f1; op2val:0x40e7f441;
op3val:0x769fffff; valaddr_reg:x3; val_offset:22479*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22479*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7494:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0d44f1 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x67f441 and fs3 == 0 and fe3 == 0xed and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0d44f1; op2val:0x40e7f441;
op3val:0x76bfffff; valaddr_reg:x3; val_offset:22482*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22482*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7495:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0d44f1 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x67f441 and fs3 == 0 and fe3 == 0xed and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0d44f1; op2val:0x40e7f441;
op3val:0x76c00000; valaddr_reg:x3; val_offset:22485*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22485*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7496:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0d44f1 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x67f441 and fs3 == 0 and fe3 == 0xed and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0d44f1; op2val:0x40e7f441;
op3val:0x76e00000; valaddr_reg:x3; val_offset:22488*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22488*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7497:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0d44f1 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x67f441 and fs3 == 0 and fe3 == 0xed and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0d44f1; op2val:0x40e7f441;
op3val:0x76f00000; valaddr_reg:x3; val_offset:22491*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22491*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7498:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0d44f1 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x67f441 and fs3 == 0 and fe3 == 0xed and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0d44f1; op2val:0x40e7f441;
op3val:0x76f80000; valaddr_reg:x3; val_offset:22494*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22494*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7499:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0d44f1 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x67f441 and fs3 == 0 and fe3 == 0xed and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0d44f1; op2val:0x40e7f441;
op3val:0x76fc0000; valaddr_reg:x3; val_offset:22497*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22497*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7500:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0d44f1 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x67f441 and fs3 == 0 and fe3 == 0xed and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0d44f1; op2val:0x40e7f441;
op3val:0x76fe0000; valaddr_reg:x3; val_offset:22500*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22500*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7501:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0d44f1 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x67f441 and fs3 == 0 and fe3 == 0xed and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0d44f1; op2val:0x40e7f441;
op3val:0x76ff0000; valaddr_reg:x3; val_offset:22503*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22503*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7502:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0d44f1 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x67f441 and fs3 == 0 and fe3 == 0xed and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0d44f1; op2val:0x40e7f441;
op3val:0x76ff8000; valaddr_reg:x3; val_offset:22506*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22506*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7503:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0d44f1 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x67f441 and fs3 == 0 and fe3 == 0xed and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0d44f1; op2val:0x40e7f441;
op3val:0x76ffc000; valaddr_reg:x3; val_offset:22509*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22509*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7504:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0d44f1 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x67f441 and fs3 == 0 and fe3 == 0xed and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0d44f1; op2val:0x40e7f441;
op3val:0x76ffe000; valaddr_reg:x3; val_offset:22512*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22512*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7505:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0d44f1 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x67f441 and fs3 == 0 and fe3 == 0xed and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0d44f1; op2val:0x40e7f441;
op3val:0x76fff000; valaddr_reg:x3; val_offset:22515*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22515*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7506:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0d44f1 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x67f441 and fs3 == 0 and fe3 == 0xed and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0d44f1; op2val:0x40e7f441;
op3val:0x76fff800; valaddr_reg:x3; val_offset:22518*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22518*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7507:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0d44f1 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x67f441 and fs3 == 0 and fe3 == 0xed and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0d44f1; op2val:0x40e7f441;
op3val:0x76fffc00; valaddr_reg:x3; val_offset:22521*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22521*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7508:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0d44f1 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x67f441 and fs3 == 0 and fe3 == 0xed and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0d44f1; op2val:0x40e7f441;
op3val:0x76fffe00; valaddr_reg:x3; val_offset:22524*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22524*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7509:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0d44f1 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x67f441 and fs3 == 0 and fe3 == 0xed and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0d44f1; op2val:0x40e7f441;
op3val:0x76ffff00; valaddr_reg:x3; val_offset:22527*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22527*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7510:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0d44f1 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x67f441 and fs3 == 0 and fe3 == 0xed and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0d44f1; op2val:0x40e7f441;
op3val:0x76ffff80; valaddr_reg:x3; val_offset:22530*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22530*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7511:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0d44f1 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x67f441 and fs3 == 0 and fe3 == 0xed and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0d44f1; op2val:0x40e7f441;
op3val:0x76ffffc0; valaddr_reg:x3; val_offset:22533*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22533*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7512:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0d44f1 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x67f441 and fs3 == 0 and fe3 == 0xed and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0d44f1; op2val:0x40e7f441;
op3val:0x76ffffe0; valaddr_reg:x3; val_offset:22536*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22536*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7513:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0d44f1 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x67f441 and fs3 == 0 and fe3 == 0xed and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0d44f1; op2val:0x40e7f441;
op3val:0x76fffff0; valaddr_reg:x3; val_offset:22539*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22539*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7514:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0d44f1 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x67f441 and fs3 == 0 and fe3 == 0xed and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0d44f1; op2val:0x40e7f441;
op3val:0x76fffff8; valaddr_reg:x3; val_offset:22542*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22542*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7515:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0d44f1 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x67f441 and fs3 == 0 and fe3 == 0xed and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0d44f1; op2val:0x40e7f441;
op3val:0x76fffffc; valaddr_reg:x3; val_offset:22545*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22545*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7516:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0d44f1 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x67f441 and fs3 == 0 and fe3 == 0xed and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0d44f1; op2val:0x40e7f441;
op3val:0x76fffffe; valaddr_reg:x3; val_offset:22548*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22548*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7517:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0d44f1 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x67f441 and fs3 == 0 and fe3 == 0xed and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0d44f1; op2val:0x40e7f441;
op3val:0x76ffffff; valaddr_reg:x3; val_offset:22551*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22551*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7518:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0d44f1 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x67f441 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0d44f1; op2val:0x40e7f441;
op3val:0x7f000001; valaddr_reg:x3; val_offset:22554*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22554*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7519:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0d44f1 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x67f441 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0d44f1; op2val:0x40e7f441;
op3val:0x7f000003; valaddr_reg:x3; val_offset:22557*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22557*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7520:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0d44f1 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x67f441 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0d44f1; op2val:0x40e7f441;
op3val:0x7f000007; valaddr_reg:x3; val_offset:22560*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22560*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7521:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0d44f1 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x67f441 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0d44f1; op2val:0x40e7f441;
op3val:0x7f199999; valaddr_reg:x3; val_offset:22563*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22563*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7522:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0d44f1 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x67f441 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0d44f1; op2val:0x40e7f441;
op3val:0x7f249249; valaddr_reg:x3; val_offset:22566*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22566*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7523:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0d44f1 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x67f441 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0d44f1; op2val:0x40e7f441;
op3val:0x7f333333; valaddr_reg:x3; val_offset:22569*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22569*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7524:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0d44f1 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x67f441 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0d44f1; op2val:0x40e7f441;
op3val:0x7f36db6d; valaddr_reg:x3; val_offset:22572*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22572*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7525:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0d44f1 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x67f441 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0d44f1; op2val:0x40e7f441;
op3val:0x7f3bbbbb; valaddr_reg:x3; val_offset:22575*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22575*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7526:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0d44f1 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x67f441 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0d44f1; op2val:0x40e7f441;
op3val:0x7f444444; valaddr_reg:x3; val_offset:22578*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22578*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7527:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0d44f1 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x67f441 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0d44f1; op2val:0x40e7f441;
op3val:0x7f4ccccc; valaddr_reg:x3; val_offset:22581*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22581*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7528:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0d44f1 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x67f441 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0d44f1; op2val:0x40e7f441;
op3val:0x7f5b6db6; valaddr_reg:x3; val_offset:22584*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22584*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7529:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0d44f1 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x67f441 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0d44f1; op2val:0x40e7f441;
op3val:0x7f666666; valaddr_reg:x3; val_offset:22587*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22587*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7530:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0d44f1 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x67f441 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0d44f1; op2val:0x40e7f441;
op3val:0x7f6db6db; valaddr_reg:x3; val_offset:22590*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22590*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7531:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0d44f1 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x67f441 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0d44f1; op2val:0x40e7f441;
op3val:0x7f7ffff8; valaddr_reg:x3; val_offset:22593*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22593*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7532:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0d44f1 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x67f441 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0d44f1; op2val:0x40e7f441;
op3val:0x7f7ffffc; valaddr_reg:x3; val_offset:22596*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22596*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7533:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0d44f1 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x67f441 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0d44f1; op2val:0x40e7f441;
op3val:0x7f7ffffe; valaddr_reg:x3; val_offset:22599*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22599*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7534:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x10c8a9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x6252d8 and fs3 == 0 and fe3 == 0x6a and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e10c8a9; op2val:0xe252d8;
op3val:0x35000000; valaddr_reg:x3; val_offset:22602*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22602*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7535:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x10c8a9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x6252d8 and fs3 == 0 and fe3 == 0x6a and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e10c8a9; op2val:0xe252d8;
op3val:0x35000001; valaddr_reg:x3; val_offset:22605*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22605*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7536:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x10c8a9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x6252d8 and fs3 == 0 and fe3 == 0x6a and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e10c8a9; op2val:0xe252d8;
op3val:0x35000003; valaddr_reg:x3; val_offset:22608*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22608*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7537:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x10c8a9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x6252d8 and fs3 == 0 and fe3 == 0x6a and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e10c8a9; op2val:0xe252d8;
op3val:0x35000007; valaddr_reg:x3; val_offset:22611*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22611*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7538:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x10c8a9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x6252d8 and fs3 == 0 and fe3 == 0x6a and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e10c8a9; op2val:0xe252d8;
op3val:0x3500000f; valaddr_reg:x3; val_offset:22614*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22614*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7539:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x10c8a9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x6252d8 and fs3 == 0 and fe3 == 0x6a and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e10c8a9; op2val:0xe252d8;
op3val:0x3500001f; valaddr_reg:x3; val_offset:22617*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22617*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7540:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x10c8a9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x6252d8 and fs3 == 0 and fe3 == 0x6a and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e10c8a9; op2val:0xe252d8;
op3val:0x3500003f; valaddr_reg:x3; val_offset:22620*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22620*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7541:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x10c8a9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x6252d8 and fs3 == 0 and fe3 == 0x6a and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e10c8a9; op2val:0xe252d8;
op3val:0x3500007f; valaddr_reg:x3; val_offset:22623*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22623*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7542:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x10c8a9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x6252d8 and fs3 == 0 and fe3 == 0x6a and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e10c8a9; op2val:0xe252d8;
op3val:0x350000ff; valaddr_reg:x3; val_offset:22626*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22626*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7543:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x10c8a9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x6252d8 and fs3 == 0 and fe3 == 0x6a and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e10c8a9; op2val:0xe252d8;
op3val:0x350001ff; valaddr_reg:x3; val_offset:22629*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22629*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7544:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x10c8a9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x6252d8 and fs3 == 0 and fe3 == 0x6a and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e10c8a9; op2val:0xe252d8;
op3val:0x350003ff; valaddr_reg:x3; val_offset:22632*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22632*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7545:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x10c8a9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x6252d8 and fs3 == 0 and fe3 == 0x6a and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e10c8a9; op2val:0xe252d8;
op3val:0x350007ff; valaddr_reg:x3; val_offset:22635*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22635*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7546:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x10c8a9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x6252d8 and fs3 == 0 and fe3 == 0x6a and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e10c8a9; op2val:0xe252d8;
op3val:0x35000fff; valaddr_reg:x3; val_offset:22638*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22638*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7547:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x10c8a9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x6252d8 and fs3 == 0 and fe3 == 0x6a and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e10c8a9; op2val:0xe252d8;
op3val:0x35001fff; valaddr_reg:x3; val_offset:22641*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22641*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7548:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x10c8a9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x6252d8 and fs3 == 0 and fe3 == 0x6a and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e10c8a9; op2val:0xe252d8;
op3val:0x35003fff; valaddr_reg:x3; val_offset:22644*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22644*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7549:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x10c8a9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x6252d8 and fs3 == 0 and fe3 == 0x6a and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e10c8a9; op2val:0xe252d8;
op3val:0x35007fff; valaddr_reg:x3; val_offset:22647*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22647*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7550:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x10c8a9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x6252d8 and fs3 == 0 and fe3 == 0x6a and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e10c8a9; op2val:0xe252d8;
op3val:0x3500ffff; valaddr_reg:x3; val_offset:22650*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22650*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7551:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x10c8a9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x6252d8 and fs3 == 0 and fe3 == 0x6a and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e10c8a9; op2val:0xe252d8;
op3val:0x3501ffff; valaddr_reg:x3; val_offset:22653*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22653*0 + 3*58*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2114712098,32,FLEN)
NAN_BOXED(2162828753,32,FLEN)
NAN_BOXED(3154132991,32,FLEN)
NAN_BOXED(2114712098,32,FLEN)
NAN_BOXED(2162828753,32,FLEN)
NAN_BOXED(3154149375,32,FLEN)
NAN_BOXED(2114712098,32,FLEN)
NAN_BOXED(2162828753,32,FLEN)
NAN_BOXED(3154182143,32,FLEN)
NAN_BOXED(2114712098,32,FLEN)
NAN_BOXED(2162828753,32,FLEN)
NAN_BOXED(3154247679,32,FLEN)
NAN_BOXED(2114712098,32,FLEN)
NAN_BOXED(2162828753,32,FLEN)
NAN_BOXED(3154378751,32,FLEN)
NAN_BOXED(2114712098,32,FLEN)
NAN_BOXED(2162828753,32,FLEN)
NAN_BOXED(3154640895,32,FLEN)
NAN_BOXED(2114712098,32,FLEN)
NAN_BOXED(2162828753,32,FLEN)
NAN_BOXED(3155165183,32,FLEN)
NAN_BOXED(2114712098,32,FLEN)
NAN_BOXED(2162828753,32,FLEN)
NAN_BOXED(3156213759,32,FLEN)
NAN_BOXED(2114712098,32,FLEN)
NAN_BOXED(2162828753,32,FLEN)
NAN_BOXED(3158310911,32,FLEN)
NAN_BOXED(2114712098,32,FLEN)
NAN_BOXED(2162828753,32,FLEN)
NAN_BOXED(3158310912,32,FLEN)
NAN_BOXED(2114712098,32,FLEN)
NAN_BOXED(2162828753,32,FLEN)
NAN_BOXED(3160408064,32,FLEN)
NAN_BOXED(2114712098,32,FLEN)
NAN_BOXED(2162828753,32,FLEN)
NAN_BOXED(3161456640,32,FLEN)
NAN_BOXED(2114712098,32,FLEN)
NAN_BOXED(2162828753,32,FLEN)
NAN_BOXED(3161980928,32,FLEN)
NAN_BOXED(2114712098,32,FLEN)
NAN_BOXED(2162828753,32,FLEN)
NAN_BOXED(3162243072,32,FLEN)
NAN_BOXED(2114712098,32,FLEN)
NAN_BOXED(2162828753,32,FLEN)
NAN_BOXED(3162374144,32,FLEN)
NAN_BOXED(2114712098,32,FLEN)
NAN_BOXED(2162828753,32,FLEN)
NAN_BOXED(3162439680,32,FLEN)
NAN_BOXED(2114712098,32,FLEN)
NAN_BOXED(2162828753,32,FLEN)
NAN_BOXED(3162472448,32,FLEN)
NAN_BOXED(2114712098,32,FLEN)
NAN_BOXED(2162828753,32,FLEN)
NAN_BOXED(3162488832,32,FLEN)
NAN_BOXED(2114712098,32,FLEN)
NAN_BOXED(2162828753,32,FLEN)
NAN_BOXED(3162497024,32,FLEN)
NAN_BOXED(2114712098,32,FLEN)
NAN_BOXED(2162828753,32,FLEN)
NAN_BOXED(3162501120,32,FLEN)
NAN_BOXED(2114712098,32,FLEN)
NAN_BOXED(2162828753,32,FLEN)
NAN_BOXED(3162503168,32,FLEN)
NAN_BOXED(2114712098,32,FLEN)
NAN_BOXED(2162828753,32,FLEN)
NAN_BOXED(3162504192,32,FLEN)
NAN_BOXED(2114712098,32,FLEN)
NAN_BOXED(2162828753,32,FLEN)
NAN_BOXED(3162504704,32,FLEN)
NAN_BOXED(2114712098,32,FLEN)
NAN_BOXED(2162828753,32,FLEN)
NAN_BOXED(3162504960,32,FLEN)
NAN_BOXED(2114712098,32,FLEN)
NAN_BOXED(2162828753,32,FLEN)
NAN_BOXED(3162505088,32,FLEN)
NAN_BOXED(2114712098,32,FLEN)
NAN_BOXED(2162828753,32,FLEN)
NAN_BOXED(3162505152,32,FLEN)
NAN_BOXED(2114712098,32,FLEN)
NAN_BOXED(2162828753,32,FLEN)
NAN_BOXED(3162505184,32,FLEN)
NAN_BOXED(2114712098,32,FLEN)
NAN_BOXED(2162828753,32,FLEN)
NAN_BOXED(3162505200,32,FLEN)
NAN_BOXED(2114712098,32,FLEN)
NAN_BOXED(2162828753,32,FLEN)
NAN_BOXED(3162505208,32,FLEN)
NAN_BOXED(2114712098,32,FLEN)
NAN_BOXED(2162828753,32,FLEN)
NAN_BOXED(3162505212,32,FLEN)
NAN_BOXED(2114712098,32,FLEN)
NAN_BOXED(2162828753,32,FLEN)
NAN_BOXED(3162505214,32,FLEN)
NAN_BOXED(2114712098,32,FLEN)
NAN_BOXED(2162828753,32,FLEN)
NAN_BOXED(3162505215,32,FLEN)
NAN_BOXED(2114712098,32,FLEN)
NAN_BOXED(2162828753,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2114712098,32,FLEN)
NAN_BOXED(2162828753,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2114712098,32,FLEN)
NAN_BOXED(2162828753,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
NAN_BOXED(2114712098,32,FLEN)
NAN_BOXED(2162828753,32,FLEN)
NAN_BOXED(3214514585,32,FLEN)
NAN_BOXED(2114712098,32,FLEN)
NAN_BOXED(2162828753,32,FLEN)
NAN_BOXED(3215233609,32,FLEN)
NAN_BOXED(2114712098,32,FLEN)
NAN_BOXED(2162828753,32,FLEN)
NAN_BOXED(3216192307,32,FLEN)
NAN_BOXED(2114712098,32,FLEN)
NAN_BOXED(2162828753,32,FLEN)
NAN_BOXED(3216431981,32,FLEN)
NAN_BOXED(2114712098,32,FLEN)
NAN_BOXED(2162828753,32,FLEN)
NAN_BOXED(3216751547,32,FLEN)
NAN_BOXED(2114712098,32,FLEN)
NAN_BOXED(2162828753,32,FLEN)
NAN_BOXED(3217310788,32,FLEN)
NAN_BOXED(2114712098,32,FLEN)
NAN_BOXED(2162828753,32,FLEN)
NAN_BOXED(3217870028,32,FLEN)
NAN_BOXED(2114712098,32,FLEN)
NAN_BOXED(2162828753,32,FLEN)
NAN_BOXED(3218828726,32,FLEN)
NAN_BOXED(2114712098,32,FLEN)
NAN_BOXED(2162828753,32,FLEN)
NAN_BOXED(3219547750,32,FLEN)
NAN_BOXED(2114712098,32,FLEN)
NAN_BOXED(2162828753,32,FLEN)
NAN_BOXED(3220027099,32,FLEN)
NAN_BOXED(2114712098,32,FLEN)
NAN_BOXED(2162828753,32,FLEN)
NAN_BOXED(3221225464,32,FLEN)
NAN_BOXED(2114712098,32,FLEN)
NAN_BOXED(2162828753,32,FLEN)
NAN_BOXED(3221225468,32,FLEN)
NAN_BOXED(2114712098,32,FLEN)
NAN_BOXED(2162828753,32,FLEN)
NAN_BOXED(3221225470,32,FLEN)
NAN_BOXED(2114798833,32,FLEN)
NAN_BOXED(1088943169,32,FLEN)
NAN_BOXED(1988100096,32,FLEN)
NAN_BOXED(2114798833,32,FLEN)
NAN_BOXED(1088943169,32,FLEN)
NAN_BOXED(1988100097,32,FLEN)
NAN_BOXED(2114798833,32,FLEN)
NAN_BOXED(1088943169,32,FLEN)
NAN_BOXED(1988100099,32,FLEN)
NAN_BOXED(2114798833,32,FLEN)
NAN_BOXED(1088943169,32,FLEN)
NAN_BOXED(1988100103,32,FLEN)
NAN_BOXED(2114798833,32,FLEN)
NAN_BOXED(1088943169,32,FLEN)
NAN_BOXED(1988100111,32,FLEN)
NAN_BOXED(2114798833,32,FLEN)
NAN_BOXED(1088943169,32,FLEN)
NAN_BOXED(1988100127,32,FLEN)
NAN_BOXED(2114798833,32,FLEN)
NAN_BOXED(1088943169,32,FLEN)
NAN_BOXED(1988100159,32,FLEN)
NAN_BOXED(2114798833,32,FLEN)
NAN_BOXED(1088943169,32,FLEN)
NAN_BOXED(1988100223,32,FLEN)
NAN_BOXED(2114798833,32,FLEN)
NAN_BOXED(1088943169,32,FLEN)
NAN_BOXED(1988100351,32,FLEN)
NAN_BOXED(2114798833,32,FLEN)
NAN_BOXED(1088943169,32,FLEN)
NAN_BOXED(1988100607,32,FLEN)
NAN_BOXED(2114798833,32,FLEN)
NAN_BOXED(1088943169,32,FLEN)
NAN_BOXED(1988101119,32,FLEN)
NAN_BOXED(2114798833,32,FLEN)
NAN_BOXED(1088943169,32,FLEN)
NAN_BOXED(1988102143,32,FLEN)
NAN_BOXED(2114798833,32,FLEN)
NAN_BOXED(1088943169,32,FLEN)
NAN_BOXED(1988104191,32,FLEN)
NAN_BOXED(2114798833,32,FLEN)
NAN_BOXED(1088943169,32,FLEN)
NAN_BOXED(1988108287,32,FLEN)
NAN_BOXED(2114798833,32,FLEN)
NAN_BOXED(1088943169,32,FLEN)
NAN_BOXED(1988116479,32,FLEN)
NAN_BOXED(2114798833,32,FLEN)
NAN_BOXED(1088943169,32,FLEN)
NAN_BOXED(1988132863,32,FLEN)
NAN_BOXED(2114798833,32,FLEN)
NAN_BOXED(1088943169,32,FLEN)
NAN_BOXED(1988165631,32,FLEN)
NAN_BOXED(2114798833,32,FLEN)
NAN_BOXED(1088943169,32,FLEN)
NAN_BOXED(1988231167,32,FLEN)
NAN_BOXED(2114798833,32,FLEN)
NAN_BOXED(1088943169,32,FLEN)
NAN_BOXED(1988362239,32,FLEN)
NAN_BOXED(2114798833,32,FLEN)
NAN_BOXED(1088943169,32,FLEN)
NAN_BOXED(1988624383,32,FLEN)
NAN_BOXED(2114798833,32,FLEN)
NAN_BOXED(1088943169,32,FLEN)
NAN_BOXED(1989148671,32,FLEN)
NAN_BOXED(2114798833,32,FLEN)
NAN_BOXED(1088943169,32,FLEN)
NAN_BOXED(1990197247,32,FLEN)
NAN_BOXED(2114798833,32,FLEN)
NAN_BOXED(1088943169,32,FLEN)
NAN_BOXED(1992294399,32,FLEN)
NAN_BOXED(2114798833,32,FLEN)
NAN_BOXED(1088943169,32,FLEN)
NAN_BOXED(1992294400,32,FLEN)
NAN_BOXED(2114798833,32,FLEN)
NAN_BOXED(1088943169,32,FLEN)
NAN_BOXED(1994391552,32,FLEN)
NAN_BOXED(2114798833,32,FLEN)
NAN_BOXED(1088943169,32,FLEN)
NAN_BOXED(1995440128,32,FLEN)
NAN_BOXED(2114798833,32,FLEN)
NAN_BOXED(1088943169,32,FLEN)
NAN_BOXED(1995964416,32,FLEN)
NAN_BOXED(2114798833,32,FLEN)
NAN_BOXED(1088943169,32,FLEN)
NAN_BOXED(1996226560,32,FLEN)
NAN_BOXED(2114798833,32,FLEN)
NAN_BOXED(1088943169,32,FLEN)
NAN_BOXED(1996357632,32,FLEN)
NAN_BOXED(2114798833,32,FLEN)
NAN_BOXED(1088943169,32,FLEN)
NAN_BOXED(1996423168,32,FLEN)
NAN_BOXED(2114798833,32,FLEN)
NAN_BOXED(1088943169,32,FLEN)
NAN_BOXED(1996455936,32,FLEN)
NAN_BOXED(2114798833,32,FLEN)
NAN_BOXED(1088943169,32,FLEN)
NAN_BOXED(1996472320,32,FLEN)
NAN_BOXED(2114798833,32,FLEN)
NAN_BOXED(1088943169,32,FLEN)
NAN_BOXED(1996480512,32,FLEN)
NAN_BOXED(2114798833,32,FLEN)
NAN_BOXED(1088943169,32,FLEN)
NAN_BOXED(1996484608,32,FLEN)
NAN_BOXED(2114798833,32,FLEN)
NAN_BOXED(1088943169,32,FLEN)
NAN_BOXED(1996486656,32,FLEN)
NAN_BOXED(2114798833,32,FLEN)
NAN_BOXED(1088943169,32,FLEN)
NAN_BOXED(1996487680,32,FLEN)
NAN_BOXED(2114798833,32,FLEN)
NAN_BOXED(1088943169,32,FLEN)
NAN_BOXED(1996488192,32,FLEN)
NAN_BOXED(2114798833,32,FLEN)
NAN_BOXED(1088943169,32,FLEN)
NAN_BOXED(1996488448,32,FLEN)
NAN_BOXED(2114798833,32,FLEN)
NAN_BOXED(1088943169,32,FLEN)
NAN_BOXED(1996488576,32,FLEN)
NAN_BOXED(2114798833,32,FLEN)
NAN_BOXED(1088943169,32,FLEN)
NAN_BOXED(1996488640,32,FLEN)
NAN_BOXED(2114798833,32,FLEN)
NAN_BOXED(1088943169,32,FLEN)
NAN_BOXED(1996488672,32,FLEN)
NAN_BOXED(2114798833,32,FLEN)
NAN_BOXED(1088943169,32,FLEN)
NAN_BOXED(1996488688,32,FLEN)
NAN_BOXED(2114798833,32,FLEN)
NAN_BOXED(1088943169,32,FLEN)
NAN_BOXED(1996488696,32,FLEN)
NAN_BOXED(2114798833,32,FLEN)
NAN_BOXED(1088943169,32,FLEN)
NAN_BOXED(1996488700,32,FLEN)
NAN_BOXED(2114798833,32,FLEN)
NAN_BOXED(1088943169,32,FLEN)
NAN_BOXED(1996488702,32,FLEN)
NAN_BOXED(2114798833,32,FLEN)
NAN_BOXED(1088943169,32,FLEN)
NAN_BOXED(1996488703,32,FLEN)
NAN_BOXED(2114798833,32,FLEN)
NAN_BOXED(1088943169,32,FLEN)
NAN_BOXED(2130706433,32,FLEN)
NAN_BOXED(2114798833,32,FLEN)
NAN_BOXED(1088943169,32,FLEN)
NAN_BOXED(2130706435,32,FLEN)
NAN_BOXED(2114798833,32,FLEN)
NAN_BOXED(1088943169,32,FLEN)
NAN_BOXED(2130706439,32,FLEN)
NAN_BOXED(2114798833,32,FLEN)
NAN_BOXED(1088943169,32,FLEN)
NAN_BOXED(2132384153,32,FLEN)
NAN_BOXED(2114798833,32,FLEN)
NAN_BOXED(1088943169,32,FLEN)
NAN_BOXED(2133103177,32,FLEN)
NAN_BOXED(2114798833,32,FLEN)
NAN_BOXED(1088943169,32,FLEN)
NAN_BOXED(2134061875,32,FLEN)
NAN_BOXED(2114798833,32,FLEN)
NAN_BOXED(1088943169,32,FLEN)
NAN_BOXED(2134301549,32,FLEN)
NAN_BOXED(2114798833,32,FLEN)
NAN_BOXED(1088943169,32,FLEN)
NAN_BOXED(2134621115,32,FLEN)
NAN_BOXED(2114798833,32,FLEN)
NAN_BOXED(1088943169,32,FLEN)
NAN_BOXED(2135180356,32,FLEN)
NAN_BOXED(2114798833,32,FLEN)
NAN_BOXED(1088943169,32,FLEN)
NAN_BOXED(2135739596,32,FLEN)
NAN_BOXED(2114798833,32,FLEN)
NAN_BOXED(1088943169,32,FLEN)
NAN_BOXED(2136698294,32,FLEN)
NAN_BOXED(2114798833,32,FLEN)
NAN_BOXED(1088943169,32,FLEN)
NAN_BOXED(2137417318,32,FLEN)
NAN_BOXED(2114798833,32,FLEN)
NAN_BOXED(1088943169,32,FLEN)
NAN_BOXED(2137896667,32,FLEN)
NAN_BOXED(2114798833,32,FLEN)
NAN_BOXED(1088943169,32,FLEN)
NAN_BOXED(2139095032,32,FLEN)
NAN_BOXED(2114798833,32,FLEN)
NAN_BOXED(1088943169,32,FLEN)
NAN_BOXED(2139095036,32,FLEN)
NAN_BOXED(2114798833,32,FLEN)
NAN_BOXED(1088943169,32,FLEN)
NAN_BOXED(2139095038,32,FLEN)
NAN_BOXED(2115029161,32,FLEN)
NAN_BOXED(14832344,32,FLEN)
NAN_BOXED(889192448,32,FLEN)
NAN_BOXED(2115029161,32,FLEN)
NAN_BOXED(14832344,32,FLEN)
NAN_BOXED(889192449,32,FLEN)
NAN_BOXED(2115029161,32,FLEN)
NAN_BOXED(14832344,32,FLEN)
NAN_BOXED(889192451,32,FLEN)
NAN_BOXED(2115029161,32,FLEN)
NAN_BOXED(14832344,32,FLEN)
NAN_BOXED(889192455,32,FLEN)
NAN_BOXED(2115029161,32,FLEN)
NAN_BOXED(14832344,32,FLEN)
NAN_BOXED(889192463,32,FLEN)
NAN_BOXED(2115029161,32,FLEN)
NAN_BOXED(14832344,32,FLEN)
NAN_BOXED(889192479,32,FLEN)
NAN_BOXED(2115029161,32,FLEN)
NAN_BOXED(14832344,32,FLEN)
NAN_BOXED(889192511,32,FLEN)
NAN_BOXED(2115029161,32,FLEN)
NAN_BOXED(14832344,32,FLEN)
NAN_BOXED(889192575,32,FLEN)
NAN_BOXED(2115029161,32,FLEN)
NAN_BOXED(14832344,32,FLEN)
NAN_BOXED(889192703,32,FLEN)
NAN_BOXED(2115029161,32,FLEN)
NAN_BOXED(14832344,32,FLEN)
NAN_BOXED(889192959,32,FLEN)
NAN_BOXED(2115029161,32,FLEN)
NAN_BOXED(14832344,32,FLEN)
NAN_BOXED(889193471,32,FLEN)
NAN_BOXED(2115029161,32,FLEN)
NAN_BOXED(14832344,32,FLEN)
NAN_BOXED(889194495,32,FLEN)
NAN_BOXED(2115029161,32,FLEN)
NAN_BOXED(14832344,32,FLEN)
NAN_BOXED(889196543,32,FLEN)
NAN_BOXED(2115029161,32,FLEN)
NAN_BOXED(14832344,32,FLEN)
NAN_BOXED(889200639,32,FLEN)
NAN_BOXED(2115029161,32,FLEN)
NAN_BOXED(14832344,32,FLEN)
NAN_BOXED(889208831,32,FLEN)
NAN_BOXED(2115029161,32,FLEN)
NAN_BOXED(14832344,32,FLEN)
NAN_BOXED(889225215,32,FLEN)
NAN_BOXED(2115029161,32,FLEN)
NAN_BOXED(14832344,32,FLEN)
NAN_BOXED(889257983,32,FLEN)
NAN_BOXED(2115029161,32,FLEN)
NAN_BOXED(14832344,32,FLEN)
NAN_BOXED(889323519,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
