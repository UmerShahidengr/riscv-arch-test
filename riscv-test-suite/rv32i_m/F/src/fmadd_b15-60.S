
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:17:59 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_7552:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x10c8a9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x6252d8 and fs3 == 0 and fe3 == 0x6a and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e10c8a9; op2val:0xe252d8;
op3val:0x3503ffff; valaddr_reg:x3; val_offset:22656*0 + 3*59*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22656*0 + 3*59*FLEN/8, x4, x1, x2)

inst_7553:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x10c8a9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x6252d8 and fs3 == 0 and fe3 == 0x6a and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e10c8a9; op2val:0xe252d8;
op3val:0x3507ffff; valaddr_reg:x3; val_offset:22659*0 + 3*59*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22659*0 + 3*59*FLEN/8, x4, x1, x2)

inst_7554:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x10c8a9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x6252d8 and fs3 == 0 and fe3 == 0x6a and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e10c8a9; op2val:0xe252d8;
op3val:0x350fffff; valaddr_reg:x3; val_offset:22662*0 + 3*59*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22662*0 + 3*59*FLEN/8, x4, x1, x2)

inst_7555:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x10c8a9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x6252d8 and fs3 == 0 and fe3 == 0x6a and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e10c8a9; op2val:0xe252d8;
op3val:0x351fffff; valaddr_reg:x3; val_offset:22665*0 + 3*59*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22665*0 + 3*59*FLEN/8, x4, x1, x2)

inst_7556:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x10c8a9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x6252d8 and fs3 == 0 and fe3 == 0x6a and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e10c8a9; op2val:0xe252d8;
op3val:0x353fffff; valaddr_reg:x3; val_offset:22668*0 + 3*59*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22668*0 + 3*59*FLEN/8, x4, x1, x2)

inst_7557:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x10c8a9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x6252d8 and fs3 == 0 and fe3 == 0x6a and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e10c8a9; op2val:0xe252d8;
op3val:0x35400000; valaddr_reg:x3; val_offset:22671*0 + 3*59*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22671*0 + 3*59*FLEN/8, x4, x1, x2)

inst_7558:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x10c8a9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x6252d8 and fs3 == 0 and fe3 == 0x6a and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e10c8a9; op2val:0xe252d8;
op3val:0x35600000; valaddr_reg:x3; val_offset:22674*0 + 3*59*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22674*0 + 3*59*FLEN/8, x4, x1, x2)

inst_7559:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x10c8a9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x6252d8 and fs3 == 0 and fe3 == 0x6a and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e10c8a9; op2val:0xe252d8;
op3val:0x35700000; valaddr_reg:x3; val_offset:22677*0 + 3*59*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22677*0 + 3*59*FLEN/8, x4, x1, x2)

inst_7560:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x10c8a9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x6252d8 and fs3 == 0 and fe3 == 0x6a and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e10c8a9; op2val:0xe252d8;
op3val:0x35780000; valaddr_reg:x3; val_offset:22680*0 + 3*59*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22680*0 + 3*59*FLEN/8, x4, x1, x2)

inst_7561:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x10c8a9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x6252d8 and fs3 == 0 and fe3 == 0x6a and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e10c8a9; op2val:0xe252d8;
op3val:0x357c0000; valaddr_reg:x3; val_offset:22683*0 + 3*59*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22683*0 + 3*59*FLEN/8, x4, x1, x2)

inst_7562:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x10c8a9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x6252d8 and fs3 == 0 and fe3 == 0x6a and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e10c8a9; op2val:0xe252d8;
op3val:0x357e0000; valaddr_reg:x3; val_offset:22686*0 + 3*59*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22686*0 + 3*59*FLEN/8, x4, x1, x2)

inst_7563:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x10c8a9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x6252d8 and fs3 == 0 and fe3 == 0x6a and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e10c8a9; op2val:0xe252d8;
op3val:0x357f0000; valaddr_reg:x3; val_offset:22689*0 + 3*59*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22689*0 + 3*59*FLEN/8, x4, x1, x2)

inst_7564:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x10c8a9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x6252d8 and fs3 == 0 and fe3 == 0x6a and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e10c8a9; op2val:0xe252d8;
op3val:0x357f8000; valaddr_reg:x3; val_offset:22692*0 + 3*59*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22692*0 + 3*59*FLEN/8, x4, x1, x2)

inst_7565:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x10c8a9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x6252d8 and fs3 == 0 and fe3 == 0x6a and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e10c8a9; op2val:0xe252d8;
op3val:0x357fc000; valaddr_reg:x3; val_offset:22695*0 + 3*59*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22695*0 + 3*59*FLEN/8, x4, x1, x2)

inst_7566:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x10c8a9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x6252d8 and fs3 == 0 and fe3 == 0x6a and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e10c8a9; op2val:0xe252d8;
op3val:0x357fe000; valaddr_reg:x3; val_offset:22698*0 + 3*59*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22698*0 + 3*59*FLEN/8, x4, x1, x2)

inst_7567:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x10c8a9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x6252d8 and fs3 == 0 and fe3 == 0x6a and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e10c8a9; op2val:0xe252d8;
op3val:0x357ff000; valaddr_reg:x3; val_offset:22701*0 + 3*59*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22701*0 + 3*59*FLEN/8, x4, x1, x2)

inst_7568:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x10c8a9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x6252d8 and fs3 == 0 and fe3 == 0x6a and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e10c8a9; op2val:0xe252d8;
op3val:0x357ff800; valaddr_reg:x3; val_offset:22704*0 + 3*59*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22704*0 + 3*59*FLEN/8, x4, x1, x2)

inst_7569:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x10c8a9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x6252d8 and fs3 == 0 and fe3 == 0x6a and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e10c8a9; op2val:0xe252d8;
op3val:0x357ffc00; valaddr_reg:x3; val_offset:22707*0 + 3*59*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22707*0 + 3*59*FLEN/8, x4, x1, x2)

inst_7570:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x10c8a9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x6252d8 and fs3 == 0 and fe3 == 0x6a and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e10c8a9; op2val:0xe252d8;
op3val:0x357ffe00; valaddr_reg:x3; val_offset:22710*0 + 3*59*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22710*0 + 3*59*FLEN/8, x4, x1, x2)

inst_7571:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x10c8a9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x6252d8 and fs3 == 0 and fe3 == 0x6a and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e10c8a9; op2val:0xe252d8;
op3val:0x357fff00; valaddr_reg:x3; val_offset:22713*0 + 3*59*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22713*0 + 3*59*FLEN/8, x4, x1, x2)

inst_7572:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x10c8a9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x6252d8 and fs3 == 0 and fe3 == 0x6a and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e10c8a9; op2val:0xe252d8;
op3val:0x357fff80; valaddr_reg:x3; val_offset:22716*0 + 3*59*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22716*0 + 3*59*FLEN/8, x4, x1, x2)

inst_7573:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x10c8a9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x6252d8 and fs3 == 0 and fe3 == 0x6a and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e10c8a9; op2val:0xe252d8;
op3val:0x357fffc0; valaddr_reg:x3; val_offset:22719*0 + 3*59*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22719*0 + 3*59*FLEN/8, x4, x1, x2)

inst_7574:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x10c8a9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x6252d8 and fs3 == 0 and fe3 == 0x6a and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e10c8a9; op2val:0xe252d8;
op3val:0x357fffe0; valaddr_reg:x3; val_offset:22722*0 + 3*59*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22722*0 + 3*59*FLEN/8, x4, x1, x2)

inst_7575:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x10c8a9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x6252d8 and fs3 == 0 and fe3 == 0x6a and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e10c8a9; op2val:0xe252d8;
op3val:0x357ffff0; valaddr_reg:x3; val_offset:22725*0 + 3*59*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22725*0 + 3*59*FLEN/8, x4, x1, x2)

inst_7576:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x10c8a9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x6252d8 and fs3 == 0 and fe3 == 0x6a and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e10c8a9; op2val:0xe252d8;
op3val:0x357ffff8; valaddr_reg:x3; val_offset:22728*0 + 3*59*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22728*0 + 3*59*FLEN/8, x4, x1, x2)

inst_7577:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x10c8a9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x6252d8 and fs3 == 0 and fe3 == 0x6a and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e10c8a9; op2val:0xe252d8;
op3val:0x357ffffc; valaddr_reg:x3; val_offset:22731*0 + 3*59*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22731*0 + 3*59*FLEN/8, x4, x1, x2)

inst_7578:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x10c8a9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x6252d8 and fs3 == 0 and fe3 == 0x6a and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e10c8a9; op2val:0xe252d8;
op3val:0x357ffffe; valaddr_reg:x3; val_offset:22734*0 + 3*59*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22734*0 + 3*59*FLEN/8, x4, x1, x2)

inst_7579:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x10c8a9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x6252d8 and fs3 == 0 and fe3 == 0x6a and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e10c8a9; op2val:0xe252d8;
op3val:0x357fffff; valaddr_reg:x3; val_offset:22737*0 + 3*59*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22737*0 + 3*59*FLEN/8, x4, x1, x2)

inst_7580:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x10c8a9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x6252d8 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e10c8a9; op2val:0xe252d8;
op3val:0x3f800001; valaddr_reg:x3; val_offset:22740*0 + 3*59*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22740*0 + 3*59*FLEN/8, x4, x1, x2)

inst_7581:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x10c8a9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x6252d8 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e10c8a9; op2val:0xe252d8;
op3val:0x3f800003; valaddr_reg:x3; val_offset:22743*0 + 3*59*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22743*0 + 3*59*FLEN/8, x4, x1, x2)

inst_7582:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x10c8a9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x6252d8 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e10c8a9; op2val:0xe252d8;
op3val:0x3f800007; valaddr_reg:x3; val_offset:22746*0 + 3*59*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22746*0 + 3*59*FLEN/8, x4, x1, x2)

inst_7583:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x10c8a9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x6252d8 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e10c8a9; op2val:0xe252d8;
op3val:0x3f999999; valaddr_reg:x3; val_offset:22749*0 + 3*59*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22749*0 + 3*59*FLEN/8, x4, x1, x2)

inst_7584:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x10c8a9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x6252d8 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e10c8a9; op2val:0xe252d8;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:22752*0 + 3*59*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22752*0 + 3*59*FLEN/8, x4, x1, x2)

inst_7585:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x10c8a9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x6252d8 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e10c8a9; op2val:0xe252d8;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:22755*0 + 3*59*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22755*0 + 3*59*FLEN/8, x4, x1, x2)

inst_7586:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x10c8a9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x6252d8 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e10c8a9; op2val:0xe252d8;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:22758*0 + 3*59*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22758*0 + 3*59*FLEN/8, x4, x1, x2)

inst_7587:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x10c8a9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x6252d8 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e10c8a9; op2val:0xe252d8;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:22761*0 + 3*59*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22761*0 + 3*59*FLEN/8, x4, x1, x2)

inst_7588:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x10c8a9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x6252d8 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e10c8a9; op2val:0xe252d8;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:22764*0 + 3*59*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22764*0 + 3*59*FLEN/8, x4, x1, x2)

inst_7589:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x10c8a9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x6252d8 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e10c8a9; op2val:0xe252d8;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:22767*0 + 3*59*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22767*0 + 3*59*FLEN/8, x4, x1, x2)

inst_7590:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x10c8a9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x6252d8 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e10c8a9; op2val:0xe252d8;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:22770*0 + 3*59*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22770*0 + 3*59*FLEN/8, x4, x1, x2)

inst_7591:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x10c8a9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x6252d8 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e10c8a9; op2val:0xe252d8;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:22773*0 + 3*59*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22773*0 + 3*59*FLEN/8, x4, x1, x2)

inst_7592:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x10c8a9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x6252d8 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e10c8a9; op2val:0xe252d8;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:22776*0 + 3*59*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22776*0 + 3*59*FLEN/8, x4, x1, x2)

inst_7593:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x10c8a9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x6252d8 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e10c8a9; op2val:0xe252d8;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:22779*0 + 3*59*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22779*0 + 3*59*FLEN/8, x4, x1, x2)

inst_7594:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x10c8a9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x6252d8 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e10c8a9; op2val:0xe252d8;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:22782*0 + 3*59*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22782*0 + 3*59*FLEN/8, x4, x1, x2)

inst_7595:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x10c8a9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x6252d8 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e10c8a9; op2val:0xe252d8;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:22785*0 + 3*59*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22785*0 + 3*59*FLEN/8, x4, x1, x2)

inst_7596:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x113ff8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e113ff8; op2val:0x80000000;
op3val:0x80800001; valaddr_reg:x3; val_offset:22788*0 + 3*59*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22788*0 + 3*59*FLEN/8, x4, x1, x2)

inst_7597:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x113ff8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e113ff8; op2val:0x80000000;
op3val:0x80800003; valaddr_reg:x3; val_offset:22791*0 + 3*59*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22791*0 + 3*59*FLEN/8, x4, x1, x2)

inst_7598:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x113ff8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e113ff8; op2val:0x80000000;
op3val:0x80800007; valaddr_reg:x3; val_offset:22794*0 + 3*59*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22794*0 + 3*59*FLEN/8, x4, x1, x2)

inst_7599:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x113ff8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e113ff8; op2val:0x80000000;
op3val:0x80999999; valaddr_reg:x3; val_offset:22797*0 + 3*59*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22797*0 + 3*59*FLEN/8, x4, x1, x2)

inst_7600:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x113ff8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e113ff8; op2val:0x80000000;
op3val:0x80a49249; valaddr_reg:x3; val_offset:22800*0 + 3*59*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22800*0 + 3*59*FLEN/8, x4, x1, x2)

inst_7601:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x113ff8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e113ff8; op2val:0x80000000;
op3val:0x80b33333; valaddr_reg:x3; val_offset:22803*0 + 3*59*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22803*0 + 3*59*FLEN/8, x4, x1, x2)

inst_7602:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x113ff8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e113ff8; op2val:0x80000000;
op3val:0x80b6db6d; valaddr_reg:x3; val_offset:22806*0 + 3*59*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22806*0 + 3*59*FLEN/8, x4, x1, x2)

inst_7603:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x113ff8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e113ff8; op2val:0x80000000;
op3val:0x80bbbbbb; valaddr_reg:x3; val_offset:22809*0 + 3*59*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22809*0 + 3*59*FLEN/8, x4, x1, x2)

inst_7604:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x113ff8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e113ff8; op2val:0x80000000;
op3val:0x80c44444; valaddr_reg:x3; val_offset:22812*0 + 3*59*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22812*0 + 3*59*FLEN/8, x4, x1, x2)

inst_7605:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x113ff8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e113ff8; op2val:0x80000000;
op3val:0x80cccccc; valaddr_reg:x3; val_offset:22815*0 + 3*59*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22815*0 + 3*59*FLEN/8, x4, x1, x2)

inst_7606:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x113ff8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e113ff8; op2val:0x80000000;
op3val:0x80db6db6; valaddr_reg:x3; val_offset:22818*0 + 3*59*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22818*0 + 3*59*FLEN/8, x4, x1, x2)

inst_7607:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x113ff8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e113ff8; op2val:0x80000000;
op3val:0x80e66666; valaddr_reg:x3; val_offset:22821*0 + 3*59*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22821*0 + 3*59*FLEN/8, x4, x1, x2)

inst_7608:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x113ff8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e113ff8; op2val:0x80000000;
op3val:0x80edb6db; valaddr_reg:x3; val_offset:22824*0 + 3*59*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22824*0 + 3*59*FLEN/8, x4, x1, x2)

inst_7609:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x113ff8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e113ff8; op2val:0x80000000;
op3val:0x80fffff8; valaddr_reg:x3; val_offset:22827*0 + 3*59*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22827*0 + 3*59*FLEN/8, x4, x1, x2)

inst_7610:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x113ff8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e113ff8; op2val:0x80000000;
op3val:0x80fffffc; valaddr_reg:x3; val_offset:22830*0 + 3*59*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22830*0 + 3*59*FLEN/8, x4, x1, x2)

inst_7611:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x113ff8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e113ff8; op2val:0x80000000;
op3val:0x80fffffe; valaddr_reg:x3; val_offset:22833*0 + 3*59*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22833*0 + 3*59*FLEN/8, x4, x1, x2)

inst_7612:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x113ff8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e113ff8; op2val:0x80000000;
op3val:0x82000000; valaddr_reg:x3; val_offset:22836*0 + 3*59*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22836*0 + 3*59*FLEN/8, x4, x1, x2)

inst_7613:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x113ff8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e113ff8; op2val:0x80000000;
op3val:0x82000001; valaddr_reg:x3; val_offset:22839*0 + 3*59*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22839*0 + 3*59*FLEN/8, x4, x1, x2)

inst_7614:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x113ff8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e113ff8; op2val:0x80000000;
op3val:0x82000003; valaddr_reg:x3; val_offset:22842*0 + 3*59*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22842*0 + 3*59*FLEN/8, x4, x1, x2)

inst_7615:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x113ff8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e113ff8; op2val:0x80000000;
op3val:0x82000007; valaddr_reg:x3; val_offset:22845*0 + 3*59*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22845*0 + 3*59*FLEN/8, x4, x1, x2)

inst_7616:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x113ff8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e113ff8; op2val:0x80000000;
op3val:0x8200000f; valaddr_reg:x3; val_offset:22848*0 + 3*59*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22848*0 + 3*59*FLEN/8, x4, x1, x2)

inst_7617:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x113ff8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e113ff8; op2val:0x80000000;
op3val:0x8200001f; valaddr_reg:x3; val_offset:22851*0 + 3*59*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22851*0 + 3*59*FLEN/8, x4, x1, x2)

inst_7618:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x113ff8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e113ff8; op2val:0x80000000;
op3val:0x8200003f; valaddr_reg:x3; val_offset:22854*0 + 3*59*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22854*0 + 3*59*FLEN/8, x4, x1, x2)

inst_7619:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x113ff8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e113ff8; op2val:0x80000000;
op3val:0x8200007f; valaddr_reg:x3; val_offset:22857*0 + 3*59*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22857*0 + 3*59*FLEN/8, x4, x1, x2)

inst_7620:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x113ff8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e113ff8; op2val:0x80000000;
op3val:0x820000ff; valaddr_reg:x3; val_offset:22860*0 + 3*59*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22860*0 + 3*59*FLEN/8, x4, x1, x2)

inst_7621:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x113ff8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e113ff8; op2val:0x80000000;
op3val:0x820001ff; valaddr_reg:x3; val_offset:22863*0 + 3*59*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22863*0 + 3*59*FLEN/8, x4, x1, x2)

inst_7622:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x113ff8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e113ff8; op2val:0x80000000;
op3val:0x820003ff; valaddr_reg:x3; val_offset:22866*0 + 3*59*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22866*0 + 3*59*FLEN/8, x4, x1, x2)

inst_7623:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x113ff8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e113ff8; op2val:0x80000000;
op3val:0x820007ff; valaddr_reg:x3; val_offset:22869*0 + 3*59*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22869*0 + 3*59*FLEN/8, x4, x1, x2)

inst_7624:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x113ff8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e113ff8; op2val:0x80000000;
op3val:0x82000fff; valaddr_reg:x3; val_offset:22872*0 + 3*59*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22872*0 + 3*59*FLEN/8, x4, x1, x2)

inst_7625:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x113ff8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e113ff8; op2val:0x80000000;
op3val:0x82001fff; valaddr_reg:x3; val_offset:22875*0 + 3*59*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22875*0 + 3*59*FLEN/8, x4, x1, x2)

inst_7626:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x113ff8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e113ff8; op2val:0x80000000;
op3val:0x82003fff; valaddr_reg:x3; val_offset:22878*0 + 3*59*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22878*0 + 3*59*FLEN/8, x4, x1, x2)

inst_7627:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x113ff8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e113ff8; op2val:0x80000000;
op3val:0x82007fff; valaddr_reg:x3; val_offset:22881*0 + 3*59*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22881*0 + 3*59*FLEN/8, x4, x1, x2)

inst_7628:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x113ff8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e113ff8; op2val:0x80000000;
op3val:0x8200ffff; valaddr_reg:x3; val_offset:22884*0 + 3*59*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22884*0 + 3*59*FLEN/8, x4, x1, x2)

inst_7629:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x113ff8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e113ff8; op2val:0x80000000;
op3val:0x8201ffff; valaddr_reg:x3; val_offset:22887*0 + 3*59*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22887*0 + 3*59*FLEN/8, x4, x1, x2)

inst_7630:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x113ff8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e113ff8; op2val:0x80000000;
op3val:0x8203ffff; valaddr_reg:x3; val_offset:22890*0 + 3*59*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22890*0 + 3*59*FLEN/8, x4, x1, x2)

inst_7631:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x113ff8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e113ff8; op2val:0x80000000;
op3val:0x8207ffff; valaddr_reg:x3; val_offset:22893*0 + 3*59*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22893*0 + 3*59*FLEN/8, x4, x1, x2)

inst_7632:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x113ff8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e113ff8; op2val:0x80000000;
op3val:0x820fffff; valaddr_reg:x3; val_offset:22896*0 + 3*59*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22896*0 + 3*59*FLEN/8, x4, x1, x2)

inst_7633:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x113ff8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e113ff8; op2val:0x80000000;
op3val:0x821fffff; valaddr_reg:x3; val_offset:22899*0 + 3*59*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22899*0 + 3*59*FLEN/8, x4, x1, x2)

inst_7634:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x113ff8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e113ff8; op2val:0x80000000;
op3val:0x823fffff; valaddr_reg:x3; val_offset:22902*0 + 3*59*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22902*0 + 3*59*FLEN/8, x4, x1, x2)

inst_7635:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x113ff8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e113ff8; op2val:0x80000000;
op3val:0x82400000; valaddr_reg:x3; val_offset:22905*0 + 3*59*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22905*0 + 3*59*FLEN/8, x4, x1, x2)

inst_7636:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x113ff8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e113ff8; op2val:0x80000000;
op3val:0x82600000; valaddr_reg:x3; val_offset:22908*0 + 3*59*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22908*0 + 3*59*FLEN/8, x4, x1, x2)

inst_7637:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x113ff8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e113ff8; op2val:0x80000000;
op3val:0x82700000; valaddr_reg:x3; val_offset:22911*0 + 3*59*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22911*0 + 3*59*FLEN/8, x4, x1, x2)

inst_7638:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x113ff8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e113ff8; op2val:0x80000000;
op3val:0x82780000; valaddr_reg:x3; val_offset:22914*0 + 3*59*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22914*0 + 3*59*FLEN/8, x4, x1, x2)

inst_7639:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x113ff8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e113ff8; op2val:0x80000000;
op3val:0x827c0000; valaddr_reg:x3; val_offset:22917*0 + 3*59*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22917*0 + 3*59*FLEN/8, x4, x1, x2)

inst_7640:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x113ff8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e113ff8; op2val:0x80000000;
op3val:0x827e0000; valaddr_reg:x3; val_offset:22920*0 + 3*59*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22920*0 + 3*59*FLEN/8, x4, x1, x2)

inst_7641:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x113ff8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e113ff8; op2val:0x80000000;
op3val:0x827f0000; valaddr_reg:x3; val_offset:22923*0 + 3*59*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22923*0 + 3*59*FLEN/8, x4, x1, x2)

inst_7642:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x113ff8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e113ff8; op2val:0x80000000;
op3val:0x827f8000; valaddr_reg:x3; val_offset:22926*0 + 3*59*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22926*0 + 3*59*FLEN/8, x4, x1, x2)

inst_7643:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x113ff8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e113ff8; op2val:0x80000000;
op3val:0x827fc000; valaddr_reg:x3; val_offset:22929*0 + 3*59*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22929*0 + 3*59*FLEN/8, x4, x1, x2)

inst_7644:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x113ff8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e113ff8; op2val:0x80000000;
op3val:0x827fe000; valaddr_reg:x3; val_offset:22932*0 + 3*59*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22932*0 + 3*59*FLEN/8, x4, x1, x2)

inst_7645:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x113ff8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e113ff8; op2val:0x80000000;
op3val:0x827ff000; valaddr_reg:x3; val_offset:22935*0 + 3*59*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22935*0 + 3*59*FLEN/8, x4, x1, x2)

inst_7646:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x113ff8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e113ff8; op2val:0x80000000;
op3val:0x827ff800; valaddr_reg:x3; val_offset:22938*0 + 3*59*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22938*0 + 3*59*FLEN/8, x4, x1, x2)

inst_7647:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x113ff8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e113ff8; op2val:0x80000000;
op3val:0x827ffc00; valaddr_reg:x3; val_offset:22941*0 + 3*59*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22941*0 + 3*59*FLEN/8, x4, x1, x2)

inst_7648:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x113ff8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e113ff8; op2val:0x80000000;
op3val:0x827ffe00; valaddr_reg:x3; val_offset:22944*0 + 3*59*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22944*0 + 3*59*FLEN/8, x4, x1, x2)

inst_7649:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x113ff8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e113ff8; op2val:0x80000000;
op3val:0x827fff00; valaddr_reg:x3; val_offset:22947*0 + 3*59*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22947*0 + 3*59*FLEN/8, x4, x1, x2)

inst_7650:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x113ff8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e113ff8; op2val:0x80000000;
op3val:0x827fff80; valaddr_reg:x3; val_offset:22950*0 + 3*59*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22950*0 + 3*59*FLEN/8, x4, x1, x2)

inst_7651:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x113ff8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e113ff8; op2val:0x80000000;
op3val:0x827fffc0; valaddr_reg:x3; val_offset:22953*0 + 3*59*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22953*0 + 3*59*FLEN/8, x4, x1, x2)

inst_7652:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x113ff8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e113ff8; op2val:0x80000000;
op3val:0x827fffe0; valaddr_reg:x3; val_offset:22956*0 + 3*59*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22956*0 + 3*59*FLEN/8, x4, x1, x2)

inst_7653:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x113ff8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e113ff8; op2val:0x80000000;
op3val:0x827ffff0; valaddr_reg:x3; val_offset:22959*0 + 3*59*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22959*0 + 3*59*FLEN/8, x4, x1, x2)

inst_7654:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x113ff8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e113ff8; op2val:0x80000000;
op3val:0x827ffff8; valaddr_reg:x3; val_offset:22962*0 + 3*59*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22962*0 + 3*59*FLEN/8, x4, x1, x2)

inst_7655:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x113ff8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e113ff8; op2val:0x80000000;
op3val:0x827ffffc; valaddr_reg:x3; val_offset:22965*0 + 3*59*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22965*0 + 3*59*FLEN/8, x4, x1, x2)

inst_7656:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x113ff8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e113ff8; op2val:0x80000000;
op3val:0x827ffffe; valaddr_reg:x3; val_offset:22968*0 + 3*59*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22968*0 + 3*59*FLEN/8, x4, x1, x2)

inst_7657:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x113ff8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e113ff8; op2val:0x80000000;
op3val:0x827fffff; valaddr_reg:x3; val_offset:22971*0 + 3*59*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22971*0 + 3*59*FLEN/8, x4, x1, x2)

inst_7658:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1173d9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1173d9; op2val:0x80000000;
op3val:0x80000001; valaddr_reg:x3; val_offset:22974*0 + 3*59*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22974*0 + 3*59*FLEN/8, x4, x1, x2)

inst_7659:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1173d9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1173d9; op2val:0x80000000;
op3val:0x80000003; valaddr_reg:x3; val_offset:22977*0 + 3*59*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22977*0 + 3*59*FLEN/8, x4, x1, x2)

inst_7660:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1173d9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1173d9; op2val:0x80000000;
op3val:0x80000007; valaddr_reg:x3; val_offset:22980*0 + 3*59*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22980*0 + 3*59*FLEN/8, x4, x1, x2)

inst_7661:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1173d9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1173d9; op2val:0x80000000;
op3val:0x80199999; valaddr_reg:x3; val_offset:22983*0 + 3*59*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22983*0 + 3*59*FLEN/8, x4, x1, x2)

inst_7662:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1173d9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1173d9; op2val:0x80000000;
op3val:0x80249249; valaddr_reg:x3; val_offset:22986*0 + 3*59*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22986*0 + 3*59*FLEN/8, x4, x1, x2)

inst_7663:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1173d9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1173d9; op2val:0x80000000;
op3val:0x80333333; valaddr_reg:x3; val_offset:22989*0 + 3*59*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22989*0 + 3*59*FLEN/8, x4, x1, x2)

inst_7664:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1173d9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1173d9; op2val:0x80000000;
op3val:0x8036db6d; valaddr_reg:x3; val_offset:22992*0 + 3*59*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22992*0 + 3*59*FLEN/8, x4, x1, x2)

inst_7665:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1173d9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1173d9; op2val:0x80000000;
op3val:0x803bbbbb; valaddr_reg:x3; val_offset:22995*0 + 3*59*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22995*0 + 3*59*FLEN/8, x4, x1, x2)

inst_7666:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1173d9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1173d9; op2val:0x80000000;
op3val:0x80444444; valaddr_reg:x3; val_offset:22998*0 + 3*59*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22998*0 + 3*59*FLEN/8, x4, x1, x2)

inst_7667:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1173d9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1173d9; op2val:0x80000000;
op3val:0x804ccccc; valaddr_reg:x3; val_offset:23001*0 + 3*59*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23001*0 + 3*59*FLEN/8, x4, x1, x2)

inst_7668:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1173d9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1173d9; op2val:0x80000000;
op3val:0x805b6db6; valaddr_reg:x3; val_offset:23004*0 + 3*59*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23004*0 + 3*59*FLEN/8, x4, x1, x2)

inst_7669:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1173d9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1173d9; op2val:0x80000000;
op3val:0x80666666; valaddr_reg:x3; val_offset:23007*0 + 3*59*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23007*0 + 3*59*FLEN/8, x4, x1, x2)

inst_7670:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1173d9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1173d9; op2val:0x80000000;
op3val:0x806db6db; valaddr_reg:x3; val_offset:23010*0 + 3*59*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23010*0 + 3*59*FLEN/8, x4, x1, x2)

inst_7671:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1173d9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1173d9; op2val:0x80000000;
op3val:0x807ffff8; valaddr_reg:x3; val_offset:23013*0 + 3*59*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23013*0 + 3*59*FLEN/8, x4, x1, x2)

inst_7672:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1173d9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1173d9; op2val:0x80000000;
op3val:0x807ffffc; valaddr_reg:x3; val_offset:23016*0 + 3*59*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23016*0 + 3*59*FLEN/8, x4, x1, x2)

inst_7673:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1173d9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1173d9; op2val:0x80000000;
op3val:0x807ffffe; valaddr_reg:x3; val_offset:23019*0 + 3*59*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23019*0 + 3*59*FLEN/8, x4, x1, x2)

inst_7674:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1173d9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1173d9; op2val:0x80000000;
op3val:0x90000000; valaddr_reg:x3; val_offset:23022*0 + 3*59*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23022*0 + 3*59*FLEN/8, x4, x1, x2)

inst_7675:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1173d9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1173d9; op2val:0x80000000;
op3val:0x90000001; valaddr_reg:x3; val_offset:23025*0 + 3*59*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23025*0 + 3*59*FLEN/8, x4, x1, x2)

inst_7676:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1173d9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1173d9; op2val:0x80000000;
op3val:0x90000003; valaddr_reg:x3; val_offset:23028*0 + 3*59*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23028*0 + 3*59*FLEN/8, x4, x1, x2)

inst_7677:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1173d9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1173d9; op2val:0x80000000;
op3val:0x90000007; valaddr_reg:x3; val_offset:23031*0 + 3*59*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23031*0 + 3*59*FLEN/8, x4, x1, x2)

inst_7678:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1173d9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1173d9; op2val:0x80000000;
op3val:0x9000000f; valaddr_reg:x3; val_offset:23034*0 + 3*59*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23034*0 + 3*59*FLEN/8, x4, x1, x2)

inst_7679:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1173d9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1173d9; op2val:0x80000000;
op3val:0x9000001f; valaddr_reg:x3; val_offset:23037*0 + 3*59*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23037*0 + 3*59*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2115029161,32,FLEN)
NAN_BOXED(14832344,32,FLEN)
NAN_BOXED(889454591,32,FLEN)
NAN_BOXED(2115029161,32,FLEN)
NAN_BOXED(14832344,32,FLEN)
NAN_BOXED(889716735,32,FLEN)
NAN_BOXED(2115029161,32,FLEN)
NAN_BOXED(14832344,32,FLEN)
NAN_BOXED(890241023,32,FLEN)
NAN_BOXED(2115029161,32,FLEN)
NAN_BOXED(14832344,32,FLEN)
NAN_BOXED(891289599,32,FLEN)
NAN_BOXED(2115029161,32,FLEN)
NAN_BOXED(14832344,32,FLEN)
NAN_BOXED(893386751,32,FLEN)
NAN_BOXED(2115029161,32,FLEN)
NAN_BOXED(14832344,32,FLEN)
NAN_BOXED(893386752,32,FLEN)
NAN_BOXED(2115029161,32,FLEN)
NAN_BOXED(14832344,32,FLEN)
NAN_BOXED(895483904,32,FLEN)
NAN_BOXED(2115029161,32,FLEN)
NAN_BOXED(14832344,32,FLEN)
NAN_BOXED(896532480,32,FLEN)
NAN_BOXED(2115029161,32,FLEN)
NAN_BOXED(14832344,32,FLEN)
NAN_BOXED(897056768,32,FLEN)
NAN_BOXED(2115029161,32,FLEN)
NAN_BOXED(14832344,32,FLEN)
NAN_BOXED(897318912,32,FLEN)
NAN_BOXED(2115029161,32,FLEN)
NAN_BOXED(14832344,32,FLEN)
NAN_BOXED(897449984,32,FLEN)
NAN_BOXED(2115029161,32,FLEN)
NAN_BOXED(14832344,32,FLEN)
NAN_BOXED(897515520,32,FLEN)
NAN_BOXED(2115029161,32,FLEN)
NAN_BOXED(14832344,32,FLEN)
NAN_BOXED(897548288,32,FLEN)
NAN_BOXED(2115029161,32,FLEN)
NAN_BOXED(14832344,32,FLEN)
NAN_BOXED(897564672,32,FLEN)
NAN_BOXED(2115029161,32,FLEN)
NAN_BOXED(14832344,32,FLEN)
NAN_BOXED(897572864,32,FLEN)
NAN_BOXED(2115029161,32,FLEN)
NAN_BOXED(14832344,32,FLEN)
NAN_BOXED(897576960,32,FLEN)
NAN_BOXED(2115029161,32,FLEN)
NAN_BOXED(14832344,32,FLEN)
NAN_BOXED(897579008,32,FLEN)
NAN_BOXED(2115029161,32,FLEN)
NAN_BOXED(14832344,32,FLEN)
NAN_BOXED(897580032,32,FLEN)
NAN_BOXED(2115029161,32,FLEN)
NAN_BOXED(14832344,32,FLEN)
NAN_BOXED(897580544,32,FLEN)
NAN_BOXED(2115029161,32,FLEN)
NAN_BOXED(14832344,32,FLEN)
NAN_BOXED(897580800,32,FLEN)
NAN_BOXED(2115029161,32,FLEN)
NAN_BOXED(14832344,32,FLEN)
NAN_BOXED(897580928,32,FLEN)
NAN_BOXED(2115029161,32,FLEN)
NAN_BOXED(14832344,32,FLEN)
NAN_BOXED(897580992,32,FLEN)
NAN_BOXED(2115029161,32,FLEN)
NAN_BOXED(14832344,32,FLEN)
NAN_BOXED(897581024,32,FLEN)
NAN_BOXED(2115029161,32,FLEN)
NAN_BOXED(14832344,32,FLEN)
NAN_BOXED(897581040,32,FLEN)
NAN_BOXED(2115029161,32,FLEN)
NAN_BOXED(14832344,32,FLEN)
NAN_BOXED(897581048,32,FLEN)
NAN_BOXED(2115029161,32,FLEN)
NAN_BOXED(14832344,32,FLEN)
NAN_BOXED(897581052,32,FLEN)
NAN_BOXED(2115029161,32,FLEN)
NAN_BOXED(14832344,32,FLEN)
NAN_BOXED(897581054,32,FLEN)
NAN_BOXED(2115029161,32,FLEN)
NAN_BOXED(14832344,32,FLEN)
NAN_BOXED(897581055,32,FLEN)
NAN_BOXED(2115029161,32,FLEN)
NAN_BOXED(14832344,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2115029161,32,FLEN)
NAN_BOXED(14832344,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2115029161,32,FLEN)
NAN_BOXED(14832344,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2115029161,32,FLEN)
NAN_BOXED(14832344,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2115029161,32,FLEN)
NAN_BOXED(14832344,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2115029161,32,FLEN)
NAN_BOXED(14832344,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2115029161,32,FLEN)
NAN_BOXED(14832344,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2115029161,32,FLEN)
NAN_BOXED(14832344,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2115029161,32,FLEN)
NAN_BOXED(14832344,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2115029161,32,FLEN)
NAN_BOXED(14832344,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2115029161,32,FLEN)
NAN_BOXED(14832344,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2115029161,32,FLEN)
NAN_BOXED(14832344,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2115029161,32,FLEN)
NAN_BOXED(14832344,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2115029161,32,FLEN)
NAN_BOXED(14832344,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2115029161,32,FLEN)
NAN_BOXED(14832344,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2115029161,32,FLEN)
NAN_BOXED(14832344,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2115059704,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872257,32,FLEN)
NAN_BOXED(2115059704,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872259,32,FLEN)
NAN_BOXED(2115059704,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872263,32,FLEN)
NAN_BOXED(2115059704,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2157549977,32,FLEN)
NAN_BOXED(2115059704,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2158269001,32,FLEN)
NAN_BOXED(2115059704,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2159227699,32,FLEN)
NAN_BOXED(2115059704,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2159467373,32,FLEN)
NAN_BOXED(2115059704,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2159786939,32,FLEN)
NAN_BOXED(2115059704,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2160346180,32,FLEN)
NAN_BOXED(2115059704,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2160905420,32,FLEN)
NAN_BOXED(2115059704,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2161864118,32,FLEN)
NAN_BOXED(2115059704,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2162583142,32,FLEN)
NAN_BOXED(2115059704,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2163062491,32,FLEN)
NAN_BOXED(2115059704,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260856,32,FLEN)
NAN_BOXED(2115059704,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260860,32,FLEN)
NAN_BOXED(2115059704,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260862,32,FLEN)
NAN_BOXED(2115059704,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181038080,32,FLEN)
NAN_BOXED(2115059704,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181038081,32,FLEN)
NAN_BOXED(2115059704,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181038083,32,FLEN)
NAN_BOXED(2115059704,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181038087,32,FLEN)
NAN_BOXED(2115059704,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181038095,32,FLEN)
NAN_BOXED(2115059704,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181038111,32,FLEN)
NAN_BOXED(2115059704,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181038143,32,FLEN)
NAN_BOXED(2115059704,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181038207,32,FLEN)
NAN_BOXED(2115059704,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181038335,32,FLEN)
NAN_BOXED(2115059704,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181038591,32,FLEN)
NAN_BOXED(2115059704,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181039103,32,FLEN)
NAN_BOXED(2115059704,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181040127,32,FLEN)
NAN_BOXED(2115059704,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181042175,32,FLEN)
NAN_BOXED(2115059704,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181046271,32,FLEN)
NAN_BOXED(2115059704,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181054463,32,FLEN)
NAN_BOXED(2115059704,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181070847,32,FLEN)
NAN_BOXED(2115059704,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181103615,32,FLEN)
NAN_BOXED(2115059704,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181169151,32,FLEN)
NAN_BOXED(2115059704,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181300223,32,FLEN)
NAN_BOXED(2115059704,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181562367,32,FLEN)
NAN_BOXED(2115059704,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2182086655,32,FLEN)
NAN_BOXED(2115059704,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2183135231,32,FLEN)
NAN_BOXED(2115059704,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2185232383,32,FLEN)
NAN_BOXED(2115059704,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2185232384,32,FLEN)
NAN_BOXED(2115059704,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2187329536,32,FLEN)
NAN_BOXED(2115059704,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2188378112,32,FLEN)
NAN_BOXED(2115059704,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2188902400,32,FLEN)
NAN_BOXED(2115059704,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189164544,32,FLEN)
NAN_BOXED(2115059704,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189295616,32,FLEN)
NAN_BOXED(2115059704,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189361152,32,FLEN)
NAN_BOXED(2115059704,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189393920,32,FLEN)
NAN_BOXED(2115059704,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189410304,32,FLEN)
NAN_BOXED(2115059704,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189418496,32,FLEN)
NAN_BOXED(2115059704,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189422592,32,FLEN)
NAN_BOXED(2115059704,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189424640,32,FLEN)
NAN_BOXED(2115059704,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189425664,32,FLEN)
NAN_BOXED(2115059704,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189426176,32,FLEN)
NAN_BOXED(2115059704,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189426432,32,FLEN)
NAN_BOXED(2115059704,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189426560,32,FLEN)
NAN_BOXED(2115059704,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189426624,32,FLEN)
NAN_BOXED(2115059704,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189426656,32,FLEN)
NAN_BOXED(2115059704,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189426672,32,FLEN)
NAN_BOXED(2115059704,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189426680,32,FLEN)
NAN_BOXED(2115059704,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189426684,32,FLEN)
NAN_BOXED(2115059704,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189426686,32,FLEN)
NAN_BOXED(2115059704,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189426687,32,FLEN)
NAN_BOXED(2115072985,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2115072985,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483651,32,FLEN)
NAN_BOXED(2115072985,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483655,32,FLEN)
NAN_BOXED(2115072985,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149161369,32,FLEN)
NAN_BOXED(2115072985,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149880393,32,FLEN)
NAN_BOXED(2115072985,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2150839091,32,FLEN)
NAN_BOXED(2115072985,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151078765,32,FLEN)
NAN_BOXED(2115072985,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151398331,32,FLEN)
NAN_BOXED(2115072985,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151957572,32,FLEN)
NAN_BOXED(2115072985,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2152516812,32,FLEN)
NAN_BOXED(2115072985,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2153475510,32,FLEN)
NAN_BOXED(2115072985,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154194534,32,FLEN)
NAN_BOXED(2115072985,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154673883,32,FLEN)
NAN_BOXED(2115072985,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872248,32,FLEN)
NAN_BOXED(2115072985,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872252,32,FLEN)
NAN_BOXED(2115072985,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2115072985,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2415919104,32,FLEN)
NAN_BOXED(2115072985,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2415919105,32,FLEN)
NAN_BOXED(2115072985,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2415919107,32,FLEN)
NAN_BOXED(2115072985,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2415919111,32,FLEN)
NAN_BOXED(2115072985,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2415919119,32,FLEN)
NAN_BOXED(2115072985,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2415919135,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
