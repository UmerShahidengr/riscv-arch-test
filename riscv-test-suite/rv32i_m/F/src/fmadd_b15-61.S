
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:17:59 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_7680:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1173d9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1173d9; op2val:0x80000000;
op3val:0x9000003f; valaddr_reg:x3; val_offset:23040*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23040*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7681:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1173d9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1173d9; op2val:0x80000000;
op3val:0x9000007f; valaddr_reg:x3; val_offset:23043*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23043*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7682:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1173d9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1173d9; op2val:0x80000000;
op3val:0x900000ff; valaddr_reg:x3; val_offset:23046*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23046*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7683:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1173d9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1173d9; op2val:0x80000000;
op3val:0x900001ff; valaddr_reg:x3; val_offset:23049*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23049*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7684:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1173d9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1173d9; op2val:0x80000000;
op3val:0x900003ff; valaddr_reg:x3; val_offset:23052*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23052*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7685:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1173d9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1173d9; op2val:0x80000000;
op3val:0x900007ff; valaddr_reg:x3; val_offset:23055*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23055*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7686:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1173d9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1173d9; op2val:0x80000000;
op3val:0x90000fff; valaddr_reg:x3; val_offset:23058*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23058*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7687:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1173d9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1173d9; op2val:0x80000000;
op3val:0x90001fff; valaddr_reg:x3; val_offset:23061*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23061*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7688:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1173d9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1173d9; op2val:0x80000000;
op3val:0x90003fff; valaddr_reg:x3; val_offset:23064*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23064*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7689:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1173d9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1173d9; op2val:0x80000000;
op3val:0x90007fff; valaddr_reg:x3; val_offset:23067*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23067*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7690:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1173d9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1173d9; op2val:0x80000000;
op3val:0x9000ffff; valaddr_reg:x3; val_offset:23070*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23070*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7691:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1173d9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1173d9; op2val:0x80000000;
op3val:0x9001ffff; valaddr_reg:x3; val_offset:23073*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23073*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7692:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1173d9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1173d9; op2val:0x80000000;
op3val:0x9003ffff; valaddr_reg:x3; val_offset:23076*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23076*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7693:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1173d9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1173d9; op2val:0x80000000;
op3val:0x9007ffff; valaddr_reg:x3; val_offset:23079*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23079*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7694:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1173d9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1173d9; op2val:0x80000000;
op3val:0x900fffff; valaddr_reg:x3; val_offset:23082*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23082*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7695:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1173d9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1173d9; op2val:0x80000000;
op3val:0x901fffff; valaddr_reg:x3; val_offset:23085*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23085*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7696:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1173d9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1173d9; op2val:0x80000000;
op3val:0x903fffff; valaddr_reg:x3; val_offset:23088*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23088*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7697:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1173d9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1173d9; op2val:0x80000000;
op3val:0x90400000; valaddr_reg:x3; val_offset:23091*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23091*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7698:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1173d9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1173d9; op2val:0x80000000;
op3val:0x90600000; valaddr_reg:x3; val_offset:23094*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23094*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7699:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1173d9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1173d9; op2val:0x80000000;
op3val:0x90700000; valaddr_reg:x3; val_offset:23097*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23097*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7700:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1173d9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1173d9; op2val:0x80000000;
op3val:0x90780000; valaddr_reg:x3; val_offset:23100*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23100*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7701:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1173d9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1173d9; op2val:0x80000000;
op3val:0x907c0000; valaddr_reg:x3; val_offset:23103*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23103*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7702:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1173d9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1173d9; op2val:0x80000000;
op3val:0x907e0000; valaddr_reg:x3; val_offset:23106*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23106*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7703:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1173d9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1173d9; op2val:0x80000000;
op3val:0x907f0000; valaddr_reg:x3; val_offset:23109*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23109*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7704:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1173d9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1173d9; op2val:0x80000000;
op3val:0x907f8000; valaddr_reg:x3; val_offset:23112*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23112*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7705:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1173d9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1173d9; op2val:0x80000000;
op3val:0x907fc000; valaddr_reg:x3; val_offset:23115*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23115*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7706:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1173d9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1173d9; op2val:0x80000000;
op3val:0x907fe000; valaddr_reg:x3; val_offset:23118*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23118*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7707:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1173d9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1173d9; op2val:0x80000000;
op3val:0x907ff000; valaddr_reg:x3; val_offset:23121*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23121*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7708:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1173d9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1173d9; op2val:0x80000000;
op3val:0x907ff800; valaddr_reg:x3; val_offset:23124*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23124*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7709:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1173d9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1173d9; op2val:0x80000000;
op3val:0x907ffc00; valaddr_reg:x3; val_offset:23127*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23127*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7710:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1173d9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1173d9; op2val:0x80000000;
op3val:0x907ffe00; valaddr_reg:x3; val_offset:23130*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23130*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7711:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1173d9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1173d9; op2val:0x80000000;
op3val:0x907fff00; valaddr_reg:x3; val_offset:23133*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23133*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7712:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1173d9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1173d9; op2val:0x80000000;
op3val:0x907fff80; valaddr_reg:x3; val_offset:23136*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23136*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7713:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1173d9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1173d9; op2val:0x80000000;
op3val:0x907fffc0; valaddr_reg:x3; val_offset:23139*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23139*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7714:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1173d9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1173d9; op2val:0x80000000;
op3val:0x907fffe0; valaddr_reg:x3; val_offset:23142*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23142*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7715:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1173d9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1173d9; op2val:0x80000000;
op3val:0x907ffff0; valaddr_reg:x3; val_offset:23145*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23145*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7716:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1173d9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1173d9; op2val:0x80000000;
op3val:0x907ffff8; valaddr_reg:x3; val_offset:23148*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23148*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7717:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1173d9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1173d9; op2val:0x80000000;
op3val:0x907ffffc; valaddr_reg:x3; val_offset:23151*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23151*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7718:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1173d9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1173d9; op2val:0x80000000;
op3val:0x907ffffe; valaddr_reg:x3; val_offset:23154*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23154*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7719:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1173d9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1173d9; op2val:0x80000000;
op3val:0x907fffff; valaddr_reg:x3; val_offset:23157*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23157*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7720:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x123600 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x601d52 and fs3 == 0 and fe3 == 0x59 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e123600; op2val:0xe01d52;
op3val:0x2c800000; valaddr_reg:x3; val_offset:23160*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23160*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7721:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x123600 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x601d52 and fs3 == 0 and fe3 == 0x59 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e123600; op2val:0xe01d52;
op3val:0x2c800001; valaddr_reg:x3; val_offset:23163*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23163*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7722:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x123600 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x601d52 and fs3 == 0 and fe3 == 0x59 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e123600; op2val:0xe01d52;
op3val:0x2c800003; valaddr_reg:x3; val_offset:23166*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23166*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7723:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x123600 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x601d52 and fs3 == 0 and fe3 == 0x59 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e123600; op2val:0xe01d52;
op3val:0x2c800007; valaddr_reg:x3; val_offset:23169*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23169*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7724:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x123600 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x601d52 and fs3 == 0 and fe3 == 0x59 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e123600; op2val:0xe01d52;
op3val:0x2c80000f; valaddr_reg:x3; val_offset:23172*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23172*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7725:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x123600 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x601d52 and fs3 == 0 and fe3 == 0x59 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e123600; op2val:0xe01d52;
op3val:0x2c80001f; valaddr_reg:x3; val_offset:23175*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23175*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7726:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x123600 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x601d52 and fs3 == 0 and fe3 == 0x59 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e123600; op2val:0xe01d52;
op3val:0x2c80003f; valaddr_reg:x3; val_offset:23178*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23178*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7727:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x123600 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x601d52 and fs3 == 0 and fe3 == 0x59 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e123600; op2val:0xe01d52;
op3val:0x2c80007f; valaddr_reg:x3; val_offset:23181*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23181*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7728:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x123600 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x601d52 and fs3 == 0 and fe3 == 0x59 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e123600; op2val:0xe01d52;
op3val:0x2c8000ff; valaddr_reg:x3; val_offset:23184*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23184*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7729:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x123600 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x601d52 and fs3 == 0 and fe3 == 0x59 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e123600; op2val:0xe01d52;
op3val:0x2c8001ff; valaddr_reg:x3; val_offset:23187*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23187*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7730:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x123600 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x601d52 and fs3 == 0 and fe3 == 0x59 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e123600; op2val:0xe01d52;
op3val:0x2c8003ff; valaddr_reg:x3; val_offset:23190*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23190*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7731:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x123600 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x601d52 and fs3 == 0 and fe3 == 0x59 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e123600; op2val:0xe01d52;
op3val:0x2c8007ff; valaddr_reg:x3; val_offset:23193*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23193*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7732:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x123600 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x601d52 and fs3 == 0 and fe3 == 0x59 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e123600; op2val:0xe01d52;
op3val:0x2c800fff; valaddr_reg:x3; val_offset:23196*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23196*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7733:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x123600 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x601d52 and fs3 == 0 and fe3 == 0x59 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e123600; op2val:0xe01d52;
op3val:0x2c801fff; valaddr_reg:x3; val_offset:23199*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23199*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7734:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x123600 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x601d52 and fs3 == 0 and fe3 == 0x59 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e123600; op2val:0xe01d52;
op3val:0x2c803fff; valaddr_reg:x3; val_offset:23202*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23202*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7735:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x123600 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x601d52 and fs3 == 0 and fe3 == 0x59 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e123600; op2val:0xe01d52;
op3val:0x2c807fff; valaddr_reg:x3; val_offset:23205*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23205*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7736:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x123600 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x601d52 and fs3 == 0 and fe3 == 0x59 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e123600; op2val:0xe01d52;
op3val:0x2c80ffff; valaddr_reg:x3; val_offset:23208*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23208*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7737:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x123600 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x601d52 and fs3 == 0 and fe3 == 0x59 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e123600; op2val:0xe01d52;
op3val:0x2c81ffff; valaddr_reg:x3; val_offset:23211*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23211*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7738:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x123600 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x601d52 and fs3 == 0 and fe3 == 0x59 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e123600; op2val:0xe01d52;
op3val:0x2c83ffff; valaddr_reg:x3; val_offset:23214*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23214*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7739:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x123600 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x601d52 and fs3 == 0 and fe3 == 0x59 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e123600; op2val:0xe01d52;
op3val:0x2c87ffff; valaddr_reg:x3; val_offset:23217*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23217*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7740:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x123600 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x601d52 and fs3 == 0 and fe3 == 0x59 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e123600; op2val:0xe01d52;
op3val:0x2c8fffff; valaddr_reg:x3; val_offset:23220*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23220*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7741:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x123600 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x601d52 and fs3 == 0 and fe3 == 0x59 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e123600; op2val:0xe01d52;
op3val:0x2c9fffff; valaddr_reg:x3; val_offset:23223*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23223*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7742:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x123600 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x601d52 and fs3 == 0 and fe3 == 0x59 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e123600; op2val:0xe01d52;
op3val:0x2cbfffff; valaddr_reg:x3; val_offset:23226*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23226*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7743:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x123600 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x601d52 and fs3 == 0 and fe3 == 0x59 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e123600; op2val:0xe01d52;
op3val:0x2cc00000; valaddr_reg:x3; val_offset:23229*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23229*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7744:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x123600 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x601d52 and fs3 == 0 and fe3 == 0x59 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e123600; op2val:0xe01d52;
op3val:0x2ce00000; valaddr_reg:x3; val_offset:23232*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23232*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7745:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x123600 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x601d52 and fs3 == 0 and fe3 == 0x59 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e123600; op2val:0xe01d52;
op3val:0x2cf00000; valaddr_reg:x3; val_offset:23235*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23235*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7746:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x123600 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x601d52 and fs3 == 0 and fe3 == 0x59 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e123600; op2val:0xe01d52;
op3val:0x2cf80000; valaddr_reg:x3; val_offset:23238*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23238*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7747:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x123600 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x601d52 and fs3 == 0 and fe3 == 0x59 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e123600; op2val:0xe01d52;
op3val:0x2cfc0000; valaddr_reg:x3; val_offset:23241*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23241*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7748:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x123600 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x601d52 and fs3 == 0 and fe3 == 0x59 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e123600; op2val:0xe01d52;
op3val:0x2cfe0000; valaddr_reg:x3; val_offset:23244*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23244*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7749:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x123600 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x601d52 and fs3 == 0 and fe3 == 0x59 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e123600; op2val:0xe01d52;
op3val:0x2cff0000; valaddr_reg:x3; val_offset:23247*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23247*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7750:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x123600 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x601d52 and fs3 == 0 and fe3 == 0x59 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e123600; op2val:0xe01d52;
op3val:0x2cff8000; valaddr_reg:x3; val_offset:23250*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23250*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7751:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x123600 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x601d52 and fs3 == 0 and fe3 == 0x59 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e123600; op2val:0xe01d52;
op3val:0x2cffc000; valaddr_reg:x3; val_offset:23253*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23253*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7752:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x123600 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x601d52 and fs3 == 0 and fe3 == 0x59 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e123600; op2val:0xe01d52;
op3val:0x2cffe000; valaddr_reg:x3; val_offset:23256*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23256*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7753:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x123600 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x601d52 and fs3 == 0 and fe3 == 0x59 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e123600; op2val:0xe01d52;
op3val:0x2cfff000; valaddr_reg:x3; val_offset:23259*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23259*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7754:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x123600 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x601d52 and fs3 == 0 and fe3 == 0x59 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e123600; op2val:0xe01d52;
op3val:0x2cfff800; valaddr_reg:x3; val_offset:23262*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23262*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7755:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x123600 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x601d52 and fs3 == 0 and fe3 == 0x59 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e123600; op2val:0xe01d52;
op3val:0x2cfffc00; valaddr_reg:x3; val_offset:23265*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23265*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7756:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x123600 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x601d52 and fs3 == 0 and fe3 == 0x59 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e123600; op2val:0xe01d52;
op3val:0x2cfffe00; valaddr_reg:x3; val_offset:23268*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23268*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7757:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x123600 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x601d52 and fs3 == 0 and fe3 == 0x59 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e123600; op2val:0xe01d52;
op3val:0x2cffff00; valaddr_reg:x3; val_offset:23271*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23271*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7758:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x123600 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x601d52 and fs3 == 0 and fe3 == 0x59 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e123600; op2val:0xe01d52;
op3val:0x2cffff80; valaddr_reg:x3; val_offset:23274*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23274*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7759:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x123600 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x601d52 and fs3 == 0 and fe3 == 0x59 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e123600; op2val:0xe01d52;
op3val:0x2cffffc0; valaddr_reg:x3; val_offset:23277*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23277*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7760:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x123600 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x601d52 and fs3 == 0 and fe3 == 0x59 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e123600; op2val:0xe01d52;
op3val:0x2cffffe0; valaddr_reg:x3; val_offset:23280*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23280*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7761:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x123600 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x601d52 and fs3 == 0 and fe3 == 0x59 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e123600; op2val:0xe01d52;
op3val:0x2cfffff0; valaddr_reg:x3; val_offset:23283*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23283*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7762:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x123600 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x601d52 and fs3 == 0 and fe3 == 0x59 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e123600; op2val:0xe01d52;
op3val:0x2cfffff8; valaddr_reg:x3; val_offset:23286*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23286*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7763:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x123600 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x601d52 and fs3 == 0 and fe3 == 0x59 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e123600; op2val:0xe01d52;
op3val:0x2cfffffc; valaddr_reg:x3; val_offset:23289*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23289*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7764:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x123600 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x601d52 and fs3 == 0 and fe3 == 0x59 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e123600; op2val:0xe01d52;
op3val:0x2cfffffe; valaddr_reg:x3; val_offset:23292*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23292*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7765:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x123600 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x601d52 and fs3 == 0 and fe3 == 0x59 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e123600; op2val:0xe01d52;
op3val:0x2cffffff; valaddr_reg:x3; val_offset:23295*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23295*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7766:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x123600 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x601d52 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e123600; op2val:0xe01d52;
op3val:0x3f800001; valaddr_reg:x3; val_offset:23298*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23298*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7767:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x123600 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x601d52 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e123600; op2val:0xe01d52;
op3val:0x3f800003; valaddr_reg:x3; val_offset:23301*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23301*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7768:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x123600 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x601d52 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e123600; op2val:0xe01d52;
op3val:0x3f800007; valaddr_reg:x3; val_offset:23304*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23304*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7769:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x123600 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x601d52 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e123600; op2val:0xe01d52;
op3val:0x3f999999; valaddr_reg:x3; val_offset:23307*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23307*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7770:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x123600 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x601d52 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e123600; op2val:0xe01d52;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:23310*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23310*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7771:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x123600 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x601d52 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e123600; op2val:0xe01d52;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:23313*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23313*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7772:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x123600 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x601d52 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e123600; op2val:0xe01d52;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:23316*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23316*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7773:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x123600 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x601d52 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e123600; op2val:0xe01d52;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:23319*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23319*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7774:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x123600 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x601d52 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e123600; op2val:0xe01d52;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:23322*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23322*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7775:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x123600 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x601d52 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e123600; op2val:0xe01d52;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:23325*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23325*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7776:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x123600 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x601d52 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e123600; op2val:0xe01d52;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:23328*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23328*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7777:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x123600 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x601d52 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e123600; op2val:0xe01d52;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:23331*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23331*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7778:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x123600 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x601d52 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e123600; op2val:0xe01d52;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:23334*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23334*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7779:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x123600 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x601d52 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e123600; op2val:0xe01d52;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:23337*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23337*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7780:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x123600 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x601d52 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e123600; op2val:0xe01d52;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:23340*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23340*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7781:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x123600 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x601d52 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e123600; op2val:0xe01d52;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:23343*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23343*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7782:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1245f1 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x6004e5 and fs3 == 1 and fe3 == 0x73 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1245f1; op2val:0x80e004e5;
op3val:0xb9800000; valaddr_reg:x3; val_offset:23346*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23346*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7783:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1245f1 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x6004e5 and fs3 == 1 and fe3 == 0x73 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1245f1; op2val:0x80e004e5;
op3val:0xb9800001; valaddr_reg:x3; val_offset:23349*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23349*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7784:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1245f1 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x6004e5 and fs3 == 1 and fe3 == 0x73 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1245f1; op2val:0x80e004e5;
op3val:0xb9800003; valaddr_reg:x3; val_offset:23352*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23352*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7785:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1245f1 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x6004e5 and fs3 == 1 and fe3 == 0x73 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1245f1; op2val:0x80e004e5;
op3val:0xb9800007; valaddr_reg:x3; val_offset:23355*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23355*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7786:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1245f1 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x6004e5 and fs3 == 1 and fe3 == 0x73 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1245f1; op2val:0x80e004e5;
op3val:0xb980000f; valaddr_reg:x3; val_offset:23358*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23358*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7787:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1245f1 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x6004e5 and fs3 == 1 and fe3 == 0x73 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1245f1; op2val:0x80e004e5;
op3val:0xb980001f; valaddr_reg:x3; val_offset:23361*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23361*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7788:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1245f1 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x6004e5 and fs3 == 1 and fe3 == 0x73 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1245f1; op2val:0x80e004e5;
op3val:0xb980003f; valaddr_reg:x3; val_offset:23364*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23364*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7789:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1245f1 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x6004e5 and fs3 == 1 and fe3 == 0x73 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1245f1; op2val:0x80e004e5;
op3val:0xb980007f; valaddr_reg:x3; val_offset:23367*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23367*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7790:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1245f1 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x6004e5 and fs3 == 1 and fe3 == 0x73 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1245f1; op2val:0x80e004e5;
op3val:0xb98000ff; valaddr_reg:x3; val_offset:23370*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23370*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7791:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1245f1 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x6004e5 and fs3 == 1 and fe3 == 0x73 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1245f1; op2val:0x80e004e5;
op3val:0xb98001ff; valaddr_reg:x3; val_offset:23373*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23373*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7792:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1245f1 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x6004e5 and fs3 == 1 and fe3 == 0x73 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1245f1; op2val:0x80e004e5;
op3val:0xb98003ff; valaddr_reg:x3; val_offset:23376*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23376*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7793:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1245f1 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x6004e5 and fs3 == 1 and fe3 == 0x73 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1245f1; op2val:0x80e004e5;
op3val:0xb98007ff; valaddr_reg:x3; val_offset:23379*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23379*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7794:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1245f1 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x6004e5 and fs3 == 1 and fe3 == 0x73 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1245f1; op2val:0x80e004e5;
op3val:0xb9800fff; valaddr_reg:x3; val_offset:23382*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23382*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7795:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1245f1 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x6004e5 and fs3 == 1 and fe3 == 0x73 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1245f1; op2val:0x80e004e5;
op3val:0xb9801fff; valaddr_reg:x3; val_offset:23385*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23385*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7796:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1245f1 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x6004e5 and fs3 == 1 and fe3 == 0x73 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1245f1; op2val:0x80e004e5;
op3val:0xb9803fff; valaddr_reg:x3; val_offset:23388*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23388*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7797:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1245f1 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x6004e5 and fs3 == 1 and fe3 == 0x73 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1245f1; op2val:0x80e004e5;
op3val:0xb9807fff; valaddr_reg:x3; val_offset:23391*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23391*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7798:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1245f1 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x6004e5 and fs3 == 1 and fe3 == 0x73 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1245f1; op2val:0x80e004e5;
op3val:0xb980ffff; valaddr_reg:x3; val_offset:23394*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23394*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7799:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1245f1 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x6004e5 and fs3 == 1 and fe3 == 0x73 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1245f1; op2val:0x80e004e5;
op3val:0xb981ffff; valaddr_reg:x3; val_offset:23397*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23397*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7800:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1245f1 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x6004e5 and fs3 == 1 and fe3 == 0x73 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1245f1; op2val:0x80e004e5;
op3val:0xb983ffff; valaddr_reg:x3; val_offset:23400*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23400*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7801:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1245f1 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x6004e5 and fs3 == 1 and fe3 == 0x73 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1245f1; op2val:0x80e004e5;
op3val:0xb987ffff; valaddr_reg:x3; val_offset:23403*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23403*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7802:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1245f1 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x6004e5 and fs3 == 1 and fe3 == 0x73 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1245f1; op2val:0x80e004e5;
op3val:0xb98fffff; valaddr_reg:x3; val_offset:23406*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23406*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7803:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1245f1 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x6004e5 and fs3 == 1 and fe3 == 0x73 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1245f1; op2val:0x80e004e5;
op3val:0xb99fffff; valaddr_reg:x3; val_offset:23409*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23409*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7804:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1245f1 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x6004e5 and fs3 == 1 and fe3 == 0x73 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1245f1; op2val:0x80e004e5;
op3val:0xb9bfffff; valaddr_reg:x3; val_offset:23412*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23412*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7805:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1245f1 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x6004e5 and fs3 == 1 and fe3 == 0x73 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1245f1; op2val:0x80e004e5;
op3val:0xb9c00000; valaddr_reg:x3; val_offset:23415*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23415*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7806:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1245f1 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x6004e5 and fs3 == 1 and fe3 == 0x73 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1245f1; op2val:0x80e004e5;
op3val:0xb9e00000; valaddr_reg:x3; val_offset:23418*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23418*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7807:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1245f1 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x6004e5 and fs3 == 1 and fe3 == 0x73 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1245f1; op2val:0x80e004e5;
op3val:0xb9f00000; valaddr_reg:x3; val_offset:23421*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23421*0 + 3*60*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2115072985,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2415919167,32,FLEN)
NAN_BOXED(2115072985,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2415919231,32,FLEN)
NAN_BOXED(2115072985,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2415919359,32,FLEN)
NAN_BOXED(2115072985,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2415919615,32,FLEN)
NAN_BOXED(2115072985,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2415920127,32,FLEN)
NAN_BOXED(2115072985,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2415921151,32,FLEN)
NAN_BOXED(2115072985,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2415923199,32,FLEN)
NAN_BOXED(2115072985,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2415927295,32,FLEN)
NAN_BOXED(2115072985,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2415935487,32,FLEN)
NAN_BOXED(2115072985,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2415951871,32,FLEN)
NAN_BOXED(2115072985,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2415984639,32,FLEN)
NAN_BOXED(2115072985,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2416050175,32,FLEN)
NAN_BOXED(2115072985,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2416181247,32,FLEN)
NAN_BOXED(2115072985,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2416443391,32,FLEN)
NAN_BOXED(2115072985,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2416967679,32,FLEN)
NAN_BOXED(2115072985,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2418016255,32,FLEN)
NAN_BOXED(2115072985,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2420113407,32,FLEN)
NAN_BOXED(2115072985,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2420113408,32,FLEN)
NAN_BOXED(2115072985,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2422210560,32,FLEN)
NAN_BOXED(2115072985,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2423259136,32,FLEN)
NAN_BOXED(2115072985,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2423783424,32,FLEN)
NAN_BOXED(2115072985,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2424045568,32,FLEN)
NAN_BOXED(2115072985,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2424176640,32,FLEN)
NAN_BOXED(2115072985,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2424242176,32,FLEN)
NAN_BOXED(2115072985,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2424274944,32,FLEN)
NAN_BOXED(2115072985,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2424291328,32,FLEN)
NAN_BOXED(2115072985,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2424299520,32,FLEN)
NAN_BOXED(2115072985,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2424303616,32,FLEN)
NAN_BOXED(2115072985,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2424305664,32,FLEN)
NAN_BOXED(2115072985,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2424306688,32,FLEN)
NAN_BOXED(2115072985,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2424307200,32,FLEN)
NAN_BOXED(2115072985,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2424307456,32,FLEN)
NAN_BOXED(2115072985,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2424307584,32,FLEN)
NAN_BOXED(2115072985,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2424307648,32,FLEN)
NAN_BOXED(2115072985,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2424307680,32,FLEN)
NAN_BOXED(2115072985,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2424307696,32,FLEN)
NAN_BOXED(2115072985,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2424307704,32,FLEN)
NAN_BOXED(2115072985,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2424307708,32,FLEN)
NAN_BOXED(2115072985,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2424307710,32,FLEN)
NAN_BOXED(2115072985,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2424307711,32,FLEN)
NAN_BOXED(2115122688,32,FLEN)
NAN_BOXED(14687570,32,FLEN)
NAN_BOXED(746586112,32,FLEN)
NAN_BOXED(2115122688,32,FLEN)
NAN_BOXED(14687570,32,FLEN)
NAN_BOXED(746586113,32,FLEN)
NAN_BOXED(2115122688,32,FLEN)
NAN_BOXED(14687570,32,FLEN)
NAN_BOXED(746586115,32,FLEN)
NAN_BOXED(2115122688,32,FLEN)
NAN_BOXED(14687570,32,FLEN)
NAN_BOXED(746586119,32,FLEN)
NAN_BOXED(2115122688,32,FLEN)
NAN_BOXED(14687570,32,FLEN)
NAN_BOXED(746586127,32,FLEN)
NAN_BOXED(2115122688,32,FLEN)
NAN_BOXED(14687570,32,FLEN)
NAN_BOXED(746586143,32,FLEN)
NAN_BOXED(2115122688,32,FLEN)
NAN_BOXED(14687570,32,FLEN)
NAN_BOXED(746586175,32,FLEN)
NAN_BOXED(2115122688,32,FLEN)
NAN_BOXED(14687570,32,FLEN)
NAN_BOXED(746586239,32,FLEN)
NAN_BOXED(2115122688,32,FLEN)
NAN_BOXED(14687570,32,FLEN)
NAN_BOXED(746586367,32,FLEN)
NAN_BOXED(2115122688,32,FLEN)
NAN_BOXED(14687570,32,FLEN)
NAN_BOXED(746586623,32,FLEN)
NAN_BOXED(2115122688,32,FLEN)
NAN_BOXED(14687570,32,FLEN)
NAN_BOXED(746587135,32,FLEN)
NAN_BOXED(2115122688,32,FLEN)
NAN_BOXED(14687570,32,FLEN)
NAN_BOXED(746588159,32,FLEN)
NAN_BOXED(2115122688,32,FLEN)
NAN_BOXED(14687570,32,FLEN)
NAN_BOXED(746590207,32,FLEN)
NAN_BOXED(2115122688,32,FLEN)
NAN_BOXED(14687570,32,FLEN)
NAN_BOXED(746594303,32,FLEN)
NAN_BOXED(2115122688,32,FLEN)
NAN_BOXED(14687570,32,FLEN)
NAN_BOXED(746602495,32,FLEN)
NAN_BOXED(2115122688,32,FLEN)
NAN_BOXED(14687570,32,FLEN)
NAN_BOXED(746618879,32,FLEN)
NAN_BOXED(2115122688,32,FLEN)
NAN_BOXED(14687570,32,FLEN)
NAN_BOXED(746651647,32,FLEN)
NAN_BOXED(2115122688,32,FLEN)
NAN_BOXED(14687570,32,FLEN)
NAN_BOXED(746717183,32,FLEN)
NAN_BOXED(2115122688,32,FLEN)
NAN_BOXED(14687570,32,FLEN)
NAN_BOXED(746848255,32,FLEN)
NAN_BOXED(2115122688,32,FLEN)
NAN_BOXED(14687570,32,FLEN)
NAN_BOXED(747110399,32,FLEN)
NAN_BOXED(2115122688,32,FLEN)
NAN_BOXED(14687570,32,FLEN)
NAN_BOXED(747634687,32,FLEN)
NAN_BOXED(2115122688,32,FLEN)
NAN_BOXED(14687570,32,FLEN)
NAN_BOXED(748683263,32,FLEN)
NAN_BOXED(2115122688,32,FLEN)
NAN_BOXED(14687570,32,FLEN)
NAN_BOXED(750780415,32,FLEN)
NAN_BOXED(2115122688,32,FLEN)
NAN_BOXED(14687570,32,FLEN)
NAN_BOXED(750780416,32,FLEN)
NAN_BOXED(2115122688,32,FLEN)
NAN_BOXED(14687570,32,FLEN)
NAN_BOXED(752877568,32,FLEN)
NAN_BOXED(2115122688,32,FLEN)
NAN_BOXED(14687570,32,FLEN)
NAN_BOXED(753926144,32,FLEN)
NAN_BOXED(2115122688,32,FLEN)
NAN_BOXED(14687570,32,FLEN)
NAN_BOXED(754450432,32,FLEN)
NAN_BOXED(2115122688,32,FLEN)
NAN_BOXED(14687570,32,FLEN)
NAN_BOXED(754712576,32,FLEN)
NAN_BOXED(2115122688,32,FLEN)
NAN_BOXED(14687570,32,FLEN)
NAN_BOXED(754843648,32,FLEN)
NAN_BOXED(2115122688,32,FLEN)
NAN_BOXED(14687570,32,FLEN)
NAN_BOXED(754909184,32,FLEN)
NAN_BOXED(2115122688,32,FLEN)
NAN_BOXED(14687570,32,FLEN)
NAN_BOXED(754941952,32,FLEN)
NAN_BOXED(2115122688,32,FLEN)
NAN_BOXED(14687570,32,FLEN)
NAN_BOXED(754958336,32,FLEN)
NAN_BOXED(2115122688,32,FLEN)
NAN_BOXED(14687570,32,FLEN)
NAN_BOXED(754966528,32,FLEN)
NAN_BOXED(2115122688,32,FLEN)
NAN_BOXED(14687570,32,FLEN)
NAN_BOXED(754970624,32,FLEN)
NAN_BOXED(2115122688,32,FLEN)
NAN_BOXED(14687570,32,FLEN)
NAN_BOXED(754972672,32,FLEN)
NAN_BOXED(2115122688,32,FLEN)
NAN_BOXED(14687570,32,FLEN)
NAN_BOXED(754973696,32,FLEN)
NAN_BOXED(2115122688,32,FLEN)
NAN_BOXED(14687570,32,FLEN)
NAN_BOXED(754974208,32,FLEN)
NAN_BOXED(2115122688,32,FLEN)
NAN_BOXED(14687570,32,FLEN)
NAN_BOXED(754974464,32,FLEN)
NAN_BOXED(2115122688,32,FLEN)
NAN_BOXED(14687570,32,FLEN)
NAN_BOXED(754974592,32,FLEN)
NAN_BOXED(2115122688,32,FLEN)
NAN_BOXED(14687570,32,FLEN)
NAN_BOXED(754974656,32,FLEN)
NAN_BOXED(2115122688,32,FLEN)
NAN_BOXED(14687570,32,FLEN)
NAN_BOXED(754974688,32,FLEN)
NAN_BOXED(2115122688,32,FLEN)
NAN_BOXED(14687570,32,FLEN)
NAN_BOXED(754974704,32,FLEN)
NAN_BOXED(2115122688,32,FLEN)
NAN_BOXED(14687570,32,FLEN)
NAN_BOXED(754974712,32,FLEN)
NAN_BOXED(2115122688,32,FLEN)
NAN_BOXED(14687570,32,FLEN)
NAN_BOXED(754974716,32,FLEN)
NAN_BOXED(2115122688,32,FLEN)
NAN_BOXED(14687570,32,FLEN)
NAN_BOXED(754974718,32,FLEN)
NAN_BOXED(2115122688,32,FLEN)
NAN_BOXED(14687570,32,FLEN)
NAN_BOXED(754974719,32,FLEN)
NAN_BOXED(2115122688,32,FLEN)
NAN_BOXED(14687570,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2115122688,32,FLEN)
NAN_BOXED(14687570,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2115122688,32,FLEN)
NAN_BOXED(14687570,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2115122688,32,FLEN)
NAN_BOXED(14687570,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2115122688,32,FLEN)
NAN_BOXED(14687570,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2115122688,32,FLEN)
NAN_BOXED(14687570,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2115122688,32,FLEN)
NAN_BOXED(14687570,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2115122688,32,FLEN)
NAN_BOXED(14687570,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2115122688,32,FLEN)
NAN_BOXED(14687570,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2115122688,32,FLEN)
NAN_BOXED(14687570,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2115122688,32,FLEN)
NAN_BOXED(14687570,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2115122688,32,FLEN)
NAN_BOXED(14687570,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2115122688,32,FLEN)
NAN_BOXED(14687570,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2115122688,32,FLEN)
NAN_BOXED(14687570,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2115122688,32,FLEN)
NAN_BOXED(14687570,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2115122688,32,FLEN)
NAN_BOXED(14687570,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2115126769,32,FLEN)
NAN_BOXED(2162164965,32,FLEN)
NAN_BOXED(3112173568,32,FLEN)
NAN_BOXED(2115126769,32,FLEN)
NAN_BOXED(2162164965,32,FLEN)
NAN_BOXED(3112173569,32,FLEN)
NAN_BOXED(2115126769,32,FLEN)
NAN_BOXED(2162164965,32,FLEN)
NAN_BOXED(3112173571,32,FLEN)
NAN_BOXED(2115126769,32,FLEN)
NAN_BOXED(2162164965,32,FLEN)
NAN_BOXED(3112173575,32,FLEN)
NAN_BOXED(2115126769,32,FLEN)
NAN_BOXED(2162164965,32,FLEN)
NAN_BOXED(3112173583,32,FLEN)
NAN_BOXED(2115126769,32,FLEN)
NAN_BOXED(2162164965,32,FLEN)
NAN_BOXED(3112173599,32,FLEN)
NAN_BOXED(2115126769,32,FLEN)
NAN_BOXED(2162164965,32,FLEN)
NAN_BOXED(3112173631,32,FLEN)
NAN_BOXED(2115126769,32,FLEN)
NAN_BOXED(2162164965,32,FLEN)
NAN_BOXED(3112173695,32,FLEN)
NAN_BOXED(2115126769,32,FLEN)
NAN_BOXED(2162164965,32,FLEN)
NAN_BOXED(3112173823,32,FLEN)
NAN_BOXED(2115126769,32,FLEN)
NAN_BOXED(2162164965,32,FLEN)
NAN_BOXED(3112174079,32,FLEN)
NAN_BOXED(2115126769,32,FLEN)
NAN_BOXED(2162164965,32,FLEN)
NAN_BOXED(3112174591,32,FLEN)
NAN_BOXED(2115126769,32,FLEN)
NAN_BOXED(2162164965,32,FLEN)
NAN_BOXED(3112175615,32,FLEN)
NAN_BOXED(2115126769,32,FLEN)
NAN_BOXED(2162164965,32,FLEN)
NAN_BOXED(3112177663,32,FLEN)
NAN_BOXED(2115126769,32,FLEN)
NAN_BOXED(2162164965,32,FLEN)
NAN_BOXED(3112181759,32,FLEN)
NAN_BOXED(2115126769,32,FLEN)
NAN_BOXED(2162164965,32,FLEN)
NAN_BOXED(3112189951,32,FLEN)
NAN_BOXED(2115126769,32,FLEN)
NAN_BOXED(2162164965,32,FLEN)
NAN_BOXED(3112206335,32,FLEN)
NAN_BOXED(2115126769,32,FLEN)
NAN_BOXED(2162164965,32,FLEN)
NAN_BOXED(3112239103,32,FLEN)
NAN_BOXED(2115126769,32,FLEN)
NAN_BOXED(2162164965,32,FLEN)
NAN_BOXED(3112304639,32,FLEN)
NAN_BOXED(2115126769,32,FLEN)
NAN_BOXED(2162164965,32,FLEN)
NAN_BOXED(3112435711,32,FLEN)
NAN_BOXED(2115126769,32,FLEN)
NAN_BOXED(2162164965,32,FLEN)
NAN_BOXED(3112697855,32,FLEN)
NAN_BOXED(2115126769,32,FLEN)
NAN_BOXED(2162164965,32,FLEN)
NAN_BOXED(3113222143,32,FLEN)
NAN_BOXED(2115126769,32,FLEN)
NAN_BOXED(2162164965,32,FLEN)
NAN_BOXED(3114270719,32,FLEN)
NAN_BOXED(2115126769,32,FLEN)
NAN_BOXED(2162164965,32,FLEN)
NAN_BOXED(3116367871,32,FLEN)
NAN_BOXED(2115126769,32,FLEN)
NAN_BOXED(2162164965,32,FLEN)
NAN_BOXED(3116367872,32,FLEN)
NAN_BOXED(2115126769,32,FLEN)
NAN_BOXED(2162164965,32,FLEN)
NAN_BOXED(3118465024,32,FLEN)
NAN_BOXED(2115126769,32,FLEN)
NAN_BOXED(2162164965,32,FLEN)
NAN_BOXED(3119513600,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
