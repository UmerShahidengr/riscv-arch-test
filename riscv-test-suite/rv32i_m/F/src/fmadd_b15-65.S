
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:17:59 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_8192:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1b211b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1b211b; op2val:0x0;
op3val:0x33fffff; valaddr_reg:x3; val_offset:24576*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24576*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8193:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1b211b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1b211b; op2val:0x0;
op3val:0x3400000; valaddr_reg:x3; val_offset:24579*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24579*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8194:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1b211b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1b211b; op2val:0x0;
op3val:0x3600000; valaddr_reg:x3; val_offset:24582*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24582*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8195:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1b211b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1b211b; op2val:0x0;
op3val:0x3700000; valaddr_reg:x3; val_offset:24585*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24585*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8196:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1b211b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1b211b; op2val:0x0;
op3val:0x3780000; valaddr_reg:x3; val_offset:24588*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24588*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8197:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1b211b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1b211b; op2val:0x0;
op3val:0x37c0000; valaddr_reg:x3; val_offset:24591*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24591*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8198:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1b211b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1b211b; op2val:0x0;
op3val:0x37e0000; valaddr_reg:x3; val_offset:24594*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24594*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8199:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1b211b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1b211b; op2val:0x0;
op3val:0x37f0000; valaddr_reg:x3; val_offset:24597*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24597*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8200:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1b211b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1b211b; op2val:0x0;
op3val:0x37f8000; valaddr_reg:x3; val_offset:24600*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24600*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8201:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1b211b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1b211b; op2val:0x0;
op3val:0x37fc000; valaddr_reg:x3; val_offset:24603*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24603*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8202:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1b211b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1b211b; op2val:0x0;
op3val:0x37fe000; valaddr_reg:x3; val_offset:24606*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24606*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8203:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1b211b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1b211b; op2val:0x0;
op3val:0x37ff000; valaddr_reg:x3; val_offset:24609*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24609*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8204:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1b211b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1b211b; op2val:0x0;
op3val:0x37ff800; valaddr_reg:x3; val_offset:24612*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24612*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8205:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1b211b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1b211b; op2val:0x0;
op3val:0x37ffc00; valaddr_reg:x3; val_offset:24615*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24615*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8206:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1b211b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1b211b; op2val:0x0;
op3val:0x37ffe00; valaddr_reg:x3; val_offset:24618*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24618*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8207:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1b211b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1b211b; op2val:0x0;
op3val:0x37fff00; valaddr_reg:x3; val_offset:24621*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24621*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8208:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1b211b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1b211b; op2val:0x0;
op3val:0x37fff80; valaddr_reg:x3; val_offset:24624*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24624*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8209:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1b211b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1b211b; op2val:0x0;
op3val:0x37fffc0; valaddr_reg:x3; val_offset:24627*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24627*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8210:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1b211b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1b211b; op2val:0x0;
op3val:0x37fffe0; valaddr_reg:x3; val_offset:24630*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24630*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8211:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1b211b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1b211b; op2val:0x0;
op3val:0x37ffff0; valaddr_reg:x3; val_offset:24633*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24633*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8212:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1b211b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1b211b; op2val:0x0;
op3val:0x37ffff8; valaddr_reg:x3; val_offset:24636*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24636*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8213:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1b211b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1b211b; op2val:0x0;
op3val:0x37ffffc; valaddr_reg:x3; val_offset:24639*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24639*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8214:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1b211b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1b211b; op2val:0x0;
op3val:0x37ffffe; valaddr_reg:x3; val_offset:24642*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24642*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8215:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1b211b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1b211b; op2val:0x0;
op3val:0x37fffff; valaddr_reg:x3; val_offset:24645*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24645*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8216:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c38f3 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x51c08d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c38f3; op2val:0xd1c08d;
op3val:0x3f800001; valaddr_reg:x3; val_offset:24648*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24648*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8217:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c38f3 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x51c08d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c38f3; op2val:0xd1c08d;
op3val:0x3f800003; valaddr_reg:x3; val_offset:24651*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24651*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8218:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c38f3 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x51c08d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c38f3; op2val:0xd1c08d;
op3val:0x3f800007; valaddr_reg:x3; val_offset:24654*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24654*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8219:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c38f3 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x51c08d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c38f3; op2val:0xd1c08d;
op3val:0x3f999999; valaddr_reg:x3; val_offset:24657*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24657*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8220:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c38f3 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x51c08d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c38f3; op2val:0xd1c08d;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:24660*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24660*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8221:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c38f3 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x51c08d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c38f3; op2val:0xd1c08d;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:24663*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24663*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8222:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c38f3 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x51c08d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c38f3; op2val:0xd1c08d;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:24666*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24666*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8223:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c38f3 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x51c08d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c38f3; op2val:0xd1c08d;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:24669*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24669*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8224:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c38f3 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x51c08d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c38f3; op2val:0xd1c08d;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:24672*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24672*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8225:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c38f3 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x51c08d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c38f3; op2val:0xd1c08d;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:24675*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24675*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8226:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c38f3 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x51c08d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c38f3; op2val:0xd1c08d;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:24678*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24678*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8227:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c38f3 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x51c08d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c38f3; op2val:0xd1c08d;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:24681*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24681*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8228:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c38f3 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x51c08d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c38f3; op2val:0xd1c08d;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:24684*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24684*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8229:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c38f3 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x51c08d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c38f3; op2val:0xd1c08d;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:24687*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24687*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8230:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c38f3 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x51c08d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c38f3; op2val:0xd1c08d;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:24690*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24690*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8231:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c38f3 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x51c08d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c38f3; op2val:0xd1c08d;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:24693*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24693*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8232:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c38f3 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x51c08d and fs3 == 0 and fe3 == 0x8a and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c38f3; op2val:0xd1c08d;
op3val:0x45000000; valaddr_reg:x3; val_offset:24696*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24696*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8233:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c38f3 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x51c08d and fs3 == 0 and fe3 == 0x8a and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c38f3; op2val:0xd1c08d;
op3val:0x45000001; valaddr_reg:x3; val_offset:24699*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24699*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8234:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c38f3 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x51c08d and fs3 == 0 and fe3 == 0x8a and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c38f3; op2val:0xd1c08d;
op3val:0x45000003; valaddr_reg:x3; val_offset:24702*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24702*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8235:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c38f3 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x51c08d and fs3 == 0 and fe3 == 0x8a and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c38f3; op2val:0xd1c08d;
op3val:0x45000007; valaddr_reg:x3; val_offset:24705*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24705*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8236:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c38f3 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x51c08d and fs3 == 0 and fe3 == 0x8a and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c38f3; op2val:0xd1c08d;
op3val:0x4500000f; valaddr_reg:x3; val_offset:24708*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24708*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8237:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c38f3 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x51c08d and fs3 == 0 and fe3 == 0x8a and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c38f3; op2val:0xd1c08d;
op3val:0x4500001f; valaddr_reg:x3; val_offset:24711*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24711*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8238:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c38f3 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x51c08d and fs3 == 0 and fe3 == 0x8a and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c38f3; op2val:0xd1c08d;
op3val:0x4500003f; valaddr_reg:x3; val_offset:24714*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24714*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8239:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c38f3 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x51c08d and fs3 == 0 and fe3 == 0x8a and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c38f3; op2val:0xd1c08d;
op3val:0x4500007f; valaddr_reg:x3; val_offset:24717*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24717*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8240:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c38f3 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x51c08d and fs3 == 0 and fe3 == 0x8a and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c38f3; op2val:0xd1c08d;
op3val:0x450000ff; valaddr_reg:x3; val_offset:24720*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24720*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8241:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c38f3 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x51c08d and fs3 == 0 and fe3 == 0x8a and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c38f3; op2val:0xd1c08d;
op3val:0x450001ff; valaddr_reg:x3; val_offset:24723*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24723*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8242:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c38f3 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x51c08d and fs3 == 0 and fe3 == 0x8a and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c38f3; op2val:0xd1c08d;
op3val:0x450003ff; valaddr_reg:x3; val_offset:24726*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24726*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8243:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c38f3 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x51c08d and fs3 == 0 and fe3 == 0x8a and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c38f3; op2val:0xd1c08d;
op3val:0x450007ff; valaddr_reg:x3; val_offset:24729*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24729*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8244:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c38f3 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x51c08d and fs3 == 0 and fe3 == 0x8a and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c38f3; op2val:0xd1c08d;
op3val:0x45000fff; valaddr_reg:x3; val_offset:24732*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24732*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8245:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c38f3 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x51c08d and fs3 == 0 and fe3 == 0x8a and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c38f3; op2val:0xd1c08d;
op3val:0x45001fff; valaddr_reg:x3; val_offset:24735*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24735*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8246:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c38f3 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x51c08d and fs3 == 0 and fe3 == 0x8a and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c38f3; op2val:0xd1c08d;
op3val:0x45003fff; valaddr_reg:x3; val_offset:24738*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24738*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8247:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c38f3 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x51c08d and fs3 == 0 and fe3 == 0x8a and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c38f3; op2val:0xd1c08d;
op3val:0x45007fff; valaddr_reg:x3; val_offset:24741*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24741*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8248:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c38f3 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x51c08d and fs3 == 0 and fe3 == 0x8a and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c38f3; op2val:0xd1c08d;
op3val:0x4500ffff; valaddr_reg:x3; val_offset:24744*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24744*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8249:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c38f3 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x51c08d and fs3 == 0 and fe3 == 0x8a and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c38f3; op2val:0xd1c08d;
op3val:0x4501ffff; valaddr_reg:x3; val_offset:24747*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24747*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8250:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c38f3 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x51c08d and fs3 == 0 and fe3 == 0x8a and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c38f3; op2val:0xd1c08d;
op3val:0x4503ffff; valaddr_reg:x3; val_offset:24750*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24750*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8251:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c38f3 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x51c08d and fs3 == 0 and fe3 == 0x8a and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c38f3; op2val:0xd1c08d;
op3val:0x4507ffff; valaddr_reg:x3; val_offset:24753*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24753*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8252:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c38f3 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x51c08d and fs3 == 0 and fe3 == 0x8a and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c38f3; op2val:0xd1c08d;
op3val:0x450fffff; valaddr_reg:x3; val_offset:24756*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24756*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8253:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c38f3 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x51c08d and fs3 == 0 and fe3 == 0x8a and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c38f3; op2val:0xd1c08d;
op3val:0x451fffff; valaddr_reg:x3; val_offset:24759*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24759*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8254:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c38f3 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x51c08d and fs3 == 0 and fe3 == 0x8a and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c38f3; op2val:0xd1c08d;
op3val:0x453fffff; valaddr_reg:x3; val_offset:24762*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24762*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8255:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c38f3 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x51c08d and fs3 == 0 and fe3 == 0x8a and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c38f3; op2val:0xd1c08d;
op3val:0x45400000; valaddr_reg:x3; val_offset:24765*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24765*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8256:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c38f3 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x51c08d and fs3 == 0 and fe3 == 0x8a and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c38f3; op2val:0xd1c08d;
op3val:0x45600000; valaddr_reg:x3; val_offset:24768*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24768*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8257:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c38f3 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x51c08d and fs3 == 0 and fe3 == 0x8a and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c38f3; op2val:0xd1c08d;
op3val:0x45700000; valaddr_reg:x3; val_offset:24771*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24771*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8258:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c38f3 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x51c08d and fs3 == 0 and fe3 == 0x8a and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c38f3; op2val:0xd1c08d;
op3val:0x45780000; valaddr_reg:x3; val_offset:24774*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24774*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8259:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c38f3 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x51c08d and fs3 == 0 and fe3 == 0x8a and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c38f3; op2val:0xd1c08d;
op3val:0x457c0000; valaddr_reg:x3; val_offset:24777*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24777*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8260:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c38f3 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x51c08d and fs3 == 0 and fe3 == 0x8a and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c38f3; op2val:0xd1c08d;
op3val:0x457e0000; valaddr_reg:x3; val_offset:24780*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24780*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8261:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c38f3 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x51c08d and fs3 == 0 and fe3 == 0x8a and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c38f3; op2val:0xd1c08d;
op3val:0x457f0000; valaddr_reg:x3; val_offset:24783*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24783*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8262:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c38f3 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x51c08d and fs3 == 0 and fe3 == 0x8a and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c38f3; op2val:0xd1c08d;
op3val:0x457f8000; valaddr_reg:x3; val_offset:24786*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24786*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8263:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c38f3 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x51c08d and fs3 == 0 and fe3 == 0x8a and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c38f3; op2val:0xd1c08d;
op3val:0x457fc000; valaddr_reg:x3; val_offset:24789*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24789*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8264:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c38f3 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x51c08d and fs3 == 0 and fe3 == 0x8a and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c38f3; op2val:0xd1c08d;
op3val:0x457fe000; valaddr_reg:x3; val_offset:24792*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24792*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8265:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c38f3 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x51c08d and fs3 == 0 and fe3 == 0x8a and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c38f3; op2val:0xd1c08d;
op3val:0x457ff000; valaddr_reg:x3; val_offset:24795*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24795*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8266:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c38f3 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x51c08d and fs3 == 0 and fe3 == 0x8a and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c38f3; op2val:0xd1c08d;
op3val:0x457ff800; valaddr_reg:x3; val_offset:24798*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24798*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8267:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c38f3 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x51c08d and fs3 == 0 and fe3 == 0x8a and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c38f3; op2val:0xd1c08d;
op3val:0x457ffc00; valaddr_reg:x3; val_offset:24801*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24801*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8268:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c38f3 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x51c08d and fs3 == 0 and fe3 == 0x8a and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c38f3; op2val:0xd1c08d;
op3val:0x457ffe00; valaddr_reg:x3; val_offset:24804*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24804*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8269:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c38f3 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x51c08d and fs3 == 0 and fe3 == 0x8a and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c38f3; op2val:0xd1c08d;
op3val:0x457fff00; valaddr_reg:x3; val_offset:24807*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24807*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8270:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c38f3 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x51c08d and fs3 == 0 and fe3 == 0x8a and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c38f3; op2val:0xd1c08d;
op3val:0x457fff80; valaddr_reg:x3; val_offset:24810*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24810*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8271:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c38f3 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x51c08d and fs3 == 0 and fe3 == 0x8a and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c38f3; op2val:0xd1c08d;
op3val:0x457fffc0; valaddr_reg:x3; val_offset:24813*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24813*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8272:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c38f3 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x51c08d and fs3 == 0 and fe3 == 0x8a and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c38f3; op2val:0xd1c08d;
op3val:0x457fffe0; valaddr_reg:x3; val_offset:24816*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24816*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8273:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c38f3 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x51c08d and fs3 == 0 and fe3 == 0x8a and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c38f3; op2val:0xd1c08d;
op3val:0x457ffff0; valaddr_reg:x3; val_offset:24819*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24819*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8274:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c38f3 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x51c08d and fs3 == 0 and fe3 == 0x8a and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c38f3; op2val:0xd1c08d;
op3val:0x457ffff8; valaddr_reg:x3; val_offset:24822*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24822*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8275:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c38f3 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x51c08d and fs3 == 0 and fe3 == 0x8a and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c38f3; op2val:0xd1c08d;
op3val:0x457ffffc; valaddr_reg:x3; val_offset:24825*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24825*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8276:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c38f3 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x51c08d and fs3 == 0 and fe3 == 0x8a and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c38f3; op2val:0xd1c08d;
op3val:0x457ffffe; valaddr_reg:x3; val_offset:24828*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24828*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8277:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c38f3 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x51c08d and fs3 == 0 and fe3 == 0x8a and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c38f3; op2val:0xd1c08d;
op3val:0x457fffff; valaddr_reg:x3; val_offset:24831*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24831*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8278:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c653b and fs2 == 1 and fe2 == 0x81 and fm2 == 0x518529 and fs3 == 1 and fe3 == 0xd3 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c653b; op2val:0xc0d18529;
op3val:0xe9800000; valaddr_reg:x3; val_offset:24834*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24834*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8279:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c653b and fs2 == 1 and fe2 == 0x81 and fm2 == 0x518529 and fs3 == 1 and fe3 == 0xd3 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c653b; op2val:0xc0d18529;
op3val:0xe9800001; valaddr_reg:x3; val_offset:24837*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24837*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8280:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c653b and fs2 == 1 and fe2 == 0x81 and fm2 == 0x518529 and fs3 == 1 and fe3 == 0xd3 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c653b; op2val:0xc0d18529;
op3val:0xe9800003; valaddr_reg:x3; val_offset:24840*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24840*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8281:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c653b and fs2 == 1 and fe2 == 0x81 and fm2 == 0x518529 and fs3 == 1 and fe3 == 0xd3 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c653b; op2val:0xc0d18529;
op3val:0xe9800007; valaddr_reg:x3; val_offset:24843*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24843*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8282:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c653b and fs2 == 1 and fe2 == 0x81 and fm2 == 0x518529 and fs3 == 1 and fe3 == 0xd3 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c653b; op2val:0xc0d18529;
op3val:0xe980000f; valaddr_reg:x3; val_offset:24846*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24846*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8283:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c653b and fs2 == 1 and fe2 == 0x81 and fm2 == 0x518529 and fs3 == 1 and fe3 == 0xd3 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c653b; op2val:0xc0d18529;
op3val:0xe980001f; valaddr_reg:x3; val_offset:24849*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24849*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8284:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c653b and fs2 == 1 and fe2 == 0x81 and fm2 == 0x518529 and fs3 == 1 and fe3 == 0xd3 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c653b; op2val:0xc0d18529;
op3val:0xe980003f; valaddr_reg:x3; val_offset:24852*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24852*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8285:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c653b and fs2 == 1 and fe2 == 0x81 and fm2 == 0x518529 and fs3 == 1 and fe3 == 0xd3 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c653b; op2val:0xc0d18529;
op3val:0xe980007f; valaddr_reg:x3; val_offset:24855*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24855*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8286:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c653b and fs2 == 1 and fe2 == 0x81 and fm2 == 0x518529 and fs3 == 1 and fe3 == 0xd3 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c653b; op2val:0xc0d18529;
op3val:0xe98000ff; valaddr_reg:x3; val_offset:24858*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24858*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8287:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c653b and fs2 == 1 and fe2 == 0x81 and fm2 == 0x518529 and fs3 == 1 and fe3 == 0xd3 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c653b; op2val:0xc0d18529;
op3val:0xe98001ff; valaddr_reg:x3; val_offset:24861*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24861*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8288:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c653b and fs2 == 1 and fe2 == 0x81 and fm2 == 0x518529 and fs3 == 1 and fe3 == 0xd3 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c653b; op2val:0xc0d18529;
op3val:0xe98003ff; valaddr_reg:x3; val_offset:24864*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24864*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8289:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c653b and fs2 == 1 and fe2 == 0x81 and fm2 == 0x518529 and fs3 == 1 and fe3 == 0xd3 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c653b; op2val:0xc0d18529;
op3val:0xe98007ff; valaddr_reg:x3; val_offset:24867*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24867*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8290:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c653b and fs2 == 1 and fe2 == 0x81 and fm2 == 0x518529 and fs3 == 1 and fe3 == 0xd3 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c653b; op2val:0xc0d18529;
op3val:0xe9800fff; valaddr_reg:x3; val_offset:24870*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24870*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8291:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c653b and fs2 == 1 and fe2 == 0x81 and fm2 == 0x518529 and fs3 == 1 and fe3 == 0xd3 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c653b; op2val:0xc0d18529;
op3val:0xe9801fff; valaddr_reg:x3; val_offset:24873*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24873*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8292:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c653b and fs2 == 1 and fe2 == 0x81 and fm2 == 0x518529 and fs3 == 1 and fe3 == 0xd3 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c653b; op2val:0xc0d18529;
op3val:0xe9803fff; valaddr_reg:x3; val_offset:24876*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24876*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8293:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c653b and fs2 == 1 and fe2 == 0x81 and fm2 == 0x518529 and fs3 == 1 and fe3 == 0xd3 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c653b; op2val:0xc0d18529;
op3val:0xe9807fff; valaddr_reg:x3; val_offset:24879*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24879*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8294:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c653b and fs2 == 1 and fe2 == 0x81 and fm2 == 0x518529 and fs3 == 1 and fe3 == 0xd3 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c653b; op2val:0xc0d18529;
op3val:0xe980ffff; valaddr_reg:x3; val_offset:24882*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24882*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8295:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c653b and fs2 == 1 and fe2 == 0x81 and fm2 == 0x518529 and fs3 == 1 and fe3 == 0xd3 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c653b; op2val:0xc0d18529;
op3val:0xe981ffff; valaddr_reg:x3; val_offset:24885*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24885*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8296:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c653b and fs2 == 1 and fe2 == 0x81 and fm2 == 0x518529 and fs3 == 1 and fe3 == 0xd3 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c653b; op2val:0xc0d18529;
op3val:0xe983ffff; valaddr_reg:x3; val_offset:24888*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24888*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8297:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c653b and fs2 == 1 and fe2 == 0x81 and fm2 == 0x518529 and fs3 == 1 and fe3 == 0xd3 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c653b; op2val:0xc0d18529;
op3val:0xe987ffff; valaddr_reg:x3; val_offset:24891*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24891*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8298:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c653b and fs2 == 1 and fe2 == 0x81 and fm2 == 0x518529 and fs3 == 1 and fe3 == 0xd3 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c653b; op2val:0xc0d18529;
op3val:0xe98fffff; valaddr_reg:x3; val_offset:24894*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24894*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8299:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c653b and fs2 == 1 and fe2 == 0x81 and fm2 == 0x518529 and fs3 == 1 and fe3 == 0xd3 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c653b; op2val:0xc0d18529;
op3val:0xe99fffff; valaddr_reg:x3; val_offset:24897*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24897*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8300:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c653b and fs2 == 1 and fe2 == 0x81 and fm2 == 0x518529 and fs3 == 1 and fe3 == 0xd3 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c653b; op2val:0xc0d18529;
op3val:0xe9bfffff; valaddr_reg:x3; val_offset:24900*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24900*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8301:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c653b and fs2 == 1 and fe2 == 0x81 and fm2 == 0x518529 and fs3 == 1 and fe3 == 0xd3 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c653b; op2val:0xc0d18529;
op3val:0xe9c00000; valaddr_reg:x3; val_offset:24903*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24903*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8302:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c653b and fs2 == 1 and fe2 == 0x81 and fm2 == 0x518529 and fs3 == 1 and fe3 == 0xd3 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c653b; op2val:0xc0d18529;
op3val:0xe9e00000; valaddr_reg:x3; val_offset:24906*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24906*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8303:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c653b and fs2 == 1 and fe2 == 0x81 and fm2 == 0x518529 and fs3 == 1 and fe3 == 0xd3 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c653b; op2val:0xc0d18529;
op3val:0xe9f00000; valaddr_reg:x3; val_offset:24909*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24909*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8304:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c653b and fs2 == 1 and fe2 == 0x81 and fm2 == 0x518529 and fs3 == 1 and fe3 == 0xd3 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c653b; op2val:0xc0d18529;
op3val:0xe9f80000; valaddr_reg:x3; val_offset:24912*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24912*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8305:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c653b and fs2 == 1 and fe2 == 0x81 and fm2 == 0x518529 and fs3 == 1 and fe3 == 0xd3 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c653b; op2val:0xc0d18529;
op3val:0xe9fc0000; valaddr_reg:x3; val_offset:24915*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24915*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8306:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c653b and fs2 == 1 and fe2 == 0x81 and fm2 == 0x518529 and fs3 == 1 and fe3 == 0xd3 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c653b; op2val:0xc0d18529;
op3val:0xe9fe0000; valaddr_reg:x3; val_offset:24918*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24918*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8307:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c653b and fs2 == 1 and fe2 == 0x81 and fm2 == 0x518529 and fs3 == 1 and fe3 == 0xd3 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c653b; op2val:0xc0d18529;
op3val:0xe9ff0000; valaddr_reg:x3; val_offset:24921*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24921*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8308:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c653b and fs2 == 1 and fe2 == 0x81 and fm2 == 0x518529 and fs3 == 1 and fe3 == 0xd3 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c653b; op2val:0xc0d18529;
op3val:0xe9ff8000; valaddr_reg:x3; val_offset:24924*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24924*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8309:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c653b and fs2 == 1 and fe2 == 0x81 and fm2 == 0x518529 and fs3 == 1 and fe3 == 0xd3 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c653b; op2val:0xc0d18529;
op3val:0xe9ffc000; valaddr_reg:x3; val_offset:24927*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24927*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8310:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c653b and fs2 == 1 and fe2 == 0x81 and fm2 == 0x518529 and fs3 == 1 and fe3 == 0xd3 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c653b; op2val:0xc0d18529;
op3val:0xe9ffe000; valaddr_reg:x3; val_offset:24930*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24930*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8311:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c653b and fs2 == 1 and fe2 == 0x81 and fm2 == 0x518529 and fs3 == 1 and fe3 == 0xd3 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c653b; op2val:0xc0d18529;
op3val:0xe9fff000; valaddr_reg:x3; val_offset:24933*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24933*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8312:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c653b and fs2 == 1 and fe2 == 0x81 and fm2 == 0x518529 and fs3 == 1 and fe3 == 0xd3 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c653b; op2val:0xc0d18529;
op3val:0xe9fff800; valaddr_reg:x3; val_offset:24936*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24936*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8313:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c653b and fs2 == 1 and fe2 == 0x81 and fm2 == 0x518529 and fs3 == 1 and fe3 == 0xd3 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c653b; op2val:0xc0d18529;
op3val:0xe9fffc00; valaddr_reg:x3; val_offset:24939*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24939*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8314:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c653b and fs2 == 1 and fe2 == 0x81 and fm2 == 0x518529 and fs3 == 1 and fe3 == 0xd3 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c653b; op2val:0xc0d18529;
op3val:0xe9fffe00; valaddr_reg:x3; val_offset:24942*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24942*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8315:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c653b and fs2 == 1 and fe2 == 0x81 and fm2 == 0x518529 and fs3 == 1 and fe3 == 0xd3 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c653b; op2val:0xc0d18529;
op3val:0xe9ffff00; valaddr_reg:x3; val_offset:24945*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24945*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8316:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c653b and fs2 == 1 and fe2 == 0x81 and fm2 == 0x518529 and fs3 == 1 and fe3 == 0xd3 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c653b; op2val:0xc0d18529;
op3val:0xe9ffff80; valaddr_reg:x3; val_offset:24948*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24948*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8317:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c653b and fs2 == 1 and fe2 == 0x81 and fm2 == 0x518529 and fs3 == 1 and fe3 == 0xd3 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c653b; op2val:0xc0d18529;
op3val:0xe9ffffc0; valaddr_reg:x3; val_offset:24951*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24951*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8318:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c653b and fs2 == 1 and fe2 == 0x81 and fm2 == 0x518529 and fs3 == 1 and fe3 == 0xd3 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c653b; op2val:0xc0d18529;
op3val:0xe9ffffe0; valaddr_reg:x3; val_offset:24954*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24954*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8319:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c653b and fs2 == 1 and fe2 == 0x81 and fm2 == 0x518529 and fs3 == 1 and fe3 == 0xd3 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c653b; op2val:0xc0d18529;
op3val:0xe9fffff0; valaddr_reg:x3; val_offset:24957*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24957*0 + 3*64*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2115707163,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(54525951,32,FLEN)
NAN_BOXED(2115707163,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(54525952,32,FLEN)
NAN_BOXED(2115707163,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(56623104,32,FLEN)
NAN_BOXED(2115707163,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(57671680,32,FLEN)
NAN_BOXED(2115707163,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58195968,32,FLEN)
NAN_BOXED(2115707163,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58458112,32,FLEN)
NAN_BOXED(2115707163,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58589184,32,FLEN)
NAN_BOXED(2115707163,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58654720,32,FLEN)
NAN_BOXED(2115707163,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58687488,32,FLEN)
NAN_BOXED(2115707163,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58703872,32,FLEN)
NAN_BOXED(2115707163,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58712064,32,FLEN)
NAN_BOXED(2115707163,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58716160,32,FLEN)
NAN_BOXED(2115707163,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58718208,32,FLEN)
NAN_BOXED(2115707163,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58719232,32,FLEN)
NAN_BOXED(2115707163,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58719744,32,FLEN)
NAN_BOXED(2115707163,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58720000,32,FLEN)
NAN_BOXED(2115707163,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58720128,32,FLEN)
NAN_BOXED(2115707163,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58720192,32,FLEN)
NAN_BOXED(2115707163,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58720224,32,FLEN)
NAN_BOXED(2115707163,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58720240,32,FLEN)
NAN_BOXED(2115707163,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58720248,32,FLEN)
NAN_BOXED(2115707163,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58720252,32,FLEN)
NAN_BOXED(2115707163,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58720254,32,FLEN)
NAN_BOXED(2115707163,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58720255,32,FLEN)
NAN_BOXED(2115778803,32,FLEN)
NAN_BOXED(13746317,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2115778803,32,FLEN)
NAN_BOXED(13746317,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2115778803,32,FLEN)
NAN_BOXED(13746317,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2115778803,32,FLEN)
NAN_BOXED(13746317,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2115778803,32,FLEN)
NAN_BOXED(13746317,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2115778803,32,FLEN)
NAN_BOXED(13746317,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2115778803,32,FLEN)
NAN_BOXED(13746317,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2115778803,32,FLEN)
NAN_BOXED(13746317,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2115778803,32,FLEN)
NAN_BOXED(13746317,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2115778803,32,FLEN)
NAN_BOXED(13746317,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2115778803,32,FLEN)
NAN_BOXED(13746317,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2115778803,32,FLEN)
NAN_BOXED(13746317,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2115778803,32,FLEN)
NAN_BOXED(13746317,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2115778803,32,FLEN)
NAN_BOXED(13746317,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2115778803,32,FLEN)
NAN_BOXED(13746317,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2115778803,32,FLEN)
NAN_BOXED(13746317,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2115778803,32,FLEN)
NAN_BOXED(13746317,32,FLEN)
NAN_BOXED(1157627904,32,FLEN)
NAN_BOXED(2115778803,32,FLEN)
NAN_BOXED(13746317,32,FLEN)
NAN_BOXED(1157627905,32,FLEN)
NAN_BOXED(2115778803,32,FLEN)
NAN_BOXED(13746317,32,FLEN)
NAN_BOXED(1157627907,32,FLEN)
NAN_BOXED(2115778803,32,FLEN)
NAN_BOXED(13746317,32,FLEN)
NAN_BOXED(1157627911,32,FLEN)
NAN_BOXED(2115778803,32,FLEN)
NAN_BOXED(13746317,32,FLEN)
NAN_BOXED(1157627919,32,FLEN)
NAN_BOXED(2115778803,32,FLEN)
NAN_BOXED(13746317,32,FLEN)
NAN_BOXED(1157627935,32,FLEN)
NAN_BOXED(2115778803,32,FLEN)
NAN_BOXED(13746317,32,FLEN)
NAN_BOXED(1157627967,32,FLEN)
NAN_BOXED(2115778803,32,FLEN)
NAN_BOXED(13746317,32,FLEN)
NAN_BOXED(1157628031,32,FLEN)
NAN_BOXED(2115778803,32,FLEN)
NAN_BOXED(13746317,32,FLEN)
NAN_BOXED(1157628159,32,FLEN)
NAN_BOXED(2115778803,32,FLEN)
NAN_BOXED(13746317,32,FLEN)
NAN_BOXED(1157628415,32,FLEN)
NAN_BOXED(2115778803,32,FLEN)
NAN_BOXED(13746317,32,FLEN)
NAN_BOXED(1157628927,32,FLEN)
NAN_BOXED(2115778803,32,FLEN)
NAN_BOXED(13746317,32,FLEN)
NAN_BOXED(1157629951,32,FLEN)
NAN_BOXED(2115778803,32,FLEN)
NAN_BOXED(13746317,32,FLEN)
NAN_BOXED(1157631999,32,FLEN)
NAN_BOXED(2115778803,32,FLEN)
NAN_BOXED(13746317,32,FLEN)
NAN_BOXED(1157636095,32,FLEN)
NAN_BOXED(2115778803,32,FLEN)
NAN_BOXED(13746317,32,FLEN)
NAN_BOXED(1157644287,32,FLEN)
NAN_BOXED(2115778803,32,FLEN)
NAN_BOXED(13746317,32,FLEN)
NAN_BOXED(1157660671,32,FLEN)
NAN_BOXED(2115778803,32,FLEN)
NAN_BOXED(13746317,32,FLEN)
NAN_BOXED(1157693439,32,FLEN)
NAN_BOXED(2115778803,32,FLEN)
NAN_BOXED(13746317,32,FLEN)
NAN_BOXED(1157758975,32,FLEN)
NAN_BOXED(2115778803,32,FLEN)
NAN_BOXED(13746317,32,FLEN)
NAN_BOXED(1157890047,32,FLEN)
NAN_BOXED(2115778803,32,FLEN)
NAN_BOXED(13746317,32,FLEN)
NAN_BOXED(1158152191,32,FLEN)
NAN_BOXED(2115778803,32,FLEN)
NAN_BOXED(13746317,32,FLEN)
NAN_BOXED(1158676479,32,FLEN)
NAN_BOXED(2115778803,32,FLEN)
NAN_BOXED(13746317,32,FLEN)
NAN_BOXED(1159725055,32,FLEN)
NAN_BOXED(2115778803,32,FLEN)
NAN_BOXED(13746317,32,FLEN)
NAN_BOXED(1161822207,32,FLEN)
NAN_BOXED(2115778803,32,FLEN)
NAN_BOXED(13746317,32,FLEN)
NAN_BOXED(1161822208,32,FLEN)
NAN_BOXED(2115778803,32,FLEN)
NAN_BOXED(13746317,32,FLEN)
NAN_BOXED(1163919360,32,FLEN)
NAN_BOXED(2115778803,32,FLEN)
NAN_BOXED(13746317,32,FLEN)
NAN_BOXED(1164967936,32,FLEN)
NAN_BOXED(2115778803,32,FLEN)
NAN_BOXED(13746317,32,FLEN)
NAN_BOXED(1165492224,32,FLEN)
NAN_BOXED(2115778803,32,FLEN)
NAN_BOXED(13746317,32,FLEN)
NAN_BOXED(1165754368,32,FLEN)
NAN_BOXED(2115778803,32,FLEN)
NAN_BOXED(13746317,32,FLEN)
NAN_BOXED(1165885440,32,FLEN)
NAN_BOXED(2115778803,32,FLEN)
NAN_BOXED(13746317,32,FLEN)
NAN_BOXED(1165950976,32,FLEN)
NAN_BOXED(2115778803,32,FLEN)
NAN_BOXED(13746317,32,FLEN)
NAN_BOXED(1165983744,32,FLEN)
NAN_BOXED(2115778803,32,FLEN)
NAN_BOXED(13746317,32,FLEN)
NAN_BOXED(1166000128,32,FLEN)
NAN_BOXED(2115778803,32,FLEN)
NAN_BOXED(13746317,32,FLEN)
NAN_BOXED(1166008320,32,FLEN)
NAN_BOXED(2115778803,32,FLEN)
NAN_BOXED(13746317,32,FLEN)
NAN_BOXED(1166012416,32,FLEN)
NAN_BOXED(2115778803,32,FLEN)
NAN_BOXED(13746317,32,FLEN)
NAN_BOXED(1166014464,32,FLEN)
NAN_BOXED(2115778803,32,FLEN)
NAN_BOXED(13746317,32,FLEN)
NAN_BOXED(1166015488,32,FLEN)
NAN_BOXED(2115778803,32,FLEN)
NAN_BOXED(13746317,32,FLEN)
NAN_BOXED(1166016000,32,FLEN)
NAN_BOXED(2115778803,32,FLEN)
NAN_BOXED(13746317,32,FLEN)
NAN_BOXED(1166016256,32,FLEN)
NAN_BOXED(2115778803,32,FLEN)
NAN_BOXED(13746317,32,FLEN)
NAN_BOXED(1166016384,32,FLEN)
NAN_BOXED(2115778803,32,FLEN)
NAN_BOXED(13746317,32,FLEN)
NAN_BOXED(1166016448,32,FLEN)
NAN_BOXED(2115778803,32,FLEN)
NAN_BOXED(13746317,32,FLEN)
NAN_BOXED(1166016480,32,FLEN)
NAN_BOXED(2115778803,32,FLEN)
NAN_BOXED(13746317,32,FLEN)
NAN_BOXED(1166016496,32,FLEN)
NAN_BOXED(2115778803,32,FLEN)
NAN_BOXED(13746317,32,FLEN)
NAN_BOXED(1166016504,32,FLEN)
NAN_BOXED(2115778803,32,FLEN)
NAN_BOXED(13746317,32,FLEN)
NAN_BOXED(1166016508,32,FLEN)
NAN_BOXED(2115778803,32,FLEN)
NAN_BOXED(13746317,32,FLEN)
NAN_BOXED(1166016510,32,FLEN)
NAN_BOXED(2115778803,32,FLEN)
NAN_BOXED(13746317,32,FLEN)
NAN_BOXED(1166016511,32,FLEN)
NAN_BOXED(2115790139,32,FLEN)
NAN_BOXED(3234956585,32,FLEN)
NAN_BOXED(3917479936,32,FLEN)
NAN_BOXED(2115790139,32,FLEN)
NAN_BOXED(3234956585,32,FLEN)
NAN_BOXED(3917479937,32,FLEN)
NAN_BOXED(2115790139,32,FLEN)
NAN_BOXED(3234956585,32,FLEN)
NAN_BOXED(3917479939,32,FLEN)
NAN_BOXED(2115790139,32,FLEN)
NAN_BOXED(3234956585,32,FLEN)
NAN_BOXED(3917479943,32,FLEN)
NAN_BOXED(2115790139,32,FLEN)
NAN_BOXED(3234956585,32,FLEN)
NAN_BOXED(3917479951,32,FLEN)
NAN_BOXED(2115790139,32,FLEN)
NAN_BOXED(3234956585,32,FLEN)
NAN_BOXED(3917479967,32,FLEN)
NAN_BOXED(2115790139,32,FLEN)
NAN_BOXED(3234956585,32,FLEN)
NAN_BOXED(3917479999,32,FLEN)
NAN_BOXED(2115790139,32,FLEN)
NAN_BOXED(3234956585,32,FLEN)
NAN_BOXED(3917480063,32,FLEN)
NAN_BOXED(2115790139,32,FLEN)
NAN_BOXED(3234956585,32,FLEN)
NAN_BOXED(3917480191,32,FLEN)
NAN_BOXED(2115790139,32,FLEN)
NAN_BOXED(3234956585,32,FLEN)
NAN_BOXED(3917480447,32,FLEN)
NAN_BOXED(2115790139,32,FLEN)
NAN_BOXED(3234956585,32,FLEN)
NAN_BOXED(3917480959,32,FLEN)
NAN_BOXED(2115790139,32,FLEN)
NAN_BOXED(3234956585,32,FLEN)
NAN_BOXED(3917481983,32,FLEN)
NAN_BOXED(2115790139,32,FLEN)
NAN_BOXED(3234956585,32,FLEN)
NAN_BOXED(3917484031,32,FLEN)
NAN_BOXED(2115790139,32,FLEN)
NAN_BOXED(3234956585,32,FLEN)
NAN_BOXED(3917488127,32,FLEN)
NAN_BOXED(2115790139,32,FLEN)
NAN_BOXED(3234956585,32,FLEN)
NAN_BOXED(3917496319,32,FLEN)
NAN_BOXED(2115790139,32,FLEN)
NAN_BOXED(3234956585,32,FLEN)
NAN_BOXED(3917512703,32,FLEN)
NAN_BOXED(2115790139,32,FLEN)
NAN_BOXED(3234956585,32,FLEN)
NAN_BOXED(3917545471,32,FLEN)
NAN_BOXED(2115790139,32,FLEN)
NAN_BOXED(3234956585,32,FLEN)
NAN_BOXED(3917611007,32,FLEN)
NAN_BOXED(2115790139,32,FLEN)
NAN_BOXED(3234956585,32,FLEN)
NAN_BOXED(3917742079,32,FLEN)
NAN_BOXED(2115790139,32,FLEN)
NAN_BOXED(3234956585,32,FLEN)
NAN_BOXED(3918004223,32,FLEN)
NAN_BOXED(2115790139,32,FLEN)
NAN_BOXED(3234956585,32,FLEN)
NAN_BOXED(3918528511,32,FLEN)
NAN_BOXED(2115790139,32,FLEN)
NAN_BOXED(3234956585,32,FLEN)
NAN_BOXED(3919577087,32,FLEN)
NAN_BOXED(2115790139,32,FLEN)
NAN_BOXED(3234956585,32,FLEN)
NAN_BOXED(3921674239,32,FLEN)
NAN_BOXED(2115790139,32,FLEN)
NAN_BOXED(3234956585,32,FLEN)
NAN_BOXED(3921674240,32,FLEN)
NAN_BOXED(2115790139,32,FLEN)
NAN_BOXED(3234956585,32,FLEN)
NAN_BOXED(3923771392,32,FLEN)
NAN_BOXED(2115790139,32,FLEN)
NAN_BOXED(3234956585,32,FLEN)
NAN_BOXED(3924819968,32,FLEN)
NAN_BOXED(2115790139,32,FLEN)
NAN_BOXED(3234956585,32,FLEN)
NAN_BOXED(3925344256,32,FLEN)
NAN_BOXED(2115790139,32,FLEN)
NAN_BOXED(3234956585,32,FLEN)
NAN_BOXED(3925606400,32,FLEN)
NAN_BOXED(2115790139,32,FLEN)
NAN_BOXED(3234956585,32,FLEN)
NAN_BOXED(3925737472,32,FLEN)
NAN_BOXED(2115790139,32,FLEN)
NAN_BOXED(3234956585,32,FLEN)
NAN_BOXED(3925803008,32,FLEN)
NAN_BOXED(2115790139,32,FLEN)
NAN_BOXED(3234956585,32,FLEN)
NAN_BOXED(3925835776,32,FLEN)
NAN_BOXED(2115790139,32,FLEN)
NAN_BOXED(3234956585,32,FLEN)
NAN_BOXED(3925852160,32,FLEN)
NAN_BOXED(2115790139,32,FLEN)
NAN_BOXED(3234956585,32,FLEN)
NAN_BOXED(3925860352,32,FLEN)
NAN_BOXED(2115790139,32,FLEN)
NAN_BOXED(3234956585,32,FLEN)
NAN_BOXED(3925864448,32,FLEN)
NAN_BOXED(2115790139,32,FLEN)
NAN_BOXED(3234956585,32,FLEN)
NAN_BOXED(3925866496,32,FLEN)
NAN_BOXED(2115790139,32,FLEN)
NAN_BOXED(3234956585,32,FLEN)
NAN_BOXED(3925867520,32,FLEN)
NAN_BOXED(2115790139,32,FLEN)
NAN_BOXED(3234956585,32,FLEN)
NAN_BOXED(3925868032,32,FLEN)
NAN_BOXED(2115790139,32,FLEN)
NAN_BOXED(3234956585,32,FLEN)
NAN_BOXED(3925868288,32,FLEN)
NAN_BOXED(2115790139,32,FLEN)
NAN_BOXED(3234956585,32,FLEN)
NAN_BOXED(3925868416,32,FLEN)
NAN_BOXED(2115790139,32,FLEN)
NAN_BOXED(3234956585,32,FLEN)
NAN_BOXED(3925868480,32,FLEN)
NAN_BOXED(2115790139,32,FLEN)
NAN_BOXED(3234956585,32,FLEN)
NAN_BOXED(3925868512,32,FLEN)
NAN_BOXED(2115790139,32,FLEN)
NAN_BOXED(3234956585,32,FLEN)
NAN_BOXED(3925868528,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
