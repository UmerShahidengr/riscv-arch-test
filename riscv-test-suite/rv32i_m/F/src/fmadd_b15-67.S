
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:17:59 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_8448:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1d09f5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1d09f5; op2val:0x0;
op3val:0xd7f8000; valaddr_reg:x3; val_offset:25344*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25344*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8449:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1d09f5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1d09f5; op2val:0x0;
op3val:0xd7fc000; valaddr_reg:x3; val_offset:25347*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25347*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8450:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1d09f5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1d09f5; op2val:0x0;
op3val:0xd7fe000; valaddr_reg:x3; val_offset:25350*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25350*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8451:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1d09f5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1d09f5; op2val:0x0;
op3val:0xd7ff000; valaddr_reg:x3; val_offset:25353*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25353*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8452:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1d09f5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1d09f5; op2val:0x0;
op3val:0xd7ff800; valaddr_reg:x3; val_offset:25356*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25356*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8453:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1d09f5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1d09f5; op2val:0x0;
op3val:0xd7ffc00; valaddr_reg:x3; val_offset:25359*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25359*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8454:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1d09f5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1d09f5; op2val:0x0;
op3val:0xd7ffe00; valaddr_reg:x3; val_offset:25362*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25362*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8455:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1d09f5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1d09f5; op2val:0x0;
op3val:0xd7fff00; valaddr_reg:x3; val_offset:25365*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25365*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8456:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1d09f5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1d09f5; op2val:0x0;
op3val:0xd7fff80; valaddr_reg:x3; val_offset:25368*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25368*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8457:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1d09f5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1d09f5; op2val:0x0;
op3val:0xd7fffc0; valaddr_reg:x3; val_offset:25371*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25371*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8458:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1d09f5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1d09f5; op2val:0x0;
op3val:0xd7fffe0; valaddr_reg:x3; val_offset:25374*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25374*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8459:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1d09f5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1d09f5; op2val:0x0;
op3val:0xd7ffff0; valaddr_reg:x3; val_offset:25377*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25377*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8460:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1d09f5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1d09f5; op2val:0x0;
op3val:0xd7ffff8; valaddr_reg:x3; val_offset:25380*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25380*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8461:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1d09f5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1d09f5; op2val:0x0;
op3val:0xd7ffffc; valaddr_reg:x3; val_offset:25383*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25383*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8462:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1d09f5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1d09f5; op2val:0x0;
op3val:0xd7ffffe; valaddr_reg:x3; val_offset:25386*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25386*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8463:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1d09f5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1d09f5; op2val:0x0;
op3val:0xd7fffff; valaddr_reg:x3; val_offset:25389*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25389*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8464:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1e014a and fs2 == 1 and fe2 == 0x01 and fm2 == 0x4f62c2 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1e014a; op2val:0x80cf62c2;
op3val:0xbf800001; valaddr_reg:x3; val_offset:25392*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25392*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8465:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1e014a and fs2 == 1 and fe2 == 0x01 and fm2 == 0x4f62c2 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1e014a; op2val:0x80cf62c2;
op3val:0xbf800003; valaddr_reg:x3; val_offset:25395*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25395*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8466:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1e014a and fs2 == 1 and fe2 == 0x01 and fm2 == 0x4f62c2 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1e014a; op2val:0x80cf62c2;
op3val:0xbf800007; valaddr_reg:x3; val_offset:25398*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25398*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8467:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1e014a and fs2 == 1 and fe2 == 0x01 and fm2 == 0x4f62c2 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1e014a; op2val:0x80cf62c2;
op3val:0xbf999999; valaddr_reg:x3; val_offset:25401*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25401*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8468:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1e014a and fs2 == 1 and fe2 == 0x01 and fm2 == 0x4f62c2 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1e014a; op2val:0x80cf62c2;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:25404*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25404*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8469:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1e014a and fs2 == 1 and fe2 == 0x01 and fm2 == 0x4f62c2 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1e014a; op2val:0x80cf62c2;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:25407*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25407*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8470:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1e014a and fs2 == 1 and fe2 == 0x01 and fm2 == 0x4f62c2 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1e014a; op2val:0x80cf62c2;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:25410*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25410*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8471:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1e014a and fs2 == 1 and fe2 == 0x01 and fm2 == 0x4f62c2 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1e014a; op2val:0x80cf62c2;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:25413*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25413*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8472:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1e014a and fs2 == 1 and fe2 == 0x01 and fm2 == 0x4f62c2 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1e014a; op2val:0x80cf62c2;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:25416*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25416*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8473:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1e014a and fs2 == 1 and fe2 == 0x01 and fm2 == 0x4f62c2 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1e014a; op2val:0x80cf62c2;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:25419*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25419*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8474:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1e014a and fs2 == 1 and fe2 == 0x01 and fm2 == 0x4f62c2 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1e014a; op2val:0x80cf62c2;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:25422*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25422*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8475:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1e014a and fs2 == 1 and fe2 == 0x01 and fm2 == 0x4f62c2 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1e014a; op2val:0x80cf62c2;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:25425*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25425*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8476:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1e014a and fs2 == 1 and fe2 == 0x01 and fm2 == 0x4f62c2 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1e014a; op2val:0x80cf62c2;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:25428*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25428*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8477:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1e014a and fs2 == 1 and fe2 == 0x01 and fm2 == 0x4f62c2 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1e014a; op2val:0x80cf62c2;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:25431*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25431*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8478:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1e014a and fs2 == 1 and fe2 == 0x01 and fm2 == 0x4f62c2 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1e014a; op2val:0x80cf62c2;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:25434*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25434*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8479:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1e014a and fs2 == 1 and fe2 == 0x01 and fm2 == 0x4f62c2 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1e014a; op2val:0x80cf62c2;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:25437*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25437*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8480:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1e014a and fs2 == 1 and fe2 == 0x01 and fm2 == 0x4f62c2 and fs3 == 1 and fe3 == 0x88 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1e014a; op2val:0x80cf62c2;
op3val:0xc4000000; valaddr_reg:x3; val_offset:25440*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25440*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8481:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1e014a and fs2 == 1 and fe2 == 0x01 and fm2 == 0x4f62c2 and fs3 == 1 and fe3 == 0x88 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1e014a; op2val:0x80cf62c2;
op3val:0xc4000001; valaddr_reg:x3; val_offset:25443*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25443*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8482:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1e014a and fs2 == 1 and fe2 == 0x01 and fm2 == 0x4f62c2 and fs3 == 1 and fe3 == 0x88 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1e014a; op2val:0x80cf62c2;
op3val:0xc4000003; valaddr_reg:x3; val_offset:25446*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25446*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8483:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1e014a and fs2 == 1 and fe2 == 0x01 and fm2 == 0x4f62c2 and fs3 == 1 and fe3 == 0x88 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1e014a; op2val:0x80cf62c2;
op3val:0xc4000007; valaddr_reg:x3; val_offset:25449*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25449*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8484:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1e014a and fs2 == 1 and fe2 == 0x01 and fm2 == 0x4f62c2 and fs3 == 1 and fe3 == 0x88 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1e014a; op2val:0x80cf62c2;
op3val:0xc400000f; valaddr_reg:x3; val_offset:25452*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25452*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8485:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1e014a and fs2 == 1 and fe2 == 0x01 and fm2 == 0x4f62c2 and fs3 == 1 and fe3 == 0x88 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1e014a; op2val:0x80cf62c2;
op3val:0xc400001f; valaddr_reg:x3; val_offset:25455*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25455*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8486:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1e014a and fs2 == 1 and fe2 == 0x01 and fm2 == 0x4f62c2 and fs3 == 1 and fe3 == 0x88 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1e014a; op2val:0x80cf62c2;
op3val:0xc400003f; valaddr_reg:x3; val_offset:25458*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25458*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8487:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1e014a and fs2 == 1 and fe2 == 0x01 and fm2 == 0x4f62c2 and fs3 == 1 and fe3 == 0x88 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1e014a; op2val:0x80cf62c2;
op3val:0xc400007f; valaddr_reg:x3; val_offset:25461*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25461*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8488:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1e014a and fs2 == 1 and fe2 == 0x01 and fm2 == 0x4f62c2 and fs3 == 1 and fe3 == 0x88 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1e014a; op2val:0x80cf62c2;
op3val:0xc40000ff; valaddr_reg:x3; val_offset:25464*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25464*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8489:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1e014a and fs2 == 1 and fe2 == 0x01 and fm2 == 0x4f62c2 and fs3 == 1 and fe3 == 0x88 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1e014a; op2val:0x80cf62c2;
op3val:0xc40001ff; valaddr_reg:x3; val_offset:25467*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25467*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8490:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1e014a and fs2 == 1 and fe2 == 0x01 and fm2 == 0x4f62c2 and fs3 == 1 and fe3 == 0x88 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1e014a; op2val:0x80cf62c2;
op3val:0xc40003ff; valaddr_reg:x3; val_offset:25470*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25470*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8491:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1e014a and fs2 == 1 and fe2 == 0x01 and fm2 == 0x4f62c2 and fs3 == 1 and fe3 == 0x88 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1e014a; op2val:0x80cf62c2;
op3val:0xc40007ff; valaddr_reg:x3; val_offset:25473*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25473*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8492:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1e014a and fs2 == 1 and fe2 == 0x01 and fm2 == 0x4f62c2 and fs3 == 1 and fe3 == 0x88 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1e014a; op2val:0x80cf62c2;
op3val:0xc4000fff; valaddr_reg:x3; val_offset:25476*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25476*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8493:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1e014a and fs2 == 1 and fe2 == 0x01 and fm2 == 0x4f62c2 and fs3 == 1 and fe3 == 0x88 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1e014a; op2val:0x80cf62c2;
op3val:0xc4001fff; valaddr_reg:x3; val_offset:25479*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25479*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8494:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1e014a and fs2 == 1 and fe2 == 0x01 and fm2 == 0x4f62c2 and fs3 == 1 and fe3 == 0x88 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1e014a; op2val:0x80cf62c2;
op3val:0xc4003fff; valaddr_reg:x3; val_offset:25482*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25482*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8495:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1e014a and fs2 == 1 and fe2 == 0x01 and fm2 == 0x4f62c2 and fs3 == 1 and fe3 == 0x88 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1e014a; op2val:0x80cf62c2;
op3val:0xc4007fff; valaddr_reg:x3; val_offset:25485*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25485*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8496:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1e014a and fs2 == 1 and fe2 == 0x01 and fm2 == 0x4f62c2 and fs3 == 1 and fe3 == 0x88 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1e014a; op2val:0x80cf62c2;
op3val:0xc400ffff; valaddr_reg:x3; val_offset:25488*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25488*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8497:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1e014a and fs2 == 1 and fe2 == 0x01 and fm2 == 0x4f62c2 and fs3 == 1 and fe3 == 0x88 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1e014a; op2val:0x80cf62c2;
op3val:0xc401ffff; valaddr_reg:x3; val_offset:25491*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25491*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8498:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1e014a and fs2 == 1 and fe2 == 0x01 and fm2 == 0x4f62c2 and fs3 == 1 and fe3 == 0x88 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1e014a; op2val:0x80cf62c2;
op3val:0xc403ffff; valaddr_reg:x3; val_offset:25494*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25494*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8499:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1e014a and fs2 == 1 and fe2 == 0x01 and fm2 == 0x4f62c2 and fs3 == 1 and fe3 == 0x88 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1e014a; op2val:0x80cf62c2;
op3val:0xc407ffff; valaddr_reg:x3; val_offset:25497*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25497*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8500:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1e014a and fs2 == 1 and fe2 == 0x01 and fm2 == 0x4f62c2 and fs3 == 1 and fe3 == 0x88 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1e014a; op2val:0x80cf62c2;
op3val:0xc40fffff; valaddr_reg:x3; val_offset:25500*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25500*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8501:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1e014a and fs2 == 1 and fe2 == 0x01 and fm2 == 0x4f62c2 and fs3 == 1 and fe3 == 0x88 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1e014a; op2val:0x80cf62c2;
op3val:0xc41fffff; valaddr_reg:x3; val_offset:25503*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25503*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8502:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1e014a and fs2 == 1 and fe2 == 0x01 and fm2 == 0x4f62c2 and fs3 == 1 and fe3 == 0x88 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1e014a; op2val:0x80cf62c2;
op3val:0xc43fffff; valaddr_reg:x3; val_offset:25506*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25506*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8503:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1e014a and fs2 == 1 and fe2 == 0x01 and fm2 == 0x4f62c2 and fs3 == 1 and fe3 == 0x88 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1e014a; op2val:0x80cf62c2;
op3val:0xc4400000; valaddr_reg:x3; val_offset:25509*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25509*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8504:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1e014a and fs2 == 1 and fe2 == 0x01 and fm2 == 0x4f62c2 and fs3 == 1 and fe3 == 0x88 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1e014a; op2val:0x80cf62c2;
op3val:0xc4600000; valaddr_reg:x3; val_offset:25512*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25512*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8505:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1e014a and fs2 == 1 and fe2 == 0x01 and fm2 == 0x4f62c2 and fs3 == 1 and fe3 == 0x88 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1e014a; op2val:0x80cf62c2;
op3val:0xc4700000; valaddr_reg:x3; val_offset:25515*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25515*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8506:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1e014a and fs2 == 1 and fe2 == 0x01 and fm2 == 0x4f62c2 and fs3 == 1 and fe3 == 0x88 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1e014a; op2val:0x80cf62c2;
op3val:0xc4780000; valaddr_reg:x3; val_offset:25518*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25518*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8507:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1e014a and fs2 == 1 and fe2 == 0x01 and fm2 == 0x4f62c2 and fs3 == 1 and fe3 == 0x88 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1e014a; op2val:0x80cf62c2;
op3val:0xc47c0000; valaddr_reg:x3; val_offset:25521*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25521*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8508:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1e014a and fs2 == 1 and fe2 == 0x01 and fm2 == 0x4f62c2 and fs3 == 1 and fe3 == 0x88 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1e014a; op2val:0x80cf62c2;
op3val:0xc47e0000; valaddr_reg:x3; val_offset:25524*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25524*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8509:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1e014a and fs2 == 1 and fe2 == 0x01 and fm2 == 0x4f62c2 and fs3 == 1 and fe3 == 0x88 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1e014a; op2val:0x80cf62c2;
op3val:0xc47f0000; valaddr_reg:x3; val_offset:25527*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25527*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8510:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1e014a and fs2 == 1 and fe2 == 0x01 and fm2 == 0x4f62c2 and fs3 == 1 and fe3 == 0x88 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1e014a; op2val:0x80cf62c2;
op3val:0xc47f8000; valaddr_reg:x3; val_offset:25530*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25530*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8511:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1e014a and fs2 == 1 and fe2 == 0x01 and fm2 == 0x4f62c2 and fs3 == 1 and fe3 == 0x88 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1e014a; op2val:0x80cf62c2;
op3val:0xc47fc000; valaddr_reg:x3; val_offset:25533*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25533*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8512:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1e014a and fs2 == 1 and fe2 == 0x01 and fm2 == 0x4f62c2 and fs3 == 1 and fe3 == 0x88 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1e014a; op2val:0x80cf62c2;
op3val:0xc47fe000; valaddr_reg:x3; val_offset:25536*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25536*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8513:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1e014a and fs2 == 1 and fe2 == 0x01 and fm2 == 0x4f62c2 and fs3 == 1 and fe3 == 0x88 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1e014a; op2val:0x80cf62c2;
op3val:0xc47ff000; valaddr_reg:x3; val_offset:25539*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25539*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8514:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1e014a and fs2 == 1 and fe2 == 0x01 and fm2 == 0x4f62c2 and fs3 == 1 and fe3 == 0x88 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1e014a; op2val:0x80cf62c2;
op3val:0xc47ff800; valaddr_reg:x3; val_offset:25542*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25542*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8515:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1e014a and fs2 == 1 and fe2 == 0x01 and fm2 == 0x4f62c2 and fs3 == 1 and fe3 == 0x88 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1e014a; op2val:0x80cf62c2;
op3val:0xc47ffc00; valaddr_reg:x3; val_offset:25545*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25545*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8516:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1e014a and fs2 == 1 and fe2 == 0x01 and fm2 == 0x4f62c2 and fs3 == 1 and fe3 == 0x88 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1e014a; op2val:0x80cf62c2;
op3val:0xc47ffe00; valaddr_reg:x3; val_offset:25548*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25548*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8517:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1e014a and fs2 == 1 and fe2 == 0x01 and fm2 == 0x4f62c2 and fs3 == 1 and fe3 == 0x88 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1e014a; op2val:0x80cf62c2;
op3val:0xc47fff00; valaddr_reg:x3; val_offset:25551*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25551*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8518:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1e014a and fs2 == 1 and fe2 == 0x01 and fm2 == 0x4f62c2 and fs3 == 1 and fe3 == 0x88 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1e014a; op2val:0x80cf62c2;
op3val:0xc47fff80; valaddr_reg:x3; val_offset:25554*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25554*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8519:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1e014a and fs2 == 1 and fe2 == 0x01 and fm2 == 0x4f62c2 and fs3 == 1 and fe3 == 0x88 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1e014a; op2val:0x80cf62c2;
op3val:0xc47fffc0; valaddr_reg:x3; val_offset:25557*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25557*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8520:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1e014a and fs2 == 1 and fe2 == 0x01 and fm2 == 0x4f62c2 and fs3 == 1 and fe3 == 0x88 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1e014a; op2val:0x80cf62c2;
op3val:0xc47fffe0; valaddr_reg:x3; val_offset:25560*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25560*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8521:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1e014a and fs2 == 1 and fe2 == 0x01 and fm2 == 0x4f62c2 and fs3 == 1 and fe3 == 0x88 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1e014a; op2val:0x80cf62c2;
op3val:0xc47ffff0; valaddr_reg:x3; val_offset:25563*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25563*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8522:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1e014a and fs2 == 1 and fe2 == 0x01 and fm2 == 0x4f62c2 and fs3 == 1 and fe3 == 0x88 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1e014a; op2val:0x80cf62c2;
op3val:0xc47ffff8; valaddr_reg:x3; val_offset:25566*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25566*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8523:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1e014a and fs2 == 1 and fe2 == 0x01 and fm2 == 0x4f62c2 and fs3 == 1 and fe3 == 0x88 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1e014a; op2val:0x80cf62c2;
op3val:0xc47ffffc; valaddr_reg:x3; val_offset:25569*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25569*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8524:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1e014a and fs2 == 1 and fe2 == 0x01 and fm2 == 0x4f62c2 and fs3 == 1 and fe3 == 0x88 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1e014a; op2val:0x80cf62c2;
op3val:0xc47ffffe; valaddr_reg:x3; val_offset:25572*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25572*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8525:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1e014a and fs2 == 1 and fe2 == 0x01 and fm2 == 0x4f62c2 and fs3 == 1 and fe3 == 0x88 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1e014a; op2val:0x80cf62c2;
op3val:0xc47fffff; valaddr_reg:x3; val_offset:25575*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25575*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8526:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1fd614 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x4d0282 and fs3 == 0 and fe3 == 0xdc and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1fd614; op2val:0x40cd0282;
op3val:0x6e000000; valaddr_reg:x3; val_offset:25578*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25578*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8527:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1fd614 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x4d0282 and fs3 == 0 and fe3 == 0xdc and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1fd614; op2val:0x40cd0282;
op3val:0x6e000001; valaddr_reg:x3; val_offset:25581*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25581*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8528:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1fd614 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x4d0282 and fs3 == 0 and fe3 == 0xdc and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1fd614; op2val:0x40cd0282;
op3val:0x6e000003; valaddr_reg:x3; val_offset:25584*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25584*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8529:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1fd614 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x4d0282 and fs3 == 0 and fe3 == 0xdc and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1fd614; op2val:0x40cd0282;
op3val:0x6e000007; valaddr_reg:x3; val_offset:25587*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25587*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8530:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1fd614 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x4d0282 and fs3 == 0 and fe3 == 0xdc and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1fd614; op2val:0x40cd0282;
op3val:0x6e00000f; valaddr_reg:x3; val_offset:25590*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25590*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8531:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1fd614 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x4d0282 and fs3 == 0 and fe3 == 0xdc and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1fd614; op2val:0x40cd0282;
op3val:0x6e00001f; valaddr_reg:x3; val_offset:25593*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25593*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8532:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1fd614 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x4d0282 and fs3 == 0 and fe3 == 0xdc and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1fd614; op2val:0x40cd0282;
op3val:0x6e00003f; valaddr_reg:x3; val_offset:25596*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25596*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8533:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1fd614 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x4d0282 and fs3 == 0 and fe3 == 0xdc and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1fd614; op2val:0x40cd0282;
op3val:0x6e00007f; valaddr_reg:x3; val_offset:25599*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25599*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8534:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1fd614 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x4d0282 and fs3 == 0 and fe3 == 0xdc and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1fd614; op2val:0x40cd0282;
op3val:0x6e0000ff; valaddr_reg:x3; val_offset:25602*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25602*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8535:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1fd614 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x4d0282 and fs3 == 0 and fe3 == 0xdc and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1fd614; op2val:0x40cd0282;
op3val:0x6e0001ff; valaddr_reg:x3; val_offset:25605*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25605*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8536:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1fd614 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x4d0282 and fs3 == 0 and fe3 == 0xdc and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1fd614; op2val:0x40cd0282;
op3val:0x6e0003ff; valaddr_reg:x3; val_offset:25608*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25608*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8537:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1fd614 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x4d0282 and fs3 == 0 and fe3 == 0xdc and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1fd614; op2val:0x40cd0282;
op3val:0x6e0007ff; valaddr_reg:x3; val_offset:25611*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25611*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8538:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1fd614 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x4d0282 and fs3 == 0 and fe3 == 0xdc and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1fd614; op2val:0x40cd0282;
op3val:0x6e000fff; valaddr_reg:x3; val_offset:25614*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25614*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8539:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1fd614 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x4d0282 and fs3 == 0 and fe3 == 0xdc and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1fd614; op2val:0x40cd0282;
op3val:0x6e001fff; valaddr_reg:x3; val_offset:25617*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25617*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8540:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1fd614 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x4d0282 and fs3 == 0 and fe3 == 0xdc and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1fd614; op2val:0x40cd0282;
op3val:0x6e003fff; valaddr_reg:x3; val_offset:25620*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25620*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8541:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1fd614 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x4d0282 and fs3 == 0 and fe3 == 0xdc and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1fd614; op2val:0x40cd0282;
op3val:0x6e007fff; valaddr_reg:x3; val_offset:25623*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25623*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8542:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1fd614 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x4d0282 and fs3 == 0 and fe3 == 0xdc and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1fd614; op2val:0x40cd0282;
op3val:0x6e00ffff; valaddr_reg:x3; val_offset:25626*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25626*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8543:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1fd614 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x4d0282 and fs3 == 0 and fe3 == 0xdc and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1fd614; op2val:0x40cd0282;
op3val:0x6e01ffff; valaddr_reg:x3; val_offset:25629*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25629*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8544:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1fd614 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x4d0282 and fs3 == 0 and fe3 == 0xdc and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1fd614; op2val:0x40cd0282;
op3val:0x6e03ffff; valaddr_reg:x3; val_offset:25632*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25632*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8545:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1fd614 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x4d0282 and fs3 == 0 and fe3 == 0xdc and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1fd614; op2val:0x40cd0282;
op3val:0x6e07ffff; valaddr_reg:x3; val_offset:25635*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25635*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8546:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1fd614 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x4d0282 and fs3 == 0 and fe3 == 0xdc and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1fd614; op2val:0x40cd0282;
op3val:0x6e0fffff; valaddr_reg:x3; val_offset:25638*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25638*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8547:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1fd614 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x4d0282 and fs3 == 0 and fe3 == 0xdc and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1fd614; op2val:0x40cd0282;
op3val:0x6e1fffff; valaddr_reg:x3; val_offset:25641*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25641*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8548:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1fd614 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x4d0282 and fs3 == 0 and fe3 == 0xdc and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1fd614; op2val:0x40cd0282;
op3val:0x6e3fffff; valaddr_reg:x3; val_offset:25644*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25644*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8549:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1fd614 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x4d0282 and fs3 == 0 and fe3 == 0xdc and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1fd614; op2val:0x40cd0282;
op3val:0x6e400000; valaddr_reg:x3; val_offset:25647*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25647*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8550:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1fd614 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x4d0282 and fs3 == 0 and fe3 == 0xdc and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1fd614; op2val:0x40cd0282;
op3val:0x6e600000; valaddr_reg:x3; val_offset:25650*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25650*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8551:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1fd614 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x4d0282 and fs3 == 0 and fe3 == 0xdc and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1fd614; op2val:0x40cd0282;
op3val:0x6e700000; valaddr_reg:x3; val_offset:25653*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25653*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8552:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1fd614 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x4d0282 and fs3 == 0 and fe3 == 0xdc and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1fd614; op2val:0x40cd0282;
op3val:0x6e780000; valaddr_reg:x3; val_offset:25656*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25656*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8553:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1fd614 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x4d0282 and fs3 == 0 and fe3 == 0xdc and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1fd614; op2val:0x40cd0282;
op3val:0x6e7c0000; valaddr_reg:x3; val_offset:25659*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25659*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8554:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1fd614 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x4d0282 and fs3 == 0 and fe3 == 0xdc and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1fd614; op2val:0x40cd0282;
op3val:0x6e7e0000; valaddr_reg:x3; val_offset:25662*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25662*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8555:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1fd614 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x4d0282 and fs3 == 0 and fe3 == 0xdc and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1fd614; op2val:0x40cd0282;
op3val:0x6e7f0000; valaddr_reg:x3; val_offset:25665*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25665*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8556:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1fd614 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x4d0282 and fs3 == 0 and fe3 == 0xdc and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1fd614; op2val:0x40cd0282;
op3val:0x6e7f8000; valaddr_reg:x3; val_offset:25668*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25668*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8557:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1fd614 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x4d0282 and fs3 == 0 and fe3 == 0xdc and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1fd614; op2val:0x40cd0282;
op3val:0x6e7fc000; valaddr_reg:x3; val_offset:25671*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25671*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8558:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1fd614 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x4d0282 and fs3 == 0 and fe3 == 0xdc and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1fd614; op2val:0x40cd0282;
op3val:0x6e7fe000; valaddr_reg:x3; val_offset:25674*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25674*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8559:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1fd614 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x4d0282 and fs3 == 0 and fe3 == 0xdc and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1fd614; op2val:0x40cd0282;
op3val:0x6e7ff000; valaddr_reg:x3; val_offset:25677*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25677*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8560:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1fd614 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x4d0282 and fs3 == 0 and fe3 == 0xdc and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1fd614; op2val:0x40cd0282;
op3val:0x6e7ff800; valaddr_reg:x3; val_offset:25680*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25680*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8561:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1fd614 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x4d0282 and fs3 == 0 and fe3 == 0xdc and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1fd614; op2val:0x40cd0282;
op3val:0x6e7ffc00; valaddr_reg:x3; val_offset:25683*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25683*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8562:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1fd614 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x4d0282 and fs3 == 0 and fe3 == 0xdc and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1fd614; op2val:0x40cd0282;
op3val:0x6e7ffe00; valaddr_reg:x3; val_offset:25686*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25686*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8563:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1fd614 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x4d0282 and fs3 == 0 and fe3 == 0xdc and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1fd614; op2val:0x40cd0282;
op3val:0x6e7fff00; valaddr_reg:x3; val_offset:25689*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25689*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8564:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1fd614 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x4d0282 and fs3 == 0 and fe3 == 0xdc and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1fd614; op2val:0x40cd0282;
op3val:0x6e7fff80; valaddr_reg:x3; val_offset:25692*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25692*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8565:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1fd614 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x4d0282 and fs3 == 0 and fe3 == 0xdc and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1fd614; op2val:0x40cd0282;
op3val:0x6e7fffc0; valaddr_reg:x3; val_offset:25695*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25695*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8566:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1fd614 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x4d0282 and fs3 == 0 and fe3 == 0xdc and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1fd614; op2val:0x40cd0282;
op3val:0x6e7fffe0; valaddr_reg:x3; val_offset:25698*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25698*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8567:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1fd614 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x4d0282 and fs3 == 0 and fe3 == 0xdc and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1fd614; op2val:0x40cd0282;
op3val:0x6e7ffff0; valaddr_reg:x3; val_offset:25701*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25701*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8568:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1fd614 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x4d0282 and fs3 == 0 and fe3 == 0xdc and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1fd614; op2val:0x40cd0282;
op3val:0x6e7ffff8; valaddr_reg:x3; val_offset:25704*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25704*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8569:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1fd614 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x4d0282 and fs3 == 0 and fe3 == 0xdc and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1fd614; op2val:0x40cd0282;
op3val:0x6e7ffffc; valaddr_reg:x3; val_offset:25707*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25707*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8570:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1fd614 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x4d0282 and fs3 == 0 and fe3 == 0xdc and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1fd614; op2val:0x40cd0282;
op3val:0x6e7ffffe; valaddr_reg:x3; val_offset:25710*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25710*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8571:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1fd614 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x4d0282 and fs3 == 0 and fe3 == 0xdc and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1fd614; op2val:0x40cd0282;
op3val:0x6e7fffff; valaddr_reg:x3; val_offset:25713*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25713*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8572:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1fd614 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x4d0282 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1fd614; op2val:0x40cd0282;
op3val:0x7f000001; valaddr_reg:x3; val_offset:25716*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25716*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8573:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1fd614 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x4d0282 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1fd614; op2val:0x40cd0282;
op3val:0x7f000003; valaddr_reg:x3; val_offset:25719*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25719*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8574:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1fd614 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x4d0282 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1fd614; op2val:0x40cd0282;
op3val:0x7f000007; valaddr_reg:x3; val_offset:25722*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25722*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8575:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1fd614 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x4d0282 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1fd614; op2val:0x40cd0282;
op3val:0x7f199999; valaddr_reg:x3; val_offset:25725*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25725*0 + 3*66*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2115832309,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226459648,32,FLEN)
NAN_BOXED(2115832309,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226476032,32,FLEN)
NAN_BOXED(2115832309,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226484224,32,FLEN)
NAN_BOXED(2115832309,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226488320,32,FLEN)
NAN_BOXED(2115832309,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226490368,32,FLEN)
NAN_BOXED(2115832309,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226491392,32,FLEN)
NAN_BOXED(2115832309,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226491904,32,FLEN)
NAN_BOXED(2115832309,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226492160,32,FLEN)
NAN_BOXED(2115832309,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226492288,32,FLEN)
NAN_BOXED(2115832309,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226492352,32,FLEN)
NAN_BOXED(2115832309,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226492384,32,FLEN)
NAN_BOXED(2115832309,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226492400,32,FLEN)
NAN_BOXED(2115832309,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226492408,32,FLEN)
NAN_BOXED(2115832309,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226492412,32,FLEN)
NAN_BOXED(2115832309,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226492414,32,FLEN)
NAN_BOXED(2115832309,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226492415,32,FLEN)
NAN_BOXED(2115895626,32,FLEN)
NAN_BOXED(2161074882,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2115895626,32,FLEN)
NAN_BOXED(2161074882,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2115895626,32,FLEN)
NAN_BOXED(2161074882,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
NAN_BOXED(2115895626,32,FLEN)
NAN_BOXED(2161074882,32,FLEN)
NAN_BOXED(3214514585,32,FLEN)
NAN_BOXED(2115895626,32,FLEN)
NAN_BOXED(2161074882,32,FLEN)
NAN_BOXED(3215233609,32,FLEN)
NAN_BOXED(2115895626,32,FLEN)
NAN_BOXED(2161074882,32,FLEN)
NAN_BOXED(3216192307,32,FLEN)
NAN_BOXED(2115895626,32,FLEN)
NAN_BOXED(2161074882,32,FLEN)
NAN_BOXED(3216431981,32,FLEN)
NAN_BOXED(2115895626,32,FLEN)
NAN_BOXED(2161074882,32,FLEN)
NAN_BOXED(3216751547,32,FLEN)
NAN_BOXED(2115895626,32,FLEN)
NAN_BOXED(2161074882,32,FLEN)
NAN_BOXED(3217310788,32,FLEN)
NAN_BOXED(2115895626,32,FLEN)
NAN_BOXED(2161074882,32,FLEN)
NAN_BOXED(3217870028,32,FLEN)
NAN_BOXED(2115895626,32,FLEN)
NAN_BOXED(2161074882,32,FLEN)
NAN_BOXED(3218828726,32,FLEN)
NAN_BOXED(2115895626,32,FLEN)
NAN_BOXED(2161074882,32,FLEN)
NAN_BOXED(3219547750,32,FLEN)
NAN_BOXED(2115895626,32,FLEN)
NAN_BOXED(2161074882,32,FLEN)
NAN_BOXED(3220027099,32,FLEN)
NAN_BOXED(2115895626,32,FLEN)
NAN_BOXED(2161074882,32,FLEN)
NAN_BOXED(3221225464,32,FLEN)
NAN_BOXED(2115895626,32,FLEN)
NAN_BOXED(2161074882,32,FLEN)
NAN_BOXED(3221225468,32,FLEN)
NAN_BOXED(2115895626,32,FLEN)
NAN_BOXED(2161074882,32,FLEN)
NAN_BOXED(3221225470,32,FLEN)
NAN_BOXED(2115895626,32,FLEN)
NAN_BOXED(2161074882,32,FLEN)
NAN_BOXED(3288334336,32,FLEN)
NAN_BOXED(2115895626,32,FLEN)
NAN_BOXED(2161074882,32,FLEN)
NAN_BOXED(3288334337,32,FLEN)
NAN_BOXED(2115895626,32,FLEN)
NAN_BOXED(2161074882,32,FLEN)
NAN_BOXED(3288334339,32,FLEN)
NAN_BOXED(2115895626,32,FLEN)
NAN_BOXED(2161074882,32,FLEN)
NAN_BOXED(3288334343,32,FLEN)
NAN_BOXED(2115895626,32,FLEN)
NAN_BOXED(2161074882,32,FLEN)
NAN_BOXED(3288334351,32,FLEN)
NAN_BOXED(2115895626,32,FLEN)
NAN_BOXED(2161074882,32,FLEN)
NAN_BOXED(3288334367,32,FLEN)
NAN_BOXED(2115895626,32,FLEN)
NAN_BOXED(2161074882,32,FLEN)
NAN_BOXED(3288334399,32,FLEN)
NAN_BOXED(2115895626,32,FLEN)
NAN_BOXED(2161074882,32,FLEN)
NAN_BOXED(3288334463,32,FLEN)
NAN_BOXED(2115895626,32,FLEN)
NAN_BOXED(2161074882,32,FLEN)
NAN_BOXED(3288334591,32,FLEN)
NAN_BOXED(2115895626,32,FLEN)
NAN_BOXED(2161074882,32,FLEN)
NAN_BOXED(3288334847,32,FLEN)
NAN_BOXED(2115895626,32,FLEN)
NAN_BOXED(2161074882,32,FLEN)
NAN_BOXED(3288335359,32,FLEN)
NAN_BOXED(2115895626,32,FLEN)
NAN_BOXED(2161074882,32,FLEN)
NAN_BOXED(3288336383,32,FLEN)
NAN_BOXED(2115895626,32,FLEN)
NAN_BOXED(2161074882,32,FLEN)
NAN_BOXED(3288338431,32,FLEN)
NAN_BOXED(2115895626,32,FLEN)
NAN_BOXED(2161074882,32,FLEN)
NAN_BOXED(3288342527,32,FLEN)
NAN_BOXED(2115895626,32,FLEN)
NAN_BOXED(2161074882,32,FLEN)
NAN_BOXED(3288350719,32,FLEN)
NAN_BOXED(2115895626,32,FLEN)
NAN_BOXED(2161074882,32,FLEN)
NAN_BOXED(3288367103,32,FLEN)
NAN_BOXED(2115895626,32,FLEN)
NAN_BOXED(2161074882,32,FLEN)
NAN_BOXED(3288399871,32,FLEN)
NAN_BOXED(2115895626,32,FLEN)
NAN_BOXED(2161074882,32,FLEN)
NAN_BOXED(3288465407,32,FLEN)
NAN_BOXED(2115895626,32,FLEN)
NAN_BOXED(2161074882,32,FLEN)
NAN_BOXED(3288596479,32,FLEN)
NAN_BOXED(2115895626,32,FLEN)
NAN_BOXED(2161074882,32,FLEN)
NAN_BOXED(3288858623,32,FLEN)
NAN_BOXED(2115895626,32,FLEN)
NAN_BOXED(2161074882,32,FLEN)
NAN_BOXED(3289382911,32,FLEN)
NAN_BOXED(2115895626,32,FLEN)
NAN_BOXED(2161074882,32,FLEN)
NAN_BOXED(3290431487,32,FLEN)
NAN_BOXED(2115895626,32,FLEN)
NAN_BOXED(2161074882,32,FLEN)
NAN_BOXED(3292528639,32,FLEN)
NAN_BOXED(2115895626,32,FLEN)
NAN_BOXED(2161074882,32,FLEN)
NAN_BOXED(3292528640,32,FLEN)
NAN_BOXED(2115895626,32,FLEN)
NAN_BOXED(2161074882,32,FLEN)
NAN_BOXED(3294625792,32,FLEN)
NAN_BOXED(2115895626,32,FLEN)
NAN_BOXED(2161074882,32,FLEN)
NAN_BOXED(3295674368,32,FLEN)
NAN_BOXED(2115895626,32,FLEN)
NAN_BOXED(2161074882,32,FLEN)
NAN_BOXED(3296198656,32,FLEN)
NAN_BOXED(2115895626,32,FLEN)
NAN_BOXED(2161074882,32,FLEN)
NAN_BOXED(3296460800,32,FLEN)
NAN_BOXED(2115895626,32,FLEN)
NAN_BOXED(2161074882,32,FLEN)
NAN_BOXED(3296591872,32,FLEN)
NAN_BOXED(2115895626,32,FLEN)
NAN_BOXED(2161074882,32,FLEN)
NAN_BOXED(3296657408,32,FLEN)
NAN_BOXED(2115895626,32,FLEN)
NAN_BOXED(2161074882,32,FLEN)
NAN_BOXED(3296690176,32,FLEN)
NAN_BOXED(2115895626,32,FLEN)
NAN_BOXED(2161074882,32,FLEN)
NAN_BOXED(3296706560,32,FLEN)
NAN_BOXED(2115895626,32,FLEN)
NAN_BOXED(2161074882,32,FLEN)
NAN_BOXED(3296714752,32,FLEN)
NAN_BOXED(2115895626,32,FLEN)
NAN_BOXED(2161074882,32,FLEN)
NAN_BOXED(3296718848,32,FLEN)
NAN_BOXED(2115895626,32,FLEN)
NAN_BOXED(2161074882,32,FLEN)
NAN_BOXED(3296720896,32,FLEN)
NAN_BOXED(2115895626,32,FLEN)
NAN_BOXED(2161074882,32,FLEN)
NAN_BOXED(3296721920,32,FLEN)
NAN_BOXED(2115895626,32,FLEN)
NAN_BOXED(2161074882,32,FLEN)
NAN_BOXED(3296722432,32,FLEN)
NAN_BOXED(2115895626,32,FLEN)
NAN_BOXED(2161074882,32,FLEN)
NAN_BOXED(3296722688,32,FLEN)
NAN_BOXED(2115895626,32,FLEN)
NAN_BOXED(2161074882,32,FLEN)
NAN_BOXED(3296722816,32,FLEN)
NAN_BOXED(2115895626,32,FLEN)
NAN_BOXED(2161074882,32,FLEN)
NAN_BOXED(3296722880,32,FLEN)
NAN_BOXED(2115895626,32,FLEN)
NAN_BOXED(2161074882,32,FLEN)
NAN_BOXED(3296722912,32,FLEN)
NAN_BOXED(2115895626,32,FLEN)
NAN_BOXED(2161074882,32,FLEN)
NAN_BOXED(3296722928,32,FLEN)
NAN_BOXED(2115895626,32,FLEN)
NAN_BOXED(2161074882,32,FLEN)
NAN_BOXED(3296722936,32,FLEN)
NAN_BOXED(2115895626,32,FLEN)
NAN_BOXED(2161074882,32,FLEN)
NAN_BOXED(3296722940,32,FLEN)
NAN_BOXED(2115895626,32,FLEN)
NAN_BOXED(2161074882,32,FLEN)
NAN_BOXED(3296722942,32,FLEN)
NAN_BOXED(2115895626,32,FLEN)
NAN_BOXED(2161074882,32,FLEN)
NAN_BOXED(3296722943,32,FLEN)
NAN_BOXED(2116015636,32,FLEN)
NAN_BOXED(1087177346,32,FLEN)
NAN_BOXED(1845493760,32,FLEN)
NAN_BOXED(2116015636,32,FLEN)
NAN_BOXED(1087177346,32,FLEN)
NAN_BOXED(1845493761,32,FLEN)
NAN_BOXED(2116015636,32,FLEN)
NAN_BOXED(1087177346,32,FLEN)
NAN_BOXED(1845493763,32,FLEN)
NAN_BOXED(2116015636,32,FLEN)
NAN_BOXED(1087177346,32,FLEN)
NAN_BOXED(1845493767,32,FLEN)
NAN_BOXED(2116015636,32,FLEN)
NAN_BOXED(1087177346,32,FLEN)
NAN_BOXED(1845493775,32,FLEN)
NAN_BOXED(2116015636,32,FLEN)
NAN_BOXED(1087177346,32,FLEN)
NAN_BOXED(1845493791,32,FLEN)
NAN_BOXED(2116015636,32,FLEN)
NAN_BOXED(1087177346,32,FLEN)
NAN_BOXED(1845493823,32,FLEN)
NAN_BOXED(2116015636,32,FLEN)
NAN_BOXED(1087177346,32,FLEN)
NAN_BOXED(1845493887,32,FLEN)
NAN_BOXED(2116015636,32,FLEN)
NAN_BOXED(1087177346,32,FLEN)
NAN_BOXED(1845494015,32,FLEN)
NAN_BOXED(2116015636,32,FLEN)
NAN_BOXED(1087177346,32,FLEN)
NAN_BOXED(1845494271,32,FLEN)
NAN_BOXED(2116015636,32,FLEN)
NAN_BOXED(1087177346,32,FLEN)
NAN_BOXED(1845494783,32,FLEN)
NAN_BOXED(2116015636,32,FLEN)
NAN_BOXED(1087177346,32,FLEN)
NAN_BOXED(1845495807,32,FLEN)
NAN_BOXED(2116015636,32,FLEN)
NAN_BOXED(1087177346,32,FLEN)
NAN_BOXED(1845497855,32,FLEN)
NAN_BOXED(2116015636,32,FLEN)
NAN_BOXED(1087177346,32,FLEN)
NAN_BOXED(1845501951,32,FLEN)
NAN_BOXED(2116015636,32,FLEN)
NAN_BOXED(1087177346,32,FLEN)
NAN_BOXED(1845510143,32,FLEN)
NAN_BOXED(2116015636,32,FLEN)
NAN_BOXED(1087177346,32,FLEN)
NAN_BOXED(1845526527,32,FLEN)
NAN_BOXED(2116015636,32,FLEN)
NAN_BOXED(1087177346,32,FLEN)
NAN_BOXED(1845559295,32,FLEN)
NAN_BOXED(2116015636,32,FLEN)
NAN_BOXED(1087177346,32,FLEN)
NAN_BOXED(1845624831,32,FLEN)
NAN_BOXED(2116015636,32,FLEN)
NAN_BOXED(1087177346,32,FLEN)
NAN_BOXED(1845755903,32,FLEN)
NAN_BOXED(2116015636,32,FLEN)
NAN_BOXED(1087177346,32,FLEN)
NAN_BOXED(1846018047,32,FLEN)
NAN_BOXED(2116015636,32,FLEN)
NAN_BOXED(1087177346,32,FLEN)
NAN_BOXED(1846542335,32,FLEN)
NAN_BOXED(2116015636,32,FLEN)
NAN_BOXED(1087177346,32,FLEN)
NAN_BOXED(1847590911,32,FLEN)
NAN_BOXED(2116015636,32,FLEN)
NAN_BOXED(1087177346,32,FLEN)
NAN_BOXED(1849688063,32,FLEN)
NAN_BOXED(2116015636,32,FLEN)
NAN_BOXED(1087177346,32,FLEN)
NAN_BOXED(1849688064,32,FLEN)
NAN_BOXED(2116015636,32,FLEN)
NAN_BOXED(1087177346,32,FLEN)
NAN_BOXED(1851785216,32,FLEN)
NAN_BOXED(2116015636,32,FLEN)
NAN_BOXED(1087177346,32,FLEN)
NAN_BOXED(1852833792,32,FLEN)
NAN_BOXED(2116015636,32,FLEN)
NAN_BOXED(1087177346,32,FLEN)
NAN_BOXED(1853358080,32,FLEN)
NAN_BOXED(2116015636,32,FLEN)
NAN_BOXED(1087177346,32,FLEN)
NAN_BOXED(1853620224,32,FLEN)
NAN_BOXED(2116015636,32,FLEN)
NAN_BOXED(1087177346,32,FLEN)
NAN_BOXED(1853751296,32,FLEN)
NAN_BOXED(2116015636,32,FLEN)
NAN_BOXED(1087177346,32,FLEN)
NAN_BOXED(1853816832,32,FLEN)
NAN_BOXED(2116015636,32,FLEN)
NAN_BOXED(1087177346,32,FLEN)
NAN_BOXED(1853849600,32,FLEN)
NAN_BOXED(2116015636,32,FLEN)
NAN_BOXED(1087177346,32,FLEN)
NAN_BOXED(1853865984,32,FLEN)
NAN_BOXED(2116015636,32,FLEN)
NAN_BOXED(1087177346,32,FLEN)
NAN_BOXED(1853874176,32,FLEN)
NAN_BOXED(2116015636,32,FLEN)
NAN_BOXED(1087177346,32,FLEN)
NAN_BOXED(1853878272,32,FLEN)
NAN_BOXED(2116015636,32,FLEN)
NAN_BOXED(1087177346,32,FLEN)
NAN_BOXED(1853880320,32,FLEN)
NAN_BOXED(2116015636,32,FLEN)
NAN_BOXED(1087177346,32,FLEN)
NAN_BOXED(1853881344,32,FLEN)
NAN_BOXED(2116015636,32,FLEN)
NAN_BOXED(1087177346,32,FLEN)
NAN_BOXED(1853881856,32,FLEN)
NAN_BOXED(2116015636,32,FLEN)
NAN_BOXED(1087177346,32,FLEN)
NAN_BOXED(1853882112,32,FLEN)
NAN_BOXED(2116015636,32,FLEN)
NAN_BOXED(1087177346,32,FLEN)
NAN_BOXED(1853882240,32,FLEN)
NAN_BOXED(2116015636,32,FLEN)
NAN_BOXED(1087177346,32,FLEN)
NAN_BOXED(1853882304,32,FLEN)
NAN_BOXED(2116015636,32,FLEN)
NAN_BOXED(1087177346,32,FLEN)
NAN_BOXED(1853882336,32,FLEN)
NAN_BOXED(2116015636,32,FLEN)
NAN_BOXED(1087177346,32,FLEN)
NAN_BOXED(1853882352,32,FLEN)
NAN_BOXED(2116015636,32,FLEN)
NAN_BOXED(1087177346,32,FLEN)
NAN_BOXED(1853882360,32,FLEN)
NAN_BOXED(2116015636,32,FLEN)
NAN_BOXED(1087177346,32,FLEN)
NAN_BOXED(1853882364,32,FLEN)
NAN_BOXED(2116015636,32,FLEN)
NAN_BOXED(1087177346,32,FLEN)
NAN_BOXED(1853882366,32,FLEN)
NAN_BOXED(2116015636,32,FLEN)
NAN_BOXED(1087177346,32,FLEN)
NAN_BOXED(1853882367,32,FLEN)
NAN_BOXED(2116015636,32,FLEN)
NAN_BOXED(1087177346,32,FLEN)
NAN_BOXED(2130706433,32,FLEN)
NAN_BOXED(2116015636,32,FLEN)
NAN_BOXED(1087177346,32,FLEN)
NAN_BOXED(2130706435,32,FLEN)
NAN_BOXED(2116015636,32,FLEN)
NAN_BOXED(1087177346,32,FLEN)
NAN_BOXED(2130706439,32,FLEN)
NAN_BOXED(2116015636,32,FLEN)
NAN_BOXED(1087177346,32,FLEN)
NAN_BOXED(2132384153,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
