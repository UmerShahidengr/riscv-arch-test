
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:17:59 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_8960:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2910dd and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2910dd; op2val:0x80000000;
op3val:0x80000001; valaddr_reg:x3; val_offset:26880*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26880*0 + 3*70*FLEN/8, x4, x1, x2)

inst_8961:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2910dd and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2910dd; op2val:0x80000000;
op3val:0x80000003; valaddr_reg:x3; val_offset:26883*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26883*0 + 3*70*FLEN/8, x4, x1, x2)

inst_8962:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2910dd and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2910dd; op2val:0x80000000;
op3val:0x80000007; valaddr_reg:x3; val_offset:26886*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26886*0 + 3*70*FLEN/8, x4, x1, x2)

inst_8963:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2910dd and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2910dd; op2val:0x80000000;
op3val:0x80199999; valaddr_reg:x3; val_offset:26889*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26889*0 + 3*70*FLEN/8, x4, x1, x2)

inst_8964:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2910dd and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2910dd; op2val:0x80000000;
op3val:0x80249249; valaddr_reg:x3; val_offset:26892*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26892*0 + 3*70*FLEN/8, x4, x1, x2)

inst_8965:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2910dd and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2910dd; op2val:0x80000000;
op3val:0x80333333; valaddr_reg:x3; val_offset:26895*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26895*0 + 3*70*FLEN/8, x4, x1, x2)

inst_8966:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2910dd and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2910dd; op2val:0x80000000;
op3val:0x8036db6d; valaddr_reg:x3; val_offset:26898*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26898*0 + 3*70*FLEN/8, x4, x1, x2)

inst_8967:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2910dd and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2910dd; op2val:0x80000000;
op3val:0x803bbbbb; valaddr_reg:x3; val_offset:26901*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26901*0 + 3*70*FLEN/8, x4, x1, x2)

inst_8968:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2910dd and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2910dd; op2val:0x80000000;
op3val:0x80444444; valaddr_reg:x3; val_offset:26904*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26904*0 + 3*70*FLEN/8, x4, x1, x2)

inst_8969:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2910dd and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2910dd; op2val:0x80000000;
op3val:0x804ccccc; valaddr_reg:x3; val_offset:26907*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26907*0 + 3*70*FLEN/8, x4, x1, x2)

inst_8970:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2910dd and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2910dd; op2val:0x80000000;
op3val:0x805b6db6; valaddr_reg:x3; val_offset:26910*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26910*0 + 3*70*FLEN/8, x4, x1, x2)

inst_8971:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2910dd and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2910dd; op2val:0x80000000;
op3val:0x80666666; valaddr_reg:x3; val_offset:26913*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26913*0 + 3*70*FLEN/8, x4, x1, x2)

inst_8972:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2910dd and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2910dd; op2val:0x80000000;
op3val:0x806db6db; valaddr_reg:x3; val_offset:26916*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26916*0 + 3*70*FLEN/8, x4, x1, x2)

inst_8973:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2910dd and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2910dd; op2val:0x80000000;
op3val:0x807ffff8; valaddr_reg:x3; val_offset:26919*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26919*0 + 3*70*FLEN/8, x4, x1, x2)

inst_8974:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2910dd and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2910dd; op2val:0x80000000;
op3val:0x807ffffc; valaddr_reg:x3; val_offset:26922*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26922*0 + 3*70*FLEN/8, x4, x1, x2)

inst_8975:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2910dd and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2910dd; op2val:0x80000000;
op3val:0x807ffffe; valaddr_reg:x3; val_offset:26925*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26925*0 + 3*70*FLEN/8, x4, x1, x2)

inst_8976:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2910dd and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2910dd; op2val:0x80000000;
op3val:0x83800000; valaddr_reg:x3; val_offset:26928*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26928*0 + 3*70*FLEN/8, x4, x1, x2)

inst_8977:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2910dd and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2910dd; op2val:0x80000000;
op3val:0x83800001; valaddr_reg:x3; val_offset:26931*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26931*0 + 3*70*FLEN/8, x4, x1, x2)

inst_8978:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2910dd and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2910dd; op2val:0x80000000;
op3val:0x83800003; valaddr_reg:x3; val_offset:26934*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26934*0 + 3*70*FLEN/8, x4, x1, x2)

inst_8979:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2910dd and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2910dd; op2val:0x80000000;
op3val:0x83800007; valaddr_reg:x3; val_offset:26937*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26937*0 + 3*70*FLEN/8, x4, x1, x2)

inst_8980:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2910dd and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2910dd; op2val:0x80000000;
op3val:0x8380000f; valaddr_reg:x3; val_offset:26940*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26940*0 + 3*70*FLEN/8, x4, x1, x2)

inst_8981:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2910dd and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2910dd; op2val:0x80000000;
op3val:0x8380001f; valaddr_reg:x3; val_offset:26943*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26943*0 + 3*70*FLEN/8, x4, x1, x2)

inst_8982:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2910dd and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2910dd; op2val:0x80000000;
op3val:0x8380003f; valaddr_reg:x3; val_offset:26946*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26946*0 + 3*70*FLEN/8, x4, x1, x2)

inst_8983:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2910dd and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2910dd; op2val:0x80000000;
op3val:0x8380007f; valaddr_reg:x3; val_offset:26949*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26949*0 + 3*70*FLEN/8, x4, x1, x2)

inst_8984:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2910dd and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2910dd; op2val:0x80000000;
op3val:0x838000ff; valaddr_reg:x3; val_offset:26952*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26952*0 + 3*70*FLEN/8, x4, x1, x2)

inst_8985:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2910dd and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2910dd; op2val:0x80000000;
op3val:0x838001ff; valaddr_reg:x3; val_offset:26955*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26955*0 + 3*70*FLEN/8, x4, x1, x2)

inst_8986:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2910dd and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2910dd; op2val:0x80000000;
op3val:0x838003ff; valaddr_reg:x3; val_offset:26958*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26958*0 + 3*70*FLEN/8, x4, x1, x2)

inst_8987:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2910dd and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2910dd; op2val:0x80000000;
op3val:0x838007ff; valaddr_reg:x3; val_offset:26961*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26961*0 + 3*70*FLEN/8, x4, x1, x2)

inst_8988:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2910dd and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2910dd; op2val:0x80000000;
op3val:0x83800fff; valaddr_reg:x3; val_offset:26964*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26964*0 + 3*70*FLEN/8, x4, x1, x2)

inst_8989:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2910dd and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2910dd; op2val:0x80000000;
op3val:0x83801fff; valaddr_reg:x3; val_offset:26967*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26967*0 + 3*70*FLEN/8, x4, x1, x2)

inst_8990:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2910dd and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2910dd; op2val:0x80000000;
op3val:0x83803fff; valaddr_reg:x3; val_offset:26970*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26970*0 + 3*70*FLEN/8, x4, x1, x2)

inst_8991:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2910dd and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2910dd; op2val:0x80000000;
op3val:0x83807fff; valaddr_reg:x3; val_offset:26973*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26973*0 + 3*70*FLEN/8, x4, x1, x2)

inst_8992:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2910dd and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2910dd; op2val:0x80000000;
op3val:0x8380ffff; valaddr_reg:x3; val_offset:26976*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26976*0 + 3*70*FLEN/8, x4, x1, x2)

inst_8993:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2910dd and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2910dd; op2val:0x80000000;
op3val:0x8381ffff; valaddr_reg:x3; val_offset:26979*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26979*0 + 3*70*FLEN/8, x4, x1, x2)

inst_8994:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2910dd and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2910dd; op2val:0x80000000;
op3val:0x8383ffff; valaddr_reg:x3; val_offset:26982*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26982*0 + 3*70*FLEN/8, x4, x1, x2)

inst_8995:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2910dd and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2910dd; op2val:0x80000000;
op3val:0x8387ffff; valaddr_reg:x3; val_offset:26985*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26985*0 + 3*70*FLEN/8, x4, x1, x2)

inst_8996:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2910dd and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2910dd; op2val:0x80000000;
op3val:0x838fffff; valaddr_reg:x3; val_offset:26988*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26988*0 + 3*70*FLEN/8, x4, x1, x2)

inst_8997:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2910dd and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2910dd; op2val:0x80000000;
op3val:0x839fffff; valaddr_reg:x3; val_offset:26991*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26991*0 + 3*70*FLEN/8, x4, x1, x2)

inst_8998:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2910dd and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2910dd; op2val:0x80000000;
op3val:0x83bfffff; valaddr_reg:x3; val_offset:26994*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26994*0 + 3*70*FLEN/8, x4, x1, x2)

inst_8999:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2910dd and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2910dd; op2val:0x80000000;
op3val:0x83c00000; valaddr_reg:x3; val_offset:26997*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26997*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9000:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2910dd and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2910dd; op2val:0x80000000;
op3val:0x83e00000; valaddr_reg:x3; val_offset:27000*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27000*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9001:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2910dd and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2910dd; op2val:0x80000000;
op3val:0x83f00000; valaddr_reg:x3; val_offset:27003*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27003*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9002:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2910dd and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2910dd; op2val:0x80000000;
op3val:0x83f80000; valaddr_reg:x3; val_offset:27006*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27006*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9003:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2910dd and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2910dd; op2val:0x80000000;
op3val:0x83fc0000; valaddr_reg:x3; val_offset:27009*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27009*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9004:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2910dd and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2910dd; op2val:0x80000000;
op3val:0x83fe0000; valaddr_reg:x3; val_offset:27012*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27012*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9005:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2910dd and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2910dd; op2val:0x80000000;
op3val:0x83ff0000; valaddr_reg:x3; val_offset:27015*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27015*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9006:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2910dd and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2910dd; op2val:0x80000000;
op3val:0x83ff8000; valaddr_reg:x3; val_offset:27018*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27018*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9007:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2910dd and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2910dd; op2val:0x80000000;
op3val:0x83ffc000; valaddr_reg:x3; val_offset:27021*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27021*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9008:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2910dd and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2910dd; op2val:0x80000000;
op3val:0x83ffe000; valaddr_reg:x3; val_offset:27024*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27024*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9009:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2910dd and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2910dd; op2val:0x80000000;
op3val:0x83fff000; valaddr_reg:x3; val_offset:27027*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27027*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9010:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2910dd and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2910dd; op2val:0x80000000;
op3val:0x83fff800; valaddr_reg:x3; val_offset:27030*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27030*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9011:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2910dd and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2910dd; op2val:0x80000000;
op3val:0x83fffc00; valaddr_reg:x3; val_offset:27033*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27033*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9012:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2910dd and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2910dd; op2val:0x80000000;
op3val:0x83fffe00; valaddr_reg:x3; val_offset:27036*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27036*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9013:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2910dd and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2910dd; op2val:0x80000000;
op3val:0x83ffff00; valaddr_reg:x3; val_offset:27039*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27039*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9014:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2910dd and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2910dd; op2val:0x80000000;
op3val:0x83ffff80; valaddr_reg:x3; val_offset:27042*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27042*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9015:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2910dd and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2910dd; op2val:0x80000000;
op3val:0x83ffffc0; valaddr_reg:x3; val_offset:27045*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27045*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9016:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2910dd and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2910dd; op2val:0x80000000;
op3val:0x83ffffe0; valaddr_reg:x3; val_offset:27048*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27048*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9017:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2910dd and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2910dd; op2val:0x80000000;
op3val:0x83fffff0; valaddr_reg:x3; val_offset:27051*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27051*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9018:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2910dd and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2910dd; op2val:0x80000000;
op3val:0x83fffff8; valaddr_reg:x3; val_offset:27054*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27054*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9019:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2910dd and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2910dd; op2val:0x80000000;
op3val:0x83fffffc; valaddr_reg:x3; val_offset:27057*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27057*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9020:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2910dd and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2910dd; op2val:0x80000000;
op3val:0x83fffffe; valaddr_reg:x3; val_offset:27060*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27060*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9021:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2910dd and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2910dd; op2val:0x80000000;
op3val:0x83ffffff; valaddr_reg:x3; val_offset:27063*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27063*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9022:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2b1faf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3f7cb3 and fs3 == 0 and fe3 == 0xea and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2b1faf; op2val:0x40bf7cb3;
op3val:0x75000000; valaddr_reg:x3; val_offset:27066*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27066*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9023:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2b1faf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3f7cb3 and fs3 == 0 and fe3 == 0xea and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2b1faf; op2val:0x40bf7cb3;
op3val:0x75000001; valaddr_reg:x3; val_offset:27069*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27069*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9024:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2b1faf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3f7cb3 and fs3 == 0 and fe3 == 0xea and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2b1faf; op2val:0x40bf7cb3;
op3val:0x75000003; valaddr_reg:x3; val_offset:27072*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27072*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9025:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2b1faf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3f7cb3 and fs3 == 0 and fe3 == 0xea and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2b1faf; op2val:0x40bf7cb3;
op3val:0x75000007; valaddr_reg:x3; val_offset:27075*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27075*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9026:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2b1faf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3f7cb3 and fs3 == 0 and fe3 == 0xea and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2b1faf; op2val:0x40bf7cb3;
op3val:0x7500000f; valaddr_reg:x3; val_offset:27078*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27078*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9027:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2b1faf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3f7cb3 and fs3 == 0 and fe3 == 0xea and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2b1faf; op2val:0x40bf7cb3;
op3val:0x7500001f; valaddr_reg:x3; val_offset:27081*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27081*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9028:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2b1faf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3f7cb3 and fs3 == 0 and fe3 == 0xea and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2b1faf; op2val:0x40bf7cb3;
op3val:0x7500003f; valaddr_reg:x3; val_offset:27084*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27084*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9029:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2b1faf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3f7cb3 and fs3 == 0 and fe3 == 0xea and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2b1faf; op2val:0x40bf7cb3;
op3val:0x7500007f; valaddr_reg:x3; val_offset:27087*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27087*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9030:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2b1faf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3f7cb3 and fs3 == 0 and fe3 == 0xea and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2b1faf; op2val:0x40bf7cb3;
op3val:0x750000ff; valaddr_reg:x3; val_offset:27090*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27090*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9031:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2b1faf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3f7cb3 and fs3 == 0 and fe3 == 0xea and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2b1faf; op2val:0x40bf7cb3;
op3val:0x750001ff; valaddr_reg:x3; val_offset:27093*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27093*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9032:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2b1faf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3f7cb3 and fs3 == 0 and fe3 == 0xea and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2b1faf; op2val:0x40bf7cb3;
op3val:0x750003ff; valaddr_reg:x3; val_offset:27096*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27096*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9033:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2b1faf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3f7cb3 and fs3 == 0 and fe3 == 0xea and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2b1faf; op2val:0x40bf7cb3;
op3val:0x750007ff; valaddr_reg:x3; val_offset:27099*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27099*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9034:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2b1faf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3f7cb3 and fs3 == 0 and fe3 == 0xea and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2b1faf; op2val:0x40bf7cb3;
op3val:0x75000fff; valaddr_reg:x3; val_offset:27102*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27102*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9035:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2b1faf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3f7cb3 and fs3 == 0 and fe3 == 0xea and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2b1faf; op2val:0x40bf7cb3;
op3val:0x75001fff; valaddr_reg:x3; val_offset:27105*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27105*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9036:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2b1faf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3f7cb3 and fs3 == 0 and fe3 == 0xea and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2b1faf; op2val:0x40bf7cb3;
op3val:0x75003fff; valaddr_reg:x3; val_offset:27108*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27108*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9037:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2b1faf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3f7cb3 and fs3 == 0 and fe3 == 0xea and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2b1faf; op2val:0x40bf7cb3;
op3val:0x75007fff; valaddr_reg:x3; val_offset:27111*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27111*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9038:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2b1faf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3f7cb3 and fs3 == 0 and fe3 == 0xea and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2b1faf; op2val:0x40bf7cb3;
op3val:0x7500ffff; valaddr_reg:x3; val_offset:27114*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27114*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9039:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2b1faf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3f7cb3 and fs3 == 0 and fe3 == 0xea and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2b1faf; op2val:0x40bf7cb3;
op3val:0x7501ffff; valaddr_reg:x3; val_offset:27117*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27117*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9040:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2b1faf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3f7cb3 and fs3 == 0 and fe3 == 0xea and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2b1faf; op2val:0x40bf7cb3;
op3val:0x7503ffff; valaddr_reg:x3; val_offset:27120*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27120*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9041:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2b1faf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3f7cb3 and fs3 == 0 and fe3 == 0xea and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2b1faf; op2val:0x40bf7cb3;
op3val:0x7507ffff; valaddr_reg:x3; val_offset:27123*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27123*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9042:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2b1faf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3f7cb3 and fs3 == 0 and fe3 == 0xea and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2b1faf; op2val:0x40bf7cb3;
op3val:0x750fffff; valaddr_reg:x3; val_offset:27126*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27126*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9043:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2b1faf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3f7cb3 and fs3 == 0 and fe3 == 0xea and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2b1faf; op2val:0x40bf7cb3;
op3val:0x751fffff; valaddr_reg:x3; val_offset:27129*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27129*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9044:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2b1faf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3f7cb3 and fs3 == 0 and fe3 == 0xea and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2b1faf; op2val:0x40bf7cb3;
op3val:0x753fffff; valaddr_reg:x3; val_offset:27132*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27132*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9045:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2b1faf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3f7cb3 and fs3 == 0 and fe3 == 0xea and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2b1faf; op2val:0x40bf7cb3;
op3val:0x75400000; valaddr_reg:x3; val_offset:27135*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27135*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9046:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2b1faf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3f7cb3 and fs3 == 0 and fe3 == 0xea and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2b1faf; op2val:0x40bf7cb3;
op3val:0x75600000; valaddr_reg:x3; val_offset:27138*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27138*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9047:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2b1faf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3f7cb3 and fs3 == 0 and fe3 == 0xea and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2b1faf; op2val:0x40bf7cb3;
op3val:0x75700000; valaddr_reg:x3; val_offset:27141*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27141*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9048:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2b1faf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3f7cb3 and fs3 == 0 and fe3 == 0xea and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2b1faf; op2val:0x40bf7cb3;
op3val:0x75780000; valaddr_reg:x3; val_offset:27144*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27144*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9049:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2b1faf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3f7cb3 and fs3 == 0 and fe3 == 0xea and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2b1faf; op2val:0x40bf7cb3;
op3val:0x757c0000; valaddr_reg:x3; val_offset:27147*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27147*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9050:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2b1faf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3f7cb3 and fs3 == 0 and fe3 == 0xea and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2b1faf; op2val:0x40bf7cb3;
op3val:0x757e0000; valaddr_reg:x3; val_offset:27150*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27150*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9051:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2b1faf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3f7cb3 and fs3 == 0 and fe3 == 0xea and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2b1faf; op2val:0x40bf7cb3;
op3val:0x757f0000; valaddr_reg:x3; val_offset:27153*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27153*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9052:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2b1faf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3f7cb3 and fs3 == 0 and fe3 == 0xea and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2b1faf; op2val:0x40bf7cb3;
op3val:0x757f8000; valaddr_reg:x3; val_offset:27156*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27156*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9053:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2b1faf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3f7cb3 and fs3 == 0 and fe3 == 0xea and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2b1faf; op2val:0x40bf7cb3;
op3val:0x757fc000; valaddr_reg:x3; val_offset:27159*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27159*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9054:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2b1faf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3f7cb3 and fs3 == 0 and fe3 == 0xea and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2b1faf; op2val:0x40bf7cb3;
op3val:0x757fe000; valaddr_reg:x3; val_offset:27162*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27162*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9055:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2b1faf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3f7cb3 and fs3 == 0 and fe3 == 0xea and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2b1faf; op2val:0x40bf7cb3;
op3val:0x757ff000; valaddr_reg:x3; val_offset:27165*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27165*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9056:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2b1faf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3f7cb3 and fs3 == 0 and fe3 == 0xea and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2b1faf; op2val:0x40bf7cb3;
op3val:0x757ff800; valaddr_reg:x3; val_offset:27168*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27168*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9057:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2b1faf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3f7cb3 and fs3 == 0 and fe3 == 0xea and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2b1faf; op2val:0x40bf7cb3;
op3val:0x757ffc00; valaddr_reg:x3; val_offset:27171*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27171*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9058:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2b1faf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3f7cb3 and fs3 == 0 and fe3 == 0xea and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2b1faf; op2val:0x40bf7cb3;
op3val:0x757ffe00; valaddr_reg:x3; val_offset:27174*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27174*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9059:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2b1faf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3f7cb3 and fs3 == 0 and fe3 == 0xea and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2b1faf; op2val:0x40bf7cb3;
op3val:0x757fff00; valaddr_reg:x3; val_offset:27177*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27177*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9060:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2b1faf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3f7cb3 and fs3 == 0 and fe3 == 0xea and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2b1faf; op2val:0x40bf7cb3;
op3val:0x757fff80; valaddr_reg:x3; val_offset:27180*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27180*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9061:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2b1faf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3f7cb3 and fs3 == 0 and fe3 == 0xea and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2b1faf; op2val:0x40bf7cb3;
op3val:0x757fffc0; valaddr_reg:x3; val_offset:27183*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27183*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9062:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2b1faf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3f7cb3 and fs3 == 0 and fe3 == 0xea and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2b1faf; op2val:0x40bf7cb3;
op3val:0x757fffe0; valaddr_reg:x3; val_offset:27186*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27186*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9063:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2b1faf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3f7cb3 and fs3 == 0 and fe3 == 0xea and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2b1faf; op2val:0x40bf7cb3;
op3val:0x757ffff0; valaddr_reg:x3; val_offset:27189*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27189*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9064:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2b1faf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3f7cb3 and fs3 == 0 and fe3 == 0xea and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2b1faf; op2val:0x40bf7cb3;
op3val:0x757ffff8; valaddr_reg:x3; val_offset:27192*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27192*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9065:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2b1faf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3f7cb3 and fs3 == 0 and fe3 == 0xea and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2b1faf; op2val:0x40bf7cb3;
op3val:0x757ffffc; valaddr_reg:x3; val_offset:27195*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27195*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9066:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2b1faf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3f7cb3 and fs3 == 0 and fe3 == 0xea and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2b1faf; op2val:0x40bf7cb3;
op3val:0x757ffffe; valaddr_reg:x3; val_offset:27198*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27198*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9067:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2b1faf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3f7cb3 and fs3 == 0 and fe3 == 0xea and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2b1faf; op2val:0x40bf7cb3;
op3val:0x757fffff; valaddr_reg:x3; val_offset:27201*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27201*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9068:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2b1faf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3f7cb3 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2b1faf; op2val:0x40bf7cb3;
op3val:0x7f000001; valaddr_reg:x3; val_offset:27204*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27204*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9069:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2b1faf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3f7cb3 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2b1faf; op2val:0x40bf7cb3;
op3val:0x7f000003; valaddr_reg:x3; val_offset:27207*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27207*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9070:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2b1faf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3f7cb3 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2b1faf; op2val:0x40bf7cb3;
op3val:0x7f000007; valaddr_reg:x3; val_offset:27210*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27210*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9071:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2b1faf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3f7cb3 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2b1faf; op2val:0x40bf7cb3;
op3val:0x7f199999; valaddr_reg:x3; val_offset:27213*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27213*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9072:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2b1faf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3f7cb3 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2b1faf; op2val:0x40bf7cb3;
op3val:0x7f249249; valaddr_reg:x3; val_offset:27216*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27216*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9073:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2b1faf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3f7cb3 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2b1faf; op2val:0x40bf7cb3;
op3val:0x7f333333; valaddr_reg:x3; val_offset:27219*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27219*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9074:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2b1faf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3f7cb3 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2b1faf; op2val:0x40bf7cb3;
op3val:0x7f36db6d; valaddr_reg:x3; val_offset:27222*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27222*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9075:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2b1faf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3f7cb3 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2b1faf; op2val:0x40bf7cb3;
op3val:0x7f3bbbbb; valaddr_reg:x3; val_offset:27225*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27225*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9076:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2b1faf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3f7cb3 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2b1faf; op2val:0x40bf7cb3;
op3val:0x7f444444; valaddr_reg:x3; val_offset:27228*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27228*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9077:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2b1faf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3f7cb3 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2b1faf; op2val:0x40bf7cb3;
op3val:0x7f4ccccc; valaddr_reg:x3; val_offset:27231*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27231*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9078:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2b1faf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3f7cb3 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2b1faf; op2val:0x40bf7cb3;
op3val:0x7f5b6db6; valaddr_reg:x3; val_offset:27234*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27234*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9079:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2b1faf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3f7cb3 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2b1faf; op2val:0x40bf7cb3;
op3val:0x7f666666; valaddr_reg:x3; val_offset:27237*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27237*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9080:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2b1faf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3f7cb3 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2b1faf; op2val:0x40bf7cb3;
op3val:0x7f6db6db; valaddr_reg:x3; val_offset:27240*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27240*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9081:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2b1faf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3f7cb3 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2b1faf; op2val:0x40bf7cb3;
op3val:0x7f7ffff8; valaddr_reg:x3; val_offset:27243*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27243*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9082:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2b1faf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3f7cb3 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2b1faf; op2val:0x40bf7cb3;
op3val:0x7f7ffffc; valaddr_reg:x3; val_offset:27246*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27246*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9083:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2b1faf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3f7cb3 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2b1faf; op2val:0x40bf7cb3;
op3val:0x7f7ffffe; valaddr_reg:x3; val_offset:27249*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27249*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9084:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2b56d0 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x3f3f17 and fs3 == 1 and fe3 == 0x4c and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2b56d0; op2val:0x80bf3f17;
op3val:0xa6000000; valaddr_reg:x3; val_offset:27252*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27252*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9085:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2b56d0 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x3f3f17 and fs3 == 1 and fe3 == 0x4c and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2b56d0; op2val:0x80bf3f17;
op3val:0xa6000001; valaddr_reg:x3; val_offset:27255*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27255*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9086:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2b56d0 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x3f3f17 and fs3 == 1 and fe3 == 0x4c and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2b56d0; op2val:0x80bf3f17;
op3val:0xa6000003; valaddr_reg:x3; val_offset:27258*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27258*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9087:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2b56d0 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x3f3f17 and fs3 == 1 and fe3 == 0x4c and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2b56d0; op2val:0x80bf3f17;
op3val:0xa6000007; valaddr_reg:x3; val_offset:27261*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27261*0 + 3*70*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2116620509,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2116620509,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483651,32,FLEN)
NAN_BOXED(2116620509,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483655,32,FLEN)
NAN_BOXED(2116620509,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149161369,32,FLEN)
NAN_BOXED(2116620509,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149880393,32,FLEN)
NAN_BOXED(2116620509,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2150839091,32,FLEN)
NAN_BOXED(2116620509,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151078765,32,FLEN)
NAN_BOXED(2116620509,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151398331,32,FLEN)
NAN_BOXED(2116620509,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151957572,32,FLEN)
NAN_BOXED(2116620509,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2152516812,32,FLEN)
NAN_BOXED(2116620509,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2153475510,32,FLEN)
NAN_BOXED(2116620509,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154194534,32,FLEN)
NAN_BOXED(2116620509,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154673883,32,FLEN)
NAN_BOXED(2116620509,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872248,32,FLEN)
NAN_BOXED(2116620509,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872252,32,FLEN)
NAN_BOXED(2116620509,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2116620509,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206203904,32,FLEN)
NAN_BOXED(2116620509,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206203905,32,FLEN)
NAN_BOXED(2116620509,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206203907,32,FLEN)
NAN_BOXED(2116620509,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206203911,32,FLEN)
NAN_BOXED(2116620509,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206203919,32,FLEN)
NAN_BOXED(2116620509,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206203935,32,FLEN)
NAN_BOXED(2116620509,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206203967,32,FLEN)
NAN_BOXED(2116620509,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206204031,32,FLEN)
NAN_BOXED(2116620509,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206204159,32,FLEN)
NAN_BOXED(2116620509,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206204415,32,FLEN)
NAN_BOXED(2116620509,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206204927,32,FLEN)
NAN_BOXED(2116620509,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206205951,32,FLEN)
NAN_BOXED(2116620509,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206207999,32,FLEN)
NAN_BOXED(2116620509,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206212095,32,FLEN)
NAN_BOXED(2116620509,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206220287,32,FLEN)
NAN_BOXED(2116620509,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206236671,32,FLEN)
NAN_BOXED(2116620509,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206269439,32,FLEN)
NAN_BOXED(2116620509,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206334975,32,FLEN)
NAN_BOXED(2116620509,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206466047,32,FLEN)
NAN_BOXED(2116620509,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206728191,32,FLEN)
NAN_BOXED(2116620509,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2207252479,32,FLEN)
NAN_BOXED(2116620509,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2208301055,32,FLEN)
NAN_BOXED(2116620509,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2210398207,32,FLEN)
NAN_BOXED(2116620509,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2210398208,32,FLEN)
NAN_BOXED(2116620509,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2212495360,32,FLEN)
NAN_BOXED(2116620509,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2213543936,32,FLEN)
NAN_BOXED(2116620509,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214068224,32,FLEN)
NAN_BOXED(2116620509,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214330368,32,FLEN)
NAN_BOXED(2116620509,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214461440,32,FLEN)
NAN_BOXED(2116620509,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214526976,32,FLEN)
NAN_BOXED(2116620509,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214559744,32,FLEN)
NAN_BOXED(2116620509,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214576128,32,FLEN)
NAN_BOXED(2116620509,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214584320,32,FLEN)
NAN_BOXED(2116620509,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214588416,32,FLEN)
NAN_BOXED(2116620509,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214590464,32,FLEN)
NAN_BOXED(2116620509,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214591488,32,FLEN)
NAN_BOXED(2116620509,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214592000,32,FLEN)
NAN_BOXED(2116620509,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214592256,32,FLEN)
NAN_BOXED(2116620509,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214592384,32,FLEN)
NAN_BOXED(2116620509,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214592448,32,FLEN)
NAN_BOXED(2116620509,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214592480,32,FLEN)
NAN_BOXED(2116620509,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214592496,32,FLEN)
NAN_BOXED(2116620509,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214592504,32,FLEN)
NAN_BOXED(2116620509,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214592508,32,FLEN)
NAN_BOXED(2116620509,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214592510,32,FLEN)
NAN_BOXED(2116620509,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214592511,32,FLEN)
NAN_BOXED(2116755375,32,FLEN)
NAN_BOXED(1086291123,32,FLEN)
NAN_BOXED(1962934272,32,FLEN)
NAN_BOXED(2116755375,32,FLEN)
NAN_BOXED(1086291123,32,FLEN)
NAN_BOXED(1962934273,32,FLEN)
NAN_BOXED(2116755375,32,FLEN)
NAN_BOXED(1086291123,32,FLEN)
NAN_BOXED(1962934275,32,FLEN)
NAN_BOXED(2116755375,32,FLEN)
NAN_BOXED(1086291123,32,FLEN)
NAN_BOXED(1962934279,32,FLEN)
NAN_BOXED(2116755375,32,FLEN)
NAN_BOXED(1086291123,32,FLEN)
NAN_BOXED(1962934287,32,FLEN)
NAN_BOXED(2116755375,32,FLEN)
NAN_BOXED(1086291123,32,FLEN)
NAN_BOXED(1962934303,32,FLEN)
NAN_BOXED(2116755375,32,FLEN)
NAN_BOXED(1086291123,32,FLEN)
NAN_BOXED(1962934335,32,FLEN)
NAN_BOXED(2116755375,32,FLEN)
NAN_BOXED(1086291123,32,FLEN)
NAN_BOXED(1962934399,32,FLEN)
NAN_BOXED(2116755375,32,FLEN)
NAN_BOXED(1086291123,32,FLEN)
NAN_BOXED(1962934527,32,FLEN)
NAN_BOXED(2116755375,32,FLEN)
NAN_BOXED(1086291123,32,FLEN)
NAN_BOXED(1962934783,32,FLEN)
NAN_BOXED(2116755375,32,FLEN)
NAN_BOXED(1086291123,32,FLEN)
NAN_BOXED(1962935295,32,FLEN)
NAN_BOXED(2116755375,32,FLEN)
NAN_BOXED(1086291123,32,FLEN)
NAN_BOXED(1962936319,32,FLEN)
NAN_BOXED(2116755375,32,FLEN)
NAN_BOXED(1086291123,32,FLEN)
NAN_BOXED(1962938367,32,FLEN)
NAN_BOXED(2116755375,32,FLEN)
NAN_BOXED(1086291123,32,FLEN)
NAN_BOXED(1962942463,32,FLEN)
NAN_BOXED(2116755375,32,FLEN)
NAN_BOXED(1086291123,32,FLEN)
NAN_BOXED(1962950655,32,FLEN)
NAN_BOXED(2116755375,32,FLEN)
NAN_BOXED(1086291123,32,FLEN)
NAN_BOXED(1962967039,32,FLEN)
NAN_BOXED(2116755375,32,FLEN)
NAN_BOXED(1086291123,32,FLEN)
NAN_BOXED(1962999807,32,FLEN)
NAN_BOXED(2116755375,32,FLEN)
NAN_BOXED(1086291123,32,FLEN)
NAN_BOXED(1963065343,32,FLEN)
NAN_BOXED(2116755375,32,FLEN)
NAN_BOXED(1086291123,32,FLEN)
NAN_BOXED(1963196415,32,FLEN)
NAN_BOXED(2116755375,32,FLEN)
NAN_BOXED(1086291123,32,FLEN)
NAN_BOXED(1963458559,32,FLEN)
NAN_BOXED(2116755375,32,FLEN)
NAN_BOXED(1086291123,32,FLEN)
NAN_BOXED(1963982847,32,FLEN)
NAN_BOXED(2116755375,32,FLEN)
NAN_BOXED(1086291123,32,FLEN)
NAN_BOXED(1965031423,32,FLEN)
NAN_BOXED(2116755375,32,FLEN)
NAN_BOXED(1086291123,32,FLEN)
NAN_BOXED(1967128575,32,FLEN)
NAN_BOXED(2116755375,32,FLEN)
NAN_BOXED(1086291123,32,FLEN)
NAN_BOXED(1967128576,32,FLEN)
NAN_BOXED(2116755375,32,FLEN)
NAN_BOXED(1086291123,32,FLEN)
NAN_BOXED(1969225728,32,FLEN)
NAN_BOXED(2116755375,32,FLEN)
NAN_BOXED(1086291123,32,FLEN)
NAN_BOXED(1970274304,32,FLEN)
NAN_BOXED(2116755375,32,FLEN)
NAN_BOXED(1086291123,32,FLEN)
NAN_BOXED(1970798592,32,FLEN)
NAN_BOXED(2116755375,32,FLEN)
NAN_BOXED(1086291123,32,FLEN)
NAN_BOXED(1971060736,32,FLEN)
NAN_BOXED(2116755375,32,FLEN)
NAN_BOXED(1086291123,32,FLEN)
NAN_BOXED(1971191808,32,FLEN)
NAN_BOXED(2116755375,32,FLEN)
NAN_BOXED(1086291123,32,FLEN)
NAN_BOXED(1971257344,32,FLEN)
NAN_BOXED(2116755375,32,FLEN)
NAN_BOXED(1086291123,32,FLEN)
NAN_BOXED(1971290112,32,FLEN)
NAN_BOXED(2116755375,32,FLEN)
NAN_BOXED(1086291123,32,FLEN)
NAN_BOXED(1971306496,32,FLEN)
NAN_BOXED(2116755375,32,FLEN)
NAN_BOXED(1086291123,32,FLEN)
NAN_BOXED(1971314688,32,FLEN)
NAN_BOXED(2116755375,32,FLEN)
NAN_BOXED(1086291123,32,FLEN)
NAN_BOXED(1971318784,32,FLEN)
NAN_BOXED(2116755375,32,FLEN)
NAN_BOXED(1086291123,32,FLEN)
NAN_BOXED(1971320832,32,FLEN)
NAN_BOXED(2116755375,32,FLEN)
NAN_BOXED(1086291123,32,FLEN)
NAN_BOXED(1971321856,32,FLEN)
NAN_BOXED(2116755375,32,FLEN)
NAN_BOXED(1086291123,32,FLEN)
NAN_BOXED(1971322368,32,FLEN)
NAN_BOXED(2116755375,32,FLEN)
NAN_BOXED(1086291123,32,FLEN)
NAN_BOXED(1971322624,32,FLEN)
NAN_BOXED(2116755375,32,FLEN)
NAN_BOXED(1086291123,32,FLEN)
NAN_BOXED(1971322752,32,FLEN)
NAN_BOXED(2116755375,32,FLEN)
NAN_BOXED(1086291123,32,FLEN)
NAN_BOXED(1971322816,32,FLEN)
NAN_BOXED(2116755375,32,FLEN)
NAN_BOXED(1086291123,32,FLEN)
NAN_BOXED(1971322848,32,FLEN)
NAN_BOXED(2116755375,32,FLEN)
NAN_BOXED(1086291123,32,FLEN)
NAN_BOXED(1971322864,32,FLEN)
NAN_BOXED(2116755375,32,FLEN)
NAN_BOXED(1086291123,32,FLEN)
NAN_BOXED(1971322872,32,FLEN)
NAN_BOXED(2116755375,32,FLEN)
NAN_BOXED(1086291123,32,FLEN)
NAN_BOXED(1971322876,32,FLEN)
NAN_BOXED(2116755375,32,FLEN)
NAN_BOXED(1086291123,32,FLEN)
NAN_BOXED(1971322878,32,FLEN)
NAN_BOXED(2116755375,32,FLEN)
NAN_BOXED(1086291123,32,FLEN)
NAN_BOXED(1971322879,32,FLEN)
NAN_BOXED(2116755375,32,FLEN)
NAN_BOXED(1086291123,32,FLEN)
NAN_BOXED(2130706433,32,FLEN)
NAN_BOXED(2116755375,32,FLEN)
NAN_BOXED(1086291123,32,FLEN)
NAN_BOXED(2130706435,32,FLEN)
NAN_BOXED(2116755375,32,FLEN)
NAN_BOXED(1086291123,32,FLEN)
NAN_BOXED(2130706439,32,FLEN)
NAN_BOXED(2116755375,32,FLEN)
NAN_BOXED(1086291123,32,FLEN)
NAN_BOXED(2132384153,32,FLEN)
NAN_BOXED(2116755375,32,FLEN)
NAN_BOXED(1086291123,32,FLEN)
NAN_BOXED(2133103177,32,FLEN)
NAN_BOXED(2116755375,32,FLEN)
NAN_BOXED(1086291123,32,FLEN)
NAN_BOXED(2134061875,32,FLEN)
NAN_BOXED(2116755375,32,FLEN)
NAN_BOXED(1086291123,32,FLEN)
NAN_BOXED(2134301549,32,FLEN)
NAN_BOXED(2116755375,32,FLEN)
NAN_BOXED(1086291123,32,FLEN)
NAN_BOXED(2134621115,32,FLEN)
NAN_BOXED(2116755375,32,FLEN)
NAN_BOXED(1086291123,32,FLEN)
NAN_BOXED(2135180356,32,FLEN)
NAN_BOXED(2116755375,32,FLEN)
NAN_BOXED(1086291123,32,FLEN)
NAN_BOXED(2135739596,32,FLEN)
NAN_BOXED(2116755375,32,FLEN)
NAN_BOXED(1086291123,32,FLEN)
NAN_BOXED(2136698294,32,FLEN)
NAN_BOXED(2116755375,32,FLEN)
NAN_BOXED(1086291123,32,FLEN)
NAN_BOXED(2137417318,32,FLEN)
NAN_BOXED(2116755375,32,FLEN)
NAN_BOXED(1086291123,32,FLEN)
NAN_BOXED(2137896667,32,FLEN)
NAN_BOXED(2116755375,32,FLEN)
NAN_BOXED(1086291123,32,FLEN)
NAN_BOXED(2139095032,32,FLEN)
NAN_BOXED(2116755375,32,FLEN)
NAN_BOXED(1086291123,32,FLEN)
NAN_BOXED(2139095036,32,FLEN)
NAN_BOXED(2116755375,32,FLEN)
NAN_BOXED(1086291123,32,FLEN)
NAN_BOXED(2139095038,32,FLEN)
NAN_BOXED(2116769488,32,FLEN)
NAN_BOXED(2160017175,32,FLEN)
NAN_BOXED(2785017856,32,FLEN)
NAN_BOXED(2116769488,32,FLEN)
NAN_BOXED(2160017175,32,FLEN)
NAN_BOXED(2785017857,32,FLEN)
NAN_BOXED(2116769488,32,FLEN)
NAN_BOXED(2160017175,32,FLEN)
NAN_BOXED(2785017859,32,FLEN)
NAN_BOXED(2116769488,32,FLEN)
NAN_BOXED(2160017175,32,FLEN)
NAN_BOXED(2785017863,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
