
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:17:59 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_9088:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2b56d0 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x3f3f17 and fs3 == 1 and fe3 == 0x4c and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2b56d0; op2val:0x80bf3f17;
op3val:0xa600000f; valaddr_reg:x3; val_offset:27264*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27264*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9089:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2b56d0 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x3f3f17 and fs3 == 1 and fe3 == 0x4c and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2b56d0; op2val:0x80bf3f17;
op3val:0xa600001f; valaddr_reg:x3; val_offset:27267*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27267*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9090:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2b56d0 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x3f3f17 and fs3 == 1 and fe3 == 0x4c and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2b56d0; op2val:0x80bf3f17;
op3val:0xa600003f; valaddr_reg:x3; val_offset:27270*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27270*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9091:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2b56d0 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x3f3f17 and fs3 == 1 and fe3 == 0x4c and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2b56d0; op2val:0x80bf3f17;
op3val:0xa600007f; valaddr_reg:x3; val_offset:27273*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27273*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9092:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2b56d0 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x3f3f17 and fs3 == 1 and fe3 == 0x4c and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2b56d0; op2val:0x80bf3f17;
op3val:0xa60000ff; valaddr_reg:x3; val_offset:27276*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27276*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9093:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2b56d0 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x3f3f17 and fs3 == 1 and fe3 == 0x4c and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2b56d0; op2val:0x80bf3f17;
op3val:0xa60001ff; valaddr_reg:x3; val_offset:27279*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27279*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9094:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2b56d0 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x3f3f17 and fs3 == 1 and fe3 == 0x4c and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2b56d0; op2val:0x80bf3f17;
op3val:0xa60003ff; valaddr_reg:x3; val_offset:27282*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27282*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9095:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2b56d0 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x3f3f17 and fs3 == 1 and fe3 == 0x4c and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2b56d0; op2val:0x80bf3f17;
op3val:0xa60007ff; valaddr_reg:x3; val_offset:27285*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27285*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9096:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2b56d0 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x3f3f17 and fs3 == 1 and fe3 == 0x4c and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2b56d0; op2val:0x80bf3f17;
op3val:0xa6000fff; valaddr_reg:x3; val_offset:27288*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27288*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9097:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2b56d0 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x3f3f17 and fs3 == 1 and fe3 == 0x4c and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2b56d0; op2val:0x80bf3f17;
op3val:0xa6001fff; valaddr_reg:x3; val_offset:27291*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27291*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9098:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2b56d0 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x3f3f17 and fs3 == 1 and fe3 == 0x4c and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2b56d0; op2val:0x80bf3f17;
op3val:0xa6003fff; valaddr_reg:x3; val_offset:27294*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27294*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9099:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2b56d0 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x3f3f17 and fs3 == 1 and fe3 == 0x4c and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2b56d0; op2val:0x80bf3f17;
op3val:0xa6007fff; valaddr_reg:x3; val_offset:27297*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27297*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9100:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2b56d0 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x3f3f17 and fs3 == 1 and fe3 == 0x4c and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2b56d0; op2val:0x80bf3f17;
op3val:0xa600ffff; valaddr_reg:x3; val_offset:27300*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27300*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9101:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2b56d0 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x3f3f17 and fs3 == 1 and fe3 == 0x4c and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2b56d0; op2val:0x80bf3f17;
op3val:0xa601ffff; valaddr_reg:x3; val_offset:27303*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27303*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9102:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2b56d0 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x3f3f17 and fs3 == 1 and fe3 == 0x4c and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2b56d0; op2val:0x80bf3f17;
op3val:0xa603ffff; valaddr_reg:x3; val_offset:27306*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27306*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9103:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2b56d0 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x3f3f17 and fs3 == 1 and fe3 == 0x4c and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2b56d0; op2val:0x80bf3f17;
op3val:0xa607ffff; valaddr_reg:x3; val_offset:27309*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27309*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9104:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2b56d0 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x3f3f17 and fs3 == 1 and fe3 == 0x4c and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2b56d0; op2val:0x80bf3f17;
op3val:0xa60fffff; valaddr_reg:x3; val_offset:27312*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27312*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9105:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2b56d0 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x3f3f17 and fs3 == 1 and fe3 == 0x4c and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2b56d0; op2val:0x80bf3f17;
op3val:0xa61fffff; valaddr_reg:x3; val_offset:27315*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27315*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9106:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2b56d0 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x3f3f17 and fs3 == 1 and fe3 == 0x4c and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2b56d0; op2val:0x80bf3f17;
op3val:0xa63fffff; valaddr_reg:x3; val_offset:27318*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27318*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9107:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2b56d0 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x3f3f17 and fs3 == 1 and fe3 == 0x4c and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2b56d0; op2val:0x80bf3f17;
op3val:0xa6400000; valaddr_reg:x3; val_offset:27321*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27321*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9108:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2b56d0 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x3f3f17 and fs3 == 1 and fe3 == 0x4c and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2b56d0; op2val:0x80bf3f17;
op3val:0xa6600000; valaddr_reg:x3; val_offset:27324*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27324*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9109:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2b56d0 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x3f3f17 and fs3 == 1 and fe3 == 0x4c and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2b56d0; op2val:0x80bf3f17;
op3val:0xa6700000; valaddr_reg:x3; val_offset:27327*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27327*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9110:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2b56d0 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x3f3f17 and fs3 == 1 and fe3 == 0x4c and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2b56d0; op2val:0x80bf3f17;
op3val:0xa6780000; valaddr_reg:x3; val_offset:27330*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27330*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9111:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2b56d0 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x3f3f17 and fs3 == 1 and fe3 == 0x4c and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2b56d0; op2val:0x80bf3f17;
op3val:0xa67c0000; valaddr_reg:x3; val_offset:27333*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27333*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9112:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2b56d0 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x3f3f17 and fs3 == 1 and fe3 == 0x4c and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2b56d0; op2val:0x80bf3f17;
op3val:0xa67e0000; valaddr_reg:x3; val_offset:27336*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27336*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9113:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2b56d0 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x3f3f17 and fs3 == 1 and fe3 == 0x4c and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2b56d0; op2val:0x80bf3f17;
op3val:0xa67f0000; valaddr_reg:x3; val_offset:27339*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27339*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9114:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2b56d0 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x3f3f17 and fs3 == 1 and fe3 == 0x4c and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2b56d0; op2val:0x80bf3f17;
op3val:0xa67f8000; valaddr_reg:x3; val_offset:27342*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27342*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9115:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2b56d0 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x3f3f17 and fs3 == 1 and fe3 == 0x4c and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2b56d0; op2val:0x80bf3f17;
op3val:0xa67fc000; valaddr_reg:x3; val_offset:27345*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27345*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9116:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2b56d0 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x3f3f17 and fs3 == 1 and fe3 == 0x4c and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2b56d0; op2val:0x80bf3f17;
op3val:0xa67fe000; valaddr_reg:x3; val_offset:27348*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27348*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9117:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2b56d0 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x3f3f17 and fs3 == 1 and fe3 == 0x4c and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2b56d0; op2val:0x80bf3f17;
op3val:0xa67ff000; valaddr_reg:x3; val_offset:27351*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27351*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9118:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2b56d0 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x3f3f17 and fs3 == 1 and fe3 == 0x4c and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2b56d0; op2val:0x80bf3f17;
op3val:0xa67ff800; valaddr_reg:x3; val_offset:27354*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27354*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9119:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2b56d0 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x3f3f17 and fs3 == 1 and fe3 == 0x4c and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2b56d0; op2val:0x80bf3f17;
op3val:0xa67ffc00; valaddr_reg:x3; val_offset:27357*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27357*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9120:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2b56d0 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x3f3f17 and fs3 == 1 and fe3 == 0x4c and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2b56d0; op2val:0x80bf3f17;
op3val:0xa67ffe00; valaddr_reg:x3; val_offset:27360*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27360*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9121:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2b56d0 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x3f3f17 and fs3 == 1 and fe3 == 0x4c and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2b56d0; op2val:0x80bf3f17;
op3val:0xa67fff00; valaddr_reg:x3; val_offset:27363*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27363*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9122:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2b56d0 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x3f3f17 and fs3 == 1 and fe3 == 0x4c and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2b56d0; op2val:0x80bf3f17;
op3val:0xa67fff80; valaddr_reg:x3; val_offset:27366*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27366*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9123:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2b56d0 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x3f3f17 and fs3 == 1 and fe3 == 0x4c and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2b56d0; op2val:0x80bf3f17;
op3val:0xa67fffc0; valaddr_reg:x3; val_offset:27369*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27369*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9124:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2b56d0 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x3f3f17 and fs3 == 1 and fe3 == 0x4c and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2b56d0; op2val:0x80bf3f17;
op3val:0xa67fffe0; valaddr_reg:x3; val_offset:27372*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27372*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9125:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2b56d0 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x3f3f17 and fs3 == 1 and fe3 == 0x4c and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2b56d0; op2val:0x80bf3f17;
op3val:0xa67ffff0; valaddr_reg:x3; val_offset:27375*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27375*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9126:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2b56d0 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x3f3f17 and fs3 == 1 and fe3 == 0x4c and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2b56d0; op2val:0x80bf3f17;
op3val:0xa67ffff8; valaddr_reg:x3; val_offset:27378*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27378*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9127:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2b56d0 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x3f3f17 and fs3 == 1 and fe3 == 0x4c and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2b56d0; op2val:0x80bf3f17;
op3val:0xa67ffffc; valaddr_reg:x3; val_offset:27381*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27381*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9128:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2b56d0 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x3f3f17 and fs3 == 1 and fe3 == 0x4c and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2b56d0; op2val:0x80bf3f17;
op3val:0xa67ffffe; valaddr_reg:x3; val_offset:27384*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27384*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9129:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2b56d0 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x3f3f17 and fs3 == 1 and fe3 == 0x4c and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2b56d0; op2val:0x80bf3f17;
op3val:0xa67fffff; valaddr_reg:x3; val_offset:27387*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27387*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9130:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2b56d0 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x3f3f17 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2b56d0; op2val:0x80bf3f17;
op3val:0xbf800001; valaddr_reg:x3; val_offset:27390*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27390*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9131:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2b56d0 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x3f3f17 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2b56d0; op2val:0x80bf3f17;
op3val:0xbf800003; valaddr_reg:x3; val_offset:27393*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27393*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9132:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2b56d0 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x3f3f17 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2b56d0; op2val:0x80bf3f17;
op3val:0xbf800007; valaddr_reg:x3; val_offset:27396*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27396*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9133:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2b56d0 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x3f3f17 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2b56d0; op2val:0x80bf3f17;
op3val:0xbf999999; valaddr_reg:x3; val_offset:27399*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27399*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9134:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2b56d0 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x3f3f17 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2b56d0; op2val:0x80bf3f17;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:27402*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27402*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9135:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2b56d0 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x3f3f17 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2b56d0; op2val:0x80bf3f17;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:27405*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27405*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9136:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2b56d0 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x3f3f17 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2b56d0; op2val:0x80bf3f17;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:27408*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27408*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9137:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2b56d0 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x3f3f17 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2b56d0; op2val:0x80bf3f17;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:27411*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27411*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9138:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2b56d0 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x3f3f17 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2b56d0; op2val:0x80bf3f17;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:27414*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27414*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9139:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2b56d0 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x3f3f17 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2b56d0; op2val:0x80bf3f17;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:27417*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27417*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9140:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2b56d0 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x3f3f17 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2b56d0; op2val:0x80bf3f17;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:27420*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27420*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9141:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2b56d0 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x3f3f17 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2b56d0; op2val:0x80bf3f17;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:27423*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27423*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9142:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2b56d0 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x3f3f17 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2b56d0; op2val:0x80bf3f17;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:27426*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27426*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9143:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2b56d0 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x3f3f17 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2b56d0; op2val:0x80bf3f17;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:27429*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27429*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9144:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2b56d0 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x3f3f17 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2b56d0; op2val:0x80bf3f17;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:27432*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27432*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9145:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2b56d0 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x3f3f17 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2b56d0; op2val:0x80bf3f17;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:27435*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27435*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9146:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2cde9f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2cde9f; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:27438*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27438*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9147:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2cde9f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2cde9f; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:27441*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27441*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9148:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2cde9f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2cde9f; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:27444*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27444*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9149:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2cde9f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2cde9f; op2val:0x0;
op3val:0x199999; valaddr_reg:x3; val_offset:27447*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27447*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9150:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2cde9f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2cde9f; op2val:0x0;
op3val:0x249249; valaddr_reg:x3; val_offset:27450*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27450*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9151:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2cde9f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2cde9f; op2val:0x0;
op3val:0x333333; valaddr_reg:x3; val_offset:27453*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27453*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9152:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2cde9f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2cde9f; op2val:0x0;
op3val:0x36db6d; valaddr_reg:x3; val_offset:27456*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27456*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9153:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2cde9f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2cde9f; op2val:0x0;
op3val:0x3bbbbb; valaddr_reg:x3; val_offset:27459*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27459*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9154:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2cde9f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2cde9f; op2val:0x0;
op3val:0x444444; valaddr_reg:x3; val_offset:27462*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27462*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9155:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2cde9f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2cde9f; op2val:0x0;
op3val:0x4ccccc; valaddr_reg:x3; val_offset:27465*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27465*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9156:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2cde9f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2cde9f; op2val:0x0;
op3val:0x5b6db6; valaddr_reg:x3; val_offset:27468*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27468*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9157:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2cde9f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2cde9f; op2val:0x0;
op3val:0x666666; valaddr_reg:x3; val_offset:27471*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27471*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9158:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2cde9f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2cde9f; op2val:0x0;
op3val:0x6db6db; valaddr_reg:x3; val_offset:27474*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27474*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9159:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2cde9f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2cde9f; op2val:0x0;
op3val:0x7ffff8; valaddr_reg:x3; val_offset:27477*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27477*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9160:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2cde9f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2cde9f; op2val:0x0;
op3val:0x7ffffc; valaddr_reg:x3; val_offset:27480*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27480*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9161:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2cde9f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2cde9f; op2val:0x0;
op3val:0x7ffffe; valaddr_reg:x3; val_offset:27483*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27483*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9162:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2cde9f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2cde9f; op2val:0x0;
op3val:0xc800000; valaddr_reg:x3; val_offset:27486*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27486*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9163:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2cde9f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2cde9f; op2val:0x0;
op3val:0xc800001; valaddr_reg:x3; val_offset:27489*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27489*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9164:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2cde9f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2cde9f; op2val:0x0;
op3val:0xc800003; valaddr_reg:x3; val_offset:27492*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27492*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9165:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2cde9f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2cde9f; op2val:0x0;
op3val:0xc800007; valaddr_reg:x3; val_offset:27495*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27495*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9166:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2cde9f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2cde9f; op2val:0x0;
op3val:0xc80000f; valaddr_reg:x3; val_offset:27498*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27498*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9167:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2cde9f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2cde9f; op2val:0x0;
op3val:0xc80001f; valaddr_reg:x3; val_offset:27501*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27501*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9168:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2cde9f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2cde9f; op2val:0x0;
op3val:0xc80003f; valaddr_reg:x3; val_offset:27504*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27504*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9169:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2cde9f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2cde9f; op2val:0x0;
op3val:0xc80007f; valaddr_reg:x3; val_offset:27507*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27507*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9170:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2cde9f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2cde9f; op2val:0x0;
op3val:0xc8000ff; valaddr_reg:x3; val_offset:27510*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27510*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9171:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2cde9f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2cde9f; op2val:0x0;
op3val:0xc8001ff; valaddr_reg:x3; val_offset:27513*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27513*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9172:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2cde9f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2cde9f; op2val:0x0;
op3val:0xc8003ff; valaddr_reg:x3; val_offset:27516*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27516*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9173:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2cde9f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2cde9f; op2val:0x0;
op3val:0xc8007ff; valaddr_reg:x3; val_offset:27519*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27519*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9174:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2cde9f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2cde9f; op2val:0x0;
op3val:0xc800fff; valaddr_reg:x3; val_offset:27522*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27522*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9175:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2cde9f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2cde9f; op2val:0x0;
op3val:0xc801fff; valaddr_reg:x3; val_offset:27525*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27525*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9176:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2cde9f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2cde9f; op2val:0x0;
op3val:0xc803fff; valaddr_reg:x3; val_offset:27528*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27528*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9177:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2cde9f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2cde9f; op2val:0x0;
op3val:0xc807fff; valaddr_reg:x3; val_offset:27531*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27531*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9178:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2cde9f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2cde9f; op2val:0x0;
op3val:0xc80ffff; valaddr_reg:x3; val_offset:27534*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27534*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9179:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2cde9f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2cde9f; op2val:0x0;
op3val:0xc81ffff; valaddr_reg:x3; val_offset:27537*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27537*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9180:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2cde9f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2cde9f; op2val:0x0;
op3val:0xc83ffff; valaddr_reg:x3; val_offset:27540*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27540*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9181:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2cde9f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2cde9f; op2val:0x0;
op3val:0xc87ffff; valaddr_reg:x3; val_offset:27543*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27543*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9182:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2cde9f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2cde9f; op2val:0x0;
op3val:0xc8fffff; valaddr_reg:x3; val_offset:27546*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27546*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9183:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2cde9f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2cde9f; op2val:0x0;
op3val:0xc9fffff; valaddr_reg:x3; val_offset:27549*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27549*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9184:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2cde9f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2cde9f; op2val:0x0;
op3val:0xcbfffff; valaddr_reg:x3; val_offset:27552*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27552*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9185:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2cde9f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2cde9f; op2val:0x0;
op3val:0xcc00000; valaddr_reg:x3; val_offset:27555*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27555*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9186:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2cde9f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2cde9f; op2val:0x0;
op3val:0xce00000; valaddr_reg:x3; val_offset:27558*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27558*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9187:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2cde9f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2cde9f; op2val:0x0;
op3val:0xcf00000; valaddr_reg:x3; val_offset:27561*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27561*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9188:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2cde9f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2cde9f; op2val:0x0;
op3val:0xcf80000; valaddr_reg:x3; val_offset:27564*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27564*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9189:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2cde9f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2cde9f; op2val:0x0;
op3val:0xcfc0000; valaddr_reg:x3; val_offset:27567*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27567*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9190:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2cde9f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2cde9f; op2val:0x0;
op3val:0xcfe0000; valaddr_reg:x3; val_offset:27570*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27570*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9191:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2cde9f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2cde9f; op2val:0x0;
op3val:0xcff0000; valaddr_reg:x3; val_offset:27573*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27573*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9192:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2cde9f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2cde9f; op2val:0x0;
op3val:0xcff8000; valaddr_reg:x3; val_offset:27576*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27576*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9193:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2cde9f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2cde9f; op2val:0x0;
op3val:0xcffc000; valaddr_reg:x3; val_offset:27579*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27579*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9194:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2cde9f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2cde9f; op2val:0x0;
op3val:0xcffe000; valaddr_reg:x3; val_offset:27582*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27582*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9195:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2cde9f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2cde9f; op2val:0x0;
op3val:0xcfff000; valaddr_reg:x3; val_offset:27585*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27585*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9196:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2cde9f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2cde9f; op2val:0x0;
op3val:0xcfff800; valaddr_reg:x3; val_offset:27588*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27588*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9197:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2cde9f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2cde9f; op2val:0x0;
op3val:0xcfffc00; valaddr_reg:x3; val_offset:27591*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27591*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9198:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2cde9f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2cde9f; op2val:0x0;
op3val:0xcfffe00; valaddr_reg:x3; val_offset:27594*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27594*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9199:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2cde9f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2cde9f; op2val:0x0;
op3val:0xcffff00; valaddr_reg:x3; val_offset:27597*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27597*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9200:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2cde9f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2cde9f; op2val:0x0;
op3val:0xcffff80; valaddr_reg:x3; val_offset:27600*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27600*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9201:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2cde9f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2cde9f; op2val:0x0;
op3val:0xcffffc0; valaddr_reg:x3; val_offset:27603*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27603*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9202:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2cde9f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2cde9f; op2val:0x0;
op3val:0xcffffe0; valaddr_reg:x3; val_offset:27606*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27606*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9203:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2cde9f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2cde9f; op2val:0x0;
op3val:0xcfffff0; valaddr_reg:x3; val_offset:27609*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27609*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9204:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2cde9f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2cde9f; op2val:0x0;
op3val:0xcfffff8; valaddr_reg:x3; val_offset:27612*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27612*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9205:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2cde9f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2cde9f; op2val:0x0;
op3val:0xcfffffc; valaddr_reg:x3; val_offset:27615*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27615*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9206:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2cde9f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2cde9f; op2val:0x0;
op3val:0xcfffffe; valaddr_reg:x3; val_offset:27618*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27618*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9207:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2cde9f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2cde9f; op2val:0x0;
op3val:0xcffffff; valaddr_reg:x3; val_offset:27621*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27621*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9208:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3104df and fs2 == 0 and fe2 == 0x81 and fm2 == 0x391c2b and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3104df; op2val:0x40b91c2b;
op3val:0x64800000; valaddr_reg:x3; val_offset:27624*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27624*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9209:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3104df and fs2 == 0 and fe2 == 0x81 and fm2 == 0x391c2b and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3104df; op2val:0x40b91c2b;
op3val:0x64800001; valaddr_reg:x3; val_offset:27627*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27627*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9210:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3104df and fs2 == 0 and fe2 == 0x81 and fm2 == 0x391c2b and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3104df; op2val:0x40b91c2b;
op3val:0x64800003; valaddr_reg:x3; val_offset:27630*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27630*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9211:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3104df and fs2 == 0 and fe2 == 0x81 and fm2 == 0x391c2b and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3104df; op2val:0x40b91c2b;
op3val:0x64800007; valaddr_reg:x3; val_offset:27633*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27633*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9212:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3104df and fs2 == 0 and fe2 == 0x81 and fm2 == 0x391c2b and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3104df; op2val:0x40b91c2b;
op3val:0x6480000f; valaddr_reg:x3; val_offset:27636*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27636*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9213:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3104df and fs2 == 0 and fe2 == 0x81 and fm2 == 0x391c2b and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3104df; op2val:0x40b91c2b;
op3val:0x6480001f; valaddr_reg:x3; val_offset:27639*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27639*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9214:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3104df and fs2 == 0 and fe2 == 0x81 and fm2 == 0x391c2b and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3104df; op2val:0x40b91c2b;
op3val:0x6480003f; valaddr_reg:x3; val_offset:27642*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27642*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9215:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3104df and fs2 == 0 and fe2 == 0x81 and fm2 == 0x391c2b and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3104df; op2val:0x40b91c2b;
op3val:0x6480007f; valaddr_reg:x3; val_offset:27645*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27645*0 + 3*71*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2116769488,32,FLEN)
NAN_BOXED(2160017175,32,FLEN)
NAN_BOXED(2785017871,32,FLEN)
NAN_BOXED(2116769488,32,FLEN)
NAN_BOXED(2160017175,32,FLEN)
NAN_BOXED(2785017887,32,FLEN)
NAN_BOXED(2116769488,32,FLEN)
NAN_BOXED(2160017175,32,FLEN)
NAN_BOXED(2785017919,32,FLEN)
NAN_BOXED(2116769488,32,FLEN)
NAN_BOXED(2160017175,32,FLEN)
NAN_BOXED(2785017983,32,FLEN)
NAN_BOXED(2116769488,32,FLEN)
NAN_BOXED(2160017175,32,FLEN)
NAN_BOXED(2785018111,32,FLEN)
NAN_BOXED(2116769488,32,FLEN)
NAN_BOXED(2160017175,32,FLEN)
NAN_BOXED(2785018367,32,FLEN)
NAN_BOXED(2116769488,32,FLEN)
NAN_BOXED(2160017175,32,FLEN)
NAN_BOXED(2785018879,32,FLEN)
NAN_BOXED(2116769488,32,FLEN)
NAN_BOXED(2160017175,32,FLEN)
NAN_BOXED(2785019903,32,FLEN)
NAN_BOXED(2116769488,32,FLEN)
NAN_BOXED(2160017175,32,FLEN)
NAN_BOXED(2785021951,32,FLEN)
NAN_BOXED(2116769488,32,FLEN)
NAN_BOXED(2160017175,32,FLEN)
NAN_BOXED(2785026047,32,FLEN)
NAN_BOXED(2116769488,32,FLEN)
NAN_BOXED(2160017175,32,FLEN)
NAN_BOXED(2785034239,32,FLEN)
NAN_BOXED(2116769488,32,FLEN)
NAN_BOXED(2160017175,32,FLEN)
NAN_BOXED(2785050623,32,FLEN)
NAN_BOXED(2116769488,32,FLEN)
NAN_BOXED(2160017175,32,FLEN)
NAN_BOXED(2785083391,32,FLEN)
NAN_BOXED(2116769488,32,FLEN)
NAN_BOXED(2160017175,32,FLEN)
NAN_BOXED(2785148927,32,FLEN)
NAN_BOXED(2116769488,32,FLEN)
NAN_BOXED(2160017175,32,FLEN)
NAN_BOXED(2785279999,32,FLEN)
NAN_BOXED(2116769488,32,FLEN)
NAN_BOXED(2160017175,32,FLEN)
NAN_BOXED(2785542143,32,FLEN)
NAN_BOXED(2116769488,32,FLEN)
NAN_BOXED(2160017175,32,FLEN)
NAN_BOXED(2786066431,32,FLEN)
NAN_BOXED(2116769488,32,FLEN)
NAN_BOXED(2160017175,32,FLEN)
NAN_BOXED(2787115007,32,FLEN)
NAN_BOXED(2116769488,32,FLEN)
NAN_BOXED(2160017175,32,FLEN)
NAN_BOXED(2789212159,32,FLEN)
NAN_BOXED(2116769488,32,FLEN)
NAN_BOXED(2160017175,32,FLEN)
NAN_BOXED(2789212160,32,FLEN)
NAN_BOXED(2116769488,32,FLEN)
NAN_BOXED(2160017175,32,FLEN)
NAN_BOXED(2791309312,32,FLEN)
NAN_BOXED(2116769488,32,FLEN)
NAN_BOXED(2160017175,32,FLEN)
NAN_BOXED(2792357888,32,FLEN)
NAN_BOXED(2116769488,32,FLEN)
NAN_BOXED(2160017175,32,FLEN)
NAN_BOXED(2792882176,32,FLEN)
NAN_BOXED(2116769488,32,FLEN)
NAN_BOXED(2160017175,32,FLEN)
NAN_BOXED(2793144320,32,FLEN)
NAN_BOXED(2116769488,32,FLEN)
NAN_BOXED(2160017175,32,FLEN)
NAN_BOXED(2793275392,32,FLEN)
NAN_BOXED(2116769488,32,FLEN)
NAN_BOXED(2160017175,32,FLEN)
NAN_BOXED(2793340928,32,FLEN)
NAN_BOXED(2116769488,32,FLEN)
NAN_BOXED(2160017175,32,FLEN)
NAN_BOXED(2793373696,32,FLEN)
NAN_BOXED(2116769488,32,FLEN)
NAN_BOXED(2160017175,32,FLEN)
NAN_BOXED(2793390080,32,FLEN)
NAN_BOXED(2116769488,32,FLEN)
NAN_BOXED(2160017175,32,FLEN)
NAN_BOXED(2793398272,32,FLEN)
NAN_BOXED(2116769488,32,FLEN)
NAN_BOXED(2160017175,32,FLEN)
NAN_BOXED(2793402368,32,FLEN)
NAN_BOXED(2116769488,32,FLEN)
NAN_BOXED(2160017175,32,FLEN)
NAN_BOXED(2793404416,32,FLEN)
NAN_BOXED(2116769488,32,FLEN)
NAN_BOXED(2160017175,32,FLEN)
NAN_BOXED(2793405440,32,FLEN)
NAN_BOXED(2116769488,32,FLEN)
NAN_BOXED(2160017175,32,FLEN)
NAN_BOXED(2793405952,32,FLEN)
NAN_BOXED(2116769488,32,FLEN)
NAN_BOXED(2160017175,32,FLEN)
NAN_BOXED(2793406208,32,FLEN)
NAN_BOXED(2116769488,32,FLEN)
NAN_BOXED(2160017175,32,FLEN)
NAN_BOXED(2793406336,32,FLEN)
NAN_BOXED(2116769488,32,FLEN)
NAN_BOXED(2160017175,32,FLEN)
NAN_BOXED(2793406400,32,FLEN)
NAN_BOXED(2116769488,32,FLEN)
NAN_BOXED(2160017175,32,FLEN)
NAN_BOXED(2793406432,32,FLEN)
NAN_BOXED(2116769488,32,FLEN)
NAN_BOXED(2160017175,32,FLEN)
NAN_BOXED(2793406448,32,FLEN)
NAN_BOXED(2116769488,32,FLEN)
NAN_BOXED(2160017175,32,FLEN)
NAN_BOXED(2793406456,32,FLEN)
NAN_BOXED(2116769488,32,FLEN)
NAN_BOXED(2160017175,32,FLEN)
NAN_BOXED(2793406460,32,FLEN)
NAN_BOXED(2116769488,32,FLEN)
NAN_BOXED(2160017175,32,FLEN)
NAN_BOXED(2793406462,32,FLEN)
NAN_BOXED(2116769488,32,FLEN)
NAN_BOXED(2160017175,32,FLEN)
NAN_BOXED(2793406463,32,FLEN)
NAN_BOXED(2116769488,32,FLEN)
NAN_BOXED(2160017175,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2116769488,32,FLEN)
NAN_BOXED(2160017175,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2116769488,32,FLEN)
NAN_BOXED(2160017175,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
NAN_BOXED(2116769488,32,FLEN)
NAN_BOXED(2160017175,32,FLEN)
NAN_BOXED(3214514585,32,FLEN)
NAN_BOXED(2116769488,32,FLEN)
NAN_BOXED(2160017175,32,FLEN)
NAN_BOXED(3215233609,32,FLEN)
NAN_BOXED(2116769488,32,FLEN)
NAN_BOXED(2160017175,32,FLEN)
NAN_BOXED(3216192307,32,FLEN)
NAN_BOXED(2116769488,32,FLEN)
NAN_BOXED(2160017175,32,FLEN)
NAN_BOXED(3216431981,32,FLEN)
NAN_BOXED(2116769488,32,FLEN)
NAN_BOXED(2160017175,32,FLEN)
NAN_BOXED(3216751547,32,FLEN)
NAN_BOXED(2116769488,32,FLEN)
NAN_BOXED(2160017175,32,FLEN)
NAN_BOXED(3217310788,32,FLEN)
NAN_BOXED(2116769488,32,FLEN)
NAN_BOXED(2160017175,32,FLEN)
NAN_BOXED(3217870028,32,FLEN)
NAN_BOXED(2116769488,32,FLEN)
NAN_BOXED(2160017175,32,FLEN)
NAN_BOXED(3218828726,32,FLEN)
NAN_BOXED(2116769488,32,FLEN)
NAN_BOXED(2160017175,32,FLEN)
NAN_BOXED(3219547750,32,FLEN)
NAN_BOXED(2116769488,32,FLEN)
NAN_BOXED(2160017175,32,FLEN)
NAN_BOXED(3220027099,32,FLEN)
NAN_BOXED(2116769488,32,FLEN)
NAN_BOXED(2160017175,32,FLEN)
NAN_BOXED(3221225464,32,FLEN)
NAN_BOXED(2116769488,32,FLEN)
NAN_BOXED(2160017175,32,FLEN)
NAN_BOXED(3221225468,32,FLEN)
NAN_BOXED(2116769488,32,FLEN)
NAN_BOXED(2160017175,32,FLEN)
NAN_BOXED(3221225470,32,FLEN)
NAN_BOXED(2116869791,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2116869791,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3,32,FLEN)
NAN_BOXED(2116869791,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7,32,FLEN)
NAN_BOXED(2116869791,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1677721,32,FLEN)
NAN_BOXED(2116869791,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2396745,32,FLEN)
NAN_BOXED(2116869791,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3355443,32,FLEN)
NAN_BOXED(2116869791,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3595117,32,FLEN)
NAN_BOXED(2116869791,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3914683,32,FLEN)
NAN_BOXED(2116869791,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4473924,32,FLEN)
NAN_BOXED(2116869791,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5033164,32,FLEN)
NAN_BOXED(2116869791,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5991862,32,FLEN)
NAN_BOXED(2116869791,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(6710886,32,FLEN)
NAN_BOXED(2116869791,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7190235,32,FLEN)
NAN_BOXED(2116869791,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388600,32,FLEN)
NAN_BOXED(2116869791,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388604,32,FLEN)
NAN_BOXED(2116869791,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388606,32,FLEN)
NAN_BOXED(2116869791,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209715200,32,FLEN)
NAN_BOXED(2116869791,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209715201,32,FLEN)
NAN_BOXED(2116869791,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209715203,32,FLEN)
NAN_BOXED(2116869791,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209715207,32,FLEN)
NAN_BOXED(2116869791,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209715215,32,FLEN)
NAN_BOXED(2116869791,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209715231,32,FLEN)
NAN_BOXED(2116869791,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209715263,32,FLEN)
NAN_BOXED(2116869791,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209715327,32,FLEN)
NAN_BOXED(2116869791,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209715455,32,FLEN)
NAN_BOXED(2116869791,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209715711,32,FLEN)
NAN_BOXED(2116869791,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209716223,32,FLEN)
NAN_BOXED(2116869791,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209717247,32,FLEN)
NAN_BOXED(2116869791,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209719295,32,FLEN)
NAN_BOXED(2116869791,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209723391,32,FLEN)
NAN_BOXED(2116869791,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209731583,32,FLEN)
NAN_BOXED(2116869791,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209747967,32,FLEN)
NAN_BOXED(2116869791,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209780735,32,FLEN)
NAN_BOXED(2116869791,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209846271,32,FLEN)
NAN_BOXED(2116869791,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209977343,32,FLEN)
NAN_BOXED(2116869791,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(210239487,32,FLEN)
NAN_BOXED(2116869791,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(210763775,32,FLEN)
NAN_BOXED(2116869791,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(211812351,32,FLEN)
NAN_BOXED(2116869791,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(213909503,32,FLEN)
NAN_BOXED(2116869791,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(213909504,32,FLEN)
NAN_BOXED(2116869791,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(216006656,32,FLEN)
NAN_BOXED(2116869791,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(217055232,32,FLEN)
NAN_BOXED(2116869791,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(217579520,32,FLEN)
NAN_BOXED(2116869791,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(217841664,32,FLEN)
NAN_BOXED(2116869791,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(217972736,32,FLEN)
NAN_BOXED(2116869791,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218038272,32,FLEN)
NAN_BOXED(2116869791,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218071040,32,FLEN)
NAN_BOXED(2116869791,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218087424,32,FLEN)
NAN_BOXED(2116869791,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218095616,32,FLEN)
NAN_BOXED(2116869791,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218099712,32,FLEN)
NAN_BOXED(2116869791,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218101760,32,FLEN)
NAN_BOXED(2116869791,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218102784,32,FLEN)
NAN_BOXED(2116869791,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218103296,32,FLEN)
NAN_BOXED(2116869791,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218103552,32,FLEN)
NAN_BOXED(2116869791,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218103680,32,FLEN)
NAN_BOXED(2116869791,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218103744,32,FLEN)
NAN_BOXED(2116869791,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218103776,32,FLEN)
NAN_BOXED(2116869791,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218103792,32,FLEN)
NAN_BOXED(2116869791,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218103800,32,FLEN)
NAN_BOXED(2116869791,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218103804,32,FLEN)
NAN_BOXED(2116869791,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218103806,32,FLEN)
NAN_BOXED(2116869791,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218103807,32,FLEN)
NAN_BOXED(2117141727,32,FLEN)
NAN_BOXED(1085873195,32,FLEN)
NAN_BOXED(1686110208,32,FLEN)
NAN_BOXED(2117141727,32,FLEN)
NAN_BOXED(1085873195,32,FLEN)
NAN_BOXED(1686110209,32,FLEN)
NAN_BOXED(2117141727,32,FLEN)
NAN_BOXED(1085873195,32,FLEN)
NAN_BOXED(1686110211,32,FLEN)
NAN_BOXED(2117141727,32,FLEN)
NAN_BOXED(1085873195,32,FLEN)
NAN_BOXED(1686110215,32,FLEN)
NAN_BOXED(2117141727,32,FLEN)
NAN_BOXED(1085873195,32,FLEN)
NAN_BOXED(1686110223,32,FLEN)
NAN_BOXED(2117141727,32,FLEN)
NAN_BOXED(1085873195,32,FLEN)
NAN_BOXED(1686110239,32,FLEN)
NAN_BOXED(2117141727,32,FLEN)
NAN_BOXED(1085873195,32,FLEN)
NAN_BOXED(1686110271,32,FLEN)
NAN_BOXED(2117141727,32,FLEN)
NAN_BOXED(1085873195,32,FLEN)
NAN_BOXED(1686110335,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
