
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:17:59 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_9344:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32d6bf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3739f4 and fs3 == 0 and fe3 == 0xd5 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32d6bf; op2val:0x40b739f4;
op3val:0x6a800fff; valaddr_reg:x3; val_offset:28032*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28032*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9345:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32d6bf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3739f4 and fs3 == 0 and fe3 == 0xd5 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32d6bf; op2val:0x40b739f4;
op3val:0x6a801fff; valaddr_reg:x3; val_offset:28035*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28035*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9346:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32d6bf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3739f4 and fs3 == 0 and fe3 == 0xd5 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32d6bf; op2val:0x40b739f4;
op3val:0x6a803fff; valaddr_reg:x3; val_offset:28038*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28038*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9347:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32d6bf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3739f4 and fs3 == 0 and fe3 == 0xd5 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32d6bf; op2val:0x40b739f4;
op3val:0x6a807fff; valaddr_reg:x3; val_offset:28041*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28041*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9348:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32d6bf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3739f4 and fs3 == 0 and fe3 == 0xd5 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32d6bf; op2val:0x40b739f4;
op3val:0x6a80ffff; valaddr_reg:x3; val_offset:28044*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28044*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9349:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32d6bf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3739f4 and fs3 == 0 and fe3 == 0xd5 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32d6bf; op2val:0x40b739f4;
op3val:0x6a81ffff; valaddr_reg:x3; val_offset:28047*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28047*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9350:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32d6bf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3739f4 and fs3 == 0 and fe3 == 0xd5 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32d6bf; op2val:0x40b739f4;
op3val:0x6a83ffff; valaddr_reg:x3; val_offset:28050*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28050*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9351:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32d6bf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3739f4 and fs3 == 0 and fe3 == 0xd5 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32d6bf; op2val:0x40b739f4;
op3val:0x6a87ffff; valaddr_reg:x3; val_offset:28053*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28053*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9352:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32d6bf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3739f4 and fs3 == 0 and fe3 == 0xd5 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32d6bf; op2val:0x40b739f4;
op3val:0x6a8fffff; valaddr_reg:x3; val_offset:28056*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28056*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9353:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32d6bf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3739f4 and fs3 == 0 and fe3 == 0xd5 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32d6bf; op2val:0x40b739f4;
op3val:0x6a9fffff; valaddr_reg:x3; val_offset:28059*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28059*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9354:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32d6bf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3739f4 and fs3 == 0 and fe3 == 0xd5 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32d6bf; op2val:0x40b739f4;
op3val:0x6abfffff; valaddr_reg:x3; val_offset:28062*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28062*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9355:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32d6bf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3739f4 and fs3 == 0 and fe3 == 0xd5 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32d6bf; op2val:0x40b739f4;
op3val:0x6ac00000; valaddr_reg:x3; val_offset:28065*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28065*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9356:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32d6bf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3739f4 and fs3 == 0 and fe3 == 0xd5 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32d6bf; op2val:0x40b739f4;
op3val:0x6ae00000; valaddr_reg:x3; val_offset:28068*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28068*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9357:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32d6bf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3739f4 and fs3 == 0 and fe3 == 0xd5 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32d6bf; op2val:0x40b739f4;
op3val:0x6af00000; valaddr_reg:x3; val_offset:28071*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28071*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9358:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32d6bf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3739f4 and fs3 == 0 and fe3 == 0xd5 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32d6bf; op2val:0x40b739f4;
op3val:0x6af80000; valaddr_reg:x3; val_offset:28074*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28074*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9359:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32d6bf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3739f4 and fs3 == 0 and fe3 == 0xd5 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32d6bf; op2val:0x40b739f4;
op3val:0x6afc0000; valaddr_reg:x3; val_offset:28077*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28077*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9360:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32d6bf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3739f4 and fs3 == 0 and fe3 == 0xd5 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32d6bf; op2val:0x40b739f4;
op3val:0x6afe0000; valaddr_reg:x3; val_offset:28080*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28080*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9361:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32d6bf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3739f4 and fs3 == 0 and fe3 == 0xd5 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32d6bf; op2val:0x40b739f4;
op3val:0x6aff0000; valaddr_reg:x3; val_offset:28083*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28083*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9362:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32d6bf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3739f4 and fs3 == 0 and fe3 == 0xd5 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32d6bf; op2val:0x40b739f4;
op3val:0x6aff8000; valaddr_reg:x3; val_offset:28086*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28086*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9363:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32d6bf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3739f4 and fs3 == 0 and fe3 == 0xd5 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32d6bf; op2val:0x40b739f4;
op3val:0x6affc000; valaddr_reg:x3; val_offset:28089*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28089*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9364:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32d6bf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3739f4 and fs3 == 0 and fe3 == 0xd5 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32d6bf; op2val:0x40b739f4;
op3val:0x6affe000; valaddr_reg:x3; val_offset:28092*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28092*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9365:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32d6bf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3739f4 and fs3 == 0 and fe3 == 0xd5 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32d6bf; op2val:0x40b739f4;
op3val:0x6afff000; valaddr_reg:x3; val_offset:28095*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28095*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9366:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32d6bf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3739f4 and fs3 == 0 and fe3 == 0xd5 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32d6bf; op2val:0x40b739f4;
op3val:0x6afff800; valaddr_reg:x3; val_offset:28098*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28098*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9367:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32d6bf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3739f4 and fs3 == 0 and fe3 == 0xd5 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32d6bf; op2val:0x40b739f4;
op3val:0x6afffc00; valaddr_reg:x3; val_offset:28101*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28101*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9368:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32d6bf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3739f4 and fs3 == 0 and fe3 == 0xd5 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32d6bf; op2val:0x40b739f4;
op3val:0x6afffe00; valaddr_reg:x3; val_offset:28104*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28104*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9369:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32d6bf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3739f4 and fs3 == 0 and fe3 == 0xd5 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32d6bf; op2val:0x40b739f4;
op3val:0x6affff00; valaddr_reg:x3; val_offset:28107*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28107*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9370:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32d6bf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3739f4 and fs3 == 0 and fe3 == 0xd5 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32d6bf; op2val:0x40b739f4;
op3val:0x6affff80; valaddr_reg:x3; val_offset:28110*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28110*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9371:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32d6bf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3739f4 and fs3 == 0 and fe3 == 0xd5 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32d6bf; op2val:0x40b739f4;
op3val:0x6affffc0; valaddr_reg:x3; val_offset:28113*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28113*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9372:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32d6bf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3739f4 and fs3 == 0 and fe3 == 0xd5 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32d6bf; op2val:0x40b739f4;
op3val:0x6affffe0; valaddr_reg:x3; val_offset:28116*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28116*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9373:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32d6bf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3739f4 and fs3 == 0 and fe3 == 0xd5 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32d6bf; op2val:0x40b739f4;
op3val:0x6afffff0; valaddr_reg:x3; val_offset:28119*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28119*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9374:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32d6bf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3739f4 and fs3 == 0 and fe3 == 0xd5 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32d6bf; op2val:0x40b739f4;
op3val:0x6afffff8; valaddr_reg:x3; val_offset:28122*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28122*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9375:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32d6bf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3739f4 and fs3 == 0 and fe3 == 0xd5 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32d6bf; op2val:0x40b739f4;
op3val:0x6afffffc; valaddr_reg:x3; val_offset:28125*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28125*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9376:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32d6bf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3739f4 and fs3 == 0 and fe3 == 0xd5 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32d6bf; op2val:0x40b739f4;
op3val:0x6afffffe; valaddr_reg:x3; val_offset:28128*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28128*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9377:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32d6bf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3739f4 and fs3 == 0 and fe3 == 0xd5 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32d6bf; op2val:0x40b739f4;
op3val:0x6affffff; valaddr_reg:x3; val_offset:28131*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28131*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9378:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32d6bf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3739f4 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32d6bf; op2val:0x40b739f4;
op3val:0x7f000001; valaddr_reg:x3; val_offset:28134*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28134*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9379:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32d6bf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3739f4 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32d6bf; op2val:0x40b739f4;
op3val:0x7f000003; valaddr_reg:x3; val_offset:28137*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28137*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9380:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32d6bf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3739f4 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32d6bf; op2val:0x40b739f4;
op3val:0x7f000007; valaddr_reg:x3; val_offset:28140*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28140*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9381:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32d6bf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3739f4 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32d6bf; op2val:0x40b739f4;
op3val:0x7f199999; valaddr_reg:x3; val_offset:28143*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28143*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9382:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32d6bf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3739f4 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32d6bf; op2val:0x40b739f4;
op3val:0x7f249249; valaddr_reg:x3; val_offset:28146*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28146*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9383:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32d6bf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3739f4 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32d6bf; op2val:0x40b739f4;
op3val:0x7f333333; valaddr_reg:x3; val_offset:28149*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28149*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9384:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32d6bf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3739f4 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32d6bf; op2val:0x40b739f4;
op3val:0x7f36db6d; valaddr_reg:x3; val_offset:28152*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28152*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9385:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32d6bf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3739f4 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32d6bf; op2val:0x40b739f4;
op3val:0x7f3bbbbb; valaddr_reg:x3; val_offset:28155*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28155*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9386:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32d6bf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3739f4 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32d6bf; op2val:0x40b739f4;
op3val:0x7f444444; valaddr_reg:x3; val_offset:28158*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28158*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9387:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32d6bf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3739f4 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32d6bf; op2val:0x40b739f4;
op3val:0x7f4ccccc; valaddr_reg:x3; val_offset:28161*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28161*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9388:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32d6bf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3739f4 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32d6bf; op2val:0x40b739f4;
op3val:0x7f5b6db6; valaddr_reg:x3; val_offset:28164*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28164*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9389:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32d6bf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3739f4 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32d6bf; op2val:0x40b739f4;
op3val:0x7f666666; valaddr_reg:x3; val_offset:28167*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28167*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9390:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32d6bf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3739f4 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32d6bf; op2val:0x40b739f4;
op3val:0x7f6db6db; valaddr_reg:x3; val_offset:28170*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28170*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9391:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32d6bf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3739f4 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32d6bf; op2val:0x40b739f4;
op3val:0x7f7ffff8; valaddr_reg:x3; val_offset:28173*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28173*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9392:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32d6bf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3739f4 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32d6bf; op2val:0x40b739f4;
op3val:0x7f7ffffc; valaddr_reg:x3; val_offset:28176*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28176*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9393:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32d6bf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3739f4 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32d6bf; op2val:0x40b739f4;
op3val:0x7f7ffffe; valaddr_reg:x3; val_offset:28179*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28179*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9394:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3361f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3361f1; op2val:0x80000000;
op3val:0x80000001; valaddr_reg:x3; val_offset:28182*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28182*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9395:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3361f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3361f1; op2val:0x80000000;
op3val:0x80000003; valaddr_reg:x3; val_offset:28185*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28185*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9396:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3361f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3361f1; op2val:0x80000000;
op3val:0x80000007; valaddr_reg:x3; val_offset:28188*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28188*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9397:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3361f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3361f1; op2val:0x80000000;
op3val:0x80199999; valaddr_reg:x3; val_offset:28191*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28191*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9398:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3361f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3361f1; op2val:0x80000000;
op3val:0x80249249; valaddr_reg:x3; val_offset:28194*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28194*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9399:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3361f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3361f1; op2val:0x80000000;
op3val:0x80333333; valaddr_reg:x3; val_offset:28197*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28197*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9400:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3361f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3361f1; op2val:0x80000000;
op3val:0x8036db6d; valaddr_reg:x3; val_offset:28200*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28200*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9401:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3361f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3361f1; op2val:0x80000000;
op3val:0x803bbbbb; valaddr_reg:x3; val_offset:28203*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28203*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9402:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3361f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3361f1; op2val:0x80000000;
op3val:0x80444444; valaddr_reg:x3; val_offset:28206*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28206*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9403:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3361f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3361f1; op2val:0x80000000;
op3val:0x804ccccc; valaddr_reg:x3; val_offset:28209*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28209*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9404:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3361f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3361f1; op2val:0x80000000;
op3val:0x805b6db6; valaddr_reg:x3; val_offset:28212*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28212*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9405:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3361f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3361f1; op2val:0x80000000;
op3val:0x80666666; valaddr_reg:x3; val_offset:28215*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28215*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9406:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3361f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3361f1; op2val:0x80000000;
op3val:0x806db6db; valaddr_reg:x3; val_offset:28218*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28218*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9407:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3361f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3361f1; op2val:0x80000000;
op3val:0x807ffff8; valaddr_reg:x3; val_offset:28221*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28221*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9408:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3361f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3361f1; op2val:0x80000000;
op3val:0x807ffffc; valaddr_reg:x3; val_offset:28224*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28224*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9409:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3361f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3361f1; op2val:0x80000000;
op3val:0x807ffffe; valaddr_reg:x3; val_offset:28227*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28227*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9410:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3361f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3361f1; op2val:0x80000000;
op3val:0x88000000; valaddr_reg:x3; val_offset:28230*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28230*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9411:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3361f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3361f1; op2val:0x80000000;
op3val:0x88000001; valaddr_reg:x3; val_offset:28233*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28233*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9412:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3361f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3361f1; op2val:0x80000000;
op3val:0x88000003; valaddr_reg:x3; val_offset:28236*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28236*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9413:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3361f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3361f1; op2val:0x80000000;
op3val:0x88000007; valaddr_reg:x3; val_offset:28239*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28239*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9414:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3361f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3361f1; op2val:0x80000000;
op3val:0x8800000f; valaddr_reg:x3; val_offset:28242*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28242*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9415:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3361f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3361f1; op2val:0x80000000;
op3val:0x8800001f; valaddr_reg:x3; val_offset:28245*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28245*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9416:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3361f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3361f1; op2val:0x80000000;
op3val:0x8800003f; valaddr_reg:x3; val_offset:28248*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28248*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9417:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3361f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3361f1; op2val:0x80000000;
op3val:0x8800007f; valaddr_reg:x3; val_offset:28251*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28251*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9418:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3361f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3361f1; op2val:0x80000000;
op3val:0x880000ff; valaddr_reg:x3; val_offset:28254*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28254*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9419:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3361f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3361f1; op2val:0x80000000;
op3val:0x880001ff; valaddr_reg:x3; val_offset:28257*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28257*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9420:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3361f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3361f1; op2val:0x80000000;
op3val:0x880003ff; valaddr_reg:x3; val_offset:28260*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28260*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9421:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3361f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3361f1; op2val:0x80000000;
op3val:0x880007ff; valaddr_reg:x3; val_offset:28263*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28263*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9422:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3361f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3361f1; op2val:0x80000000;
op3val:0x88000fff; valaddr_reg:x3; val_offset:28266*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28266*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9423:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3361f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3361f1; op2val:0x80000000;
op3val:0x88001fff; valaddr_reg:x3; val_offset:28269*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28269*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9424:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3361f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3361f1; op2val:0x80000000;
op3val:0x88003fff; valaddr_reg:x3; val_offset:28272*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28272*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9425:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3361f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3361f1; op2val:0x80000000;
op3val:0x88007fff; valaddr_reg:x3; val_offset:28275*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28275*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9426:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3361f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3361f1; op2val:0x80000000;
op3val:0x8800ffff; valaddr_reg:x3; val_offset:28278*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28278*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9427:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3361f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3361f1; op2val:0x80000000;
op3val:0x8801ffff; valaddr_reg:x3; val_offset:28281*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28281*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9428:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3361f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3361f1; op2val:0x80000000;
op3val:0x8803ffff; valaddr_reg:x3; val_offset:28284*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28284*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9429:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3361f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3361f1; op2val:0x80000000;
op3val:0x8807ffff; valaddr_reg:x3; val_offset:28287*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28287*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9430:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3361f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3361f1; op2val:0x80000000;
op3val:0x880fffff; valaddr_reg:x3; val_offset:28290*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28290*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9431:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3361f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3361f1; op2val:0x80000000;
op3val:0x881fffff; valaddr_reg:x3; val_offset:28293*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28293*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9432:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3361f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3361f1; op2val:0x80000000;
op3val:0x883fffff; valaddr_reg:x3; val_offset:28296*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28296*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9433:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3361f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3361f1; op2val:0x80000000;
op3val:0x88400000; valaddr_reg:x3; val_offset:28299*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28299*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9434:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3361f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3361f1; op2val:0x80000000;
op3val:0x88600000; valaddr_reg:x3; val_offset:28302*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28302*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9435:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3361f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3361f1; op2val:0x80000000;
op3val:0x88700000; valaddr_reg:x3; val_offset:28305*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28305*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9436:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3361f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3361f1; op2val:0x80000000;
op3val:0x88780000; valaddr_reg:x3; val_offset:28308*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28308*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9437:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3361f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3361f1; op2val:0x80000000;
op3val:0x887c0000; valaddr_reg:x3; val_offset:28311*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28311*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9438:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3361f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3361f1; op2val:0x80000000;
op3val:0x887e0000; valaddr_reg:x3; val_offset:28314*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28314*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9439:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3361f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3361f1; op2val:0x80000000;
op3val:0x887f0000; valaddr_reg:x3; val_offset:28317*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28317*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9440:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3361f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3361f1; op2val:0x80000000;
op3val:0x887f8000; valaddr_reg:x3; val_offset:28320*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28320*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9441:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3361f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3361f1; op2val:0x80000000;
op3val:0x887fc000; valaddr_reg:x3; val_offset:28323*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28323*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9442:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3361f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3361f1; op2val:0x80000000;
op3val:0x887fe000; valaddr_reg:x3; val_offset:28326*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28326*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9443:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3361f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3361f1; op2val:0x80000000;
op3val:0x887ff000; valaddr_reg:x3; val_offset:28329*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28329*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9444:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3361f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3361f1; op2val:0x80000000;
op3val:0x887ff800; valaddr_reg:x3; val_offset:28332*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28332*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9445:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3361f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3361f1; op2val:0x80000000;
op3val:0x887ffc00; valaddr_reg:x3; val_offset:28335*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28335*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9446:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3361f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3361f1; op2val:0x80000000;
op3val:0x887ffe00; valaddr_reg:x3; val_offset:28338*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28338*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9447:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3361f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3361f1; op2val:0x80000000;
op3val:0x887fff00; valaddr_reg:x3; val_offset:28341*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28341*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9448:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3361f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3361f1; op2val:0x80000000;
op3val:0x887fff80; valaddr_reg:x3; val_offset:28344*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28344*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9449:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3361f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3361f1; op2val:0x80000000;
op3val:0x887fffc0; valaddr_reg:x3; val_offset:28347*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28347*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9450:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3361f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3361f1; op2val:0x80000000;
op3val:0x887fffe0; valaddr_reg:x3; val_offset:28350*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28350*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9451:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3361f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3361f1; op2val:0x80000000;
op3val:0x887ffff0; valaddr_reg:x3; val_offset:28353*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28353*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9452:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3361f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3361f1; op2val:0x80000000;
op3val:0x887ffff8; valaddr_reg:x3; val_offset:28356*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28356*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9453:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3361f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3361f1; op2val:0x80000000;
op3val:0x887ffffc; valaddr_reg:x3; val_offset:28359*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28359*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9454:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3361f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3361f1; op2val:0x80000000;
op3val:0x887ffffe; valaddr_reg:x3; val_offset:28362*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28362*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9455:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3361f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3361f1; op2val:0x80000000;
op3val:0x887fffff; valaddr_reg:x3; val_offset:28365*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28365*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9456:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x34dd85 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x352c69 and fs3 == 0 and fe3 == 0x4a and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e34dd85; op2val:0xb52c69;
op3val:0x25000000; valaddr_reg:x3; val_offset:28368*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28368*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9457:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x34dd85 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x352c69 and fs3 == 0 and fe3 == 0x4a and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e34dd85; op2val:0xb52c69;
op3val:0x25000001; valaddr_reg:x3; val_offset:28371*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28371*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9458:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x34dd85 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x352c69 and fs3 == 0 and fe3 == 0x4a and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e34dd85; op2val:0xb52c69;
op3val:0x25000003; valaddr_reg:x3; val_offset:28374*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28374*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9459:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x34dd85 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x352c69 and fs3 == 0 and fe3 == 0x4a and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e34dd85; op2val:0xb52c69;
op3val:0x25000007; valaddr_reg:x3; val_offset:28377*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28377*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9460:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x34dd85 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x352c69 and fs3 == 0 and fe3 == 0x4a and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e34dd85; op2val:0xb52c69;
op3val:0x2500000f; valaddr_reg:x3; val_offset:28380*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28380*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9461:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x34dd85 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x352c69 and fs3 == 0 and fe3 == 0x4a and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e34dd85; op2val:0xb52c69;
op3val:0x2500001f; valaddr_reg:x3; val_offset:28383*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28383*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9462:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x34dd85 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x352c69 and fs3 == 0 and fe3 == 0x4a and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e34dd85; op2val:0xb52c69;
op3val:0x2500003f; valaddr_reg:x3; val_offset:28386*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28386*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9463:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x34dd85 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x352c69 and fs3 == 0 and fe3 == 0x4a and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e34dd85; op2val:0xb52c69;
op3val:0x2500007f; valaddr_reg:x3; val_offset:28389*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28389*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9464:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x34dd85 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x352c69 and fs3 == 0 and fe3 == 0x4a and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e34dd85; op2val:0xb52c69;
op3val:0x250000ff; valaddr_reg:x3; val_offset:28392*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28392*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9465:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x34dd85 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x352c69 and fs3 == 0 and fe3 == 0x4a and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e34dd85; op2val:0xb52c69;
op3val:0x250001ff; valaddr_reg:x3; val_offset:28395*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28395*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9466:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x34dd85 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x352c69 and fs3 == 0 and fe3 == 0x4a and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e34dd85; op2val:0xb52c69;
op3val:0x250003ff; valaddr_reg:x3; val_offset:28398*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28398*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9467:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x34dd85 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x352c69 and fs3 == 0 and fe3 == 0x4a and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e34dd85; op2val:0xb52c69;
op3val:0x250007ff; valaddr_reg:x3; val_offset:28401*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28401*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9468:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x34dd85 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x352c69 and fs3 == 0 and fe3 == 0x4a and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e34dd85; op2val:0xb52c69;
op3val:0x25000fff; valaddr_reg:x3; val_offset:28404*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28404*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9469:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x34dd85 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x352c69 and fs3 == 0 and fe3 == 0x4a and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e34dd85; op2val:0xb52c69;
op3val:0x25001fff; valaddr_reg:x3; val_offset:28407*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28407*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9470:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x34dd85 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x352c69 and fs3 == 0 and fe3 == 0x4a and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e34dd85; op2val:0xb52c69;
op3val:0x25003fff; valaddr_reg:x3; val_offset:28410*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28410*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9471:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x34dd85 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x352c69 and fs3 == 0 and fe3 == 0x4a and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e34dd85; op2val:0xb52c69;
op3val:0x25007fff; valaddr_reg:x3; val_offset:28413*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28413*0 + 3*73*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2117260991,32,FLEN)
NAN_BOXED(1085749748,32,FLEN)
NAN_BOXED(1786777599,32,FLEN)
NAN_BOXED(2117260991,32,FLEN)
NAN_BOXED(1085749748,32,FLEN)
NAN_BOXED(1786781695,32,FLEN)
NAN_BOXED(2117260991,32,FLEN)
NAN_BOXED(1085749748,32,FLEN)
NAN_BOXED(1786789887,32,FLEN)
NAN_BOXED(2117260991,32,FLEN)
NAN_BOXED(1085749748,32,FLEN)
NAN_BOXED(1786806271,32,FLEN)
NAN_BOXED(2117260991,32,FLEN)
NAN_BOXED(1085749748,32,FLEN)
NAN_BOXED(1786839039,32,FLEN)
NAN_BOXED(2117260991,32,FLEN)
NAN_BOXED(1085749748,32,FLEN)
NAN_BOXED(1786904575,32,FLEN)
NAN_BOXED(2117260991,32,FLEN)
NAN_BOXED(1085749748,32,FLEN)
NAN_BOXED(1787035647,32,FLEN)
NAN_BOXED(2117260991,32,FLEN)
NAN_BOXED(1085749748,32,FLEN)
NAN_BOXED(1787297791,32,FLEN)
NAN_BOXED(2117260991,32,FLEN)
NAN_BOXED(1085749748,32,FLEN)
NAN_BOXED(1787822079,32,FLEN)
NAN_BOXED(2117260991,32,FLEN)
NAN_BOXED(1085749748,32,FLEN)
NAN_BOXED(1788870655,32,FLEN)
NAN_BOXED(2117260991,32,FLEN)
NAN_BOXED(1085749748,32,FLEN)
NAN_BOXED(1790967807,32,FLEN)
NAN_BOXED(2117260991,32,FLEN)
NAN_BOXED(1085749748,32,FLEN)
NAN_BOXED(1790967808,32,FLEN)
NAN_BOXED(2117260991,32,FLEN)
NAN_BOXED(1085749748,32,FLEN)
NAN_BOXED(1793064960,32,FLEN)
NAN_BOXED(2117260991,32,FLEN)
NAN_BOXED(1085749748,32,FLEN)
NAN_BOXED(1794113536,32,FLEN)
NAN_BOXED(2117260991,32,FLEN)
NAN_BOXED(1085749748,32,FLEN)
NAN_BOXED(1794637824,32,FLEN)
NAN_BOXED(2117260991,32,FLEN)
NAN_BOXED(1085749748,32,FLEN)
NAN_BOXED(1794899968,32,FLEN)
NAN_BOXED(2117260991,32,FLEN)
NAN_BOXED(1085749748,32,FLEN)
NAN_BOXED(1795031040,32,FLEN)
NAN_BOXED(2117260991,32,FLEN)
NAN_BOXED(1085749748,32,FLEN)
NAN_BOXED(1795096576,32,FLEN)
NAN_BOXED(2117260991,32,FLEN)
NAN_BOXED(1085749748,32,FLEN)
NAN_BOXED(1795129344,32,FLEN)
NAN_BOXED(2117260991,32,FLEN)
NAN_BOXED(1085749748,32,FLEN)
NAN_BOXED(1795145728,32,FLEN)
NAN_BOXED(2117260991,32,FLEN)
NAN_BOXED(1085749748,32,FLEN)
NAN_BOXED(1795153920,32,FLEN)
NAN_BOXED(2117260991,32,FLEN)
NAN_BOXED(1085749748,32,FLEN)
NAN_BOXED(1795158016,32,FLEN)
NAN_BOXED(2117260991,32,FLEN)
NAN_BOXED(1085749748,32,FLEN)
NAN_BOXED(1795160064,32,FLEN)
NAN_BOXED(2117260991,32,FLEN)
NAN_BOXED(1085749748,32,FLEN)
NAN_BOXED(1795161088,32,FLEN)
NAN_BOXED(2117260991,32,FLEN)
NAN_BOXED(1085749748,32,FLEN)
NAN_BOXED(1795161600,32,FLEN)
NAN_BOXED(2117260991,32,FLEN)
NAN_BOXED(1085749748,32,FLEN)
NAN_BOXED(1795161856,32,FLEN)
NAN_BOXED(2117260991,32,FLEN)
NAN_BOXED(1085749748,32,FLEN)
NAN_BOXED(1795161984,32,FLEN)
NAN_BOXED(2117260991,32,FLEN)
NAN_BOXED(1085749748,32,FLEN)
NAN_BOXED(1795162048,32,FLEN)
NAN_BOXED(2117260991,32,FLEN)
NAN_BOXED(1085749748,32,FLEN)
NAN_BOXED(1795162080,32,FLEN)
NAN_BOXED(2117260991,32,FLEN)
NAN_BOXED(1085749748,32,FLEN)
NAN_BOXED(1795162096,32,FLEN)
NAN_BOXED(2117260991,32,FLEN)
NAN_BOXED(1085749748,32,FLEN)
NAN_BOXED(1795162104,32,FLEN)
NAN_BOXED(2117260991,32,FLEN)
NAN_BOXED(1085749748,32,FLEN)
NAN_BOXED(1795162108,32,FLEN)
NAN_BOXED(2117260991,32,FLEN)
NAN_BOXED(1085749748,32,FLEN)
NAN_BOXED(1795162110,32,FLEN)
NAN_BOXED(2117260991,32,FLEN)
NAN_BOXED(1085749748,32,FLEN)
NAN_BOXED(1795162111,32,FLEN)
NAN_BOXED(2117260991,32,FLEN)
NAN_BOXED(1085749748,32,FLEN)
NAN_BOXED(2130706433,32,FLEN)
NAN_BOXED(2117260991,32,FLEN)
NAN_BOXED(1085749748,32,FLEN)
NAN_BOXED(2130706435,32,FLEN)
NAN_BOXED(2117260991,32,FLEN)
NAN_BOXED(1085749748,32,FLEN)
NAN_BOXED(2130706439,32,FLEN)
NAN_BOXED(2117260991,32,FLEN)
NAN_BOXED(1085749748,32,FLEN)
NAN_BOXED(2132384153,32,FLEN)
NAN_BOXED(2117260991,32,FLEN)
NAN_BOXED(1085749748,32,FLEN)
NAN_BOXED(2133103177,32,FLEN)
NAN_BOXED(2117260991,32,FLEN)
NAN_BOXED(1085749748,32,FLEN)
NAN_BOXED(2134061875,32,FLEN)
NAN_BOXED(2117260991,32,FLEN)
NAN_BOXED(1085749748,32,FLEN)
NAN_BOXED(2134301549,32,FLEN)
NAN_BOXED(2117260991,32,FLEN)
NAN_BOXED(1085749748,32,FLEN)
NAN_BOXED(2134621115,32,FLEN)
NAN_BOXED(2117260991,32,FLEN)
NAN_BOXED(1085749748,32,FLEN)
NAN_BOXED(2135180356,32,FLEN)
NAN_BOXED(2117260991,32,FLEN)
NAN_BOXED(1085749748,32,FLEN)
NAN_BOXED(2135739596,32,FLEN)
NAN_BOXED(2117260991,32,FLEN)
NAN_BOXED(1085749748,32,FLEN)
NAN_BOXED(2136698294,32,FLEN)
NAN_BOXED(2117260991,32,FLEN)
NAN_BOXED(1085749748,32,FLEN)
NAN_BOXED(2137417318,32,FLEN)
NAN_BOXED(2117260991,32,FLEN)
NAN_BOXED(1085749748,32,FLEN)
NAN_BOXED(2137896667,32,FLEN)
NAN_BOXED(2117260991,32,FLEN)
NAN_BOXED(1085749748,32,FLEN)
NAN_BOXED(2139095032,32,FLEN)
NAN_BOXED(2117260991,32,FLEN)
NAN_BOXED(1085749748,32,FLEN)
NAN_BOXED(2139095036,32,FLEN)
NAN_BOXED(2117260991,32,FLEN)
NAN_BOXED(1085749748,32,FLEN)
NAN_BOXED(2139095038,32,FLEN)
NAN_BOXED(2117296625,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2117296625,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483651,32,FLEN)
NAN_BOXED(2117296625,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483655,32,FLEN)
NAN_BOXED(2117296625,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149161369,32,FLEN)
NAN_BOXED(2117296625,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149880393,32,FLEN)
NAN_BOXED(2117296625,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2150839091,32,FLEN)
NAN_BOXED(2117296625,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151078765,32,FLEN)
NAN_BOXED(2117296625,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151398331,32,FLEN)
NAN_BOXED(2117296625,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151957572,32,FLEN)
NAN_BOXED(2117296625,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2152516812,32,FLEN)
NAN_BOXED(2117296625,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2153475510,32,FLEN)
NAN_BOXED(2117296625,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154194534,32,FLEN)
NAN_BOXED(2117296625,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154673883,32,FLEN)
NAN_BOXED(2117296625,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872248,32,FLEN)
NAN_BOXED(2117296625,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872252,32,FLEN)
NAN_BOXED(2117296625,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2117296625,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701376,32,FLEN)
NAN_BOXED(2117296625,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701377,32,FLEN)
NAN_BOXED(2117296625,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701379,32,FLEN)
NAN_BOXED(2117296625,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701383,32,FLEN)
NAN_BOXED(2117296625,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701391,32,FLEN)
NAN_BOXED(2117296625,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701407,32,FLEN)
NAN_BOXED(2117296625,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701439,32,FLEN)
NAN_BOXED(2117296625,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701503,32,FLEN)
NAN_BOXED(2117296625,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701631,32,FLEN)
NAN_BOXED(2117296625,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701887,32,FLEN)
NAN_BOXED(2117296625,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281702399,32,FLEN)
NAN_BOXED(2117296625,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281703423,32,FLEN)
NAN_BOXED(2117296625,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281705471,32,FLEN)
NAN_BOXED(2117296625,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281709567,32,FLEN)
NAN_BOXED(2117296625,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281717759,32,FLEN)
NAN_BOXED(2117296625,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281734143,32,FLEN)
NAN_BOXED(2117296625,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281766911,32,FLEN)
NAN_BOXED(2117296625,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281832447,32,FLEN)
NAN_BOXED(2117296625,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281963519,32,FLEN)
NAN_BOXED(2117296625,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2282225663,32,FLEN)
NAN_BOXED(2117296625,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2282749951,32,FLEN)
NAN_BOXED(2117296625,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2283798527,32,FLEN)
NAN_BOXED(2117296625,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2285895679,32,FLEN)
NAN_BOXED(2117296625,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2285895680,32,FLEN)
NAN_BOXED(2117296625,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2287992832,32,FLEN)
NAN_BOXED(2117296625,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2289041408,32,FLEN)
NAN_BOXED(2117296625,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2289565696,32,FLEN)
NAN_BOXED(2117296625,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2289827840,32,FLEN)
NAN_BOXED(2117296625,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2289958912,32,FLEN)
NAN_BOXED(2117296625,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290024448,32,FLEN)
NAN_BOXED(2117296625,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290057216,32,FLEN)
NAN_BOXED(2117296625,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290073600,32,FLEN)
NAN_BOXED(2117296625,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290081792,32,FLEN)
NAN_BOXED(2117296625,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290085888,32,FLEN)
NAN_BOXED(2117296625,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290087936,32,FLEN)
NAN_BOXED(2117296625,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290088960,32,FLEN)
NAN_BOXED(2117296625,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290089472,32,FLEN)
NAN_BOXED(2117296625,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290089728,32,FLEN)
NAN_BOXED(2117296625,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290089856,32,FLEN)
NAN_BOXED(2117296625,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290089920,32,FLEN)
NAN_BOXED(2117296625,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290089952,32,FLEN)
NAN_BOXED(2117296625,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290089968,32,FLEN)
NAN_BOXED(2117296625,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290089976,32,FLEN)
NAN_BOXED(2117296625,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290089980,32,FLEN)
NAN_BOXED(2117296625,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290089982,32,FLEN)
NAN_BOXED(2117296625,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290089983,32,FLEN)
NAN_BOXED(2117393797,32,FLEN)
NAN_BOXED(11873385,32,FLEN)
NAN_BOXED(620756992,32,FLEN)
NAN_BOXED(2117393797,32,FLEN)
NAN_BOXED(11873385,32,FLEN)
NAN_BOXED(620756993,32,FLEN)
NAN_BOXED(2117393797,32,FLEN)
NAN_BOXED(11873385,32,FLEN)
NAN_BOXED(620756995,32,FLEN)
NAN_BOXED(2117393797,32,FLEN)
NAN_BOXED(11873385,32,FLEN)
NAN_BOXED(620756999,32,FLEN)
NAN_BOXED(2117393797,32,FLEN)
NAN_BOXED(11873385,32,FLEN)
NAN_BOXED(620757007,32,FLEN)
NAN_BOXED(2117393797,32,FLEN)
NAN_BOXED(11873385,32,FLEN)
NAN_BOXED(620757023,32,FLEN)
NAN_BOXED(2117393797,32,FLEN)
NAN_BOXED(11873385,32,FLEN)
NAN_BOXED(620757055,32,FLEN)
NAN_BOXED(2117393797,32,FLEN)
NAN_BOXED(11873385,32,FLEN)
NAN_BOXED(620757119,32,FLEN)
NAN_BOXED(2117393797,32,FLEN)
NAN_BOXED(11873385,32,FLEN)
NAN_BOXED(620757247,32,FLEN)
NAN_BOXED(2117393797,32,FLEN)
NAN_BOXED(11873385,32,FLEN)
NAN_BOXED(620757503,32,FLEN)
NAN_BOXED(2117393797,32,FLEN)
NAN_BOXED(11873385,32,FLEN)
NAN_BOXED(620758015,32,FLEN)
NAN_BOXED(2117393797,32,FLEN)
NAN_BOXED(11873385,32,FLEN)
NAN_BOXED(620759039,32,FLEN)
NAN_BOXED(2117393797,32,FLEN)
NAN_BOXED(11873385,32,FLEN)
NAN_BOXED(620761087,32,FLEN)
NAN_BOXED(2117393797,32,FLEN)
NAN_BOXED(11873385,32,FLEN)
NAN_BOXED(620765183,32,FLEN)
NAN_BOXED(2117393797,32,FLEN)
NAN_BOXED(11873385,32,FLEN)
NAN_BOXED(620773375,32,FLEN)
NAN_BOXED(2117393797,32,FLEN)
NAN_BOXED(11873385,32,FLEN)
NAN_BOXED(620789759,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
