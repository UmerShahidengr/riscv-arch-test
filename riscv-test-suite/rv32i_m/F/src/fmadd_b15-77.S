
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:17:59 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_9728:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x381821 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e381821; op2val:0x0;
op3val:0x28000ff; valaddr_reg:x3; val_offset:29184*0 + 3*76*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29184*0 + 3*76*FLEN/8, x4, x1, x2)

inst_9729:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x381821 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e381821; op2val:0x0;
op3val:0x28001ff; valaddr_reg:x3; val_offset:29187*0 + 3*76*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29187*0 + 3*76*FLEN/8, x4, x1, x2)

inst_9730:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x381821 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e381821; op2val:0x0;
op3val:0x28003ff; valaddr_reg:x3; val_offset:29190*0 + 3*76*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29190*0 + 3*76*FLEN/8, x4, x1, x2)

inst_9731:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x381821 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e381821; op2val:0x0;
op3val:0x28007ff; valaddr_reg:x3; val_offset:29193*0 + 3*76*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29193*0 + 3*76*FLEN/8, x4, x1, x2)

inst_9732:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x381821 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e381821; op2val:0x0;
op3val:0x2800fff; valaddr_reg:x3; val_offset:29196*0 + 3*76*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29196*0 + 3*76*FLEN/8, x4, x1, x2)

inst_9733:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x381821 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e381821; op2val:0x0;
op3val:0x2801fff; valaddr_reg:x3; val_offset:29199*0 + 3*76*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29199*0 + 3*76*FLEN/8, x4, x1, x2)

inst_9734:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x381821 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e381821; op2val:0x0;
op3val:0x2803fff; valaddr_reg:x3; val_offset:29202*0 + 3*76*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29202*0 + 3*76*FLEN/8, x4, x1, x2)

inst_9735:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x381821 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e381821; op2val:0x0;
op3val:0x2807fff; valaddr_reg:x3; val_offset:29205*0 + 3*76*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29205*0 + 3*76*FLEN/8, x4, x1, x2)

inst_9736:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x381821 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e381821; op2val:0x0;
op3val:0x280ffff; valaddr_reg:x3; val_offset:29208*0 + 3*76*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29208*0 + 3*76*FLEN/8, x4, x1, x2)

inst_9737:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x381821 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e381821; op2val:0x0;
op3val:0x281ffff; valaddr_reg:x3; val_offset:29211*0 + 3*76*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29211*0 + 3*76*FLEN/8, x4, x1, x2)

inst_9738:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x381821 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e381821; op2val:0x0;
op3val:0x283ffff; valaddr_reg:x3; val_offset:29214*0 + 3*76*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29214*0 + 3*76*FLEN/8, x4, x1, x2)

inst_9739:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x381821 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e381821; op2val:0x0;
op3val:0x287ffff; valaddr_reg:x3; val_offset:29217*0 + 3*76*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29217*0 + 3*76*FLEN/8, x4, x1, x2)

inst_9740:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x381821 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e381821; op2val:0x0;
op3val:0x28fffff; valaddr_reg:x3; val_offset:29220*0 + 3*76*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29220*0 + 3*76*FLEN/8, x4, x1, x2)

inst_9741:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x381821 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e381821; op2val:0x0;
op3val:0x29fffff; valaddr_reg:x3; val_offset:29223*0 + 3*76*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29223*0 + 3*76*FLEN/8, x4, x1, x2)

inst_9742:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x381821 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e381821; op2val:0x0;
op3val:0x2bfffff; valaddr_reg:x3; val_offset:29226*0 + 3*76*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29226*0 + 3*76*FLEN/8, x4, x1, x2)

inst_9743:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x381821 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e381821; op2val:0x0;
op3val:0x2c00000; valaddr_reg:x3; val_offset:29229*0 + 3*76*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29229*0 + 3*76*FLEN/8, x4, x1, x2)

inst_9744:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x381821 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e381821; op2val:0x0;
op3val:0x2e00000; valaddr_reg:x3; val_offset:29232*0 + 3*76*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29232*0 + 3*76*FLEN/8, x4, x1, x2)

inst_9745:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x381821 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e381821; op2val:0x0;
op3val:0x2f00000; valaddr_reg:x3; val_offset:29235*0 + 3*76*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29235*0 + 3*76*FLEN/8, x4, x1, x2)

inst_9746:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x381821 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e381821; op2val:0x0;
op3val:0x2f80000; valaddr_reg:x3; val_offset:29238*0 + 3*76*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29238*0 + 3*76*FLEN/8, x4, x1, x2)

inst_9747:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x381821 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e381821; op2val:0x0;
op3val:0x2fc0000; valaddr_reg:x3; val_offset:29241*0 + 3*76*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29241*0 + 3*76*FLEN/8, x4, x1, x2)

inst_9748:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x381821 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e381821; op2val:0x0;
op3val:0x2fe0000; valaddr_reg:x3; val_offset:29244*0 + 3*76*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29244*0 + 3*76*FLEN/8, x4, x1, x2)

inst_9749:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x381821 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e381821; op2val:0x0;
op3val:0x2ff0000; valaddr_reg:x3; val_offset:29247*0 + 3*76*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29247*0 + 3*76*FLEN/8, x4, x1, x2)

inst_9750:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x381821 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e381821; op2val:0x0;
op3val:0x2ff8000; valaddr_reg:x3; val_offset:29250*0 + 3*76*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29250*0 + 3*76*FLEN/8, x4, x1, x2)

inst_9751:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x381821 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e381821; op2val:0x0;
op3val:0x2ffc000; valaddr_reg:x3; val_offset:29253*0 + 3*76*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29253*0 + 3*76*FLEN/8, x4, x1, x2)

inst_9752:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x381821 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e381821; op2val:0x0;
op3val:0x2ffe000; valaddr_reg:x3; val_offset:29256*0 + 3*76*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29256*0 + 3*76*FLEN/8, x4, x1, x2)

inst_9753:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x381821 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e381821; op2val:0x0;
op3val:0x2fff000; valaddr_reg:x3; val_offset:29259*0 + 3*76*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29259*0 + 3*76*FLEN/8, x4, x1, x2)

inst_9754:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x381821 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e381821; op2val:0x0;
op3val:0x2fff800; valaddr_reg:x3; val_offset:29262*0 + 3*76*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29262*0 + 3*76*FLEN/8, x4, x1, x2)

inst_9755:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x381821 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e381821; op2val:0x0;
op3val:0x2fffc00; valaddr_reg:x3; val_offset:29265*0 + 3*76*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29265*0 + 3*76*FLEN/8, x4, x1, x2)

inst_9756:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x381821 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e381821; op2val:0x0;
op3val:0x2fffe00; valaddr_reg:x3; val_offset:29268*0 + 3*76*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29268*0 + 3*76*FLEN/8, x4, x1, x2)

inst_9757:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x381821 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e381821; op2val:0x0;
op3val:0x2ffff00; valaddr_reg:x3; val_offset:29271*0 + 3*76*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29271*0 + 3*76*FLEN/8, x4, x1, x2)

inst_9758:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x381821 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e381821; op2val:0x0;
op3val:0x2ffff80; valaddr_reg:x3; val_offset:29274*0 + 3*76*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29274*0 + 3*76*FLEN/8, x4, x1, x2)

inst_9759:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x381821 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e381821; op2val:0x0;
op3val:0x2ffffc0; valaddr_reg:x3; val_offset:29277*0 + 3*76*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29277*0 + 3*76*FLEN/8, x4, x1, x2)

inst_9760:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x381821 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e381821; op2val:0x0;
op3val:0x2ffffe0; valaddr_reg:x3; val_offset:29280*0 + 3*76*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29280*0 + 3*76*FLEN/8, x4, x1, x2)

inst_9761:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x381821 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e381821; op2val:0x0;
op3val:0x2fffff0; valaddr_reg:x3; val_offset:29283*0 + 3*76*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29283*0 + 3*76*FLEN/8, x4, x1, x2)

inst_9762:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x381821 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e381821; op2val:0x0;
op3val:0x2fffff8; valaddr_reg:x3; val_offset:29286*0 + 3*76*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29286*0 + 3*76*FLEN/8, x4, x1, x2)

inst_9763:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x381821 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e381821; op2val:0x0;
op3val:0x2fffffc; valaddr_reg:x3; val_offset:29289*0 + 3*76*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29289*0 + 3*76*FLEN/8, x4, x1, x2)

inst_9764:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x381821 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e381821; op2val:0x0;
op3val:0x2fffffe; valaddr_reg:x3; val_offset:29292*0 + 3*76*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29292*0 + 3*76*FLEN/8, x4, x1, x2)

inst_9765:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x381821 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e381821; op2val:0x0;
op3val:0x2ffffff; valaddr_reg:x3; val_offset:29295*0 + 3*76*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29295*0 + 3*76*FLEN/8, x4, x1, x2)

inst_9766:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b52d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b52d3; op2val:0x80000000;
op3val:0x80000001; valaddr_reg:x3; val_offset:29298*0 + 3*76*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29298*0 + 3*76*FLEN/8, x4, x1, x2)

inst_9767:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b52d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b52d3; op2val:0x80000000;
op3val:0x80000003; valaddr_reg:x3; val_offset:29301*0 + 3*76*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29301*0 + 3*76*FLEN/8, x4, x1, x2)

inst_9768:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b52d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b52d3; op2val:0x80000000;
op3val:0x80000007; valaddr_reg:x3; val_offset:29304*0 + 3*76*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29304*0 + 3*76*FLEN/8, x4, x1, x2)

inst_9769:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b52d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b52d3; op2val:0x80000000;
op3val:0x80199999; valaddr_reg:x3; val_offset:29307*0 + 3*76*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29307*0 + 3*76*FLEN/8, x4, x1, x2)

inst_9770:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b52d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b52d3; op2val:0x80000000;
op3val:0x80249249; valaddr_reg:x3; val_offset:29310*0 + 3*76*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29310*0 + 3*76*FLEN/8, x4, x1, x2)

inst_9771:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b52d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b52d3; op2val:0x80000000;
op3val:0x80333333; valaddr_reg:x3; val_offset:29313*0 + 3*76*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29313*0 + 3*76*FLEN/8, x4, x1, x2)

inst_9772:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b52d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b52d3; op2val:0x80000000;
op3val:0x8036db6d; valaddr_reg:x3; val_offset:29316*0 + 3*76*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29316*0 + 3*76*FLEN/8, x4, x1, x2)

inst_9773:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b52d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b52d3; op2val:0x80000000;
op3val:0x803bbbbb; valaddr_reg:x3; val_offset:29319*0 + 3*76*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29319*0 + 3*76*FLEN/8, x4, x1, x2)

inst_9774:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b52d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b52d3; op2val:0x80000000;
op3val:0x80444444; valaddr_reg:x3; val_offset:29322*0 + 3*76*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29322*0 + 3*76*FLEN/8, x4, x1, x2)

inst_9775:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b52d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b52d3; op2val:0x80000000;
op3val:0x804ccccc; valaddr_reg:x3; val_offset:29325*0 + 3*76*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29325*0 + 3*76*FLEN/8, x4, x1, x2)

inst_9776:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b52d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b52d3; op2val:0x80000000;
op3val:0x805b6db6; valaddr_reg:x3; val_offset:29328*0 + 3*76*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29328*0 + 3*76*FLEN/8, x4, x1, x2)

inst_9777:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b52d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b52d3; op2val:0x80000000;
op3val:0x80666666; valaddr_reg:x3; val_offset:29331*0 + 3*76*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29331*0 + 3*76*FLEN/8, x4, x1, x2)

inst_9778:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b52d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b52d3; op2val:0x80000000;
op3val:0x806db6db; valaddr_reg:x3; val_offset:29334*0 + 3*76*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29334*0 + 3*76*FLEN/8, x4, x1, x2)

inst_9779:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b52d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b52d3; op2val:0x80000000;
op3val:0x807ffff8; valaddr_reg:x3; val_offset:29337*0 + 3*76*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29337*0 + 3*76*FLEN/8, x4, x1, x2)

inst_9780:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b52d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b52d3; op2val:0x80000000;
op3val:0x807ffffc; valaddr_reg:x3; val_offset:29340*0 + 3*76*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29340*0 + 3*76*FLEN/8, x4, x1, x2)

inst_9781:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b52d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b52d3; op2val:0x80000000;
op3val:0x807ffffe; valaddr_reg:x3; val_offset:29343*0 + 3*76*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29343*0 + 3*76*FLEN/8, x4, x1, x2)

inst_9782:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b52d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b52d3; op2val:0x80000000;
op3val:0x82800000; valaddr_reg:x3; val_offset:29346*0 + 3*76*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29346*0 + 3*76*FLEN/8, x4, x1, x2)

inst_9783:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b52d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b52d3; op2val:0x80000000;
op3val:0x82800001; valaddr_reg:x3; val_offset:29349*0 + 3*76*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29349*0 + 3*76*FLEN/8, x4, x1, x2)

inst_9784:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b52d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b52d3; op2val:0x80000000;
op3val:0x82800003; valaddr_reg:x3; val_offset:29352*0 + 3*76*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29352*0 + 3*76*FLEN/8, x4, x1, x2)

inst_9785:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b52d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b52d3; op2val:0x80000000;
op3val:0x82800007; valaddr_reg:x3; val_offset:29355*0 + 3*76*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29355*0 + 3*76*FLEN/8, x4, x1, x2)

inst_9786:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b52d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b52d3; op2val:0x80000000;
op3val:0x8280000f; valaddr_reg:x3; val_offset:29358*0 + 3*76*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29358*0 + 3*76*FLEN/8, x4, x1, x2)

inst_9787:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b52d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b52d3; op2val:0x80000000;
op3val:0x8280001f; valaddr_reg:x3; val_offset:29361*0 + 3*76*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29361*0 + 3*76*FLEN/8, x4, x1, x2)

inst_9788:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b52d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b52d3; op2val:0x80000000;
op3val:0x8280003f; valaddr_reg:x3; val_offset:29364*0 + 3*76*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29364*0 + 3*76*FLEN/8, x4, x1, x2)

inst_9789:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b52d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b52d3; op2val:0x80000000;
op3val:0x8280007f; valaddr_reg:x3; val_offset:29367*0 + 3*76*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29367*0 + 3*76*FLEN/8, x4, x1, x2)

inst_9790:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b52d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b52d3; op2val:0x80000000;
op3val:0x828000ff; valaddr_reg:x3; val_offset:29370*0 + 3*76*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29370*0 + 3*76*FLEN/8, x4, x1, x2)

inst_9791:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b52d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b52d3; op2val:0x80000000;
op3val:0x828001ff; valaddr_reg:x3; val_offset:29373*0 + 3*76*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29373*0 + 3*76*FLEN/8, x4, x1, x2)

inst_9792:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b52d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b52d3; op2val:0x80000000;
op3val:0x828003ff; valaddr_reg:x3; val_offset:29376*0 + 3*76*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29376*0 + 3*76*FLEN/8, x4, x1, x2)

inst_9793:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b52d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b52d3; op2val:0x80000000;
op3val:0x828007ff; valaddr_reg:x3; val_offset:29379*0 + 3*76*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29379*0 + 3*76*FLEN/8, x4, x1, x2)

inst_9794:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b52d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b52d3; op2val:0x80000000;
op3val:0x82800fff; valaddr_reg:x3; val_offset:29382*0 + 3*76*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29382*0 + 3*76*FLEN/8, x4, x1, x2)

inst_9795:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b52d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b52d3; op2val:0x80000000;
op3val:0x82801fff; valaddr_reg:x3; val_offset:29385*0 + 3*76*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29385*0 + 3*76*FLEN/8, x4, x1, x2)

inst_9796:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b52d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b52d3; op2val:0x80000000;
op3val:0x82803fff; valaddr_reg:x3; val_offset:29388*0 + 3*76*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29388*0 + 3*76*FLEN/8, x4, x1, x2)

inst_9797:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b52d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b52d3; op2val:0x80000000;
op3val:0x82807fff; valaddr_reg:x3; val_offset:29391*0 + 3*76*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29391*0 + 3*76*FLEN/8, x4, x1, x2)

inst_9798:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b52d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b52d3; op2val:0x80000000;
op3val:0x8280ffff; valaddr_reg:x3; val_offset:29394*0 + 3*76*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29394*0 + 3*76*FLEN/8, x4, x1, x2)

inst_9799:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b52d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b52d3; op2val:0x80000000;
op3val:0x8281ffff; valaddr_reg:x3; val_offset:29397*0 + 3*76*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29397*0 + 3*76*FLEN/8, x4, x1, x2)

inst_9800:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b52d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b52d3; op2val:0x80000000;
op3val:0x8283ffff; valaddr_reg:x3; val_offset:29400*0 + 3*76*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29400*0 + 3*76*FLEN/8, x4, x1, x2)

inst_9801:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b52d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b52d3; op2val:0x80000000;
op3val:0x8287ffff; valaddr_reg:x3; val_offset:29403*0 + 3*76*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29403*0 + 3*76*FLEN/8, x4, x1, x2)

inst_9802:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b52d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b52d3; op2val:0x80000000;
op3val:0x828fffff; valaddr_reg:x3; val_offset:29406*0 + 3*76*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29406*0 + 3*76*FLEN/8, x4, x1, x2)

inst_9803:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b52d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b52d3; op2val:0x80000000;
op3val:0x829fffff; valaddr_reg:x3; val_offset:29409*0 + 3*76*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29409*0 + 3*76*FLEN/8, x4, x1, x2)

inst_9804:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b52d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b52d3; op2val:0x80000000;
op3val:0x82bfffff; valaddr_reg:x3; val_offset:29412*0 + 3*76*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29412*0 + 3*76*FLEN/8, x4, x1, x2)

inst_9805:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b52d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b52d3; op2val:0x80000000;
op3val:0x82c00000; valaddr_reg:x3; val_offset:29415*0 + 3*76*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29415*0 + 3*76*FLEN/8, x4, x1, x2)

inst_9806:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b52d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b52d3; op2val:0x80000000;
op3val:0x82e00000; valaddr_reg:x3; val_offset:29418*0 + 3*76*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29418*0 + 3*76*FLEN/8, x4, x1, x2)

inst_9807:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b52d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b52d3; op2val:0x80000000;
op3val:0x82f00000; valaddr_reg:x3; val_offset:29421*0 + 3*76*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29421*0 + 3*76*FLEN/8, x4, x1, x2)

inst_9808:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b52d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b52d3; op2val:0x80000000;
op3val:0x82f80000; valaddr_reg:x3; val_offset:29424*0 + 3*76*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29424*0 + 3*76*FLEN/8, x4, x1, x2)

inst_9809:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b52d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b52d3; op2val:0x80000000;
op3val:0x82fc0000; valaddr_reg:x3; val_offset:29427*0 + 3*76*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29427*0 + 3*76*FLEN/8, x4, x1, x2)

inst_9810:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b52d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b52d3; op2val:0x80000000;
op3val:0x82fe0000; valaddr_reg:x3; val_offset:29430*0 + 3*76*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29430*0 + 3*76*FLEN/8, x4, x1, x2)

inst_9811:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b52d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b52d3; op2val:0x80000000;
op3val:0x82ff0000; valaddr_reg:x3; val_offset:29433*0 + 3*76*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29433*0 + 3*76*FLEN/8, x4, x1, x2)

inst_9812:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b52d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b52d3; op2val:0x80000000;
op3val:0x82ff8000; valaddr_reg:x3; val_offset:29436*0 + 3*76*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29436*0 + 3*76*FLEN/8, x4, x1, x2)

inst_9813:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b52d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b52d3; op2val:0x80000000;
op3val:0x82ffc000; valaddr_reg:x3; val_offset:29439*0 + 3*76*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29439*0 + 3*76*FLEN/8, x4, x1, x2)

inst_9814:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b52d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b52d3; op2val:0x80000000;
op3val:0x82ffe000; valaddr_reg:x3; val_offset:29442*0 + 3*76*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29442*0 + 3*76*FLEN/8, x4, x1, x2)

inst_9815:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b52d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b52d3; op2val:0x80000000;
op3val:0x82fff000; valaddr_reg:x3; val_offset:29445*0 + 3*76*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29445*0 + 3*76*FLEN/8, x4, x1, x2)

inst_9816:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b52d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b52d3; op2val:0x80000000;
op3val:0x82fff800; valaddr_reg:x3; val_offset:29448*0 + 3*76*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29448*0 + 3*76*FLEN/8, x4, x1, x2)

inst_9817:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b52d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b52d3; op2val:0x80000000;
op3val:0x82fffc00; valaddr_reg:x3; val_offset:29451*0 + 3*76*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29451*0 + 3*76*FLEN/8, x4, x1, x2)

inst_9818:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b52d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b52d3; op2val:0x80000000;
op3val:0x82fffe00; valaddr_reg:x3; val_offset:29454*0 + 3*76*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29454*0 + 3*76*FLEN/8, x4, x1, x2)

inst_9819:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b52d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b52d3; op2val:0x80000000;
op3val:0x82ffff00; valaddr_reg:x3; val_offset:29457*0 + 3*76*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29457*0 + 3*76*FLEN/8, x4, x1, x2)

inst_9820:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b52d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b52d3; op2val:0x80000000;
op3val:0x82ffff80; valaddr_reg:x3; val_offset:29460*0 + 3*76*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29460*0 + 3*76*FLEN/8, x4, x1, x2)

inst_9821:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b52d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b52d3; op2val:0x80000000;
op3val:0x82ffffc0; valaddr_reg:x3; val_offset:29463*0 + 3*76*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29463*0 + 3*76*FLEN/8, x4, x1, x2)

inst_9822:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b52d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b52d3; op2val:0x80000000;
op3val:0x82ffffe0; valaddr_reg:x3; val_offset:29466*0 + 3*76*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29466*0 + 3*76*FLEN/8, x4, x1, x2)

inst_9823:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b52d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b52d3; op2val:0x80000000;
op3val:0x82fffff0; valaddr_reg:x3; val_offset:29469*0 + 3*76*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29469*0 + 3*76*FLEN/8, x4, x1, x2)

inst_9824:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b52d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b52d3; op2val:0x80000000;
op3val:0x82fffff8; valaddr_reg:x3; val_offset:29472*0 + 3*76*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29472*0 + 3*76*FLEN/8, x4, x1, x2)

inst_9825:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b52d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b52d3; op2val:0x80000000;
op3val:0x82fffffc; valaddr_reg:x3; val_offset:29475*0 + 3*76*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29475*0 + 3*76*FLEN/8, x4, x1, x2)

inst_9826:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b52d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b52d3; op2val:0x80000000;
op3val:0x82fffffe; valaddr_reg:x3; val_offset:29478*0 + 3*76*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29478*0 + 3*76*FLEN/8, x4, x1, x2)

inst_9827:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b52d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b52d3; op2val:0x80000000;
op3val:0x82ffffff; valaddr_reg:x3; val_offset:29481*0 + 3*76*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29481*0 + 3*76*FLEN/8, x4, x1, x2)

inst_9828:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3e6e75 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2c1287 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3e6e75; op2val:0xc0ac1287;
op3val:0xe6000000; valaddr_reg:x3; val_offset:29484*0 + 3*76*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29484*0 + 3*76*FLEN/8, x4, x1, x2)

inst_9829:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3e6e75 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2c1287 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3e6e75; op2val:0xc0ac1287;
op3val:0xe6000001; valaddr_reg:x3; val_offset:29487*0 + 3*76*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29487*0 + 3*76*FLEN/8, x4, x1, x2)

inst_9830:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3e6e75 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2c1287 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3e6e75; op2val:0xc0ac1287;
op3val:0xe6000003; valaddr_reg:x3; val_offset:29490*0 + 3*76*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29490*0 + 3*76*FLEN/8, x4, x1, x2)

inst_9831:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3e6e75 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2c1287 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3e6e75; op2val:0xc0ac1287;
op3val:0xe6000007; valaddr_reg:x3; val_offset:29493*0 + 3*76*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29493*0 + 3*76*FLEN/8, x4, x1, x2)

inst_9832:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3e6e75 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2c1287 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3e6e75; op2val:0xc0ac1287;
op3val:0xe600000f; valaddr_reg:x3; val_offset:29496*0 + 3*76*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29496*0 + 3*76*FLEN/8, x4, x1, x2)

inst_9833:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3e6e75 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2c1287 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3e6e75; op2val:0xc0ac1287;
op3val:0xe600001f; valaddr_reg:x3; val_offset:29499*0 + 3*76*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29499*0 + 3*76*FLEN/8, x4, x1, x2)

inst_9834:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3e6e75 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2c1287 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3e6e75; op2val:0xc0ac1287;
op3val:0xe600003f; valaddr_reg:x3; val_offset:29502*0 + 3*76*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29502*0 + 3*76*FLEN/8, x4, x1, x2)

inst_9835:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3e6e75 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2c1287 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3e6e75; op2val:0xc0ac1287;
op3val:0xe600007f; valaddr_reg:x3; val_offset:29505*0 + 3*76*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29505*0 + 3*76*FLEN/8, x4, x1, x2)

inst_9836:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3e6e75 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2c1287 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3e6e75; op2val:0xc0ac1287;
op3val:0xe60000ff; valaddr_reg:x3; val_offset:29508*0 + 3*76*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29508*0 + 3*76*FLEN/8, x4, x1, x2)

inst_9837:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3e6e75 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2c1287 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3e6e75; op2val:0xc0ac1287;
op3val:0xe60001ff; valaddr_reg:x3; val_offset:29511*0 + 3*76*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29511*0 + 3*76*FLEN/8, x4, x1, x2)

inst_9838:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3e6e75 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2c1287 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3e6e75; op2val:0xc0ac1287;
op3val:0xe60003ff; valaddr_reg:x3; val_offset:29514*0 + 3*76*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29514*0 + 3*76*FLEN/8, x4, x1, x2)

inst_9839:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3e6e75 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2c1287 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3e6e75; op2val:0xc0ac1287;
op3val:0xe60007ff; valaddr_reg:x3; val_offset:29517*0 + 3*76*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29517*0 + 3*76*FLEN/8, x4, x1, x2)

inst_9840:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3e6e75 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2c1287 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3e6e75; op2val:0xc0ac1287;
op3val:0xe6000fff; valaddr_reg:x3; val_offset:29520*0 + 3*76*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29520*0 + 3*76*FLEN/8, x4, x1, x2)

inst_9841:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3e6e75 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2c1287 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3e6e75; op2val:0xc0ac1287;
op3val:0xe6001fff; valaddr_reg:x3; val_offset:29523*0 + 3*76*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29523*0 + 3*76*FLEN/8, x4, x1, x2)

inst_9842:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3e6e75 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2c1287 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3e6e75; op2val:0xc0ac1287;
op3val:0xe6003fff; valaddr_reg:x3; val_offset:29526*0 + 3*76*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29526*0 + 3*76*FLEN/8, x4, x1, x2)

inst_9843:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3e6e75 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2c1287 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3e6e75; op2val:0xc0ac1287;
op3val:0xe6007fff; valaddr_reg:x3; val_offset:29529*0 + 3*76*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29529*0 + 3*76*FLEN/8, x4, x1, x2)

inst_9844:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3e6e75 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2c1287 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3e6e75; op2val:0xc0ac1287;
op3val:0xe600ffff; valaddr_reg:x3; val_offset:29532*0 + 3*76*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29532*0 + 3*76*FLEN/8, x4, x1, x2)

inst_9845:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3e6e75 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2c1287 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3e6e75; op2val:0xc0ac1287;
op3val:0xe601ffff; valaddr_reg:x3; val_offset:29535*0 + 3*76*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29535*0 + 3*76*FLEN/8, x4, x1, x2)

inst_9846:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3e6e75 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2c1287 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3e6e75; op2val:0xc0ac1287;
op3val:0xe603ffff; valaddr_reg:x3; val_offset:29538*0 + 3*76*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29538*0 + 3*76*FLEN/8, x4, x1, x2)

inst_9847:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3e6e75 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2c1287 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3e6e75; op2val:0xc0ac1287;
op3val:0xe607ffff; valaddr_reg:x3; val_offset:29541*0 + 3*76*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29541*0 + 3*76*FLEN/8, x4, x1, x2)

inst_9848:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3e6e75 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2c1287 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3e6e75; op2val:0xc0ac1287;
op3val:0xe60fffff; valaddr_reg:x3; val_offset:29544*0 + 3*76*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29544*0 + 3*76*FLEN/8, x4, x1, x2)

inst_9849:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3e6e75 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2c1287 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3e6e75; op2val:0xc0ac1287;
op3val:0xe61fffff; valaddr_reg:x3; val_offset:29547*0 + 3*76*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29547*0 + 3*76*FLEN/8, x4, x1, x2)

inst_9850:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3e6e75 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2c1287 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3e6e75; op2val:0xc0ac1287;
op3val:0xe63fffff; valaddr_reg:x3; val_offset:29550*0 + 3*76*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29550*0 + 3*76*FLEN/8, x4, x1, x2)

inst_9851:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3e6e75 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2c1287 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3e6e75; op2val:0xc0ac1287;
op3val:0xe6400000; valaddr_reg:x3; val_offset:29553*0 + 3*76*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29553*0 + 3*76*FLEN/8, x4, x1, x2)

inst_9852:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3e6e75 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2c1287 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3e6e75; op2val:0xc0ac1287;
op3val:0xe6600000; valaddr_reg:x3; val_offset:29556*0 + 3*76*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29556*0 + 3*76*FLEN/8, x4, x1, x2)

inst_9853:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3e6e75 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2c1287 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3e6e75; op2val:0xc0ac1287;
op3val:0xe6700000; valaddr_reg:x3; val_offset:29559*0 + 3*76*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29559*0 + 3*76*FLEN/8, x4, x1, x2)

inst_9854:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3e6e75 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2c1287 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3e6e75; op2val:0xc0ac1287;
op3val:0xe6780000; valaddr_reg:x3; val_offset:29562*0 + 3*76*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29562*0 + 3*76*FLEN/8, x4, x1, x2)

inst_9855:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3e6e75 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2c1287 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3e6e75; op2val:0xc0ac1287;
op3val:0xe67c0000; valaddr_reg:x3; val_offset:29565*0 + 3*76*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29565*0 + 3*76*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2117605409,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(41943295,32,FLEN)
NAN_BOXED(2117605409,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(41943551,32,FLEN)
NAN_BOXED(2117605409,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(41944063,32,FLEN)
NAN_BOXED(2117605409,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(41945087,32,FLEN)
NAN_BOXED(2117605409,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(41947135,32,FLEN)
NAN_BOXED(2117605409,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(41951231,32,FLEN)
NAN_BOXED(2117605409,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(41959423,32,FLEN)
NAN_BOXED(2117605409,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(41975807,32,FLEN)
NAN_BOXED(2117605409,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(42008575,32,FLEN)
NAN_BOXED(2117605409,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(42074111,32,FLEN)
NAN_BOXED(2117605409,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(42205183,32,FLEN)
NAN_BOXED(2117605409,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(42467327,32,FLEN)
NAN_BOXED(2117605409,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(42991615,32,FLEN)
NAN_BOXED(2117605409,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(44040191,32,FLEN)
NAN_BOXED(2117605409,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(46137343,32,FLEN)
NAN_BOXED(2117605409,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(46137344,32,FLEN)
NAN_BOXED(2117605409,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(48234496,32,FLEN)
NAN_BOXED(2117605409,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(49283072,32,FLEN)
NAN_BOXED(2117605409,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(49807360,32,FLEN)
NAN_BOXED(2117605409,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50069504,32,FLEN)
NAN_BOXED(2117605409,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50200576,32,FLEN)
NAN_BOXED(2117605409,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50266112,32,FLEN)
NAN_BOXED(2117605409,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50298880,32,FLEN)
NAN_BOXED(2117605409,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50315264,32,FLEN)
NAN_BOXED(2117605409,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50323456,32,FLEN)
NAN_BOXED(2117605409,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50327552,32,FLEN)
NAN_BOXED(2117605409,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50329600,32,FLEN)
NAN_BOXED(2117605409,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50330624,32,FLEN)
NAN_BOXED(2117605409,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50331136,32,FLEN)
NAN_BOXED(2117605409,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50331392,32,FLEN)
NAN_BOXED(2117605409,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50331520,32,FLEN)
NAN_BOXED(2117605409,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50331584,32,FLEN)
NAN_BOXED(2117605409,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50331616,32,FLEN)
NAN_BOXED(2117605409,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50331632,32,FLEN)
NAN_BOXED(2117605409,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50331640,32,FLEN)
NAN_BOXED(2117605409,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50331644,32,FLEN)
NAN_BOXED(2117605409,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50331646,32,FLEN)
NAN_BOXED(2117605409,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50331647,32,FLEN)
NAN_BOXED(2117817043,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2117817043,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483651,32,FLEN)
NAN_BOXED(2117817043,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483655,32,FLEN)
NAN_BOXED(2117817043,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149161369,32,FLEN)
NAN_BOXED(2117817043,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149880393,32,FLEN)
NAN_BOXED(2117817043,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2150839091,32,FLEN)
NAN_BOXED(2117817043,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151078765,32,FLEN)
NAN_BOXED(2117817043,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151398331,32,FLEN)
NAN_BOXED(2117817043,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151957572,32,FLEN)
NAN_BOXED(2117817043,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2152516812,32,FLEN)
NAN_BOXED(2117817043,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2153475510,32,FLEN)
NAN_BOXED(2117817043,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154194534,32,FLEN)
NAN_BOXED(2117817043,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154673883,32,FLEN)
NAN_BOXED(2117817043,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872248,32,FLEN)
NAN_BOXED(2117817043,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872252,32,FLEN)
NAN_BOXED(2117817043,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2117817043,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189426688,32,FLEN)
NAN_BOXED(2117817043,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189426689,32,FLEN)
NAN_BOXED(2117817043,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189426691,32,FLEN)
NAN_BOXED(2117817043,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189426695,32,FLEN)
NAN_BOXED(2117817043,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189426703,32,FLEN)
NAN_BOXED(2117817043,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189426719,32,FLEN)
NAN_BOXED(2117817043,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189426751,32,FLEN)
NAN_BOXED(2117817043,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189426815,32,FLEN)
NAN_BOXED(2117817043,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189426943,32,FLEN)
NAN_BOXED(2117817043,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189427199,32,FLEN)
NAN_BOXED(2117817043,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189427711,32,FLEN)
NAN_BOXED(2117817043,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189428735,32,FLEN)
NAN_BOXED(2117817043,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189430783,32,FLEN)
NAN_BOXED(2117817043,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189434879,32,FLEN)
NAN_BOXED(2117817043,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189443071,32,FLEN)
NAN_BOXED(2117817043,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189459455,32,FLEN)
NAN_BOXED(2117817043,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189492223,32,FLEN)
NAN_BOXED(2117817043,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189557759,32,FLEN)
NAN_BOXED(2117817043,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189688831,32,FLEN)
NAN_BOXED(2117817043,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189950975,32,FLEN)
NAN_BOXED(2117817043,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2190475263,32,FLEN)
NAN_BOXED(2117817043,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2191523839,32,FLEN)
NAN_BOXED(2117817043,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2193620991,32,FLEN)
NAN_BOXED(2117817043,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2193620992,32,FLEN)
NAN_BOXED(2117817043,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2195718144,32,FLEN)
NAN_BOXED(2117817043,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2196766720,32,FLEN)
NAN_BOXED(2117817043,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197291008,32,FLEN)
NAN_BOXED(2117817043,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197553152,32,FLEN)
NAN_BOXED(2117817043,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197684224,32,FLEN)
NAN_BOXED(2117817043,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197749760,32,FLEN)
NAN_BOXED(2117817043,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197782528,32,FLEN)
NAN_BOXED(2117817043,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197798912,32,FLEN)
NAN_BOXED(2117817043,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197807104,32,FLEN)
NAN_BOXED(2117817043,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197811200,32,FLEN)
NAN_BOXED(2117817043,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197813248,32,FLEN)
NAN_BOXED(2117817043,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197814272,32,FLEN)
NAN_BOXED(2117817043,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197814784,32,FLEN)
NAN_BOXED(2117817043,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197815040,32,FLEN)
NAN_BOXED(2117817043,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197815168,32,FLEN)
NAN_BOXED(2117817043,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197815232,32,FLEN)
NAN_BOXED(2117817043,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197815264,32,FLEN)
NAN_BOXED(2117817043,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197815280,32,FLEN)
NAN_BOXED(2117817043,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197815288,32,FLEN)
NAN_BOXED(2117817043,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197815292,32,FLEN)
NAN_BOXED(2117817043,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197815294,32,FLEN)
NAN_BOXED(2117817043,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197815295,32,FLEN)
NAN_BOXED(2118020725,32,FLEN)
NAN_BOXED(3232502407,32,FLEN)
NAN_BOXED(3858759680,32,FLEN)
NAN_BOXED(2118020725,32,FLEN)
NAN_BOXED(3232502407,32,FLEN)
NAN_BOXED(3858759681,32,FLEN)
NAN_BOXED(2118020725,32,FLEN)
NAN_BOXED(3232502407,32,FLEN)
NAN_BOXED(3858759683,32,FLEN)
NAN_BOXED(2118020725,32,FLEN)
NAN_BOXED(3232502407,32,FLEN)
NAN_BOXED(3858759687,32,FLEN)
NAN_BOXED(2118020725,32,FLEN)
NAN_BOXED(3232502407,32,FLEN)
NAN_BOXED(3858759695,32,FLEN)
NAN_BOXED(2118020725,32,FLEN)
NAN_BOXED(3232502407,32,FLEN)
NAN_BOXED(3858759711,32,FLEN)
NAN_BOXED(2118020725,32,FLEN)
NAN_BOXED(3232502407,32,FLEN)
NAN_BOXED(3858759743,32,FLEN)
NAN_BOXED(2118020725,32,FLEN)
NAN_BOXED(3232502407,32,FLEN)
NAN_BOXED(3858759807,32,FLEN)
NAN_BOXED(2118020725,32,FLEN)
NAN_BOXED(3232502407,32,FLEN)
NAN_BOXED(3858759935,32,FLEN)
NAN_BOXED(2118020725,32,FLEN)
NAN_BOXED(3232502407,32,FLEN)
NAN_BOXED(3858760191,32,FLEN)
NAN_BOXED(2118020725,32,FLEN)
NAN_BOXED(3232502407,32,FLEN)
NAN_BOXED(3858760703,32,FLEN)
NAN_BOXED(2118020725,32,FLEN)
NAN_BOXED(3232502407,32,FLEN)
NAN_BOXED(3858761727,32,FLEN)
NAN_BOXED(2118020725,32,FLEN)
NAN_BOXED(3232502407,32,FLEN)
NAN_BOXED(3858763775,32,FLEN)
NAN_BOXED(2118020725,32,FLEN)
NAN_BOXED(3232502407,32,FLEN)
NAN_BOXED(3858767871,32,FLEN)
NAN_BOXED(2118020725,32,FLEN)
NAN_BOXED(3232502407,32,FLEN)
NAN_BOXED(3858776063,32,FLEN)
NAN_BOXED(2118020725,32,FLEN)
NAN_BOXED(3232502407,32,FLEN)
NAN_BOXED(3858792447,32,FLEN)
NAN_BOXED(2118020725,32,FLEN)
NAN_BOXED(3232502407,32,FLEN)
NAN_BOXED(3858825215,32,FLEN)
NAN_BOXED(2118020725,32,FLEN)
NAN_BOXED(3232502407,32,FLEN)
NAN_BOXED(3858890751,32,FLEN)
NAN_BOXED(2118020725,32,FLEN)
NAN_BOXED(3232502407,32,FLEN)
NAN_BOXED(3859021823,32,FLEN)
NAN_BOXED(2118020725,32,FLEN)
NAN_BOXED(3232502407,32,FLEN)
NAN_BOXED(3859283967,32,FLEN)
NAN_BOXED(2118020725,32,FLEN)
NAN_BOXED(3232502407,32,FLEN)
NAN_BOXED(3859808255,32,FLEN)
NAN_BOXED(2118020725,32,FLEN)
NAN_BOXED(3232502407,32,FLEN)
NAN_BOXED(3860856831,32,FLEN)
NAN_BOXED(2118020725,32,FLEN)
NAN_BOXED(3232502407,32,FLEN)
NAN_BOXED(3862953983,32,FLEN)
NAN_BOXED(2118020725,32,FLEN)
NAN_BOXED(3232502407,32,FLEN)
NAN_BOXED(3862953984,32,FLEN)
NAN_BOXED(2118020725,32,FLEN)
NAN_BOXED(3232502407,32,FLEN)
NAN_BOXED(3865051136,32,FLEN)
NAN_BOXED(2118020725,32,FLEN)
NAN_BOXED(3232502407,32,FLEN)
NAN_BOXED(3866099712,32,FLEN)
NAN_BOXED(2118020725,32,FLEN)
NAN_BOXED(3232502407,32,FLEN)
NAN_BOXED(3866624000,32,FLEN)
NAN_BOXED(2118020725,32,FLEN)
NAN_BOXED(3232502407,32,FLEN)
NAN_BOXED(3866886144,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
