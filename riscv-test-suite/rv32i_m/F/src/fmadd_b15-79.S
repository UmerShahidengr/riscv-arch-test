
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:17:59 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_9984:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3f44a3 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2b51d7 and fs3 == 1 and fe3 == 0xf7 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3f44a3; op2val:0xc0ab51d7;
op3val:0xfbffe000; valaddr_reg:x3; val_offset:29952*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29952*0 + 3*78*FLEN/8, x4, x1, x2)

inst_9985:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3f44a3 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2b51d7 and fs3 == 1 and fe3 == 0xf7 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3f44a3; op2val:0xc0ab51d7;
op3val:0xfbfff000; valaddr_reg:x3; val_offset:29955*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29955*0 + 3*78*FLEN/8, x4, x1, x2)

inst_9986:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3f44a3 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2b51d7 and fs3 == 1 and fe3 == 0xf7 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3f44a3; op2val:0xc0ab51d7;
op3val:0xfbfff800; valaddr_reg:x3; val_offset:29958*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29958*0 + 3*78*FLEN/8, x4, x1, x2)

inst_9987:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3f44a3 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2b51d7 and fs3 == 1 and fe3 == 0xf7 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3f44a3; op2val:0xc0ab51d7;
op3val:0xfbfffc00; valaddr_reg:x3; val_offset:29961*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29961*0 + 3*78*FLEN/8, x4, x1, x2)

inst_9988:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3f44a3 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2b51d7 and fs3 == 1 and fe3 == 0xf7 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3f44a3; op2val:0xc0ab51d7;
op3val:0xfbfffe00; valaddr_reg:x3; val_offset:29964*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29964*0 + 3*78*FLEN/8, x4, x1, x2)

inst_9989:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3f44a3 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2b51d7 and fs3 == 1 and fe3 == 0xf7 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3f44a3; op2val:0xc0ab51d7;
op3val:0xfbffff00; valaddr_reg:x3; val_offset:29967*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29967*0 + 3*78*FLEN/8, x4, x1, x2)

inst_9990:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3f44a3 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2b51d7 and fs3 == 1 and fe3 == 0xf7 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3f44a3; op2val:0xc0ab51d7;
op3val:0xfbffff80; valaddr_reg:x3; val_offset:29970*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29970*0 + 3*78*FLEN/8, x4, x1, x2)

inst_9991:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3f44a3 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2b51d7 and fs3 == 1 and fe3 == 0xf7 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3f44a3; op2val:0xc0ab51d7;
op3val:0xfbffffc0; valaddr_reg:x3; val_offset:29973*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29973*0 + 3*78*FLEN/8, x4, x1, x2)

inst_9992:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3f44a3 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2b51d7 and fs3 == 1 and fe3 == 0xf7 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3f44a3; op2val:0xc0ab51d7;
op3val:0xfbffffe0; valaddr_reg:x3; val_offset:29976*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29976*0 + 3*78*FLEN/8, x4, x1, x2)

inst_9993:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3f44a3 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2b51d7 and fs3 == 1 and fe3 == 0xf7 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3f44a3; op2val:0xc0ab51d7;
op3val:0xfbfffff0; valaddr_reg:x3; val_offset:29979*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29979*0 + 3*78*FLEN/8, x4, x1, x2)

inst_9994:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3f44a3 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2b51d7 and fs3 == 1 and fe3 == 0xf7 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3f44a3; op2val:0xc0ab51d7;
op3val:0xfbfffff8; valaddr_reg:x3; val_offset:29982*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29982*0 + 3*78*FLEN/8, x4, x1, x2)

inst_9995:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3f44a3 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2b51d7 and fs3 == 1 and fe3 == 0xf7 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3f44a3; op2val:0xc0ab51d7;
op3val:0xfbfffffc; valaddr_reg:x3; val_offset:29985*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29985*0 + 3*78*FLEN/8, x4, x1, x2)

inst_9996:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3f44a3 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2b51d7 and fs3 == 1 and fe3 == 0xf7 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3f44a3; op2val:0xc0ab51d7;
op3val:0xfbfffffe; valaddr_reg:x3; val_offset:29988*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29988*0 + 3*78*FLEN/8, x4, x1, x2)

inst_9997:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3f44a3 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2b51d7 and fs3 == 1 and fe3 == 0xf7 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3f44a3; op2val:0xc0ab51d7;
op3val:0xfbffffff; valaddr_reg:x3; val_offset:29991*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29991*0 + 3*78*FLEN/8, x4, x1, x2)

inst_9998:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3f44a3 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2b51d7 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3f44a3; op2val:0xc0ab51d7;
op3val:0xff000001; valaddr_reg:x3; val_offset:29994*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29994*0 + 3*78*FLEN/8, x4, x1, x2)

inst_9999:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3f44a3 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2b51d7 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3f44a3; op2val:0xc0ab51d7;
op3val:0xff000003; valaddr_reg:x3; val_offset:29997*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29997*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10000:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3f44a3 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2b51d7 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3f44a3; op2val:0xc0ab51d7;
op3val:0xff000007; valaddr_reg:x3; val_offset:30000*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30000*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10001:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3f44a3 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2b51d7 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3f44a3; op2val:0xc0ab51d7;
op3val:0xff199999; valaddr_reg:x3; val_offset:30003*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30003*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10002:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3f44a3 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2b51d7 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3f44a3; op2val:0xc0ab51d7;
op3val:0xff249249; valaddr_reg:x3; val_offset:30006*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30006*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10003:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3f44a3 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2b51d7 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3f44a3; op2val:0xc0ab51d7;
op3val:0xff333333; valaddr_reg:x3; val_offset:30009*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30009*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10004:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3f44a3 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2b51d7 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3f44a3; op2val:0xc0ab51d7;
op3val:0xff36db6d; valaddr_reg:x3; val_offset:30012*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30012*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10005:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3f44a3 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2b51d7 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3f44a3; op2val:0xc0ab51d7;
op3val:0xff3bbbbb; valaddr_reg:x3; val_offset:30015*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30015*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10006:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3f44a3 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2b51d7 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3f44a3; op2val:0xc0ab51d7;
op3val:0xff444444; valaddr_reg:x3; val_offset:30018*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30018*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10007:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3f44a3 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2b51d7 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3f44a3; op2val:0xc0ab51d7;
op3val:0xff4ccccc; valaddr_reg:x3; val_offset:30021*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30021*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10008:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3f44a3 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2b51d7 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3f44a3; op2val:0xc0ab51d7;
op3val:0xff5b6db6; valaddr_reg:x3; val_offset:30024*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30024*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10009:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3f44a3 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2b51d7 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3f44a3; op2val:0xc0ab51d7;
op3val:0xff666666; valaddr_reg:x3; val_offset:30027*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30027*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10010:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3f44a3 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2b51d7 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3f44a3; op2val:0xc0ab51d7;
op3val:0xff6db6db; valaddr_reg:x3; val_offset:30030*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30030*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10011:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3f44a3 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2b51d7 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3f44a3; op2val:0xc0ab51d7;
op3val:0xff7ffff8; valaddr_reg:x3; val_offset:30033*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30033*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10012:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3f44a3 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2b51d7 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3f44a3; op2val:0xc0ab51d7;
op3val:0xff7ffffc; valaddr_reg:x3; val_offset:30036*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30036*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10013:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3f44a3 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2b51d7 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3f44a3; op2val:0xc0ab51d7;
op3val:0xff7ffffe; valaddr_reg:x3; val_offset:30039*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30039*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10014:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc69 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x28eb5e and fs3 == 0 and fe3 == 0xc2 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41fc69; op2val:0x40a8eb5e;
op3val:0x61000000; valaddr_reg:x3; val_offset:30042*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30042*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10015:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc69 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x28eb5e and fs3 == 0 and fe3 == 0xc2 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41fc69; op2val:0x40a8eb5e;
op3val:0x61000001; valaddr_reg:x3; val_offset:30045*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30045*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10016:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc69 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x28eb5e and fs3 == 0 and fe3 == 0xc2 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41fc69; op2val:0x40a8eb5e;
op3val:0x61000003; valaddr_reg:x3; val_offset:30048*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30048*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10017:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc69 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x28eb5e and fs3 == 0 and fe3 == 0xc2 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41fc69; op2val:0x40a8eb5e;
op3val:0x61000007; valaddr_reg:x3; val_offset:30051*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30051*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10018:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc69 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x28eb5e and fs3 == 0 and fe3 == 0xc2 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41fc69; op2val:0x40a8eb5e;
op3val:0x6100000f; valaddr_reg:x3; val_offset:30054*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30054*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10019:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc69 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x28eb5e and fs3 == 0 and fe3 == 0xc2 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41fc69; op2val:0x40a8eb5e;
op3val:0x6100001f; valaddr_reg:x3; val_offset:30057*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30057*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10020:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc69 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x28eb5e and fs3 == 0 and fe3 == 0xc2 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41fc69; op2val:0x40a8eb5e;
op3val:0x6100003f; valaddr_reg:x3; val_offset:30060*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30060*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10021:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc69 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x28eb5e and fs3 == 0 and fe3 == 0xc2 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41fc69; op2val:0x40a8eb5e;
op3val:0x6100007f; valaddr_reg:x3; val_offset:30063*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30063*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10022:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc69 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x28eb5e and fs3 == 0 and fe3 == 0xc2 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41fc69; op2val:0x40a8eb5e;
op3val:0x610000ff; valaddr_reg:x3; val_offset:30066*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30066*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10023:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc69 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x28eb5e and fs3 == 0 and fe3 == 0xc2 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41fc69; op2val:0x40a8eb5e;
op3val:0x610001ff; valaddr_reg:x3; val_offset:30069*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30069*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10024:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc69 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x28eb5e and fs3 == 0 and fe3 == 0xc2 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41fc69; op2val:0x40a8eb5e;
op3val:0x610003ff; valaddr_reg:x3; val_offset:30072*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30072*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10025:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc69 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x28eb5e and fs3 == 0 and fe3 == 0xc2 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41fc69; op2val:0x40a8eb5e;
op3val:0x610007ff; valaddr_reg:x3; val_offset:30075*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30075*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10026:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc69 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x28eb5e and fs3 == 0 and fe3 == 0xc2 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41fc69; op2val:0x40a8eb5e;
op3val:0x61000fff; valaddr_reg:x3; val_offset:30078*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30078*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10027:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc69 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x28eb5e and fs3 == 0 and fe3 == 0xc2 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41fc69; op2val:0x40a8eb5e;
op3val:0x61001fff; valaddr_reg:x3; val_offset:30081*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30081*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10028:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc69 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x28eb5e and fs3 == 0 and fe3 == 0xc2 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41fc69; op2val:0x40a8eb5e;
op3val:0x61003fff; valaddr_reg:x3; val_offset:30084*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30084*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10029:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc69 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x28eb5e and fs3 == 0 and fe3 == 0xc2 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41fc69; op2val:0x40a8eb5e;
op3val:0x61007fff; valaddr_reg:x3; val_offset:30087*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30087*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10030:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc69 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x28eb5e and fs3 == 0 and fe3 == 0xc2 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41fc69; op2val:0x40a8eb5e;
op3val:0x6100ffff; valaddr_reg:x3; val_offset:30090*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30090*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10031:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc69 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x28eb5e and fs3 == 0 and fe3 == 0xc2 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41fc69; op2val:0x40a8eb5e;
op3val:0x6101ffff; valaddr_reg:x3; val_offset:30093*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30093*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10032:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc69 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x28eb5e and fs3 == 0 and fe3 == 0xc2 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41fc69; op2val:0x40a8eb5e;
op3val:0x6103ffff; valaddr_reg:x3; val_offset:30096*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30096*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10033:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc69 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x28eb5e and fs3 == 0 and fe3 == 0xc2 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41fc69; op2val:0x40a8eb5e;
op3val:0x6107ffff; valaddr_reg:x3; val_offset:30099*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30099*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10034:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc69 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x28eb5e and fs3 == 0 and fe3 == 0xc2 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41fc69; op2val:0x40a8eb5e;
op3val:0x610fffff; valaddr_reg:x3; val_offset:30102*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30102*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10035:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc69 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x28eb5e and fs3 == 0 and fe3 == 0xc2 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41fc69; op2val:0x40a8eb5e;
op3val:0x611fffff; valaddr_reg:x3; val_offset:30105*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30105*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10036:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc69 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x28eb5e and fs3 == 0 and fe3 == 0xc2 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41fc69; op2val:0x40a8eb5e;
op3val:0x613fffff; valaddr_reg:x3; val_offset:30108*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30108*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10037:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc69 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x28eb5e and fs3 == 0 and fe3 == 0xc2 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41fc69; op2val:0x40a8eb5e;
op3val:0x61400000; valaddr_reg:x3; val_offset:30111*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30111*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10038:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc69 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x28eb5e and fs3 == 0 and fe3 == 0xc2 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41fc69; op2val:0x40a8eb5e;
op3val:0x61600000; valaddr_reg:x3; val_offset:30114*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30114*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10039:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc69 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x28eb5e and fs3 == 0 and fe3 == 0xc2 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41fc69; op2val:0x40a8eb5e;
op3val:0x61700000; valaddr_reg:x3; val_offset:30117*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30117*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10040:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc69 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x28eb5e and fs3 == 0 and fe3 == 0xc2 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41fc69; op2val:0x40a8eb5e;
op3val:0x61780000; valaddr_reg:x3; val_offset:30120*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30120*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10041:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc69 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x28eb5e and fs3 == 0 and fe3 == 0xc2 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41fc69; op2val:0x40a8eb5e;
op3val:0x617c0000; valaddr_reg:x3; val_offset:30123*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30123*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10042:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc69 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x28eb5e and fs3 == 0 and fe3 == 0xc2 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41fc69; op2val:0x40a8eb5e;
op3val:0x617e0000; valaddr_reg:x3; val_offset:30126*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30126*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10043:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc69 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x28eb5e and fs3 == 0 and fe3 == 0xc2 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41fc69; op2val:0x40a8eb5e;
op3val:0x617f0000; valaddr_reg:x3; val_offset:30129*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30129*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10044:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc69 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x28eb5e and fs3 == 0 and fe3 == 0xc2 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41fc69; op2val:0x40a8eb5e;
op3val:0x617f8000; valaddr_reg:x3; val_offset:30132*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30132*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10045:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc69 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x28eb5e and fs3 == 0 and fe3 == 0xc2 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41fc69; op2val:0x40a8eb5e;
op3val:0x617fc000; valaddr_reg:x3; val_offset:30135*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30135*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10046:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc69 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x28eb5e and fs3 == 0 and fe3 == 0xc2 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41fc69; op2val:0x40a8eb5e;
op3val:0x617fe000; valaddr_reg:x3; val_offset:30138*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30138*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10047:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc69 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x28eb5e and fs3 == 0 and fe3 == 0xc2 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41fc69; op2val:0x40a8eb5e;
op3val:0x617ff000; valaddr_reg:x3; val_offset:30141*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30141*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10048:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc69 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x28eb5e and fs3 == 0 and fe3 == 0xc2 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41fc69; op2val:0x40a8eb5e;
op3val:0x617ff800; valaddr_reg:x3; val_offset:30144*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30144*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10049:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc69 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x28eb5e and fs3 == 0 and fe3 == 0xc2 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41fc69; op2val:0x40a8eb5e;
op3val:0x617ffc00; valaddr_reg:x3; val_offset:30147*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30147*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10050:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc69 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x28eb5e and fs3 == 0 and fe3 == 0xc2 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41fc69; op2val:0x40a8eb5e;
op3val:0x617ffe00; valaddr_reg:x3; val_offset:30150*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30150*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10051:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc69 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x28eb5e and fs3 == 0 and fe3 == 0xc2 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41fc69; op2val:0x40a8eb5e;
op3val:0x617fff00; valaddr_reg:x3; val_offset:30153*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30153*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10052:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc69 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x28eb5e and fs3 == 0 and fe3 == 0xc2 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41fc69; op2val:0x40a8eb5e;
op3val:0x617fff80; valaddr_reg:x3; val_offset:30156*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30156*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10053:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc69 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x28eb5e and fs3 == 0 and fe3 == 0xc2 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41fc69; op2val:0x40a8eb5e;
op3val:0x617fffc0; valaddr_reg:x3; val_offset:30159*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30159*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10054:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc69 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x28eb5e and fs3 == 0 and fe3 == 0xc2 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41fc69; op2val:0x40a8eb5e;
op3val:0x617fffe0; valaddr_reg:x3; val_offset:30162*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30162*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10055:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc69 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x28eb5e and fs3 == 0 and fe3 == 0xc2 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41fc69; op2val:0x40a8eb5e;
op3val:0x617ffff0; valaddr_reg:x3; val_offset:30165*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30165*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10056:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc69 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x28eb5e and fs3 == 0 and fe3 == 0xc2 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41fc69; op2val:0x40a8eb5e;
op3val:0x617ffff8; valaddr_reg:x3; val_offset:30168*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30168*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10057:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc69 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x28eb5e and fs3 == 0 and fe3 == 0xc2 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41fc69; op2val:0x40a8eb5e;
op3val:0x617ffffc; valaddr_reg:x3; val_offset:30171*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30171*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10058:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc69 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x28eb5e and fs3 == 0 and fe3 == 0xc2 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41fc69; op2val:0x40a8eb5e;
op3val:0x617ffffe; valaddr_reg:x3; val_offset:30174*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30174*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10059:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc69 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x28eb5e and fs3 == 0 and fe3 == 0xc2 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41fc69; op2val:0x40a8eb5e;
op3val:0x617fffff; valaddr_reg:x3; val_offset:30177*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30177*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10060:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc69 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x28eb5e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41fc69; op2val:0x40a8eb5e;
op3val:0x7f000001; valaddr_reg:x3; val_offset:30180*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30180*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10061:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc69 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x28eb5e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41fc69; op2val:0x40a8eb5e;
op3val:0x7f000003; valaddr_reg:x3; val_offset:30183*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30183*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10062:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc69 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x28eb5e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41fc69; op2val:0x40a8eb5e;
op3val:0x7f000007; valaddr_reg:x3; val_offset:30186*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30186*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10063:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc69 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x28eb5e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41fc69; op2val:0x40a8eb5e;
op3val:0x7f199999; valaddr_reg:x3; val_offset:30189*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30189*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10064:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc69 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x28eb5e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41fc69; op2val:0x40a8eb5e;
op3val:0x7f249249; valaddr_reg:x3; val_offset:30192*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30192*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10065:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc69 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x28eb5e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41fc69; op2val:0x40a8eb5e;
op3val:0x7f333333; valaddr_reg:x3; val_offset:30195*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30195*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10066:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc69 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x28eb5e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41fc69; op2val:0x40a8eb5e;
op3val:0x7f36db6d; valaddr_reg:x3; val_offset:30198*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30198*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10067:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc69 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x28eb5e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41fc69; op2val:0x40a8eb5e;
op3val:0x7f3bbbbb; valaddr_reg:x3; val_offset:30201*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30201*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10068:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc69 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x28eb5e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41fc69; op2val:0x40a8eb5e;
op3val:0x7f444444; valaddr_reg:x3; val_offset:30204*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30204*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10069:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc69 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x28eb5e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41fc69; op2val:0x40a8eb5e;
op3val:0x7f4ccccc; valaddr_reg:x3; val_offset:30207*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30207*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10070:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc69 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x28eb5e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41fc69; op2val:0x40a8eb5e;
op3val:0x7f5b6db6; valaddr_reg:x3; val_offset:30210*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30210*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10071:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc69 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x28eb5e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41fc69; op2val:0x40a8eb5e;
op3val:0x7f666666; valaddr_reg:x3; val_offset:30213*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30213*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10072:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc69 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x28eb5e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41fc69; op2val:0x40a8eb5e;
op3val:0x7f6db6db; valaddr_reg:x3; val_offset:30216*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30216*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10073:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc69 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x28eb5e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41fc69; op2val:0x40a8eb5e;
op3val:0x7f7ffff8; valaddr_reg:x3; val_offset:30219*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30219*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10074:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc69 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x28eb5e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41fc69; op2val:0x40a8eb5e;
op3val:0x7f7ffffc; valaddr_reg:x3; val_offset:30222*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30222*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10075:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc69 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x28eb5e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41fc69; op2val:0x40a8eb5e;
op3val:0x7f7ffffe; valaddr_reg:x3; val_offset:30225*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30225*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10076:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4200c4 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x28e793 and fs3 == 1 and fe3 == 0xed and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4200c4; op2val:0xc0a8e793;
op3val:0xf6800000; valaddr_reg:x3; val_offset:30228*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30228*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10077:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4200c4 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x28e793 and fs3 == 1 and fe3 == 0xed and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4200c4; op2val:0xc0a8e793;
op3val:0xf6800001; valaddr_reg:x3; val_offset:30231*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30231*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10078:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4200c4 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x28e793 and fs3 == 1 and fe3 == 0xed and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4200c4; op2val:0xc0a8e793;
op3val:0xf6800003; valaddr_reg:x3; val_offset:30234*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30234*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10079:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4200c4 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x28e793 and fs3 == 1 and fe3 == 0xed and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4200c4; op2val:0xc0a8e793;
op3val:0xf6800007; valaddr_reg:x3; val_offset:30237*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30237*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10080:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4200c4 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x28e793 and fs3 == 1 and fe3 == 0xed and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4200c4; op2val:0xc0a8e793;
op3val:0xf680000f; valaddr_reg:x3; val_offset:30240*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30240*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10081:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4200c4 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x28e793 and fs3 == 1 and fe3 == 0xed and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4200c4; op2val:0xc0a8e793;
op3val:0xf680001f; valaddr_reg:x3; val_offset:30243*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30243*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10082:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4200c4 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x28e793 and fs3 == 1 and fe3 == 0xed and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4200c4; op2val:0xc0a8e793;
op3val:0xf680003f; valaddr_reg:x3; val_offset:30246*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30246*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10083:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4200c4 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x28e793 and fs3 == 1 and fe3 == 0xed and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4200c4; op2val:0xc0a8e793;
op3val:0xf680007f; valaddr_reg:x3; val_offset:30249*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30249*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10084:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4200c4 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x28e793 and fs3 == 1 and fe3 == 0xed and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4200c4; op2val:0xc0a8e793;
op3val:0xf68000ff; valaddr_reg:x3; val_offset:30252*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30252*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10085:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4200c4 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x28e793 and fs3 == 1 and fe3 == 0xed and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4200c4; op2val:0xc0a8e793;
op3val:0xf68001ff; valaddr_reg:x3; val_offset:30255*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30255*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10086:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4200c4 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x28e793 and fs3 == 1 and fe3 == 0xed and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4200c4; op2val:0xc0a8e793;
op3val:0xf68003ff; valaddr_reg:x3; val_offset:30258*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30258*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10087:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4200c4 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x28e793 and fs3 == 1 and fe3 == 0xed and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4200c4; op2val:0xc0a8e793;
op3val:0xf68007ff; valaddr_reg:x3; val_offset:30261*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30261*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10088:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4200c4 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x28e793 and fs3 == 1 and fe3 == 0xed and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4200c4; op2val:0xc0a8e793;
op3val:0xf6800fff; valaddr_reg:x3; val_offset:30264*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30264*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10089:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4200c4 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x28e793 and fs3 == 1 and fe3 == 0xed and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4200c4; op2val:0xc0a8e793;
op3val:0xf6801fff; valaddr_reg:x3; val_offset:30267*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30267*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10090:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4200c4 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x28e793 and fs3 == 1 and fe3 == 0xed and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4200c4; op2val:0xc0a8e793;
op3val:0xf6803fff; valaddr_reg:x3; val_offset:30270*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30270*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10091:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4200c4 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x28e793 and fs3 == 1 and fe3 == 0xed and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4200c4; op2val:0xc0a8e793;
op3val:0xf6807fff; valaddr_reg:x3; val_offset:30273*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30273*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10092:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4200c4 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x28e793 and fs3 == 1 and fe3 == 0xed and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4200c4; op2val:0xc0a8e793;
op3val:0xf680ffff; valaddr_reg:x3; val_offset:30276*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30276*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10093:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4200c4 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x28e793 and fs3 == 1 and fe3 == 0xed and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4200c4; op2val:0xc0a8e793;
op3val:0xf681ffff; valaddr_reg:x3; val_offset:30279*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30279*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10094:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4200c4 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x28e793 and fs3 == 1 and fe3 == 0xed and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4200c4; op2val:0xc0a8e793;
op3val:0xf683ffff; valaddr_reg:x3; val_offset:30282*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30282*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10095:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4200c4 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x28e793 and fs3 == 1 and fe3 == 0xed and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4200c4; op2val:0xc0a8e793;
op3val:0xf687ffff; valaddr_reg:x3; val_offset:30285*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30285*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10096:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4200c4 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x28e793 and fs3 == 1 and fe3 == 0xed and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4200c4; op2val:0xc0a8e793;
op3val:0xf68fffff; valaddr_reg:x3; val_offset:30288*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30288*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10097:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4200c4 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x28e793 and fs3 == 1 and fe3 == 0xed and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4200c4; op2val:0xc0a8e793;
op3val:0xf69fffff; valaddr_reg:x3; val_offset:30291*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30291*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10098:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4200c4 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x28e793 and fs3 == 1 and fe3 == 0xed and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4200c4; op2val:0xc0a8e793;
op3val:0xf6bfffff; valaddr_reg:x3; val_offset:30294*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30294*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10099:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4200c4 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x28e793 and fs3 == 1 and fe3 == 0xed and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4200c4; op2val:0xc0a8e793;
op3val:0xf6c00000; valaddr_reg:x3; val_offset:30297*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30297*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10100:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4200c4 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x28e793 and fs3 == 1 and fe3 == 0xed and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4200c4; op2val:0xc0a8e793;
op3val:0xf6e00000; valaddr_reg:x3; val_offset:30300*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30300*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10101:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4200c4 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x28e793 and fs3 == 1 and fe3 == 0xed and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4200c4; op2val:0xc0a8e793;
op3val:0xf6f00000; valaddr_reg:x3; val_offset:30303*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30303*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10102:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4200c4 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x28e793 and fs3 == 1 and fe3 == 0xed and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4200c4; op2val:0xc0a8e793;
op3val:0xf6f80000; valaddr_reg:x3; val_offset:30306*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30306*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10103:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4200c4 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x28e793 and fs3 == 1 and fe3 == 0xed and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4200c4; op2val:0xc0a8e793;
op3val:0xf6fc0000; valaddr_reg:x3; val_offset:30309*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30309*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10104:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4200c4 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x28e793 and fs3 == 1 and fe3 == 0xed and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4200c4; op2val:0xc0a8e793;
op3val:0xf6fe0000; valaddr_reg:x3; val_offset:30312*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30312*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10105:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4200c4 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x28e793 and fs3 == 1 and fe3 == 0xed and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4200c4; op2val:0xc0a8e793;
op3val:0xf6ff0000; valaddr_reg:x3; val_offset:30315*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30315*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10106:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4200c4 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x28e793 and fs3 == 1 and fe3 == 0xed and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4200c4; op2val:0xc0a8e793;
op3val:0xf6ff8000; valaddr_reg:x3; val_offset:30318*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30318*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10107:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4200c4 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x28e793 and fs3 == 1 and fe3 == 0xed and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4200c4; op2val:0xc0a8e793;
op3val:0xf6ffc000; valaddr_reg:x3; val_offset:30321*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30321*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10108:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4200c4 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x28e793 and fs3 == 1 and fe3 == 0xed and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4200c4; op2val:0xc0a8e793;
op3val:0xf6ffe000; valaddr_reg:x3; val_offset:30324*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30324*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10109:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4200c4 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x28e793 and fs3 == 1 and fe3 == 0xed and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4200c4; op2val:0xc0a8e793;
op3val:0xf6fff000; valaddr_reg:x3; val_offset:30327*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30327*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10110:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4200c4 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x28e793 and fs3 == 1 and fe3 == 0xed and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4200c4; op2val:0xc0a8e793;
op3val:0xf6fff800; valaddr_reg:x3; val_offset:30330*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30330*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10111:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4200c4 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x28e793 and fs3 == 1 and fe3 == 0xed and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4200c4; op2val:0xc0a8e793;
op3val:0xf6fffc00; valaddr_reg:x3; val_offset:30333*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30333*0 + 3*78*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2118075555,32,FLEN)
NAN_BOXED(3232453079,32,FLEN)
NAN_BOXED(4227850240,32,FLEN)
NAN_BOXED(2118075555,32,FLEN)
NAN_BOXED(3232453079,32,FLEN)
NAN_BOXED(4227854336,32,FLEN)
NAN_BOXED(2118075555,32,FLEN)
NAN_BOXED(3232453079,32,FLEN)
NAN_BOXED(4227856384,32,FLEN)
NAN_BOXED(2118075555,32,FLEN)
NAN_BOXED(3232453079,32,FLEN)
NAN_BOXED(4227857408,32,FLEN)
NAN_BOXED(2118075555,32,FLEN)
NAN_BOXED(3232453079,32,FLEN)
NAN_BOXED(4227857920,32,FLEN)
NAN_BOXED(2118075555,32,FLEN)
NAN_BOXED(3232453079,32,FLEN)
NAN_BOXED(4227858176,32,FLEN)
NAN_BOXED(2118075555,32,FLEN)
NAN_BOXED(3232453079,32,FLEN)
NAN_BOXED(4227858304,32,FLEN)
NAN_BOXED(2118075555,32,FLEN)
NAN_BOXED(3232453079,32,FLEN)
NAN_BOXED(4227858368,32,FLEN)
NAN_BOXED(2118075555,32,FLEN)
NAN_BOXED(3232453079,32,FLEN)
NAN_BOXED(4227858400,32,FLEN)
NAN_BOXED(2118075555,32,FLEN)
NAN_BOXED(3232453079,32,FLEN)
NAN_BOXED(4227858416,32,FLEN)
NAN_BOXED(2118075555,32,FLEN)
NAN_BOXED(3232453079,32,FLEN)
NAN_BOXED(4227858424,32,FLEN)
NAN_BOXED(2118075555,32,FLEN)
NAN_BOXED(3232453079,32,FLEN)
NAN_BOXED(4227858428,32,FLEN)
NAN_BOXED(2118075555,32,FLEN)
NAN_BOXED(3232453079,32,FLEN)
NAN_BOXED(4227858430,32,FLEN)
NAN_BOXED(2118075555,32,FLEN)
NAN_BOXED(3232453079,32,FLEN)
NAN_BOXED(4227858431,32,FLEN)
NAN_BOXED(2118075555,32,FLEN)
NAN_BOXED(3232453079,32,FLEN)
NAN_BOXED(4278190081,32,FLEN)
NAN_BOXED(2118075555,32,FLEN)
NAN_BOXED(3232453079,32,FLEN)
NAN_BOXED(4278190083,32,FLEN)
NAN_BOXED(2118075555,32,FLEN)
NAN_BOXED(3232453079,32,FLEN)
NAN_BOXED(4278190087,32,FLEN)
NAN_BOXED(2118075555,32,FLEN)
NAN_BOXED(3232453079,32,FLEN)
NAN_BOXED(4279867801,32,FLEN)
NAN_BOXED(2118075555,32,FLEN)
NAN_BOXED(3232453079,32,FLEN)
NAN_BOXED(4280586825,32,FLEN)
NAN_BOXED(2118075555,32,FLEN)
NAN_BOXED(3232453079,32,FLEN)
NAN_BOXED(4281545523,32,FLEN)
NAN_BOXED(2118075555,32,FLEN)
NAN_BOXED(3232453079,32,FLEN)
NAN_BOXED(4281785197,32,FLEN)
NAN_BOXED(2118075555,32,FLEN)
NAN_BOXED(3232453079,32,FLEN)
NAN_BOXED(4282104763,32,FLEN)
NAN_BOXED(2118075555,32,FLEN)
NAN_BOXED(3232453079,32,FLEN)
NAN_BOXED(4282664004,32,FLEN)
NAN_BOXED(2118075555,32,FLEN)
NAN_BOXED(3232453079,32,FLEN)
NAN_BOXED(4283223244,32,FLEN)
NAN_BOXED(2118075555,32,FLEN)
NAN_BOXED(3232453079,32,FLEN)
NAN_BOXED(4284181942,32,FLEN)
NAN_BOXED(2118075555,32,FLEN)
NAN_BOXED(3232453079,32,FLEN)
NAN_BOXED(4284900966,32,FLEN)
NAN_BOXED(2118075555,32,FLEN)
NAN_BOXED(3232453079,32,FLEN)
NAN_BOXED(4285380315,32,FLEN)
NAN_BOXED(2118075555,32,FLEN)
NAN_BOXED(3232453079,32,FLEN)
NAN_BOXED(4286578680,32,FLEN)
NAN_BOXED(2118075555,32,FLEN)
NAN_BOXED(3232453079,32,FLEN)
NAN_BOXED(4286578684,32,FLEN)
NAN_BOXED(2118075555,32,FLEN)
NAN_BOXED(3232453079,32,FLEN)
NAN_BOXED(4286578686,32,FLEN)
NAN_BOXED(2118253673,32,FLEN)
NAN_BOXED(1084812126,32,FLEN)
NAN_BOXED(1627389952,32,FLEN)
NAN_BOXED(2118253673,32,FLEN)
NAN_BOXED(1084812126,32,FLEN)
NAN_BOXED(1627389953,32,FLEN)
NAN_BOXED(2118253673,32,FLEN)
NAN_BOXED(1084812126,32,FLEN)
NAN_BOXED(1627389955,32,FLEN)
NAN_BOXED(2118253673,32,FLEN)
NAN_BOXED(1084812126,32,FLEN)
NAN_BOXED(1627389959,32,FLEN)
NAN_BOXED(2118253673,32,FLEN)
NAN_BOXED(1084812126,32,FLEN)
NAN_BOXED(1627389967,32,FLEN)
NAN_BOXED(2118253673,32,FLEN)
NAN_BOXED(1084812126,32,FLEN)
NAN_BOXED(1627389983,32,FLEN)
NAN_BOXED(2118253673,32,FLEN)
NAN_BOXED(1084812126,32,FLEN)
NAN_BOXED(1627390015,32,FLEN)
NAN_BOXED(2118253673,32,FLEN)
NAN_BOXED(1084812126,32,FLEN)
NAN_BOXED(1627390079,32,FLEN)
NAN_BOXED(2118253673,32,FLEN)
NAN_BOXED(1084812126,32,FLEN)
NAN_BOXED(1627390207,32,FLEN)
NAN_BOXED(2118253673,32,FLEN)
NAN_BOXED(1084812126,32,FLEN)
NAN_BOXED(1627390463,32,FLEN)
NAN_BOXED(2118253673,32,FLEN)
NAN_BOXED(1084812126,32,FLEN)
NAN_BOXED(1627390975,32,FLEN)
NAN_BOXED(2118253673,32,FLEN)
NAN_BOXED(1084812126,32,FLEN)
NAN_BOXED(1627391999,32,FLEN)
NAN_BOXED(2118253673,32,FLEN)
NAN_BOXED(1084812126,32,FLEN)
NAN_BOXED(1627394047,32,FLEN)
NAN_BOXED(2118253673,32,FLEN)
NAN_BOXED(1084812126,32,FLEN)
NAN_BOXED(1627398143,32,FLEN)
NAN_BOXED(2118253673,32,FLEN)
NAN_BOXED(1084812126,32,FLEN)
NAN_BOXED(1627406335,32,FLEN)
NAN_BOXED(2118253673,32,FLEN)
NAN_BOXED(1084812126,32,FLEN)
NAN_BOXED(1627422719,32,FLEN)
NAN_BOXED(2118253673,32,FLEN)
NAN_BOXED(1084812126,32,FLEN)
NAN_BOXED(1627455487,32,FLEN)
NAN_BOXED(2118253673,32,FLEN)
NAN_BOXED(1084812126,32,FLEN)
NAN_BOXED(1627521023,32,FLEN)
NAN_BOXED(2118253673,32,FLEN)
NAN_BOXED(1084812126,32,FLEN)
NAN_BOXED(1627652095,32,FLEN)
NAN_BOXED(2118253673,32,FLEN)
NAN_BOXED(1084812126,32,FLEN)
NAN_BOXED(1627914239,32,FLEN)
NAN_BOXED(2118253673,32,FLEN)
NAN_BOXED(1084812126,32,FLEN)
NAN_BOXED(1628438527,32,FLEN)
NAN_BOXED(2118253673,32,FLEN)
NAN_BOXED(1084812126,32,FLEN)
NAN_BOXED(1629487103,32,FLEN)
NAN_BOXED(2118253673,32,FLEN)
NAN_BOXED(1084812126,32,FLEN)
NAN_BOXED(1631584255,32,FLEN)
NAN_BOXED(2118253673,32,FLEN)
NAN_BOXED(1084812126,32,FLEN)
NAN_BOXED(1631584256,32,FLEN)
NAN_BOXED(2118253673,32,FLEN)
NAN_BOXED(1084812126,32,FLEN)
NAN_BOXED(1633681408,32,FLEN)
NAN_BOXED(2118253673,32,FLEN)
NAN_BOXED(1084812126,32,FLEN)
NAN_BOXED(1634729984,32,FLEN)
NAN_BOXED(2118253673,32,FLEN)
NAN_BOXED(1084812126,32,FLEN)
NAN_BOXED(1635254272,32,FLEN)
NAN_BOXED(2118253673,32,FLEN)
NAN_BOXED(1084812126,32,FLEN)
NAN_BOXED(1635516416,32,FLEN)
NAN_BOXED(2118253673,32,FLEN)
NAN_BOXED(1084812126,32,FLEN)
NAN_BOXED(1635647488,32,FLEN)
NAN_BOXED(2118253673,32,FLEN)
NAN_BOXED(1084812126,32,FLEN)
NAN_BOXED(1635713024,32,FLEN)
NAN_BOXED(2118253673,32,FLEN)
NAN_BOXED(1084812126,32,FLEN)
NAN_BOXED(1635745792,32,FLEN)
NAN_BOXED(2118253673,32,FLEN)
NAN_BOXED(1084812126,32,FLEN)
NAN_BOXED(1635762176,32,FLEN)
NAN_BOXED(2118253673,32,FLEN)
NAN_BOXED(1084812126,32,FLEN)
NAN_BOXED(1635770368,32,FLEN)
NAN_BOXED(2118253673,32,FLEN)
NAN_BOXED(1084812126,32,FLEN)
NAN_BOXED(1635774464,32,FLEN)
NAN_BOXED(2118253673,32,FLEN)
NAN_BOXED(1084812126,32,FLEN)
NAN_BOXED(1635776512,32,FLEN)
NAN_BOXED(2118253673,32,FLEN)
NAN_BOXED(1084812126,32,FLEN)
NAN_BOXED(1635777536,32,FLEN)
NAN_BOXED(2118253673,32,FLEN)
NAN_BOXED(1084812126,32,FLEN)
NAN_BOXED(1635778048,32,FLEN)
NAN_BOXED(2118253673,32,FLEN)
NAN_BOXED(1084812126,32,FLEN)
NAN_BOXED(1635778304,32,FLEN)
NAN_BOXED(2118253673,32,FLEN)
NAN_BOXED(1084812126,32,FLEN)
NAN_BOXED(1635778432,32,FLEN)
NAN_BOXED(2118253673,32,FLEN)
NAN_BOXED(1084812126,32,FLEN)
NAN_BOXED(1635778496,32,FLEN)
NAN_BOXED(2118253673,32,FLEN)
NAN_BOXED(1084812126,32,FLEN)
NAN_BOXED(1635778528,32,FLEN)
NAN_BOXED(2118253673,32,FLEN)
NAN_BOXED(1084812126,32,FLEN)
NAN_BOXED(1635778544,32,FLEN)
NAN_BOXED(2118253673,32,FLEN)
NAN_BOXED(1084812126,32,FLEN)
NAN_BOXED(1635778552,32,FLEN)
NAN_BOXED(2118253673,32,FLEN)
NAN_BOXED(1084812126,32,FLEN)
NAN_BOXED(1635778556,32,FLEN)
NAN_BOXED(2118253673,32,FLEN)
NAN_BOXED(1084812126,32,FLEN)
NAN_BOXED(1635778558,32,FLEN)
NAN_BOXED(2118253673,32,FLEN)
NAN_BOXED(1084812126,32,FLEN)
NAN_BOXED(1635778559,32,FLEN)
NAN_BOXED(2118253673,32,FLEN)
NAN_BOXED(1084812126,32,FLEN)
NAN_BOXED(2130706433,32,FLEN)
NAN_BOXED(2118253673,32,FLEN)
NAN_BOXED(1084812126,32,FLEN)
NAN_BOXED(2130706435,32,FLEN)
NAN_BOXED(2118253673,32,FLEN)
NAN_BOXED(1084812126,32,FLEN)
NAN_BOXED(2130706439,32,FLEN)
NAN_BOXED(2118253673,32,FLEN)
NAN_BOXED(1084812126,32,FLEN)
NAN_BOXED(2132384153,32,FLEN)
NAN_BOXED(2118253673,32,FLEN)
NAN_BOXED(1084812126,32,FLEN)
NAN_BOXED(2133103177,32,FLEN)
NAN_BOXED(2118253673,32,FLEN)
NAN_BOXED(1084812126,32,FLEN)
NAN_BOXED(2134061875,32,FLEN)
NAN_BOXED(2118253673,32,FLEN)
NAN_BOXED(1084812126,32,FLEN)
NAN_BOXED(2134301549,32,FLEN)
NAN_BOXED(2118253673,32,FLEN)
NAN_BOXED(1084812126,32,FLEN)
NAN_BOXED(2134621115,32,FLEN)
NAN_BOXED(2118253673,32,FLEN)
NAN_BOXED(1084812126,32,FLEN)
NAN_BOXED(2135180356,32,FLEN)
NAN_BOXED(2118253673,32,FLEN)
NAN_BOXED(1084812126,32,FLEN)
NAN_BOXED(2135739596,32,FLEN)
NAN_BOXED(2118253673,32,FLEN)
NAN_BOXED(1084812126,32,FLEN)
NAN_BOXED(2136698294,32,FLEN)
NAN_BOXED(2118253673,32,FLEN)
NAN_BOXED(1084812126,32,FLEN)
NAN_BOXED(2137417318,32,FLEN)
NAN_BOXED(2118253673,32,FLEN)
NAN_BOXED(1084812126,32,FLEN)
NAN_BOXED(2137896667,32,FLEN)
NAN_BOXED(2118253673,32,FLEN)
NAN_BOXED(1084812126,32,FLEN)
NAN_BOXED(2139095032,32,FLEN)
NAN_BOXED(2118253673,32,FLEN)
NAN_BOXED(1084812126,32,FLEN)
NAN_BOXED(2139095036,32,FLEN)
NAN_BOXED(2118253673,32,FLEN)
NAN_BOXED(1084812126,32,FLEN)
NAN_BOXED(2139095038,32,FLEN)
NAN_BOXED(2118254788,32,FLEN)
NAN_BOXED(3232294803,32,FLEN)
NAN_BOXED(4135583744,32,FLEN)
NAN_BOXED(2118254788,32,FLEN)
NAN_BOXED(3232294803,32,FLEN)
NAN_BOXED(4135583745,32,FLEN)
NAN_BOXED(2118254788,32,FLEN)
NAN_BOXED(3232294803,32,FLEN)
NAN_BOXED(4135583747,32,FLEN)
NAN_BOXED(2118254788,32,FLEN)
NAN_BOXED(3232294803,32,FLEN)
NAN_BOXED(4135583751,32,FLEN)
NAN_BOXED(2118254788,32,FLEN)
NAN_BOXED(3232294803,32,FLEN)
NAN_BOXED(4135583759,32,FLEN)
NAN_BOXED(2118254788,32,FLEN)
NAN_BOXED(3232294803,32,FLEN)
NAN_BOXED(4135583775,32,FLEN)
NAN_BOXED(2118254788,32,FLEN)
NAN_BOXED(3232294803,32,FLEN)
NAN_BOXED(4135583807,32,FLEN)
NAN_BOXED(2118254788,32,FLEN)
NAN_BOXED(3232294803,32,FLEN)
NAN_BOXED(4135583871,32,FLEN)
NAN_BOXED(2118254788,32,FLEN)
NAN_BOXED(3232294803,32,FLEN)
NAN_BOXED(4135583999,32,FLEN)
NAN_BOXED(2118254788,32,FLEN)
NAN_BOXED(3232294803,32,FLEN)
NAN_BOXED(4135584255,32,FLEN)
NAN_BOXED(2118254788,32,FLEN)
NAN_BOXED(3232294803,32,FLEN)
NAN_BOXED(4135584767,32,FLEN)
NAN_BOXED(2118254788,32,FLEN)
NAN_BOXED(3232294803,32,FLEN)
NAN_BOXED(4135585791,32,FLEN)
NAN_BOXED(2118254788,32,FLEN)
NAN_BOXED(3232294803,32,FLEN)
NAN_BOXED(4135587839,32,FLEN)
NAN_BOXED(2118254788,32,FLEN)
NAN_BOXED(3232294803,32,FLEN)
NAN_BOXED(4135591935,32,FLEN)
NAN_BOXED(2118254788,32,FLEN)
NAN_BOXED(3232294803,32,FLEN)
NAN_BOXED(4135600127,32,FLEN)
NAN_BOXED(2118254788,32,FLEN)
NAN_BOXED(3232294803,32,FLEN)
NAN_BOXED(4135616511,32,FLEN)
NAN_BOXED(2118254788,32,FLEN)
NAN_BOXED(3232294803,32,FLEN)
NAN_BOXED(4135649279,32,FLEN)
NAN_BOXED(2118254788,32,FLEN)
NAN_BOXED(3232294803,32,FLEN)
NAN_BOXED(4135714815,32,FLEN)
NAN_BOXED(2118254788,32,FLEN)
NAN_BOXED(3232294803,32,FLEN)
NAN_BOXED(4135845887,32,FLEN)
NAN_BOXED(2118254788,32,FLEN)
NAN_BOXED(3232294803,32,FLEN)
NAN_BOXED(4136108031,32,FLEN)
NAN_BOXED(2118254788,32,FLEN)
NAN_BOXED(3232294803,32,FLEN)
NAN_BOXED(4136632319,32,FLEN)
NAN_BOXED(2118254788,32,FLEN)
NAN_BOXED(3232294803,32,FLEN)
NAN_BOXED(4137680895,32,FLEN)
NAN_BOXED(2118254788,32,FLEN)
NAN_BOXED(3232294803,32,FLEN)
NAN_BOXED(4139778047,32,FLEN)
NAN_BOXED(2118254788,32,FLEN)
NAN_BOXED(3232294803,32,FLEN)
NAN_BOXED(4139778048,32,FLEN)
NAN_BOXED(2118254788,32,FLEN)
NAN_BOXED(3232294803,32,FLEN)
NAN_BOXED(4141875200,32,FLEN)
NAN_BOXED(2118254788,32,FLEN)
NAN_BOXED(3232294803,32,FLEN)
NAN_BOXED(4142923776,32,FLEN)
NAN_BOXED(2118254788,32,FLEN)
NAN_BOXED(3232294803,32,FLEN)
NAN_BOXED(4143448064,32,FLEN)
NAN_BOXED(2118254788,32,FLEN)
NAN_BOXED(3232294803,32,FLEN)
NAN_BOXED(4143710208,32,FLEN)
NAN_BOXED(2118254788,32,FLEN)
NAN_BOXED(3232294803,32,FLEN)
NAN_BOXED(4143841280,32,FLEN)
NAN_BOXED(2118254788,32,FLEN)
NAN_BOXED(3232294803,32,FLEN)
NAN_BOXED(4143906816,32,FLEN)
NAN_BOXED(2118254788,32,FLEN)
NAN_BOXED(3232294803,32,FLEN)
NAN_BOXED(4143939584,32,FLEN)
NAN_BOXED(2118254788,32,FLEN)
NAN_BOXED(3232294803,32,FLEN)
NAN_BOXED(4143955968,32,FLEN)
NAN_BOXED(2118254788,32,FLEN)
NAN_BOXED(3232294803,32,FLEN)
NAN_BOXED(4143964160,32,FLEN)
NAN_BOXED(2118254788,32,FLEN)
NAN_BOXED(3232294803,32,FLEN)
NAN_BOXED(4143968256,32,FLEN)
NAN_BOXED(2118254788,32,FLEN)
NAN_BOXED(3232294803,32,FLEN)
NAN_BOXED(4143970304,32,FLEN)
NAN_BOXED(2118254788,32,FLEN)
NAN_BOXED(3232294803,32,FLEN)
NAN_BOXED(4143971328,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
