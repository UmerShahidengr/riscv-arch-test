
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:17:59 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_10880:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x535ca5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1b085d and fs3 == 0 and fe3 == 0x4f and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e535ca5; op2val:0x9b085d;
op3val:0x2780000f; valaddr_reg:x3; val_offset:32640*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32640*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10881:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x535ca5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1b085d and fs3 == 0 and fe3 == 0x4f and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e535ca5; op2val:0x9b085d;
op3val:0x2780001f; valaddr_reg:x3; val_offset:32643*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32643*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10882:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x535ca5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1b085d and fs3 == 0 and fe3 == 0x4f and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e535ca5; op2val:0x9b085d;
op3val:0x2780003f; valaddr_reg:x3; val_offset:32646*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32646*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10883:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x535ca5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1b085d and fs3 == 0 and fe3 == 0x4f and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e535ca5; op2val:0x9b085d;
op3val:0x2780007f; valaddr_reg:x3; val_offset:32649*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32649*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10884:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x535ca5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1b085d and fs3 == 0 and fe3 == 0x4f and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e535ca5; op2val:0x9b085d;
op3val:0x278000ff; valaddr_reg:x3; val_offset:32652*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32652*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10885:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x535ca5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1b085d and fs3 == 0 and fe3 == 0x4f and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e535ca5; op2val:0x9b085d;
op3val:0x278001ff; valaddr_reg:x3; val_offset:32655*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32655*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10886:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x535ca5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1b085d and fs3 == 0 and fe3 == 0x4f and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e535ca5; op2val:0x9b085d;
op3val:0x278003ff; valaddr_reg:x3; val_offset:32658*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32658*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10887:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x535ca5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1b085d and fs3 == 0 and fe3 == 0x4f and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e535ca5; op2val:0x9b085d;
op3val:0x278007ff; valaddr_reg:x3; val_offset:32661*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32661*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10888:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x535ca5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1b085d and fs3 == 0 and fe3 == 0x4f and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e535ca5; op2val:0x9b085d;
op3val:0x27800fff; valaddr_reg:x3; val_offset:32664*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32664*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10889:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x535ca5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1b085d and fs3 == 0 and fe3 == 0x4f and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e535ca5; op2val:0x9b085d;
op3val:0x27801fff; valaddr_reg:x3; val_offset:32667*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32667*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10890:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x535ca5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1b085d and fs3 == 0 and fe3 == 0x4f and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e535ca5; op2val:0x9b085d;
op3val:0x27803fff; valaddr_reg:x3; val_offset:32670*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32670*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10891:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x535ca5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1b085d and fs3 == 0 and fe3 == 0x4f and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e535ca5; op2val:0x9b085d;
op3val:0x27807fff; valaddr_reg:x3; val_offset:32673*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32673*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10892:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x535ca5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1b085d and fs3 == 0 and fe3 == 0x4f and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e535ca5; op2val:0x9b085d;
op3val:0x2780ffff; valaddr_reg:x3; val_offset:32676*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32676*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10893:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x535ca5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1b085d and fs3 == 0 and fe3 == 0x4f and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e535ca5; op2val:0x9b085d;
op3val:0x2781ffff; valaddr_reg:x3; val_offset:32679*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32679*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10894:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x535ca5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1b085d and fs3 == 0 and fe3 == 0x4f and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e535ca5; op2val:0x9b085d;
op3val:0x2783ffff; valaddr_reg:x3; val_offset:32682*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32682*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10895:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x535ca5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1b085d and fs3 == 0 and fe3 == 0x4f and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e535ca5; op2val:0x9b085d;
op3val:0x2787ffff; valaddr_reg:x3; val_offset:32685*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32685*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10896:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x535ca5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1b085d and fs3 == 0 and fe3 == 0x4f and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e535ca5; op2val:0x9b085d;
op3val:0x278fffff; valaddr_reg:x3; val_offset:32688*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32688*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10897:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x535ca5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1b085d and fs3 == 0 and fe3 == 0x4f and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e535ca5; op2val:0x9b085d;
op3val:0x279fffff; valaddr_reg:x3; val_offset:32691*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32691*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10898:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x535ca5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1b085d and fs3 == 0 and fe3 == 0x4f and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e535ca5; op2val:0x9b085d;
op3val:0x27bfffff; valaddr_reg:x3; val_offset:32694*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32694*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10899:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x535ca5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1b085d and fs3 == 0 and fe3 == 0x4f and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e535ca5; op2val:0x9b085d;
op3val:0x27c00000; valaddr_reg:x3; val_offset:32697*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32697*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10900:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x535ca5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1b085d and fs3 == 0 and fe3 == 0x4f and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e535ca5; op2val:0x9b085d;
op3val:0x27e00000; valaddr_reg:x3; val_offset:32700*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32700*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10901:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x535ca5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1b085d and fs3 == 0 and fe3 == 0x4f and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e535ca5; op2val:0x9b085d;
op3val:0x27f00000; valaddr_reg:x3; val_offset:32703*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32703*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10902:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x535ca5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1b085d and fs3 == 0 and fe3 == 0x4f and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e535ca5; op2val:0x9b085d;
op3val:0x27f80000; valaddr_reg:x3; val_offset:32706*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32706*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10903:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x535ca5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1b085d and fs3 == 0 and fe3 == 0x4f and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e535ca5; op2val:0x9b085d;
op3val:0x27fc0000; valaddr_reg:x3; val_offset:32709*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32709*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10904:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x535ca5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1b085d and fs3 == 0 and fe3 == 0x4f and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e535ca5; op2val:0x9b085d;
op3val:0x27fe0000; valaddr_reg:x3; val_offset:32712*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32712*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10905:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x535ca5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1b085d and fs3 == 0 and fe3 == 0x4f and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e535ca5; op2val:0x9b085d;
op3val:0x27ff0000; valaddr_reg:x3; val_offset:32715*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32715*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10906:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x535ca5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1b085d and fs3 == 0 and fe3 == 0x4f and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e535ca5; op2val:0x9b085d;
op3val:0x27ff8000; valaddr_reg:x3; val_offset:32718*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32718*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10907:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x535ca5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1b085d and fs3 == 0 and fe3 == 0x4f and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e535ca5; op2val:0x9b085d;
op3val:0x27ffc000; valaddr_reg:x3; val_offset:32721*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32721*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10908:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x535ca5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1b085d and fs3 == 0 and fe3 == 0x4f and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e535ca5; op2val:0x9b085d;
op3val:0x27ffe000; valaddr_reg:x3; val_offset:32724*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32724*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10909:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x535ca5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1b085d and fs3 == 0 and fe3 == 0x4f and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e535ca5; op2val:0x9b085d;
op3val:0x27fff000; valaddr_reg:x3; val_offset:32727*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32727*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10910:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x535ca5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1b085d and fs3 == 0 and fe3 == 0x4f and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e535ca5; op2val:0x9b085d;
op3val:0x27fff800; valaddr_reg:x3; val_offset:32730*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32730*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10911:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x535ca5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1b085d and fs3 == 0 and fe3 == 0x4f and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e535ca5; op2val:0x9b085d;
op3val:0x27fffc00; valaddr_reg:x3; val_offset:32733*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32733*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10912:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x535ca5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1b085d and fs3 == 0 and fe3 == 0x4f and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e535ca5; op2val:0x9b085d;
op3val:0x27fffe00; valaddr_reg:x3; val_offset:32736*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32736*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10913:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x535ca5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1b085d and fs3 == 0 and fe3 == 0x4f and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e535ca5; op2val:0x9b085d;
op3val:0x27ffff00; valaddr_reg:x3; val_offset:32739*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32739*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10914:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x535ca5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1b085d and fs3 == 0 and fe3 == 0x4f and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e535ca5; op2val:0x9b085d;
op3val:0x27ffff80; valaddr_reg:x3; val_offset:32742*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32742*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10915:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x535ca5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1b085d and fs3 == 0 and fe3 == 0x4f and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e535ca5; op2val:0x9b085d;
op3val:0x27ffffc0; valaddr_reg:x3; val_offset:32745*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32745*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10916:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x535ca5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1b085d and fs3 == 0 and fe3 == 0x4f and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e535ca5; op2val:0x9b085d;
op3val:0x27ffffe0; valaddr_reg:x3; val_offset:32748*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32748*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10917:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x535ca5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1b085d and fs3 == 0 and fe3 == 0x4f and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e535ca5; op2val:0x9b085d;
op3val:0x27fffff0; valaddr_reg:x3; val_offset:32751*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32751*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10918:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x535ca5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1b085d and fs3 == 0 and fe3 == 0x4f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e535ca5; op2val:0x9b085d;
op3val:0x27fffff8; valaddr_reg:x3; val_offset:32754*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32754*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10919:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x535ca5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1b085d and fs3 == 0 and fe3 == 0x4f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e535ca5; op2val:0x9b085d;
op3val:0x27fffffc; valaddr_reg:x3; val_offset:32757*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32757*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10920:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x535ca5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1b085d and fs3 == 0 and fe3 == 0x4f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e535ca5; op2val:0x9b085d;
op3val:0x27fffffe; valaddr_reg:x3; val_offset:32760*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32760*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10921:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x535ca5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1b085d and fs3 == 0 and fe3 == 0x4f and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e535ca5; op2val:0x9b085d;
op3val:0x27ffffff; valaddr_reg:x3; val_offset:32763*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32763*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10922:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x535ca5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1b085d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e535ca5; op2val:0x9b085d;
op3val:0x3f800001; valaddr_reg:x3; val_offset:32766*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32766*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10923:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x535ca5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1b085d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e535ca5; op2val:0x9b085d;
op3val:0x3f800003; valaddr_reg:x3; val_offset:32769*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32769*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10924:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x535ca5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1b085d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e535ca5; op2val:0x9b085d;
op3val:0x3f800007; valaddr_reg:x3; val_offset:32772*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32772*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10925:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x535ca5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1b085d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e535ca5; op2val:0x9b085d;
op3val:0x3f999999; valaddr_reg:x3; val_offset:32775*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32775*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10926:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x535ca5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1b085d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e535ca5; op2val:0x9b085d;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:32778*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32778*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10927:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x535ca5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1b085d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e535ca5; op2val:0x9b085d;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:32781*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32781*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10928:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x535ca5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1b085d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e535ca5; op2val:0x9b085d;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:32784*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32784*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10929:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x535ca5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1b085d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e535ca5; op2val:0x9b085d;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:32787*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32787*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10930:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x535ca5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1b085d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e535ca5; op2val:0x9b085d;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:32790*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32790*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10931:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x535ca5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1b085d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e535ca5; op2val:0x9b085d;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:32793*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32793*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10932:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x535ca5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1b085d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e535ca5; op2val:0x9b085d;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:32796*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32796*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10933:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x535ca5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1b085d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e535ca5; op2val:0x9b085d;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:32799*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32799*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10934:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x535ca5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1b085d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e535ca5; op2val:0x9b085d;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:32802*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32802*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10935:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x535ca5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1b085d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e535ca5; op2val:0x9b085d;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:32805*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32805*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10936:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x535ca5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1b085d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e535ca5; op2val:0x9b085d;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:32808*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32808*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10937:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x535ca5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1b085d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e535ca5; op2val:0x9b085d;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:32811*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32811*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10938:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x54b690 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1a0c3e and fs3 == 1 and fe3 == 0xc4 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e54b690; op2val:0xc09a0c3e;
op3val:0xe2000000; valaddr_reg:x3; val_offset:32814*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32814*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10939:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x54b690 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1a0c3e and fs3 == 1 and fe3 == 0xc4 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e54b690; op2val:0xc09a0c3e;
op3val:0xe2000001; valaddr_reg:x3; val_offset:32817*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32817*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10940:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x54b690 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1a0c3e and fs3 == 1 and fe3 == 0xc4 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e54b690; op2val:0xc09a0c3e;
op3val:0xe2000003; valaddr_reg:x3; val_offset:32820*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32820*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10941:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x54b690 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1a0c3e and fs3 == 1 and fe3 == 0xc4 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e54b690; op2val:0xc09a0c3e;
op3val:0xe2000007; valaddr_reg:x3; val_offset:32823*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32823*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10942:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x54b690 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1a0c3e and fs3 == 1 and fe3 == 0xc4 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e54b690; op2val:0xc09a0c3e;
op3val:0xe200000f; valaddr_reg:x3; val_offset:32826*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32826*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10943:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x54b690 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1a0c3e and fs3 == 1 and fe3 == 0xc4 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e54b690; op2val:0xc09a0c3e;
op3val:0xe200001f; valaddr_reg:x3; val_offset:32829*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32829*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10944:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x54b690 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1a0c3e and fs3 == 1 and fe3 == 0xc4 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e54b690; op2val:0xc09a0c3e;
op3val:0xe200003f; valaddr_reg:x3; val_offset:32832*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32832*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10945:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x54b690 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1a0c3e and fs3 == 1 and fe3 == 0xc4 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e54b690; op2val:0xc09a0c3e;
op3val:0xe200007f; valaddr_reg:x3; val_offset:32835*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32835*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10946:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x54b690 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1a0c3e and fs3 == 1 and fe3 == 0xc4 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e54b690; op2val:0xc09a0c3e;
op3val:0xe20000ff; valaddr_reg:x3; val_offset:32838*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32838*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10947:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x54b690 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1a0c3e and fs3 == 1 and fe3 == 0xc4 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e54b690; op2val:0xc09a0c3e;
op3val:0xe20001ff; valaddr_reg:x3; val_offset:32841*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32841*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10948:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x54b690 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1a0c3e and fs3 == 1 and fe3 == 0xc4 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e54b690; op2val:0xc09a0c3e;
op3val:0xe20003ff; valaddr_reg:x3; val_offset:32844*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32844*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10949:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x54b690 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1a0c3e and fs3 == 1 and fe3 == 0xc4 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e54b690; op2val:0xc09a0c3e;
op3val:0xe20007ff; valaddr_reg:x3; val_offset:32847*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32847*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10950:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x54b690 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1a0c3e and fs3 == 1 and fe3 == 0xc4 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e54b690; op2val:0xc09a0c3e;
op3val:0xe2000fff; valaddr_reg:x3; val_offset:32850*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32850*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10951:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x54b690 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1a0c3e and fs3 == 1 and fe3 == 0xc4 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e54b690; op2val:0xc09a0c3e;
op3val:0xe2001fff; valaddr_reg:x3; val_offset:32853*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32853*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10952:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x54b690 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1a0c3e and fs3 == 1 and fe3 == 0xc4 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e54b690; op2val:0xc09a0c3e;
op3val:0xe2003fff; valaddr_reg:x3; val_offset:32856*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32856*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10953:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x54b690 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1a0c3e and fs3 == 1 and fe3 == 0xc4 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e54b690; op2val:0xc09a0c3e;
op3val:0xe2007fff; valaddr_reg:x3; val_offset:32859*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32859*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10954:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x54b690 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1a0c3e and fs3 == 1 and fe3 == 0xc4 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e54b690; op2val:0xc09a0c3e;
op3val:0xe200ffff; valaddr_reg:x3; val_offset:32862*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32862*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10955:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x54b690 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1a0c3e and fs3 == 1 and fe3 == 0xc4 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e54b690; op2val:0xc09a0c3e;
op3val:0xe201ffff; valaddr_reg:x3; val_offset:32865*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32865*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10956:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x54b690 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1a0c3e and fs3 == 1 and fe3 == 0xc4 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e54b690; op2val:0xc09a0c3e;
op3val:0xe203ffff; valaddr_reg:x3; val_offset:32868*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32868*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10957:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x54b690 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1a0c3e and fs3 == 1 and fe3 == 0xc4 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e54b690; op2val:0xc09a0c3e;
op3val:0xe207ffff; valaddr_reg:x3; val_offset:32871*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32871*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10958:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x54b690 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1a0c3e and fs3 == 1 and fe3 == 0xc4 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e54b690; op2val:0xc09a0c3e;
op3val:0xe20fffff; valaddr_reg:x3; val_offset:32874*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32874*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10959:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x54b690 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1a0c3e and fs3 == 1 and fe3 == 0xc4 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e54b690; op2val:0xc09a0c3e;
op3val:0xe21fffff; valaddr_reg:x3; val_offset:32877*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32877*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10960:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x54b690 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1a0c3e and fs3 == 1 and fe3 == 0xc4 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e54b690; op2val:0xc09a0c3e;
op3val:0xe23fffff; valaddr_reg:x3; val_offset:32880*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32880*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10961:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x54b690 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1a0c3e and fs3 == 1 and fe3 == 0xc4 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e54b690; op2val:0xc09a0c3e;
op3val:0xe2400000; valaddr_reg:x3; val_offset:32883*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32883*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10962:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x54b690 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1a0c3e and fs3 == 1 and fe3 == 0xc4 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e54b690; op2val:0xc09a0c3e;
op3val:0xe2600000; valaddr_reg:x3; val_offset:32886*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32886*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10963:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x54b690 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1a0c3e and fs3 == 1 and fe3 == 0xc4 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e54b690; op2val:0xc09a0c3e;
op3val:0xe2700000; valaddr_reg:x3; val_offset:32889*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32889*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10964:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x54b690 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1a0c3e and fs3 == 1 and fe3 == 0xc4 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e54b690; op2val:0xc09a0c3e;
op3val:0xe2780000; valaddr_reg:x3; val_offset:32892*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32892*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10965:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x54b690 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1a0c3e and fs3 == 1 and fe3 == 0xc4 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e54b690; op2val:0xc09a0c3e;
op3val:0xe27c0000; valaddr_reg:x3; val_offset:32895*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32895*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10966:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x54b690 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1a0c3e and fs3 == 1 and fe3 == 0xc4 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e54b690; op2val:0xc09a0c3e;
op3val:0xe27e0000; valaddr_reg:x3; val_offset:32898*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32898*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10967:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x54b690 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1a0c3e and fs3 == 1 and fe3 == 0xc4 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e54b690; op2val:0xc09a0c3e;
op3val:0xe27f0000; valaddr_reg:x3; val_offset:32901*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32901*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10968:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x54b690 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1a0c3e and fs3 == 1 and fe3 == 0xc4 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e54b690; op2val:0xc09a0c3e;
op3val:0xe27f8000; valaddr_reg:x3; val_offset:32904*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32904*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10969:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x54b690 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1a0c3e and fs3 == 1 and fe3 == 0xc4 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e54b690; op2val:0xc09a0c3e;
op3val:0xe27fc000; valaddr_reg:x3; val_offset:32907*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32907*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10970:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x54b690 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1a0c3e and fs3 == 1 and fe3 == 0xc4 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e54b690; op2val:0xc09a0c3e;
op3val:0xe27fe000; valaddr_reg:x3; val_offset:32910*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32910*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10971:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x54b690 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1a0c3e and fs3 == 1 and fe3 == 0xc4 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e54b690; op2val:0xc09a0c3e;
op3val:0xe27ff000; valaddr_reg:x3; val_offset:32913*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32913*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10972:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x54b690 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1a0c3e and fs3 == 1 and fe3 == 0xc4 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e54b690; op2val:0xc09a0c3e;
op3val:0xe27ff800; valaddr_reg:x3; val_offset:32916*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32916*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10973:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x54b690 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1a0c3e and fs3 == 1 and fe3 == 0xc4 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e54b690; op2val:0xc09a0c3e;
op3val:0xe27ffc00; valaddr_reg:x3; val_offset:32919*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32919*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10974:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x54b690 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1a0c3e and fs3 == 1 and fe3 == 0xc4 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e54b690; op2val:0xc09a0c3e;
op3val:0xe27ffe00; valaddr_reg:x3; val_offset:32922*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32922*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10975:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x54b690 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1a0c3e and fs3 == 1 and fe3 == 0xc4 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e54b690; op2val:0xc09a0c3e;
op3val:0xe27fff00; valaddr_reg:x3; val_offset:32925*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32925*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10976:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x54b690 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1a0c3e and fs3 == 1 and fe3 == 0xc4 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e54b690; op2val:0xc09a0c3e;
op3val:0xe27fff80; valaddr_reg:x3; val_offset:32928*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32928*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10977:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x54b690 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1a0c3e and fs3 == 1 and fe3 == 0xc4 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e54b690; op2val:0xc09a0c3e;
op3val:0xe27fffc0; valaddr_reg:x3; val_offset:32931*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32931*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10978:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x54b690 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1a0c3e and fs3 == 1 and fe3 == 0xc4 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e54b690; op2val:0xc09a0c3e;
op3val:0xe27fffe0; valaddr_reg:x3; val_offset:32934*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32934*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10979:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x54b690 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1a0c3e and fs3 == 1 and fe3 == 0xc4 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e54b690; op2val:0xc09a0c3e;
op3val:0xe27ffff0; valaddr_reg:x3; val_offset:32937*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32937*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10980:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x54b690 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1a0c3e and fs3 == 1 and fe3 == 0xc4 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e54b690; op2val:0xc09a0c3e;
op3val:0xe27ffff8; valaddr_reg:x3; val_offset:32940*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32940*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10981:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x54b690 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1a0c3e and fs3 == 1 and fe3 == 0xc4 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e54b690; op2val:0xc09a0c3e;
op3val:0xe27ffffc; valaddr_reg:x3; val_offset:32943*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32943*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10982:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x54b690 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1a0c3e and fs3 == 1 and fe3 == 0xc4 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e54b690; op2val:0xc09a0c3e;
op3val:0xe27ffffe; valaddr_reg:x3; val_offset:32946*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32946*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10983:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x54b690 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1a0c3e and fs3 == 1 and fe3 == 0xc4 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e54b690; op2val:0xc09a0c3e;
op3val:0xe27fffff; valaddr_reg:x3; val_offset:32949*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32949*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10984:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x54b690 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1a0c3e and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e54b690; op2val:0xc09a0c3e;
op3val:0xff000001; valaddr_reg:x3; val_offset:32952*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32952*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10985:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x54b690 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1a0c3e and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e54b690; op2val:0xc09a0c3e;
op3val:0xff000003; valaddr_reg:x3; val_offset:32955*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32955*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10986:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x54b690 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1a0c3e and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e54b690; op2val:0xc09a0c3e;
op3val:0xff000007; valaddr_reg:x3; val_offset:32958*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32958*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10987:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x54b690 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1a0c3e and fs3 == 1 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e54b690; op2val:0xc09a0c3e;
op3val:0xff199999; valaddr_reg:x3; val_offset:32961*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32961*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10988:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x54b690 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1a0c3e and fs3 == 1 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e54b690; op2val:0xc09a0c3e;
op3val:0xff249249; valaddr_reg:x3; val_offset:32964*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32964*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10989:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x54b690 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1a0c3e and fs3 == 1 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e54b690; op2val:0xc09a0c3e;
op3val:0xff333333; valaddr_reg:x3; val_offset:32967*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32967*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10990:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x54b690 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1a0c3e and fs3 == 1 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e54b690; op2val:0xc09a0c3e;
op3val:0xff36db6d; valaddr_reg:x3; val_offset:32970*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32970*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10991:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x54b690 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1a0c3e and fs3 == 1 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e54b690; op2val:0xc09a0c3e;
op3val:0xff3bbbbb; valaddr_reg:x3; val_offset:32973*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32973*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10992:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x54b690 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1a0c3e and fs3 == 1 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e54b690; op2val:0xc09a0c3e;
op3val:0xff444444; valaddr_reg:x3; val_offset:32976*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32976*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10993:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x54b690 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1a0c3e and fs3 == 1 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e54b690; op2val:0xc09a0c3e;
op3val:0xff4ccccc; valaddr_reg:x3; val_offset:32979*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32979*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10994:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x54b690 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1a0c3e and fs3 == 1 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e54b690; op2val:0xc09a0c3e;
op3val:0xff5b6db6; valaddr_reg:x3; val_offset:32982*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32982*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10995:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x54b690 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1a0c3e and fs3 == 1 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e54b690; op2val:0xc09a0c3e;
op3val:0xff666666; valaddr_reg:x3; val_offset:32985*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32985*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10996:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x54b690 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1a0c3e and fs3 == 1 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e54b690; op2val:0xc09a0c3e;
op3val:0xff6db6db; valaddr_reg:x3; val_offset:32988*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32988*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10997:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x54b690 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1a0c3e and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e54b690; op2val:0xc09a0c3e;
op3val:0xff7ffff8; valaddr_reg:x3; val_offset:32991*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32991*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10998:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x54b690 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1a0c3e and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e54b690; op2val:0xc09a0c3e;
op3val:0xff7ffffc; valaddr_reg:x3; val_offset:32994*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32994*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10999:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x54b690 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1a0c3e and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e54b690; op2val:0xc09a0c3e;
op3val:0xff7ffffe; valaddr_reg:x3; val_offset:32997*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32997*0 + 3*85*FLEN/8, x4, x1, x2)

inst_11000:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x571b9d and fs2 == 1 and fe2 == 0x81 and fm2 == 0x185536 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e571b9d; op2val:0xc0985536;
op3val:0xf1800000; valaddr_reg:x3; val_offset:33000*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33000*0 + 3*85*FLEN/8, x4, x1, x2)

inst_11001:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x571b9d and fs2 == 1 and fe2 == 0x81 and fm2 == 0x185536 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e571b9d; op2val:0xc0985536;
op3val:0xf1800001; valaddr_reg:x3; val_offset:33003*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33003*0 + 3*85*FLEN/8, x4, x1, x2)

inst_11002:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x571b9d and fs2 == 1 and fe2 == 0x81 and fm2 == 0x185536 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e571b9d; op2val:0xc0985536;
op3val:0xf1800003; valaddr_reg:x3; val_offset:33006*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33006*0 + 3*85*FLEN/8, x4, x1, x2)

inst_11003:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x571b9d and fs2 == 1 and fe2 == 0x81 and fm2 == 0x185536 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e571b9d; op2val:0xc0985536;
op3val:0xf1800007; valaddr_reg:x3; val_offset:33009*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33009*0 + 3*85*FLEN/8, x4, x1, x2)

inst_11004:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x571b9d and fs2 == 1 and fe2 == 0x81 and fm2 == 0x185536 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e571b9d; op2val:0xc0985536;
op3val:0xf180000f; valaddr_reg:x3; val_offset:33012*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33012*0 + 3*85*FLEN/8, x4, x1, x2)

inst_11005:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x571b9d and fs2 == 1 and fe2 == 0x81 and fm2 == 0x185536 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e571b9d; op2val:0xc0985536;
op3val:0xf180001f; valaddr_reg:x3; val_offset:33015*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33015*0 + 3*85*FLEN/8, x4, x1, x2)

inst_11006:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x571b9d and fs2 == 1 and fe2 == 0x81 and fm2 == 0x185536 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e571b9d; op2val:0xc0985536;
op3val:0xf180003f; valaddr_reg:x3; val_offset:33018*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33018*0 + 3*85*FLEN/8, x4, x1, x2)

inst_11007:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x571b9d and fs2 == 1 and fe2 == 0x81 and fm2 == 0x185536 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e571b9d; op2val:0xc0985536;
op3val:0xf180007f; valaddr_reg:x3; val_offset:33021*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33021*0 + 3*85*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2119392421,32,FLEN)
NAN_BOXED(10160221,32,FLEN)
NAN_BOXED(662700047,32,FLEN)
NAN_BOXED(2119392421,32,FLEN)
NAN_BOXED(10160221,32,FLEN)
NAN_BOXED(662700063,32,FLEN)
NAN_BOXED(2119392421,32,FLEN)
NAN_BOXED(10160221,32,FLEN)
NAN_BOXED(662700095,32,FLEN)
NAN_BOXED(2119392421,32,FLEN)
NAN_BOXED(10160221,32,FLEN)
NAN_BOXED(662700159,32,FLEN)
NAN_BOXED(2119392421,32,FLEN)
NAN_BOXED(10160221,32,FLEN)
NAN_BOXED(662700287,32,FLEN)
NAN_BOXED(2119392421,32,FLEN)
NAN_BOXED(10160221,32,FLEN)
NAN_BOXED(662700543,32,FLEN)
NAN_BOXED(2119392421,32,FLEN)
NAN_BOXED(10160221,32,FLEN)
NAN_BOXED(662701055,32,FLEN)
NAN_BOXED(2119392421,32,FLEN)
NAN_BOXED(10160221,32,FLEN)
NAN_BOXED(662702079,32,FLEN)
NAN_BOXED(2119392421,32,FLEN)
NAN_BOXED(10160221,32,FLEN)
NAN_BOXED(662704127,32,FLEN)
NAN_BOXED(2119392421,32,FLEN)
NAN_BOXED(10160221,32,FLEN)
NAN_BOXED(662708223,32,FLEN)
NAN_BOXED(2119392421,32,FLEN)
NAN_BOXED(10160221,32,FLEN)
NAN_BOXED(662716415,32,FLEN)
NAN_BOXED(2119392421,32,FLEN)
NAN_BOXED(10160221,32,FLEN)
NAN_BOXED(662732799,32,FLEN)
NAN_BOXED(2119392421,32,FLEN)
NAN_BOXED(10160221,32,FLEN)
NAN_BOXED(662765567,32,FLEN)
NAN_BOXED(2119392421,32,FLEN)
NAN_BOXED(10160221,32,FLEN)
NAN_BOXED(662831103,32,FLEN)
NAN_BOXED(2119392421,32,FLEN)
NAN_BOXED(10160221,32,FLEN)
NAN_BOXED(662962175,32,FLEN)
NAN_BOXED(2119392421,32,FLEN)
NAN_BOXED(10160221,32,FLEN)
NAN_BOXED(663224319,32,FLEN)
NAN_BOXED(2119392421,32,FLEN)
NAN_BOXED(10160221,32,FLEN)
NAN_BOXED(663748607,32,FLEN)
NAN_BOXED(2119392421,32,FLEN)
NAN_BOXED(10160221,32,FLEN)
NAN_BOXED(664797183,32,FLEN)
NAN_BOXED(2119392421,32,FLEN)
NAN_BOXED(10160221,32,FLEN)
NAN_BOXED(666894335,32,FLEN)
NAN_BOXED(2119392421,32,FLEN)
NAN_BOXED(10160221,32,FLEN)
NAN_BOXED(666894336,32,FLEN)
NAN_BOXED(2119392421,32,FLEN)
NAN_BOXED(10160221,32,FLEN)
NAN_BOXED(668991488,32,FLEN)
NAN_BOXED(2119392421,32,FLEN)
NAN_BOXED(10160221,32,FLEN)
NAN_BOXED(670040064,32,FLEN)
NAN_BOXED(2119392421,32,FLEN)
NAN_BOXED(10160221,32,FLEN)
NAN_BOXED(670564352,32,FLEN)
NAN_BOXED(2119392421,32,FLEN)
NAN_BOXED(10160221,32,FLEN)
NAN_BOXED(670826496,32,FLEN)
NAN_BOXED(2119392421,32,FLEN)
NAN_BOXED(10160221,32,FLEN)
NAN_BOXED(670957568,32,FLEN)
NAN_BOXED(2119392421,32,FLEN)
NAN_BOXED(10160221,32,FLEN)
NAN_BOXED(671023104,32,FLEN)
NAN_BOXED(2119392421,32,FLEN)
NAN_BOXED(10160221,32,FLEN)
NAN_BOXED(671055872,32,FLEN)
NAN_BOXED(2119392421,32,FLEN)
NAN_BOXED(10160221,32,FLEN)
NAN_BOXED(671072256,32,FLEN)
NAN_BOXED(2119392421,32,FLEN)
NAN_BOXED(10160221,32,FLEN)
NAN_BOXED(671080448,32,FLEN)
NAN_BOXED(2119392421,32,FLEN)
NAN_BOXED(10160221,32,FLEN)
NAN_BOXED(671084544,32,FLEN)
NAN_BOXED(2119392421,32,FLEN)
NAN_BOXED(10160221,32,FLEN)
NAN_BOXED(671086592,32,FLEN)
NAN_BOXED(2119392421,32,FLEN)
NAN_BOXED(10160221,32,FLEN)
NAN_BOXED(671087616,32,FLEN)
NAN_BOXED(2119392421,32,FLEN)
NAN_BOXED(10160221,32,FLEN)
NAN_BOXED(671088128,32,FLEN)
NAN_BOXED(2119392421,32,FLEN)
NAN_BOXED(10160221,32,FLEN)
NAN_BOXED(671088384,32,FLEN)
NAN_BOXED(2119392421,32,FLEN)
NAN_BOXED(10160221,32,FLEN)
NAN_BOXED(671088512,32,FLEN)
NAN_BOXED(2119392421,32,FLEN)
NAN_BOXED(10160221,32,FLEN)
NAN_BOXED(671088576,32,FLEN)
NAN_BOXED(2119392421,32,FLEN)
NAN_BOXED(10160221,32,FLEN)
NAN_BOXED(671088608,32,FLEN)
NAN_BOXED(2119392421,32,FLEN)
NAN_BOXED(10160221,32,FLEN)
NAN_BOXED(671088624,32,FLEN)
NAN_BOXED(2119392421,32,FLEN)
NAN_BOXED(10160221,32,FLEN)
NAN_BOXED(671088632,32,FLEN)
NAN_BOXED(2119392421,32,FLEN)
NAN_BOXED(10160221,32,FLEN)
NAN_BOXED(671088636,32,FLEN)
NAN_BOXED(2119392421,32,FLEN)
NAN_BOXED(10160221,32,FLEN)
NAN_BOXED(671088638,32,FLEN)
NAN_BOXED(2119392421,32,FLEN)
NAN_BOXED(10160221,32,FLEN)
NAN_BOXED(671088639,32,FLEN)
NAN_BOXED(2119392421,32,FLEN)
NAN_BOXED(10160221,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2119392421,32,FLEN)
NAN_BOXED(10160221,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2119392421,32,FLEN)
NAN_BOXED(10160221,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2119392421,32,FLEN)
NAN_BOXED(10160221,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2119392421,32,FLEN)
NAN_BOXED(10160221,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2119392421,32,FLEN)
NAN_BOXED(10160221,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2119392421,32,FLEN)
NAN_BOXED(10160221,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2119392421,32,FLEN)
NAN_BOXED(10160221,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2119392421,32,FLEN)
NAN_BOXED(10160221,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2119392421,32,FLEN)
NAN_BOXED(10160221,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2119392421,32,FLEN)
NAN_BOXED(10160221,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2119392421,32,FLEN)
NAN_BOXED(10160221,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2119392421,32,FLEN)
NAN_BOXED(10160221,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2119392421,32,FLEN)
NAN_BOXED(10160221,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2119392421,32,FLEN)
NAN_BOXED(10160221,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2119392421,32,FLEN)
NAN_BOXED(10160221,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2119480976,32,FLEN)
NAN_BOXED(3231321150,32,FLEN)
NAN_BOXED(3791650816,32,FLEN)
NAN_BOXED(2119480976,32,FLEN)
NAN_BOXED(3231321150,32,FLEN)
NAN_BOXED(3791650817,32,FLEN)
NAN_BOXED(2119480976,32,FLEN)
NAN_BOXED(3231321150,32,FLEN)
NAN_BOXED(3791650819,32,FLEN)
NAN_BOXED(2119480976,32,FLEN)
NAN_BOXED(3231321150,32,FLEN)
NAN_BOXED(3791650823,32,FLEN)
NAN_BOXED(2119480976,32,FLEN)
NAN_BOXED(3231321150,32,FLEN)
NAN_BOXED(3791650831,32,FLEN)
NAN_BOXED(2119480976,32,FLEN)
NAN_BOXED(3231321150,32,FLEN)
NAN_BOXED(3791650847,32,FLEN)
NAN_BOXED(2119480976,32,FLEN)
NAN_BOXED(3231321150,32,FLEN)
NAN_BOXED(3791650879,32,FLEN)
NAN_BOXED(2119480976,32,FLEN)
NAN_BOXED(3231321150,32,FLEN)
NAN_BOXED(3791650943,32,FLEN)
NAN_BOXED(2119480976,32,FLEN)
NAN_BOXED(3231321150,32,FLEN)
NAN_BOXED(3791651071,32,FLEN)
NAN_BOXED(2119480976,32,FLEN)
NAN_BOXED(3231321150,32,FLEN)
NAN_BOXED(3791651327,32,FLEN)
NAN_BOXED(2119480976,32,FLEN)
NAN_BOXED(3231321150,32,FLEN)
NAN_BOXED(3791651839,32,FLEN)
NAN_BOXED(2119480976,32,FLEN)
NAN_BOXED(3231321150,32,FLEN)
NAN_BOXED(3791652863,32,FLEN)
NAN_BOXED(2119480976,32,FLEN)
NAN_BOXED(3231321150,32,FLEN)
NAN_BOXED(3791654911,32,FLEN)
NAN_BOXED(2119480976,32,FLEN)
NAN_BOXED(3231321150,32,FLEN)
NAN_BOXED(3791659007,32,FLEN)
NAN_BOXED(2119480976,32,FLEN)
NAN_BOXED(3231321150,32,FLEN)
NAN_BOXED(3791667199,32,FLEN)
NAN_BOXED(2119480976,32,FLEN)
NAN_BOXED(3231321150,32,FLEN)
NAN_BOXED(3791683583,32,FLEN)
NAN_BOXED(2119480976,32,FLEN)
NAN_BOXED(3231321150,32,FLEN)
NAN_BOXED(3791716351,32,FLEN)
NAN_BOXED(2119480976,32,FLEN)
NAN_BOXED(3231321150,32,FLEN)
NAN_BOXED(3791781887,32,FLEN)
NAN_BOXED(2119480976,32,FLEN)
NAN_BOXED(3231321150,32,FLEN)
NAN_BOXED(3791912959,32,FLEN)
NAN_BOXED(2119480976,32,FLEN)
NAN_BOXED(3231321150,32,FLEN)
NAN_BOXED(3792175103,32,FLEN)
NAN_BOXED(2119480976,32,FLEN)
NAN_BOXED(3231321150,32,FLEN)
NAN_BOXED(3792699391,32,FLEN)
NAN_BOXED(2119480976,32,FLEN)
NAN_BOXED(3231321150,32,FLEN)
NAN_BOXED(3793747967,32,FLEN)
NAN_BOXED(2119480976,32,FLEN)
NAN_BOXED(3231321150,32,FLEN)
NAN_BOXED(3795845119,32,FLEN)
NAN_BOXED(2119480976,32,FLEN)
NAN_BOXED(3231321150,32,FLEN)
NAN_BOXED(3795845120,32,FLEN)
NAN_BOXED(2119480976,32,FLEN)
NAN_BOXED(3231321150,32,FLEN)
NAN_BOXED(3797942272,32,FLEN)
NAN_BOXED(2119480976,32,FLEN)
NAN_BOXED(3231321150,32,FLEN)
NAN_BOXED(3798990848,32,FLEN)
NAN_BOXED(2119480976,32,FLEN)
NAN_BOXED(3231321150,32,FLEN)
NAN_BOXED(3799515136,32,FLEN)
NAN_BOXED(2119480976,32,FLEN)
NAN_BOXED(3231321150,32,FLEN)
NAN_BOXED(3799777280,32,FLEN)
NAN_BOXED(2119480976,32,FLEN)
NAN_BOXED(3231321150,32,FLEN)
NAN_BOXED(3799908352,32,FLEN)
NAN_BOXED(2119480976,32,FLEN)
NAN_BOXED(3231321150,32,FLEN)
NAN_BOXED(3799973888,32,FLEN)
NAN_BOXED(2119480976,32,FLEN)
NAN_BOXED(3231321150,32,FLEN)
NAN_BOXED(3800006656,32,FLEN)
NAN_BOXED(2119480976,32,FLEN)
NAN_BOXED(3231321150,32,FLEN)
NAN_BOXED(3800023040,32,FLEN)
NAN_BOXED(2119480976,32,FLEN)
NAN_BOXED(3231321150,32,FLEN)
NAN_BOXED(3800031232,32,FLEN)
NAN_BOXED(2119480976,32,FLEN)
NAN_BOXED(3231321150,32,FLEN)
NAN_BOXED(3800035328,32,FLEN)
NAN_BOXED(2119480976,32,FLEN)
NAN_BOXED(3231321150,32,FLEN)
NAN_BOXED(3800037376,32,FLEN)
NAN_BOXED(2119480976,32,FLEN)
NAN_BOXED(3231321150,32,FLEN)
NAN_BOXED(3800038400,32,FLEN)
NAN_BOXED(2119480976,32,FLEN)
NAN_BOXED(3231321150,32,FLEN)
NAN_BOXED(3800038912,32,FLEN)
NAN_BOXED(2119480976,32,FLEN)
NAN_BOXED(3231321150,32,FLEN)
NAN_BOXED(3800039168,32,FLEN)
NAN_BOXED(2119480976,32,FLEN)
NAN_BOXED(3231321150,32,FLEN)
NAN_BOXED(3800039296,32,FLEN)
NAN_BOXED(2119480976,32,FLEN)
NAN_BOXED(3231321150,32,FLEN)
NAN_BOXED(3800039360,32,FLEN)
NAN_BOXED(2119480976,32,FLEN)
NAN_BOXED(3231321150,32,FLEN)
NAN_BOXED(3800039392,32,FLEN)
NAN_BOXED(2119480976,32,FLEN)
NAN_BOXED(3231321150,32,FLEN)
NAN_BOXED(3800039408,32,FLEN)
NAN_BOXED(2119480976,32,FLEN)
NAN_BOXED(3231321150,32,FLEN)
NAN_BOXED(3800039416,32,FLEN)
NAN_BOXED(2119480976,32,FLEN)
NAN_BOXED(3231321150,32,FLEN)
NAN_BOXED(3800039420,32,FLEN)
NAN_BOXED(2119480976,32,FLEN)
NAN_BOXED(3231321150,32,FLEN)
NAN_BOXED(3800039422,32,FLEN)
NAN_BOXED(2119480976,32,FLEN)
NAN_BOXED(3231321150,32,FLEN)
NAN_BOXED(3800039423,32,FLEN)
NAN_BOXED(2119480976,32,FLEN)
NAN_BOXED(3231321150,32,FLEN)
NAN_BOXED(4278190081,32,FLEN)
NAN_BOXED(2119480976,32,FLEN)
NAN_BOXED(3231321150,32,FLEN)
NAN_BOXED(4278190083,32,FLEN)
NAN_BOXED(2119480976,32,FLEN)
NAN_BOXED(3231321150,32,FLEN)
NAN_BOXED(4278190087,32,FLEN)
NAN_BOXED(2119480976,32,FLEN)
NAN_BOXED(3231321150,32,FLEN)
NAN_BOXED(4279867801,32,FLEN)
NAN_BOXED(2119480976,32,FLEN)
NAN_BOXED(3231321150,32,FLEN)
NAN_BOXED(4280586825,32,FLEN)
NAN_BOXED(2119480976,32,FLEN)
NAN_BOXED(3231321150,32,FLEN)
NAN_BOXED(4281545523,32,FLEN)
NAN_BOXED(2119480976,32,FLEN)
NAN_BOXED(3231321150,32,FLEN)
NAN_BOXED(4281785197,32,FLEN)
NAN_BOXED(2119480976,32,FLEN)
NAN_BOXED(3231321150,32,FLEN)
NAN_BOXED(4282104763,32,FLEN)
NAN_BOXED(2119480976,32,FLEN)
NAN_BOXED(3231321150,32,FLEN)
NAN_BOXED(4282664004,32,FLEN)
NAN_BOXED(2119480976,32,FLEN)
NAN_BOXED(3231321150,32,FLEN)
NAN_BOXED(4283223244,32,FLEN)
NAN_BOXED(2119480976,32,FLEN)
NAN_BOXED(3231321150,32,FLEN)
NAN_BOXED(4284181942,32,FLEN)
NAN_BOXED(2119480976,32,FLEN)
NAN_BOXED(3231321150,32,FLEN)
NAN_BOXED(4284900966,32,FLEN)
NAN_BOXED(2119480976,32,FLEN)
NAN_BOXED(3231321150,32,FLEN)
NAN_BOXED(4285380315,32,FLEN)
NAN_BOXED(2119480976,32,FLEN)
NAN_BOXED(3231321150,32,FLEN)
NAN_BOXED(4286578680,32,FLEN)
NAN_BOXED(2119480976,32,FLEN)
NAN_BOXED(3231321150,32,FLEN)
NAN_BOXED(4286578684,32,FLEN)
NAN_BOXED(2119480976,32,FLEN)
NAN_BOXED(3231321150,32,FLEN)
NAN_BOXED(4286578686,32,FLEN)
NAN_BOXED(2119637917,32,FLEN)
NAN_BOXED(3231208758,32,FLEN)
NAN_BOXED(4051697664,32,FLEN)
NAN_BOXED(2119637917,32,FLEN)
NAN_BOXED(3231208758,32,FLEN)
NAN_BOXED(4051697665,32,FLEN)
NAN_BOXED(2119637917,32,FLEN)
NAN_BOXED(3231208758,32,FLEN)
NAN_BOXED(4051697667,32,FLEN)
NAN_BOXED(2119637917,32,FLEN)
NAN_BOXED(3231208758,32,FLEN)
NAN_BOXED(4051697671,32,FLEN)
NAN_BOXED(2119637917,32,FLEN)
NAN_BOXED(3231208758,32,FLEN)
NAN_BOXED(4051697679,32,FLEN)
NAN_BOXED(2119637917,32,FLEN)
NAN_BOXED(3231208758,32,FLEN)
NAN_BOXED(4051697695,32,FLEN)
NAN_BOXED(2119637917,32,FLEN)
NAN_BOXED(3231208758,32,FLEN)
NAN_BOXED(4051697727,32,FLEN)
NAN_BOXED(2119637917,32,FLEN)
NAN_BOXED(3231208758,32,FLEN)
NAN_BOXED(4051697791,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
