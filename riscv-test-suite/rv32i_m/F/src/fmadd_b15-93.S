
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:17:59 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_11776:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x63981e and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0ff9bc and fs3 == 0 and fe3 == 0xdf and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e63981e; op2val:0x408ff9bc;
op3val:0x6fffff80; valaddr_reg:x3; val_offset:35328*0 + 3*92*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35328*0 + 3*92*FLEN/8, x4, x1, x2)

inst_11777:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x63981e and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0ff9bc and fs3 == 0 and fe3 == 0xdf and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e63981e; op2val:0x408ff9bc;
op3val:0x6fffffc0; valaddr_reg:x3; val_offset:35331*0 + 3*92*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35331*0 + 3*92*FLEN/8, x4, x1, x2)

inst_11778:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x63981e and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0ff9bc and fs3 == 0 and fe3 == 0xdf and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e63981e; op2val:0x408ff9bc;
op3val:0x6fffffe0; valaddr_reg:x3; val_offset:35334*0 + 3*92*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35334*0 + 3*92*FLEN/8, x4, x1, x2)

inst_11779:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x63981e and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0ff9bc and fs3 == 0 and fe3 == 0xdf and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e63981e; op2val:0x408ff9bc;
op3val:0x6ffffff0; valaddr_reg:x3; val_offset:35337*0 + 3*92*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35337*0 + 3*92*FLEN/8, x4, x1, x2)

inst_11780:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x63981e and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0ff9bc and fs3 == 0 and fe3 == 0xdf and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e63981e; op2val:0x408ff9bc;
op3val:0x6ffffff8; valaddr_reg:x3; val_offset:35340*0 + 3*92*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35340*0 + 3*92*FLEN/8, x4, x1, x2)

inst_11781:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x63981e and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0ff9bc and fs3 == 0 and fe3 == 0xdf and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e63981e; op2val:0x408ff9bc;
op3val:0x6ffffffc; valaddr_reg:x3; val_offset:35343*0 + 3*92*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35343*0 + 3*92*FLEN/8, x4, x1, x2)

inst_11782:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x63981e and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0ff9bc and fs3 == 0 and fe3 == 0xdf and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e63981e; op2val:0x408ff9bc;
op3val:0x6ffffffe; valaddr_reg:x3; val_offset:35346*0 + 3*92*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35346*0 + 3*92*FLEN/8, x4, x1, x2)

inst_11783:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x63981e and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0ff9bc and fs3 == 0 and fe3 == 0xdf and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e63981e; op2val:0x408ff9bc;
op3val:0x6fffffff; valaddr_reg:x3; val_offset:35349*0 + 3*92*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35349*0 + 3*92*FLEN/8, x4, x1, x2)

inst_11784:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x63981e and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0ff9bc and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e63981e; op2val:0x408ff9bc;
op3val:0x7f000001; valaddr_reg:x3; val_offset:35352*0 + 3*92*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35352*0 + 3*92*FLEN/8, x4, x1, x2)

inst_11785:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x63981e and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0ff9bc and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e63981e; op2val:0x408ff9bc;
op3val:0x7f000003; valaddr_reg:x3; val_offset:35355*0 + 3*92*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35355*0 + 3*92*FLEN/8, x4, x1, x2)

inst_11786:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x63981e and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0ff9bc and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e63981e; op2val:0x408ff9bc;
op3val:0x7f000007; valaddr_reg:x3; val_offset:35358*0 + 3*92*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35358*0 + 3*92*FLEN/8, x4, x1, x2)

inst_11787:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x63981e and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0ff9bc and fs3 == 0 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e63981e; op2val:0x408ff9bc;
op3val:0x7f199999; valaddr_reg:x3; val_offset:35361*0 + 3*92*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35361*0 + 3*92*FLEN/8, x4, x1, x2)

inst_11788:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x63981e and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0ff9bc and fs3 == 0 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e63981e; op2val:0x408ff9bc;
op3val:0x7f249249; valaddr_reg:x3; val_offset:35364*0 + 3*92*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35364*0 + 3*92*FLEN/8, x4, x1, x2)

inst_11789:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x63981e and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0ff9bc and fs3 == 0 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e63981e; op2val:0x408ff9bc;
op3val:0x7f333333; valaddr_reg:x3; val_offset:35367*0 + 3*92*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35367*0 + 3*92*FLEN/8, x4, x1, x2)

inst_11790:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x63981e and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0ff9bc and fs3 == 0 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e63981e; op2val:0x408ff9bc;
op3val:0x7f36db6d; valaddr_reg:x3; val_offset:35370*0 + 3*92*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35370*0 + 3*92*FLEN/8, x4, x1, x2)

inst_11791:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x63981e and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0ff9bc and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e63981e; op2val:0x408ff9bc;
op3val:0x7f3bbbbb; valaddr_reg:x3; val_offset:35373*0 + 3*92*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35373*0 + 3*92*FLEN/8, x4, x1, x2)

inst_11792:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x63981e and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0ff9bc and fs3 == 0 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e63981e; op2val:0x408ff9bc;
op3val:0x7f444444; valaddr_reg:x3; val_offset:35376*0 + 3*92*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35376*0 + 3*92*FLEN/8, x4, x1, x2)

inst_11793:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x63981e and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0ff9bc and fs3 == 0 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e63981e; op2val:0x408ff9bc;
op3val:0x7f4ccccc; valaddr_reg:x3; val_offset:35379*0 + 3*92*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35379*0 + 3*92*FLEN/8, x4, x1, x2)

inst_11794:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x63981e and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0ff9bc and fs3 == 0 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e63981e; op2val:0x408ff9bc;
op3val:0x7f5b6db6; valaddr_reg:x3; val_offset:35382*0 + 3*92*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35382*0 + 3*92*FLEN/8, x4, x1, x2)

inst_11795:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x63981e and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0ff9bc and fs3 == 0 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e63981e; op2val:0x408ff9bc;
op3val:0x7f666666; valaddr_reg:x3; val_offset:35385*0 + 3*92*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35385*0 + 3*92*FLEN/8, x4, x1, x2)

inst_11796:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x63981e and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0ff9bc and fs3 == 0 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e63981e; op2val:0x408ff9bc;
op3val:0x7f6db6db; valaddr_reg:x3; val_offset:35388*0 + 3*92*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35388*0 + 3*92*FLEN/8, x4, x1, x2)

inst_11797:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x63981e and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0ff9bc and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e63981e; op2val:0x408ff9bc;
op3val:0x7f7ffff8; valaddr_reg:x3; val_offset:35391*0 + 3*92*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35391*0 + 3*92*FLEN/8, x4, x1, x2)

inst_11798:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x63981e and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0ff9bc and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e63981e; op2val:0x408ff9bc;
op3val:0x7f7ffffc; valaddr_reg:x3; val_offset:35394*0 + 3*92*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35394*0 + 3*92*FLEN/8, x4, x1, x2)

inst_11799:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x63981e and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0ff9bc and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e63981e; op2val:0x408ff9bc;
op3val:0x7f7ffffe; valaddr_reg:x3; val_offset:35397*0 + 3*92*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35397*0 + 3*92*FLEN/8, x4, x1, x2)

inst_11800:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64e2b5 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0f29c9 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64e2b5; op2val:0x408f29c9;
op3val:0x7c800000; valaddr_reg:x3; val_offset:35400*0 + 3*92*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35400*0 + 3*92*FLEN/8, x4, x1, x2)

inst_11801:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64e2b5 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0f29c9 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64e2b5; op2val:0x408f29c9;
op3val:0x7c800001; valaddr_reg:x3; val_offset:35403*0 + 3*92*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35403*0 + 3*92*FLEN/8, x4, x1, x2)

inst_11802:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64e2b5 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0f29c9 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64e2b5; op2val:0x408f29c9;
op3val:0x7c800003; valaddr_reg:x3; val_offset:35406*0 + 3*92*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35406*0 + 3*92*FLEN/8, x4, x1, x2)

inst_11803:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64e2b5 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0f29c9 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64e2b5; op2val:0x408f29c9;
op3val:0x7c800007; valaddr_reg:x3; val_offset:35409*0 + 3*92*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35409*0 + 3*92*FLEN/8, x4, x1, x2)

inst_11804:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64e2b5 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0f29c9 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64e2b5; op2val:0x408f29c9;
op3val:0x7c80000f; valaddr_reg:x3; val_offset:35412*0 + 3*92*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35412*0 + 3*92*FLEN/8, x4, x1, x2)

inst_11805:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64e2b5 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0f29c9 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64e2b5; op2val:0x408f29c9;
op3val:0x7c80001f; valaddr_reg:x3; val_offset:35415*0 + 3*92*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35415*0 + 3*92*FLEN/8, x4, x1, x2)

inst_11806:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64e2b5 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0f29c9 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64e2b5; op2val:0x408f29c9;
op3val:0x7c80003f; valaddr_reg:x3; val_offset:35418*0 + 3*92*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35418*0 + 3*92*FLEN/8, x4, x1, x2)

inst_11807:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64e2b5 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0f29c9 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64e2b5; op2val:0x408f29c9;
op3val:0x7c80007f; valaddr_reg:x3; val_offset:35421*0 + 3*92*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35421*0 + 3*92*FLEN/8, x4, x1, x2)

inst_11808:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64e2b5 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0f29c9 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64e2b5; op2val:0x408f29c9;
op3val:0x7c8000ff; valaddr_reg:x3; val_offset:35424*0 + 3*92*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35424*0 + 3*92*FLEN/8, x4, x1, x2)

inst_11809:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64e2b5 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0f29c9 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64e2b5; op2val:0x408f29c9;
op3val:0x7c8001ff; valaddr_reg:x3; val_offset:35427*0 + 3*92*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35427*0 + 3*92*FLEN/8, x4, x1, x2)

inst_11810:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64e2b5 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0f29c9 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64e2b5; op2val:0x408f29c9;
op3val:0x7c8003ff; valaddr_reg:x3; val_offset:35430*0 + 3*92*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35430*0 + 3*92*FLEN/8, x4, x1, x2)

inst_11811:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64e2b5 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0f29c9 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64e2b5; op2val:0x408f29c9;
op3val:0x7c8007ff; valaddr_reg:x3; val_offset:35433*0 + 3*92*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35433*0 + 3*92*FLEN/8, x4, x1, x2)

inst_11812:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64e2b5 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0f29c9 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64e2b5; op2val:0x408f29c9;
op3val:0x7c800fff; valaddr_reg:x3; val_offset:35436*0 + 3*92*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35436*0 + 3*92*FLEN/8, x4, x1, x2)

inst_11813:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64e2b5 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0f29c9 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64e2b5; op2val:0x408f29c9;
op3val:0x7c801fff; valaddr_reg:x3; val_offset:35439*0 + 3*92*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35439*0 + 3*92*FLEN/8, x4, x1, x2)

inst_11814:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64e2b5 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0f29c9 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64e2b5; op2val:0x408f29c9;
op3val:0x7c803fff; valaddr_reg:x3; val_offset:35442*0 + 3*92*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35442*0 + 3*92*FLEN/8, x4, x1, x2)

inst_11815:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64e2b5 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0f29c9 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64e2b5; op2val:0x408f29c9;
op3val:0x7c807fff; valaddr_reg:x3; val_offset:35445*0 + 3*92*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35445*0 + 3*92*FLEN/8, x4, x1, x2)

inst_11816:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64e2b5 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0f29c9 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64e2b5; op2val:0x408f29c9;
op3val:0x7c80ffff; valaddr_reg:x3; val_offset:35448*0 + 3*92*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35448*0 + 3*92*FLEN/8, x4, x1, x2)

inst_11817:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64e2b5 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0f29c9 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64e2b5; op2val:0x408f29c9;
op3val:0x7c81ffff; valaddr_reg:x3; val_offset:35451*0 + 3*92*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35451*0 + 3*92*FLEN/8, x4, x1, x2)

inst_11818:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64e2b5 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0f29c9 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64e2b5; op2val:0x408f29c9;
op3val:0x7c83ffff; valaddr_reg:x3; val_offset:35454*0 + 3*92*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35454*0 + 3*92*FLEN/8, x4, x1, x2)

inst_11819:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64e2b5 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0f29c9 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64e2b5; op2val:0x408f29c9;
op3val:0x7c87ffff; valaddr_reg:x3; val_offset:35457*0 + 3*92*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35457*0 + 3*92*FLEN/8, x4, x1, x2)

inst_11820:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64e2b5 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0f29c9 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64e2b5; op2val:0x408f29c9;
op3val:0x7c8fffff; valaddr_reg:x3; val_offset:35460*0 + 3*92*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35460*0 + 3*92*FLEN/8, x4, x1, x2)

inst_11821:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64e2b5 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0f29c9 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64e2b5; op2val:0x408f29c9;
op3val:0x7c9fffff; valaddr_reg:x3; val_offset:35463*0 + 3*92*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35463*0 + 3*92*FLEN/8, x4, x1, x2)

inst_11822:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64e2b5 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0f29c9 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64e2b5; op2val:0x408f29c9;
op3val:0x7cbfffff; valaddr_reg:x3; val_offset:35466*0 + 3*92*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35466*0 + 3*92*FLEN/8, x4, x1, x2)

inst_11823:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64e2b5 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0f29c9 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64e2b5; op2val:0x408f29c9;
op3val:0x7cc00000; valaddr_reg:x3; val_offset:35469*0 + 3*92*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35469*0 + 3*92*FLEN/8, x4, x1, x2)

inst_11824:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64e2b5 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0f29c9 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64e2b5; op2val:0x408f29c9;
op3val:0x7ce00000; valaddr_reg:x3; val_offset:35472*0 + 3*92*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35472*0 + 3*92*FLEN/8, x4, x1, x2)

inst_11825:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64e2b5 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0f29c9 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64e2b5; op2val:0x408f29c9;
op3val:0x7cf00000; valaddr_reg:x3; val_offset:35475*0 + 3*92*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35475*0 + 3*92*FLEN/8, x4, x1, x2)

inst_11826:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64e2b5 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0f29c9 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64e2b5; op2val:0x408f29c9;
op3val:0x7cf80000; valaddr_reg:x3; val_offset:35478*0 + 3*92*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35478*0 + 3*92*FLEN/8, x4, x1, x2)

inst_11827:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64e2b5 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0f29c9 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64e2b5; op2val:0x408f29c9;
op3val:0x7cfc0000; valaddr_reg:x3; val_offset:35481*0 + 3*92*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35481*0 + 3*92*FLEN/8, x4, x1, x2)

inst_11828:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64e2b5 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0f29c9 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64e2b5; op2val:0x408f29c9;
op3val:0x7cfe0000; valaddr_reg:x3; val_offset:35484*0 + 3*92*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35484*0 + 3*92*FLEN/8, x4, x1, x2)

inst_11829:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64e2b5 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0f29c9 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64e2b5; op2val:0x408f29c9;
op3val:0x7cff0000; valaddr_reg:x3; val_offset:35487*0 + 3*92*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35487*0 + 3*92*FLEN/8, x4, x1, x2)

inst_11830:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64e2b5 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0f29c9 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64e2b5; op2val:0x408f29c9;
op3val:0x7cff8000; valaddr_reg:x3; val_offset:35490*0 + 3*92*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35490*0 + 3*92*FLEN/8, x4, x1, x2)

inst_11831:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64e2b5 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0f29c9 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64e2b5; op2val:0x408f29c9;
op3val:0x7cffc000; valaddr_reg:x3; val_offset:35493*0 + 3*92*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35493*0 + 3*92*FLEN/8, x4, x1, x2)

inst_11832:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64e2b5 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0f29c9 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64e2b5; op2val:0x408f29c9;
op3val:0x7cffe000; valaddr_reg:x3; val_offset:35496*0 + 3*92*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35496*0 + 3*92*FLEN/8, x4, x1, x2)

inst_11833:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64e2b5 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0f29c9 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64e2b5; op2val:0x408f29c9;
op3val:0x7cfff000; valaddr_reg:x3; val_offset:35499*0 + 3*92*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35499*0 + 3*92*FLEN/8, x4, x1, x2)

inst_11834:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64e2b5 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0f29c9 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64e2b5; op2val:0x408f29c9;
op3val:0x7cfff800; valaddr_reg:x3; val_offset:35502*0 + 3*92*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35502*0 + 3*92*FLEN/8, x4, x1, x2)

inst_11835:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64e2b5 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0f29c9 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64e2b5; op2val:0x408f29c9;
op3val:0x7cfffc00; valaddr_reg:x3; val_offset:35505*0 + 3*92*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35505*0 + 3*92*FLEN/8, x4, x1, x2)

inst_11836:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64e2b5 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0f29c9 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64e2b5; op2val:0x408f29c9;
op3val:0x7cfffe00; valaddr_reg:x3; val_offset:35508*0 + 3*92*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35508*0 + 3*92*FLEN/8, x4, x1, x2)

inst_11837:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64e2b5 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0f29c9 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64e2b5; op2val:0x408f29c9;
op3val:0x7cffff00; valaddr_reg:x3; val_offset:35511*0 + 3*92*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35511*0 + 3*92*FLEN/8, x4, x1, x2)

inst_11838:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64e2b5 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0f29c9 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64e2b5; op2val:0x408f29c9;
op3val:0x7cffff80; valaddr_reg:x3; val_offset:35514*0 + 3*92*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35514*0 + 3*92*FLEN/8, x4, x1, x2)

inst_11839:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64e2b5 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0f29c9 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64e2b5; op2val:0x408f29c9;
op3val:0x7cffffc0; valaddr_reg:x3; val_offset:35517*0 + 3*92*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35517*0 + 3*92*FLEN/8, x4, x1, x2)

inst_11840:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64e2b5 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0f29c9 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64e2b5; op2val:0x408f29c9;
op3val:0x7cffffe0; valaddr_reg:x3; val_offset:35520*0 + 3*92*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35520*0 + 3*92*FLEN/8, x4, x1, x2)

inst_11841:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64e2b5 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0f29c9 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64e2b5; op2val:0x408f29c9;
op3val:0x7cfffff0; valaddr_reg:x3; val_offset:35523*0 + 3*92*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35523*0 + 3*92*FLEN/8, x4, x1, x2)

inst_11842:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64e2b5 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0f29c9 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64e2b5; op2val:0x408f29c9;
op3val:0x7cfffff8; valaddr_reg:x3; val_offset:35526*0 + 3*92*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35526*0 + 3*92*FLEN/8, x4, x1, x2)

inst_11843:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64e2b5 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0f29c9 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64e2b5; op2val:0x408f29c9;
op3val:0x7cfffffc; valaddr_reg:x3; val_offset:35529*0 + 3*92*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35529*0 + 3*92*FLEN/8, x4, x1, x2)

inst_11844:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64e2b5 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0f29c9 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64e2b5; op2val:0x408f29c9;
op3val:0x7cfffffe; valaddr_reg:x3; val_offset:35532*0 + 3*92*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35532*0 + 3*92*FLEN/8, x4, x1, x2)

inst_11845:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64e2b5 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0f29c9 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64e2b5; op2val:0x408f29c9;
op3val:0x7cffffff; valaddr_reg:x3; val_offset:35535*0 + 3*92*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35535*0 + 3*92*FLEN/8, x4, x1, x2)

inst_11846:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64e2b5 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0f29c9 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64e2b5; op2val:0x408f29c9;
op3val:0x7f000001; valaddr_reg:x3; val_offset:35538*0 + 3*92*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35538*0 + 3*92*FLEN/8, x4, x1, x2)

inst_11847:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64e2b5 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0f29c9 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64e2b5; op2val:0x408f29c9;
op3val:0x7f000003; valaddr_reg:x3; val_offset:35541*0 + 3*92*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35541*0 + 3*92*FLEN/8, x4, x1, x2)

inst_11848:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64e2b5 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0f29c9 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64e2b5; op2val:0x408f29c9;
op3val:0x7f000007; valaddr_reg:x3; val_offset:35544*0 + 3*92*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35544*0 + 3*92*FLEN/8, x4, x1, x2)

inst_11849:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64e2b5 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0f29c9 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64e2b5; op2val:0x408f29c9;
op3val:0x7f199999; valaddr_reg:x3; val_offset:35547*0 + 3*92*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35547*0 + 3*92*FLEN/8, x4, x1, x2)

inst_11850:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64e2b5 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0f29c9 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64e2b5; op2val:0x408f29c9;
op3val:0x7f249249; valaddr_reg:x3; val_offset:35550*0 + 3*92*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35550*0 + 3*92*FLEN/8, x4, x1, x2)

inst_11851:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64e2b5 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0f29c9 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64e2b5; op2val:0x408f29c9;
op3val:0x7f333333; valaddr_reg:x3; val_offset:35553*0 + 3*92*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35553*0 + 3*92*FLEN/8, x4, x1, x2)

inst_11852:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64e2b5 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0f29c9 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64e2b5; op2val:0x408f29c9;
op3val:0x7f36db6d; valaddr_reg:x3; val_offset:35556*0 + 3*92*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35556*0 + 3*92*FLEN/8, x4, x1, x2)

inst_11853:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64e2b5 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0f29c9 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64e2b5; op2val:0x408f29c9;
op3val:0x7f3bbbbb; valaddr_reg:x3; val_offset:35559*0 + 3*92*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35559*0 + 3*92*FLEN/8, x4, x1, x2)

inst_11854:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64e2b5 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0f29c9 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64e2b5; op2val:0x408f29c9;
op3val:0x7f444444; valaddr_reg:x3; val_offset:35562*0 + 3*92*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35562*0 + 3*92*FLEN/8, x4, x1, x2)

inst_11855:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64e2b5 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0f29c9 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64e2b5; op2val:0x408f29c9;
op3val:0x7f4ccccc; valaddr_reg:x3; val_offset:35565*0 + 3*92*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35565*0 + 3*92*FLEN/8, x4, x1, x2)

inst_11856:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64e2b5 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0f29c9 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64e2b5; op2val:0x408f29c9;
op3val:0x7f5b6db6; valaddr_reg:x3; val_offset:35568*0 + 3*92*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35568*0 + 3*92*FLEN/8, x4, x1, x2)

inst_11857:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64e2b5 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0f29c9 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64e2b5; op2val:0x408f29c9;
op3val:0x7f666666; valaddr_reg:x3; val_offset:35571*0 + 3*92*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35571*0 + 3*92*FLEN/8, x4, x1, x2)

inst_11858:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64e2b5 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0f29c9 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64e2b5; op2val:0x408f29c9;
op3val:0x7f6db6db; valaddr_reg:x3; val_offset:35574*0 + 3*92*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35574*0 + 3*92*FLEN/8, x4, x1, x2)

inst_11859:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64e2b5 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0f29c9 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64e2b5; op2val:0x408f29c9;
op3val:0x7f7ffff8; valaddr_reg:x3; val_offset:35577*0 + 3*92*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35577*0 + 3*92*FLEN/8, x4, x1, x2)

inst_11860:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64e2b5 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0f29c9 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64e2b5; op2val:0x408f29c9;
op3val:0x7f7ffffc; valaddr_reg:x3; val_offset:35580*0 + 3*92*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35580*0 + 3*92*FLEN/8, x4, x1, x2)

inst_11861:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64e2b5 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0f29c9 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64e2b5; op2val:0x408f29c9;
op3val:0x7f7ffffe; valaddr_reg:x3; val_offset:35583*0 + 3*92*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35583*0 + 3*92*FLEN/8, x4, x1, x2)

inst_11862:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x654b4e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0ee87a and fs3 == 1 and fe3 == 0xd8 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e654b4e; op2val:0xc08ee87a;
op3val:0xec000000; valaddr_reg:x3; val_offset:35586*0 + 3*92*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35586*0 + 3*92*FLEN/8, x4, x1, x2)

inst_11863:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x654b4e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0ee87a and fs3 == 1 and fe3 == 0xd8 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e654b4e; op2val:0xc08ee87a;
op3val:0xec000001; valaddr_reg:x3; val_offset:35589*0 + 3*92*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35589*0 + 3*92*FLEN/8, x4, x1, x2)

inst_11864:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x654b4e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0ee87a and fs3 == 1 and fe3 == 0xd8 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e654b4e; op2val:0xc08ee87a;
op3val:0xec000003; valaddr_reg:x3; val_offset:35592*0 + 3*92*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35592*0 + 3*92*FLEN/8, x4, x1, x2)

inst_11865:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x654b4e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0ee87a and fs3 == 1 and fe3 == 0xd8 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e654b4e; op2val:0xc08ee87a;
op3val:0xec000007; valaddr_reg:x3; val_offset:35595*0 + 3*92*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35595*0 + 3*92*FLEN/8, x4, x1, x2)

inst_11866:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x654b4e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0ee87a and fs3 == 1 and fe3 == 0xd8 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e654b4e; op2val:0xc08ee87a;
op3val:0xec00000f; valaddr_reg:x3; val_offset:35598*0 + 3*92*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35598*0 + 3*92*FLEN/8, x4, x1, x2)

inst_11867:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x654b4e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0ee87a and fs3 == 1 and fe3 == 0xd8 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e654b4e; op2val:0xc08ee87a;
op3val:0xec00001f; valaddr_reg:x3; val_offset:35601*0 + 3*92*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35601*0 + 3*92*FLEN/8, x4, x1, x2)

inst_11868:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x654b4e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0ee87a and fs3 == 1 and fe3 == 0xd8 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e654b4e; op2val:0xc08ee87a;
op3val:0xec00003f; valaddr_reg:x3; val_offset:35604*0 + 3*92*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35604*0 + 3*92*FLEN/8, x4, x1, x2)

inst_11869:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x654b4e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0ee87a and fs3 == 1 and fe3 == 0xd8 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e654b4e; op2val:0xc08ee87a;
op3val:0xec00007f; valaddr_reg:x3; val_offset:35607*0 + 3*92*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35607*0 + 3*92*FLEN/8, x4, x1, x2)

inst_11870:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x654b4e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0ee87a and fs3 == 1 and fe3 == 0xd8 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e654b4e; op2val:0xc08ee87a;
op3val:0xec0000ff; valaddr_reg:x3; val_offset:35610*0 + 3*92*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35610*0 + 3*92*FLEN/8, x4, x1, x2)

inst_11871:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x654b4e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0ee87a and fs3 == 1 and fe3 == 0xd8 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e654b4e; op2val:0xc08ee87a;
op3val:0xec0001ff; valaddr_reg:x3; val_offset:35613*0 + 3*92*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35613*0 + 3*92*FLEN/8, x4, x1, x2)

inst_11872:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x654b4e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0ee87a and fs3 == 1 and fe3 == 0xd8 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e654b4e; op2val:0xc08ee87a;
op3val:0xec0003ff; valaddr_reg:x3; val_offset:35616*0 + 3*92*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35616*0 + 3*92*FLEN/8, x4, x1, x2)

inst_11873:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x654b4e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0ee87a and fs3 == 1 and fe3 == 0xd8 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e654b4e; op2val:0xc08ee87a;
op3val:0xec0007ff; valaddr_reg:x3; val_offset:35619*0 + 3*92*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35619*0 + 3*92*FLEN/8, x4, x1, x2)

inst_11874:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x654b4e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0ee87a and fs3 == 1 and fe3 == 0xd8 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e654b4e; op2val:0xc08ee87a;
op3val:0xec000fff; valaddr_reg:x3; val_offset:35622*0 + 3*92*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35622*0 + 3*92*FLEN/8, x4, x1, x2)

inst_11875:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x654b4e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0ee87a and fs3 == 1 and fe3 == 0xd8 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e654b4e; op2val:0xc08ee87a;
op3val:0xec001fff; valaddr_reg:x3; val_offset:35625*0 + 3*92*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35625*0 + 3*92*FLEN/8, x4, x1, x2)

inst_11876:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x654b4e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0ee87a and fs3 == 1 and fe3 == 0xd8 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e654b4e; op2val:0xc08ee87a;
op3val:0xec003fff; valaddr_reg:x3; val_offset:35628*0 + 3*92*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35628*0 + 3*92*FLEN/8, x4, x1, x2)

inst_11877:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x654b4e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0ee87a and fs3 == 1 and fe3 == 0xd8 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e654b4e; op2val:0xc08ee87a;
op3val:0xec007fff; valaddr_reg:x3; val_offset:35631*0 + 3*92*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35631*0 + 3*92*FLEN/8, x4, x1, x2)

inst_11878:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x654b4e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0ee87a and fs3 == 1 and fe3 == 0xd8 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e654b4e; op2val:0xc08ee87a;
op3val:0xec00ffff; valaddr_reg:x3; val_offset:35634*0 + 3*92*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35634*0 + 3*92*FLEN/8, x4, x1, x2)

inst_11879:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x654b4e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0ee87a and fs3 == 1 and fe3 == 0xd8 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e654b4e; op2val:0xc08ee87a;
op3val:0xec01ffff; valaddr_reg:x3; val_offset:35637*0 + 3*92*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35637*0 + 3*92*FLEN/8, x4, x1, x2)

inst_11880:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x654b4e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0ee87a and fs3 == 1 and fe3 == 0xd8 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e654b4e; op2val:0xc08ee87a;
op3val:0xec03ffff; valaddr_reg:x3; val_offset:35640*0 + 3*92*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35640*0 + 3*92*FLEN/8, x4, x1, x2)

inst_11881:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x654b4e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0ee87a and fs3 == 1 and fe3 == 0xd8 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e654b4e; op2val:0xc08ee87a;
op3val:0xec07ffff; valaddr_reg:x3; val_offset:35643*0 + 3*92*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35643*0 + 3*92*FLEN/8, x4, x1, x2)

inst_11882:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x654b4e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0ee87a and fs3 == 1 and fe3 == 0xd8 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e654b4e; op2val:0xc08ee87a;
op3val:0xec0fffff; valaddr_reg:x3; val_offset:35646*0 + 3*92*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35646*0 + 3*92*FLEN/8, x4, x1, x2)

inst_11883:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x654b4e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0ee87a and fs3 == 1 and fe3 == 0xd8 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e654b4e; op2val:0xc08ee87a;
op3val:0xec1fffff; valaddr_reg:x3; val_offset:35649*0 + 3*92*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35649*0 + 3*92*FLEN/8, x4, x1, x2)

inst_11884:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x654b4e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0ee87a and fs3 == 1 and fe3 == 0xd8 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e654b4e; op2val:0xc08ee87a;
op3val:0xec3fffff; valaddr_reg:x3; val_offset:35652*0 + 3*92*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35652*0 + 3*92*FLEN/8, x4, x1, x2)

inst_11885:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x654b4e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0ee87a and fs3 == 1 and fe3 == 0xd8 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e654b4e; op2val:0xc08ee87a;
op3val:0xec400000; valaddr_reg:x3; val_offset:35655*0 + 3*92*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35655*0 + 3*92*FLEN/8, x4, x1, x2)

inst_11886:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x654b4e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0ee87a and fs3 == 1 and fe3 == 0xd8 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e654b4e; op2val:0xc08ee87a;
op3val:0xec600000; valaddr_reg:x3; val_offset:35658*0 + 3*92*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35658*0 + 3*92*FLEN/8, x4, x1, x2)

inst_11887:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x654b4e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0ee87a and fs3 == 1 and fe3 == 0xd8 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e654b4e; op2val:0xc08ee87a;
op3val:0xec700000; valaddr_reg:x3; val_offset:35661*0 + 3*92*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35661*0 + 3*92*FLEN/8, x4, x1, x2)

inst_11888:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x654b4e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0ee87a and fs3 == 1 and fe3 == 0xd8 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e654b4e; op2val:0xc08ee87a;
op3val:0xec780000; valaddr_reg:x3; val_offset:35664*0 + 3*92*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35664*0 + 3*92*FLEN/8, x4, x1, x2)

inst_11889:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x654b4e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0ee87a and fs3 == 1 and fe3 == 0xd8 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e654b4e; op2val:0xc08ee87a;
op3val:0xec7c0000; valaddr_reg:x3; val_offset:35667*0 + 3*92*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35667*0 + 3*92*FLEN/8, x4, x1, x2)

inst_11890:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x654b4e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0ee87a and fs3 == 1 and fe3 == 0xd8 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e654b4e; op2val:0xc08ee87a;
op3val:0xec7e0000; valaddr_reg:x3; val_offset:35670*0 + 3*92*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35670*0 + 3*92*FLEN/8, x4, x1, x2)

inst_11891:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x654b4e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0ee87a and fs3 == 1 and fe3 == 0xd8 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e654b4e; op2val:0xc08ee87a;
op3val:0xec7f0000; valaddr_reg:x3; val_offset:35673*0 + 3*92*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35673*0 + 3*92*FLEN/8, x4, x1, x2)

inst_11892:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x654b4e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0ee87a and fs3 == 1 and fe3 == 0xd8 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e654b4e; op2val:0xc08ee87a;
op3val:0xec7f8000; valaddr_reg:x3; val_offset:35676*0 + 3*92*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35676*0 + 3*92*FLEN/8, x4, x1, x2)

inst_11893:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x654b4e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0ee87a and fs3 == 1 and fe3 == 0xd8 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e654b4e; op2val:0xc08ee87a;
op3val:0xec7fc000; valaddr_reg:x3; val_offset:35679*0 + 3*92*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35679*0 + 3*92*FLEN/8, x4, x1, x2)

inst_11894:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x654b4e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0ee87a and fs3 == 1 and fe3 == 0xd8 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e654b4e; op2val:0xc08ee87a;
op3val:0xec7fe000; valaddr_reg:x3; val_offset:35682*0 + 3*92*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35682*0 + 3*92*FLEN/8, x4, x1, x2)

inst_11895:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x654b4e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0ee87a and fs3 == 1 and fe3 == 0xd8 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e654b4e; op2val:0xc08ee87a;
op3val:0xec7ff000; valaddr_reg:x3; val_offset:35685*0 + 3*92*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35685*0 + 3*92*FLEN/8, x4, x1, x2)

inst_11896:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x654b4e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0ee87a and fs3 == 1 and fe3 == 0xd8 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e654b4e; op2val:0xc08ee87a;
op3val:0xec7ff800; valaddr_reg:x3; val_offset:35688*0 + 3*92*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35688*0 + 3*92*FLEN/8, x4, x1, x2)

inst_11897:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x654b4e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0ee87a and fs3 == 1 and fe3 == 0xd8 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e654b4e; op2val:0xc08ee87a;
op3val:0xec7ffc00; valaddr_reg:x3; val_offset:35691*0 + 3*92*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35691*0 + 3*92*FLEN/8, x4, x1, x2)

inst_11898:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x654b4e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0ee87a and fs3 == 1 and fe3 == 0xd8 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e654b4e; op2val:0xc08ee87a;
op3val:0xec7ffe00; valaddr_reg:x3; val_offset:35694*0 + 3*92*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35694*0 + 3*92*FLEN/8, x4, x1, x2)

inst_11899:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x654b4e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0ee87a and fs3 == 1 and fe3 == 0xd8 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e654b4e; op2val:0xc08ee87a;
op3val:0xec7fff00; valaddr_reg:x3; val_offset:35697*0 + 3*92*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35697*0 + 3*92*FLEN/8, x4, x1, x2)

inst_11900:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x654b4e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0ee87a and fs3 == 1 and fe3 == 0xd8 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e654b4e; op2val:0xc08ee87a;
op3val:0xec7fff80; valaddr_reg:x3; val_offset:35700*0 + 3*92*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35700*0 + 3*92*FLEN/8, x4, x1, x2)

inst_11901:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x654b4e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0ee87a and fs3 == 1 and fe3 == 0xd8 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e654b4e; op2val:0xc08ee87a;
op3val:0xec7fffc0; valaddr_reg:x3; val_offset:35703*0 + 3*92*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35703*0 + 3*92*FLEN/8, x4, x1, x2)

inst_11902:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x654b4e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0ee87a and fs3 == 1 and fe3 == 0xd8 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e654b4e; op2val:0xc08ee87a;
op3val:0xec7fffe0; valaddr_reg:x3; val_offset:35706*0 + 3*92*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35706*0 + 3*92*FLEN/8, x4, x1, x2)

inst_11903:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x654b4e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0ee87a and fs3 == 1 and fe3 == 0xd8 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e654b4e; op2val:0xc08ee87a;
op3val:0xec7ffff0; valaddr_reg:x3; val_offset:35709*0 + 3*92*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35709*0 + 3*92*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2120456222,32,FLEN)
NAN_BOXED(1083177404,32,FLEN)
NAN_BOXED(1879048064,32,FLEN)
NAN_BOXED(2120456222,32,FLEN)
NAN_BOXED(1083177404,32,FLEN)
NAN_BOXED(1879048128,32,FLEN)
NAN_BOXED(2120456222,32,FLEN)
NAN_BOXED(1083177404,32,FLEN)
NAN_BOXED(1879048160,32,FLEN)
NAN_BOXED(2120456222,32,FLEN)
NAN_BOXED(1083177404,32,FLEN)
NAN_BOXED(1879048176,32,FLEN)
NAN_BOXED(2120456222,32,FLEN)
NAN_BOXED(1083177404,32,FLEN)
NAN_BOXED(1879048184,32,FLEN)
NAN_BOXED(2120456222,32,FLEN)
NAN_BOXED(1083177404,32,FLEN)
NAN_BOXED(1879048188,32,FLEN)
NAN_BOXED(2120456222,32,FLEN)
NAN_BOXED(1083177404,32,FLEN)
NAN_BOXED(1879048190,32,FLEN)
NAN_BOXED(2120456222,32,FLEN)
NAN_BOXED(1083177404,32,FLEN)
NAN_BOXED(1879048191,32,FLEN)
NAN_BOXED(2120456222,32,FLEN)
NAN_BOXED(1083177404,32,FLEN)
NAN_BOXED(2130706433,32,FLEN)
NAN_BOXED(2120456222,32,FLEN)
NAN_BOXED(1083177404,32,FLEN)
NAN_BOXED(2130706435,32,FLEN)
NAN_BOXED(2120456222,32,FLEN)
NAN_BOXED(1083177404,32,FLEN)
NAN_BOXED(2130706439,32,FLEN)
NAN_BOXED(2120456222,32,FLEN)
NAN_BOXED(1083177404,32,FLEN)
NAN_BOXED(2132384153,32,FLEN)
NAN_BOXED(2120456222,32,FLEN)
NAN_BOXED(1083177404,32,FLEN)
NAN_BOXED(2133103177,32,FLEN)
NAN_BOXED(2120456222,32,FLEN)
NAN_BOXED(1083177404,32,FLEN)
NAN_BOXED(2134061875,32,FLEN)
NAN_BOXED(2120456222,32,FLEN)
NAN_BOXED(1083177404,32,FLEN)
NAN_BOXED(2134301549,32,FLEN)
NAN_BOXED(2120456222,32,FLEN)
NAN_BOXED(1083177404,32,FLEN)
NAN_BOXED(2134621115,32,FLEN)
NAN_BOXED(2120456222,32,FLEN)
NAN_BOXED(1083177404,32,FLEN)
NAN_BOXED(2135180356,32,FLEN)
NAN_BOXED(2120456222,32,FLEN)
NAN_BOXED(1083177404,32,FLEN)
NAN_BOXED(2135739596,32,FLEN)
NAN_BOXED(2120456222,32,FLEN)
NAN_BOXED(1083177404,32,FLEN)
NAN_BOXED(2136698294,32,FLEN)
NAN_BOXED(2120456222,32,FLEN)
NAN_BOXED(1083177404,32,FLEN)
NAN_BOXED(2137417318,32,FLEN)
NAN_BOXED(2120456222,32,FLEN)
NAN_BOXED(1083177404,32,FLEN)
NAN_BOXED(2137896667,32,FLEN)
NAN_BOXED(2120456222,32,FLEN)
NAN_BOXED(1083177404,32,FLEN)
NAN_BOXED(2139095032,32,FLEN)
NAN_BOXED(2120456222,32,FLEN)
NAN_BOXED(1083177404,32,FLEN)
NAN_BOXED(2139095036,32,FLEN)
NAN_BOXED(2120456222,32,FLEN)
NAN_BOXED(1083177404,32,FLEN)
NAN_BOXED(2139095038,32,FLEN)
NAN_BOXED(2120540853,32,FLEN)
NAN_BOXED(1083124169,32,FLEN)
NAN_BOXED(2088763392,32,FLEN)
NAN_BOXED(2120540853,32,FLEN)
NAN_BOXED(1083124169,32,FLEN)
NAN_BOXED(2088763393,32,FLEN)
NAN_BOXED(2120540853,32,FLEN)
NAN_BOXED(1083124169,32,FLEN)
NAN_BOXED(2088763395,32,FLEN)
NAN_BOXED(2120540853,32,FLEN)
NAN_BOXED(1083124169,32,FLEN)
NAN_BOXED(2088763399,32,FLEN)
NAN_BOXED(2120540853,32,FLEN)
NAN_BOXED(1083124169,32,FLEN)
NAN_BOXED(2088763407,32,FLEN)
NAN_BOXED(2120540853,32,FLEN)
NAN_BOXED(1083124169,32,FLEN)
NAN_BOXED(2088763423,32,FLEN)
NAN_BOXED(2120540853,32,FLEN)
NAN_BOXED(1083124169,32,FLEN)
NAN_BOXED(2088763455,32,FLEN)
NAN_BOXED(2120540853,32,FLEN)
NAN_BOXED(1083124169,32,FLEN)
NAN_BOXED(2088763519,32,FLEN)
NAN_BOXED(2120540853,32,FLEN)
NAN_BOXED(1083124169,32,FLEN)
NAN_BOXED(2088763647,32,FLEN)
NAN_BOXED(2120540853,32,FLEN)
NAN_BOXED(1083124169,32,FLEN)
NAN_BOXED(2088763903,32,FLEN)
NAN_BOXED(2120540853,32,FLEN)
NAN_BOXED(1083124169,32,FLEN)
NAN_BOXED(2088764415,32,FLEN)
NAN_BOXED(2120540853,32,FLEN)
NAN_BOXED(1083124169,32,FLEN)
NAN_BOXED(2088765439,32,FLEN)
NAN_BOXED(2120540853,32,FLEN)
NAN_BOXED(1083124169,32,FLEN)
NAN_BOXED(2088767487,32,FLEN)
NAN_BOXED(2120540853,32,FLEN)
NAN_BOXED(1083124169,32,FLEN)
NAN_BOXED(2088771583,32,FLEN)
NAN_BOXED(2120540853,32,FLEN)
NAN_BOXED(1083124169,32,FLEN)
NAN_BOXED(2088779775,32,FLEN)
NAN_BOXED(2120540853,32,FLEN)
NAN_BOXED(1083124169,32,FLEN)
NAN_BOXED(2088796159,32,FLEN)
NAN_BOXED(2120540853,32,FLEN)
NAN_BOXED(1083124169,32,FLEN)
NAN_BOXED(2088828927,32,FLEN)
NAN_BOXED(2120540853,32,FLEN)
NAN_BOXED(1083124169,32,FLEN)
NAN_BOXED(2088894463,32,FLEN)
NAN_BOXED(2120540853,32,FLEN)
NAN_BOXED(1083124169,32,FLEN)
NAN_BOXED(2089025535,32,FLEN)
NAN_BOXED(2120540853,32,FLEN)
NAN_BOXED(1083124169,32,FLEN)
NAN_BOXED(2089287679,32,FLEN)
NAN_BOXED(2120540853,32,FLEN)
NAN_BOXED(1083124169,32,FLEN)
NAN_BOXED(2089811967,32,FLEN)
NAN_BOXED(2120540853,32,FLEN)
NAN_BOXED(1083124169,32,FLEN)
NAN_BOXED(2090860543,32,FLEN)
NAN_BOXED(2120540853,32,FLEN)
NAN_BOXED(1083124169,32,FLEN)
NAN_BOXED(2092957695,32,FLEN)
NAN_BOXED(2120540853,32,FLEN)
NAN_BOXED(1083124169,32,FLEN)
NAN_BOXED(2092957696,32,FLEN)
NAN_BOXED(2120540853,32,FLEN)
NAN_BOXED(1083124169,32,FLEN)
NAN_BOXED(2095054848,32,FLEN)
NAN_BOXED(2120540853,32,FLEN)
NAN_BOXED(1083124169,32,FLEN)
NAN_BOXED(2096103424,32,FLEN)
NAN_BOXED(2120540853,32,FLEN)
NAN_BOXED(1083124169,32,FLEN)
NAN_BOXED(2096627712,32,FLEN)
NAN_BOXED(2120540853,32,FLEN)
NAN_BOXED(1083124169,32,FLEN)
NAN_BOXED(2096889856,32,FLEN)
NAN_BOXED(2120540853,32,FLEN)
NAN_BOXED(1083124169,32,FLEN)
NAN_BOXED(2097020928,32,FLEN)
NAN_BOXED(2120540853,32,FLEN)
NAN_BOXED(1083124169,32,FLEN)
NAN_BOXED(2097086464,32,FLEN)
NAN_BOXED(2120540853,32,FLEN)
NAN_BOXED(1083124169,32,FLEN)
NAN_BOXED(2097119232,32,FLEN)
NAN_BOXED(2120540853,32,FLEN)
NAN_BOXED(1083124169,32,FLEN)
NAN_BOXED(2097135616,32,FLEN)
NAN_BOXED(2120540853,32,FLEN)
NAN_BOXED(1083124169,32,FLEN)
NAN_BOXED(2097143808,32,FLEN)
NAN_BOXED(2120540853,32,FLEN)
NAN_BOXED(1083124169,32,FLEN)
NAN_BOXED(2097147904,32,FLEN)
NAN_BOXED(2120540853,32,FLEN)
NAN_BOXED(1083124169,32,FLEN)
NAN_BOXED(2097149952,32,FLEN)
NAN_BOXED(2120540853,32,FLEN)
NAN_BOXED(1083124169,32,FLEN)
NAN_BOXED(2097150976,32,FLEN)
NAN_BOXED(2120540853,32,FLEN)
NAN_BOXED(1083124169,32,FLEN)
NAN_BOXED(2097151488,32,FLEN)
NAN_BOXED(2120540853,32,FLEN)
NAN_BOXED(1083124169,32,FLEN)
NAN_BOXED(2097151744,32,FLEN)
NAN_BOXED(2120540853,32,FLEN)
NAN_BOXED(1083124169,32,FLEN)
NAN_BOXED(2097151872,32,FLEN)
NAN_BOXED(2120540853,32,FLEN)
NAN_BOXED(1083124169,32,FLEN)
NAN_BOXED(2097151936,32,FLEN)
NAN_BOXED(2120540853,32,FLEN)
NAN_BOXED(1083124169,32,FLEN)
NAN_BOXED(2097151968,32,FLEN)
NAN_BOXED(2120540853,32,FLEN)
NAN_BOXED(1083124169,32,FLEN)
NAN_BOXED(2097151984,32,FLEN)
NAN_BOXED(2120540853,32,FLEN)
NAN_BOXED(1083124169,32,FLEN)
NAN_BOXED(2097151992,32,FLEN)
NAN_BOXED(2120540853,32,FLEN)
NAN_BOXED(1083124169,32,FLEN)
NAN_BOXED(2097151996,32,FLEN)
NAN_BOXED(2120540853,32,FLEN)
NAN_BOXED(1083124169,32,FLEN)
NAN_BOXED(2097151998,32,FLEN)
NAN_BOXED(2120540853,32,FLEN)
NAN_BOXED(1083124169,32,FLEN)
NAN_BOXED(2097151999,32,FLEN)
NAN_BOXED(2120540853,32,FLEN)
NAN_BOXED(1083124169,32,FLEN)
NAN_BOXED(2130706433,32,FLEN)
NAN_BOXED(2120540853,32,FLEN)
NAN_BOXED(1083124169,32,FLEN)
NAN_BOXED(2130706435,32,FLEN)
NAN_BOXED(2120540853,32,FLEN)
NAN_BOXED(1083124169,32,FLEN)
NAN_BOXED(2130706439,32,FLEN)
NAN_BOXED(2120540853,32,FLEN)
NAN_BOXED(1083124169,32,FLEN)
NAN_BOXED(2132384153,32,FLEN)
NAN_BOXED(2120540853,32,FLEN)
NAN_BOXED(1083124169,32,FLEN)
NAN_BOXED(2133103177,32,FLEN)
NAN_BOXED(2120540853,32,FLEN)
NAN_BOXED(1083124169,32,FLEN)
NAN_BOXED(2134061875,32,FLEN)
NAN_BOXED(2120540853,32,FLEN)
NAN_BOXED(1083124169,32,FLEN)
NAN_BOXED(2134301549,32,FLEN)
NAN_BOXED(2120540853,32,FLEN)
NAN_BOXED(1083124169,32,FLEN)
NAN_BOXED(2134621115,32,FLEN)
NAN_BOXED(2120540853,32,FLEN)
NAN_BOXED(1083124169,32,FLEN)
NAN_BOXED(2135180356,32,FLEN)
NAN_BOXED(2120540853,32,FLEN)
NAN_BOXED(1083124169,32,FLEN)
NAN_BOXED(2135739596,32,FLEN)
NAN_BOXED(2120540853,32,FLEN)
NAN_BOXED(1083124169,32,FLEN)
NAN_BOXED(2136698294,32,FLEN)
NAN_BOXED(2120540853,32,FLEN)
NAN_BOXED(1083124169,32,FLEN)
NAN_BOXED(2137417318,32,FLEN)
NAN_BOXED(2120540853,32,FLEN)
NAN_BOXED(1083124169,32,FLEN)
NAN_BOXED(2137896667,32,FLEN)
NAN_BOXED(2120540853,32,FLEN)
NAN_BOXED(1083124169,32,FLEN)
NAN_BOXED(2139095032,32,FLEN)
NAN_BOXED(2120540853,32,FLEN)
NAN_BOXED(1083124169,32,FLEN)
NAN_BOXED(2139095036,32,FLEN)
NAN_BOXED(2120540853,32,FLEN)
NAN_BOXED(1083124169,32,FLEN)
NAN_BOXED(2139095038,32,FLEN)
NAN_BOXED(2120567630,32,FLEN)
NAN_BOXED(3230591098,32,FLEN)
NAN_BOXED(3959422976,32,FLEN)
NAN_BOXED(2120567630,32,FLEN)
NAN_BOXED(3230591098,32,FLEN)
NAN_BOXED(3959422977,32,FLEN)
NAN_BOXED(2120567630,32,FLEN)
NAN_BOXED(3230591098,32,FLEN)
NAN_BOXED(3959422979,32,FLEN)
NAN_BOXED(2120567630,32,FLEN)
NAN_BOXED(3230591098,32,FLEN)
NAN_BOXED(3959422983,32,FLEN)
NAN_BOXED(2120567630,32,FLEN)
NAN_BOXED(3230591098,32,FLEN)
NAN_BOXED(3959422991,32,FLEN)
NAN_BOXED(2120567630,32,FLEN)
NAN_BOXED(3230591098,32,FLEN)
NAN_BOXED(3959423007,32,FLEN)
NAN_BOXED(2120567630,32,FLEN)
NAN_BOXED(3230591098,32,FLEN)
NAN_BOXED(3959423039,32,FLEN)
NAN_BOXED(2120567630,32,FLEN)
NAN_BOXED(3230591098,32,FLEN)
NAN_BOXED(3959423103,32,FLEN)
NAN_BOXED(2120567630,32,FLEN)
NAN_BOXED(3230591098,32,FLEN)
NAN_BOXED(3959423231,32,FLEN)
NAN_BOXED(2120567630,32,FLEN)
NAN_BOXED(3230591098,32,FLEN)
NAN_BOXED(3959423487,32,FLEN)
NAN_BOXED(2120567630,32,FLEN)
NAN_BOXED(3230591098,32,FLEN)
NAN_BOXED(3959423999,32,FLEN)
NAN_BOXED(2120567630,32,FLEN)
NAN_BOXED(3230591098,32,FLEN)
NAN_BOXED(3959425023,32,FLEN)
NAN_BOXED(2120567630,32,FLEN)
NAN_BOXED(3230591098,32,FLEN)
NAN_BOXED(3959427071,32,FLEN)
NAN_BOXED(2120567630,32,FLEN)
NAN_BOXED(3230591098,32,FLEN)
NAN_BOXED(3959431167,32,FLEN)
NAN_BOXED(2120567630,32,FLEN)
NAN_BOXED(3230591098,32,FLEN)
NAN_BOXED(3959439359,32,FLEN)
NAN_BOXED(2120567630,32,FLEN)
NAN_BOXED(3230591098,32,FLEN)
NAN_BOXED(3959455743,32,FLEN)
NAN_BOXED(2120567630,32,FLEN)
NAN_BOXED(3230591098,32,FLEN)
NAN_BOXED(3959488511,32,FLEN)
NAN_BOXED(2120567630,32,FLEN)
NAN_BOXED(3230591098,32,FLEN)
NAN_BOXED(3959554047,32,FLEN)
NAN_BOXED(2120567630,32,FLEN)
NAN_BOXED(3230591098,32,FLEN)
NAN_BOXED(3959685119,32,FLEN)
NAN_BOXED(2120567630,32,FLEN)
NAN_BOXED(3230591098,32,FLEN)
NAN_BOXED(3959947263,32,FLEN)
NAN_BOXED(2120567630,32,FLEN)
NAN_BOXED(3230591098,32,FLEN)
NAN_BOXED(3960471551,32,FLEN)
NAN_BOXED(2120567630,32,FLEN)
NAN_BOXED(3230591098,32,FLEN)
NAN_BOXED(3961520127,32,FLEN)
NAN_BOXED(2120567630,32,FLEN)
NAN_BOXED(3230591098,32,FLEN)
NAN_BOXED(3963617279,32,FLEN)
NAN_BOXED(2120567630,32,FLEN)
NAN_BOXED(3230591098,32,FLEN)
NAN_BOXED(3963617280,32,FLEN)
NAN_BOXED(2120567630,32,FLEN)
NAN_BOXED(3230591098,32,FLEN)
NAN_BOXED(3965714432,32,FLEN)
NAN_BOXED(2120567630,32,FLEN)
NAN_BOXED(3230591098,32,FLEN)
NAN_BOXED(3966763008,32,FLEN)
NAN_BOXED(2120567630,32,FLEN)
NAN_BOXED(3230591098,32,FLEN)
NAN_BOXED(3967287296,32,FLEN)
NAN_BOXED(2120567630,32,FLEN)
NAN_BOXED(3230591098,32,FLEN)
NAN_BOXED(3967549440,32,FLEN)
NAN_BOXED(2120567630,32,FLEN)
NAN_BOXED(3230591098,32,FLEN)
NAN_BOXED(3967680512,32,FLEN)
NAN_BOXED(2120567630,32,FLEN)
NAN_BOXED(3230591098,32,FLEN)
NAN_BOXED(3967746048,32,FLEN)
NAN_BOXED(2120567630,32,FLEN)
NAN_BOXED(3230591098,32,FLEN)
NAN_BOXED(3967778816,32,FLEN)
NAN_BOXED(2120567630,32,FLEN)
NAN_BOXED(3230591098,32,FLEN)
NAN_BOXED(3967795200,32,FLEN)
NAN_BOXED(2120567630,32,FLEN)
NAN_BOXED(3230591098,32,FLEN)
NAN_BOXED(3967803392,32,FLEN)
NAN_BOXED(2120567630,32,FLEN)
NAN_BOXED(3230591098,32,FLEN)
NAN_BOXED(3967807488,32,FLEN)
NAN_BOXED(2120567630,32,FLEN)
NAN_BOXED(3230591098,32,FLEN)
NAN_BOXED(3967809536,32,FLEN)
NAN_BOXED(2120567630,32,FLEN)
NAN_BOXED(3230591098,32,FLEN)
NAN_BOXED(3967810560,32,FLEN)
NAN_BOXED(2120567630,32,FLEN)
NAN_BOXED(3230591098,32,FLEN)
NAN_BOXED(3967811072,32,FLEN)
NAN_BOXED(2120567630,32,FLEN)
NAN_BOXED(3230591098,32,FLEN)
NAN_BOXED(3967811328,32,FLEN)
NAN_BOXED(2120567630,32,FLEN)
NAN_BOXED(3230591098,32,FLEN)
NAN_BOXED(3967811456,32,FLEN)
NAN_BOXED(2120567630,32,FLEN)
NAN_BOXED(3230591098,32,FLEN)
NAN_BOXED(3967811520,32,FLEN)
NAN_BOXED(2120567630,32,FLEN)
NAN_BOXED(3230591098,32,FLEN)
NAN_BOXED(3967811552,32,FLEN)
NAN_BOXED(2120567630,32,FLEN)
NAN_BOXED(3230591098,32,FLEN)
NAN_BOXED(3967811568,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
