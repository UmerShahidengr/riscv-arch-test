
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:17:59 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_11904:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x654b4e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0ee87a and fs3 == 1 and fe3 == 0xd8 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e654b4e; op2val:0xc08ee87a;
op3val:0xec7ffff8; valaddr_reg:x3; val_offset:35712*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35712*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11905:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x654b4e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0ee87a and fs3 == 1 and fe3 == 0xd8 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e654b4e; op2val:0xc08ee87a;
op3val:0xec7ffffc; valaddr_reg:x3; val_offset:35715*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35715*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11906:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x654b4e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0ee87a and fs3 == 1 and fe3 == 0xd8 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e654b4e; op2val:0xc08ee87a;
op3val:0xec7ffffe; valaddr_reg:x3; val_offset:35718*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35718*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11907:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x654b4e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0ee87a and fs3 == 1 and fe3 == 0xd8 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e654b4e; op2val:0xc08ee87a;
op3val:0xec7fffff; valaddr_reg:x3; val_offset:35721*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35721*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11908:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x654b4e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0ee87a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e654b4e; op2val:0xc08ee87a;
op3val:0xff000001; valaddr_reg:x3; val_offset:35724*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35724*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11909:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x654b4e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0ee87a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e654b4e; op2val:0xc08ee87a;
op3val:0xff000003; valaddr_reg:x3; val_offset:35727*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35727*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11910:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x654b4e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0ee87a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e654b4e; op2val:0xc08ee87a;
op3val:0xff000007; valaddr_reg:x3; val_offset:35730*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35730*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11911:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x654b4e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0ee87a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e654b4e; op2val:0xc08ee87a;
op3val:0xff199999; valaddr_reg:x3; val_offset:35733*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35733*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11912:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x654b4e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0ee87a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e654b4e; op2val:0xc08ee87a;
op3val:0xff249249; valaddr_reg:x3; val_offset:35736*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35736*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11913:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x654b4e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0ee87a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e654b4e; op2val:0xc08ee87a;
op3val:0xff333333; valaddr_reg:x3; val_offset:35739*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35739*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11914:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x654b4e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0ee87a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e654b4e; op2val:0xc08ee87a;
op3val:0xff36db6d; valaddr_reg:x3; val_offset:35742*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35742*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11915:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x654b4e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0ee87a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e654b4e; op2val:0xc08ee87a;
op3val:0xff3bbbbb; valaddr_reg:x3; val_offset:35745*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35745*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11916:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x654b4e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0ee87a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e654b4e; op2val:0xc08ee87a;
op3val:0xff444444; valaddr_reg:x3; val_offset:35748*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35748*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11917:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x654b4e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0ee87a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e654b4e; op2val:0xc08ee87a;
op3val:0xff4ccccc; valaddr_reg:x3; val_offset:35751*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35751*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11918:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x654b4e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0ee87a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e654b4e; op2val:0xc08ee87a;
op3val:0xff5b6db6; valaddr_reg:x3; val_offset:35754*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35754*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11919:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x654b4e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0ee87a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e654b4e; op2val:0xc08ee87a;
op3val:0xff666666; valaddr_reg:x3; val_offset:35757*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35757*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11920:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x654b4e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0ee87a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e654b4e; op2val:0xc08ee87a;
op3val:0xff6db6db; valaddr_reg:x3; val_offset:35760*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35760*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11921:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x654b4e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0ee87a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e654b4e; op2val:0xc08ee87a;
op3val:0xff7ffff8; valaddr_reg:x3; val_offset:35763*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35763*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11922:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x654b4e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0ee87a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e654b4e; op2val:0xc08ee87a;
op3val:0xff7ffffc; valaddr_reg:x3; val_offset:35766*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35766*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11923:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x654b4e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0ee87a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e654b4e; op2val:0xc08ee87a;
op3val:0xff7ffffe; valaddr_reg:x3; val_offset:35769*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35769*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11924:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x65edcf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0e837a and fs3 == 0 and fe3 == 0xf5 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e65edcf; op2val:0x408e837a;
op3val:0x7a800000; valaddr_reg:x3; val_offset:35772*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35772*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11925:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x65edcf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0e837a and fs3 == 0 and fe3 == 0xf5 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e65edcf; op2val:0x408e837a;
op3val:0x7a800001; valaddr_reg:x3; val_offset:35775*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35775*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11926:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x65edcf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0e837a and fs3 == 0 and fe3 == 0xf5 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e65edcf; op2val:0x408e837a;
op3val:0x7a800003; valaddr_reg:x3; val_offset:35778*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35778*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11927:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x65edcf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0e837a and fs3 == 0 and fe3 == 0xf5 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e65edcf; op2val:0x408e837a;
op3val:0x7a800007; valaddr_reg:x3; val_offset:35781*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35781*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11928:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x65edcf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0e837a and fs3 == 0 and fe3 == 0xf5 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e65edcf; op2val:0x408e837a;
op3val:0x7a80000f; valaddr_reg:x3; val_offset:35784*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35784*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11929:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x65edcf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0e837a and fs3 == 0 and fe3 == 0xf5 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e65edcf; op2val:0x408e837a;
op3val:0x7a80001f; valaddr_reg:x3; val_offset:35787*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35787*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11930:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x65edcf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0e837a and fs3 == 0 and fe3 == 0xf5 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e65edcf; op2val:0x408e837a;
op3val:0x7a80003f; valaddr_reg:x3; val_offset:35790*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35790*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11931:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x65edcf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0e837a and fs3 == 0 and fe3 == 0xf5 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e65edcf; op2val:0x408e837a;
op3val:0x7a80007f; valaddr_reg:x3; val_offset:35793*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35793*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11932:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x65edcf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0e837a and fs3 == 0 and fe3 == 0xf5 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e65edcf; op2val:0x408e837a;
op3val:0x7a8000ff; valaddr_reg:x3; val_offset:35796*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35796*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11933:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x65edcf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0e837a and fs3 == 0 and fe3 == 0xf5 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e65edcf; op2val:0x408e837a;
op3val:0x7a8001ff; valaddr_reg:x3; val_offset:35799*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35799*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11934:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x65edcf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0e837a and fs3 == 0 and fe3 == 0xf5 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e65edcf; op2val:0x408e837a;
op3val:0x7a8003ff; valaddr_reg:x3; val_offset:35802*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35802*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11935:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x65edcf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0e837a and fs3 == 0 and fe3 == 0xf5 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e65edcf; op2val:0x408e837a;
op3val:0x7a8007ff; valaddr_reg:x3; val_offset:35805*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35805*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11936:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x65edcf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0e837a and fs3 == 0 and fe3 == 0xf5 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e65edcf; op2val:0x408e837a;
op3val:0x7a800fff; valaddr_reg:x3; val_offset:35808*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35808*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11937:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x65edcf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0e837a and fs3 == 0 and fe3 == 0xf5 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e65edcf; op2val:0x408e837a;
op3val:0x7a801fff; valaddr_reg:x3; val_offset:35811*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35811*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11938:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x65edcf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0e837a and fs3 == 0 and fe3 == 0xf5 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e65edcf; op2val:0x408e837a;
op3val:0x7a803fff; valaddr_reg:x3; val_offset:35814*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35814*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11939:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x65edcf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0e837a and fs3 == 0 and fe3 == 0xf5 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e65edcf; op2val:0x408e837a;
op3val:0x7a807fff; valaddr_reg:x3; val_offset:35817*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35817*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11940:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x65edcf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0e837a and fs3 == 0 and fe3 == 0xf5 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e65edcf; op2val:0x408e837a;
op3val:0x7a80ffff; valaddr_reg:x3; val_offset:35820*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35820*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11941:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x65edcf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0e837a and fs3 == 0 and fe3 == 0xf5 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e65edcf; op2val:0x408e837a;
op3val:0x7a81ffff; valaddr_reg:x3; val_offset:35823*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35823*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11942:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x65edcf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0e837a and fs3 == 0 and fe3 == 0xf5 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e65edcf; op2val:0x408e837a;
op3val:0x7a83ffff; valaddr_reg:x3; val_offset:35826*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35826*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11943:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x65edcf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0e837a and fs3 == 0 and fe3 == 0xf5 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e65edcf; op2val:0x408e837a;
op3val:0x7a87ffff; valaddr_reg:x3; val_offset:35829*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35829*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11944:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x65edcf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0e837a and fs3 == 0 and fe3 == 0xf5 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e65edcf; op2val:0x408e837a;
op3val:0x7a8fffff; valaddr_reg:x3; val_offset:35832*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35832*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11945:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x65edcf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0e837a and fs3 == 0 and fe3 == 0xf5 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e65edcf; op2val:0x408e837a;
op3val:0x7a9fffff; valaddr_reg:x3; val_offset:35835*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35835*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11946:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x65edcf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0e837a and fs3 == 0 and fe3 == 0xf5 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e65edcf; op2val:0x408e837a;
op3val:0x7abfffff; valaddr_reg:x3; val_offset:35838*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35838*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11947:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x65edcf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0e837a and fs3 == 0 and fe3 == 0xf5 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e65edcf; op2val:0x408e837a;
op3val:0x7ac00000; valaddr_reg:x3; val_offset:35841*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35841*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11948:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x65edcf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0e837a and fs3 == 0 and fe3 == 0xf5 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e65edcf; op2val:0x408e837a;
op3val:0x7ae00000; valaddr_reg:x3; val_offset:35844*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35844*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11949:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x65edcf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0e837a and fs3 == 0 and fe3 == 0xf5 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e65edcf; op2val:0x408e837a;
op3val:0x7af00000; valaddr_reg:x3; val_offset:35847*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35847*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11950:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x65edcf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0e837a and fs3 == 0 and fe3 == 0xf5 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e65edcf; op2val:0x408e837a;
op3val:0x7af80000; valaddr_reg:x3; val_offset:35850*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35850*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11951:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x65edcf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0e837a and fs3 == 0 and fe3 == 0xf5 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e65edcf; op2val:0x408e837a;
op3val:0x7afc0000; valaddr_reg:x3; val_offset:35853*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35853*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11952:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x65edcf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0e837a and fs3 == 0 and fe3 == 0xf5 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e65edcf; op2val:0x408e837a;
op3val:0x7afe0000; valaddr_reg:x3; val_offset:35856*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35856*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11953:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x65edcf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0e837a and fs3 == 0 and fe3 == 0xf5 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e65edcf; op2val:0x408e837a;
op3val:0x7aff0000; valaddr_reg:x3; val_offset:35859*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35859*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11954:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x65edcf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0e837a and fs3 == 0 and fe3 == 0xf5 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e65edcf; op2val:0x408e837a;
op3val:0x7aff8000; valaddr_reg:x3; val_offset:35862*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35862*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11955:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x65edcf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0e837a and fs3 == 0 and fe3 == 0xf5 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e65edcf; op2val:0x408e837a;
op3val:0x7affc000; valaddr_reg:x3; val_offset:35865*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35865*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11956:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x65edcf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0e837a and fs3 == 0 and fe3 == 0xf5 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e65edcf; op2val:0x408e837a;
op3val:0x7affe000; valaddr_reg:x3; val_offset:35868*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35868*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11957:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x65edcf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0e837a and fs3 == 0 and fe3 == 0xf5 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e65edcf; op2val:0x408e837a;
op3val:0x7afff000; valaddr_reg:x3; val_offset:35871*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35871*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11958:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x65edcf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0e837a and fs3 == 0 and fe3 == 0xf5 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e65edcf; op2val:0x408e837a;
op3val:0x7afff800; valaddr_reg:x3; val_offset:35874*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35874*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11959:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x65edcf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0e837a and fs3 == 0 and fe3 == 0xf5 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e65edcf; op2val:0x408e837a;
op3val:0x7afffc00; valaddr_reg:x3; val_offset:35877*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35877*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11960:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x65edcf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0e837a and fs3 == 0 and fe3 == 0xf5 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e65edcf; op2val:0x408e837a;
op3val:0x7afffe00; valaddr_reg:x3; val_offset:35880*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35880*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11961:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x65edcf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0e837a and fs3 == 0 and fe3 == 0xf5 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e65edcf; op2val:0x408e837a;
op3val:0x7affff00; valaddr_reg:x3; val_offset:35883*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35883*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11962:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x65edcf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0e837a and fs3 == 0 and fe3 == 0xf5 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e65edcf; op2val:0x408e837a;
op3val:0x7affff80; valaddr_reg:x3; val_offset:35886*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35886*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11963:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x65edcf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0e837a and fs3 == 0 and fe3 == 0xf5 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e65edcf; op2val:0x408e837a;
op3val:0x7affffc0; valaddr_reg:x3; val_offset:35889*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35889*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11964:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x65edcf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0e837a and fs3 == 0 and fe3 == 0xf5 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e65edcf; op2val:0x408e837a;
op3val:0x7affffe0; valaddr_reg:x3; val_offset:35892*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35892*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11965:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x65edcf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0e837a and fs3 == 0 and fe3 == 0xf5 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e65edcf; op2val:0x408e837a;
op3val:0x7afffff0; valaddr_reg:x3; val_offset:35895*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35895*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11966:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x65edcf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0e837a and fs3 == 0 and fe3 == 0xf5 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e65edcf; op2val:0x408e837a;
op3val:0x7afffff8; valaddr_reg:x3; val_offset:35898*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35898*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11967:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x65edcf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0e837a and fs3 == 0 and fe3 == 0xf5 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e65edcf; op2val:0x408e837a;
op3val:0x7afffffc; valaddr_reg:x3; val_offset:35901*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35901*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11968:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x65edcf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0e837a and fs3 == 0 and fe3 == 0xf5 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e65edcf; op2val:0x408e837a;
op3val:0x7afffffe; valaddr_reg:x3; val_offset:35904*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35904*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11969:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x65edcf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0e837a and fs3 == 0 and fe3 == 0xf5 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e65edcf; op2val:0x408e837a;
op3val:0x7affffff; valaddr_reg:x3; val_offset:35907*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35907*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11970:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x65edcf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0e837a and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e65edcf; op2val:0x408e837a;
op3val:0x7f000001; valaddr_reg:x3; val_offset:35910*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35910*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11971:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x65edcf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0e837a and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e65edcf; op2val:0x408e837a;
op3val:0x7f000003; valaddr_reg:x3; val_offset:35913*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35913*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11972:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x65edcf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0e837a and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e65edcf; op2val:0x408e837a;
op3val:0x7f000007; valaddr_reg:x3; val_offset:35916*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35916*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11973:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x65edcf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0e837a and fs3 == 0 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e65edcf; op2val:0x408e837a;
op3val:0x7f199999; valaddr_reg:x3; val_offset:35919*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35919*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11974:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x65edcf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0e837a and fs3 == 0 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e65edcf; op2val:0x408e837a;
op3val:0x7f249249; valaddr_reg:x3; val_offset:35922*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35922*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11975:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x65edcf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0e837a and fs3 == 0 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e65edcf; op2val:0x408e837a;
op3val:0x7f333333; valaddr_reg:x3; val_offset:35925*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35925*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11976:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x65edcf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0e837a and fs3 == 0 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e65edcf; op2val:0x408e837a;
op3val:0x7f36db6d; valaddr_reg:x3; val_offset:35928*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35928*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11977:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x65edcf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0e837a and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e65edcf; op2val:0x408e837a;
op3val:0x7f3bbbbb; valaddr_reg:x3; val_offset:35931*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35931*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11978:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x65edcf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0e837a and fs3 == 0 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e65edcf; op2val:0x408e837a;
op3val:0x7f444444; valaddr_reg:x3; val_offset:35934*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35934*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11979:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x65edcf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0e837a and fs3 == 0 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e65edcf; op2val:0x408e837a;
op3val:0x7f4ccccc; valaddr_reg:x3; val_offset:35937*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35937*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11980:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x65edcf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0e837a and fs3 == 0 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e65edcf; op2val:0x408e837a;
op3val:0x7f5b6db6; valaddr_reg:x3; val_offset:35940*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35940*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11981:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x65edcf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0e837a and fs3 == 0 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e65edcf; op2val:0x408e837a;
op3val:0x7f666666; valaddr_reg:x3; val_offset:35943*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35943*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11982:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x65edcf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0e837a and fs3 == 0 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e65edcf; op2val:0x408e837a;
op3val:0x7f6db6db; valaddr_reg:x3; val_offset:35946*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35946*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11983:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x65edcf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0e837a and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e65edcf; op2val:0x408e837a;
op3val:0x7f7ffff8; valaddr_reg:x3; val_offset:35949*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35949*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11984:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x65edcf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0e837a and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e65edcf; op2val:0x408e837a;
op3val:0x7f7ffffc; valaddr_reg:x3; val_offset:35952*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35952*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11985:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x65edcf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0e837a and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e65edcf; op2val:0x408e837a;
op3val:0x7f7ffffe; valaddr_reg:x3; val_offset:35955*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35955*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11986:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x67371a and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0db883 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e67371a; op2val:0x8db883;
op3val:0x3e800000; valaddr_reg:x3; val_offset:35958*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35958*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11987:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x67371a and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0db883 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e67371a; op2val:0x8db883;
op3val:0x3e800001; valaddr_reg:x3; val_offset:35961*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35961*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11988:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x67371a and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0db883 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e67371a; op2val:0x8db883;
op3val:0x3e800003; valaddr_reg:x3; val_offset:35964*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35964*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11989:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x67371a and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0db883 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e67371a; op2val:0x8db883;
op3val:0x3e800007; valaddr_reg:x3; val_offset:35967*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35967*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11990:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x67371a and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0db883 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e67371a; op2val:0x8db883;
op3val:0x3e80000f; valaddr_reg:x3; val_offset:35970*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35970*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11991:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x67371a and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0db883 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e67371a; op2val:0x8db883;
op3val:0x3e80001f; valaddr_reg:x3; val_offset:35973*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35973*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11992:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x67371a and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0db883 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e67371a; op2val:0x8db883;
op3val:0x3e80003f; valaddr_reg:x3; val_offset:35976*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35976*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11993:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x67371a and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0db883 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e67371a; op2val:0x8db883;
op3val:0x3e80007f; valaddr_reg:x3; val_offset:35979*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35979*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11994:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x67371a and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0db883 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e67371a; op2val:0x8db883;
op3val:0x3e8000ff; valaddr_reg:x3; val_offset:35982*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35982*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11995:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x67371a and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0db883 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e67371a; op2val:0x8db883;
op3val:0x3e8001ff; valaddr_reg:x3; val_offset:35985*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35985*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11996:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x67371a and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0db883 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e67371a; op2val:0x8db883;
op3val:0x3e8003ff; valaddr_reg:x3; val_offset:35988*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35988*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11997:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x67371a and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0db883 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e67371a; op2val:0x8db883;
op3val:0x3e8007ff; valaddr_reg:x3; val_offset:35991*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35991*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11998:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x67371a and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0db883 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e67371a; op2val:0x8db883;
op3val:0x3e800fff; valaddr_reg:x3; val_offset:35994*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35994*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11999:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x67371a and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0db883 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e67371a; op2val:0x8db883;
op3val:0x3e801fff; valaddr_reg:x3; val_offset:35997*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35997*0 + 3*93*FLEN/8, x4, x1, x2)

inst_12000:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x67371a and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0db883 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e67371a; op2val:0x8db883;
op3val:0x3e803fff; valaddr_reg:x3; val_offset:36000*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36000*0 + 3*93*FLEN/8, x4, x1, x2)

inst_12001:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x67371a and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0db883 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e67371a; op2val:0x8db883;
op3val:0x3e807fff; valaddr_reg:x3; val_offset:36003*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36003*0 + 3*93*FLEN/8, x4, x1, x2)

inst_12002:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x67371a and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0db883 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e67371a; op2val:0x8db883;
op3val:0x3e80ffff; valaddr_reg:x3; val_offset:36006*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36006*0 + 3*93*FLEN/8, x4, x1, x2)

inst_12003:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x67371a and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0db883 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e67371a; op2val:0x8db883;
op3val:0x3e81ffff; valaddr_reg:x3; val_offset:36009*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36009*0 + 3*93*FLEN/8, x4, x1, x2)

inst_12004:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x67371a and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0db883 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e67371a; op2val:0x8db883;
op3val:0x3e83ffff; valaddr_reg:x3; val_offset:36012*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36012*0 + 3*93*FLEN/8, x4, x1, x2)

inst_12005:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x67371a and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0db883 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e67371a; op2val:0x8db883;
op3val:0x3e87ffff; valaddr_reg:x3; val_offset:36015*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36015*0 + 3*93*FLEN/8, x4, x1, x2)

inst_12006:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x67371a and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0db883 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e67371a; op2val:0x8db883;
op3val:0x3e8fffff; valaddr_reg:x3; val_offset:36018*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36018*0 + 3*93*FLEN/8, x4, x1, x2)

inst_12007:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x67371a and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0db883 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e67371a; op2val:0x8db883;
op3val:0x3e9fffff; valaddr_reg:x3; val_offset:36021*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36021*0 + 3*93*FLEN/8, x4, x1, x2)

inst_12008:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x67371a and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0db883 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e67371a; op2val:0x8db883;
op3val:0x3ebfffff; valaddr_reg:x3; val_offset:36024*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36024*0 + 3*93*FLEN/8, x4, x1, x2)

inst_12009:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x67371a and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0db883 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e67371a; op2val:0x8db883;
op3val:0x3ec00000; valaddr_reg:x3; val_offset:36027*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36027*0 + 3*93*FLEN/8, x4, x1, x2)

inst_12010:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x67371a and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0db883 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e67371a; op2val:0x8db883;
op3val:0x3ee00000; valaddr_reg:x3; val_offset:36030*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36030*0 + 3*93*FLEN/8, x4, x1, x2)

inst_12011:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x67371a and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0db883 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e67371a; op2val:0x8db883;
op3val:0x3ef00000; valaddr_reg:x3; val_offset:36033*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36033*0 + 3*93*FLEN/8, x4, x1, x2)

inst_12012:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x67371a and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0db883 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e67371a; op2val:0x8db883;
op3val:0x3ef80000; valaddr_reg:x3; val_offset:36036*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36036*0 + 3*93*FLEN/8, x4, x1, x2)

inst_12013:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x67371a and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0db883 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e67371a; op2val:0x8db883;
op3val:0x3efc0000; valaddr_reg:x3; val_offset:36039*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36039*0 + 3*93*FLEN/8, x4, x1, x2)

inst_12014:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x67371a and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0db883 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e67371a; op2val:0x8db883;
op3val:0x3efe0000; valaddr_reg:x3; val_offset:36042*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36042*0 + 3*93*FLEN/8, x4, x1, x2)

inst_12015:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x67371a and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0db883 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e67371a; op2val:0x8db883;
op3val:0x3eff0000; valaddr_reg:x3; val_offset:36045*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36045*0 + 3*93*FLEN/8, x4, x1, x2)

inst_12016:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x67371a and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0db883 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e67371a; op2val:0x8db883;
op3val:0x3eff8000; valaddr_reg:x3; val_offset:36048*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36048*0 + 3*93*FLEN/8, x4, x1, x2)

inst_12017:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x67371a and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0db883 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e67371a; op2val:0x8db883;
op3val:0x3effc000; valaddr_reg:x3; val_offset:36051*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36051*0 + 3*93*FLEN/8, x4, x1, x2)

inst_12018:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x67371a and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0db883 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e67371a; op2val:0x8db883;
op3val:0x3effe000; valaddr_reg:x3; val_offset:36054*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36054*0 + 3*93*FLEN/8, x4, x1, x2)

inst_12019:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x67371a and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0db883 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e67371a; op2val:0x8db883;
op3val:0x3efff000; valaddr_reg:x3; val_offset:36057*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36057*0 + 3*93*FLEN/8, x4, x1, x2)

inst_12020:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x67371a and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0db883 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e67371a; op2val:0x8db883;
op3val:0x3efff800; valaddr_reg:x3; val_offset:36060*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36060*0 + 3*93*FLEN/8, x4, x1, x2)

inst_12021:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x67371a and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0db883 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e67371a; op2val:0x8db883;
op3val:0x3efffc00; valaddr_reg:x3; val_offset:36063*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36063*0 + 3*93*FLEN/8, x4, x1, x2)

inst_12022:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x67371a and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0db883 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e67371a; op2val:0x8db883;
op3val:0x3efffe00; valaddr_reg:x3; val_offset:36066*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36066*0 + 3*93*FLEN/8, x4, x1, x2)

inst_12023:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x67371a and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0db883 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e67371a; op2val:0x8db883;
op3val:0x3effff00; valaddr_reg:x3; val_offset:36069*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36069*0 + 3*93*FLEN/8, x4, x1, x2)

inst_12024:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x67371a and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0db883 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e67371a; op2val:0x8db883;
op3val:0x3effff80; valaddr_reg:x3; val_offset:36072*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36072*0 + 3*93*FLEN/8, x4, x1, x2)

inst_12025:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x67371a and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0db883 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e67371a; op2val:0x8db883;
op3val:0x3effffc0; valaddr_reg:x3; val_offset:36075*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36075*0 + 3*93*FLEN/8, x4, x1, x2)

inst_12026:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x67371a and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0db883 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e67371a; op2val:0x8db883;
op3val:0x3effffe0; valaddr_reg:x3; val_offset:36078*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36078*0 + 3*93*FLEN/8, x4, x1, x2)

inst_12027:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x67371a and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0db883 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e67371a; op2val:0x8db883;
op3val:0x3efffff0; valaddr_reg:x3; val_offset:36081*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36081*0 + 3*93*FLEN/8, x4, x1, x2)

inst_12028:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x67371a and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0db883 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e67371a; op2val:0x8db883;
op3val:0x3efffff8; valaddr_reg:x3; val_offset:36084*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36084*0 + 3*93*FLEN/8, x4, x1, x2)

inst_12029:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x67371a and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0db883 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e67371a; op2val:0x8db883;
op3val:0x3efffffc; valaddr_reg:x3; val_offset:36087*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36087*0 + 3*93*FLEN/8, x4, x1, x2)

inst_12030:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x67371a and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0db883 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e67371a; op2val:0x8db883;
op3val:0x3efffffe; valaddr_reg:x3; val_offset:36090*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36090*0 + 3*93*FLEN/8, x4, x1, x2)

inst_12031:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x67371a and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0db883 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e67371a; op2val:0x8db883;
op3val:0x3effffff; valaddr_reg:x3; val_offset:36093*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36093*0 + 3*93*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2120567630,32,FLEN)
NAN_BOXED(3230591098,32,FLEN)
NAN_BOXED(3967811576,32,FLEN)
NAN_BOXED(2120567630,32,FLEN)
NAN_BOXED(3230591098,32,FLEN)
NAN_BOXED(3967811580,32,FLEN)
NAN_BOXED(2120567630,32,FLEN)
NAN_BOXED(3230591098,32,FLEN)
NAN_BOXED(3967811582,32,FLEN)
NAN_BOXED(2120567630,32,FLEN)
NAN_BOXED(3230591098,32,FLEN)
NAN_BOXED(3967811583,32,FLEN)
NAN_BOXED(2120567630,32,FLEN)
NAN_BOXED(3230591098,32,FLEN)
NAN_BOXED(4278190081,32,FLEN)
NAN_BOXED(2120567630,32,FLEN)
NAN_BOXED(3230591098,32,FLEN)
NAN_BOXED(4278190083,32,FLEN)
NAN_BOXED(2120567630,32,FLEN)
NAN_BOXED(3230591098,32,FLEN)
NAN_BOXED(4278190087,32,FLEN)
NAN_BOXED(2120567630,32,FLEN)
NAN_BOXED(3230591098,32,FLEN)
NAN_BOXED(4279867801,32,FLEN)
NAN_BOXED(2120567630,32,FLEN)
NAN_BOXED(3230591098,32,FLEN)
NAN_BOXED(4280586825,32,FLEN)
NAN_BOXED(2120567630,32,FLEN)
NAN_BOXED(3230591098,32,FLEN)
NAN_BOXED(4281545523,32,FLEN)
NAN_BOXED(2120567630,32,FLEN)
NAN_BOXED(3230591098,32,FLEN)
NAN_BOXED(4281785197,32,FLEN)
NAN_BOXED(2120567630,32,FLEN)
NAN_BOXED(3230591098,32,FLEN)
NAN_BOXED(4282104763,32,FLEN)
NAN_BOXED(2120567630,32,FLEN)
NAN_BOXED(3230591098,32,FLEN)
NAN_BOXED(4282664004,32,FLEN)
NAN_BOXED(2120567630,32,FLEN)
NAN_BOXED(3230591098,32,FLEN)
NAN_BOXED(4283223244,32,FLEN)
NAN_BOXED(2120567630,32,FLEN)
NAN_BOXED(3230591098,32,FLEN)
NAN_BOXED(4284181942,32,FLEN)
NAN_BOXED(2120567630,32,FLEN)
NAN_BOXED(3230591098,32,FLEN)
NAN_BOXED(4284900966,32,FLEN)
NAN_BOXED(2120567630,32,FLEN)
NAN_BOXED(3230591098,32,FLEN)
NAN_BOXED(4285380315,32,FLEN)
NAN_BOXED(2120567630,32,FLEN)
NAN_BOXED(3230591098,32,FLEN)
NAN_BOXED(4286578680,32,FLEN)
NAN_BOXED(2120567630,32,FLEN)
NAN_BOXED(3230591098,32,FLEN)
NAN_BOXED(4286578684,32,FLEN)
NAN_BOXED(2120567630,32,FLEN)
NAN_BOXED(3230591098,32,FLEN)
NAN_BOXED(4286578686,32,FLEN)
NAN_BOXED(2120609231,32,FLEN)
NAN_BOXED(1083081594,32,FLEN)
NAN_BOXED(2055208960,32,FLEN)
NAN_BOXED(2120609231,32,FLEN)
NAN_BOXED(1083081594,32,FLEN)
NAN_BOXED(2055208961,32,FLEN)
NAN_BOXED(2120609231,32,FLEN)
NAN_BOXED(1083081594,32,FLEN)
NAN_BOXED(2055208963,32,FLEN)
NAN_BOXED(2120609231,32,FLEN)
NAN_BOXED(1083081594,32,FLEN)
NAN_BOXED(2055208967,32,FLEN)
NAN_BOXED(2120609231,32,FLEN)
NAN_BOXED(1083081594,32,FLEN)
NAN_BOXED(2055208975,32,FLEN)
NAN_BOXED(2120609231,32,FLEN)
NAN_BOXED(1083081594,32,FLEN)
NAN_BOXED(2055208991,32,FLEN)
NAN_BOXED(2120609231,32,FLEN)
NAN_BOXED(1083081594,32,FLEN)
NAN_BOXED(2055209023,32,FLEN)
NAN_BOXED(2120609231,32,FLEN)
NAN_BOXED(1083081594,32,FLEN)
NAN_BOXED(2055209087,32,FLEN)
NAN_BOXED(2120609231,32,FLEN)
NAN_BOXED(1083081594,32,FLEN)
NAN_BOXED(2055209215,32,FLEN)
NAN_BOXED(2120609231,32,FLEN)
NAN_BOXED(1083081594,32,FLEN)
NAN_BOXED(2055209471,32,FLEN)
NAN_BOXED(2120609231,32,FLEN)
NAN_BOXED(1083081594,32,FLEN)
NAN_BOXED(2055209983,32,FLEN)
NAN_BOXED(2120609231,32,FLEN)
NAN_BOXED(1083081594,32,FLEN)
NAN_BOXED(2055211007,32,FLEN)
NAN_BOXED(2120609231,32,FLEN)
NAN_BOXED(1083081594,32,FLEN)
NAN_BOXED(2055213055,32,FLEN)
NAN_BOXED(2120609231,32,FLEN)
NAN_BOXED(1083081594,32,FLEN)
NAN_BOXED(2055217151,32,FLEN)
NAN_BOXED(2120609231,32,FLEN)
NAN_BOXED(1083081594,32,FLEN)
NAN_BOXED(2055225343,32,FLEN)
NAN_BOXED(2120609231,32,FLEN)
NAN_BOXED(1083081594,32,FLEN)
NAN_BOXED(2055241727,32,FLEN)
NAN_BOXED(2120609231,32,FLEN)
NAN_BOXED(1083081594,32,FLEN)
NAN_BOXED(2055274495,32,FLEN)
NAN_BOXED(2120609231,32,FLEN)
NAN_BOXED(1083081594,32,FLEN)
NAN_BOXED(2055340031,32,FLEN)
NAN_BOXED(2120609231,32,FLEN)
NAN_BOXED(1083081594,32,FLEN)
NAN_BOXED(2055471103,32,FLEN)
NAN_BOXED(2120609231,32,FLEN)
NAN_BOXED(1083081594,32,FLEN)
NAN_BOXED(2055733247,32,FLEN)
NAN_BOXED(2120609231,32,FLEN)
NAN_BOXED(1083081594,32,FLEN)
NAN_BOXED(2056257535,32,FLEN)
NAN_BOXED(2120609231,32,FLEN)
NAN_BOXED(1083081594,32,FLEN)
NAN_BOXED(2057306111,32,FLEN)
NAN_BOXED(2120609231,32,FLEN)
NAN_BOXED(1083081594,32,FLEN)
NAN_BOXED(2059403263,32,FLEN)
NAN_BOXED(2120609231,32,FLEN)
NAN_BOXED(1083081594,32,FLEN)
NAN_BOXED(2059403264,32,FLEN)
NAN_BOXED(2120609231,32,FLEN)
NAN_BOXED(1083081594,32,FLEN)
NAN_BOXED(2061500416,32,FLEN)
NAN_BOXED(2120609231,32,FLEN)
NAN_BOXED(1083081594,32,FLEN)
NAN_BOXED(2062548992,32,FLEN)
NAN_BOXED(2120609231,32,FLEN)
NAN_BOXED(1083081594,32,FLEN)
NAN_BOXED(2063073280,32,FLEN)
NAN_BOXED(2120609231,32,FLEN)
NAN_BOXED(1083081594,32,FLEN)
NAN_BOXED(2063335424,32,FLEN)
NAN_BOXED(2120609231,32,FLEN)
NAN_BOXED(1083081594,32,FLEN)
NAN_BOXED(2063466496,32,FLEN)
NAN_BOXED(2120609231,32,FLEN)
NAN_BOXED(1083081594,32,FLEN)
NAN_BOXED(2063532032,32,FLEN)
NAN_BOXED(2120609231,32,FLEN)
NAN_BOXED(1083081594,32,FLEN)
NAN_BOXED(2063564800,32,FLEN)
NAN_BOXED(2120609231,32,FLEN)
NAN_BOXED(1083081594,32,FLEN)
NAN_BOXED(2063581184,32,FLEN)
NAN_BOXED(2120609231,32,FLEN)
NAN_BOXED(1083081594,32,FLEN)
NAN_BOXED(2063589376,32,FLEN)
NAN_BOXED(2120609231,32,FLEN)
NAN_BOXED(1083081594,32,FLEN)
NAN_BOXED(2063593472,32,FLEN)
NAN_BOXED(2120609231,32,FLEN)
NAN_BOXED(1083081594,32,FLEN)
NAN_BOXED(2063595520,32,FLEN)
NAN_BOXED(2120609231,32,FLEN)
NAN_BOXED(1083081594,32,FLEN)
NAN_BOXED(2063596544,32,FLEN)
NAN_BOXED(2120609231,32,FLEN)
NAN_BOXED(1083081594,32,FLEN)
NAN_BOXED(2063597056,32,FLEN)
NAN_BOXED(2120609231,32,FLEN)
NAN_BOXED(1083081594,32,FLEN)
NAN_BOXED(2063597312,32,FLEN)
NAN_BOXED(2120609231,32,FLEN)
NAN_BOXED(1083081594,32,FLEN)
NAN_BOXED(2063597440,32,FLEN)
NAN_BOXED(2120609231,32,FLEN)
NAN_BOXED(1083081594,32,FLEN)
NAN_BOXED(2063597504,32,FLEN)
NAN_BOXED(2120609231,32,FLEN)
NAN_BOXED(1083081594,32,FLEN)
NAN_BOXED(2063597536,32,FLEN)
NAN_BOXED(2120609231,32,FLEN)
NAN_BOXED(1083081594,32,FLEN)
NAN_BOXED(2063597552,32,FLEN)
NAN_BOXED(2120609231,32,FLEN)
NAN_BOXED(1083081594,32,FLEN)
NAN_BOXED(2063597560,32,FLEN)
NAN_BOXED(2120609231,32,FLEN)
NAN_BOXED(1083081594,32,FLEN)
NAN_BOXED(2063597564,32,FLEN)
NAN_BOXED(2120609231,32,FLEN)
NAN_BOXED(1083081594,32,FLEN)
NAN_BOXED(2063597566,32,FLEN)
NAN_BOXED(2120609231,32,FLEN)
NAN_BOXED(1083081594,32,FLEN)
NAN_BOXED(2063597567,32,FLEN)
NAN_BOXED(2120609231,32,FLEN)
NAN_BOXED(1083081594,32,FLEN)
NAN_BOXED(2130706433,32,FLEN)
NAN_BOXED(2120609231,32,FLEN)
NAN_BOXED(1083081594,32,FLEN)
NAN_BOXED(2130706435,32,FLEN)
NAN_BOXED(2120609231,32,FLEN)
NAN_BOXED(1083081594,32,FLEN)
NAN_BOXED(2130706439,32,FLEN)
NAN_BOXED(2120609231,32,FLEN)
NAN_BOXED(1083081594,32,FLEN)
NAN_BOXED(2132384153,32,FLEN)
NAN_BOXED(2120609231,32,FLEN)
NAN_BOXED(1083081594,32,FLEN)
NAN_BOXED(2133103177,32,FLEN)
NAN_BOXED(2120609231,32,FLEN)
NAN_BOXED(1083081594,32,FLEN)
NAN_BOXED(2134061875,32,FLEN)
NAN_BOXED(2120609231,32,FLEN)
NAN_BOXED(1083081594,32,FLEN)
NAN_BOXED(2134301549,32,FLEN)
NAN_BOXED(2120609231,32,FLEN)
NAN_BOXED(1083081594,32,FLEN)
NAN_BOXED(2134621115,32,FLEN)
NAN_BOXED(2120609231,32,FLEN)
NAN_BOXED(1083081594,32,FLEN)
NAN_BOXED(2135180356,32,FLEN)
NAN_BOXED(2120609231,32,FLEN)
NAN_BOXED(1083081594,32,FLEN)
NAN_BOXED(2135739596,32,FLEN)
NAN_BOXED(2120609231,32,FLEN)
NAN_BOXED(1083081594,32,FLEN)
NAN_BOXED(2136698294,32,FLEN)
NAN_BOXED(2120609231,32,FLEN)
NAN_BOXED(1083081594,32,FLEN)
NAN_BOXED(2137417318,32,FLEN)
NAN_BOXED(2120609231,32,FLEN)
NAN_BOXED(1083081594,32,FLEN)
NAN_BOXED(2137896667,32,FLEN)
NAN_BOXED(2120609231,32,FLEN)
NAN_BOXED(1083081594,32,FLEN)
NAN_BOXED(2139095032,32,FLEN)
NAN_BOXED(2120609231,32,FLEN)
NAN_BOXED(1083081594,32,FLEN)
NAN_BOXED(2139095036,32,FLEN)
NAN_BOXED(2120609231,32,FLEN)
NAN_BOXED(1083081594,32,FLEN)
NAN_BOXED(2139095038,32,FLEN)
NAN_BOXED(2120693530,32,FLEN)
NAN_BOXED(9287811,32,FLEN)
NAN_BOXED(1048576000,32,FLEN)
NAN_BOXED(2120693530,32,FLEN)
NAN_BOXED(9287811,32,FLEN)
NAN_BOXED(1048576001,32,FLEN)
NAN_BOXED(2120693530,32,FLEN)
NAN_BOXED(9287811,32,FLEN)
NAN_BOXED(1048576003,32,FLEN)
NAN_BOXED(2120693530,32,FLEN)
NAN_BOXED(9287811,32,FLEN)
NAN_BOXED(1048576007,32,FLEN)
NAN_BOXED(2120693530,32,FLEN)
NAN_BOXED(9287811,32,FLEN)
NAN_BOXED(1048576015,32,FLEN)
NAN_BOXED(2120693530,32,FLEN)
NAN_BOXED(9287811,32,FLEN)
NAN_BOXED(1048576031,32,FLEN)
NAN_BOXED(2120693530,32,FLEN)
NAN_BOXED(9287811,32,FLEN)
NAN_BOXED(1048576063,32,FLEN)
NAN_BOXED(2120693530,32,FLEN)
NAN_BOXED(9287811,32,FLEN)
NAN_BOXED(1048576127,32,FLEN)
NAN_BOXED(2120693530,32,FLEN)
NAN_BOXED(9287811,32,FLEN)
NAN_BOXED(1048576255,32,FLEN)
NAN_BOXED(2120693530,32,FLEN)
NAN_BOXED(9287811,32,FLEN)
NAN_BOXED(1048576511,32,FLEN)
NAN_BOXED(2120693530,32,FLEN)
NAN_BOXED(9287811,32,FLEN)
NAN_BOXED(1048577023,32,FLEN)
NAN_BOXED(2120693530,32,FLEN)
NAN_BOXED(9287811,32,FLEN)
NAN_BOXED(1048578047,32,FLEN)
NAN_BOXED(2120693530,32,FLEN)
NAN_BOXED(9287811,32,FLEN)
NAN_BOXED(1048580095,32,FLEN)
NAN_BOXED(2120693530,32,FLEN)
NAN_BOXED(9287811,32,FLEN)
NAN_BOXED(1048584191,32,FLEN)
NAN_BOXED(2120693530,32,FLEN)
NAN_BOXED(9287811,32,FLEN)
NAN_BOXED(1048592383,32,FLEN)
NAN_BOXED(2120693530,32,FLEN)
NAN_BOXED(9287811,32,FLEN)
NAN_BOXED(1048608767,32,FLEN)
NAN_BOXED(2120693530,32,FLEN)
NAN_BOXED(9287811,32,FLEN)
NAN_BOXED(1048641535,32,FLEN)
NAN_BOXED(2120693530,32,FLEN)
NAN_BOXED(9287811,32,FLEN)
NAN_BOXED(1048707071,32,FLEN)
NAN_BOXED(2120693530,32,FLEN)
NAN_BOXED(9287811,32,FLEN)
NAN_BOXED(1048838143,32,FLEN)
NAN_BOXED(2120693530,32,FLEN)
NAN_BOXED(9287811,32,FLEN)
NAN_BOXED(1049100287,32,FLEN)
NAN_BOXED(2120693530,32,FLEN)
NAN_BOXED(9287811,32,FLEN)
NAN_BOXED(1049624575,32,FLEN)
NAN_BOXED(2120693530,32,FLEN)
NAN_BOXED(9287811,32,FLEN)
NAN_BOXED(1050673151,32,FLEN)
NAN_BOXED(2120693530,32,FLEN)
NAN_BOXED(9287811,32,FLEN)
NAN_BOXED(1052770303,32,FLEN)
NAN_BOXED(2120693530,32,FLEN)
NAN_BOXED(9287811,32,FLEN)
NAN_BOXED(1052770304,32,FLEN)
NAN_BOXED(2120693530,32,FLEN)
NAN_BOXED(9287811,32,FLEN)
NAN_BOXED(1054867456,32,FLEN)
NAN_BOXED(2120693530,32,FLEN)
NAN_BOXED(9287811,32,FLEN)
NAN_BOXED(1055916032,32,FLEN)
NAN_BOXED(2120693530,32,FLEN)
NAN_BOXED(9287811,32,FLEN)
NAN_BOXED(1056440320,32,FLEN)
NAN_BOXED(2120693530,32,FLEN)
NAN_BOXED(9287811,32,FLEN)
NAN_BOXED(1056702464,32,FLEN)
NAN_BOXED(2120693530,32,FLEN)
NAN_BOXED(9287811,32,FLEN)
NAN_BOXED(1056833536,32,FLEN)
NAN_BOXED(2120693530,32,FLEN)
NAN_BOXED(9287811,32,FLEN)
NAN_BOXED(1056899072,32,FLEN)
NAN_BOXED(2120693530,32,FLEN)
NAN_BOXED(9287811,32,FLEN)
NAN_BOXED(1056931840,32,FLEN)
NAN_BOXED(2120693530,32,FLEN)
NAN_BOXED(9287811,32,FLEN)
NAN_BOXED(1056948224,32,FLEN)
NAN_BOXED(2120693530,32,FLEN)
NAN_BOXED(9287811,32,FLEN)
NAN_BOXED(1056956416,32,FLEN)
NAN_BOXED(2120693530,32,FLEN)
NAN_BOXED(9287811,32,FLEN)
NAN_BOXED(1056960512,32,FLEN)
NAN_BOXED(2120693530,32,FLEN)
NAN_BOXED(9287811,32,FLEN)
NAN_BOXED(1056962560,32,FLEN)
NAN_BOXED(2120693530,32,FLEN)
NAN_BOXED(9287811,32,FLEN)
NAN_BOXED(1056963584,32,FLEN)
NAN_BOXED(2120693530,32,FLEN)
NAN_BOXED(9287811,32,FLEN)
NAN_BOXED(1056964096,32,FLEN)
NAN_BOXED(2120693530,32,FLEN)
NAN_BOXED(9287811,32,FLEN)
NAN_BOXED(1056964352,32,FLEN)
NAN_BOXED(2120693530,32,FLEN)
NAN_BOXED(9287811,32,FLEN)
NAN_BOXED(1056964480,32,FLEN)
NAN_BOXED(2120693530,32,FLEN)
NAN_BOXED(9287811,32,FLEN)
NAN_BOXED(1056964544,32,FLEN)
NAN_BOXED(2120693530,32,FLEN)
NAN_BOXED(9287811,32,FLEN)
NAN_BOXED(1056964576,32,FLEN)
NAN_BOXED(2120693530,32,FLEN)
NAN_BOXED(9287811,32,FLEN)
NAN_BOXED(1056964592,32,FLEN)
NAN_BOXED(2120693530,32,FLEN)
NAN_BOXED(9287811,32,FLEN)
NAN_BOXED(1056964600,32,FLEN)
NAN_BOXED(2120693530,32,FLEN)
NAN_BOXED(9287811,32,FLEN)
NAN_BOXED(1056964604,32,FLEN)
NAN_BOXED(2120693530,32,FLEN)
NAN_BOXED(9287811,32,FLEN)
NAN_BOXED(1056964606,32,FLEN)
NAN_BOXED(2120693530,32,FLEN)
NAN_BOXED(9287811,32,FLEN)
NAN_BOXED(1056964607,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
