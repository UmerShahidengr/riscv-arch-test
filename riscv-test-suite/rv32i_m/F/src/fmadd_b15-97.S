
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:17:59 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_12288:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a7ab2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x19 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a7ab2; op2val:0x80000000;
op3val:0x8cffff80; valaddr_reg:x3; val_offset:36864*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36864*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12289:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a7ab2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x19 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a7ab2; op2val:0x80000000;
op3val:0x8cffffc0; valaddr_reg:x3; val_offset:36867*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36867*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12290:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a7ab2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x19 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a7ab2; op2val:0x80000000;
op3val:0x8cffffe0; valaddr_reg:x3; val_offset:36870*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36870*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12291:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a7ab2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x19 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a7ab2; op2val:0x80000000;
op3val:0x8cfffff0; valaddr_reg:x3; val_offset:36873*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36873*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12292:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a7ab2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x19 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a7ab2; op2val:0x80000000;
op3val:0x8cfffff8; valaddr_reg:x3; val_offset:36876*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36876*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12293:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a7ab2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x19 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a7ab2; op2val:0x80000000;
op3val:0x8cfffffc; valaddr_reg:x3; val_offset:36879*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36879*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12294:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a7ab2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x19 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a7ab2; op2val:0x80000000;
op3val:0x8cfffffe; valaddr_reg:x3; val_offset:36882*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36882*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12295:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a7ab2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x19 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a7ab2; op2val:0x80000000;
op3val:0x8cffffff; valaddr_reg:x3; val_offset:36885*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36885*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12296:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab42c and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0b9d3f and fs3 == 1 and fe3 == 0xf4 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab42c; op2val:0xc08b9d3f;
op3val:0xfa000000; valaddr_reg:x3; val_offset:36888*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36888*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12297:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab42c and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0b9d3f and fs3 == 1 and fe3 == 0xf4 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab42c; op2val:0xc08b9d3f;
op3val:0xfa000001; valaddr_reg:x3; val_offset:36891*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36891*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12298:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab42c and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0b9d3f and fs3 == 1 and fe3 == 0xf4 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab42c; op2val:0xc08b9d3f;
op3val:0xfa000003; valaddr_reg:x3; val_offset:36894*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36894*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12299:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab42c and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0b9d3f and fs3 == 1 and fe3 == 0xf4 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab42c; op2val:0xc08b9d3f;
op3val:0xfa000007; valaddr_reg:x3; val_offset:36897*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36897*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12300:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab42c and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0b9d3f and fs3 == 1 and fe3 == 0xf4 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab42c; op2val:0xc08b9d3f;
op3val:0xfa00000f; valaddr_reg:x3; val_offset:36900*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36900*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12301:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab42c and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0b9d3f and fs3 == 1 and fe3 == 0xf4 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab42c; op2val:0xc08b9d3f;
op3val:0xfa00001f; valaddr_reg:x3; val_offset:36903*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36903*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12302:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab42c and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0b9d3f and fs3 == 1 and fe3 == 0xf4 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab42c; op2val:0xc08b9d3f;
op3val:0xfa00003f; valaddr_reg:x3; val_offset:36906*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36906*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12303:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab42c and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0b9d3f and fs3 == 1 and fe3 == 0xf4 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab42c; op2val:0xc08b9d3f;
op3val:0xfa00007f; valaddr_reg:x3; val_offset:36909*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36909*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12304:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab42c and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0b9d3f and fs3 == 1 and fe3 == 0xf4 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab42c; op2val:0xc08b9d3f;
op3val:0xfa0000ff; valaddr_reg:x3; val_offset:36912*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36912*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12305:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab42c and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0b9d3f and fs3 == 1 and fe3 == 0xf4 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab42c; op2val:0xc08b9d3f;
op3val:0xfa0001ff; valaddr_reg:x3; val_offset:36915*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36915*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12306:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab42c and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0b9d3f and fs3 == 1 and fe3 == 0xf4 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab42c; op2val:0xc08b9d3f;
op3val:0xfa0003ff; valaddr_reg:x3; val_offset:36918*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36918*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12307:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab42c and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0b9d3f and fs3 == 1 and fe3 == 0xf4 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab42c; op2val:0xc08b9d3f;
op3val:0xfa0007ff; valaddr_reg:x3; val_offset:36921*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36921*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12308:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab42c and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0b9d3f and fs3 == 1 and fe3 == 0xf4 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab42c; op2val:0xc08b9d3f;
op3val:0xfa000fff; valaddr_reg:x3; val_offset:36924*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36924*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12309:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab42c and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0b9d3f and fs3 == 1 and fe3 == 0xf4 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab42c; op2val:0xc08b9d3f;
op3val:0xfa001fff; valaddr_reg:x3; val_offset:36927*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36927*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12310:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab42c and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0b9d3f and fs3 == 1 and fe3 == 0xf4 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab42c; op2val:0xc08b9d3f;
op3val:0xfa003fff; valaddr_reg:x3; val_offset:36930*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36930*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12311:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab42c and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0b9d3f and fs3 == 1 and fe3 == 0xf4 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab42c; op2val:0xc08b9d3f;
op3val:0xfa007fff; valaddr_reg:x3; val_offset:36933*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36933*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12312:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab42c and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0b9d3f and fs3 == 1 and fe3 == 0xf4 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab42c; op2val:0xc08b9d3f;
op3val:0xfa00ffff; valaddr_reg:x3; val_offset:36936*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36936*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12313:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab42c and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0b9d3f and fs3 == 1 and fe3 == 0xf4 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab42c; op2val:0xc08b9d3f;
op3val:0xfa01ffff; valaddr_reg:x3; val_offset:36939*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36939*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12314:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab42c and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0b9d3f and fs3 == 1 and fe3 == 0xf4 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab42c; op2val:0xc08b9d3f;
op3val:0xfa03ffff; valaddr_reg:x3; val_offset:36942*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36942*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12315:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab42c and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0b9d3f and fs3 == 1 and fe3 == 0xf4 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab42c; op2val:0xc08b9d3f;
op3val:0xfa07ffff; valaddr_reg:x3; val_offset:36945*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36945*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12316:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab42c and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0b9d3f and fs3 == 1 and fe3 == 0xf4 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab42c; op2val:0xc08b9d3f;
op3val:0xfa0fffff; valaddr_reg:x3; val_offset:36948*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36948*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12317:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab42c and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0b9d3f and fs3 == 1 and fe3 == 0xf4 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab42c; op2val:0xc08b9d3f;
op3val:0xfa1fffff; valaddr_reg:x3; val_offset:36951*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36951*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12318:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab42c and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0b9d3f and fs3 == 1 and fe3 == 0xf4 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab42c; op2val:0xc08b9d3f;
op3val:0xfa3fffff; valaddr_reg:x3; val_offset:36954*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36954*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12319:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab42c and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0b9d3f and fs3 == 1 and fe3 == 0xf4 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab42c; op2val:0xc08b9d3f;
op3val:0xfa400000; valaddr_reg:x3; val_offset:36957*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36957*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12320:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab42c and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0b9d3f and fs3 == 1 and fe3 == 0xf4 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab42c; op2val:0xc08b9d3f;
op3val:0xfa600000; valaddr_reg:x3; val_offset:36960*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36960*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12321:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab42c and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0b9d3f and fs3 == 1 and fe3 == 0xf4 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab42c; op2val:0xc08b9d3f;
op3val:0xfa700000; valaddr_reg:x3; val_offset:36963*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36963*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12322:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab42c and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0b9d3f and fs3 == 1 and fe3 == 0xf4 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab42c; op2val:0xc08b9d3f;
op3val:0xfa780000; valaddr_reg:x3; val_offset:36966*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36966*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12323:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab42c and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0b9d3f and fs3 == 1 and fe3 == 0xf4 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab42c; op2val:0xc08b9d3f;
op3val:0xfa7c0000; valaddr_reg:x3; val_offset:36969*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36969*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12324:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab42c and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0b9d3f and fs3 == 1 and fe3 == 0xf4 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab42c; op2val:0xc08b9d3f;
op3val:0xfa7e0000; valaddr_reg:x3; val_offset:36972*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36972*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12325:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab42c and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0b9d3f and fs3 == 1 and fe3 == 0xf4 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab42c; op2val:0xc08b9d3f;
op3val:0xfa7f0000; valaddr_reg:x3; val_offset:36975*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36975*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12326:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab42c and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0b9d3f and fs3 == 1 and fe3 == 0xf4 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab42c; op2val:0xc08b9d3f;
op3val:0xfa7f8000; valaddr_reg:x3; val_offset:36978*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36978*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12327:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab42c and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0b9d3f and fs3 == 1 and fe3 == 0xf4 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab42c; op2val:0xc08b9d3f;
op3val:0xfa7fc000; valaddr_reg:x3; val_offset:36981*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36981*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12328:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab42c and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0b9d3f and fs3 == 1 and fe3 == 0xf4 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab42c; op2val:0xc08b9d3f;
op3val:0xfa7fe000; valaddr_reg:x3; val_offset:36984*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36984*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12329:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab42c and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0b9d3f and fs3 == 1 and fe3 == 0xf4 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab42c; op2val:0xc08b9d3f;
op3val:0xfa7ff000; valaddr_reg:x3; val_offset:36987*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36987*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12330:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab42c and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0b9d3f and fs3 == 1 and fe3 == 0xf4 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab42c; op2val:0xc08b9d3f;
op3val:0xfa7ff800; valaddr_reg:x3; val_offset:36990*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36990*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12331:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab42c and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0b9d3f and fs3 == 1 and fe3 == 0xf4 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab42c; op2val:0xc08b9d3f;
op3val:0xfa7ffc00; valaddr_reg:x3; val_offset:36993*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36993*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12332:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab42c and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0b9d3f and fs3 == 1 and fe3 == 0xf4 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab42c; op2val:0xc08b9d3f;
op3val:0xfa7ffe00; valaddr_reg:x3; val_offset:36996*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36996*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12333:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab42c and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0b9d3f and fs3 == 1 and fe3 == 0xf4 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab42c; op2val:0xc08b9d3f;
op3val:0xfa7fff00; valaddr_reg:x3; val_offset:36999*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36999*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12334:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab42c and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0b9d3f and fs3 == 1 and fe3 == 0xf4 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab42c; op2val:0xc08b9d3f;
op3val:0xfa7fff80; valaddr_reg:x3; val_offset:37002*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37002*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12335:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab42c and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0b9d3f and fs3 == 1 and fe3 == 0xf4 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab42c; op2val:0xc08b9d3f;
op3val:0xfa7fffc0; valaddr_reg:x3; val_offset:37005*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37005*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12336:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab42c and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0b9d3f and fs3 == 1 and fe3 == 0xf4 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab42c; op2val:0xc08b9d3f;
op3val:0xfa7fffe0; valaddr_reg:x3; val_offset:37008*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37008*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12337:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab42c and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0b9d3f and fs3 == 1 and fe3 == 0xf4 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab42c; op2val:0xc08b9d3f;
op3val:0xfa7ffff0; valaddr_reg:x3; val_offset:37011*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37011*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12338:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab42c and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0b9d3f and fs3 == 1 and fe3 == 0xf4 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab42c; op2val:0xc08b9d3f;
op3val:0xfa7ffff8; valaddr_reg:x3; val_offset:37014*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37014*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12339:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab42c and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0b9d3f and fs3 == 1 and fe3 == 0xf4 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab42c; op2val:0xc08b9d3f;
op3val:0xfa7ffffc; valaddr_reg:x3; val_offset:37017*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37017*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12340:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab42c and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0b9d3f and fs3 == 1 and fe3 == 0xf4 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab42c; op2val:0xc08b9d3f;
op3val:0xfa7ffffe; valaddr_reg:x3; val_offset:37020*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37020*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12341:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab42c and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0b9d3f and fs3 == 1 and fe3 == 0xf4 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab42c; op2val:0xc08b9d3f;
op3val:0xfa7fffff; valaddr_reg:x3; val_offset:37023*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37023*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12342:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab42c and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0b9d3f and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab42c; op2val:0xc08b9d3f;
op3val:0xff000001; valaddr_reg:x3; val_offset:37026*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37026*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12343:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab42c and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0b9d3f and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab42c; op2val:0xc08b9d3f;
op3val:0xff000003; valaddr_reg:x3; val_offset:37029*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37029*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12344:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab42c and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0b9d3f and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab42c; op2val:0xc08b9d3f;
op3val:0xff000007; valaddr_reg:x3; val_offset:37032*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37032*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12345:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab42c and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0b9d3f and fs3 == 1 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab42c; op2val:0xc08b9d3f;
op3val:0xff199999; valaddr_reg:x3; val_offset:37035*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37035*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12346:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab42c and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0b9d3f and fs3 == 1 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab42c; op2val:0xc08b9d3f;
op3val:0xff249249; valaddr_reg:x3; val_offset:37038*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37038*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12347:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab42c and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0b9d3f and fs3 == 1 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab42c; op2val:0xc08b9d3f;
op3val:0xff333333; valaddr_reg:x3; val_offset:37041*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37041*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12348:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab42c and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0b9d3f and fs3 == 1 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab42c; op2val:0xc08b9d3f;
op3val:0xff36db6d; valaddr_reg:x3; val_offset:37044*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37044*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12349:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab42c and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0b9d3f and fs3 == 1 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab42c; op2val:0xc08b9d3f;
op3val:0xff3bbbbb; valaddr_reg:x3; val_offset:37047*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37047*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12350:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab42c and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0b9d3f and fs3 == 1 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab42c; op2val:0xc08b9d3f;
op3val:0xff444444; valaddr_reg:x3; val_offset:37050*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37050*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12351:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab42c and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0b9d3f and fs3 == 1 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab42c; op2val:0xc08b9d3f;
op3val:0xff4ccccc; valaddr_reg:x3; val_offset:37053*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37053*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12352:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab42c and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0b9d3f and fs3 == 1 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab42c; op2val:0xc08b9d3f;
op3val:0xff5b6db6; valaddr_reg:x3; val_offset:37056*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37056*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12353:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab42c and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0b9d3f and fs3 == 1 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab42c; op2val:0xc08b9d3f;
op3val:0xff666666; valaddr_reg:x3; val_offset:37059*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37059*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12354:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab42c and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0b9d3f and fs3 == 1 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab42c; op2val:0xc08b9d3f;
op3val:0xff6db6db; valaddr_reg:x3; val_offset:37062*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37062*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12355:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab42c and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0b9d3f and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab42c; op2val:0xc08b9d3f;
op3val:0xff7ffff8; valaddr_reg:x3; val_offset:37065*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37065*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12356:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab42c and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0b9d3f and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab42c; op2val:0xc08b9d3f;
op3val:0xff7ffffc; valaddr_reg:x3; val_offset:37068*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37068*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12357:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab42c and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0b9d3f and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab42c; op2val:0xc08b9d3f;
op3val:0xff7ffffe; valaddr_reg:x3; val_offset:37071*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37071*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12358:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6c5c91 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0aa291 and fs3 == 0 and fe3 == 0xe6 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6c5c91; op2val:0x408aa291;
op3val:0x73000000; valaddr_reg:x3; val_offset:37074*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37074*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12359:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6c5c91 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0aa291 and fs3 == 0 and fe3 == 0xe6 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6c5c91; op2val:0x408aa291;
op3val:0x73000001; valaddr_reg:x3; val_offset:37077*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37077*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12360:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6c5c91 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0aa291 and fs3 == 0 and fe3 == 0xe6 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6c5c91; op2val:0x408aa291;
op3val:0x73000003; valaddr_reg:x3; val_offset:37080*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37080*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12361:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6c5c91 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0aa291 and fs3 == 0 and fe3 == 0xe6 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6c5c91; op2val:0x408aa291;
op3val:0x73000007; valaddr_reg:x3; val_offset:37083*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37083*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12362:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6c5c91 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0aa291 and fs3 == 0 and fe3 == 0xe6 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6c5c91; op2val:0x408aa291;
op3val:0x7300000f; valaddr_reg:x3; val_offset:37086*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37086*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12363:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6c5c91 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0aa291 and fs3 == 0 and fe3 == 0xe6 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6c5c91; op2val:0x408aa291;
op3val:0x7300001f; valaddr_reg:x3; val_offset:37089*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37089*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12364:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6c5c91 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0aa291 and fs3 == 0 and fe3 == 0xe6 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6c5c91; op2val:0x408aa291;
op3val:0x7300003f; valaddr_reg:x3; val_offset:37092*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37092*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12365:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6c5c91 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0aa291 and fs3 == 0 and fe3 == 0xe6 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6c5c91; op2val:0x408aa291;
op3val:0x7300007f; valaddr_reg:x3; val_offset:37095*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37095*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12366:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6c5c91 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0aa291 and fs3 == 0 and fe3 == 0xe6 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6c5c91; op2val:0x408aa291;
op3val:0x730000ff; valaddr_reg:x3; val_offset:37098*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37098*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12367:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6c5c91 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0aa291 and fs3 == 0 and fe3 == 0xe6 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6c5c91; op2val:0x408aa291;
op3val:0x730001ff; valaddr_reg:x3; val_offset:37101*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37101*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12368:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6c5c91 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0aa291 and fs3 == 0 and fe3 == 0xe6 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6c5c91; op2val:0x408aa291;
op3val:0x730003ff; valaddr_reg:x3; val_offset:37104*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37104*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12369:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6c5c91 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0aa291 and fs3 == 0 and fe3 == 0xe6 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6c5c91; op2val:0x408aa291;
op3val:0x730007ff; valaddr_reg:x3; val_offset:37107*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37107*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12370:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6c5c91 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0aa291 and fs3 == 0 and fe3 == 0xe6 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6c5c91; op2val:0x408aa291;
op3val:0x73000fff; valaddr_reg:x3; val_offset:37110*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37110*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12371:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6c5c91 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0aa291 and fs3 == 0 and fe3 == 0xe6 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6c5c91; op2val:0x408aa291;
op3val:0x73001fff; valaddr_reg:x3; val_offset:37113*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37113*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12372:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6c5c91 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0aa291 and fs3 == 0 and fe3 == 0xe6 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6c5c91; op2val:0x408aa291;
op3val:0x73003fff; valaddr_reg:x3; val_offset:37116*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37116*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12373:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6c5c91 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0aa291 and fs3 == 0 and fe3 == 0xe6 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6c5c91; op2val:0x408aa291;
op3val:0x73007fff; valaddr_reg:x3; val_offset:37119*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37119*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12374:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6c5c91 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0aa291 and fs3 == 0 and fe3 == 0xe6 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6c5c91; op2val:0x408aa291;
op3val:0x7300ffff; valaddr_reg:x3; val_offset:37122*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37122*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12375:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6c5c91 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0aa291 and fs3 == 0 and fe3 == 0xe6 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6c5c91; op2val:0x408aa291;
op3val:0x7301ffff; valaddr_reg:x3; val_offset:37125*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37125*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12376:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6c5c91 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0aa291 and fs3 == 0 and fe3 == 0xe6 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6c5c91; op2val:0x408aa291;
op3val:0x7303ffff; valaddr_reg:x3; val_offset:37128*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37128*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12377:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6c5c91 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0aa291 and fs3 == 0 and fe3 == 0xe6 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6c5c91; op2val:0x408aa291;
op3val:0x7307ffff; valaddr_reg:x3; val_offset:37131*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37131*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12378:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6c5c91 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0aa291 and fs3 == 0 and fe3 == 0xe6 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6c5c91; op2val:0x408aa291;
op3val:0x730fffff; valaddr_reg:x3; val_offset:37134*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37134*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12379:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6c5c91 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0aa291 and fs3 == 0 and fe3 == 0xe6 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6c5c91; op2val:0x408aa291;
op3val:0x731fffff; valaddr_reg:x3; val_offset:37137*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37137*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12380:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6c5c91 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0aa291 and fs3 == 0 and fe3 == 0xe6 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6c5c91; op2val:0x408aa291;
op3val:0x733fffff; valaddr_reg:x3; val_offset:37140*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37140*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12381:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6c5c91 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0aa291 and fs3 == 0 and fe3 == 0xe6 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6c5c91; op2val:0x408aa291;
op3val:0x73400000; valaddr_reg:x3; val_offset:37143*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37143*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12382:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6c5c91 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0aa291 and fs3 == 0 and fe3 == 0xe6 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6c5c91; op2val:0x408aa291;
op3val:0x73600000; valaddr_reg:x3; val_offset:37146*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37146*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12383:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6c5c91 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0aa291 and fs3 == 0 and fe3 == 0xe6 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6c5c91; op2val:0x408aa291;
op3val:0x73700000; valaddr_reg:x3; val_offset:37149*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37149*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12384:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6c5c91 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0aa291 and fs3 == 0 and fe3 == 0xe6 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6c5c91; op2val:0x408aa291;
op3val:0x73780000; valaddr_reg:x3; val_offset:37152*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37152*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12385:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6c5c91 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0aa291 and fs3 == 0 and fe3 == 0xe6 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6c5c91; op2val:0x408aa291;
op3val:0x737c0000; valaddr_reg:x3; val_offset:37155*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37155*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12386:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6c5c91 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0aa291 and fs3 == 0 and fe3 == 0xe6 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6c5c91; op2val:0x408aa291;
op3val:0x737e0000; valaddr_reg:x3; val_offset:37158*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37158*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12387:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6c5c91 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0aa291 and fs3 == 0 and fe3 == 0xe6 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6c5c91; op2val:0x408aa291;
op3val:0x737f0000; valaddr_reg:x3; val_offset:37161*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37161*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12388:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6c5c91 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0aa291 and fs3 == 0 and fe3 == 0xe6 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6c5c91; op2val:0x408aa291;
op3val:0x737f8000; valaddr_reg:x3; val_offset:37164*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37164*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12389:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6c5c91 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0aa291 and fs3 == 0 and fe3 == 0xe6 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6c5c91; op2val:0x408aa291;
op3val:0x737fc000; valaddr_reg:x3; val_offset:37167*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37167*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12390:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6c5c91 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0aa291 and fs3 == 0 and fe3 == 0xe6 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6c5c91; op2val:0x408aa291;
op3val:0x737fe000; valaddr_reg:x3; val_offset:37170*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37170*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12391:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6c5c91 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0aa291 and fs3 == 0 and fe3 == 0xe6 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6c5c91; op2val:0x408aa291;
op3val:0x737ff000; valaddr_reg:x3; val_offset:37173*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37173*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12392:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6c5c91 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0aa291 and fs3 == 0 and fe3 == 0xe6 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6c5c91; op2val:0x408aa291;
op3val:0x737ff800; valaddr_reg:x3; val_offset:37176*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37176*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12393:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6c5c91 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0aa291 and fs3 == 0 and fe3 == 0xe6 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6c5c91; op2val:0x408aa291;
op3val:0x737ffc00; valaddr_reg:x3; val_offset:37179*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37179*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12394:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6c5c91 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0aa291 and fs3 == 0 and fe3 == 0xe6 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6c5c91; op2val:0x408aa291;
op3val:0x737ffe00; valaddr_reg:x3; val_offset:37182*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37182*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12395:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6c5c91 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0aa291 and fs3 == 0 and fe3 == 0xe6 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6c5c91; op2val:0x408aa291;
op3val:0x737fff00; valaddr_reg:x3; val_offset:37185*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37185*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12396:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6c5c91 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0aa291 and fs3 == 0 and fe3 == 0xe6 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6c5c91; op2val:0x408aa291;
op3val:0x737fff80; valaddr_reg:x3; val_offset:37188*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37188*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12397:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6c5c91 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0aa291 and fs3 == 0 and fe3 == 0xe6 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6c5c91; op2val:0x408aa291;
op3val:0x737fffc0; valaddr_reg:x3; val_offset:37191*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37191*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12398:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6c5c91 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0aa291 and fs3 == 0 and fe3 == 0xe6 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6c5c91; op2val:0x408aa291;
op3val:0x737fffe0; valaddr_reg:x3; val_offset:37194*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37194*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12399:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6c5c91 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0aa291 and fs3 == 0 and fe3 == 0xe6 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6c5c91; op2val:0x408aa291;
op3val:0x737ffff0; valaddr_reg:x3; val_offset:37197*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37197*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12400:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6c5c91 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0aa291 and fs3 == 0 and fe3 == 0xe6 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6c5c91; op2val:0x408aa291;
op3val:0x737ffff8; valaddr_reg:x3; val_offset:37200*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37200*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12401:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6c5c91 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0aa291 and fs3 == 0 and fe3 == 0xe6 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6c5c91; op2val:0x408aa291;
op3val:0x737ffffc; valaddr_reg:x3; val_offset:37203*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37203*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12402:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6c5c91 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0aa291 and fs3 == 0 and fe3 == 0xe6 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6c5c91; op2val:0x408aa291;
op3val:0x737ffffe; valaddr_reg:x3; val_offset:37206*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37206*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12403:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6c5c91 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0aa291 and fs3 == 0 and fe3 == 0xe6 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6c5c91; op2val:0x408aa291;
op3val:0x737fffff; valaddr_reg:x3; val_offset:37209*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37209*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12404:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6c5c91 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0aa291 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6c5c91; op2val:0x408aa291;
op3val:0x7f000001; valaddr_reg:x3; val_offset:37212*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37212*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12405:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6c5c91 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0aa291 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6c5c91; op2val:0x408aa291;
op3val:0x7f000003; valaddr_reg:x3; val_offset:37215*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37215*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12406:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6c5c91 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0aa291 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6c5c91; op2val:0x408aa291;
op3val:0x7f000007; valaddr_reg:x3; val_offset:37218*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37218*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12407:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6c5c91 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0aa291 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6c5c91; op2val:0x408aa291;
op3val:0x7f199999; valaddr_reg:x3; val_offset:37221*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37221*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12408:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6c5c91 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0aa291 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6c5c91; op2val:0x408aa291;
op3val:0x7f249249; valaddr_reg:x3; val_offset:37224*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37224*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12409:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6c5c91 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0aa291 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6c5c91; op2val:0x408aa291;
op3val:0x7f333333; valaddr_reg:x3; val_offset:37227*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37227*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12410:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6c5c91 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0aa291 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6c5c91; op2val:0x408aa291;
op3val:0x7f36db6d; valaddr_reg:x3; val_offset:37230*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37230*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12411:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6c5c91 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0aa291 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6c5c91; op2val:0x408aa291;
op3val:0x7f3bbbbb; valaddr_reg:x3; val_offset:37233*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37233*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12412:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6c5c91 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0aa291 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6c5c91; op2val:0x408aa291;
op3val:0x7f444444; valaddr_reg:x3; val_offset:37236*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37236*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12413:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6c5c91 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0aa291 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6c5c91; op2val:0x408aa291;
op3val:0x7f4ccccc; valaddr_reg:x3; val_offset:37239*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37239*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12414:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6c5c91 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0aa291 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6c5c91; op2val:0x408aa291;
op3val:0x7f5b6db6; valaddr_reg:x3; val_offset:37242*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37242*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12415:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6c5c91 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0aa291 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6c5c91; op2val:0x408aa291;
op3val:0x7f666666; valaddr_reg:x3; val_offset:37245*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37245*0 + 3*96*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2120907442,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2365587328,32,FLEN)
NAN_BOXED(2120907442,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2365587392,32,FLEN)
NAN_BOXED(2120907442,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2365587424,32,FLEN)
NAN_BOXED(2120907442,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2365587440,32,FLEN)
NAN_BOXED(2120907442,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2365587448,32,FLEN)
NAN_BOXED(2120907442,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2365587452,32,FLEN)
NAN_BOXED(2120907442,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2365587454,32,FLEN)
NAN_BOXED(2120907442,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2365587455,32,FLEN)
NAN_BOXED(2120922156,32,FLEN)
NAN_BOXED(3230375231,32,FLEN)
NAN_BOXED(4194304000,32,FLEN)
NAN_BOXED(2120922156,32,FLEN)
NAN_BOXED(3230375231,32,FLEN)
NAN_BOXED(4194304001,32,FLEN)
NAN_BOXED(2120922156,32,FLEN)
NAN_BOXED(3230375231,32,FLEN)
NAN_BOXED(4194304003,32,FLEN)
NAN_BOXED(2120922156,32,FLEN)
NAN_BOXED(3230375231,32,FLEN)
NAN_BOXED(4194304007,32,FLEN)
NAN_BOXED(2120922156,32,FLEN)
NAN_BOXED(3230375231,32,FLEN)
NAN_BOXED(4194304015,32,FLEN)
NAN_BOXED(2120922156,32,FLEN)
NAN_BOXED(3230375231,32,FLEN)
NAN_BOXED(4194304031,32,FLEN)
NAN_BOXED(2120922156,32,FLEN)
NAN_BOXED(3230375231,32,FLEN)
NAN_BOXED(4194304063,32,FLEN)
NAN_BOXED(2120922156,32,FLEN)
NAN_BOXED(3230375231,32,FLEN)
NAN_BOXED(4194304127,32,FLEN)
NAN_BOXED(2120922156,32,FLEN)
NAN_BOXED(3230375231,32,FLEN)
NAN_BOXED(4194304255,32,FLEN)
NAN_BOXED(2120922156,32,FLEN)
NAN_BOXED(3230375231,32,FLEN)
NAN_BOXED(4194304511,32,FLEN)
NAN_BOXED(2120922156,32,FLEN)
NAN_BOXED(3230375231,32,FLEN)
NAN_BOXED(4194305023,32,FLEN)
NAN_BOXED(2120922156,32,FLEN)
NAN_BOXED(3230375231,32,FLEN)
NAN_BOXED(4194306047,32,FLEN)
NAN_BOXED(2120922156,32,FLEN)
NAN_BOXED(3230375231,32,FLEN)
NAN_BOXED(4194308095,32,FLEN)
NAN_BOXED(2120922156,32,FLEN)
NAN_BOXED(3230375231,32,FLEN)
NAN_BOXED(4194312191,32,FLEN)
NAN_BOXED(2120922156,32,FLEN)
NAN_BOXED(3230375231,32,FLEN)
NAN_BOXED(4194320383,32,FLEN)
NAN_BOXED(2120922156,32,FLEN)
NAN_BOXED(3230375231,32,FLEN)
NAN_BOXED(4194336767,32,FLEN)
NAN_BOXED(2120922156,32,FLEN)
NAN_BOXED(3230375231,32,FLEN)
NAN_BOXED(4194369535,32,FLEN)
NAN_BOXED(2120922156,32,FLEN)
NAN_BOXED(3230375231,32,FLEN)
NAN_BOXED(4194435071,32,FLEN)
NAN_BOXED(2120922156,32,FLEN)
NAN_BOXED(3230375231,32,FLEN)
NAN_BOXED(4194566143,32,FLEN)
NAN_BOXED(2120922156,32,FLEN)
NAN_BOXED(3230375231,32,FLEN)
NAN_BOXED(4194828287,32,FLEN)
NAN_BOXED(2120922156,32,FLEN)
NAN_BOXED(3230375231,32,FLEN)
NAN_BOXED(4195352575,32,FLEN)
NAN_BOXED(2120922156,32,FLEN)
NAN_BOXED(3230375231,32,FLEN)
NAN_BOXED(4196401151,32,FLEN)
NAN_BOXED(2120922156,32,FLEN)
NAN_BOXED(3230375231,32,FLEN)
NAN_BOXED(4198498303,32,FLEN)
NAN_BOXED(2120922156,32,FLEN)
NAN_BOXED(3230375231,32,FLEN)
NAN_BOXED(4198498304,32,FLEN)
NAN_BOXED(2120922156,32,FLEN)
NAN_BOXED(3230375231,32,FLEN)
NAN_BOXED(4200595456,32,FLEN)
NAN_BOXED(2120922156,32,FLEN)
NAN_BOXED(3230375231,32,FLEN)
NAN_BOXED(4201644032,32,FLEN)
NAN_BOXED(2120922156,32,FLEN)
NAN_BOXED(3230375231,32,FLEN)
NAN_BOXED(4202168320,32,FLEN)
NAN_BOXED(2120922156,32,FLEN)
NAN_BOXED(3230375231,32,FLEN)
NAN_BOXED(4202430464,32,FLEN)
NAN_BOXED(2120922156,32,FLEN)
NAN_BOXED(3230375231,32,FLEN)
NAN_BOXED(4202561536,32,FLEN)
NAN_BOXED(2120922156,32,FLEN)
NAN_BOXED(3230375231,32,FLEN)
NAN_BOXED(4202627072,32,FLEN)
NAN_BOXED(2120922156,32,FLEN)
NAN_BOXED(3230375231,32,FLEN)
NAN_BOXED(4202659840,32,FLEN)
NAN_BOXED(2120922156,32,FLEN)
NAN_BOXED(3230375231,32,FLEN)
NAN_BOXED(4202676224,32,FLEN)
NAN_BOXED(2120922156,32,FLEN)
NAN_BOXED(3230375231,32,FLEN)
NAN_BOXED(4202684416,32,FLEN)
NAN_BOXED(2120922156,32,FLEN)
NAN_BOXED(3230375231,32,FLEN)
NAN_BOXED(4202688512,32,FLEN)
NAN_BOXED(2120922156,32,FLEN)
NAN_BOXED(3230375231,32,FLEN)
NAN_BOXED(4202690560,32,FLEN)
NAN_BOXED(2120922156,32,FLEN)
NAN_BOXED(3230375231,32,FLEN)
NAN_BOXED(4202691584,32,FLEN)
NAN_BOXED(2120922156,32,FLEN)
NAN_BOXED(3230375231,32,FLEN)
NAN_BOXED(4202692096,32,FLEN)
NAN_BOXED(2120922156,32,FLEN)
NAN_BOXED(3230375231,32,FLEN)
NAN_BOXED(4202692352,32,FLEN)
NAN_BOXED(2120922156,32,FLEN)
NAN_BOXED(3230375231,32,FLEN)
NAN_BOXED(4202692480,32,FLEN)
NAN_BOXED(2120922156,32,FLEN)
NAN_BOXED(3230375231,32,FLEN)
NAN_BOXED(4202692544,32,FLEN)
NAN_BOXED(2120922156,32,FLEN)
NAN_BOXED(3230375231,32,FLEN)
NAN_BOXED(4202692576,32,FLEN)
NAN_BOXED(2120922156,32,FLEN)
NAN_BOXED(3230375231,32,FLEN)
NAN_BOXED(4202692592,32,FLEN)
NAN_BOXED(2120922156,32,FLEN)
NAN_BOXED(3230375231,32,FLEN)
NAN_BOXED(4202692600,32,FLEN)
NAN_BOXED(2120922156,32,FLEN)
NAN_BOXED(3230375231,32,FLEN)
NAN_BOXED(4202692604,32,FLEN)
NAN_BOXED(2120922156,32,FLEN)
NAN_BOXED(3230375231,32,FLEN)
NAN_BOXED(4202692606,32,FLEN)
NAN_BOXED(2120922156,32,FLEN)
NAN_BOXED(3230375231,32,FLEN)
NAN_BOXED(4202692607,32,FLEN)
NAN_BOXED(2120922156,32,FLEN)
NAN_BOXED(3230375231,32,FLEN)
NAN_BOXED(4278190081,32,FLEN)
NAN_BOXED(2120922156,32,FLEN)
NAN_BOXED(3230375231,32,FLEN)
NAN_BOXED(4278190083,32,FLEN)
NAN_BOXED(2120922156,32,FLEN)
NAN_BOXED(3230375231,32,FLEN)
NAN_BOXED(4278190087,32,FLEN)
NAN_BOXED(2120922156,32,FLEN)
NAN_BOXED(3230375231,32,FLEN)
NAN_BOXED(4279867801,32,FLEN)
NAN_BOXED(2120922156,32,FLEN)
NAN_BOXED(3230375231,32,FLEN)
NAN_BOXED(4280586825,32,FLEN)
NAN_BOXED(2120922156,32,FLEN)
NAN_BOXED(3230375231,32,FLEN)
NAN_BOXED(4281545523,32,FLEN)
NAN_BOXED(2120922156,32,FLEN)
NAN_BOXED(3230375231,32,FLEN)
NAN_BOXED(4281785197,32,FLEN)
NAN_BOXED(2120922156,32,FLEN)
NAN_BOXED(3230375231,32,FLEN)
NAN_BOXED(4282104763,32,FLEN)
NAN_BOXED(2120922156,32,FLEN)
NAN_BOXED(3230375231,32,FLEN)
NAN_BOXED(4282664004,32,FLEN)
NAN_BOXED(2120922156,32,FLEN)
NAN_BOXED(3230375231,32,FLEN)
NAN_BOXED(4283223244,32,FLEN)
NAN_BOXED(2120922156,32,FLEN)
NAN_BOXED(3230375231,32,FLEN)
NAN_BOXED(4284181942,32,FLEN)
NAN_BOXED(2120922156,32,FLEN)
NAN_BOXED(3230375231,32,FLEN)
NAN_BOXED(4284900966,32,FLEN)
NAN_BOXED(2120922156,32,FLEN)
NAN_BOXED(3230375231,32,FLEN)
NAN_BOXED(4285380315,32,FLEN)
NAN_BOXED(2120922156,32,FLEN)
NAN_BOXED(3230375231,32,FLEN)
NAN_BOXED(4286578680,32,FLEN)
NAN_BOXED(2120922156,32,FLEN)
NAN_BOXED(3230375231,32,FLEN)
NAN_BOXED(4286578684,32,FLEN)
NAN_BOXED(2120922156,32,FLEN)
NAN_BOXED(3230375231,32,FLEN)
NAN_BOXED(4286578686,32,FLEN)
NAN_BOXED(2121030801,32,FLEN)
NAN_BOXED(1082827409,32,FLEN)
NAN_BOXED(1929379840,32,FLEN)
NAN_BOXED(2121030801,32,FLEN)
NAN_BOXED(1082827409,32,FLEN)
NAN_BOXED(1929379841,32,FLEN)
NAN_BOXED(2121030801,32,FLEN)
NAN_BOXED(1082827409,32,FLEN)
NAN_BOXED(1929379843,32,FLEN)
NAN_BOXED(2121030801,32,FLEN)
NAN_BOXED(1082827409,32,FLEN)
NAN_BOXED(1929379847,32,FLEN)
NAN_BOXED(2121030801,32,FLEN)
NAN_BOXED(1082827409,32,FLEN)
NAN_BOXED(1929379855,32,FLEN)
NAN_BOXED(2121030801,32,FLEN)
NAN_BOXED(1082827409,32,FLEN)
NAN_BOXED(1929379871,32,FLEN)
NAN_BOXED(2121030801,32,FLEN)
NAN_BOXED(1082827409,32,FLEN)
NAN_BOXED(1929379903,32,FLEN)
NAN_BOXED(2121030801,32,FLEN)
NAN_BOXED(1082827409,32,FLEN)
NAN_BOXED(1929379967,32,FLEN)
NAN_BOXED(2121030801,32,FLEN)
NAN_BOXED(1082827409,32,FLEN)
NAN_BOXED(1929380095,32,FLEN)
NAN_BOXED(2121030801,32,FLEN)
NAN_BOXED(1082827409,32,FLEN)
NAN_BOXED(1929380351,32,FLEN)
NAN_BOXED(2121030801,32,FLEN)
NAN_BOXED(1082827409,32,FLEN)
NAN_BOXED(1929380863,32,FLEN)
NAN_BOXED(2121030801,32,FLEN)
NAN_BOXED(1082827409,32,FLEN)
NAN_BOXED(1929381887,32,FLEN)
NAN_BOXED(2121030801,32,FLEN)
NAN_BOXED(1082827409,32,FLEN)
NAN_BOXED(1929383935,32,FLEN)
NAN_BOXED(2121030801,32,FLEN)
NAN_BOXED(1082827409,32,FLEN)
NAN_BOXED(1929388031,32,FLEN)
NAN_BOXED(2121030801,32,FLEN)
NAN_BOXED(1082827409,32,FLEN)
NAN_BOXED(1929396223,32,FLEN)
NAN_BOXED(2121030801,32,FLEN)
NAN_BOXED(1082827409,32,FLEN)
NAN_BOXED(1929412607,32,FLEN)
NAN_BOXED(2121030801,32,FLEN)
NAN_BOXED(1082827409,32,FLEN)
NAN_BOXED(1929445375,32,FLEN)
NAN_BOXED(2121030801,32,FLEN)
NAN_BOXED(1082827409,32,FLEN)
NAN_BOXED(1929510911,32,FLEN)
NAN_BOXED(2121030801,32,FLEN)
NAN_BOXED(1082827409,32,FLEN)
NAN_BOXED(1929641983,32,FLEN)
NAN_BOXED(2121030801,32,FLEN)
NAN_BOXED(1082827409,32,FLEN)
NAN_BOXED(1929904127,32,FLEN)
NAN_BOXED(2121030801,32,FLEN)
NAN_BOXED(1082827409,32,FLEN)
NAN_BOXED(1930428415,32,FLEN)
NAN_BOXED(2121030801,32,FLEN)
NAN_BOXED(1082827409,32,FLEN)
NAN_BOXED(1931476991,32,FLEN)
NAN_BOXED(2121030801,32,FLEN)
NAN_BOXED(1082827409,32,FLEN)
NAN_BOXED(1933574143,32,FLEN)
NAN_BOXED(2121030801,32,FLEN)
NAN_BOXED(1082827409,32,FLEN)
NAN_BOXED(1933574144,32,FLEN)
NAN_BOXED(2121030801,32,FLEN)
NAN_BOXED(1082827409,32,FLEN)
NAN_BOXED(1935671296,32,FLEN)
NAN_BOXED(2121030801,32,FLEN)
NAN_BOXED(1082827409,32,FLEN)
NAN_BOXED(1936719872,32,FLEN)
NAN_BOXED(2121030801,32,FLEN)
NAN_BOXED(1082827409,32,FLEN)
NAN_BOXED(1937244160,32,FLEN)
NAN_BOXED(2121030801,32,FLEN)
NAN_BOXED(1082827409,32,FLEN)
NAN_BOXED(1937506304,32,FLEN)
NAN_BOXED(2121030801,32,FLEN)
NAN_BOXED(1082827409,32,FLEN)
NAN_BOXED(1937637376,32,FLEN)
NAN_BOXED(2121030801,32,FLEN)
NAN_BOXED(1082827409,32,FLEN)
NAN_BOXED(1937702912,32,FLEN)
NAN_BOXED(2121030801,32,FLEN)
NAN_BOXED(1082827409,32,FLEN)
NAN_BOXED(1937735680,32,FLEN)
NAN_BOXED(2121030801,32,FLEN)
NAN_BOXED(1082827409,32,FLEN)
NAN_BOXED(1937752064,32,FLEN)
NAN_BOXED(2121030801,32,FLEN)
NAN_BOXED(1082827409,32,FLEN)
NAN_BOXED(1937760256,32,FLEN)
NAN_BOXED(2121030801,32,FLEN)
NAN_BOXED(1082827409,32,FLEN)
NAN_BOXED(1937764352,32,FLEN)
NAN_BOXED(2121030801,32,FLEN)
NAN_BOXED(1082827409,32,FLEN)
NAN_BOXED(1937766400,32,FLEN)
NAN_BOXED(2121030801,32,FLEN)
NAN_BOXED(1082827409,32,FLEN)
NAN_BOXED(1937767424,32,FLEN)
NAN_BOXED(2121030801,32,FLEN)
NAN_BOXED(1082827409,32,FLEN)
NAN_BOXED(1937767936,32,FLEN)
NAN_BOXED(2121030801,32,FLEN)
NAN_BOXED(1082827409,32,FLEN)
NAN_BOXED(1937768192,32,FLEN)
NAN_BOXED(2121030801,32,FLEN)
NAN_BOXED(1082827409,32,FLEN)
NAN_BOXED(1937768320,32,FLEN)
NAN_BOXED(2121030801,32,FLEN)
NAN_BOXED(1082827409,32,FLEN)
NAN_BOXED(1937768384,32,FLEN)
NAN_BOXED(2121030801,32,FLEN)
NAN_BOXED(1082827409,32,FLEN)
NAN_BOXED(1937768416,32,FLEN)
NAN_BOXED(2121030801,32,FLEN)
NAN_BOXED(1082827409,32,FLEN)
NAN_BOXED(1937768432,32,FLEN)
NAN_BOXED(2121030801,32,FLEN)
NAN_BOXED(1082827409,32,FLEN)
NAN_BOXED(1937768440,32,FLEN)
NAN_BOXED(2121030801,32,FLEN)
NAN_BOXED(1082827409,32,FLEN)
NAN_BOXED(1937768444,32,FLEN)
NAN_BOXED(2121030801,32,FLEN)
NAN_BOXED(1082827409,32,FLEN)
NAN_BOXED(1937768446,32,FLEN)
NAN_BOXED(2121030801,32,FLEN)
NAN_BOXED(1082827409,32,FLEN)
NAN_BOXED(1937768447,32,FLEN)
NAN_BOXED(2121030801,32,FLEN)
NAN_BOXED(1082827409,32,FLEN)
NAN_BOXED(2130706433,32,FLEN)
NAN_BOXED(2121030801,32,FLEN)
NAN_BOXED(1082827409,32,FLEN)
NAN_BOXED(2130706435,32,FLEN)
NAN_BOXED(2121030801,32,FLEN)
NAN_BOXED(1082827409,32,FLEN)
NAN_BOXED(2130706439,32,FLEN)
NAN_BOXED(2121030801,32,FLEN)
NAN_BOXED(1082827409,32,FLEN)
NAN_BOXED(2132384153,32,FLEN)
NAN_BOXED(2121030801,32,FLEN)
NAN_BOXED(1082827409,32,FLEN)
NAN_BOXED(2133103177,32,FLEN)
NAN_BOXED(2121030801,32,FLEN)
NAN_BOXED(1082827409,32,FLEN)
NAN_BOXED(2134061875,32,FLEN)
NAN_BOXED(2121030801,32,FLEN)
NAN_BOXED(1082827409,32,FLEN)
NAN_BOXED(2134301549,32,FLEN)
NAN_BOXED(2121030801,32,FLEN)
NAN_BOXED(1082827409,32,FLEN)
NAN_BOXED(2134621115,32,FLEN)
NAN_BOXED(2121030801,32,FLEN)
NAN_BOXED(1082827409,32,FLEN)
NAN_BOXED(2135180356,32,FLEN)
NAN_BOXED(2121030801,32,FLEN)
NAN_BOXED(1082827409,32,FLEN)
NAN_BOXED(2135739596,32,FLEN)
NAN_BOXED(2121030801,32,FLEN)
NAN_BOXED(1082827409,32,FLEN)
NAN_BOXED(2136698294,32,FLEN)
NAN_BOXED(2121030801,32,FLEN)
NAN_BOXED(1082827409,32,FLEN)
NAN_BOXED(2137417318,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
