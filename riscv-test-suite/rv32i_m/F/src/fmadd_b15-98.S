
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:17:59 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_12416:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6c5c91 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0aa291 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6c5c91; op2val:0x408aa291;
op3val:0x7f6db6db; valaddr_reg:x3; val_offset:37248*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37248*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12417:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6c5c91 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0aa291 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6c5c91; op2val:0x408aa291;
op3val:0x7f7ffff8; valaddr_reg:x3; val_offset:37251*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37251*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12418:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6c5c91 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0aa291 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6c5c91; op2val:0x408aa291;
op3val:0x7f7ffffc; valaddr_reg:x3; val_offset:37254*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37254*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12419:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6c5c91 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0aa291 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6c5c91; op2val:0x408aa291;
op3val:0x7f7ffffe; valaddr_reg:x3; val_offset:37257*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37257*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12420:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6e4efc and fs2 == 1 and fe2 == 0x01 and fm2 == 0x09809e and fs3 == 1 and fe3 == 0x45 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6e4efc; op2val:0x8089809e;
op3val:0xa2800000; valaddr_reg:x3; val_offset:37260*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37260*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12421:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6e4efc and fs2 == 1 and fe2 == 0x01 and fm2 == 0x09809e and fs3 == 1 and fe3 == 0x45 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6e4efc; op2val:0x8089809e;
op3val:0xa2800001; valaddr_reg:x3; val_offset:37263*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37263*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12422:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6e4efc and fs2 == 1 and fe2 == 0x01 and fm2 == 0x09809e and fs3 == 1 and fe3 == 0x45 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6e4efc; op2val:0x8089809e;
op3val:0xa2800003; valaddr_reg:x3; val_offset:37266*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37266*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12423:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6e4efc and fs2 == 1 and fe2 == 0x01 and fm2 == 0x09809e and fs3 == 1 and fe3 == 0x45 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6e4efc; op2val:0x8089809e;
op3val:0xa2800007; valaddr_reg:x3; val_offset:37269*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37269*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12424:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6e4efc and fs2 == 1 and fe2 == 0x01 and fm2 == 0x09809e and fs3 == 1 and fe3 == 0x45 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6e4efc; op2val:0x8089809e;
op3val:0xa280000f; valaddr_reg:x3; val_offset:37272*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37272*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12425:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6e4efc and fs2 == 1 and fe2 == 0x01 and fm2 == 0x09809e and fs3 == 1 and fe3 == 0x45 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6e4efc; op2val:0x8089809e;
op3val:0xa280001f; valaddr_reg:x3; val_offset:37275*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37275*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12426:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6e4efc and fs2 == 1 and fe2 == 0x01 and fm2 == 0x09809e and fs3 == 1 and fe3 == 0x45 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6e4efc; op2val:0x8089809e;
op3val:0xa280003f; valaddr_reg:x3; val_offset:37278*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37278*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12427:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6e4efc and fs2 == 1 and fe2 == 0x01 and fm2 == 0x09809e and fs3 == 1 and fe3 == 0x45 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6e4efc; op2val:0x8089809e;
op3val:0xa280007f; valaddr_reg:x3; val_offset:37281*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37281*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12428:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6e4efc and fs2 == 1 and fe2 == 0x01 and fm2 == 0x09809e and fs3 == 1 and fe3 == 0x45 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6e4efc; op2val:0x8089809e;
op3val:0xa28000ff; valaddr_reg:x3; val_offset:37284*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37284*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12429:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6e4efc and fs2 == 1 and fe2 == 0x01 and fm2 == 0x09809e and fs3 == 1 and fe3 == 0x45 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6e4efc; op2val:0x8089809e;
op3val:0xa28001ff; valaddr_reg:x3; val_offset:37287*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37287*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12430:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6e4efc and fs2 == 1 and fe2 == 0x01 and fm2 == 0x09809e and fs3 == 1 and fe3 == 0x45 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6e4efc; op2val:0x8089809e;
op3val:0xa28003ff; valaddr_reg:x3; val_offset:37290*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37290*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12431:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6e4efc and fs2 == 1 and fe2 == 0x01 and fm2 == 0x09809e and fs3 == 1 and fe3 == 0x45 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6e4efc; op2val:0x8089809e;
op3val:0xa28007ff; valaddr_reg:x3; val_offset:37293*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37293*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12432:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6e4efc and fs2 == 1 and fe2 == 0x01 and fm2 == 0x09809e and fs3 == 1 and fe3 == 0x45 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6e4efc; op2val:0x8089809e;
op3val:0xa2800fff; valaddr_reg:x3; val_offset:37296*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37296*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12433:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6e4efc and fs2 == 1 and fe2 == 0x01 and fm2 == 0x09809e and fs3 == 1 and fe3 == 0x45 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6e4efc; op2val:0x8089809e;
op3val:0xa2801fff; valaddr_reg:x3; val_offset:37299*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37299*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12434:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6e4efc and fs2 == 1 and fe2 == 0x01 and fm2 == 0x09809e and fs3 == 1 and fe3 == 0x45 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6e4efc; op2val:0x8089809e;
op3val:0xa2803fff; valaddr_reg:x3; val_offset:37302*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37302*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12435:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6e4efc and fs2 == 1 and fe2 == 0x01 and fm2 == 0x09809e and fs3 == 1 and fe3 == 0x45 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6e4efc; op2val:0x8089809e;
op3val:0xa2807fff; valaddr_reg:x3; val_offset:37305*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37305*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12436:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6e4efc and fs2 == 1 and fe2 == 0x01 and fm2 == 0x09809e and fs3 == 1 and fe3 == 0x45 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6e4efc; op2val:0x8089809e;
op3val:0xa280ffff; valaddr_reg:x3; val_offset:37308*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37308*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12437:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6e4efc and fs2 == 1 and fe2 == 0x01 and fm2 == 0x09809e and fs3 == 1 and fe3 == 0x45 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6e4efc; op2val:0x8089809e;
op3val:0xa281ffff; valaddr_reg:x3; val_offset:37311*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37311*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12438:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6e4efc and fs2 == 1 and fe2 == 0x01 and fm2 == 0x09809e and fs3 == 1 and fe3 == 0x45 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6e4efc; op2val:0x8089809e;
op3val:0xa283ffff; valaddr_reg:x3; val_offset:37314*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37314*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12439:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6e4efc and fs2 == 1 and fe2 == 0x01 and fm2 == 0x09809e and fs3 == 1 and fe3 == 0x45 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6e4efc; op2val:0x8089809e;
op3val:0xa287ffff; valaddr_reg:x3; val_offset:37317*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37317*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12440:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6e4efc and fs2 == 1 and fe2 == 0x01 and fm2 == 0x09809e and fs3 == 1 and fe3 == 0x45 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6e4efc; op2val:0x8089809e;
op3val:0xa28fffff; valaddr_reg:x3; val_offset:37320*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37320*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12441:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6e4efc and fs2 == 1 and fe2 == 0x01 and fm2 == 0x09809e and fs3 == 1 and fe3 == 0x45 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6e4efc; op2val:0x8089809e;
op3val:0xa29fffff; valaddr_reg:x3; val_offset:37323*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37323*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12442:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6e4efc and fs2 == 1 and fe2 == 0x01 and fm2 == 0x09809e and fs3 == 1 and fe3 == 0x45 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6e4efc; op2val:0x8089809e;
op3val:0xa2bfffff; valaddr_reg:x3; val_offset:37326*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37326*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12443:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6e4efc and fs2 == 1 and fe2 == 0x01 and fm2 == 0x09809e and fs3 == 1 and fe3 == 0x45 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6e4efc; op2val:0x8089809e;
op3val:0xa2c00000; valaddr_reg:x3; val_offset:37329*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37329*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12444:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6e4efc and fs2 == 1 and fe2 == 0x01 and fm2 == 0x09809e and fs3 == 1 and fe3 == 0x45 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6e4efc; op2val:0x8089809e;
op3val:0xa2e00000; valaddr_reg:x3; val_offset:37332*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37332*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12445:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6e4efc and fs2 == 1 and fe2 == 0x01 and fm2 == 0x09809e and fs3 == 1 and fe3 == 0x45 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6e4efc; op2val:0x8089809e;
op3val:0xa2f00000; valaddr_reg:x3; val_offset:37335*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37335*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12446:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6e4efc and fs2 == 1 and fe2 == 0x01 and fm2 == 0x09809e and fs3 == 1 and fe3 == 0x45 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6e4efc; op2val:0x8089809e;
op3val:0xa2f80000; valaddr_reg:x3; val_offset:37338*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37338*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12447:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6e4efc and fs2 == 1 and fe2 == 0x01 and fm2 == 0x09809e and fs3 == 1 and fe3 == 0x45 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6e4efc; op2val:0x8089809e;
op3val:0xa2fc0000; valaddr_reg:x3; val_offset:37341*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37341*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12448:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6e4efc and fs2 == 1 and fe2 == 0x01 and fm2 == 0x09809e and fs3 == 1 and fe3 == 0x45 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6e4efc; op2val:0x8089809e;
op3val:0xa2fe0000; valaddr_reg:x3; val_offset:37344*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37344*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12449:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6e4efc and fs2 == 1 and fe2 == 0x01 and fm2 == 0x09809e and fs3 == 1 and fe3 == 0x45 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6e4efc; op2val:0x8089809e;
op3val:0xa2ff0000; valaddr_reg:x3; val_offset:37347*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37347*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12450:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6e4efc and fs2 == 1 and fe2 == 0x01 and fm2 == 0x09809e and fs3 == 1 and fe3 == 0x45 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6e4efc; op2val:0x8089809e;
op3val:0xa2ff8000; valaddr_reg:x3; val_offset:37350*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37350*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12451:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6e4efc and fs2 == 1 and fe2 == 0x01 and fm2 == 0x09809e and fs3 == 1 and fe3 == 0x45 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6e4efc; op2val:0x8089809e;
op3val:0xa2ffc000; valaddr_reg:x3; val_offset:37353*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37353*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12452:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6e4efc and fs2 == 1 and fe2 == 0x01 and fm2 == 0x09809e and fs3 == 1 and fe3 == 0x45 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6e4efc; op2val:0x8089809e;
op3val:0xa2ffe000; valaddr_reg:x3; val_offset:37356*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37356*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12453:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6e4efc and fs2 == 1 and fe2 == 0x01 and fm2 == 0x09809e and fs3 == 1 and fe3 == 0x45 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6e4efc; op2val:0x8089809e;
op3val:0xa2fff000; valaddr_reg:x3; val_offset:37359*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37359*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12454:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6e4efc and fs2 == 1 and fe2 == 0x01 and fm2 == 0x09809e and fs3 == 1 and fe3 == 0x45 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6e4efc; op2val:0x8089809e;
op3val:0xa2fff800; valaddr_reg:x3; val_offset:37362*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37362*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12455:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6e4efc and fs2 == 1 and fe2 == 0x01 and fm2 == 0x09809e and fs3 == 1 and fe3 == 0x45 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6e4efc; op2val:0x8089809e;
op3val:0xa2fffc00; valaddr_reg:x3; val_offset:37365*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37365*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12456:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6e4efc and fs2 == 1 and fe2 == 0x01 and fm2 == 0x09809e and fs3 == 1 and fe3 == 0x45 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6e4efc; op2val:0x8089809e;
op3val:0xa2fffe00; valaddr_reg:x3; val_offset:37368*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37368*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12457:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6e4efc and fs2 == 1 and fe2 == 0x01 and fm2 == 0x09809e and fs3 == 1 and fe3 == 0x45 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6e4efc; op2val:0x8089809e;
op3val:0xa2ffff00; valaddr_reg:x3; val_offset:37371*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37371*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12458:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6e4efc and fs2 == 1 and fe2 == 0x01 and fm2 == 0x09809e and fs3 == 1 and fe3 == 0x45 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6e4efc; op2val:0x8089809e;
op3val:0xa2ffff80; valaddr_reg:x3; val_offset:37374*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37374*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12459:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6e4efc and fs2 == 1 and fe2 == 0x01 and fm2 == 0x09809e and fs3 == 1 and fe3 == 0x45 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6e4efc; op2val:0x8089809e;
op3val:0xa2ffffc0; valaddr_reg:x3; val_offset:37377*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37377*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12460:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6e4efc and fs2 == 1 and fe2 == 0x01 and fm2 == 0x09809e and fs3 == 1 and fe3 == 0x45 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6e4efc; op2val:0x8089809e;
op3val:0xa2ffffe0; valaddr_reg:x3; val_offset:37380*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37380*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12461:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6e4efc and fs2 == 1 and fe2 == 0x01 and fm2 == 0x09809e and fs3 == 1 and fe3 == 0x45 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6e4efc; op2val:0x8089809e;
op3val:0xa2fffff0; valaddr_reg:x3; val_offset:37383*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37383*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12462:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6e4efc and fs2 == 1 and fe2 == 0x01 and fm2 == 0x09809e and fs3 == 1 and fe3 == 0x45 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6e4efc; op2val:0x8089809e;
op3val:0xa2fffff8; valaddr_reg:x3; val_offset:37386*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37386*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12463:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6e4efc and fs2 == 1 and fe2 == 0x01 and fm2 == 0x09809e and fs3 == 1 and fe3 == 0x45 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6e4efc; op2val:0x8089809e;
op3val:0xa2fffffc; valaddr_reg:x3; val_offset:37389*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37389*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12464:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6e4efc and fs2 == 1 and fe2 == 0x01 and fm2 == 0x09809e and fs3 == 1 and fe3 == 0x45 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6e4efc; op2val:0x8089809e;
op3val:0xa2fffffe; valaddr_reg:x3; val_offset:37392*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37392*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12465:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6e4efc and fs2 == 1 and fe2 == 0x01 and fm2 == 0x09809e and fs3 == 1 and fe3 == 0x45 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6e4efc; op2val:0x8089809e;
op3val:0xa2ffffff; valaddr_reg:x3; val_offset:37395*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37395*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12466:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6e4efc and fs2 == 1 and fe2 == 0x01 and fm2 == 0x09809e and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6e4efc; op2val:0x8089809e;
op3val:0xbf800001; valaddr_reg:x3; val_offset:37398*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37398*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12467:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6e4efc and fs2 == 1 and fe2 == 0x01 and fm2 == 0x09809e and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6e4efc; op2val:0x8089809e;
op3val:0xbf800003; valaddr_reg:x3; val_offset:37401*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37401*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12468:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6e4efc and fs2 == 1 and fe2 == 0x01 and fm2 == 0x09809e and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6e4efc; op2val:0x8089809e;
op3val:0xbf800007; valaddr_reg:x3; val_offset:37404*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37404*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12469:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6e4efc and fs2 == 1 and fe2 == 0x01 and fm2 == 0x09809e and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6e4efc; op2val:0x8089809e;
op3val:0xbf999999; valaddr_reg:x3; val_offset:37407*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37407*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12470:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6e4efc and fs2 == 1 and fe2 == 0x01 and fm2 == 0x09809e and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6e4efc; op2val:0x8089809e;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:37410*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37410*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12471:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6e4efc and fs2 == 1 and fe2 == 0x01 and fm2 == 0x09809e and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6e4efc; op2val:0x8089809e;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:37413*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37413*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12472:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6e4efc and fs2 == 1 and fe2 == 0x01 and fm2 == 0x09809e and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6e4efc; op2val:0x8089809e;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:37416*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37416*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12473:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6e4efc and fs2 == 1 and fe2 == 0x01 and fm2 == 0x09809e and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6e4efc; op2val:0x8089809e;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:37419*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37419*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12474:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6e4efc and fs2 == 1 and fe2 == 0x01 and fm2 == 0x09809e and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6e4efc; op2val:0x8089809e;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:37422*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37422*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12475:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6e4efc and fs2 == 1 and fe2 == 0x01 and fm2 == 0x09809e and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6e4efc; op2val:0x8089809e;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:37425*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37425*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12476:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6e4efc and fs2 == 1 and fe2 == 0x01 and fm2 == 0x09809e and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6e4efc; op2val:0x8089809e;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:37428*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37428*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12477:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6e4efc and fs2 == 1 and fe2 == 0x01 and fm2 == 0x09809e and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6e4efc; op2val:0x8089809e;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:37431*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37431*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12478:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6e4efc and fs2 == 1 and fe2 == 0x01 and fm2 == 0x09809e and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6e4efc; op2val:0x8089809e;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:37434*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37434*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12479:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6e4efc and fs2 == 1 and fe2 == 0x01 and fm2 == 0x09809e and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6e4efc; op2val:0x8089809e;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:37437*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37437*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12480:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6e4efc and fs2 == 1 and fe2 == 0x01 and fm2 == 0x09809e and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6e4efc; op2val:0x8089809e;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:37440*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37440*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12481:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6e4efc and fs2 == 1 and fe2 == 0x01 and fm2 == 0x09809e and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6e4efc; op2val:0x8089809e;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:37443*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37443*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12482:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x71b322 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0792ba and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e71b322; op2val:0x808792ba;
op3val:0xbf800001; valaddr_reg:x3; val_offset:37446*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37446*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12483:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x71b322 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0792ba and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e71b322; op2val:0x808792ba;
op3val:0xbf800003; valaddr_reg:x3; val_offset:37449*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37449*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12484:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x71b322 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0792ba and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e71b322; op2val:0x808792ba;
op3val:0xbf800007; valaddr_reg:x3; val_offset:37452*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37452*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12485:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x71b322 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0792ba and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e71b322; op2val:0x808792ba;
op3val:0xbf999999; valaddr_reg:x3; val_offset:37455*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37455*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12486:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x71b322 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0792ba and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e71b322; op2val:0x808792ba;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:37458*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37458*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12487:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x71b322 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0792ba and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e71b322; op2val:0x808792ba;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:37461*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37461*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12488:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x71b322 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0792ba and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e71b322; op2val:0x808792ba;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:37464*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37464*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12489:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x71b322 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0792ba and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e71b322; op2val:0x808792ba;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:37467*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37467*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12490:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x71b322 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0792ba and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e71b322; op2val:0x808792ba;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:37470*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37470*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12491:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x71b322 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0792ba and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e71b322; op2val:0x808792ba;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:37473*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37473*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12492:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x71b322 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0792ba and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e71b322; op2val:0x808792ba;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:37476*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37476*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12493:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x71b322 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0792ba and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e71b322; op2val:0x808792ba;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:37479*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37479*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12494:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x71b322 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0792ba and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e71b322; op2val:0x808792ba;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:37482*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37482*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12495:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x71b322 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0792ba and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e71b322; op2val:0x808792ba;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:37485*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37485*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12496:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x71b322 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0792ba and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e71b322; op2val:0x808792ba;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:37488*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37488*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12497:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x71b322 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0792ba and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e71b322; op2val:0x808792ba;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:37491*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37491*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12498:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x71b322 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0792ba and fs3 == 1 and fe3 == 0x8a and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e71b322; op2val:0x808792ba;
op3val:0xc5000000; valaddr_reg:x3; val_offset:37494*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37494*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12499:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x71b322 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0792ba and fs3 == 1 and fe3 == 0x8a and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e71b322; op2val:0x808792ba;
op3val:0xc5000001; valaddr_reg:x3; val_offset:37497*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37497*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12500:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x71b322 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0792ba and fs3 == 1 and fe3 == 0x8a and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e71b322; op2val:0x808792ba;
op3val:0xc5000003; valaddr_reg:x3; val_offset:37500*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37500*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12501:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x71b322 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0792ba and fs3 == 1 and fe3 == 0x8a and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e71b322; op2val:0x808792ba;
op3val:0xc5000007; valaddr_reg:x3; val_offset:37503*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37503*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12502:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x71b322 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0792ba and fs3 == 1 and fe3 == 0x8a and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e71b322; op2val:0x808792ba;
op3val:0xc500000f; valaddr_reg:x3; val_offset:37506*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37506*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12503:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x71b322 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0792ba and fs3 == 1 and fe3 == 0x8a and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e71b322; op2val:0x808792ba;
op3val:0xc500001f; valaddr_reg:x3; val_offset:37509*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37509*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12504:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x71b322 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0792ba and fs3 == 1 and fe3 == 0x8a and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e71b322; op2val:0x808792ba;
op3val:0xc500003f; valaddr_reg:x3; val_offset:37512*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37512*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12505:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x71b322 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0792ba and fs3 == 1 and fe3 == 0x8a and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e71b322; op2val:0x808792ba;
op3val:0xc500007f; valaddr_reg:x3; val_offset:37515*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37515*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12506:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x71b322 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0792ba and fs3 == 1 and fe3 == 0x8a and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e71b322; op2val:0x808792ba;
op3val:0xc50000ff; valaddr_reg:x3; val_offset:37518*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37518*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12507:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x71b322 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0792ba and fs3 == 1 and fe3 == 0x8a and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e71b322; op2val:0x808792ba;
op3val:0xc50001ff; valaddr_reg:x3; val_offset:37521*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37521*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12508:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x71b322 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0792ba and fs3 == 1 and fe3 == 0x8a and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e71b322; op2val:0x808792ba;
op3val:0xc50003ff; valaddr_reg:x3; val_offset:37524*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37524*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12509:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x71b322 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0792ba and fs3 == 1 and fe3 == 0x8a and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e71b322; op2val:0x808792ba;
op3val:0xc50007ff; valaddr_reg:x3; val_offset:37527*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37527*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12510:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x71b322 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0792ba and fs3 == 1 and fe3 == 0x8a and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e71b322; op2val:0x808792ba;
op3val:0xc5000fff; valaddr_reg:x3; val_offset:37530*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37530*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12511:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x71b322 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0792ba and fs3 == 1 and fe3 == 0x8a and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e71b322; op2val:0x808792ba;
op3val:0xc5001fff; valaddr_reg:x3; val_offset:37533*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37533*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12512:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x71b322 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0792ba and fs3 == 1 and fe3 == 0x8a and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e71b322; op2val:0x808792ba;
op3val:0xc5003fff; valaddr_reg:x3; val_offset:37536*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37536*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12513:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x71b322 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0792ba and fs3 == 1 and fe3 == 0x8a and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e71b322; op2val:0x808792ba;
op3val:0xc5007fff; valaddr_reg:x3; val_offset:37539*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37539*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12514:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x71b322 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0792ba and fs3 == 1 and fe3 == 0x8a and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e71b322; op2val:0x808792ba;
op3val:0xc500ffff; valaddr_reg:x3; val_offset:37542*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37542*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12515:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x71b322 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0792ba and fs3 == 1 and fe3 == 0x8a and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e71b322; op2val:0x808792ba;
op3val:0xc501ffff; valaddr_reg:x3; val_offset:37545*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37545*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12516:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x71b322 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0792ba and fs3 == 1 and fe3 == 0x8a and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e71b322; op2val:0x808792ba;
op3val:0xc503ffff; valaddr_reg:x3; val_offset:37548*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37548*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12517:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x71b322 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0792ba and fs3 == 1 and fe3 == 0x8a and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e71b322; op2val:0x808792ba;
op3val:0xc507ffff; valaddr_reg:x3; val_offset:37551*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37551*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12518:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x71b322 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0792ba and fs3 == 1 and fe3 == 0x8a and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e71b322; op2val:0x808792ba;
op3val:0xc50fffff; valaddr_reg:x3; val_offset:37554*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37554*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12519:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x71b322 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0792ba and fs3 == 1 and fe3 == 0x8a and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e71b322; op2val:0x808792ba;
op3val:0xc51fffff; valaddr_reg:x3; val_offset:37557*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37557*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12520:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x71b322 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0792ba and fs3 == 1 and fe3 == 0x8a and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e71b322; op2val:0x808792ba;
op3val:0xc53fffff; valaddr_reg:x3; val_offset:37560*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37560*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12521:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x71b322 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0792ba and fs3 == 1 and fe3 == 0x8a and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e71b322; op2val:0x808792ba;
op3val:0xc5400000; valaddr_reg:x3; val_offset:37563*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37563*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12522:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x71b322 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0792ba and fs3 == 1 and fe3 == 0x8a and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e71b322; op2val:0x808792ba;
op3val:0xc5600000; valaddr_reg:x3; val_offset:37566*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37566*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12523:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x71b322 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0792ba and fs3 == 1 and fe3 == 0x8a and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e71b322; op2val:0x808792ba;
op3val:0xc5700000; valaddr_reg:x3; val_offset:37569*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37569*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12524:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x71b322 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0792ba and fs3 == 1 and fe3 == 0x8a and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e71b322; op2val:0x808792ba;
op3val:0xc5780000; valaddr_reg:x3; val_offset:37572*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37572*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12525:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x71b322 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0792ba and fs3 == 1 and fe3 == 0x8a and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e71b322; op2val:0x808792ba;
op3val:0xc57c0000; valaddr_reg:x3; val_offset:37575*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37575*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12526:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x71b322 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0792ba and fs3 == 1 and fe3 == 0x8a and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e71b322; op2val:0x808792ba;
op3val:0xc57e0000; valaddr_reg:x3; val_offset:37578*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37578*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12527:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x71b322 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0792ba and fs3 == 1 and fe3 == 0x8a and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e71b322; op2val:0x808792ba;
op3val:0xc57f0000; valaddr_reg:x3; val_offset:37581*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37581*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12528:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x71b322 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0792ba and fs3 == 1 and fe3 == 0x8a and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e71b322; op2val:0x808792ba;
op3val:0xc57f8000; valaddr_reg:x3; val_offset:37584*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37584*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12529:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x71b322 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0792ba and fs3 == 1 and fe3 == 0x8a and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e71b322; op2val:0x808792ba;
op3val:0xc57fc000; valaddr_reg:x3; val_offset:37587*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37587*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12530:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x71b322 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0792ba and fs3 == 1 and fe3 == 0x8a and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e71b322; op2val:0x808792ba;
op3val:0xc57fe000; valaddr_reg:x3; val_offset:37590*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37590*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12531:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x71b322 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0792ba and fs3 == 1 and fe3 == 0x8a and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e71b322; op2val:0x808792ba;
op3val:0xc57ff000; valaddr_reg:x3; val_offset:37593*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37593*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12532:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x71b322 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0792ba and fs3 == 1 and fe3 == 0x8a and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e71b322; op2val:0x808792ba;
op3val:0xc57ff800; valaddr_reg:x3; val_offset:37596*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37596*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12533:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x71b322 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0792ba and fs3 == 1 and fe3 == 0x8a and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e71b322; op2val:0x808792ba;
op3val:0xc57ffc00; valaddr_reg:x3; val_offset:37599*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37599*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12534:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x71b322 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0792ba and fs3 == 1 and fe3 == 0x8a and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e71b322; op2val:0x808792ba;
op3val:0xc57ffe00; valaddr_reg:x3; val_offset:37602*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37602*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12535:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x71b322 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0792ba and fs3 == 1 and fe3 == 0x8a and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e71b322; op2val:0x808792ba;
op3val:0xc57fff00; valaddr_reg:x3; val_offset:37605*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37605*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12536:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x71b322 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0792ba and fs3 == 1 and fe3 == 0x8a and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e71b322; op2val:0x808792ba;
op3val:0xc57fff80; valaddr_reg:x3; val_offset:37608*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37608*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12537:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x71b322 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0792ba and fs3 == 1 and fe3 == 0x8a and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e71b322; op2val:0x808792ba;
op3val:0xc57fffc0; valaddr_reg:x3; val_offset:37611*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37611*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12538:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x71b322 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0792ba and fs3 == 1 and fe3 == 0x8a and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e71b322; op2val:0x808792ba;
op3val:0xc57fffe0; valaddr_reg:x3; val_offset:37614*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37614*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12539:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x71b322 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0792ba and fs3 == 1 and fe3 == 0x8a and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e71b322; op2val:0x808792ba;
op3val:0xc57ffff0; valaddr_reg:x3; val_offset:37617*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37617*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12540:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x71b322 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0792ba and fs3 == 1 and fe3 == 0x8a and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e71b322; op2val:0x808792ba;
op3val:0xc57ffff8; valaddr_reg:x3; val_offset:37620*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37620*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12541:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x71b322 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0792ba and fs3 == 1 and fe3 == 0x8a and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e71b322; op2val:0x808792ba;
op3val:0xc57ffffc; valaddr_reg:x3; val_offset:37623*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37623*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12542:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x71b322 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0792ba and fs3 == 1 and fe3 == 0x8a and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e71b322; op2val:0x808792ba;
op3val:0xc57ffffe; valaddr_reg:x3; val_offset:37626*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37626*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12543:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x71b322 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0792ba and fs3 == 1 and fe3 == 0x8a and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e71b322; op2val:0x808792ba;
op3val:0xc57fffff; valaddr_reg:x3; val_offset:37629*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37629*0 + 3*97*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2121030801,32,FLEN)
NAN_BOXED(1082827409,32,FLEN)
NAN_BOXED(2137896667,32,FLEN)
NAN_BOXED(2121030801,32,FLEN)
NAN_BOXED(1082827409,32,FLEN)
NAN_BOXED(2139095032,32,FLEN)
NAN_BOXED(2121030801,32,FLEN)
NAN_BOXED(1082827409,32,FLEN)
NAN_BOXED(2139095036,32,FLEN)
NAN_BOXED(2121030801,32,FLEN)
NAN_BOXED(1082827409,32,FLEN)
NAN_BOXED(2139095038,32,FLEN)
NAN_BOXED(2121158396,32,FLEN)
NAN_BOXED(2156495006,32,FLEN)
NAN_BOXED(2726297600,32,FLEN)
NAN_BOXED(2121158396,32,FLEN)
NAN_BOXED(2156495006,32,FLEN)
NAN_BOXED(2726297601,32,FLEN)
NAN_BOXED(2121158396,32,FLEN)
NAN_BOXED(2156495006,32,FLEN)
NAN_BOXED(2726297603,32,FLEN)
NAN_BOXED(2121158396,32,FLEN)
NAN_BOXED(2156495006,32,FLEN)
NAN_BOXED(2726297607,32,FLEN)
NAN_BOXED(2121158396,32,FLEN)
NAN_BOXED(2156495006,32,FLEN)
NAN_BOXED(2726297615,32,FLEN)
NAN_BOXED(2121158396,32,FLEN)
NAN_BOXED(2156495006,32,FLEN)
NAN_BOXED(2726297631,32,FLEN)
NAN_BOXED(2121158396,32,FLEN)
NAN_BOXED(2156495006,32,FLEN)
NAN_BOXED(2726297663,32,FLEN)
NAN_BOXED(2121158396,32,FLEN)
NAN_BOXED(2156495006,32,FLEN)
NAN_BOXED(2726297727,32,FLEN)
NAN_BOXED(2121158396,32,FLEN)
NAN_BOXED(2156495006,32,FLEN)
NAN_BOXED(2726297855,32,FLEN)
NAN_BOXED(2121158396,32,FLEN)
NAN_BOXED(2156495006,32,FLEN)
NAN_BOXED(2726298111,32,FLEN)
NAN_BOXED(2121158396,32,FLEN)
NAN_BOXED(2156495006,32,FLEN)
NAN_BOXED(2726298623,32,FLEN)
NAN_BOXED(2121158396,32,FLEN)
NAN_BOXED(2156495006,32,FLEN)
NAN_BOXED(2726299647,32,FLEN)
NAN_BOXED(2121158396,32,FLEN)
NAN_BOXED(2156495006,32,FLEN)
NAN_BOXED(2726301695,32,FLEN)
NAN_BOXED(2121158396,32,FLEN)
NAN_BOXED(2156495006,32,FLEN)
NAN_BOXED(2726305791,32,FLEN)
NAN_BOXED(2121158396,32,FLEN)
NAN_BOXED(2156495006,32,FLEN)
NAN_BOXED(2726313983,32,FLEN)
NAN_BOXED(2121158396,32,FLEN)
NAN_BOXED(2156495006,32,FLEN)
NAN_BOXED(2726330367,32,FLEN)
NAN_BOXED(2121158396,32,FLEN)
NAN_BOXED(2156495006,32,FLEN)
NAN_BOXED(2726363135,32,FLEN)
NAN_BOXED(2121158396,32,FLEN)
NAN_BOXED(2156495006,32,FLEN)
NAN_BOXED(2726428671,32,FLEN)
NAN_BOXED(2121158396,32,FLEN)
NAN_BOXED(2156495006,32,FLEN)
NAN_BOXED(2726559743,32,FLEN)
NAN_BOXED(2121158396,32,FLEN)
NAN_BOXED(2156495006,32,FLEN)
NAN_BOXED(2726821887,32,FLEN)
NAN_BOXED(2121158396,32,FLEN)
NAN_BOXED(2156495006,32,FLEN)
NAN_BOXED(2727346175,32,FLEN)
NAN_BOXED(2121158396,32,FLEN)
NAN_BOXED(2156495006,32,FLEN)
NAN_BOXED(2728394751,32,FLEN)
NAN_BOXED(2121158396,32,FLEN)
NAN_BOXED(2156495006,32,FLEN)
NAN_BOXED(2730491903,32,FLEN)
NAN_BOXED(2121158396,32,FLEN)
NAN_BOXED(2156495006,32,FLEN)
NAN_BOXED(2730491904,32,FLEN)
NAN_BOXED(2121158396,32,FLEN)
NAN_BOXED(2156495006,32,FLEN)
NAN_BOXED(2732589056,32,FLEN)
NAN_BOXED(2121158396,32,FLEN)
NAN_BOXED(2156495006,32,FLEN)
NAN_BOXED(2733637632,32,FLEN)
NAN_BOXED(2121158396,32,FLEN)
NAN_BOXED(2156495006,32,FLEN)
NAN_BOXED(2734161920,32,FLEN)
NAN_BOXED(2121158396,32,FLEN)
NAN_BOXED(2156495006,32,FLEN)
NAN_BOXED(2734424064,32,FLEN)
NAN_BOXED(2121158396,32,FLEN)
NAN_BOXED(2156495006,32,FLEN)
NAN_BOXED(2734555136,32,FLEN)
NAN_BOXED(2121158396,32,FLEN)
NAN_BOXED(2156495006,32,FLEN)
NAN_BOXED(2734620672,32,FLEN)
NAN_BOXED(2121158396,32,FLEN)
NAN_BOXED(2156495006,32,FLEN)
NAN_BOXED(2734653440,32,FLEN)
NAN_BOXED(2121158396,32,FLEN)
NAN_BOXED(2156495006,32,FLEN)
NAN_BOXED(2734669824,32,FLEN)
NAN_BOXED(2121158396,32,FLEN)
NAN_BOXED(2156495006,32,FLEN)
NAN_BOXED(2734678016,32,FLEN)
NAN_BOXED(2121158396,32,FLEN)
NAN_BOXED(2156495006,32,FLEN)
NAN_BOXED(2734682112,32,FLEN)
NAN_BOXED(2121158396,32,FLEN)
NAN_BOXED(2156495006,32,FLEN)
NAN_BOXED(2734684160,32,FLEN)
NAN_BOXED(2121158396,32,FLEN)
NAN_BOXED(2156495006,32,FLEN)
NAN_BOXED(2734685184,32,FLEN)
NAN_BOXED(2121158396,32,FLEN)
NAN_BOXED(2156495006,32,FLEN)
NAN_BOXED(2734685696,32,FLEN)
NAN_BOXED(2121158396,32,FLEN)
NAN_BOXED(2156495006,32,FLEN)
NAN_BOXED(2734685952,32,FLEN)
NAN_BOXED(2121158396,32,FLEN)
NAN_BOXED(2156495006,32,FLEN)
NAN_BOXED(2734686080,32,FLEN)
NAN_BOXED(2121158396,32,FLEN)
NAN_BOXED(2156495006,32,FLEN)
NAN_BOXED(2734686144,32,FLEN)
NAN_BOXED(2121158396,32,FLEN)
NAN_BOXED(2156495006,32,FLEN)
NAN_BOXED(2734686176,32,FLEN)
NAN_BOXED(2121158396,32,FLEN)
NAN_BOXED(2156495006,32,FLEN)
NAN_BOXED(2734686192,32,FLEN)
NAN_BOXED(2121158396,32,FLEN)
NAN_BOXED(2156495006,32,FLEN)
NAN_BOXED(2734686200,32,FLEN)
NAN_BOXED(2121158396,32,FLEN)
NAN_BOXED(2156495006,32,FLEN)
NAN_BOXED(2734686204,32,FLEN)
NAN_BOXED(2121158396,32,FLEN)
NAN_BOXED(2156495006,32,FLEN)
NAN_BOXED(2734686206,32,FLEN)
NAN_BOXED(2121158396,32,FLEN)
NAN_BOXED(2156495006,32,FLEN)
NAN_BOXED(2734686207,32,FLEN)
NAN_BOXED(2121158396,32,FLEN)
NAN_BOXED(2156495006,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2121158396,32,FLEN)
NAN_BOXED(2156495006,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2121158396,32,FLEN)
NAN_BOXED(2156495006,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
NAN_BOXED(2121158396,32,FLEN)
NAN_BOXED(2156495006,32,FLEN)
NAN_BOXED(3214514585,32,FLEN)
NAN_BOXED(2121158396,32,FLEN)
NAN_BOXED(2156495006,32,FLEN)
NAN_BOXED(3215233609,32,FLEN)
NAN_BOXED(2121158396,32,FLEN)
NAN_BOXED(2156495006,32,FLEN)
NAN_BOXED(3216192307,32,FLEN)
NAN_BOXED(2121158396,32,FLEN)
NAN_BOXED(2156495006,32,FLEN)
NAN_BOXED(3216431981,32,FLEN)
NAN_BOXED(2121158396,32,FLEN)
NAN_BOXED(2156495006,32,FLEN)
NAN_BOXED(3216751547,32,FLEN)
NAN_BOXED(2121158396,32,FLEN)
NAN_BOXED(2156495006,32,FLEN)
NAN_BOXED(3217310788,32,FLEN)
NAN_BOXED(2121158396,32,FLEN)
NAN_BOXED(2156495006,32,FLEN)
NAN_BOXED(3217870028,32,FLEN)
NAN_BOXED(2121158396,32,FLEN)
NAN_BOXED(2156495006,32,FLEN)
NAN_BOXED(3218828726,32,FLEN)
NAN_BOXED(2121158396,32,FLEN)
NAN_BOXED(2156495006,32,FLEN)
NAN_BOXED(3219547750,32,FLEN)
NAN_BOXED(2121158396,32,FLEN)
NAN_BOXED(2156495006,32,FLEN)
NAN_BOXED(3220027099,32,FLEN)
NAN_BOXED(2121158396,32,FLEN)
NAN_BOXED(2156495006,32,FLEN)
NAN_BOXED(3221225464,32,FLEN)
NAN_BOXED(2121158396,32,FLEN)
NAN_BOXED(2156495006,32,FLEN)
NAN_BOXED(3221225468,32,FLEN)
NAN_BOXED(2121158396,32,FLEN)
NAN_BOXED(2156495006,32,FLEN)
NAN_BOXED(3221225470,32,FLEN)
NAN_BOXED(2121380642,32,FLEN)
NAN_BOXED(2156368570,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2121380642,32,FLEN)
NAN_BOXED(2156368570,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2121380642,32,FLEN)
NAN_BOXED(2156368570,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
NAN_BOXED(2121380642,32,FLEN)
NAN_BOXED(2156368570,32,FLEN)
NAN_BOXED(3214514585,32,FLEN)
NAN_BOXED(2121380642,32,FLEN)
NAN_BOXED(2156368570,32,FLEN)
NAN_BOXED(3215233609,32,FLEN)
NAN_BOXED(2121380642,32,FLEN)
NAN_BOXED(2156368570,32,FLEN)
NAN_BOXED(3216192307,32,FLEN)
NAN_BOXED(2121380642,32,FLEN)
NAN_BOXED(2156368570,32,FLEN)
NAN_BOXED(3216431981,32,FLEN)
NAN_BOXED(2121380642,32,FLEN)
NAN_BOXED(2156368570,32,FLEN)
NAN_BOXED(3216751547,32,FLEN)
NAN_BOXED(2121380642,32,FLEN)
NAN_BOXED(2156368570,32,FLEN)
NAN_BOXED(3217310788,32,FLEN)
NAN_BOXED(2121380642,32,FLEN)
NAN_BOXED(2156368570,32,FLEN)
NAN_BOXED(3217870028,32,FLEN)
NAN_BOXED(2121380642,32,FLEN)
NAN_BOXED(2156368570,32,FLEN)
NAN_BOXED(3218828726,32,FLEN)
NAN_BOXED(2121380642,32,FLEN)
NAN_BOXED(2156368570,32,FLEN)
NAN_BOXED(3219547750,32,FLEN)
NAN_BOXED(2121380642,32,FLEN)
NAN_BOXED(2156368570,32,FLEN)
NAN_BOXED(3220027099,32,FLEN)
NAN_BOXED(2121380642,32,FLEN)
NAN_BOXED(2156368570,32,FLEN)
NAN_BOXED(3221225464,32,FLEN)
NAN_BOXED(2121380642,32,FLEN)
NAN_BOXED(2156368570,32,FLEN)
NAN_BOXED(3221225468,32,FLEN)
NAN_BOXED(2121380642,32,FLEN)
NAN_BOXED(2156368570,32,FLEN)
NAN_BOXED(3221225470,32,FLEN)
NAN_BOXED(2121380642,32,FLEN)
NAN_BOXED(2156368570,32,FLEN)
NAN_BOXED(3305111552,32,FLEN)
NAN_BOXED(2121380642,32,FLEN)
NAN_BOXED(2156368570,32,FLEN)
NAN_BOXED(3305111553,32,FLEN)
NAN_BOXED(2121380642,32,FLEN)
NAN_BOXED(2156368570,32,FLEN)
NAN_BOXED(3305111555,32,FLEN)
NAN_BOXED(2121380642,32,FLEN)
NAN_BOXED(2156368570,32,FLEN)
NAN_BOXED(3305111559,32,FLEN)
NAN_BOXED(2121380642,32,FLEN)
NAN_BOXED(2156368570,32,FLEN)
NAN_BOXED(3305111567,32,FLEN)
NAN_BOXED(2121380642,32,FLEN)
NAN_BOXED(2156368570,32,FLEN)
NAN_BOXED(3305111583,32,FLEN)
NAN_BOXED(2121380642,32,FLEN)
NAN_BOXED(2156368570,32,FLEN)
NAN_BOXED(3305111615,32,FLEN)
NAN_BOXED(2121380642,32,FLEN)
NAN_BOXED(2156368570,32,FLEN)
NAN_BOXED(3305111679,32,FLEN)
NAN_BOXED(2121380642,32,FLEN)
NAN_BOXED(2156368570,32,FLEN)
NAN_BOXED(3305111807,32,FLEN)
NAN_BOXED(2121380642,32,FLEN)
NAN_BOXED(2156368570,32,FLEN)
NAN_BOXED(3305112063,32,FLEN)
NAN_BOXED(2121380642,32,FLEN)
NAN_BOXED(2156368570,32,FLEN)
NAN_BOXED(3305112575,32,FLEN)
NAN_BOXED(2121380642,32,FLEN)
NAN_BOXED(2156368570,32,FLEN)
NAN_BOXED(3305113599,32,FLEN)
NAN_BOXED(2121380642,32,FLEN)
NAN_BOXED(2156368570,32,FLEN)
NAN_BOXED(3305115647,32,FLEN)
NAN_BOXED(2121380642,32,FLEN)
NAN_BOXED(2156368570,32,FLEN)
NAN_BOXED(3305119743,32,FLEN)
NAN_BOXED(2121380642,32,FLEN)
NAN_BOXED(2156368570,32,FLEN)
NAN_BOXED(3305127935,32,FLEN)
NAN_BOXED(2121380642,32,FLEN)
NAN_BOXED(2156368570,32,FLEN)
NAN_BOXED(3305144319,32,FLEN)
NAN_BOXED(2121380642,32,FLEN)
NAN_BOXED(2156368570,32,FLEN)
NAN_BOXED(3305177087,32,FLEN)
NAN_BOXED(2121380642,32,FLEN)
NAN_BOXED(2156368570,32,FLEN)
NAN_BOXED(3305242623,32,FLEN)
NAN_BOXED(2121380642,32,FLEN)
NAN_BOXED(2156368570,32,FLEN)
NAN_BOXED(3305373695,32,FLEN)
NAN_BOXED(2121380642,32,FLEN)
NAN_BOXED(2156368570,32,FLEN)
NAN_BOXED(3305635839,32,FLEN)
NAN_BOXED(2121380642,32,FLEN)
NAN_BOXED(2156368570,32,FLEN)
NAN_BOXED(3306160127,32,FLEN)
NAN_BOXED(2121380642,32,FLEN)
NAN_BOXED(2156368570,32,FLEN)
NAN_BOXED(3307208703,32,FLEN)
NAN_BOXED(2121380642,32,FLEN)
NAN_BOXED(2156368570,32,FLEN)
NAN_BOXED(3309305855,32,FLEN)
NAN_BOXED(2121380642,32,FLEN)
NAN_BOXED(2156368570,32,FLEN)
NAN_BOXED(3309305856,32,FLEN)
NAN_BOXED(2121380642,32,FLEN)
NAN_BOXED(2156368570,32,FLEN)
NAN_BOXED(3311403008,32,FLEN)
NAN_BOXED(2121380642,32,FLEN)
NAN_BOXED(2156368570,32,FLEN)
NAN_BOXED(3312451584,32,FLEN)
NAN_BOXED(2121380642,32,FLEN)
NAN_BOXED(2156368570,32,FLEN)
NAN_BOXED(3312975872,32,FLEN)
NAN_BOXED(2121380642,32,FLEN)
NAN_BOXED(2156368570,32,FLEN)
NAN_BOXED(3313238016,32,FLEN)
NAN_BOXED(2121380642,32,FLEN)
NAN_BOXED(2156368570,32,FLEN)
NAN_BOXED(3313369088,32,FLEN)
NAN_BOXED(2121380642,32,FLEN)
NAN_BOXED(2156368570,32,FLEN)
NAN_BOXED(3313434624,32,FLEN)
NAN_BOXED(2121380642,32,FLEN)
NAN_BOXED(2156368570,32,FLEN)
NAN_BOXED(3313467392,32,FLEN)
NAN_BOXED(2121380642,32,FLEN)
NAN_BOXED(2156368570,32,FLEN)
NAN_BOXED(3313483776,32,FLEN)
NAN_BOXED(2121380642,32,FLEN)
NAN_BOXED(2156368570,32,FLEN)
NAN_BOXED(3313491968,32,FLEN)
NAN_BOXED(2121380642,32,FLEN)
NAN_BOXED(2156368570,32,FLEN)
NAN_BOXED(3313496064,32,FLEN)
NAN_BOXED(2121380642,32,FLEN)
NAN_BOXED(2156368570,32,FLEN)
NAN_BOXED(3313498112,32,FLEN)
NAN_BOXED(2121380642,32,FLEN)
NAN_BOXED(2156368570,32,FLEN)
NAN_BOXED(3313499136,32,FLEN)
NAN_BOXED(2121380642,32,FLEN)
NAN_BOXED(2156368570,32,FLEN)
NAN_BOXED(3313499648,32,FLEN)
NAN_BOXED(2121380642,32,FLEN)
NAN_BOXED(2156368570,32,FLEN)
NAN_BOXED(3313499904,32,FLEN)
NAN_BOXED(2121380642,32,FLEN)
NAN_BOXED(2156368570,32,FLEN)
NAN_BOXED(3313500032,32,FLEN)
NAN_BOXED(2121380642,32,FLEN)
NAN_BOXED(2156368570,32,FLEN)
NAN_BOXED(3313500096,32,FLEN)
NAN_BOXED(2121380642,32,FLEN)
NAN_BOXED(2156368570,32,FLEN)
NAN_BOXED(3313500128,32,FLEN)
NAN_BOXED(2121380642,32,FLEN)
NAN_BOXED(2156368570,32,FLEN)
NAN_BOXED(3313500144,32,FLEN)
NAN_BOXED(2121380642,32,FLEN)
NAN_BOXED(2156368570,32,FLEN)
NAN_BOXED(3313500152,32,FLEN)
NAN_BOXED(2121380642,32,FLEN)
NAN_BOXED(2156368570,32,FLEN)
NAN_BOXED(3313500156,32,FLEN)
NAN_BOXED(2121380642,32,FLEN)
NAN_BOXED(2156368570,32,FLEN)
NAN_BOXED(3313500158,32,FLEN)
NAN_BOXED(2121380642,32,FLEN)
NAN_BOXED(2156368570,32,FLEN)
NAN_BOXED(3313500159,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
