
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:07 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_384:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x50829a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bd0829a; op2val:0x80000000;
op3val:0x806db6db; valaddr_reg:x3; val_offset:1152*0 + 3*3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1152*0 + 3*3*FLEN/8, x4, x1, x2)

inst_385:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x50829a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bd0829a; op2val:0x80000000;
op3val:0x807ffff8; valaddr_reg:x3; val_offset:1155*0 + 3*3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1155*0 + 3*3*FLEN/8, x4, x1, x2)

inst_386:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x50829a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bd0829a; op2val:0x80000000;
op3val:0x807ffffc; valaddr_reg:x3; val_offset:1158*0 + 3*3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1158*0 + 3*3*FLEN/8, x4, x1, x2)

inst_387:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x50829a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bd0829a; op2val:0x80000000;
op3val:0x807ffffe; valaddr_reg:x3; val_offset:1161*0 + 3*3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1161*0 + 3*3*FLEN/8, x4, x1, x2)

inst_388:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x50829a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x19 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bd0829a; op2val:0x80000000;
op3val:0x8c800000; valaddr_reg:x3; val_offset:1164*0 + 3*3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1164*0 + 3*3*FLEN/8, x4, x1, x2)

inst_389:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x50829a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x19 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bd0829a; op2val:0x80000000;
op3val:0x8c800001; valaddr_reg:x3; val_offset:1167*0 + 3*3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1167*0 + 3*3*FLEN/8, x4, x1, x2)

inst_390:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x50829a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x19 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bd0829a; op2val:0x80000000;
op3val:0x8c800003; valaddr_reg:x3; val_offset:1170*0 + 3*3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1170*0 + 3*3*FLEN/8, x4, x1, x2)

inst_391:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x50829a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x19 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bd0829a; op2val:0x80000000;
op3val:0x8c800007; valaddr_reg:x3; val_offset:1173*0 + 3*3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1173*0 + 3*3*FLEN/8, x4, x1, x2)

inst_392:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x50829a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x19 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bd0829a; op2val:0x80000000;
op3val:0x8c80000f; valaddr_reg:x3; val_offset:1176*0 + 3*3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1176*0 + 3*3*FLEN/8, x4, x1, x2)

inst_393:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x50829a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x19 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bd0829a; op2val:0x80000000;
op3val:0x8c80001f; valaddr_reg:x3; val_offset:1179*0 + 3*3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1179*0 + 3*3*FLEN/8, x4, x1, x2)

inst_394:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x50829a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x19 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bd0829a; op2val:0x80000000;
op3val:0x8c80003f; valaddr_reg:x3; val_offset:1182*0 + 3*3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1182*0 + 3*3*FLEN/8, x4, x1, x2)

inst_395:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x50829a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x19 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bd0829a; op2val:0x80000000;
op3val:0x8c80007f; valaddr_reg:x3; val_offset:1185*0 + 3*3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1185*0 + 3*3*FLEN/8, x4, x1, x2)

inst_396:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x50829a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x19 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bd0829a; op2val:0x80000000;
op3val:0x8c8000ff; valaddr_reg:x3; val_offset:1188*0 + 3*3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1188*0 + 3*3*FLEN/8, x4, x1, x2)

inst_397:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x50829a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x19 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bd0829a; op2val:0x80000000;
op3val:0x8c8001ff; valaddr_reg:x3; val_offset:1191*0 + 3*3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1191*0 + 3*3*FLEN/8, x4, x1, x2)

inst_398:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x50829a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x19 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bd0829a; op2val:0x80000000;
op3val:0x8c8003ff; valaddr_reg:x3; val_offset:1194*0 + 3*3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1194*0 + 3*3*FLEN/8, x4, x1, x2)

inst_399:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x50829a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x19 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bd0829a; op2val:0x80000000;
op3val:0x8c8007ff; valaddr_reg:x3; val_offset:1197*0 + 3*3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1197*0 + 3*3*FLEN/8, x4, x1, x2)

inst_400:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x50829a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x19 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bd0829a; op2val:0x80000000;
op3val:0x8c800fff; valaddr_reg:x3; val_offset:1200*0 + 3*3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1200*0 + 3*3*FLEN/8, x4, x1, x2)

inst_401:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x50829a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x19 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bd0829a; op2val:0x80000000;
op3val:0x8c801fff; valaddr_reg:x3; val_offset:1203*0 + 3*3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1203*0 + 3*3*FLEN/8, x4, x1, x2)

inst_402:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x50829a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x19 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bd0829a; op2val:0x80000000;
op3val:0x8c803fff; valaddr_reg:x3; val_offset:1206*0 + 3*3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1206*0 + 3*3*FLEN/8, x4, x1, x2)

inst_403:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x50829a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x19 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bd0829a; op2val:0x80000000;
op3val:0x8c807fff; valaddr_reg:x3; val_offset:1209*0 + 3*3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1209*0 + 3*3*FLEN/8, x4, x1, x2)

inst_404:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x50829a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x19 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bd0829a; op2val:0x80000000;
op3val:0x8c80ffff; valaddr_reg:x3; val_offset:1212*0 + 3*3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1212*0 + 3*3*FLEN/8, x4, x1, x2)

inst_405:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x50829a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x19 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bd0829a; op2val:0x80000000;
op3val:0x8c81ffff; valaddr_reg:x3; val_offset:1215*0 + 3*3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1215*0 + 3*3*FLEN/8, x4, x1, x2)

inst_406:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x50829a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x19 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bd0829a; op2val:0x80000000;
op3val:0x8c83ffff; valaddr_reg:x3; val_offset:1218*0 + 3*3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1218*0 + 3*3*FLEN/8, x4, x1, x2)

inst_407:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x50829a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x19 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bd0829a; op2val:0x80000000;
op3val:0x8c87ffff; valaddr_reg:x3; val_offset:1221*0 + 3*3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1221*0 + 3*3*FLEN/8, x4, x1, x2)

inst_408:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x50829a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x19 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bd0829a; op2val:0x80000000;
op3val:0x8c8fffff; valaddr_reg:x3; val_offset:1224*0 + 3*3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1224*0 + 3*3*FLEN/8, x4, x1, x2)

inst_409:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x50829a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x19 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bd0829a; op2val:0x80000000;
op3val:0x8c9fffff; valaddr_reg:x3; val_offset:1227*0 + 3*3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1227*0 + 3*3*FLEN/8, x4, x1, x2)

inst_410:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x50829a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x19 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bd0829a; op2val:0x80000000;
op3val:0x8cbfffff; valaddr_reg:x3; val_offset:1230*0 + 3*3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1230*0 + 3*3*FLEN/8, x4, x1, x2)

inst_411:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x50829a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x19 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bd0829a; op2val:0x80000000;
op3val:0x8cc00000; valaddr_reg:x3; val_offset:1233*0 + 3*3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1233*0 + 3*3*FLEN/8, x4, x1, x2)

inst_412:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x50829a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x19 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bd0829a; op2val:0x80000000;
op3val:0x8ce00000; valaddr_reg:x3; val_offset:1236*0 + 3*3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1236*0 + 3*3*FLEN/8, x4, x1, x2)

inst_413:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x50829a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x19 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bd0829a; op2val:0x80000000;
op3val:0x8cf00000; valaddr_reg:x3; val_offset:1239*0 + 3*3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1239*0 + 3*3*FLEN/8, x4, x1, x2)

inst_414:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x50829a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x19 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bd0829a; op2val:0x80000000;
op3val:0x8cf80000; valaddr_reg:x3; val_offset:1242*0 + 3*3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1242*0 + 3*3*FLEN/8, x4, x1, x2)

inst_415:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x50829a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x19 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bd0829a; op2val:0x80000000;
op3val:0x8cfc0000; valaddr_reg:x3; val_offset:1245*0 + 3*3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1245*0 + 3*3*FLEN/8, x4, x1, x2)

inst_416:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x50829a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x19 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bd0829a; op2val:0x80000000;
op3val:0x8cfe0000; valaddr_reg:x3; val_offset:1248*0 + 3*3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1248*0 + 3*3*FLEN/8, x4, x1, x2)

inst_417:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x50829a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x19 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bd0829a; op2val:0x80000000;
op3val:0x8cff0000; valaddr_reg:x3; val_offset:1251*0 + 3*3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1251*0 + 3*3*FLEN/8, x4, x1, x2)

inst_418:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x50829a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x19 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bd0829a; op2val:0x80000000;
op3val:0x8cff8000; valaddr_reg:x3; val_offset:1254*0 + 3*3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1254*0 + 3*3*FLEN/8, x4, x1, x2)

inst_419:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x50829a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x19 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bd0829a; op2val:0x80000000;
op3val:0x8cffc000; valaddr_reg:x3; val_offset:1257*0 + 3*3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1257*0 + 3*3*FLEN/8, x4, x1, x2)

inst_420:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x50829a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x19 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bd0829a; op2val:0x80000000;
op3val:0x8cffe000; valaddr_reg:x3; val_offset:1260*0 + 3*3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1260*0 + 3*3*FLEN/8, x4, x1, x2)

inst_421:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x50829a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x19 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bd0829a; op2val:0x80000000;
op3val:0x8cfff000; valaddr_reg:x3; val_offset:1263*0 + 3*3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1263*0 + 3*3*FLEN/8, x4, x1, x2)

inst_422:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x50829a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x19 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bd0829a; op2val:0x80000000;
op3val:0x8cfff800; valaddr_reg:x3; val_offset:1266*0 + 3*3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1266*0 + 3*3*FLEN/8, x4, x1, x2)

inst_423:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x50829a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x19 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bd0829a; op2val:0x80000000;
op3val:0x8cfffc00; valaddr_reg:x3; val_offset:1269*0 + 3*3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1269*0 + 3*3*FLEN/8, x4, x1, x2)

inst_424:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x50829a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x19 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bd0829a; op2val:0x80000000;
op3val:0x8cfffe00; valaddr_reg:x3; val_offset:1272*0 + 3*3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1272*0 + 3*3*FLEN/8, x4, x1, x2)

inst_425:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x50829a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x19 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bd0829a; op2val:0x80000000;
op3val:0x8cffff00; valaddr_reg:x3; val_offset:1275*0 + 3*3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1275*0 + 3*3*FLEN/8, x4, x1, x2)

inst_426:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x50829a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x19 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bd0829a; op2val:0x80000000;
op3val:0x8cffff80; valaddr_reg:x3; val_offset:1278*0 + 3*3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1278*0 + 3*3*FLEN/8, x4, x1, x2)

inst_427:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x50829a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x19 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bd0829a; op2val:0x80000000;
op3val:0x8cffffc0; valaddr_reg:x3; val_offset:1281*0 + 3*3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1281*0 + 3*3*FLEN/8, x4, x1, x2)

inst_428:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x50829a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x19 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bd0829a; op2val:0x80000000;
op3val:0x8cffffe0; valaddr_reg:x3; val_offset:1284*0 + 3*3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1284*0 + 3*3*FLEN/8, x4, x1, x2)

inst_429:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x50829a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x19 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bd0829a; op2val:0x80000000;
op3val:0x8cfffff0; valaddr_reg:x3; val_offset:1287*0 + 3*3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1287*0 + 3*3*FLEN/8, x4, x1, x2)

inst_430:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x50829a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x19 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bd0829a; op2val:0x80000000;
op3val:0x8cfffff8; valaddr_reg:x3; val_offset:1290*0 + 3*3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1290*0 + 3*3*FLEN/8, x4, x1, x2)

inst_431:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x50829a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x19 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bd0829a; op2val:0x80000000;
op3val:0x8cfffffc; valaddr_reg:x3; val_offset:1293*0 + 3*3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1293*0 + 3*3*FLEN/8, x4, x1, x2)

inst_432:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x50829a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x19 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bd0829a; op2val:0x80000000;
op3val:0x8cfffffe; valaddr_reg:x3; val_offset:1296*0 + 3*3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1296*0 + 3*3*FLEN/8, x4, x1, x2)

inst_433:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x50829a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x19 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bd0829a; op2val:0x80000000;
op3val:0x8cffffff; valaddr_reg:x3; val_offset:1299*0 + 3*3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1299*0 + 3*3*FLEN/8, x4, x1, x2)

inst_434:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x5962c2 and fs2 == 0 and fe2 == 0x86 and fm2 == 0x16bc93 and fs3 == 0 and fe3 == 0xdc and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bd962c2; op2val:0x4316bc93;
op3val:0x6e000000; valaddr_reg:x3; val_offset:1302*0 + 3*3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1302*0 + 3*3*FLEN/8, x4, x1, x2)

inst_435:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x5962c2 and fs2 == 0 and fe2 == 0x86 and fm2 == 0x16bc93 and fs3 == 0 and fe3 == 0xdc and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bd962c2; op2val:0x4316bc93;
op3val:0x6e000001; valaddr_reg:x3; val_offset:1305*0 + 3*3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1305*0 + 3*3*FLEN/8, x4, x1, x2)

inst_436:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x5962c2 and fs2 == 0 and fe2 == 0x86 and fm2 == 0x16bc93 and fs3 == 0 and fe3 == 0xdc and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bd962c2; op2val:0x4316bc93;
op3val:0x6e000003; valaddr_reg:x3; val_offset:1308*0 + 3*3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1308*0 + 3*3*FLEN/8, x4, x1, x2)

inst_437:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x5962c2 and fs2 == 0 and fe2 == 0x86 and fm2 == 0x16bc93 and fs3 == 0 and fe3 == 0xdc and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bd962c2; op2val:0x4316bc93;
op3val:0x6e000007; valaddr_reg:x3; val_offset:1311*0 + 3*3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1311*0 + 3*3*FLEN/8, x4, x1, x2)

inst_438:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x5962c2 and fs2 == 0 and fe2 == 0x86 and fm2 == 0x16bc93 and fs3 == 0 and fe3 == 0xdc and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bd962c2; op2val:0x4316bc93;
op3val:0x6e00000f; valaddr_reg:x3; val_offset:1314*0 + 3*3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1314*0 + 3*3*FLEN/8, x4, x1, x2)

inst_439:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x5962c2 and fs2 == 0 and fe2 == 0x86 and fm2 == 0x16bc93 and fs3 == 0 and fe3 == 0xdc and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bd962c2; op2val:0x4316bc93;
op3val:0x6e00001f; valaddr_reg:x3; val_offset:1317*0 + 3*3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1317*0 + 3*3*FLEN/8, x4, x1, x2)

inst_440:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x5962c2 and fs2 == 0 and fe2 == 0x86 and fm2 == 0x16bc93 and fs3 == 0 and fe3 == 0xdc and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bd962c2; op2val:0x4316bc93;
op3val:0x6e00003f; valaddr_reg:x3; val_offset:1320*0 + 3*3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1320*0 + 3*3*FLEN/8, x4, x1, x2)

inst_441:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x5962c2 and fs2 == 0 and fe2 == 0x86 and fm2 == 0x16bc93 and fs3 == 0 and fe3 == 0xdc and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bd962c2; op2val:0x4316bc93;
op3val:0x6e00007f; valaddr_reg:x3; val_offset:1323*0 + 3*3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1323*0 + 3*3*FLEN/8, x4, x1, x2)

inst_442:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x5962c2 and fs2 == 0 and fe2 == 0x86 and fm2 == 0x16bc93 and fs3 == 0 and fe3 == 0xdc and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bd962c2; op2val:0x4316bc93;
op3val:0x6e0000ff; valaddr_reg:x3; val_offset:1326*0 + 3*3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1326*0 + 3*3*FLEN/8, x4, x1, x2)

inst_443:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x5962c2 and fs2 == 0 and fe2 == 0x86 and fm2 == 0x16bc93 and fs3 == 0 and fe3 == 0xdc and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bd962c2; op2val:0x4316bc93;
op3val:0x6e0001ff; valaddr_reg:x3; val_offset:1329*0 + 3*3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1329*0 + 3*3*FLEN/8, x4, x1, x2)

inst_444:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x5962c2 and fs2 == 0 and fe2 == 0x86 and fm2 == 0x16bc93 and fs3 == 0 and fe3 == 0xdc and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bd962c2; op2val:0x4316bc93;
op3val:0x6e0003ff; valaddr_reg:x3; val_offset:1332*0 + 3*3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1332*0 + 3*3*FLEN/8, x4, x1, x2)

inst_445:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x5962c2 and fs2 == 0 and fe2 == 0x86 and fm2 == 0x16bc93 and fs3 == 0 and fe3 == 0xdc and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bd962c2; op2val:0x4316bc93;
op3val:0x6e0007ff; valaddr_reg:x3; val_offset:1335*0 + 3*3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1335*0 + 3*3*FLEN/8, x4, x1, x2)

inst_446:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x5962c2 and fs2 == 0 and fe2 == 0x86 and fm2 == 0x16bc93 and fs3 == 0 and fe3 == 0xdc and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bd962c2; op2val:0x4316bc93;
op3val:0x6e000fff; valaddr_reg:x3; val_offset:1338*0 + 3*3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1338*0 + 3*3*FLEN/8, x4, x1, x2)

inst_447:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x5962c2 and fs2 == 0 and fe2 == 0x86 and fm2 == 0x16bc93 and fs3 == 0 and fe3 == 0xdc and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bd962c2; op2val:0x4316bc93;
op3val:0x6e001fff; valaddr_reg:x3; val_offset:1341*0 + 3*3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1341*0 + 3*3*FLEN/8, x4, x1, x2)

inst_448:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x5962c2 and fs2 == 0 and fe2 == 0x86 and fm2 == 0x16bc93 and fs3 == 0 and fe3 == 0xdc and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bd962c2; op2val:0x4316bc93;
op3val:0x6e003fff; valaddr_reg:x3; val_offset:1344*0 + 3*3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1344*0 + 3*3*FLEN/8, x4, x1, x2)

inst_449:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x5962c2 and fs2 == 0 and fe2 == 0x86 and fm2 == 0x16bc93 and fs3 == 0 and fe3 == 0xdc and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bd962c2; op2val:0x4316bc93;
op3val:0x6e007fff; valaddr_reg:x3; val_offset:1347*0 + 3*3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1347*0 + 3*3*FLEN/8, x4, x1, x2)

inst_450:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x5962c2 and fs2 == 0 and fe2 == 0x86 and fm2 == 0x16bc93 and fs3 == 0 and fe3 == 0xdc and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bd962c2; op2val:0x4316bc93;
op3val:0x6e00ffff; valaddr_reg:x3; val_offset:1350*0 + 3*3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1350*0 + 3*3*FLEN/8, x4, x1, x2)

inst_451:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x5962c2 and fs2 == 0 and fe2 == 0x86 and fm2 == 0x16bc93 and fs3 == 0 and fe3 == 0xdc and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bd962c2; op2val:0x4316bc93;
op3val:0x6e01ffff; valaddr_reg:x3; val_offset:1353*0 + 3*3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1353*0 + 3*3*FLEN/8, x4, x1, x2)

inst_452:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x5962c2 and fs2 == 0 and fe2 == 0x86 and fm2 == 0x16bc93 and fs3 == 0 and fe3 == 0xdc and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bd962c2; op2val:0x4316bc93;
op3val:0x6e03ffff; valaddr_reg:x3; val_offset:1356*0 + 3*3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1356*0 + 3*3*FLEN/8, x4, x1, x2)

inst_453:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x5962c2 and fs2 == 0 and fe2 == 0x86 and fm2 == 0x16bc93 and fs3 == 0 and fe3 == 0xdc and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bd962c2; op2val:0x4316bc93;
op3val:0x6e07ffff; valaddr_reg:x3; val_offset:1359*0 + 3*3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1359*0 + 3*3*FLEN/8, x4, x1, x2)

inst_454:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x5962c2 and fs2 == 0 and fe2 == 0x86 and fm2 == 0x16bc93 and fs3 == 0 and fe3 == 0xdc and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bd962c2; op2val:0x4316bc93;
op3val:0x6e0fffff; valaddr_reg:x3; val_offset:1362*0 + 3*3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1362*0 + 3*3*FLEN/8, x4, x1, x2)

inst_455:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x5962c2 and fs2 == 0 and fe2 == 0x86 and fm2 == 0x16bc93 and fs3 == 0 and fe3 == 0xdc and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bd962c2; op2val:0x4316bc93;
op3val:0x6e1fffff; valaddr_reg:x3; val_offset:1365*0 + 3*3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1365*0 + 3*3*FLEN/8, x4, x1, x2)

inst_456:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x5962c2 and fs2 == 0 and fe2 == 0x86 and fm2 == 0x16bc93 and fs3 == 0 and fe3 == 0xdc and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bd962c2; op2val:0x4316bc93;
op3val:0x6e3fffff; valaddr_reg:x3; val_offset:1368*0 + 3*3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1368*0 + 3*3*FLEN/8, x4, x1, x2)

inst_457:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x5962c2 and fs2 == 0 and fe2 == 0x86 and fm2 == 0x16bc93 and fs3 == 0 and fe3 == 0xdc and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bd962c2; op2val:0x4316bc93;
op3val:0x6e400000; valaddr_reg:x3; val_offset:1371*0 + 3*3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1371*0 + 3*3*FLEN/8, x4, x1, x2)

inst_458:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x5962c2 and fs2 == 0 and fe2 == 0x86 and fm2 == 0x16bc93 and fs3 == 0 and fe3 == 0xdc and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bd962c2; op2val:0x4316bc93;
op3val:0x6e600000; valaddr_reg:x3; val_offset:1374*0 + 3*3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1374*0 + 3*3*FLEN/8, x4, x1, x2)

inst_459:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x5962c2 and fs2 == 0 and fe2 == 0x86 and fm2 == 0x16bc93 and fs3 == 0 and fe3 == 0xdc and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bd962c2; op2val:0x4316bc93;
op3val:0x6e700000; valaddr_reg:x3; val_offset:1377*0 + 3*3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1377*0 + 3*3*FLEN/8, x4, x1, x2)

inst_460:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x5962c2 and fs2 == 0 and fe2 == 0x86 and fm2 == 0x16bc93 and fs3 == 0 and fe3 == 0xdc and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bd962c2; op2val:0x4316bc93;
op3val:0x6e780000; valaddr_reg:x3; val_offset:1380*0 + 3*3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1380*0 + 3*3*FLEN/8, x4, x1, x2)

inst_461:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x5962c2 and fs2 == 0 and fe2 == 0x86 and fm2 == 0x16bc93 and fs3 == 0 and fe3 == 0xdc and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bd962c2; op2val:0x4316bc93;
op3val:0x6e7c0000; valaddr_reg:x3; val_offset:1383*0 + 3*3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1383*0 + 3*3*FLEN/8, x4, x1, x2)

inst_462:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x5962c2 and fs2 == 0 and fe2 == 0x86 and fm2 == 0x16bc93 and fs3 == 0 and fe3 == 0xdc and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bd962c2; op2val:0x4316bc93;
op3val:0x6e7e0000; valaddr_reg:x3; val_offset:1386*0 + 3*3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1386*0 + 3*3*FLEN/8, x4, x1, x2)

inst_463:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x5962c2 and fs2 == 0 and fe2 == 0x86 and fm2 == 0x16bc93 and fs3 == 0 and fe3 == 0xdc and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bd962c2; op2val:0x4316bc93;
op3val:0x6e7f0000; valaddr_reg:x3; val_offset:1389*0 + 3*3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1389*0 + 3*3*FLEN/8, x4, x1, x2)

inst_464:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x5962c2 and fs2 == 0 and fe2 == 0x86 and fm2 == 0x16bc93 and fs3 == 0 and fe3 == 0xdc and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bd962c2; op2val:0x4316bc93;
op3val:0x6e7f8000; valaddr_reg:x3; val_offset:1392*0 + 3*3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1392*0 + 3*3*FLEN/8, x4, x1, x2)

inst_465:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x5962c2 and fs2 == 0 and fe2 == 0x86 and fm2 == 0x16bc93 and fs3 == 0 and fe3 == 0xdc and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bd962c2; op2val:0x4316bc93;
op3val:0x6e7fc000; valaddr_reg:x3; val_offset:1395*0 + 3*3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1395*0 + 3*3*FLEN/8, x4, x1, x2)

inst_466:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x5962c2 and fs2 == 0 and fe2 == 0x86 and fm2 == 0x16bc93 and fs3 == 0 and fe3 == 0xdc and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bd962c2; op2val:0x4316bc93;
op3val:0x6e7fe000; valaddr_reg:x3; val_offset:1398*0 + 3*3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1398*0 + 3*3*FLEN/8, x4, x1, x2)

inst_467:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x5962c2 and fs2 == 0 and fe2 == 0x86 and fm2 == 0x16bc93 and fs3 == 0 and fe3 == 0xdc and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bd962c2; op2val:0x4316bc93;
op3val:0x6e7ff000; valaddr_reg:x3; val_offset:1401*0 + 3*3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1401*0 + 3*3*FLEN/8, x4, x1, x2)

inst_468:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x5962c2 and fs2 == 0 and fe2 == 0x86 and fm2 == 0x16bc93 and fs3 == 0 and fe3 == 0xdc and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bd962c2; op2val:0x4316bc93;
op3val:0x6e7ff800; valaddr_reg:x3; val_offset:1404*0 + 3*3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1404*0 + 3*3*FLEN/8, x4, x1, x2)

inst_469:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x5962c2 and fs2 == 0 and fe2 == 0x86 and fm2 == 0x16bc93 and fs3 == 0 and fe3 == 0xdc and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bd962c2; op2val:0x4316bc93;
op3val:0x6e7ffc00; valaddr_reg:x3; val_offset:1407*0 + 3*3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1407*0 + 3*3*FLEN/8, x4, x1, x2)

inst_470:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x5962c2 and fs2 == 0 and fe2 == 0x86 and fm2 == 0x16bc93 and fs3 == 0 and fe3 == 0xdc and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bd962c2; op2val:0x4316bc93;
op3val:0x6e7ffe00; valaddr_reg:x3; val_offset:1410*0 + 3*3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1410*0 + 3*3*FLEN/8, x4, x1, x2)

inst_471:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x5962c2 and fs2 == 0 and fe2 == 0x86 and fm2 == 0x16bc93 and fs3 == 0 and fe3 == 0xdc and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bd962c2; op2val:0x4316bc93;
op3val:0x6e7fff00; valaddr_reg:x3; val_offset:1413*0 + 3*3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1413*0 + 3*3*FLEN/8, x4, x1, x2)

inst_472:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x5962c2 and fs2 == 0 and fe2 == 0x86 and fm2 == 0x16bc93 and fs3 == 0 and fe3 == 0xdc and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bd962c2; op2val:0x4316bc93;
op3val:0x6e7fff80; valaddr_reg:x3; val_offset:1416*0 + 3*3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1416*0 + 3*3*FLEN/8, x4, x1, x2)

inst_473:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x5962c2 and fs2 == 0 and fe2 == 0x86 and fm2 == 0x16bc93 and fs3 == 0 and fe3 == 0xdc and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bd962c2; op2val:0x4316bc93;
op3val:0x6e7fffc0; valaddr_reg:x3; val_offset:1419*0 + 3*3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1419*0 + 3*3*FLEN/8, x4, x1, x2)

inst_474:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x5962c2 and fs2 == 0 and fe2 == 0x86 and fm2 == 0x16bc93 and fs3 == 0 and fe3 == 0xdc and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bd962c2; op2val:0x4316bc93;
op3val:0x6e7fffe0; valaddr_reg:x3; val_offset:1422*0 + 3*3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1422*0 + 3*3*FLEN/8, x4, x1, x2)

inst_475:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x5962c2 and fs2 == 0 and fe2 == 0x86 and fm2 == 0x16bc93 and fs3 == 0 and fe3 == 0xdc and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bd962c2; op2val:0x4316bc93;
op3val:0x6e7ffff0; valaddr_reg:x3; val_offset:1425*0 + 3*3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1425*0 + 3*3*FLEN/8, x4, x1, x2)

inst_476:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x5962c2 and fs2 == 0 and fe2 == 0x86 and fm2 == 0x16bc93 and fs3 == 0 and fe3 == 0xdc and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bd962c2; op2val:0x4316bc93;
op3val:0x6e7ffff8; valaddr_reg:x3; val_offset:1428*0 + 3*3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1428*0 + 3*3*FLEN/8, x4, x1, x2)

inst_477:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x5962c2 and fs2 == 0 and fe2 == 0x86 and fm2 == 0x16bc93 and fs3 == 0 and fe3 == 0xdc and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bd962c2; op2val:0x4316bc93;
op3val:0x6e7ffffc; valaddr_reg:x3; val_offset:1431*0 + 3*3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1431*0 + 3*3*FLEN/8, x4, x1, x2)

inst_478:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x5962c2 and fs2 == 0 and fe2 == 0x86 and fm2 == 0x16bc93 and fs3 == 0 and fe3 == 0xdc and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bd962c2; op2val:0x4316bc93;
op3val:0x6e7ffffe; valaddr_reg:x3; val_offset:1434*0 + 3*3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1434*0 + 3*3*FLEN/8, x4, x1, x2)

inst_479:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x5962c2 and fs2 == 0 and fe2 == 0x86 and fm2 == 0x16bc93 and fs3 == 0 and fe3 == 0xdc and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bd962c2; op2val:0x4316bc93;
op3val:0x6e7fffff; valaddr_reg:x3; val_offset:1437*0 + 3*3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1437*0 + 3*3*FLEN/8, x4, x1, x2)

inst_480:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x5962c2 and fs2 == 0 and fe2 == 0x86 and fm2 == 0x16bc93 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bd962c2; op2val:0x4316bc93;
op3val:0x7f000001; valaddr_reg:x3; val_offset:1440*0 + 3*3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1440*0 + 3*3*FLEN/8, x4, x1, x2)

inst_481:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x5962c2 and fs2 == 0 and fe2 == 0x86 and fm2 == 0x16bc93 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bd962c2; op2val:0x4316bc93;
op3val:0x7f000003; valaddr_reg:x3; val_offset:1443*0 + 3*3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1443*0 + 3*3*FLEN/8, x4, x1, x2)

inst_482:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x5962c2 and fs2 == 0 and fe2 == 0x86 and fm2 == 0x16bc93 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bd962c2; op2val:0x4316bc93;
op3val:0x7f000007; valaddr_reg:x3; val_offset:1446*0 + 3*3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1446*0 + 3*3*FLEN/8, x4, x1, x2)

inst_483:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x5962c2 and fs2 == 0 and fe2 == 0x86 and fm2 == 0x16bc93 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bd962c2; op2val:0x4316bc93;
op3val:0x7f199999; valaddr_reg:x3; val_offset:1449*0 + 3*3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1449*0 + 3*3*FLEN/8, x4, x1, x2)

inst_484:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x5962c2 and fs2 == 0 and fe2 == 0x86 and fm2 == 0x16bc93 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bd962c2; op2val:0x4316bc93;
op3val:0x7f249249; valaddr_reg:x3; val_offset:1452*0 + 3*3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1452*0 + 3*3*FLEN/8, x4, x1, x2)

inst_485:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x5962c2 and fs2 == 0 and fe2 == 0x86 and fm2 == 0x16bc93 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bd962c2; op2val:0x4316bc93;
op3val:0x7f333333; valaddr_reg:x3; val_offset:1455*0 + 3*3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1455*0 + 3*3*FLEN/8, x4, x1, x2)

inst_486:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x5962c2 and fs2 == 0 and fe2 == 0x86 and fm2 == 0x16bc93 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bd962c2; op2val:0x4316bc93;
op3val:0x7f36db6d; valaddr_reg:x3; val_offset:1458*0 + 3*3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1458*0 + 3*3*FLEN/8, x4, x1, x2)

inst_487:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x5962c2 and fs2 == 0 and fe2 == 0x86 and fm2 == 0x16bc93 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bd962c2; op2val:0x4316bc93;
op3val:0x7f3bbbbb; valaddr_reg:x3; val_offset:1461*0 + 3*3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1461*0 + 3*3*FLEN/8, x4, x1, x2)

inst_488:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x5962c2 and fs2 == 0 and fe2 == 0x86 and fm2 == 0x16bc93 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bd962c2; op2val:0x4316bc93;
op3val:0x7f444444; valaddr_reg:x3; val_offset:1464*0 + 3*3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1464*0 + 3*3*FLEN/8, x4, x1, x2)

inst_489:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x5962c2 and fs2 == 0 and fe2 == 0x86 and fm2 == 0x16bc93 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bd962c2; op2val:0x4316bc93;
op3val:0x7f4ccccc; valaddr_reg:x3; val_offset:1467*0 + 3*3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1467*0 + 3*3*FLEN/8, x4, x1, x2)

inst_490:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x5962c2 and fs2 == 0 and fe2 == 0x86 and fm2 == 0x16bc93 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bd962c2; op2val:0x4316bc93;
op3val:0x7f5b6db6; valaddr_reg:x3; val_offset:1470*0 + 3*3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1470*0 + 3*3*FLEN/8, x4, x1, x2)

inst_491:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x5962c2 and fs2 == 0 and fe2 == 0x86 and fm2 == 0x16bc93 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bd962c2; op2val:0x4316bc93;
op3val:0x7f666666; valaddr_reg:x3; val_offset:1473*0 + 3*3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1473*0 + 3*3*FLEN/8, x4, x1, x2)

inst_492:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x5962c2 and fs2 == 0 and fe2 == 0x86 and fm2 == 0x16bc93 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bd962c2; op2val:0x4316bc93;
op3val:0x7f6db6db; valaddr_reg:x3; val_offset:1476*0 + 3*3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1476*0 + 3*3*FLEN/8, x4, x1, x2)

inst_493:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x5962c2 and fs2 == 0 and fe2 == 0x86 and fm2 == 0x16bc93 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bd962c2; op2val:0x4316bc93;
op3val:0x7f7ffff8; valaddr_reg:x3; val_offset:1479*0 + 3*3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1479*0 + 3*3*FLEN/8, x4, x1, x2)

inst_494:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x5962c2 and fs2 == 0 and fe2 == 0x86 and fm2 == 0x16bc93 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bd962c2; op2val:0x4316bc93;
op3val:0x7f7ffffc; valaddr_reg:x3; val_offset:1482*0 + 3*3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1482*0 + 3*3*FLEN/8, x4, x1, x2)

inst_495:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x5962c2 and fs2 == 0 and fe2 == 0x86 and fm2 == 0x16bc93 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bd962c2; op2val:0x4316bc93;
op3val:0x7f7ffffe; valaddr_reg:x3; val_offset:1485*0 + 3*3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1485*0 + 3*3*FLEN/8, x4, x1, x2)

inst_496:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x418378 and fs2 == 1 and fe2 == 0x85 and fm2 == 0x2954f0 and fs3 == 1 and fe3 == 0xfb and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c418378; op2val:0xc2a954f0;
op3val:0xfd800000; valaddr_reg:x3; val_offset:1488*0 + 3*3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1488*0 + 3*3*FLEN/8, x4, x1, x2)

inst_497:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x418378 and fs2 == 1 and fe2 == 0x85 and fm2 == 0x2954f0 and fs3 == 1 and fe3 == 0xfb and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c418378; op2val:0xc2a954f0;
op3val:0xfd800001; valaddr_reg:x3; val_offset:1491*0 + 3*3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1491*0 + 3*3*FLEN/8, x4, x1, x2)

inst_498:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x418378 and fs2 == 1 and fe2 == 0x85 and fm2 == 0x2954f0 and fs3 == 1 and fe3 == 0xfb and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c418378; op2val:0xc2a954f0;
op3val:0xfd800003; valaddr_reg:x3; val_offset:1494*0 + 3*3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1494*0 + 3*3*FLEN/8, x4, x1, x2)

inst_499:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x418378 and fs2 == 1 and fe2 == 0x85 and fm2 == 0x2954f0 and fs3 == 1 and fe3 == 0xfb and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c418378; op2val:0xc2a954f0;
op3val:0xfd800007; valaddr_reg:x3; val_offset:1497*0 + 3*3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1497*0 + 3*3*FLEN/8, x4, x1, x2)

inst_500:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x418378 and fs2 == 1 and fe2 == 0x85 and fm2 == 0x2954f0 and fs3 == 1 and fe3 == 0xfb and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c418378; op2val:0xc2a954f0;
op3val:0xfd80000f; valaddr_reg:x3; val_offset:1500*0 + 3*3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1500*0 + 3*3*FLEN/8, x4, x1, x2)

inst_501:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x418378 and fs2 == 1 and fe2 == 0x85 and fm2 == 0x2954f0 and fs3 == 1 and fe3 == 0xfb and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c418378; op2val:0xc2a954f0;
op3val:0xfd80001f; valaddr_reg:x3; val_offset:1503*0 + 3*3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1503*0 + 3*3*FLEN/8, x4, x1, x2)

inst_502:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x418378 and fs2 == 1 and fe2 == 0x85 and fm2 == 0x2954f0 and fs3 == 1 and fe3 == 0xfb and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c418378; op2val:0xc2a954f0;
op3val:0xfd80003f; valaddr_reg:x3; val_offset:1506*0 + 3*3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1506*0 + 3*3*FLEN/8, x4, x1, x2)

inst_503:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x418378 and fs2 == 1 and fe2 == 0x85 and fm2 == 0x2954f0 and fs3 == 1 and fe3 == 0xfb and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c418378; op2val:0xc2a954f0;
op3val:0xfd80007f; valaddr_reg:x3; val_offset:1509*0 + 3*3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1509*0 + 3*3*FLEN/8, x4, x1, x2)

inst_504:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x418378 and fs2 == 1 and fe2 == 0x85 and fm2 == 0x2954f0 and fs3 == 1 and fe3 == 0xfb and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c418378; op2val:0xc2a954f0;
op3val:0xfd8000ff; valaddr_reg:x3; val_offset:1512*0 + 3*3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1512*0 + 3*3*FLEN/8, x4, x1, x2)

inst_505:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x418378 and fs2 == 1 and fe2 == 0x85 and fm2 == 0x2954f0 and fs3 == 1 and fe3 == 0xfb and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c418378; op2val:0xc2a954f0;
op3val:0xfd8001ff; valaddr_reg:x3; val_offset:1515*0 + 3*3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1515*0 + 3*3*FLEN/8, x4, x1, x2)

inst_506:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x418378 and fs2 == 1 and fe2 == 0x85 and fm2 == 0x2954f0 and fs3 == 1 and fe3 == 0xfb and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c418378; op2val:0xc2a954f0;
op3val:0xfd8003ff; valaddr_reg:x3; val_offset:1518*0 + 3*3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1518*0 + 3*3*FLEN/8, x4, x1, x2)

inst_507:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x418378 and fs2 == 1 and fe2 == 0x85 and fm2 == 0x2954f0 and fs3 == 1 and fe3 == 0xfb and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c418378; op2val:0xc2a954f0;
op3val:0xfd8007ff; valaddr_reg:x3; val_offset:1521*0 + 3*3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1521*0 + 3*3*FLEN/8, x4, x1, x2)

inst_508:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x418378 and fs2 == 1 and fe2 == 0x85 and fm2 == 0x2954f0 and fs3 == 1 and fe3 == 0xfb and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c418378; op2val:0xc2a954f0;
op3val:0xfd800fff; valaddr_reg:x3; val_offset:1524*0 + 3*3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1524*0 + 3*3*FLEN/8, x4, x1, x2)

inst_509:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x418378 and fs2 == 1 and fe2 == 0x85 and fm2 == 0x2954f0 and fs3 == 1 and fe3 == 0xfb and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c418378; op2val:0xc2a954f0;
op3val:0xfd801fff; valaddr_reg:x3; val_offset:1527*0 + 3*3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1527*0 + 3*3*FLEN/8, x4, x1, x2)

inst_510:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x418378 and fs2 == 1 and fe2 == 0x85 and fm2 == 0x2954f0 and fs3 == 1 and fe3 == 0xfb and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c418378; op2val:0xc2a954f0;
op3val:0xfd803fff; valaddr_reg:x3; val_offset:1530*0 + 3*3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1530*0 + 3*3*FLEN/8, x4, x1, x2)

inst_511:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x418378 and fs2 == 1 and fe2 == 0x85 and fm2 == 0x2954f0 and fs3 == 1 and fe3 == 0xfb and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c418378; op2val:0xc2a954f0;
op3val:0xfd807fff; valaddr_reg:x3; val_offset:1533*0 + 3*3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1533*0 + 3*3*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2077262490,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154673883,32,FLEN)
NAN_BOXED(2077262490,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872248,32,FLEN)
NAN_BOXED(2077262490,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872252,32,FLEN)
NAN_BOXED(2077262490,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2077262490,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357198848,32,FLEN)
NAN_BOXED(2077262490,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357198849,32,FLEN)
NAN_BOXED(2077262490,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357198851,32,FLEN)
NAN_BOXED(2077262490,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357198855,32,FLEN)
NAN_BOXED(2077262490,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357198863,32,FLEN)
NAN_BOXED(2077262490,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357198879,32,FLEN)
NAN_BOXED(2077262490,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357198911,32,FLEN)
NAN_BOXED(2077262490,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357198975,32,FLEN)
NAN_BOXED(2077262490,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357199103,32,FLEN)
NAN_BOXED(2077262490,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357199359,32,FLEN)
NAN_BOXED(2077262490,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357199871,32,FLEN)
NAN_BOXED(2077262490,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357200895,32,FLEN)
NAN_BOXED(2077262490,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357202943,32,FLEN)
NAN_BOXED(2077262490,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357207039,32,FLEN)
NAN_BOXED(2077262490,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357215231,32,FLEN)
NAN_BOXED(2077262490,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357231615,32,FLEN)
NAN_BOXED(2077262490,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357264383,32,FLEN)
NAN_BOXED(2077262490,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357329919,32,FLEN)
NAN_BOXED(2077262490,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357460991,32,FLEN)
NAN_BOXED(2077262490,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357723135,32,FLEN)
NAN_BOXED(2077262490,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2358247423,32,FLEN)
NAN_BOXED(2077262490,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2359295999,32,FLEN)
NAN_BOXED(2077262490,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2361393151,32,FLEN)
NAN_BOXED(2077262490,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2361393152,32,FLEN)
NAN_BOXED(2077262490,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2363490304,32,FLEN)
NAN_BOXED(2077262490,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2364538880,32,FLEN)
NAN_BOXED(2077262490,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2365063168,32,FLEN)
NAN_BOXED(2077262490,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2365325312,32,FLEN)
NAN_BOXED(2077262490,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2365456384,32,FLEN)
NAN_BOXED(2077262490,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2365521920,32,FLEN)
NAN_BOXED(2077262490,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2365554688,32,FLEN)
NAN_BOXED(2077262490,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2365571072,32,FLEN)
NAN_BOXED(2077262490,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2365579264,32,FLEN)
NAN_BOXED(2077262490,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2365583360,32,FLEN)
NAN_BOXED(2077262490,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2365585408,32,FLEN)
NAN_BOXED(2077262490,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2365586432,32,FLEN)
NAN_BOXED(2077262490,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2365586944,32,FLEN)
NAN_BOXED(2077262490,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2365587200,32,FLEN)
NAN_BOXED(2077262490,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2365587328,32,FLEN)
NAN_BOXED(2077262490,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2365587392,32,FLEN)
NAN_BOXED(2077262490,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2365587424,32,FLEN)
NAN_BOXED(2077262490,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2365587440,32,FLEN)
NAN_BOXED(2077262490,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2365587448,32,FLEN)
NAN_BOXED(2077262490,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2365587452,32,FLEN)
NAN_BOXED(2077262490,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2365587454,32,FLEN)
NAN_BOXED(2077262490,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2365587455,32,FLEN)
NAN_BOXED(2077844162,32,FLEN)
NAN_BOXED(1125563539,32,FLEN)
NAN_BOXED(1845493760,32,FLEN)
NAN_BOXED(2077844162,32,FLEN)
NAN_BOXED(1125563539,32,FLEN)
NAN_BOXED(1845493761,32,FLEN)
NAN_BOXED(2077844162,32,FLEN)
NAN_BOXED(1125563539,32,FLEN)
NAN_BOXED(1845493763,32,FLEN)
NAN_BOXED(2077844162,32,FLEN)
NAN_BOXED(1125563539,32,FLEN)
NAN_BOXED(1845493767,32,FLEN)
NAN_BOXED(2077844162,32,FLEN)
NAN_BOXED(1125563539,32,FLEN)
NAN_BOXED(1845493775,32,FLEN)
NAN_BOXED(2077844162,32,FLEN)
NAN_BOXED(1125563539,32,FLEN)
NAN_BOXED(1845493791,32,FLEN)
NAN_BOXED(2077844162,32,FLEN)
NAN_BOXED(1125563539,32,FLEN)
NAN_BOXED(1845493823,32,FLEN)
NAN_BOXED(2077844162,32,FLEN)
NAN_BOXED(1125563539,32,FLEN)
NAN_BOXED(1845493887,32,FLEN)
NAN_BOXED(2077844162,32,FLEN)
NAN_BOXED(1125563539,32,FLEN)
NAN_BOXED(1845494015,32,FLEN)
NAN_BOXED(2077844162,32,FLEN)
NAN_BOXED(1125563539,32,FLEN)
NAN_BOXED(1845494271,32,FLEN)
NAN_BOXED(2077844162,32,FLEN)
NAN_BOXED(1125563539,32,FLEN)
NAN_BOXED(1845494783,32,FLEN)
NAN_BOXED(2077844162,32,FLEN)
NAN_BOXED(1125563539,32,FLEN)
NAN_BOXED(1845495807,32,FLEN)
NAN_BOXED(2077844162,32,FLEN)
NAN_BOXED(1125563539,32,FLEN)
NAN_BOXED(1845497855,32,FLEN)
NAN_BOXED(2077844162,32,FLEN)
NAN_BOXED(1125563539,32,FLEN)
NAN_BOXED(1845501951,32,FLEN)
NAN_BOXED(2077844162,32,FLEN)
NAN_BOXED(1125563539,32,FLEN)
NAN_BOXED(1845510143,32,FLEN)
NAN_BOXED(2077844162,32,FLEN)
NAN_BOXED(1125563539,32,FLEN)
NAN_BOXED(1845526527,32,FLEN)
NAN_BOXED(2077844162,32,FLEN)
NAN_BOXED(1125563539,32,FLEN)
NAN_BOXED(1845559295,32,FLEN)
NAN_BOXED(2077844162,32,FLEN)
NAN_BOXED(1125563539,32,FLEN)
NAN_BOXED(1845624831,32,FLEN)
NAN_BOXED(2077844162,32,FLEN)
NAN_BOXED(1125563539,32,FLEN)
NAN_BOXED(1845755903,32,FLEN)
NAN_BOXED(2077844162,32,FLEN)
NAN_BOXED(1125563539,32,FLEN)
NAN_BOXED(1846018047,32,FLEN)
NAN_BOXED(2077844162,32,FLEN)
NAN_BOXED(1125563539,32,FLEN)
NAN_BOXED(1846542335,32,FLEN)
NAN_BOXED(2077844162,32,FLEN)
NAN_BOXED(1125563539,32,FLEN)
NAN_BOXED(1847590911,32,FLEN)
NAN_BOXED(2077844162,32,FLEN)
NAN_BOXED(1125563539,32,FLEN)
NAN_BOXED(1849688063,32,FLEN)
NAN_BOXED(2077844162,32,FLEN)
NAN_BOXED(1125563539,32,FLEN)
NAN_BOXED(1849688064,32,FLEN)
NAN_BOXED(2077844162,32,FLEN)
NAN_BOXED(1125563539,32,FLEN)
NAN_BOXED(1851785216,32,FLEN)
NAN_BOXED(2077844162,32,FLEN)
NAN_BOXED(1125563539,32,FLEN)
NAN_BOXED(1852833792,32,FLEN)
NAN_BOXED(2077844162,32,FLEN)
NAN_BOXED(1125563539,32,FLEN)
NAN_BOXED(1853358080,32,FLEN)
NAN_BOXED(2077844162,32,FLEN)
NAN_BOXED(1125563539,32,FLEN)
NAN_BOXED(1853620224,32,FLEN)
NAN_BOXED(2077844162,32,FLEN)
NAN_BOXED(1125563539,32,FLEN)
NAN_BOXED(1853751296,32,FLEN)
NAN_BOXED(2077844162,32,FLEN)
NAN_BOXED(1125563539,32,FLEN)
NAN_BOXED(1853816832,32,FLEN)
NAN_BOXED(2077844162,32,FLEN)
NAN_BOXED(1125563539,32,FLEN)
NAN_BOXED(1853849600,32,FLEN)
NAN_BOXED(2077844162,32,FLEN)
NAN_BOXED(1125563539,32,FLEN)
NAN_BOXED(1853865984,32,FLEN)
NAN_BOXED(2077844162,32,FLEN)
NAN_BOXED(1125563539,32,FLEN)
NAN_BOXED(1853874176,32,FLEN)
NAN_BOXED(2077844162,32,FLEN)
NAN_BOXED(1125563539,32,FLEN)
NAN_BOXED(1853878272,32,FLEN)
NAN_BOXED(2077844162,32,FLEN)
NAN_BOXED(1125563539,32,FLEN)
NAN_BOXED(1853880320,32,FLEN)
NAN_BOXED(2077844162,32,FLEN)
NAN_BOXED(1125563539,32,FLEN)
NAN_BOXED(1853881344,32,FLEN)
NAN_BOXED(2077844162,32,FLEN)
NAN_BOXED(1125563539,32,FLEN)
NAN_BOXED(1853881856,32,FLEN)
NAN_BOXED(2077844162,32,FLEN)
NAN_BOXED(1125563539,32,FLEN)
NAN_BOXED(1853882112,32,FLEN)
NAN_BOXED(2077844162,32,FLEN)
NAN_BOXED(1125563539,32,FLEN)
NAN_BOXED(1853882240,32,FLEN)
NAN_BOXED(2077844162,32,FLEN)
NAN_BOXED(1125563539,32,FLEN)
NAN_BOXED(1853882304,32,FLEN)
NAN_BOXED(2077844162,32,FLEN)
NAN_BOXED(1125563539,32,FLEN)
NAN_BOXED(1853882336,32,FLEN)
NAN_BOXED(2077844162,32,FLEN)
NAN_BOXED(1125563539,32,FLEN)
NAN_BOXED(1853882352,32,FLEN)
NAN_BOXED(2077844162,32,FLEN)
NAN_BOXED(1125563539,32,FLEN)
NAN_BOXED(1853882360,32,FLEN)
NAN_BOXED(2077844162,32,FLEN)
NAN_BOXED(1125563539,32,FLEN)
NAN_BOXED(1853882364,32,FLEN)
NAN_BOXED(2077844162,32,FLEN)
NAN_BOXED(1125563539,32,FLEN)
NAN_BOXED(1853882366,32,FLEN)
NAN_BOXED(2077844162,32,FLEN)
NAN_BOXED(1125563539,32,FLEN)
NAN_BOXED(1853882367,32,FLEN)
NAN_BOXED(2077844162,32,FLEN)
NAN_BOXED(1125563539,32,FLEN)
NAN_BOXED(2130706433,32,FLEN)
NAN_BOXED(2077844162,32,FLEN)
NAN_BOXED(1125563539,32,FLEN)
NAN_BOXED(2130706435,32,FLEN)
NAN_BOXED(2077844162,32,FLEN)
NAN_BOXED(1125563539,32,FLEN)
NAN_BOXED(2130706439,32,FLEN)
NAN_BOXED(2077844162,32,FLEN)
NAN_BOXED(1125563539,32,FLEN)
NAN_BOXED(2132384153,32,FLEN)
NAN_BOXED(2077844162,32,FLEN)
NAN_BOXED(1125563539,32,FLEN)
NAN_BOXED(2133103177,32,FLEN)
NAN_BOXED(2077844162,32,FLEN)
NAN_BOXED(1125563539,32,FLEN)
NAN_BOXED(2134061875,32,FLEN)
NAN_BOXED(2077844162,32,FLEN)
NAN_BOXED(1125563539,32,FLEN)
NAN_BOXED(2134301549,32,FLEN)
NAN_BOXED(2077844162,32,FLEN)
NAN_BOXED(1125563539,32,FLEN)
NAN_BOXED(2134621115,32,FLEN)
NAN_BOXED(2077844162,32,FLEN)
NAN_BOXED(1125563539,32,FLEN)
NAN_BOXED(2135180356,32,FLEN)
NAN_BOXED(2077844162,32,FLEN)
NAN_BOXED(1125563539,32,FLEN)
NAN_BOXED(2135739596,32,FLEN)
NAN_BOXED(2077844162,32,FLEN)
NAN_BOXED(1125563539,32,FLEN)
NAN_BOXED(2136698294,32,FLEN)
NAN_BOXED(2077844162,32,FLEN)
NAN_BOXED(1125563539,32,FLEN)
NAN_BOXED(2137417318,32,FLEN)
NAN_BOXED(2077844162,32,FLEN)
NAN_BOXED(1125563539,32,FLEN)
NAN_BOXED(2137896667,32,FLEN)
NAN_BOXED(2077844162,32,FLEN)
NAN_BOXED(1125563539,32,FLEN)
NAN_BOXED(2139095032,32,FLEN)
NAN_BOXED(2077844162,32,FLEN)
NAN_BOXED(1125563539,32,FLEN)
NAN_BOXED(2139095036,32,FLEN)
NAN_BOXED(2077844162,32,FLEN)
NAN_BOXED(1125563539,32,FLEN)
NAN_BOXED(2139095038,32,FLEN)
NAN_BOXED(2084668280,32,FLEN)
NAN_BOXED(3265877232,32,FLEN)
NAN_BOXED(4253024256,32,FLEN)
NAN_BOXED(2084668280,32,FLEN)
NAN_BOXED(3265877232,32,FLEN)
NAN_BOXED(4253024257,32,FLEN)
NAN_BOXED(2084668280,32,FLEN)
NAN_BOXED(3265877232,32,FLEN)
NAN_BOXED(4253024259,32,FLEN)
NAN_BOXED(2084668280,32,FLEN)
NAN_BOXED(3265877232,32,FLEN)
NAN_BOXED(4253024263,32,FLEN)
NAN_BOXED(2084668280,32,FLEN)
NAN_BOXED(3265877232,32,FLEN)
NAN_BOXED(4253024271,32,FLEN)
NAN_BOXED(2084668280,32,FLEN)
NAN_BOXED(3265877232,32,FLEN)
NAN_BOXED(4253024287,32,FLEN)
NAN_BOXED(2084668280,32,FLEN)
NAN_BOXED(3265877232,32,FLEN)
NAN_BOXED(4253024319,32,FLEN)
NAN_BOXED(2084668280,32,FLEN)
NAN_BOXED(3265877232,32,FLEN)
NAN_BOXED(4253024383,32,FLEN)
NAN_BOXED(2084668280,32,FLEN)
NAN_BOXED(3265877232,32,FLEN)
NAN_BOXED(4253024511,32,FLEN)
NAN_BOXED(2084668280,32,FLEN)
NAN_BOXED(3265877232,32,FLEN)
NAN_BOXED(4253024767,32,FLEN)
NAN_BOXED(2084668280,32,FLEN)
NAN_BOXED(3265877232,32,FLEN)
NAN_BOXED(4253025279,32,FLEN)
NAN_BOXED(2084668280,32,FLEN)
NAN_BOXED(3265877232,32,FLEN)
NAN_BOXED(4253026303,32,FLEN)
NAN_BOXED(2084668280,32,FLEN)
NAN_BOXED(3265877232,32,FLEN)
NAN_BOXED(4253028351,32,FLEN)
NAN_BOXED(2084668280,32,FLEN)
NAN_BOXED(3265877232,32,FLEN)
NAN_BOXED(4253032447,32,FLEN)
NAN_BOXED(2084668280,32,FLEN)
NAN_BOXED(3265877232,32,FLEN)
NAN_BOXED(4253040639,32,FLEN)
NAN_BOXED(2084668280,32,FLEN)
NAN_BOXED(3265877232,32,FLEN)
NAN_BOXED(4253057023,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
