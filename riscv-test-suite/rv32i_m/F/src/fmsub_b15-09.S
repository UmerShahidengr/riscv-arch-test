
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:07 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_1024:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x14b552 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x5c59d1 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c94b552; op2val:0x25c59d1;
op3val:0x3e7fe000; valaddr_reg:x3; val_offset:3072*0 + 3*8*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3072*0 + 3*8*FLEN/8, x4, x1, x2)

inst_1025:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x14b552 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x5c59d1 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c94b552; op2val:0x25c59d1;
op3val:0x3e7ff000; valaddr_reg:x3; val_offset:3075*0 + 3*8*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3075*0 + 3*8*FLEN/8, x4, x1, x2)

inst_1026:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x14b552 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x5c59d1 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c94b552; op2val:0x25c59d1;
op3val:0x3e7ff800; valaddr_reg:x3; val_offset:3078*0 + 3*8*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3078*0 + 3*8*FLEN/8, x4, x1, x2)

inst_1027:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x14b552 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x5c59d1 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c94b552; op2val:0x25c59d1;
op3val:0x3e7ffc00; valaddr_reg:x3; val_offset:3081*0 + 3*8*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3081*0 + 3*8*FLEN/8, x4, x1, x2)

inst_1028:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x14b552 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x5c59d1 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c94b552; op2val:0x25c59d1;
op3val:0x3e7ffe00; valaddr_reg:x3; val_offset:3084*0 + 3*8*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3084*0 + 3*8*FLEN/8, x4, x1, x2)

inst_1029:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x14b552 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x5c59d1 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c94b552; op2val:0x25c59d1;
op3val:0x3e7fff00; valaddr_reg:x3; val_offset:3087*0 + 3*8*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3087*0 + 3*8*FLEN/8, x4, x1, x2)

inst_1030:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x14b552 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x5c59d1 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c94b552; op2val:0x25c59d1;
op3val:0x3e7fff80; valaddr_reg:x3; val_offset:3090*0 + 3*8*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3090*0 + 3*8*FLEN/8, x4, x1, x2)

inst_1031:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x14b552 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x5c59d1 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c94b552; op2val:0x25c59d1;
op3val:0x3e7fffc0; valaddr_reg:x3; val_offset:3093*0 + 3*8*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3093*0 + 3*8*FLEN/8, x4, x1, x2)

inst_1032:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x14b552 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x5c59d1 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c94b552; op2val:0x25c59d1;
op3val:0x3e7fffe0; valaddr_reg:x3; val_offset:3096*0 + 3*8*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3096*0 + 3*8*FLEN/8, x4, x1, x2)

inst_1033:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x14b552 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x5c59d1 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c94b552; op2val:0x25c59d1;
op3val:0x3e7ffff0; valaddr_reg:x3; val_offset:3099*0 + 3*8*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3099*0 + 3*8*FLEN/8, x4, x1, x2)

inst_1034:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x14b552 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x5c59d1 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c94b552; op2val:0x25c59d1;
op3val:0x3e7ffff8; valaddr_reg:x3; val_offset:3102*0 + 3*8*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3102*0 + 3*8*FLEN/8, x4, x1, x2)

inst_1035:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x14b552 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x5c59d1 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c94b552; op2val:0x25c59d1;
op3val:0x3e7ffffc; valaddr_reg:x3; val_offset:3105*0 + 3*8*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3105*0 + 3*8*FLEN/8, x4, x1, x2)

inst_1036:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x14b552 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x5c59d1 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c94b552; op2val:0x25c59d1;
op3val:0x3e7ffffe; valaddr_reg:x3; val_offset:3108*0 + 3*8*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3108*0 + 3*8*FLEN/8, x4, x1, x2)

inst_1037:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x14b552 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x5c59d1 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c94b552; op2val:0x25c59d1;
op3val:0x3e7fffff; valaddr_reg:x3; val_offset:3111*0 + 3*8*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3111*0 + 3*8*FLEN/8, x4, x1, x2)

inst_1038:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x14b552 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x5c59d1 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c94b552; op2val:0x25c59d1;
op3val:0x3f800001; valaddr_reg:x3; val_offset:3114*0 + 3*8*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3114*0 + 3*8*FLEN/8, x4, x1, x2)

inst_1039:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x14b552 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x5c59d1 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c94b552; op2val:0x25c59d1;
op3val:0x3f800003; valaddr_reg:x3; val_offset:3117*0 + 3*8*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3117*0 + 3*8*FLEN/8, x4, x1, x2)

inst_1040:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x14b552 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x5c59d1 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c94b552; op2val:0x25c59d1;
op3val:0x3f800007; valaddr_reg:x3; val_offset:3120*0 + 3*8*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3120*0 + 3*8*FLEN/8, x4, x1, x2)

inst_1041:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x14b552 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x5c59d1 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c94b552; op2val:0x25c59d1;
op3val:0x3f999999; valaddr_reg:x3; val_offset:3123*0 + 3*8*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3123*0 + 3*8*FLEN/8, x4, x1, x2)

inst_1042:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x14b552 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x5c59d1 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c94b552; op2val:0x25c59d1;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:3126*0 + 3*8*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3126*0 + 3*8*FLEN/8, x4, x1, x2)

inst_1043:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x14b552 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x5c59d1 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c94b552; op2val:0x25c59d1;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:3129*0 + 3*8*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3129*0 + 3*8*FLEN/8, x4, x1, x2)

inst_1044:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x14b552 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x5c59d1 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c94b552; op2val:0x25c59d1;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:3132*0 + 3*8*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3132*0 + 3*8*FLEN/8, x4, x1, x2)

inst_1045:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x14b552 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x5c59d1 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c94b552; op2val:0x25c59d1;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:3135*0 + 3*8*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3135*0 + 3*8*FLEN/8, x4, x1, x2)

inst_1046:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x14b552 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x5c59d1 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c94b552; op2val:0x25c59d1;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:3138*0 + 3*8*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3138*0 + 3*8*FLEN/8, x4, x1, x2)

inst_1047:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x14b552 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x5c59d1 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c94b552; op2val:0x25c59d1;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:3141*0 + 3*8*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3141*0 + 3*8*FLEN/8, x4, x1, x2)

inst_1048:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x14b552 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x5c59d1 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c94b552; op2val:0x25c59d1;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:3144*0 + 3*8*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3144*0 + 3*8*FLEN/8, x4, x1, x2)

inst_1049:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x14b552 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x5c59d1 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c94b552; op2val:0x25c59d1;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:3147*0 + 3*8*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3147*0 + 3*8*FLEN/8, x4, x1, x2)

inst_1050:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x14b552 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x5c59d1 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c94b552; op2val:0x25c59d1;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:3150*0 + 3*8*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3150*0 + 3*8*FLEN/8, x4, x1, x2)

inst_1051:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x14b552 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x5c59d1 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c94b552; op2val:0x25c59d1;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:3153*0 + 3*8*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3153*0 + 3*8*FLEN/8, x4, x1, x2)

inst_1052:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x14b552 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x5c59d1 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c94b552; op2val:0x25c59d1;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:3156*0 + 3*8*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3156*0 + 3*8*FLEN/8, x4, x1, x2)

inst_1053:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x14b552 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x5c59d1 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c94b552; op2val:0x25c59d1;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:3159*0 + 3*8*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3159*0 + 3*8*FLEN/8, x4, x1, x2)

inst_1054:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x1628f6 and fs2 == 1 and fe2 == 0x04 and fm2 == 0x5a3876 and fs3 == 1 and fe3 == 0x42 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c9628f6; op2val:0x825a3876;
op3val:0xa1000000; valaddr_reg:x3; val_offset:3162*0 + 3*8*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3162*0 + 3*8*FLEN/8, x4, x1, x2)

inst_1055:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x1628f6 and fs2 == 1 and fe2 == 0x04 and fm2 == 0x5a3876 and fs3 == 1 and fe3 == 0x42 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c9628f6; op2val:0x825a3876;
op3val:0xa1000001; valaddr_reg:x3; val_offset:3165*0 + 3*8*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3165*0 + 3*8*FLEN/8, x4, x1, x2)

inst_1056:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x1628f6 and fs2 == 1 and fe2 == 0x04 and fm2 == 0x5a3876 and fs3 == 1 and fe3 == 0x42 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c9628f6; op2val:0x825a3876;
op3val:0xa1000003; valaddr_reg:x3; val_offset:3168*0 + 3*8*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3168*0 + 3*8*FLEN/8, x4, x1, x2)

inst_1057:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x1628f6 and fs2 == 1 and fe2 == 0x04 and fm2 == 0x5a3876 and fs3 == 1 and fe3 == 0x42 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c9628f6; op2val:0x825a3876;
op3val:0xa1000007; valaddr_reg:x3; val_offset:3171*0 + 3*8*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3171*0 + 3*8*FLEN/8, x4, x1, x2)

inst_1058:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x1628f6 and fs2 == 1 and fe2 == 0x04 and fm2 == 0x5a3876 and fs3 == 1 and fe3 == 0x42 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c9628f6; op2val:0x825a3876;
op3val:0xa100000f; valaddr_reg:x3; val_offset:3174*0 + 3*8*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3174*0 + 3*8*FLEN/8, x4, x1, x2)

inst_1059:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x1628f6 and fs2 == 1 and fe2 == 0x04 and fm2 == 0x5a3876 and fs3 == 1 and fe3 == 0x42 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c9628f6; op2val:0x825a3876;
op3val:0xa100001f; valaddr_reg:x3; val_offset:3177*0 + 3*8*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3177*0 + 3*8*FLEN/8, x4, x1, x2)

inst_1060:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x1628f6 and fs2 == 1 and fe2 == 0x04 and fm2 == 0x5a3876 and fs3 == 1 and fe3 == 0x42 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c9628f6; op2val:0x825a3876;
op3val:0xa100003f; valaddr_reg:x3; val_offset:3180*0 + 3*8*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3180*0 + 3*8*FLEN/8, x4, x1, x2)

inst_1061:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x1628f6 and fs2 == 1 and fe2 == 0x04 and fm2 == 0x5a3876 and fs3 == 1 and fe3 == 0x42 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c9628f6; op2val:0x825a3876;
op3val:0xa100007f; valaddr_reg:x3; val_offset:3183*0 + 3*8*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3183*0 + 3*8*FLEN/8, x4, x1, x2)

inst_1062:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x1628f6 and fs2 == 1 and fe2 == 0x04 and fm2 == 0x5a3876 and fs3 == 1 and fe3 == 0x42 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c9628f6; op2val:0x825a3876;
op3val:0xa10000ff; valaddr_reg:x3; val_offset:3186*0 + 3*8*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3186*0 + 3*8*FLEN/8, x4, x1, x2)

inst_1063:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x1628f6 and fs2 == 1 and fe2 == 0x04 and fm2 == 0x5a3876 and fs3 == 1 and fe3 == 0x42 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c9628f6; op2val:0x825a3876;
op3val:0xa10001ff; valaddr_reg:x3; val_offset:3189*0 + 3*8*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3189*0 + 3*8*FLEN/8, x4, x1, x2)

inst_1064:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x1628f6 and fs2 == 1 and fe2 == 0x04 and fm2 == 0x5a3876 and fs3 == 1 and fe3 == 0x42 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c9628f6; op2val:0x825a3876;
op3val:0xa10003ff; valaddr_reg:x3; val_offset:3192*0 + 3*8*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3192*0 + 3*8*FLEN/8, x4, x1, x2)

inst_1065:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x1628f6 and fs2 == 1 and fe2 == 0x04 and fm2 == 0x5a3876 and fs3 == 1 and fe3 == 0x42 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c9628f6; op2val:0x825a3876;
op3val:0xa10007ff; valaddr_reg:x3; val_offset:3195*0 + 3*8*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3195*0 + 3*8*FLEN/8, x4, x1, x2)

inst_1066:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x1628f6 and fs2 == 1 and fe2 == 0x04 and fm2 == 0x5a3876 and fs3 == 1 and fe3 == 0x42 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c9628f6; op2val:0x825a3876;
op3val:0xa1000fff; valaddr_reg:x3; val_offset:3198*0 + 3*8*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3198*0 + 3*8*FLEN/8, x4, x1, x2)

inst_1067:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x1628f6 and fs2 == 1 and fe2 == 0x04 and fm2 == 0x5a3876 and fs3 == 1 and fe3 == 0x42 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c9628f6; op2val:0x825a3876;
op3val:0xa1001fff; valaddr_reg:x3; val_offset:3201*0 + 3*8*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3201*0 + 3*8*FLEN/8, x4, x1, x2)

inst_1068:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x1628f6 and fs2 == 1 and fe2 == 0x04 and fm2 == 0x5a3876 and fs3 == 1 and fe3 == 0x42 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c9628f6; op2val:0x825a3876;
op3val:0xa1003fff; valaddr_reg:x3; val_offset:3204*0 + 3*8*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3204*0 + 3*8*FLEN/8, x4, x1, x2)

inst_1069:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x1628f6 and fs2 == 1 and fe2 == 0x04 and fm2 == 0x5a3876 and fs3 == 1 and fe3 == 0x42 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c9628f6; op2val:0x825a3876;
op3val:0xa1007fff; valaddr_reg:x3; val_offset:3207*0 + 3*8*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3207*0 + 3*8*FLEN/8, x4, x1, x2)

inst_1070:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x1628f6 and fs2 == 1 and fe2 == 0x04 and fm2 == 0x5a3876 and fs3 == 1 and fe3 == 0x42 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c9628f6; op2val:0x825a3876;
op3val:0xa100ffff; valaddr_reg:x3; val_offset:3210*0 + 3*8*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3210*0 + 3*8*FLEN/8, x4, x1, x2)

inst_1071:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x1628f6 and fs2 == 1 and fe2 == 0x04 and fm2 == 0x5a3876 and fs3 == 1 and fe3 == 0x42 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c9628f6; op2val:0x825a3876;
op3val:0xa101ffff; valaddr_reg:x3; val_offset:3213*0 + 3*8*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3213*0 + 3*8*FLEN/8, x4, x1, x2)

inst_1072:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x1628f6 and fs2 == 1 and fe2 == 0x04 and fm2 == 0x5a3876 and fs3 == 1 and fe3 == 0x42 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c9628f6; op2val:0x825a3876;
op3val:0xa103ffff; valaddr_reg:x3; val_offset:3216*0 + 3*8*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3216*0 + 3*8*FLEN/8, x4, x1, x2)

inst_1073:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x1628f6 and fs2 == 1 and fe2 == 0x04 and fm2 == 0x5a3876 and fs3 == 1 and fe3 == 0x42 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c9628f6; op2val:0x825a3876;
op3val:0xa107ffff; valaddr_reg:x3; val_offset:3219*0 + 3*8*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3219*0 + 3*8*FLEN/8, x4, x1, x2)

inst_1074:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x1628f6 and fs2 == 1 and fe2 == 0x04 and fm2 == 0x5a3876 and fs3 == 1 and fe3 == 0x42 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c9628f6; op2val:0x825a3876;
op3val:0xa10fffff; valaddr_reg:x3; val_offset:3222*0 + 3*8*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3222*0 + 3*8*FLEN/8, x4, x1, x2)

inst_1075:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x1628f6 and fs2 == 1 and fe2 == 0x04 and fm2 == 0x5a3876 and fs3 == 1 and fe3 == 0x42 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c9628f6; op2val:0x825a3876;
op3val:0xa11fffff; valaddr_reg:x3; val_offset:3225*0 + 3*8*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3225*0 + 3*8*FLEN/8, x4, x1, x2)

inst_1076:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x1628f6 and fs2 == 1 and fe2 == 0x04 and fm2 == 0x5a3876 and fs3 == 1 and fe3 == 0x42 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c9628f6; op2val:0x825a3876;
op3val:0xa13fffff; valaddr_reg:x3; val_offset:3228*0 + 3*8*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3228*0 + 3*8*FLEN/8, x4, x1, x2)

inst_1077:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x1628f6 and fs2 == 1 and fe2 == 0x04 and fm2 == 0x5a3876 and fs3 == 1 and fe3 == 0x42 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c9628f6; op2val:0x825a3876;
op3val:0xa1400000; valaddr_reg:x3; val_offset:3231*0 + 3*8*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3231*0 + 3*8*FLEN/8, x4, x1, x2)

inst_1078:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x1628f6 and fs2 == 1 and fe2 == 0x04 and fm2 == 0x5a3876 and fs3 == 1 and fe3 == 0x42 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c9628f6; op2val:0x825a3876;
op3val:0xa1600000; valaddr_reg:x3; val_offset:3234*0 + 3*8*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3234*0 + 3*8*FLEN/8, x4, x1, x2)

inst_1079:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x1628f6 and fs2 == 1 and fe2 == 0x04 and fm2 == 0x5a3876 and fs3 == 1 and fe3 == 0x42 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c9628f6; op2val:0x825a3876;
op3val:0xa1700000; valaddr_reg:x3; val_offset:3237*0 + 3*8*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3237*0 + 3*8*FLEN/8, x4, x1, x2)

inst_1080:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x1628f6 and fs2 == 1 and fe2 == 0x04 and fm2 == 0x5a3876 and fs3 == 1 and fe3 == 0x42 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c9628f6; op2val:0x825a3876;
op3val:0xa1780000; valaddr_reg:x3; val_offset:3240*0 + 3*8*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3240*0 + 3*8*FLEN/8, x4, x1, x2)

inst_1081:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x1628f6 and fs2 == 1 and fe2 == 0x04 and fm2 == 0x5a3876 and fs3 == 1 and fe3 == 0x42 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c9628f6; op2val:0x825a3876;
op3val:0xa17c0000; valaddr_reg:x3; val_offset:3243*0 + 3*8*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3243*0 + 3*8*FLEN/8, x4, x1, x2)

inst_1082:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x1628f6 and fs2 == 1 and fe2 == 0x04 and fm2 == 0x5a3876 and fs3 == 1 and fe3 == 0x42 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c9628f6; op2val:0x825a3876;
op3val:0xa17e0000; valaddr_reg:x3; val_offset:3246*0 + 3*8*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3246*0 + 3*8*FLEN/8, x4, x1, x2)

inst_1083:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x1628f6 and fs2 == 1 and fe2 == 0x04 and fm2 == 0x5a3876 and fs3 == 1 and fe3 == 0x42 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c9628f6; op2val:0x825a3876;
op3val:0xa17f0000; valaddr_reg:x3; val_offset:3249*0 + 3*8*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3249*0 + 3*8*FLEN/8, x4, x1, x2)

inst_1084:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x1628f6 and fs2 == 1 and fe2 == 0x04 and fm2 == 0x5a3876 and fs3 == 1 and fe3 == 0x42 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c9628f6; op2val:0x825a3876;
op3val:0xa17f8000; valaddr_reg:x3; val_offset:3252*0 + 3*8*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3252*0 + 3*8*FLEN/8, x4, x1, x2)

inst_1085:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x1628f6 and fs2 == 1 and fe2 == 0x04 and fm2 == 0x5a3876 and fs3 == 1 and fe3 == 0x42 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c9628f6; op2val:0x825a3876;
op3val:0xa17fc000; valaddr_reg:x3; val_offset:3255*0 + 3*8*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3255*0 + 3*8*FLEN/8, x4, x1, x2)

inst_1086:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x1628f6 and fs2 == 1 and fe2 == 0x04 and fm2 == 0x5a3876 and fs3 == 1 and fe3 == 0x42 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c9628f6; op2val:0x825a3876;
op3val:0xa17fe000; valaddr_reg:x3; val_offset:3258*0 + 3*8*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3258*0 + 3*8*FLEN/8, x4, x1, x2)

inst_1087:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x1628f6 and fs2 == 1 and fe2 == 0x04 and fm2 == 0x5a3876 and fs3 == 1 and fe3 == 0x42 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c9628f6; op2val:0x825a3876;
op3val:0xa17ff000; valaddr_reg:x3; val_offset:3261*0 + 3*8*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3261*0 + 3*8*FLEN/8, x4, x1, x2)

inst_1088:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x1628f6 and fs2 == 1 and fe2 == 0x04 and fm2 == 0x5a3876 and fs3 == 1 and fe3 == 0x42 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c9628f6; op2val:0x825a3876;
op3val:0xa17ff800; valaddr_reg:x3; val_offset:3264*0 + 3*8*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3264*0 + 3*8*FLEN/8, x4, x1, x2)

inst_1089:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x1628f6 and fs2 == 1 and fe2 == 0x04 and fm2 == 0x5a3876 and fs3 == 1 and fe3 == 0x42 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c9628f6; op2val:0x825a3876;
op3val:0xa17ffc00; valaddr_reg:x3; val_offset:3267*0 + 3*8*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3267*0 + 3*8*FLEN/8, x4, x1, x2)

inst_1090:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x1628f6 and fs2 == 1 and fe2 == 0x04 and fm2 == 0x5a3876 and fs3 == 1 and fe3 == 0x42 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c9628f6; op2val:0x825a3876;
op3val:0xa17ffe00; valaddr_reg:x3; val_offset:3270*0 + 3*8*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3270*0 + 3*8*FLEN/8, x4, x1, x2)

inst_1091:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x1628f6 and fs2 == 1 and fe2 == 0x04 and fm2 == 0x5a3876 and fs3 == 1 and fe3 == 0x42 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c9628f6; op2val:0x825a3876;
op3val:0xa17fff00; valaddr_reg:x3; val_offset:3273*0 + 3*8*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3273*0 + 3*8*FLEN/8, x4, x1, x2)

inst_1092:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x1628f6 and fs2 == 1 and fe2 == 0x04 and fm2 == 0x5a3876 and fs3 == 1 and fe3 == 0x42 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c9628f6; op2val:0x825a3876;
op3val:0xa17fff80; valaddr_reg:x3; val_offset:3276*0 + 3*8*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3276*0 + 3*8*FLEN/8, x4, x1, x2)

inst_1093:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x1628f6 and fs2 == 1 and fe2 == 0x04 and fm2 == 0x5a3876 and fs3 == 1 and fe3 == 0x42 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c9628f6; op2val:0x825a3876;
op3val:0xa17fffc0; valaddr_reg:x3; val_offset:3279*0 + 3*8*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3279*0 + 3*8*FLEN/8, x4, x1, x2)

inst_1094:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x1628f6 and fs2 == 1 and fe2 == 0x04 and fm2 == 0x5a3876 and fs3 == 1 and fe3 == 0x42 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c9628f6; op2val:0x825a3876;
op3val:0xa17fffe0; valaddr_reg:x3; val_offset:3282*0 + 3*8*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3282*0 + 3*8*FLEN/8, x4, x1, x2)

inst_1095:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x1628f6 and fs2 == 1 and fe2 == 0x04 and fm2 == 0x5a3876 and fs3 == 1 and fe3 == 0x42 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c9628f6; op2val:0x825a3876;
op3val:0xa17ffff0; valaddr_reg:x3; val_offset:3285*0 + 3*8*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3285*0 + 3*8*FLEN/8, x4, x1, x2)

inst_1096:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x1628f6 and fs2 == 1 and fe2 == 0x04 and fm2 == 0x5a3876 and fs3 == 1 and fe3 == 0x42 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c9628f6; op2val:0x825a3876;
op3val:0xa17ffff8; valaddr_reg:x3; val_offset:3288*0 + 3*8*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3288*0 + 3*8*FLEN/8, x4, x1, x2)

inst_1097:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x1628f6 and fs2 == 1 and fe2 == 0x04 and fm2 == 0x5a3876 and fs3 == 1 and fe3 == 0x42 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c9628f6; op2val:0x825a3876;
op3val:0xa17ffffc; valaddr_reg:x3; val_offset:3291*0 + 3*8*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3291*0 + 3*8*FLEN/8, x4, x1, x2)

inst_1098:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x1628f6 and fs2 == 1 and fe2 == 0x04 and fm2 == 0x5a3876 and fs3 == 1 and fe3 == 0x42 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c9628f6; op2val:0x825a3876;
op3val:0xa17ffffe; valaddr_reg:x3; val_offset:3294*0 + 3*8*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3294*0 + 3*8*FLEN/8, x4, x1, x2)

inst_1099:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x1628f6 and fs2 == 1 and fe2 == 0x04 and fm2 == 0x5a3876 and fs3 == 1 and fe3 == 0x42 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c9628f6; op2val:0x825a3876;
op3val:0xa17fffff; valaddr_reg:x3; val_offset:3297*0 + 3*8*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3297*0 + 3*8*FLEN/8, x4, x1, x2)

inst_1100:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x1628f6 and fs2 == 1 and fe2 == 0x04 and fm2 == 0x5a3876 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c9628f6; op2val:0x825a3876;
op3val:0xbf800001; valaddr_reg:x3; val_offset:3300*0 + 3*8*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3300*0 + 3*8*FLEN/8, x4, x1, x2)

inst_1101:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x1628f6 and fs2 == 1 and fe2 == 0x04 and fm2 == 0x5a3876 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c9628f6; op2val:0x825a3876;
op3val:0xbf800003; valaddr_reg:x3; val_offset:3303*0 + 3*8*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3303*0 + 3*8*FLEN/8, x4, x1, x2)

inst_1102:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x1628f6 and fs2 == 1 and fe2 == 0x04 and fm2 == 0x5a3876 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c9628f6; op2val:0x825a3876;
op3val:0xbf800007; valaddr_reg:x3; val_offset:3306*0 + 3*8*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3306*0 + 3*8*FLEN/8, x4, x1, x2)

inst_1103:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x1628f6 and fs2 == 1 and fe2 == 0x04 and fm2 == 0x5a3876 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c9628f6; op2val:0x825a3876;
op3val:0xbf999999; valaddr_reg:x3; val_offset:3309*0 + 3*8*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3309*0 + 3*8*FLEN/8, x4, x1, x2)

inst_1104:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x1628f6 and fs2 == 1 and fe2 == 0x04 and fm2 == 0x5a3876 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c9628f6; op2val:0x825a3876;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:3312*0 + 3*8*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3312*0 + 3*8*FLEN/8, x4, x1, x2)

inst_1105:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x1628f6 and fs2 == 1 and fe2 == 0x04 and fm2 == 0x5a3876 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c9628f6; op2val:0x825a3876;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:3315*0 + 3*8*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3315*0 + 3*8*FLEN/8, x4, x1, x2)

inst_1106:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x1628f6 and fs2 == 1 and fe2 == 0x04 and fm2 == 0x5a3876 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c9628f6; op2val:0x825a3876;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:3318*0 + 3*8*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3318*0 + 3*8*FLEN/8, x4, x1, x2)

inst_1107:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x1628f6 and fs2 == 1 and fe2 == 0x04 and fm2 == 0x5a3876 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c9628f6; op2val:0x825a3876;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:3321*0 + 3*8*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3321*0 + 3*8*FLEN/8, x4, x1, x2)

inst_1108:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x1628f6 and fs2 == 1 and fe2 == 0x04 and fm2 == 0x5a3876 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c9628f6; op2val:0x825a3876;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:3324*0 + 3*8*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3324*0 + 3*8*FLEN/8, x4, x1, x2)

inst_1109:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x1628f6 and fs2 == 1 and fe2 == 0x04 and fm2 == 0x5a3876 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c9628f6; op2val:0x825a3876;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:3327*0 + 3*8*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3327*0 + 3*8*FLEN/8, x4, x1, x2)

inst_1110:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x1628f6 and fs2 == 1 and fe2 == 0x04 and fm2 == 0x5a3876 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c9628f6; op2val:0x825a3876;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:3330*0 + 3*8*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3330*0 + 3*8*FLEN/8, x4, x1, x2)

inst_1111:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x1628f6 and fs2 == 1 and fe2 == 0x04 and fm2 == 0x5a3876 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c9628f6; op2val:0x825a3876;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:3333*0 + 3*8*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3333*0 + 3*8*FLEN/8, x4, x1, x2)

inst_1112:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x1628f6 and fs2 == 1 and fe2 == 0x04 and fm2 == 0x5a3876 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c9628f6; op2val:0x825a3876;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:3336*0 + 3*8*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3336*0 + 3*8*FLEN/8, x4, x1, x2)

inst_1113:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x1628f6 and fs2 == 1 and fe2 == 0x04 and fm2 == 0x5a3876 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c9628f6; op2val:0x825a3876;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:3339*0 + 3*8*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3339*0 + 3*8*FLEN/8, x4, x1, x2)

inst_1114:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x1628f6 and fs2 == 1 and fe2 == 0x04 and fm2 == 0x5a3876 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c9628f6; op2val:0x825a3876;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:3342*0 + 3*8*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3342*0 + 3*8*FLEN/8, x4, x1, x2)

inst_1115:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x1628f6 and fs2 == 1 and fe2 == 0x04 and fm2 == 0x5a3876 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c9628f6; op2val:0x825a3876;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:3345*0 + 3*8*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3345*0 + 3*8*FLEN/8, x4, x1, x2)

inst_1116:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x289f06 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ca89f06; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:3348*0 + 3*8*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3348*0 + 3*8*FLEN/8, x4, x1, x2)

inst_1117:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x289f06 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ca89f06; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:3351*0 + 3*8*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3351*0 + 3*8*FLEN/8, x4, x1, x2)

inst_1118:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x289f06 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ca89f06; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:3354*0 + 3*8*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3354*0 + 3*8*FLEN/8, x4, x1, x2)

inst_1119:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x289f06 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ca89f06; op2val:0x0;
op3val:0x199999; valaddr_reg:x3; val_offset:3357*0 + 3*8*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3357*0 + 3*8*FLEN/8, x4, x1, x2)

inst_1120:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x289f06 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ca89f06; op2val:0x0;
op3val:0x249249; valaddr_reg:x3; val_offset:3360*0 + 3*8*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3360*0 + 3*8*FLEN/8, x4, x1, x2)

inst_1121:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x289f06 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ca89f06; op2val:0x0;
op3val:0x333333; valaddr_reg:x3; val_offset:3363*0 + 3*8*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3363*0 + 3*8*FLEN/8, x4, x1, x2)

inst_1122:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x289f06 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ca89f06; op2val:0x0;
op3val:0x36db6d; valaddr_reg:x3; val_offset:3366*0 + 3*8*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3366*0 + 3*8*FLEN/8, x4, x1, x2)

inst_1123:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x289f06 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ca89f06; op2val:0x0;
op3val:0x3bbbbb; valaddr_reg:x3; val_offset:3369*0 + 3*8*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3369*0 + 3*8*FLEN/8, x4, x1, x2)

inst_1124:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x289f06 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ca89f06; op2val:0x0;
op3val:0x444444; valaddr_reg:x3; val_offset:3372*0 + 3*8*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3372*0 + 3*8*FLEN/8, x4, x1, x2)

inst_1125:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x289f06 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ca89f06; op2val:0x0;
op3val:0x4ccccc; valaddr_reg:x3; val_offset:3375*0 + 3*8*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3375*0 + 3*8*FLEN/8, x4, x1, x2)

inst_1126:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x289f06 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ca89f06; op2val:0x0;
op3val:0x5b6db6; valaddr_reg:x3; val_offset:3378*0 + 3*8*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3378*0 + 3*8*FLEN/8, x4, x1, x2)

inst_1127:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x289f06 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ca89f06; op2val:0x0;
op3val:0x666666; valaddr_reg:x3; val_offset:3381*0 + 3*8*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3381*0 + 3*8*FLEN/8, x4, x1, x2)

inst_1128:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x289f06 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ca89f06; op2val:0x0;
op3val:0x6db6db; valaddr_reg:x3; val_offset:3384*0 + 3*8*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3384*0 + 3*8*FLEN/8, x4, x1, x2)

inst_1129:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x289f06 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ca89f06; op2val:0x0;
op3val:0x7ffff8; valaddr_reg:x3; val_offset:3387*0 + 3*8*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3387*0 + 3*8*FLEN/8, x4, x1, x2)

inst_1130:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x289f06 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ca89f06; op2val:0x0;
op3val:0x7ffffc; valaddr_reg:x3; val_offset:3390*0 + 3*8*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3390*0 + 3*8*FLEN/8, x4, x1, x2)

inst_1131:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x289f06 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ca89f06; op2val:0x0;
op3val:0x7ffffe; valaddr_reg:x3; val_offset:3393*0 + 3*8*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3393*0 + 3*8*FLEN/8, x4, x1, x2)

inst_1132:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x289f06 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ca89f06; op2val:0x0;
op3val:0x9000000; valaddr_reg:x3; val_offset:3396*0 + 3*8*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3396*0 + 3*8*FLEN/8, x4, x1, x2)

inst_1133:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x289f06 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ca89f06; op2val:0x0;
op3val:0x9000001; valaddr_reg:x3; val_offset:3399*0 + 3*8*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3399*0 + 3*8*FLEN/8, x4, x1, x2)

inst_1134:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x289f06 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ca89f06; op2val:0x0;
op3val:0x9000003; valaddr_reg:x3; val_offset:3402*0 + 3*8*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3402*0 + 3*8*FLEN/8, x4, x1, x2)

inst_1135:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x289f06 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ca89f06; op2val:0x0;
op3val:0x9000007; valaddr_reg:x3; val_offset:3405*0 + 3*8*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3405*0 + 3*8*FLEN/8, x4, x1, x2)

inst_1136:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x289f06 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ca89f06; op2val:0x0;
op3val:0x900000f; valaddr_reg:x3; val_offset:3408*0 + 3*8*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3408*0 + 3*8*FLEN/8, x4, x1, x2)

inst_1137:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x289f06 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ca89f06; op2val:0x0;
op3val:0x900001f; valaddr_reg:x3; val_offset:3411*0 + 3*8*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3411*0 + 3*8*FLEN/8, x4, x1, x2)

inst_1138:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x289f06 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ca89f06; op2val:0x0;
op3val:0x900003f; valaddr_reg:x3; val_offset:3414*0 + 3*8*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3414*0 + 3*8*FLEN/8, x4, x1, x2)

inst_1139:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x289f06 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ca89f06; op2val:0x0;
op3val:0x900007f; valaddr_reg:x3; val_offset:3417*0 + 3*8*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3417*0 + 3*8*FLEN/8, x4, x1, x2)

inst_1140:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x289f06 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ca89f06; op2val:0x0;
op3val:0x90000ff; valaddr_reg:x3; val_offset:3420*0 + 3*8*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3420*0 + 3*8*FLEN/8, x4, x1, x2)

inst_1141:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x289f06 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ca89f06; op2val:0x0;
op3val:0x90001ff; valaddr_reg:x3; val_offset:3423*0 + 3*8*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3423*0 + 3*8*FLEN/8, x4, x1, x2)

inst_1142:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x289f06 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ca89f06; op2val:0x0;
op3val:0x90003ff; valaddr_reg:x3; val_offset:3426*0 + 3*8*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3426*0 + 3*8*FLEN/8, x4, x1, x2)

inst_1143:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x289f06 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ca89f06; op2val:0x0;
op3val:0x90007ff; valaddr_reg:x3; val_offset:3429*0 + 3*8*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3429*0 + 3*8*FLEN/8, x4, x1, x2)

inst_1144:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x289f06 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ca89f06; op2val:0x0;
op3val:0x9000fff; valaddr_reg:x3; val_offset:3432*0 + 3*8*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3432*0 + 3*8*FLEN/8, x4, x1, x2)

inst_1145:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x289f06 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ca89f06; op2val:0x0;
op3val:0x9001fff; valaddr_reg:x3; val_offset:3435*0 + 3*8*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3435*0 + 3*8*FLEN/8, x4, x1, x2)

inst_1146:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x289f06 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ca89f06; op2val:0x0;
op3val:0x9003fff; valaddr_reg:x3; val_offset:3438*0 + 3*8*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3438*0 + 3*8*FLEN/8, x4, x1, x2)

inst_1147:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x289f06 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ca89f06; op2val:0x0;
op3val:0x9007fff; valaddr_reg:x3; val_offset:3441*0 + 3*8*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3441*0 + 3*8*FLEN/8, x4, x1, x2)

inst_1148:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x289f06 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ca89f06; op2val:0x0;
op3val:0x900ffff; valaddr_reg:x3; val_offset:3444*0 + 3*8*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3444*0 + 3*8*FLEN/8, x4, x1, x2)

inst_1149:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x289f06 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ca89f06; op2val:0x0;
op3val:0x901ffff; valaddr_reg:x3; val_offset:3447*0 + 3*8*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3447*0 + 3*8*FLEN/8, x4, x1, x2)

inst_1150:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x289f06 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ca89f06; op2val:0x0;
op3val:0x903ffff; valaddr_reg:x3; val_offset:3450*0 + 3*8*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3450*0 + 3*8*FLEN/8, x4, x1, x2)

inst_1151:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x289f06 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ca89f06; op2val:0x0;
op3val:0x907ffff; valaddr_reg:x3; val_offset:3453*0 + 3*8*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3453*0 + 3*8*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2090120530,32,FLEN)
NAN_BOXED(39606737,32,FLEN)
NAN_BOXED(1048567808,32,FLEN)
NAN_BOXED(2090120530,32,FLEN)
NAN_BOXED(39606737,32,FLEN)
NAN_BOXED(1048571904,32,FLEN)
NAN_BOXED(2090120530,32,FLEN)
NAN_BOXED(39606737,32,FLEN)
NAN_BOXED(1048573952,32,FLEN)
NAN_BOXED(2090120530,32,FLEN)
NAN_BOXED(39606737,32,FLEN)
NAN_BOXED(1048574976,32,FLEN)
NAN_BOXED(2090120530,32,FLEN)
NAN_BOXED(39606737,32,FLEN)
NAN_BOXED(1048575488,32,FLEN)
NAN_BOXED(2090120530,32,FLEN)
NAN_BOXED(39606737,32,FLEN)
NAN_BOXED(1048575744,32,FLEN)
NAN_BOXED(2090120530,32,FLEN)
NAN_BOXED(39606737,32,FLEN)
NAN_BOXED(1048575872,32,FLEN)
NAN_BOXED(2090120530,32,FLEN)
NAN_BOXED(39606737,32,FLEN)
NAN_BOXED(1048575936,32,FLEN)
NAN_BOXED(2090120530,32,FLEN)
NAN_BOXED(39606737,32,FLEN)
NAN_BOXED(1048575968,32,FLEN)
NAN_BOXED(2090120530,32,FLEN)
NAN_BOXED(39606737,32,FLEN)
NAN_BOXED(1048575984,32,FLEN)
NAN_BOXED(2090120530,32,FLEN)
NAN_BOXED(39606737,32,FLEN)
NAN_BOXED(1048575992,32,FLEN)
NAN_BOXED(2090120530,32,FLEN)
NAN_BOXED(39606737,32,FLEN)
NAN_BOXED(1048575996,32,FLEN)
NAN_BOXED(2090120530,32,FLEN)
NAN_BOXED(39606737,32,FLEN)
NAN_BOXED(1048575998,32,FLEN)
NAN_BOXED(2090120530,32,FLEN)
NAN_BOXED(39606737,32,FLEN)
NAN_BOXED(1048575999,32,FLEN)
NAN_BOXED(2090120530,32,FLEN)
NAN_BOXED(39606737,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2090120530,32,FLEN)
NAN_BOXED(39606737,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2090120530,32,FLEN)
NAN_BOXED(39606737,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2090120530,32,FLEN)
NAN_BOXED(39606737,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2090120530,32,FLEN)
NAN_BOXED(39606737,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2090120530,32,FLEN)
NAN_BOXED(39606737,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2090120530,32,FLEN)
NAN_BOXED(39606737,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2090120530,32,FLEN)
NAN_BOXED(39606737,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2090120530,32,FLEN)
NAN_BOXED(39606737,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2090120530,32,FLEN)
NAN_BOXED(39606737,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2090120530,32,FLEN)
NAN_BOXED(39606737,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2090120530,32,FLEN)
NAN_BOXED(39606737,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2090120530,32,FLEN)
NAN_BOXED(39606737,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2090120530,32,FLEN)
NAN_BOXED(39606737,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2090120530,32,FLEN)
NAN_BOXED(39606737,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2090120530,32,FLEN)
NAN_BOXED(39606737,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2090215670,32,FLEN)
NAN_BOXED(2186950774,32,FLEN)
NAN_BOXED(2701131776,32,FLEN)
NAN_BOXED(2090215670,32,FLEN)
NAN_BOXED(2186950774,32,FLEN)
NAN_BOXED(2701131777,32,FLEN)
NAN_BOXED(2090215670,32,FLEN)
NAN_BOXED(2186950774,32,FLEN)
NAN_BOXED(2701131779,32,FLEN)
NAN_BOXED(2090215670,32,FLEN)
NAN_BOXED(2186950774,32,FLEN)
NAN_BOXED(2701131783,32,FLEN)
NAN_BOXED(2090215670,32,FLEN)
NAN_BOXED(2186950774,32,FLEN)
NAN_BOXED(2701131791,32,FLEN)
NAN_BOXED(2090215670,32,FLEN)
NAN_BOXED(2186950774,32,FLEN)
NAN_BOXED(2701131807,32,FLEN)
NAN_BOXED(2090215670,32,FLEN)
NAN_BOXED(2186950774,32,FLEN)
NAN_BOXED(2701131839,32,FLEN)
NAN_BOXED(2090215670,32,FLEN)
NAN_BOXED(2186950774,32,FLEN)
NAN_BOXED(2701131903,32,FLEN)
NAN_BOXED(2090215670,32,FLEN)
NAN_BOXED(2186950774,32,FLEN)
NAN_BOXED(2701132031,32,FLEN)
NAN_BOXED(2090215670,32,FLEN)
NAN_BOXED(2186950774,32,FLEN)
NAN_BOXED(2701132287,32,FLEN)
NAN_BOXED(2090215670,32,FLEN)
NAN_BOXED(2186950774,32,FLEN)
NAN_BOXED(2701132799,32,FLEN)
NAN_BOXED(2090215670,32,FLEN)
NAN_BOXED(2186950774,32,FLEN)
NAN_BOXED(2701133823,32,FLEN)
NAN_BOXED(2090215670,32,FLEN)
NAN_BOXED(2186950774,32,FLEN)
NAN_BOXED(2701135871,32,FLEN)
NAN_BOXED(2090215670,32,FLEN)
NAN_BOXED(2186950774,32,FLEN)
NAN_BOXED(2701139967,32,FLEN)
NAN_BOXED(2090215670,32,FLEN)
NAN_BOXED(2186950774,32,FLEN)
NAN_BOXED(2701148159,32,FLEN)
NAN_BOXED(2090215670,32,FLEN)
NAN_BOXED(2186950774,32,FLEN)
NAN_BOXED(2701164543,32,FLEN)
NAN_BOXED(2090215670,32,FLEN)
NAN_BOXED(2186950774,32,FLEN)
NAN_BOXED(2701197311,32,FLEN)
NAN_BOXED(2090215670,32,FLEN)
NAN_BOXED(2186950774,32,FLEN)
NAN_BOXED(2701262847,32,FLEN)
NAN_BOXED(2090215670,32,FLEN)
NAN_BOXED(2186950774,32,FLEN)
NAN_BOXED(2701393919,32,FLEN)
NAN_BOXED(2090215670,32,FLEN)
NAN_BOXED(2186950774,32,FLEN)
NAN_BOXED(2701656063,32,FLEN)
NAN_BOXED(2090215670,32,FLEN)
NAN_BOXED(2186950774,32,FLEN)
NAN_BOXED(2702180351,32,FLEN)
NAN_BOXED(2090215670,32,FLEN)
NAN_BOXED(2186950774,32,FLEN)
NAN_BOXED(2703228927,32,FLEN)
NAN_BOXED(2090215670,32,FLEN)
NAN_BOXED(2186950774,32,FLEN)
NAN_BOXED(2705326079,32,FLEN)
NAN_BOXED(2090215670,32,FLEN)
NAN_BOXED(2186950774,32,FLEN)
NAN_BOXED(2705326080,32,FLEN)
NAN_BOXED(2090215670,32,FLEN)
NAN_BOXED(2186950774,32,FLEN)
NAN_BOXED(2707423232,32,FLEN)
NAN_BOXED(2090215670,32,FLEN)
NAN_BOXED(2186950774,32,FLEN)
NAN_BOXED(2708471808,32,FLEN)
NAN_BOXED(2090215670,32,FLEN)
NAN_BOXED(2186950774,32,FLEN)
NAN_BOXED(2708996096,32,FLEN)
NAN_BOXED(2090215670,32,FLEN)
NAN_BOXED(2186950774,32,FLEN)
NAN_BOXED(2709258240,32,FLEN)
NAN_BOXED(2090215670,32,FLEN)
NAN_BOXED(2186950774,32,FLEN)
NAN_BOXED(2709389312,32,FLEN)
NAN_BOXED(2090215670,32,FLEN)
NAN_BOXED(2186950774,32,FLEN)
NAN_BOXED(2709454848,32,FLEN)
NAN_BOXED(2090215670,32,FLEN)
NAN_BOXED(2186950774,32,FLEN)
NAN_BOXED(2709487616,32,FLEN)
NAN_BOXED(2090215670,32,FLEN)
NAN_BOXED(2186950774,32,FLEN)
NAN_BOXED(2709504000,32,FLEN)
NAN_BOXED(2090215670,32,FLEN)
NAN_BOXED(2186950774,32,FLEN)
NAN_BOXED(2709512192,32,FLEN)
NAN_BOXED(2090215670,32,FLEN)
NAN_BOXED(2186950774,32,FLEN)
NAN_BOXED(2709516288,32,FLEN)
NAN_BOXED(2090215670,32,FLEN)
NAN_BOXED(2186950774,32,FLEN)
NAN_BOXED(2709518336,32,FLEN)
NAN_BOXED(2090215670,32,FLEN)
NAN_BOXED(2186950774,32,FLEN)
NAN_BOXED(2709519360,32,FLEN)
NAN_BOXED(2090215670,32,FLEN)
NAN_BOXED(2186950774,32,FLEN)
NAN_BOXED(2709519872,32,FLEN)
NAN_BOXED(2090215670,32,FLEN)
NAN_BOXED(2186950774,32,FLEN)
NAN_BOXED(2709520128,32,FLEN)
NAN_BOXED(2090215670,32,FLEN)
NAN_BOXED(2186950774,32,FLEN)
NAN_BOXED(2709520256,32,FLEN)
NAN_BOXED(2090215670,32,FLEN)
NAN_BOXED(2186950774,32,FLEN)
NAN_BOXED(2709520320,32,FLEN)
NAN_BOXED(2090215670,32,FLEN)
NAN_BOXED(2186950774,32,FLEN)
NAN_BOXED(2709520352,32,FLEN)
NAN_BOXED(2090215670,32,FLEN)
NAN_BOXED(2186950774,32,FLEN)
NAN_BOXED(2709520368,32,FLEN)
NAN_BOXED(2090215670,32,FLEN)
NAN_BOXED(2186950774,32,FLEN)
NAN_BOXED(2709520376,32,FLEN)
NAN_BOXED(2090215670,32,FLEN)
NAN_BOXED(2186950774,32,FLEN)
NAN_BOXED(2709520380,32,FLEN)
NAN_BOXED(2090215670,32,FLEN)
NAN_BOXED(2186950774,32,FLEN)
NAN_BOXED(2709520382,32,FLEN)
NAN_BOXED(2090215670,32,FLEN)
NAN_BOXED(2186950774,32,FLEN)
NAN_BOXED(2709520383,32,FLEN)
NAN_BOXED(2090215670,32,FLEN)
NAN_BOXED(2186950774,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2090215670,32,FLEN)
NAN_BOXED(2186950774,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2090215670,32,FLEN)
NAN_BOXED(2186950774,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
NAN_BOXED(2090215670,32,FLEN)
NAN_BOXED(2186950774,32,FLEN)
NAN_BOXED(3214514585,32,FLEN)
NAN_BOXED(2090215670,32,FLEN)
NAN_BOXED(2186950774,32,FLEN)
NAN_BOXED(3215233609,32,FLEN)
NAN_BOXED(2090215670,32,FLEN)
NAN_BOXED(2186950774,32,FLEN)
NAN_BOXED(3216192307,32,FLEN)
NAN_BOXED(2090215670,32,FLEN)
NAN_BOXED(2186950774,32,FLEN)
NAN_BOXED(3216431981,32,FLEN)
NAN_BOXED(2090215670,32,FLEN)
NAN_BOXED(2186950774,32,FLEN)
NAN_BOXED(3216751547,32,FLEN)
NAN_BOXED(2090215670,32,FLEN)
NAN_BOXED(2186950774,32,FLEN)
NAN_BOXED(3217310788,32,FLEN)
NAN_BOXED(2090215670,32,FLEN)
NAN_BOXED(2186950774,32,FLEN)
NAN_BOXED(3217870028,32,FLEN)
NAN_BOXED(2090215670,32,FLEN)
NAN_BOXED(2186950774,32,FLEN)
NAN_BOXED(3218828726,32,FLEN)
NAN_BOXED(2090215670,32,FLEN)
NAN_BOXED(2186950774,32,FLEN)
NAN_BOXED(3219547750,32,FLEN)
NAN_BOXED(2090215670,32,FLEN)
NAN_BOXED(2186950774,32,FLEN)
NAN_BOXED(3220027099,32,FLEN)
NAN_BOXED(2090215670,32,FLEN)
NAN_BOXED(2186950774,32,FLEN)
NAN_BOXED(3221225464,32,FLEN)
NAN_BOXED(2090215670,32,FLEN)
NAN_BOXED(2186950774,32,FLEN)
NAN_BOXED(3221225468,32,FLEN)
NAN_BOXED(2090215670,32,FLEN)
NAN_BOXED(2186950774,32,FLEN)
NAN_BOXED(3221225470,32,FLEN)
NAN_BOXED(2091425542,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2091425542,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3,32,FLEN)
NAN_BOXED(2091425542,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7,32,FLEN)
NAN_BOXED(2091425542,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1677721,32,FLEN)
NAN_BOXED(2091425542,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2396745,32,FLEN)
NAN_BOXED(2091425542,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3355443,32,FLEN)
NAN_BOXED(2091425542,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3595117,32,FLEN)
NAN_BOXED(2091425542,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3914683,32,FLEN)
NAN_BOXED(2091425542,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4473924,32,FLEN)
NAN_BOXED(2091425542,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5033164,32,FLEN)
NAN_BOXED(2091425542,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5991862,32,FLEN)
NAN_BOXED(2091425542,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(6710886,32,FLEN)
NAN_BOXED(2091425542,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7190235,32,FLEN)
NAN_BOXED(2091425542,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388600,32,FLEN)
NAN_BOXED(2091425542,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388604,32,FLEN)
NAN_BOXED(2091425542,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388606,32,FLEN)
NAN_BOXED(2091425542,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(150994944,32,FLEN)
NAN_BOXED(2091425542,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(150994945,32,FLEN)
NAN_BOXED(2091425542,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(150994947,32,FLEN)
NAN_BOXED(2091425542,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(150994951,32,FLEN)
NAN_BOXED(2091425542,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(150994959,32,FLEN)
NAN_BOXED(2091425542,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(150994975,32,FLEN)
NAN_BOXED(2091425542,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(150995007,32,FLEN)
NAN_BOXED(2091425542,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(150995071,32,FLEN)
NAN_BOXED(2091425542,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(150995199,32,FLEN)
NAN_BOXED(2091425542,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(150995455,32,FLEN)
NAN_BOXED(2091425542,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(150995967,32,FLEN)
NAN_BOXED(2091425542,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(150996991,32,FLEN)
NAN_BOXED(2091425542,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(150999039,32,FLEN)
NAN_BOXED(2091425542,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(151003135,32,FLEN)
NAN_BOXED(2091425542,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(151011327,32,FLEN)
NAN_BOXED(2091425542,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(151027711,32,FLEN)
NAN_BOXED(2091425542,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(151060479,32,FLEN)
NAN_BOXED(2091425542,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(151126015,32,FLEN)
NAN_BOXED(2091425542,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(151257087,32,FLEN)
NAN_BOXED(2091425542,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(151519231,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
