
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:07 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_13440:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0bdfc6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8bdfc6; op2val:0x80000000;
op3val:0x80666666; valaddr_reg:x3; val_offset:40320*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40320*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13441:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0bdfc6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8bdfc6; op2val:0x80000000;
op3val:0x806db6db; valaddr_reg:x3; val_offset:40323*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40323*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13442:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0bdfc6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8bdfc6; op2val:0x80000000;
op3val:0x807ffff8; valaddr_reg:x3; val_offset:40326*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40326*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13443:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0bdfc6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8bdfc6; op2val:0x80000000;
op3val:0x807ffffc; valaddr_reg:x3; val_offset:40329*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40329*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13444:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0bdfc6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8bdfc6; op2val:0x80000000;
op3val:0x807ffffe; valaddr_reg:x3; val_offset:40332*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40332*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13445:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0bdfc6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8bdfc6; op2val:0x80000000;
op3val:0x81000000; valaddr_reg:x3; val_offset:40335*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40335*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13446:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0bdfc6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8bdfc6; op2val:0x80000000;
op3val:0x81000001; valaddr_reg:x3; val_offset:40338*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40338*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13447:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0bdfc6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8bdfc6; op2val:0x80000000;
op3val:0x81000003; valaddr_reg:x3; val_offset:40341*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40341*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13448:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0bdfc6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8bdfc6; op2val:0x80000000;
op3val:0x81000007; valaddr_reg:x3; val_offset:40344*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40344*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13449:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0bdfc6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8bdfc6; op2val:0x80000000;
op3val:0x8100000f; valaddr_reg:x3; val_offset:40347*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40347*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13450:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0bdfc6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8bdfc6; op2val:0x80000000;
op3val:0x8100001f; valaddr_reg:x3; val_offset:40350*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40350*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13451:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0bdfc6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8bdfc6; op2val:0x80000000;
op3val:0x8100003f; valaddr_reg:x3; val_offset:40353*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40353*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13452:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0bdfc6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8bdfc6; op2val:0x80000000;
op3val:0x8100007f; valaddr_reg:x3; val_offset:40356*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40356*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13453:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0bdfc6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8bdfc6; op2val:0x80000000;
op3val:0x810000ff; valaddr_reg:x3; val_offset:40359*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40359*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13454:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0bdfc6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8bdfc6; op2val:0x80000000;
op3val:0x810001ff; valaddr_reg:x3; val_offset:40362*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40362*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13455:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0bdfc6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8bdfc6; op2val:0x80000000;
op3val:0x810003ff; valaddr_reg:x3; val_offset:40365*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40365*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13456:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0bdfc6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8bdfc6; op2val:0x80000000;
op3val:0x810007ff; valaddr_reg:x3; val_offset:40368*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40368*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13457:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0bdfc6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8bdfc6; op2val:0x80000000;
op3val:0x81000fff; valaddr_reg:x3; val_offset:40371*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40371*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13458:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0bdfc6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8bdfc6; op2val:0x80000000;
op3val:0x81001fff; valaddr_reg:x3; val_offset:40374*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40374*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13459:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0bdfc6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8bdfc6; op2val:0x80000000;
op3val:0x81003fff; valaddr_reg:x3; val_offset:40377*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40377*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13460:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0bdfc6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8bdfc6; op2val:0x80000000;
op3val:0x81007fff; valaddr_reg:x3; val_offset:40380*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40380*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13461:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0bdfc6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8bdfc6; op2val:0x80000000;
op3val:0x8100ffff; valaddr_reg:x3; val_offset:40383*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40383*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13462:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0bdfc6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8bdfc6; op2val:0x80000000;
op3val:0x8101ffff; valaddr_reg:x3; val_offset:40386*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40386*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13463:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0bdfc6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8bdfc6; op2val:0x80000000;
op3val:0x8103ffff; valaddr_reg:x3; val_offset:40389*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40389*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13464:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0bdfc6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8bdfc6; op2val:0x80000000;
op3val:0x8107ffff; valaddr_reg:x3; val_offset:40392*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40392*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13465:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0bdfc6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8bdfc6; op2val:0x80000000;
op3val:0x810fffff; valaddr_reg:x3; val_offset:40395*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40395*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13466:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0bdfc6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8bdfc6; op2val:0x80000000;
op3val:0x811fffff; valaddr_reg:x3; val_offset:40398*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40398*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13467:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0bdfc6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8bdfc6; op2val:0x80000000;
op3val:0x813fffff; valaddr_reg:x3; val_offset:40401*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40401*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13468:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0bdfc6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8bdfc6; op2val:0x80000000;
op3val:0x81400000; valaddr_reg:x3; val_offset:40404*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40404*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13469:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0bdfc6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8bdfc6; op2val:0x80000000;
op3val:0x81600000; valaddr_reg:x3; val_offset:40407*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40407*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13470:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0bdfc6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8bdfc6; op2val:0x80000000;
op3val:0x81700000; valaddr_reg:x3; val_offset:40410*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40410*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13471:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0bdfc6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8bdfc6; op2val:0x80000000;
op3val:0x81780000; valaddr_reg:x3; val_offset:40413*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40413*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13472:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0bdfc6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8bdfc6; op2val:0x80000000;
op3val:0x817c0000; valaddr_reg:x3; val_offset:40416*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40416*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13473:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0bdfc6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8bdfc6; op2val:0x80000000;
op3val:0x817e0000; valaddr_reg:x3; val_offset:40419*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40419*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13474:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0bdfc6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8bdfc6; op2val:0x80000000;
op3val:0x817f0000; valaddr_reg:x3; val_offset:40422*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40422*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13475:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0bdfc6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8bdfc6; op2val:0x80000000;
op3val:0x817f8000; valaddr_reg:x3; val_offset:40425*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40425*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13476:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0bdfc6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8bdfc6; op2val:0x80000000;
op3val:0x817fc000; valaddr_reg:x3; val_offset:40428*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40428*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13477:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0bdfc6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8bdfc6; op2val:0x80000000;
op3val:0x817fe000; valaddr_reg:x3; val_offset:40431*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40431*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13478:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0bdfc6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8bdfc6; op2val:0x80000000;
op3val:0x817ff000; valaddr_reg:x3; val_offset:40434*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40434*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13479:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0bdfc6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8bdfc6; op2val:0x80000000;
op3val:0x817ff800; valaddr_reg:x3; val_offset:40437*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40437*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13480:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0bdfc6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8bdfc6; op2val:0x80000000;
op3val:0x817ffc00; valaddr_reg:x3; val_offset:40440*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40440*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13481:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0bdfc6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8bdfc6; op2val:0x80000000;
op3val:0x817ffe00; valaddr_reg:x3; val_offset:40443*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40443*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13482:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0bdfc6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8bdfc6; op2val:0x80000000;
op3val:0x817fff00; valaddr_reg:x3; val_offset:40446*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40446*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13483:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0bdfc6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8bdfc6; op2val:0x80000000;
op3val:0x817fff80; valaddr_reg:x3; val_offset:40449*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40449*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13484:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0bdfc6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8bdfc6; op2val:0x80000000;
op3val:0x817fffc0; valaddr_reg:x3; val_offset:40452*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40452*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13485:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0bdfc6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8bdfc6; op2val:0x80000000;
op3val:0x817fffe0; valaddr_reg:x3; val_offset:40455*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40455*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13486:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0bdfc6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8bdfc6; op2val:0x80000000;
op3val:0x817ffff0; valaddr_reg:x3; val_offset:40458*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40458*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13487:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0bdfc6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8bdfc6; op2val:0x80000000;
op3val:0x817ffff8; valaddr_reg:x3; val_offset:40461*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40461*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13488:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0bdfc6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8bdfc6; op2val:0x80000000;
op3val:0x817ffffc; valaddr_reg:x3; val_offset:40464*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40464*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13489:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0bdfc6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8bdfc6; op2val:0x80000000;
op3val:0x817ffffe; valaddr_reg:x3; val_offset:40467*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40467*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13490:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0bdfc6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8bdfc6; op2val:0x80000000;
op3val:0x817fffff; valaddr_reg:x3; val_offset:40470*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40470*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13491:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0c01f8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8c01f8; op2val:0x80000000;
op3val:0x80000001; valaddr_reg:x3; val_offset:40473*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40473*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13492:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0c01f8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8c01f8; op2val:0x80000000;
op3val:0x80000003; valaddr_reg:x3; val_offset:40476*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40476*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13493:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0c01f8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8c01f8; op2val:0x80000000;
op3val:0x80000007; valaddr_reg:x3; val_offset:40479*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40479*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13494:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0c01f8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8c01f8; op2val:0x80000000;
op3val:0x80199999; valaddr_reg:x3; val_offset:40482*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40482*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13495:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0c01f8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8c01f8; op2val:0x80000000;
op3val:0x80249249; valaddr_reg:x3; val_offset:40485*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40485*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13496:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0c01f8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8c01f8; op2val:0x80000000;
op3val:0x80333333; valaddr_reg:x3; val_offset:40488*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40488*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13497:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0c01f8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8c01f8; op2val:0x80000000;
op3val:0x8036db6d; valaddr_reg:x3; val_offset:40491*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40491*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13498:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0c01f8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8c01f8; op2val:0x80000000;
op3val:0x803bbbbb; valaddr_reg:x3; val_offset:40494*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40494*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13499:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0c01f8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8c01f8; op2val:0x80000000;
op3val:0x80444444; valaddr_reg:x3; val_offset:40497*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40497*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13500:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0c01f8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8c01f8; op2val:0x80000000;
op3val:0x804ccccc; valaddr_reg:x3; val_offset:40500*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40500*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13501:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0c01f8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8c01f8; op2val:0x80000000;
op3val:0x805b6db6; valaddr_reg:x3; val_offset:40503*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40503*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13502:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0c01f8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8c01f8; op2val:0x80000000;
op3val:0x80666666; valaddr_reg:x3; val_offset:40506*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40506*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13503:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0c01f8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8c01f8; op2val:0x80000000;
op3val:0x806db6db; valaddr_reg:x3; val_offset:40509*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40509*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13504:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0c01f8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8c01f8; op2val:0x80000000;
op3val:0x807ffff8; valaddr_reg:x3; val_offset:40512*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40512*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13505:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0c01f8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8c01f8; op2val:0x80000000;
op3val:0x807ffffc; valaddr_reg:x3; val_offset:40515*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40515*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13506:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0c01f8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8c01f8; op2val:0x80000000;
op3val:0x807ffffe; valaddr_reg:x3; val_offset:40518*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40518*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13507:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0c01f8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8c01f8; op2val:0x80000000;
op3val:0x8c000000; valaddr_reg:x3; val_offset:40521*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40521*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13508:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0c01f8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8c01f8; op2val:0x80000000;
op3val:0x8c000001; valaddr_reg:x3; val_offset:40524*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40524*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13509:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0c01f8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8c01f8; op2val:0x80000000;
op3val:0x8c000003; valaddr_reg:x3; val_offset:40527*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40527*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13510:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0c01f8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8c01f8; op2val:0x80000000;
op3val:0x8c000007; valaddr_reg:x3; val_offset:40530*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40530*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13511:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0c01f8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8c01f8; op2val:0x80000000;
op3val:0x8c00000f; valaddr_reg:x3; val_offset:40533*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40533*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13512:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0c01f8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8c01f8; op2val:0x80000000;
op3val:0x8c00001f; valaddr_reg:x3; val_offset:40536*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40536*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13513:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0c01f8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8c01f8; op2val:0x80000000;
op3val:0x8c00003f; valaddr_reg:x3; val_offset:40539*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40539*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13514:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0c01f8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8c01f8; op2val:0x80000000;
op3val:0x8c00007f; valaddr_reg:x3; val_offset:40542*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40542*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13515:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0c01f8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8c01f8; op2val:0x80000000;
op3val:0x8c0000ff; valaddr_reg:x3; val_offset:40545*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40545*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13516:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0c01f8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8c01f8; op2val:0x80000000;
op3val:0x8c0001ff; valaddr_reg:x3; val_offset:40548*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40548*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13517:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0c01f8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8c01f8; op2val:0x80000000;
op3val:0x8c0003ff; valaddr_reg:x3; val_offset:40551*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40551*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13518:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0c01f8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8c01f8; op2val:0x80000000;
op3val:0x8c0007ff; valaddr_reg:x3; val_offset:40554*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40554*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13519:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0c01f8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8c01f8; op2val:0x80000000;
op3val:0x8c000fff; valaddr_reg:x3; val_offset:40557*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40557*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13520:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0c01f8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8c01f8; op2val:0x80000000;
op3val:0x8c001fff; valaddr_reg:x3; val_offset:40560*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40560*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13521:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0c01f8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8c01f8; op2val:0x80000000;
op3val:0x8c003fff; valaddr_reg:x3; val_offset:40563*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40563*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13522:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0c01f8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8c01f8; op2val:0x80000000;
op3val:0x8c007fff; valaddr_reg:x3; val_offset:40566*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40566*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13523:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0c01f8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8c01f8; op2val:0x80000000;
op3val:0x8c00ffff; valaddr_reg:x3; val_offset:40569*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40569*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13524:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0c01f8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8c01f8; op2val:0x80000000;
op3val:0x8c01ffff; valaddr_reg:x3; val_offset:40572*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40572*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13525:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0c01f8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8c01f8; op2val:0x80000000;
op3val:0x8c03ffff; valaddr_reg:x3; val_offset:40575*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40575*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13526:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0c01f8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8c01f8; op2val:0x80000000;
op3val:0x8c07ffff; valaddr_reg:x3; val_offset:40578*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40578*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13527:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0c01f8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8c01f8; op2val:0x80000000;
op3val:0x8c0fffff; valaddr_reg:x3; val_offset:40581*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40581*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13528:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0c01f8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8c01f8; op2val:0x80000000;
op3val:0x8c1fffff; valaddr_reg:x3; val_offset:40584*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40584*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13529:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0c01f8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8c01f8; op2val:0x80000000;
op3val:0x8c3fffff; valaddr_reg:x3; val_offset:40587*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40587*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13530:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0c01f8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8c01f8; op2val:0x80000000;
op3val:0x8c400000; valaddr_reg:x3; val_offset:40590*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40590*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13531:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0c01f8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8c01f8; op2val:0x80000000;
op3val:0x8c600000; valaddr_reg:x3; val_offset:40593*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40593*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13532:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0c01f8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8c01f8; op2val:0x80000000;
op3val:0x8c700000; valaddr_reg:x3; val_offset:40596*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40596*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13533:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0c01f8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8c01f8; op2val:0x80000000;
op3val:0x8c780000; valaddr_reg:x3; val_offset:40599*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40599*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13534:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0c01f8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8c01f8; op2val:0x80000000;
op3val:0x8c7c0000; valaddr_reg:x3; val_offset:40602*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40602*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13535:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0c01f8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8c01f8; op2val:0x80000000;
op3val:0x8c7e0000; valaddr_reg:x3; val_offset:40605*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40605*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13536:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0c01f8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8c01f8; op2val:0x80000000;
op3val:0x8c7f0000; valaddr_reg:x3; val_offset:40608*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40608*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13537:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0c01f8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8c01f8; op2val:0x80000000;
op3val:0x8c7f8000; valaddr_reg:x3; val_offset:40611*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40611*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13538:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0c01f8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8c01f8; op2val:0x80000000;
op3val:0x8c7fc000; valaddr_reg:x3; val_offset:40614*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40614*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13539:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0c01f8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8c01f8; op2val:0x80000000;
op3val:0x8c7fe000; valaddr_reg:x3; val_offset:40617*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40617*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13540:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0c01f8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8c01f8; op2val:0x80000000;
op3val:0x8c7ff000; valaddr_reg:x3; val_offset:40620*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40620*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13541:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0c01f8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8c01f8; op2val:0x80000000;
op3val:0x8c7ff800; valaddr_reg:x3; val_offset:40623*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40623*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13542:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0c01f8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8c01f8; op2val:0x80000000;
op3val:0x8c7ffc00; valaddr_reg:x3; val_offset:40626*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40626*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13543:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0c01f8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8c01f8; op2val:0x80000000;
op3val:0x8c7ffe00; valaddr_reg:x3; val_offset:40629*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40629*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13544:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0c01f8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8c01f8; op2val:0x80000000;
op3val:0x8c7fff00; valaddr_reg:x3; val_offset:40632*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40632*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13545:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0c01f8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8c01f8; op2val:0x80000000;
op3val:0x8c7fff80; valaddr_reg:x3; val_offset:40635*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40635*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13546:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0c01f8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8c01f8; op2val:0x80000000;
op3val:0x8c7fffc0; valaddr_reg:x3; val_offset:40638*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40638*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13547:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0c01f8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8c01f8; op2val:0x80000000;
op3val:0x8c7fffe0; valaddr_reg:x3; val_offset:40641*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40641*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13548:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0c01f8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8c01f8; op2val:0x80000000;
op3val:0x8c7ffff0; valaddr_reg:x3; val_offset:40644*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40644*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13549:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0c01f8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8c01f8; op2val:0x80000000;
op3val:0x8c7ffff8; valaddr_reg:x3; val_offset:40647*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40647*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13550:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0c01f8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8c01f8; op2val:0x80000000;
op3val:0x8c7ffffc; valaddr_reg:x3; val_offset:40650*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40650*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13551:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0c01f8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8c01f8; op2val:0x80000000;
op3val:0x8c7ffffe; valaddr_reg:x3; val_offset:40653*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40653*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13552:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0c01f8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8c01f8; op2val:0x80000000;
op3val:0x8c7fffff; valaddr_reg:x3; val_offset:40656*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40656*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13553:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0cbab9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x746c09 and fs3 == 1 and fe3 == 0x57 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8cbab9; op2val:0x80746c09;
op3val:0xab800000; valaddr_reg:x3; val_offset:40659*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40659*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13554:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0cbab9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x746c09 and fs3 == 1 and fe3 == 0x57 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8cbab9; op2val:0x80746c09;
op3val:0xab800001; valaddr_reg:x3; val_offset:40662*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40662*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13555:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0cbab9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x746c09 and fs3 == 1 and fe3 == 0x57 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8cbab9; op2val:0x80746c09;
op3val:0xab800003; valaddr_reg:x3; val_offset:40665*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40665*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13556:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0cbab9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x746c09 and fs3 == 1 and fe3 == 0x57 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8cbab9; op2val:0x80746c09;
op3val:0xab800007; valaddr_reg:x3; val_offset:40668*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40668*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13557:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0cbab9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x746c09 and fs3 == 1 and fe3 == 0x57 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8cbab9; op2val:0x80746c09;
op3val:0xab80000f; valaddr_reg:x3; val_offset:40671*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40671*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13558:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0cbab9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x746c09 and fs3 == 1 and fe3 == 0x57 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8cbab9; op2val:0x80746c09;
op3val:0xab80001f; valaddr_reg:x3; val_offset:40674*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40674*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13559:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0cbab9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x746c09 and fs3 == 1 and fe3 == 0x57 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8cbab9; op2val:0x80746c09;
op3val:0xab80003f; valaddr_reg:x3; val_offset:40677*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40677*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13560:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0cbab9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x746c09 and fs3 == 1 and fe3 == 0x57 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8cbab9; op2val:0x80746c09;
op3val:0xab80007f; valaddr_reg:x3; val_offset:40680*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40680*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13561:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0cbab9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x746c09 and fs3 == 1 and fe3 == 0x57 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8cbab9; op2val:0x80746c09;
op3val:0xab8000ff; valaddr_reg:x3; val_offset:40683*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40683*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13562:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0cbab9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x746c09 and fs3 == 1 and fe3 == 0x57 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8cbab9; op2val:0x80746c09;
op3val:0xab8001ff; valaddr_reg:x3; val_offset:40686*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40686*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13563:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0cbab9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x746c09 and fs3 == 1 and fe3 == 0x57 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8cbab9; op2val:0x80746c09;
op3val:0xab8003ff; valaddr_reg:x3; val_offset:40689*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40689*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13564:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0cbab9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x746c09 and fs3 == 1 and fe3 == 0x57 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8cbab9; op2val:0x80746c09;
op3val:0xab8007ff; valaddr_reg:x3; val_offset:40692*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40692*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13565:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0cbab9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x746c09 and fs3 == 1 and fe3 == 0x57 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8cbab9; op2val:0x80746c09;
op3val:0xab800fff; valaddr_reg:x3; val_offset:40695*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40695*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13566:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0cbab9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x746c09 and fs3 == 1 and fe3 == 0x57 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8cbab9; op2val:0x80746c09;
op3val:0xab801fff; valaddr_reg:x3; val_offset:40698*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40698*0 + 3*105*FLEN/8, x4, x1, x2)

inst_13567:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0cbab9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x746c09 and fs3 == 1 and fe3 == 0x57 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8cbab9; op2val:0x80746c09;
op3val:0xab803fff; valaddr_reg:x3; val_offset:40701*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40701*0 + 3*105*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2123096006,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154194534,32,FLEN)
NAN_BOXED(2123096006,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154673883,32,FLEN)
NAN_BOXED(2123096006,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872248,32,FLEN)
NAN_BOXED(2123096006,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872252,32,FLEN)
NAN_BOXED(2123096006,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2123096006,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260864,32,FLEN)
NAN_BOXED(2123096006,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260865,32,FLEN)
NAN_BOXED(2123096006,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260867,32,FLEN)
NAN_BOXED(2123096006,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260871,32,FLEN)
NAN_BOXED(2123096006,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260879,32,FLEN)
NAN_BOXED(2123096006,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260895,32,FLEN)
NAN_BOXED(2123096006,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260927,32,FLEN)
NAN_BOXED(2123096006,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260991,32,FLEN)
NAN_BOXED(2123096006,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164261119,32,FLEN)
NAN_BOXED(2123096006,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164261375,32,FLEN)
NAN_BOXED(2123096006,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164261887,32,FLEN)
NAN_BOXED(2123096006,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164262911,32,FLEN)
NAN_BOXED(2123096006,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164264959,32,FLEN)
NAN_BOXED(2123096006,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164269055,32,FLEN)
NAN_BOXED(2123096006,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164277247,32,FLEN)
NAN_BOXED(2123096006,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164293631,32,FLEN)
NAN_BOXED(2123096006,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164326399,32,FLEN)
NAN_BOXED(2123096006,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164391935,32,FLEN)
NAN_BOXED(2123096006,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164523007,32,FLEN)
NAN_BOXED(2123096006,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164785151,32,FLEN)
NAN_BOXED(2123096006,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2165309439,32,FLEN)
NAN_BOXED(2123096006,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2166358015,32,FLEN)
NAN_BOXED(2123096006,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2168455167,32,FLEN)
NAN_BOXED(2123096006,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2168455168,32,FLEN)
NAN_BOXED(2123096006,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2170552320,32,FLEN)
NAN_BOXED(2123096006,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2171600896,32,FLEN)
NAN_BOXED(2123096006,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172125184,32,FLEN)
NAN_BOXED(2123096006,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172387328,32,FLEN)
NAN_BOXED(2123096006,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172518400,32,FLEN)
NAN_BOXED(2123096006,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172583936,32,FLEN)
NAN_BOXED(2123096006,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172616704,32,FLEN)
NAN_BOXED(2123096006,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172633088,32,FLEN)
NAN_BOXED(2123096006,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172641280,32,FLEN)
NAN_BOXED(2123096006,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172645376,32,FLEN)
NAN_BOXED(2123096006,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172647424,32,FLEN)
NAN_BOXED(2123096006,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172648448,32,FLEN)
NAN_BOXED(2123096006,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172648960,32,FLEN)
NAN_BOXED(2123096006,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172649216,32,FLEN)
NAN_BOXED(2123096006,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172649344,32,FLEN)
NAN_BOXED(2123096006,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172649408,32,FLEN)
NAN_BOXED(2123096006,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172649440,32,FLEN)
NAN_BOXED(2123096006,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172649456,32,FLEN)
NAN_BOXED(2123096006,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172649464,32,FLEN)
NAN_BOXED(2123096006,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172649468,32,FLEN)
NAN_BOXED(2123096006,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172649470,32,FLEN)
NAN_BOXED(2123096006,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172649471,32,FLEN)
NAN_BOXED(2123104760,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2123104760,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483651,32,FLEN)
NAN_BOXED(2123104760,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483655,32,FLEN)
NAN_BOXED(2123104760,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149161369,32,FLEN)
NAN_BOXED(2123104760,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149880393,32,FLEN)
NAN_BOXED(2123104760,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2150839091,32,FLEN)
NAN_BOXED(2123104760,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151078765,32,FLEN)
NAN_BOXED(2123104760,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151398331,32,FLEN)
NAN_BOXED(2123104760,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151957572,32,FLEN)
NAN_BOXED(2123104760,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2152516812,32,FLEN)
NAN_BOXED(2123104760,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2153475510,32,FLEN)
NAN_BOXED(2123104760,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154194534,32,FLEN)
NAN_BOXED(2123104760,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154673883,32,FLEN)
NAN_BOXED(2123104760,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872248,32,FLEN)
NAN_BOXED(2123104760,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872252,32,FLEN)
NAN_BOXED(2123104760,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2123104760,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348810240,32,FLEN)
NAN_BOXED(2123104760,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348810241,32,FLEN)
NAN_BOXED(2123104760,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348810243,32,FLEN)
NAN_BOXED(2123104760,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348810247,32,FLEN)
NAN_BOXED(2123104760,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348810255,32,FLEN)
NAN_BOXED(2123104760,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348810271,32,FLEN)
NAN_BOXED(2123104760,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348810303,32,FLEN)
NAN_BOXED(2123104760,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348810367,32,FLEN)
NAN_BOXED(2123104760,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348810495,32,FLEN)
NAN_BOXED(2123104760,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348810751,32,FLEN)
NAN_BOXED(2123104760,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348811263,32,FLEN)
NAN_BOXED(2123104760,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348812287,32,FLEN)
NAN_BOXED(2123104760,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348814335,32,FLEN)
NAN_BOXED(2123104760,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348818431,32,FLEN)
NAN_BOXED(2123104760,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348826623,32,FLEN)
NAN_BOXED(2123104760,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348843007,32,FLEN)
NAN_BOXED(2123104760,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348875775,32,FLEN)
NAN_BOXED(2123104760,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348941311,32,FLEN)
NAN_BOXED(2123104760,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2349072383,32,FLEN)
NAN_BOXED(2123104760,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2349334527,32,FLEN)
NAN_BOXED(2123104760,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2349858815,32,FLEN)
NAN_BOXED(2123104760,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2350907391,32,FLEN)
NAN_BOXED(2123104760,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2353004543,32,FLEN)
NAN_BOXED(2123104760,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2353004544,32,FLEN)
NAN_BOXED(2123104760,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2355101696,32,FLEN)
NAN_BOXED(2123104760,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2356150272,32,FLEN)
NAN_BOXED(2123104760,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2356674560,32,FLEN)
NAN_BOXED(2123104760,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2356936704,32,FLEN)
NAN_BOXED(2123104760,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357067776,32,FLEN)
NAN_BOXED(2123104760,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357133312,32,FLEN)
NAN_BOXED(2123104760,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357166080,32,FLEN)
NAN_BOXED(2123104760,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357182464,32,FLEN)
NAN_BOXED(2123104760,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357190656,32,FLEN)
NAN_BOXED(2123104760,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357194752,32,FLEN)
NAN_BOXED(2123104760,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357196800,32,FLEN)
NAN_BOXED(2123104760,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357197824,32,FLEN)
NAN_BOXED(2123104760,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357198336,32,FLEN)
NAN_BOXED(2123104760,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357198592,32,FLEN)
NAN_BOXED(2123104760,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357198720,32,FLEN)
NAN_BOXED(2123104760,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357198784,32,FLEN)
NAN_BOXED(2123104760,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357198816,32,FLEN)
NAN_BOXED(2123104760,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357198832,32,FLEN)
NAN_BOXED(2123104760,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357198840,32,FLEN)
NAN_BOXED(2123104760,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357198844,32,FLEN)
NAN_BOXED(2123104760,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357198846,32,FLEN)
NAN_BOXED(2123104760,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357198847,32,FLEN)
NAN_BOXED(2123152057,32,FLEN)
NAN_BOXED(2155113481,32,FLEN)
NAN_BOXED(2877292544,32,FLEN)
NAN_BOXED(2123152057,32,FLEN)
NAN_BOXED(2155113481,32,FLEN)
NAN_BOXED(2877292545,32,FLEN)
NAN_BOXED(2123152057,32,FLEN)
NAN_BOXED(2155113481,32,FLEN)
NAN_BOXED(2877292547,32,FLEN)
NAN_BOXED(2123152057,32,FLEN)
NAN_BOXED(2155113481,32,FLEN)
NAN_BOXED(2877292551,32,FLEN)
NAN_BOXED(2123152057,32,FLEN)
NAN_BOXED(2155113481,32,FLEN)
NAN_BOXED(2877292559,32,FLEN)
NAN_BOXED(2123152057,32,FLEN)
NAN_BOXED(2155113481,32,FLEN)
NAN_BOXED(2877292575,32,FLEN)
NAN_BOXED(2123152057,32,FLEN)
NAN_BOXED(2155113481,32,FLEN)
NAN_BOXED(2877292607,32,FLEN)
NAN_BOXED(2123152057,32,FLEN)
NAN_BOXED(2155113481,32,FLEN)
NAN_BOXED(2877292671,32,FLEN)
NAN_BOXED(2123152057,32,FLEN)
NAN_BOXED(2155113481,32,FLEN)
NAN_BOXED(2877292799,32,FLEN)
NAN_BOXED(2123152057,32,FLEN)
NAN_BOXED(2155113481,32,FLEN)
NAN_BOXED(2877293055,32,FLEN)
NAN_BOXED(2123152057,32,FLEN)
NAN_BOXED(2155113481,32,FLEN)
NAN_BOXED(2877293567,32,FLEN)
NAN_BOXED(2123152057,32,FLEN)
NAN_BOXED(2155113481,32,FLEN)
NAN_BOXED(2877294591,32,FLEN)
NAN_BOXED(2123152057,32,FLEN)
NAN_BOXED(2155113481,32,FLEN)
NAN_BOXED(2877296639,32,FLEN)
NAN_BOXED(2123152057,32,FLEN)
NAN_BOXED(2155113481,32,FLEN)
NAN_BOXED(2877300735,32,FLEN)
NAN_BOXED(2123152057,32,FLEN)
NAN_BOXED(2155113481,32,FLEN)
NAN_BOXED(2877308927,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
