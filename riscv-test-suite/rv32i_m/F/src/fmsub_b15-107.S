
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:07 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_13568:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0cbab9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x746c09 and fs3 == 1 and fe3 == 0x57 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8cbab9; op2val:0x80746c09;
op3val:0xab807fff; valaddr_reg:x3; val_offset:40704*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40704*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13569:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0cbab9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x746c09 and fs3 == 1 and fe3 == 0x57 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8cbab9; op2val:0x80746c09;
op3val:0xab80ffff; valaddr_reg:x3; val_offset:40707*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40707*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13570:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0cbab9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x746c09 and fs3 == 1 and fe3 == 0x57 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8cbab9; op2val:0x80746c09;
op3val:0xab81ffff; valaddr_reg:x3; val_offset:40710*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40710*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13571:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0cbab9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x746c09 and fs3 == 1 and fe3 == 0x57 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8cbab9; op2val:0x80746c09;
op3val:0xab83ffff; valaddr_reg:x3; val_offset:40713*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40713*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13572:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0cbab9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x746c09 and fs3 == 1 and fe3 == 0x57 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8cbab9; op2val:0x80746c09;
op3val:0xab87ffff; valaddr_reg:x3; val_offset:40716*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40716*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13573:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0cbab9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x746c09 and fs3 == 1 and fe3 == 0x57 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8cbab9; op2val:0x80746c09;
op3val:0xab8fffff; valaddr_reg:x3; val_offset:40719*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40719*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13574:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0cbab9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x746c09 and fs3 == 1 and fe3 == 0x57 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8cbab9; op2val:0x80746c09;
op3val:0xab9fffff; valaddr_reg:x3; val_offset:40722*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40722*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13575:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0cbab9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x746c09 and fs3 == 1 and fe3 == 0x57 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8cbab9; op2val:0x80746c09;
op3val:0xabbfffff; valaddr_reg:x3; val_offset:40725*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40725*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13576:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0cbab9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x746c09 and fs3 == 1 and fe3 == 0x57 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8cbab9; op2val:0x80746c09;
op3val:0xabc00000; valaddr_reg:x3; val_offset:40728*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40728*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13577:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0cbab9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x746c09 and fs3 == 1 and fe3 == 0x57 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8cbab9; op2val:0x80746c09;
op3val:0xabe00000; valaddr_reg:x3; val_offset:40731*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40731*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13578:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0cbab9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x746c09 and fs3 == 1 and fe3 == 0x57 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8cbab9; op2val:0x80746c09;
op3val:0xabf00000; valaddr_reg:x3; val_offset:40734*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40734*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13579:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0cbab9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x746c09 and fs3 == 1 and fe3 == 0x57 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8cbab9; op2val:0x80746c09;
op3val:0xabf80000; valaddr_reg:x3; val_offset:40737*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40737*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13580:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0cbab9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x746c09 and fs3 == 1 and fe3 == 0x57 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8cbab9; op2val:0x80746c09;
op3val:0xabfc0000; valaddr_reg:x3; val_offset:40740*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40740*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13581:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0cbab9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x746c09 and fs3 == 1 and fe3 == 0x57 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8cbab9; op2val:0x80746c09;
op3val:0xabfe0000; valaddr_reg:x3; val_offset:40743*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40743*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13582:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0cbab9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x746c09 and fs3 == 1 and fe3 == 0x57 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8cbab9; op2val:0x80746c09;
op3val:0xabff0000; valaddr_reg:x3; val_offset:40746*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40746*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13583:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0cbab9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x746c09 and fs3 == 1 and fe3 == 0x57 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8cbab9; op2val:0x80746c09;
op3val:0xabff8000; valaddr_reg:x3; val_offset:40749*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40749*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13584:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0cbab9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x746c09 and fs3 == 1 and fe3 == 0x57 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8cbab9; op2val:0x80746c09;
op3val:0xabffc000; valaddr_reg:x3; val_offset:40752*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40752*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13585:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0cbab9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x746c09 and fs3 == 1 and fe3 == 0x57 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8cbab9; op2val:0x80746c09;
op3val:0xabffe000; valaddr_reg:x3; val_offset:40755*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40755*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13586:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0cbab9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x746c09 and fs3 == 1 and fe3 == 0x57 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8cbab9; op2val:0x80746c09;
op3val:0xabfff000; valaddr_reg:x3; val_offset:40758*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40758*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13587:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0cbab9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x746c09 and fs3 == 1 and fe3 == 0x57 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8cbab9; op2val:0x80746c09;
op3val:0xabfff800; valaddr_reg:x3; val_offset:40761*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40761*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13588:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0cbab9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x746c09 and fs3 == 1 and fe3 == 0x57 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8cbab9; op2val:0x80746c09;
op3val:0xabfffc00; valaddr_reg:x3; val_offset:40764*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40764*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13589:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0cbab9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x746c09 and fs3 == 1 and fe3 == 0x57 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8cbab9; op2val:0x80746c09;
op3val:0xabfffe00; valaddr_reg:x3; val_offset:40767*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40767*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13590:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0cbab9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x746c09 and fs3 == 1 and fe3 == 0x57 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8cbab9; op2val:0x80746c09;
op3val:0xabffff00; valaddr_reg:x3; val_offset:40770*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40770*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13591:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0cbab9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x746c09 and fs3 == 1 and fe3 == 0x57 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8cbab9; op2val:0x80746c09;
op3val:0xabffff80; valaddr_reg:x3; val_offset:40773*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40773*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13592:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0cbab9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x746c09 and fs3 == 1 and fe3 == 0x57 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8cbab9; op2val:0x80746c09;
op3val:0xabffffc0; valaddr_reg:x3; val_offset:40776*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40776*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13593:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0cbab9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x746c09 and fs3 == 1 and fe3 == 0x57 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8cbab9; op2val:0x80746c09;
op3val:0xabffffe0; valaddr_reg:x3; val_offset:40779*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40779*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13594:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0cbab9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x746c09 and fs3 == 1 and fe3 == 0x57 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8cbab9; op2val:0x80746c09;
op3val:0xabfffff0; valaddr_reg:x3; val_offset:40782*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40782*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13595:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0cbab9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x746c09 and fs3 == 1 and fe3 == 0x57 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8cbab9; op2val:0x80746c09;
op3val:0xabfffff8; valaddr_reg:x3; val_offset:40785*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40785*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13596:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0cbab9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x746c09 and fs3 == 1 and fe3 == 0x57 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8cbab9; op2val:0x80746c09;
op3val:0xabfffffc; valaddr_reg:x3; val_offset:40788*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40788*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13597:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0cbab9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x746c09 and fs3 == 1 and fe3 == 0x57 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8cbab9; op2val:0x80746c09;
op3val:0xabfffffe; valaddr_reg:x3; val_offset:40791*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40791*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13598:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0cbab9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x746c09 and fs3 == 1 and fe3 == 0x57 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8cbab9; op2val:0x80746c09;
op3val:0xabffffff; valaddr_reg:x3; val_offset:40794*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40794*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13599:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0cbab9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x746c09 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8cbab9; op2val:0x80746c09;
op3val:0xbf800001; valaddr_reg:x3; val_offset:40797*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40797*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13600:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0cbab9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x746c09 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8cbab9; op2val:0x80746c09;
op3val:0xbf800003; valaddr_reg:x3; val_offset:40800*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40800*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13601:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0cbab9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x746c09 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8cbab9; op2val:0x80746c09;
op3val:0xbf800007; valaddr_reg:x3; val_offset:40803*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40803*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13602:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0cbab9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x746c09 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8cbab9; op2val:0x80746c09;
op3val:0xbf999999; valaddr_reg:x3; val_offset:40806*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40806*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13603:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0cbab9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x746c09 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8cbab9; op2val:0x80746c09;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:40809*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40809*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13604:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0cbab9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x746c09 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8cbab9; op2val:0x80746c09;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:40812*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40812*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13605:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0cbab9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x746c09 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8cbab9; op2val:0x80746c09;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:40815*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40815*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13606:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0cbab9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x746c09 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8cbab9; op2val:0x80746c09;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:40818*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40818*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13607:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0cbab9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x746c09 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8cbab9; op2val:0x80746c09;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:40821*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40821*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13608:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0cbab9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x746c09 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8cbab9; op2val:0x80746c09;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:40824*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40824*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13609:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0cbab9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x746c09 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8cbab9; op2val:0x80746c09;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:40827*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40827*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13610:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0cbab9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x746c09 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8cbab9; op2val:0x80746c09;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:40830*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40830*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13611:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0cbab9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x746c09 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8cbab9; op2val:0x80746c09;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:40833*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40833*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13612:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0cbab9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x746c09 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8cbab9; op2val:0x80746c09;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:40836*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40836*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13613:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0cbab9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x746c09 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8cbab9; op2val:0x80746c09;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:40839*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40839*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13614:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0cbab9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x746c09 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8cbab9; op2val:0x80746c09;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:40842*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40842*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13615:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0cc612 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7462a6 and fs3 == 0 and fe3 == 0x42 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8cc612; op2val:0x7462a6;
op3val:0x21000000; valaddr_reg:x3; val_offset:40845*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40845*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13616:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0cc612 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7462a6 and fs3 == 0 and fe3 == 0x42 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8cc612; op2val:0x7462a6;
op3val:0x21000001; valaddr_reg:x3; val_offset:40848*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40848*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13617:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0cc612 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7462a6 and fs3 == 0 and fe3 == 0x42 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8cc612; op2val:0x7462a6;
op3val:0x21000003; valaddr_reg:x3; val_offset:40851*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40851*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13618:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0cc612 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7462a6 and fs3 == 0 and fe3 == 0x42 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8cc612; op2val:0x7462a6;
op3val:0x21000007; valaddr_reg:x3; val_offset:40854*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40854*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13619:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0cc612 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7462a6 and fs3 == 0 and fe3 == 0x42 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8cc612; op2val:0x7462a6;
op3val:0x2100000f; valaddr_reg:x3; val_offset:40857*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40857*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13620:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0cc612 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7462a6 and fs3 == 0 and fe3 == 0x42 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8cc612; op2val:0x7462a6;
op3val:0x2100001f; valaddr_reg:x3; val_offset:40860*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40860*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13621:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0cc612 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7462a6 and fs3 == 0 and fe3 == 0x42 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8cc612; op2val:0x7462a6;
op3val:0x2100003f; valaddr_reg:x3; val_offset:40863*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40863*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13622:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0cc612 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7462a6 and fs3 == 0 and fe3 == 0x42 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8cc612; op2val:0x7462a6;
op3val:0x2100007f; valaddr_reg:x3; val_offset:40866*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40866*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13623:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0cc612 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7462a6 and fs3 == 0 and fe3 == 0x42 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8cc612; op2val:0x7462a6;
op3val:0x210000ff; valaddr_reg:x3; val_offset:40869*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40869*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13624:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0cc612 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7462a6 and fs3 == 0 and fe3 == 0x42 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8cc612; op2val:0x7462a6;
op3val:0x210001ff; valaddr_reg:x3; val_offset:40872*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40872*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13625:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0cc612 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7462a6 and fs3 == 0 and fe3 == 0x42 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8cc612; op2val:0x7462a6;
op3val:0x210003ff; valaddr_reg:x3; val_offset:40875*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40875*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13626:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0cc612 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7462a6 and fs3 == 0 and fe3 == 0x42 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8cc612; op2val:0x7462a6;
op3val:0x210007ff; valaddr_reg:x3; val_offset:40878*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40878*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13627:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0cc612 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7462a6 and fs3 == 0 and fe3 == 0x42 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8cc612; op2val:0x7462a6;
op3val:0x21000fff; valaddr_reg:x3; val_offset:40881*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40881*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13628:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0cc612 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7462a6 and fs3 == 0 and fe3 == 0x42 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8cc612; op2val:0x7462a6;
op3val:0x21001fff; valaddr_reg:x3; val_offset:40884*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40884*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13629:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0cc612 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7462a6 and fs3 == 0 and fe3 == 0x42 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8cc612; op2val:0x7462a6;
op3val:0x21003fff; valaddr_reg:x3; val_offset:40887*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40887*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13630:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0cc612 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7462a6 and fs3 == 0 and fe3 == 0x42 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8cc612; op2val:0x7462a6;
op3val:0x21007fff; valaddr_reg:x3; val_offset:40890*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40890*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13631:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0cc612 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7462a6 and fs3 == 0 and fe3 == 0x42 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8cc612; op2val:0x7462a6;
op3val:0x2100ffff; valaddr_reg:x3; val_offset:40893*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40893*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13632:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0cc612 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7462a6 and fs3 == 0 and fe3 == 0x42 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8cc612; op2val:0x7462a6;
op3val:0x2101ffff; valaddr_reg:x3; val_offset:40896*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40896*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13633:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0cc612 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7462a6 and fs3 == 0 and fe3 == 0x42 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8cc612; op2val:0x7462a6;
op3val:0x2103ffff; valaddr_reg:x3; val_offset:40899*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40899*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13634:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0cc612 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7462a6 and fs3 == 0 and fe3 == 0x42 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8cc612; op2val:0x7462a6;
op3val:0x2107ffff; valaddr_reg:x3; val_offset:40902*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40902*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13635:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0cc612 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7462a6 and fs3 == 0 and fe3 == 0x42 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8cc612; op2val:0x7462a6;
op3val:0x210fffff; valaddr_reg:x3; val_offset:40905*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40905*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13636:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0cc612 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7462a6 and fs3 == 0 and fe3 == 0x42 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8cc612; op2val:0x7462a6;
op3val:0x211fffff; valaddr_reg:x3; val_offset:40908*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40908*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13637:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0cc612 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7462a6 and fs3 == 0 and fe3 == 0x42 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8cc612; op2val:0x7462a6;
op3val:0x213fffff; valaddr_reg:x3; val_offset:40911*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40911*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13638:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0cc612 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7462a6 and fs3 == 0 and fe3 == 0x42 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8cc612; op2val:0x7462a6;
op3val:0x21400000; valaddr_reg:x3; val_offset:40914*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40914*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13639:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0cc612 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7462a6 and fs3 == 0 and fe3 == 0x42 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8cc612; op2val:0x7462a6;
op3val:0x21600000; valaddr_reg:x3; val_offset:40917*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40917*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13640:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0cc612 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7462a6 and fs3 == 0 and fe3 == 0x42 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8cc612; op2val:0x7462a6;
op3val:0x21700000; valaddr_reg:x3; val_offset:40920*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40920*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13641:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0cc612 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7462a6 and fs3 == 0 and fe3 == 0x42 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8cc612; op2val:0x7462a6;
op3val:0x21780000; valaddr_reg:x3; val_offset:40923*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40923*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13642:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0cc612 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7462a6 and fs3 == 0 and fe3 == 0x42 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8cc612; op2val:0x7462a6;
op3val:0x217c0000; valaddr_reg:x3; val_offset:40926*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40926*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13643:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0cc612 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7462a6 and fs3 == 0 and fe3 == 0x42 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8cc612; op2val:0x7462a6;
op3val:0x217e0000; valaddr_reg:x3; val_offset:40929*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40929*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13644:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0cc612 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7462a6 and fs3 == 0 and fe3 == 0x42 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8cc612; op2val:0x7462a6;
op3val:0x217f0000; valaddr_reg:x3; val_offset:40932*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40932*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13645:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0cc612 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7462a6 and fs3 == 0 and fe3 == 0x42 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8cc612; op2val:0x7462a6;
op3val:0x217f8000; valaddr_reg:x3; val_offset:40935*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40935*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13646:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0cc612 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7462a6 and fs3 == 0 and fe3 == 0x42 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8cc612; op2val:0x7462a6;
op3val:0x217fc000; valaddr_reg:x3; val_offset:40938*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40938*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13647:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0cc612 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7462a6 and fs3 == 0 and fe3 == 0x42 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8cc612; op2val:0x7462a6;
op3val:0x217fe000; valaddr_reg:x3; val_offset:40941*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40941*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13648:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0cc612 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7462a6 and fs3 == 0 and fe3 == 0x42 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8cc612; op2val:0x7462a6;
op3val:0x217ff000; valaddr_reg:x3; val_offset:40944*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40944*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13649:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0cc612 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7462a6 and fs3 == 0 and fe3 == 0x42 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8cc612; op2val:0x7462a6;
op3val:0x217ff800; valaddr_reg:x3; val_offset:40947*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40947*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13650:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0cc612 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7462a6 and fs3 == 0 and fe3 == 0x42 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8cc612; op2val:0x7462a6;
op3val:0x217ffc00; valaddr_reg:x3; val_offset:40950*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40950*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13651:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0cc612 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7462a6 and fs3 == 0 and fe3 == 0x42 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8cc612; op2val:0x7462a6;
op3val:0x217ffe00; valaddr_reg:x3; val_offset:40953*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40953*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13652:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0cc612 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7462a6 and fs3 == 0 and fe3 == 0x42 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8cc612; op2val:0x7462a6;
op3val:0x217fff00; valaddr_reg:x3; val_offset:40956*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40956*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13653:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0cc612 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7462a6 and fs3 == 0 and fe3 == 0x42 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8cc612; op2val:0x7462a6;
op3val:0x217fff80; valaddr_reg:x3; val_offset:40959*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40959*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13654:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0cc612 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7462a6 and fs3 == 0 and fe3 == 0x42 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8cc612; op2val:0x7462a6;
op3val:0x217fffc0; valaddr_reg:x3; val_offset:40962*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40962*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13655:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0cc612 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7462a6 and fs3 == 0 and fe3 == 0x42 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8cc612; op2val:0x7462a6;
op3val:0x217fffe0; valaddr_reg:x3; val_offset:40965*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40965*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13656:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0cc612 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7462a6 and fs3 == 0 and fe3 == 0x42 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8cc612; op2val:0x7462a6;
op3val:0x217ffff0; valaddr_reg:x3; val_offset:40968*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40968*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13657:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0cc612 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7462a6 and fs3 == 0 and fe3 == 0x42 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8cc612; op2val:0x7462a6;
op3val:0x217ffff8; valaddr_reg:x3; val_offset:40971*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40971*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13658:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0cc612 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7462a6 and fs3 == 0 and fe3 == 0x42 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8cc612; op2val:0x7462a6;
op3val:0x217ffffc; valaddr_reg:x3; val_offset:40974*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40974*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13659:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0cc612 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7462a6 and fs3 == 0 and fe3 == 0x42 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8cc612; op2val:0x7462a6;
op3val:0x217ffffe; valaddr_reg:x3; val_offset:40977*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40977*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13660:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0cc612 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7462a6 and fs3 == 0 and fe3 == 0x42 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8cc612; op2val:0x7462a6;
op3val:0x217fffff; valaddr_reg:x3; val_offset:40980*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40980*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13661:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0cc612 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7462a6 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8cc612; op2val:0x7462a6;
op3val:0x3f800001; valaddr_reg:x3; val_offset:40983*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40983*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13662:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0cc612 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7462a6 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8cc612; op2val:0x7462a6;
op3val:0x3f800003; valaddr_reg:x3; val_offset:40986*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40986*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13663:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0cc612 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7462a6 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8cc612; op2val:0x7462a6;
op3val:0x3f800007; valaddr_reg:x3; val_offset:40989*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40989*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13664:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0cc612 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7462a6 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8cc612; op2val:0x7462a6;
op3val:0x3f999999; valaddr_reg:x3; val_offset:40992*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40992*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13665:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0cc612 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7462a6 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8cc612; op2val:0x7462a6;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:40995*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40995*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13666:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0cc612 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7462a6 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8cc612; op2val:0x7462a6;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:40998*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40998*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13667:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0cc612 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7462a6 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8cc612; op2val:0x7462a6;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:41001*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41001*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13668:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0cc612 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7462a6 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8cc612; op2val:0x7462a6;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:41004*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41004*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13669:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0cc612 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7462a6 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8cc612; op2val:0x7462a6;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:41007*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41007*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13670:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0cc612 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7462a6 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8cc612; op2val:0x7462a6;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:41010*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41010*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13671:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0cc612 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7462a6 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8cc612; op2val:0x7462a6;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:41013*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41013*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13672:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0cc612 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7462a6 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8cc612; op2val:0x7462a6;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:41016*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41016*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13673:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0cc612 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7462a6 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8cc612; op2val:0x7462a6;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:41019*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41019*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13674:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0cc612 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7462a6 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8cc612; op2val:0x7462a6;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:41022*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41022*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13675:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0cc612 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7462a6 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8cc612; op2val:0x7462a6;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:41025*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41025*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13676:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0cc612 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7462a6 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8cc612; op2val:0x7462a6;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:41028*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41028*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13677:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0f44f4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x725ba7 and fs3 == 0 and fe3 == 0x60 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8f44f4; op2val:0x725ba7;
op3val:0x30000000; valaddr_reg:x3; val_offset:41031*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41031*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13678:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0f44f4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x725ba7 and fs3 == 0 and fe3 == 0x60 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8f44f4; op2val:0x725ba7;
op3val:0x30000001; valaddr_reg:x3; val_offset:41034*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41034*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13679:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0f44f4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x725ba7 and fs3 == 0 and fe3 == 0x60 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8f44f4; op2val:0x725ba7;
op3val:0x30000003; valaddr_reg:x3; val_offset:41037*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41037*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13680:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0f44f4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x725ba7 and fs3 == 0 and fe3 == 0x60 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8f44f4; op2val:0x725ba7;
op3val:0x30000007; valaddr_reg:x3; val_offset:41040*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41040*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13681:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0f44f4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x725ba7 and fs3 == 0 and fe3 == 0x60 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8f44f4; op2val:0x725ba7;
op3val:0x3000000f; valaddr_reg:x3; val_offset:41043*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41043*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13682:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0f44f4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x725ba7 and fs3 == 0 and fe3 == 0x60 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8f44f4; op2val:0x725ba7;
op3val:0x3000001f; valaddr_reg:x3; val_offset:41046*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41046*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13683:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0f44f4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x725ba7 and fs3 == 0 and fe3 == 0x60 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8f44f4; op2val:0x725ba7;
op3val:0x3000003f; valaddr_reg:x3; val_offset:41049*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41049*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13684:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0f44f4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x725ba7 and fs3 == 0 and fe3 == 0x60 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8f44f4; op2val:0x725ba7;
op3val:0x3000007f; valaddr_reg:x3; val_offset:41052*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41052*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13685:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0f44f4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x725ba7 and fs3 == 0 and fe3 == 0x60 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8f44f4; op2val:0x725ba7;
op3val:0x300000ff; valaddr_reg:x3; val_offset:41055*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41055*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13686:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0f44f4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x725ba7 and fs3 == 0 and fe3 == 0x60 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8f44f4; op2val:0x725ba7;
op3val:0x300001ff; valaddr_reg:x3; val_offset:41058*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41058*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13687:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0f44f4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x725ba7 and fs3 == 0 and fe3 == 0x60 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8f44f4; op2val:0x725ba7;
op3val:0x300003ff; valaddr_reg:x3; val_offset:41061*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41061*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13688:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0f44f4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x725ba7 and fs3 == 0 and fe3 == 0x60 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8f44f4; op2val:0x725ba7;
op3val:0x300007ff; valaddr_reg:x3; val_offset:41064*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41064*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13689:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0f44f4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x725ba7 and fs3 == 0 and fe3 == 0x60 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8f44f4; op2val:0x725ba7;
op3val:0x30000fff; valaddr_reg:x3; val_offset:41067*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41067*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13690:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0f44f4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x725ba7 and fs3 == 0 and fe3 == 0x60 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8f44f4; op2val:0x725ba7;
op3val:0x30001fff; valaddr_reg:x3; val_offset:41070*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41070*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13691:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0f44f4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x725ba7 and fs3 == 0 and fe3 == 0x60 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8f44f4; op2val:0x725ba7;
op3val:0x30003fff; valaddr_reg:x3; val_offset:41073*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41073*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13692:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0f44f4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x725ba7 and fs3 == 0 and fe3 == 0x60 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8f44f4; op2val:0x725ba7;
op3val:0x30007fff; valaddr_reg:x3; val_offset:41076*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41076*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13693:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0f44f4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x725ba7 and fs3 == 0 and fe3 == 0x60 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8f44f4; op2val:0x725ba7;
op3val:0x3000ffff; valaddr_reg:x3; val_offset:41079*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41079*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13694:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0f44f4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x725ba7 and fs3 == 0 and fe3 == 0x60 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8f44f4; op2val:0x725ba7;
op3val:0x3001ffff; valaddr_reg:x3; val_offset:41082*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41082*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13695:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0f44f4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x725ba7 and fs3 == 0 and fe3 == 0x60 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8f44f4; op2val:0x725ba7;
op3val:0x3003ffff; valaddr_reg:x3; val_offset:41085*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41085*0 + 3*106*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2123152057,32,FLEN)
NAN_BOXED(2155113481,32,FLEN)
NAN_BOXED(2877325311,32,FLEN)
NAN_BOXED(2123152057,32,FLEN)
NAN_BOXED(2155113481,32,FLEN)
NAN_BOXED(2877358079,32,FLEN)
NAN_BOXED(2123152057,32,FLEN)
NAN_BOXED(2155113481,32,FLEN)
NAN_BOXED(2877423615,32,FLEN)
NAN_BOXED(2123152057,32,FLEN)
NAN_BOXED(2155113481,32,FLEN)
NAN_BOXED(2877554687,32,FLEN)
NAN_BOXED(2123152057,32,FLEN)
NAN_BOXED(2155113481,32,FLEN)
NAN_BOXED(2877816831,32,FLEN)
NAN_BOXED(2123152057,32,FLEN)
NAN_BOXED(2155113481,32,FLEN)
NAN_BOXED(2878341119,32,FLEN)
NAN_BOXED(2123152057,32,FLEN)
NAN_BOXED(2155113481,32,FLEN)
NAN_BOXED(2879389695,32,FLEN)
NAN_BOXED(2123152057,32,FLEN)
NAN_BOXED(2155113481,32,FLEN)
NAN_BOXED(2881486847,32,FLEN)
NAN_BOXED(2123152057,32,FLEN)
NAN_BOXED(2155113481,32,FLEN)
NAN_BOXED(2881486848,32,FLEN)
NAN_BOXED(2123152057,32,FLEN)
NAN_BOXED(2155113481,32,FLEN)
NAN_BOXED(2883584000,32,FLEN)
NAN_BOXED(2123152057,32,FLEN)
NAN_BOXED(2155113481,32,FLEN)
NAN_BOXED(2884632576,32,FLEN)
NAN_BOXED(2123152057,32,FLEN)
NAN_BOXED(2155113481,32,FLEN)
NAN_BOXED(2885156864,32,FLEN)
NAN_BOXED(2123152057,32,FLEN)
NAN_BOXED(2155113481,32,FLEN)
NAN_BOXED(2885419008,32,FLEN)
NAN_BOXED(2123152057,32,FLEN)
NAN_BOXED(2155113481,32,FLEN)
NAN_BOXED(2885550080,32,FLEN)
NAN_BOXED(2123152057,32,FLEN)
NAN_BOXED(2155113481,32,FLEN)
NAN_BOXED(2885615616,32,FLEN)
NAN_BOXED(2123152057,32,FLEN)
NAN_BOXED(2155113481,32,FLEN)
NAN_BOXED(2885648384,32,FLEN)
NAN_BOXED(2123152057,32,FLEN)
NAN_BOXED(2155113481,32,FLEN)
NAN_BOXED(2885664768,32,FLEN)
NAN_BOXED(2123152057,32,FLEN)
NAN_BOXED(2155113481,32,FLEN)
NAN_BOXED(2885672960,32,FLEN)
NAN_BOXED(2123152057,32,FLEN)
NAN_BOXED(2155113481,32,FLEN)
NAN_BOXED(2885677056,32,FLEN)
NAN_BOXED(2123152057,32,FLEN)
NAN_BOXED(2155113481,32,FLEN)
NAN_BOXED(2885679104,32,FLEN)
NAN_BOXED(2123152057,32,FLEN)
NAN_BOXED(2155113481,32,FLEN)
NAN_BOXED(2885680128,32,FLEN)
NAN_BOXED(2123152057,32,FLEN)
NAN_BOXED(2155113481,32,FLEN)
NAN_BOXED(2885680640,32,FLEN)
NAN_BOXED(2123152057,32,FLEN)
NAN_BOXED(2155113481,32,FLEN)
NAN_BOXED(2885680896,32,FLEN)
NAN_BOXED(2123152057,32,FLEN)
NAN_BOXED(2155113481,32,FLEN)
NAN_BOXED(2885681024,32,FLEN)
NAN_BOXED(2123152057,32,FLEN)
NAN_BOXED(2155113481,32,FLEN)
NAN_BOXED(2885681088,32,FLEN)
NAN_BOXED(2123152057,32,FLEN)
NAN_BOXED(2155113481,32,FLEN)
NAN_BOXED(2885681120,32,FLEN)
NAN_BOXED(2123152057,32,FLEN)
NAN_BOXED(2155113481,32,FLEN)
NAN_BOXED(2885681136,32,FLEN)
NAN_BOXED(2123152057,32,FLEN)
NAN_BOXED(2155113481,32,FLEN)
NAN_BOXED(2885681144,32,FLEN)
NAN_BOXED(2123152057,32,FLEN)
NAN_BOXED(2155113481,32,FLEN)
NAN_BOXED(2885681148,32,FLEN)
NAN_BOXED(2123152057,32,FLEN)
NAN_BOXED(2155113481,32,FLEN)
NAN_BOXED(2885681150,32,FLEN)
NAN_BOXED(2123152057,32,FLEN)
NAN_BOXED(2155113481,32,FLEN)
NAN_BOXED(2885681151,32,FLEN)
NAN_BOXED(2123152057,32,FLEN)
NAN_BOXED(2155113481,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2123152057,32,FLEN)
NAN_BOXED(2155113481,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2123152057,32,FLEN)
NAN_BOXED(2155113481,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
NAN_BOXED(2123152057,32,FLEN)
NAN_BOXED(2155113481,32,FLEN)
NAN_BOXED(3214514585,32,FLEN)
NAN_BOXED(2123152057,32,FLEN)
NAN_BOXED(2155113481,32,FLEN)
NAN_BOXED(3215233609,32,FLEN)
NAN_BOXED(2123152057,32,FLEN)
NAN_BOXED(2155113481,32,FLEN)
NAN_BOXED(3216192307,32,FLEN)
NAN_BOXED(2123152057,32,FLEN)
NAN_BOXED(2155113481,32,FLEN)
NAN_BOXED(3216431981,32,FLEN)
NAN_BOXED(2123152057,32,FLEN)
NAN_BOXED(2155113481,32,FLEN)
NAN_BOXED(3216751547,32,FLEN)
NAN_BOXED(2123152057,32,FLEN)
NAN_BOXED(2155113481,32,FLEN)
NAN_BOXED(3217310788,32,FLEN)
NAN_BOXED(2123152057,32,FLEN)
NAN_BOXED(2155113481,32,FLEN)
NAN_BOXED(3217870028,32,FLEN)
NAN_BOXED(2123152057,32,FLEN)
NAN_BOXED(2155113481,32,FLEN)
NAN_BOXED(3218828726,32,FLEN)
NAN_BOXED(2123152057,32,FLEN)
NAN_BOXED(2155113481,32,FLEN)
NAN_BOXED(3219547750,32,FLEN)
NAN_BOXED(2123152057,32,FLEN)
NAN_BOXED(2155113481,32,FLEN)
NAN_BOXED(3220027099,32,FLEN)
NAN_BOXED(2123152057,32,FLEN)
NAN_BOXED(2155113481,32,FLEN)
NAN_BOXED(3221225464,32,FLEN)
NAN_BOXED(2123152057,32,FLEN)
NAN_BOXED(2155113481,32,FLEN)
NAN_BOXED(3221225468,32,FLEN)
NAN_BOXED(2123152057,32,FLEN)
NAN_BOXED(2155113481,32,FLEN)
NAN_BOXED(3221225470,32,FLEN)
NAN_BOXED(2123154962,32,FLEN)
NAN_BOXED(7627430,32,FLEN)
NAN_BOXED(553648128,32,FLEN)
NAN_BOXED(2123154962,32,FLEN)
NAN_BOXED(7627430,32,FLEN)
NAN_BOXED(553648129,32,FLEN)
NAN_BOXED(2123154962,32,FLEN)
NAN_BOXED(7627430,32,FLEN)
NAN_BOXED(553648131,32,FLEN)
NAN_BOXED(2123154962,32,FLEN)
NAN_BOXED(7627430,32,FLEN)
NAN_BOXED(553648135,32,FLEN)
NAN_BOXED(2123154962,32,FLEN)
NAN_BOXED(7627430,32,FLEN)
NAN_BOXED(553648143,32,FLEN)
NAN_BOXED(2123154962,32,FLEN)
NAN_BOXED(7627430,32,FLEN)
NAN_BOXED(553648159,32,FLEN)
NAN_BOXED(2123154962,32,FLEN)
NAN_BOXED(7627430,32,FLEN)
NAN_BOXED(553648191,32,FLEN)
NAN_BOXED(2123154962,32,FLEN)
NAN_BOXED(7627430,32,FLEN)
NAN_BOXED(553648255,32,FLEN)
NAN_BOXED(2123154962,32,FLEN)
NAN_BOXED(7627430,32,FLEN)
NAN_BOXED(553648383,32,FLEN)
NAN_BOXED(2123154962,32,FLEN)
NAN_BOXED(7627430,32,FLEN)
NAN_BOXED(553648639,32,FLEN)
NAN_BOXED(2123154962,32,FLEN)
NAN_BOXED(7627430,32,FLEN)
NAN_BOXED(553649151,32,FLEN)
NAN_BOXED(2123154962,32,FLEN)
NAN_BOXED(7627430,32,FLEN)
NAN_BOXED(553650175,32,FLEN)
NAN_BOXED(2123154962,32,FLEN)
NAN_BOXED(7627430,32,FLEN)
NAN_BOXED(553652223,32,FLEN)
NAN_BOXED(2123154962,32,FLEN)
NAN_BOXED(7627430,32,FLEN)
NAN_BOXED(553656319,32,FLEN)
NAN_BOXED(2123154962,32,FLEN)
NAN_BOXED(7627430,32,FLEN)
NAN_BOXED(553664511,32,FLEN)
NAN_BOXED(2123154962,32,FLEN)
NAN_BOXED(7627430,32,FLEN)
NAN_BOXED(553680895,32,FLEN)
NAN_BOXED(2123154962,32,FLEN)
NAN_BOXED(7627430,32,FLEN)
NAN_BOXED(553713663,32,FLEN)
NAN_BOXED(2123154962,32,FLEN)
NAN_BOXED(7627430,32,FLEN)
NAN_BOXED(553779199,32,FLEN)
NAN_BOXED(2123154962,32,FLEN)
NAN_BOXED(7627430,32,FLEN)
NAN_BOXED(553910271,32,FLEN)
NAN_BOXED(2123154962,32,FLEN)
NAN_BOXED(7627430,32,FLEN)
NAN_BOXED(554172415,32,FLEN)
NAN_BOXED(2123154962,32,FLEN)
NAN_BOXED(7627430,32,FLEN)
NAN_BOXED(554696703,32,FLEN)
NAN_BOXED(2123154962,32,FLEN)
NAN_BOXED(7627430,32,FLEN)
NAN_BOXED(555745279,32,FLEN)
NAN_BOXED(2123154962,32,FLEN)
NAN_BOXED(7627430,32,FLEN)
NAN_BOXED(557842431,32,FLEN)
NAN_BOXED(2123154962,32,FLEN)
NAN_BOXED(7627430,32,FLEN)
NAN_BOXED(557842432,32,FLEN)
NAN_BOXED(2123154962,32,FLEN)
NAN_BOXED(7627430,32,FLEN)
NAN_BOXED(559939584,32,FLEN)
NAN_BOXED(2123154962,32,FLEN)
NAN_BOXED(7627430,32,FLEN)
NAN_BOXED(560988160,32,FLEN)
NAN_BOXED(2123154962,32,FLEN)
NAN_BOXED(7627430,32,FLEN)
NAN_BOXED(561512448,32,FLEN)
NAN_BOXED(2123154962,32,FLEN)
NAN_BOXED(7627430,32,FLEN)
NAN_BOXED(561774592,32,FLEN)
NAN_BOXED(2123154962,32,FLEN)
NAN_BOXED(7627430,32,FLEN)
NAN_BOXED(561905664,32,FLEN)
NAN_BOXED(2123154962,32,FLEN)
NAN_BOXED(7627430,32,FLEN)
NAN_BOXED(561971200,32,FLEN)
NAN_BOXED(2123154962,32,FLEN)
NAN_BOXED(7627430,32,FLEN)
NAN_BOXED(562003968,32,FLEN)
NAN_BOXED(2123154962,32,FLEN)
NAN_BOXED(7627430,32,FLEN)
NAN_BOXED(562020352,32,FLEN)
NAN_BOXED(2123154962,32,FLEN)
NAN_BOXED(7627430,32,FLEN)
NAN_BOXED(562028544,32,FLEN)
NAN_BOXED(2123154962,32,FLEN)
NAN_BOXED(7627430,32,FLEN)
NAN_BOXED(562032640,32,FLEN)
NAN_BOXED(2123154962,32,FLEN)
NAN_BOXED(7627430,32,FLEN)
NAN_BOXED(562034688,32,FLEN)
NAN_BOXED(2123154962,32,FLEN)
NAN_BOXED(7627430,32,FLEN)
NAN_BOXED(562035712,32,FLEN)
NAN_BOXED(2123154962,32,FLEN)
NAN_BOXED(7627430,32,FLEN)
NAN_BOXED(562036224,32,FLEN)
NAN_BOXED(2123154962,32,FLEN)
NAN_BOXED(7627430,32,FLEN)
NAN_BOXED(562036480,32,FLEN)
NAN_BOXED(2123154962,32,FLEN)
NAN_BOXED(7627430,32,FLEN)
NAN_BOXED(562036608,32,FLEN)
NAN_BOXED(2123154962,32,FLEN)
NAN_BOXED(7627430,32,FLEN)
NAN_BOXED(562036672,32,FLEN)
NAN_BOXED(2123154962,32,FLEN)
NAN_BOXED(7627430,32,FLEN)
NAN_BOXED(562036704,32,FLEN)
NAN_BOXED(2123154962,32,FLEN)
NAN_BOXED(7627430,32,FLEN)
NAN_BOXED(562036720,32,FLEN)
NAN_BOXED(2123154962,32,FLEN)
NAN_BOXED(7627430,32,FLEN)
NAN_BOXED(562036728,32,FLEN)
NAN_BOXED(2123154962,32,FLEN)
NAN_BOXED(7627430,32,FLEN)
NAN_BOXED(562036732,32,FLEN)
NAN_BOXED(2123154962,32,FLEN)
NAN_BOXED(7627430,32,FLEN)
NAN_BOXED(562036734,32,FLEN)
NAN_BOXED(2123154962,32,FLEN)
NAN_BOXED(7627430,32,FLEN)
NAN_BOXED(562036735,32,FLEN)
NAN_BOXED(2123154962,32,FLEN)
NAN_BOXED(7627430,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2123154962,32,FLEN)
NAN_BOXED(7627430,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2123154962,32,FLEN)
NAN_BOXED(7627430,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2123154962,32,FLEN)
NAN_BOXED(7627430,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2123154962,32,FLEN)
NAN_BOXED(7627430,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2123154962,32,FLEN)
NAN_BOXED(7627430,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2123154962,32,FLEN)
NAN_BOXED(7627430,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2123154962,32,FLEN)
NAN_BOXED(7627430,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2123154962,32,FLEN)
NAN_BOXED(7627430,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2123154962,32,FLEN)
NAN_BOXED(7627430,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2123154962,32,FLEN)
NAN_BOXED(7627430,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2123154962,32,FLEN)
NAN_BOXED(7627430,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2123154962,32,FLEN)
NAN_BOXED(7627430,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2123154962,32,FLEN)
NAN_BOXED(7627430,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2123154962,32,FLEN)
NAN_BOXED(7627430,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2123154962,32,FLEN)
NAN_BOXED(7627430,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2123318516,32,FLEN)
NAN_BOXED(7494567,32,FLEN)
NAN_BOXED(805306368,32,FLEN)
NAN_BOXED(2123318516,32,FLEN)
NAN_BOXED(7494567,32,FLEN)
NAN_BOXED(805306369,32,FLEN)
NAN_BOXED(2123318516,32,FLEN)
NAN_BOXED(7494567,32,FLEN)
NAN_BOXED(805306371,32,FLEN)
NAN_BOXED(2123318516,32,FLEN)
NAN_BOXED(7494567,32,FLEN)
NAN_BOXED(805306375,32,FLEN)
NAN_BOXED(2123318516,32,FLEN)
NAN_BOXED(7494567,32,FLEN)
NAN_BOXED(805306383,32,FLEN)
NAN_BOXED(2123318516,32,FLEN)
NAN_BOXED(7494567,32,FLEN)
NAN_BOXED(805306399,32,FLEN)
NAN_BOXED(2123318516,32,FLEN)
NAN_BOXED(7494567,32,FLEN)
NAN_BOXED(805306431,32,FLEN)
NAN_BOXED(2123318516,32,FLEN)
NAN_BOXED(7494567,32,FLEN)
NAN_BOXED(805306495,32,FLEN)
NAN_BOXED(2123318516,32,FLEN)
NAN_BOXED(7494567,32,FLEN)
NAN_BOXED(805306623,32,FLEN)
NAN_BOXED(2123318516,32,FLEN)
NAN_BOXED(7494567,32,FLEN)
NAN_BOXED(805306879,32,FLEN)
NAN_BOXED(2123318516,32,FLEN)
NAN_BOXED(7494567,32,FLEN)
NAN_BOXED(805307391,32,FLEN)
NAN_BOXED(2123318516,32,FLEN)
NAN_BOXED(7494567,32,FLEN)
NAN_BOXED(805308415,32,FLEN)
NAN_BOXED(2123318516,32,FLEN)
NAN_BOXED(7494567,32,FLEN)
NAN_BOXED(805310463,32,FLEN)
NAN_BOXED(2123318516,32,FLEN)
NAN_BOXED(7494567,32,FLEN)
NAN_BOXED(805314559,32,FLEN)
NAN_BOXED(2123318516,32,FLEN)
NAN_BOXED(7494567,32,FLEN)
NAN_BOXED(805322751,32,FLEN)
NAN_BOXED(2123318516,32,FLEN)
NAN_BOXED(7494567,32,FLEN)
NAN_BOXED(805339135,32,FLEN)
NAN_BOXED(2123318516,32,FLEN)
NAN_BOXED(7494567,32,FLEN)
NAN_BOXED(805371903,32,FLEN)
NAN_BOXED(2123318516,32,FLEN)
NAN_BOXED(7494567,32,FLEN)
NAN_BOXED(805437439,32,FLEN)
NAN_BOXED(2123318516,32,FLEN)
NAN_BOXED(7494567,32,FLEN)
NAN_BOXED(805568511,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
