
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:07 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_1280:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x40ee07 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x29d81a and fs3 == 0 and fe3 == 0x92 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc0ee07; op2val:0x229d81a;
op3val:0x49600000; valaddr_reg:x3; val_offset:3840*0 + 3*10*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3840*0 + 3*10*FLEN/8, x4, x1, x2)

inst_1281:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x40ee07 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x29d81a and fs3 == 0 and fe3 == 0x92 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc0ee07; op2val:0x229d81a;
op3val:0x49700000; valaddr_reg:x3; val_offset:3843*0 + 3*10*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3843*0 + 3*10*FLEN/8, x4, x1, x2)

inst_1282:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x40ee07 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x29d81a and fs3 == 0 and fe3 == 0x92 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc0ee07; op2val:0x229d81a;
op3val:0x49780000; valaddr_reg:x3; val_offset:3846*0 + 3*10*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3846*0 + 3*10*FLEN/8, x4, x1, x2)

inst_1283:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x40ee07 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x29d81a and fs3 == 0 and fe3 == 0x92 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc0ee07; op2val:0x229d81a;
op3val:0x497c0000; valaddr_reg:x3; val_offset:3849*0 + 3*10*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3849*0 + 3*10*FLEN/8, x4, x1, x2)

inst_1284:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x40ee07 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x29d81a and fs3 == 0 and fe3 == 0x92 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc0ee07; op2val:0x229d81a;
op3val:0x497e0000; valaddr_reg:x3; val_offset:3852*0 + 3*10*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3852*0 + 3*10*FLEN/8, x4, x1, x2)

inst_1285:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x40ee07 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x29d81a and fs3 == 0 and fe3 == 0x92 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc0ee07; op2val:0x229d81a;
op3val:0x497f0000; valaddr_reg:x3; val_offset:3855*0 + 3*10*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3855*0 + 3*10*FLEN/8, x4, x1, x2)

inst_1286:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x40ee07 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x29d81a and fs3 == 0 and fe3 == 0x92 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc0ee07; op2val:0x229d81a;
op3val:0x497f8000; valaddr_reg:x3; val_offset:3858*0 + 3*10*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3858*0 + 3*10*FLEN/8, x4, x1, x2)

inst_1287:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x40ee07 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x29d81a and fs3 == 0 and fe3 == 0x92 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc0ee07; op2val:0x229d81a;
op3val:0x497fc000; valaddr_reg:x3; val_offset:3861*0 + 3*10*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3861*0 + 3*10*FLEN/8, x4, x1, x2)

inst_1288:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x40ee07 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x29d81a and fs3 == 0 and fe3 == 0x92 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc0ee07; op2val:0x229d81a;
op3val:0x497fe000; valaddr_reg:x3; val_offset:3864*0 + 3*10*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3864*0 + 3*10*FLEN/8, x4, x1, x2)

inst_1289:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x40ee07 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x29d81a and fs3 == 0 and fe3 == 0x92 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc0ee07; op2val:0x229d81a;
op3val:0x497ff000; valaddr_reg:x3; val_offset:3867*0 + 3*10*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3867*0 + 3*10*FLEN/8, x4, x1, x2)

inst_1290:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x40ee07 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x29d81a and fs3 == 0 and fe3 == 0x92 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc0ee07; op2val:0x229d81a;
op3val:0x497ff800; valaddr_reg:x3; val_offset:3870*0 + 3*10*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3870*0 + 3*10*FLEN/8, x4, x1, x2)

inst_1291:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x40ee07 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x29d81a and fs3 == 0 and fe3 == 0x92 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc0ee07; op2val:0x229d81a;
op3val:0x497ffc00; valaddr_reg:x3; val_offset:3873*0 + 3*10*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3873*0 + 3*10*FLEN/8, x4, x1, x2)

inst_1292:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x40ee07 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x29d81a and fs3 == 0 and fe3 == 0x92 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc0ee07; op2val:0x229d81a;
op3val:0x497ffe00; valaddr_reg:x3; val_offset:3876*0 + 3*10*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3876*0 + 3*10*FLEN/8, x4, x1, x2)

inst_1293:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x40ee07 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x29d81a and fs3 == 0 and fe3 == 0x92 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc0ee07; op2val:0x229d81a;
op3val:0x497fff00; valaddr_reg:x3; val_offset:3879*0 + 3*10*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3879*0 + 3*10*FLEN/8, x4, x1, x2)

inst_1294:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x40ee07 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x29d81a and fs3 == 0 and fe3 == 0x92 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc0ee07; op2val:0x229d81a;
op3val:0x497fff80; valaddr_reg:x3; val_offset:3882*0 + 3*10*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3882*0 + 3*10*FLEN/8, x4, x1, x2)

inst_1295:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x40ee07 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x29d81a and fs3 == 0 and fe3 == 0x92 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc0ee07; op2val:0x229d81a;
op3val:0x497fffc0; valaddr_reg:x3; val_offset:3885*0 + 3*10*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3885*0 + 3*10*FLEN/8, x4, x1, x2)

inst_1296:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x40ee07 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x29d81a and fs3 == 0 and fe3 == 0x92 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc0ee07; op2val:0x229d81a;
op3val:0x497fffe0; valaddr_reg:x3; val_offset:3888*0 + 3*10*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3888*0 + 3*10*FLEN/8, x4, x1, x2)

inst_1297:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x40ee07 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x29d81a and fs3 == 0 and fe3 == 0x92 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc0ee07; op2val:0x229d81a;
op3val:0x497ffff0; valaddr_reg:x3; val_offset:3891*0 + 3*10*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3891*0 + 3*10*FLEN/8, x4, x1, x2)

inst_1298:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x40ee07 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x29d81a and fs3 == 0 and fe3 == 0x92 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc0ee07; op2val:0x229d81a;
op3val:0x497ffff8; valaddr_reg:x3; val_offset:3894*0 + 3*10*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3894*0 + 3*10*FLEN/8, x4, x1, x2)

inst_1299:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x40ee07 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x29d81a and fs3 == 0 and fe3 == 0x92 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc0ee07; op2val:0x229d81a;
op3val:0x497ffffc; valaddr_reg:x3; val_offset:3897*0 + 3*10*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3897*0 + 3*10*FLEN/8, x4, x1, x2)

inst_1300:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x40ee07 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x29d81a and fs3 == 0 and fe3 == 0x92 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc0ee07; op2val:0x229d81a;
op3val:0x497ffffe; valaddr_reg:x3; val_offset:3900*0 + 3*10*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3900*0 + 3*10*FLEN/8, x4, x1, x2)

inst_1301:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x40ee07 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x29d81a and fs3 == 0 and fe3 == 0x92 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc0ee07; op2val:0x229d81a;
op3val:0x497fffff; valaddr_reg:x3; val_offset:3903*0 + 3*10*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3903*0 + 3*10*FLEN/8, x4, x1, x2)

inst_1302:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x4f0e49 and fs2 == 1 and fe2 == 0x84 and fm2 == 0x1e41c0 and fs3 == 1 and fe3 == 0xf5 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ccf0e49; op2val:0xc21e41c0;
op3val:0xfa800000; valaddr_reg:x3; val_offset:3906*0 + 3*10*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3906*0 + 3*10*FLEN/8, x4, x1, x2)

inst_1303:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x4f0e49 and fs2 == 1 and fe2 == 0x84 and fm2 == 0x1e41c0 and fs3 == 1 and fe3 == 0xf5 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ccf0e49; op2val:0xc21e41c0;
op3val:0xfa800001; valaddr_reg:x3; val_offset:3909*0 + 3*10*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3909*0 + 3*10*FLEN/8, x4, x1, x2)

inst_1304:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x4f0e49 and fs2 == 1 and fe2 == 0x84 and fm2 == 0x1e41c0 and fs3 == 1 and fe3 == 0xf5 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ccf0e49; op2val:0xc21e41c0;
op3val:0xfa800003; valaddr_reg:x3; val_offset:3912*0 + 3*10*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3912*0 + 3*10*FLEN/8, x4, x1, x2)

inst_1305:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x4f0e49 and fs2 == 1 and fe2 == 0x84 and fm2 == 0x1e41c0 and fs3 == 1 and fe3 == 0xf5 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ccf0e49; op2val:0xc21e41c0;
op3val:0xfa800007; valaddr_reg:x3; val_offset:3915*0 + 3*10*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3915*0 + 3*10*FLEN/8, x4, x1, x2)

inst_1306:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x4f0e49 and fs2 == 1 and fe2 == 0x84 and fm2 == 0x1e41c0 and fs3 == 1 and fe3 == 0xf5 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ccf0e49; op2val:0xc21e41c0;
op3val:0xfa80000f; valaddr_reg:x3; val_offset:3918*0 + 3*10*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3918*0 + 3*10*FLEN/8, x4, x1, x2)

inst_1307:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x4f0e49 and fs2 == 1 and fe2 == 0x84 and fm2 == 0x1e41c0 and fs3 == 1 and fe3 == 0xf5 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ccf0e49; op2val:0xc21e41c0;
op3val:0xfa80001f; valaddr_reg:x3; val_offset:3921*0 + 3*10*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3921*0 + 3*10*FLEN/8, x4, x1, x2)

inst_1308:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x4f0e49 and fs2 == 1 and fe2 == 0x84 and fm2 == 0x1e41c0 and fs3 == 1 and fe3 == 0xf5 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ccf0e49; op2val:0xc21e41c0;
op3val:0xfa80003f; valaddr_reg:x3; val_offset:3924*0 + 3*10*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3924*0 + 3*10*FLEN/8, x4, x1, x2)

inst_1309:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x4f0e49 and fs2 == 1 and fe2 == 0x84 and fm2 == 0x1e41c0 and fs3 == 1 and fe3 == 0xf5 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ccf0e49; op2val:0xc21e41c0;
op3val:0xfa80007f; valaddr_reg:x3; val_offset:3927*0 + 3*10*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3927*0 + 3*10*FLEN/8, x4, x1, x2)

inst_1310:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x4f0e49 and fs2 == 1 and fe2 == 0x84 and fm2 == 0x1e41c0 and fs3 == 1 and fe3 == 0xf5 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ccf0e49; op2val:0xc21e41c0;
op3val:0xfa8000ff; valaddr_reg:x3; val_offset:3930*0 + 3*10*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3930*0 + 3*10*FLEN/8, x4, x1, x2)

inst_1311:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x4f0e49 and fs2 == 1 and fe2 == 0x84 and fm2 == 0x1e41c0 and fs3 == 1 and fe3 == 0xf5 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ccf0e49; op2val:0xc21e41c0;
op3val:0xfa8001ff; valaddr_reg:x3; val_offset:3933*0 + 3*10*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3933*0 + 3*10*FLEN/8, x4, x1, x2)

inst_1312:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x4f0e49 and fs2 == 1 and fe2 == 0x84 and fm2 == 0x1e41c0 and fs3 == 1 and fe3 == 0xf5 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ccf0e49; op2val:0xc21e41c0;
op3val:0xfa8003ff; valaddr_reg:x3; val_offset:3936*0 + 3*10*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3936*0 + 3*10*FLEN/8, x4, x1, x2)

inst_1313:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x4f0e49 and fs2 == 1 and fe2 == 0x84 and fm2 == 0x1e41c0 and fs3 == 1 and fe3 == 0xf5 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ccf0e49; op2val:0xc21e41c0;
op3val:0xfa8007ff; valaddr_reg:x3; val_offset:3939*0 + 3*10*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3939*0 + 3*10*FLEN/8, x4, x1, x2)

inst_1314:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x4f0e49 and fs2 == 1 and fe2 == 0x84 and fm2 == 0x1e41c0 and fs3 == 1 and fe3 == 0xf5 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ccf0e49; op2val:0xc21e41c0;
op3val:0xfa800fff; valaddr_reg:x3; val_offset:3942*0 + 3*10*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3942*0 + 3*10*FLEN/8, x4, x1, x2)

inst_1315:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x4f0e49 and fs2 == 1 and fe2 == 0x84 and fm2 == 0x1e41c0 and fs3 == 1 and fe3 == 0xf5 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ccf0e49; op2val:0xc21e41c0;
op3val:0xfa801fff; valaddr_reg:x3; val_offset:3945*0 + 3*10*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3945*0 + 3*10*FLEN/8, x4, x1, x2)

inst_1316:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x4f0e49 and fs2 == 1 and fe2 == 0x84 and fm2 == 0x1e41c0 and fs3 == 1 and fe3 == 0xf5 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ccf0e49; op2val:0xc21e41c0;
op3val:0xfa803fff; valaddr_reg:x3; val_offset:3948*0 + 3*10*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3948*0 + 3*10*FLEN/8, x4, x1, x2)

inst_1317:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x4f0e49 and fs2 == 1 and fe2 == 0x84 and fm2 == 0x1e41c0 and fs3 == 1 and fe3 == 0xf5 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ccf0e49; op2val:0xc21e41c0;
op3val:0xfa807fff; valaddr_reg:x3; val_offset:3951*0 + 3*10*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3951*0 + 3*10*FLEN/8, x4, x1, x2)

inst_1318:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x4f0e49 and fs2 == 1 and fe2 == 0x84 and fm2 == 0x1e41c0 and fs3 == 1 and fe3 == 0xf5 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ccf0e49; op2val:0xc21e41c0;
op3val:0xfa80ffff; valaddr_reg:x3; val_offset:3954*0 + 3*10*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3954*0 + 3*10*FLEN/8, x4, x1, x2)

inst_1319:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x4f0e49 and fs2 == 1 and fe2 == 0x84 and fm2 == 0x1e41c0 and fs3 == 1 and fe3 == 0xf5 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ccf0e49; op2val:0xc21e41c0;
op3val:0xfa81ffff; valaddr_reg:x3; val_offset:3957*0 + 3*10*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3957*0 + 3*10*FLEN/8, x4, x1, x2)

inst_1320:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x4f0e49 and fs2 == 1 and fe2 == 0x84 and fm2 == 0x1e41c0 and fs3 == 1 and fe3 == 0xf5 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ccf0e49; op2val:0xc21e41c0;
op3val:0xfa83ffff; valaddr_reg:x3; val_offset:3960*0 + 3*10*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3960*0 + 3*10*FLEN/8, x4, x1, x2)

inst_1321:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x4f0e49 and fs2 == 1 and fe2 == 0x84 and fm2 == 0x1e41c0 and fs3 == 1 and fe3 == 0xf5 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ccf0e49; op2val:0xc21e41c0;
op3val:0xfa87ffff; valaddr_reg:x3; val_offset:3963*0 + 3*10*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3963*0 + 3*10*FLEN/8, x4, x1, x2)

inst_1322:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x4f0e49 and fs2 == 1 and fe2 == 0x84 and fm2 == 0x1e41c0 and fs3 == 1 and fe3 == 0xf5 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ccf0e49; op2val:0xc21e41c0;
op3val:0xfa8fffff; valaddr_reg:x3; val_offset:3966*0 + 3*10*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3966*0 + 3*10*FLEN/8, x4, x1, x2)

inst_1323:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x4f0e49 and fs2 == 1 and fe2 == 0x84 and fm2 == 0x1e41c0 and fs3 == 1 and fe3 == 0xf5 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ccf0e49; op2val:0xc21e41c0;
op3val:0xfa9fffff; valaddr_reg:x3; val_offset:3969*0 + 3*10*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3969*0 + 3*10*FLEN/8, x4, x1, x2)

inst_1324:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x4f0e49 and fs2 == 1 and fe2 == 0x84 and fm2 == 0x1e41c0 and fs3 == 1 and fe3 == 0xf5 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ccf0e49; op2val:0xc21e41c0;
op3val:0xfabfffff; valaddr_reg:x3; val_offset:3972*0 + 3*10*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3972*0 + 3*10*FLEN/8, x4, x1, x2)

inst_1325:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x4f0e49 and fs2 == 1 and fe2 == 0x84 and fm2 == 0x1e41c0 and fs3 == 1 and fe3 == 0xf5 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ccf0e49; op2val:0xc21e41c0;
op3val:0xfac00000; valaddr_reg:x3; val_offset:3975*0 + 3*10*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3975*0 + 3*10*FLEN/8, x4, x1, x2)

inst_1326:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x4f0e49 and fs2 == 1 and fe2 == 0x84 and fm2 == 0x1e41c0 and fs3 == 1 and fe3 == 0xf5 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ccf0e49; op2val:0xc21e41c0;
op3val:0xfae00000; valaddr_reg:x3; val_offset:3978*0 + 3*10*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3978*0 + 3*10*FLEN/8, x4, x1, x2)

inst_1327:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x4f0e49 and fs2 == 1 and fe2 == 0x84 and fm2 == 0x1e41c0 and fs3 == 1 and fe3 == 0xf5 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ccf0e49; op2val:0xc21e41c0;
op3val:0xfaf00000; valaddr_reg:x3; val_offset:3981*0 + 3*10*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3981*0 + 3*10*FLEN/8, x4, x1, x2)

inst_1328:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x4f0e49 and fs2 == 1 and fe2 == 0x84 and fm2 == 0x1e41c0 and fs3 == 1 and fe3 == 0xf5 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ccf0e49; op2val:0xc21e41c0;
op3val:0xfaf80000; valaddr_reg:x3; val_offset:3984*0 + 3*10*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3984*0 + 3*10*FLEN/8, x4, x1, x2)

inst_1329:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x4f0e49 and fs2 == 1 and fe2 == 0x84 and fm2 == 0x1e41c0 and fs3 == 1 and fe3 == 0xf5 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ccf0e49; op2val:0xc21e41c0;
op3val:0xfafc0000; valaddr_reg:x3; val_offset:3987*0 + 3*10*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3987*0 + 3*10*FLEN/8, x4, x1, x2)

inst_1330:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x4f0e49 and fs2 == 1 and fe2 == 0x84 and fm2 == 0x1e41c0 and fs3 == 1 and fe3 == 0xf5 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ccf0e49; op2val:0xc21e41c0;
op3val:0xfafe0000; valaddr_reg:x3; val_offset:3990*0 + 3*10*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3990*0 + 3*10*FLEN/8, x4, x1, x2)

inst_1331:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x4f0e49 and fs2 == 1 and fe2 == 0x84 and fm2 == 0x1e41c0 and fs3 == 1 and fe3 == 0xf5 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ccf0e49; op2val:0xc21e41c0;
op3val:0xfaff0000; valaddr_reg:x3; val_offset:3993*0 + 3*10*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3993*0 + 3*10*FLEN/8, x4, x1, x2)

inst_1332:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x4f0e49 and fs2 == 1 and fe2 == 0x84 and fm2 == 0x1e41c0 and fs3 == 1 and fe3 == 0xf5 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ccf0e49; op2val:0xc21e41c0;
op3val:0xfaff8000; valaddr_reg:x3; val_offset:3996*0 + 3*10*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3996*0 + 3*10*FLEN/8, x4, x1, x2)

inst_1333:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x4f0e49 and fs2 == 1 and fe2 == 0x84 and fm2 == 0x1e41c0 and fs3 == 1 and fe3 == 0xf5 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ccf0e49; op2val:0xc21e41c0;
op3val:0xfaffc000; valaddr_reg:x3; val_offset:3999*0 + 3*10*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3999*0 + 3*10*FLEN/8, x4, x1, x2)

inst_1334:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x4f0e49 and fs2 == 1 and fe2 == 0x84 and fm2 == 0x1e41c0 and fs3 == 1 and fe3 == 0xf5 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ccf0e49; op2val:0xc21e41c0;
op3val:0xfaffe000; valaddr_reg:x3; val_offset:4002*0 + 3*10*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4002*0 + 3*10*FLEN/8, x4, x1, x2)

inst_1335:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x4f0e49 and fs2 == 1 and fe2 == 0x84 and fm2 == 0x1e41c0 and fs3 == 1 and fe3 == 0xf5 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ccf0e49; op2val:0xc21e41c0;
op3val:0xfafff000; valaddr_reg:x3; val_offset:4005*0 + 3*10*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4005*0 + 3*10*FLEN/8, x4, x1, x2)

inst_1336:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x4f0e49 and fs2 == 1 and fe2 == 0x84 and fm2 == 0x1e41c0 and fs3 == 1 and fe3 == 0xf5 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ccf0e49; op2val:0xc21e41c0;
op3val:0xfafff800; valaddr_reg:x3; val_offset:4008*0 + 3*10*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4008*0 + 3*10*FLEN/8, x4, x1, x2)

inst_1337:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x4f0e49 and fs2 == 1 and fe2 == 0x84 and fm2 == 0x1e41c0 and fs3 == 1 and fe3 == 0xf5 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ccf0e49; op2val:0xc21e41c0;
op3val:0xfafffc00; valaddr_reg:x3; val_offset:4011*0 + 3*10*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4011*0 + 3*10*FLEN/8, x4, x1, x2)

inst_1338:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x4f0e49 and fs2 == 1 and fe2 == 0x84 and fm2 == 0x1e41c0 and fs3 == 1 and fe3 == 0xf5 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ccf0e49; op2val:0xc21e41c0;
op3val:0xfafffe00; valaddr_reg:x3; val_offset:4014*0 + 3*10*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4014*0 + 3*10*FLEN/8, x4, x1, x2)

inst_1339:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x4f0e49 and fs2 == 1 and fe2 == 0x84 and fm2 == 0x1e41c0 and fs3 == 1 and fe3 == 0xf5 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ccf0e49; op2val:0xc21e41c0;
op3val:0xfaffff00; valaddr_reg:x3; val_offset:4017*0 + 3*10*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4017*0 + 3*10*FLEN/8, x4, x1, x2)

inst_1340:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x4f0e49 and fs2 == 1 and fe2 == 0x84 and fm2 == 0x1e41c0 and fs3 == 1 and fe3 == 0xf5 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ccf0e49; op2val:0xc21e41c0;
op3val:0xfaffff80; valaddr_reg:x3; val_offset:4020*0 + 3*10*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4020*0 + 3*10*FLEN/8, x4, x1, x2)

inst_1341:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x4f0e49 and fs2 == 1 and fe2 == 0x84 and fm2 == 0x1e41c0 and fs3 == 1 and fe3 == 0xf5 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ccf0e49; op2val:0xc21e41c0;
op3val:0xfaffffc0; valaddr_reg:x3; val_offset:4023*0 + 3*10*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4023*0 + 3*10*FLEN/8, x4, x1, x2)

inst_1342:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x4f0e49 and fs2 == 1 and fe2 == 0x84 and fm2 == 0x1e41c0 and fs3 == 1 and fe3 == 0xf5 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ccf0e49; op2val:0xc21e41c0;
op3val:0xfaffffe0; valaddr_reg:x3; val_offset:4026*0 + 3*10*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4026*0 + 3*10*FLEN/8, x4, x1, x2)

inst_1343:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x4f0e49 and fs2 == 1 and fe2 == 0x84 and fm2 == 0x1e41c0 and fs3 == 1 and fe3 == 0xf5 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ccf0e49; op2val:0xc21e41c0;
op3val:0xfafffff0; valaddr_reg:x3; val_offset:4029*0 + 3*10*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4029*0 + 3*10*FLEN/8, x4, x1, x2)

inst_1344:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x4f0e49 and fs2 == 1 and fe2 == 0x84 and fm2 == 0x1e41c0 and fs3 == 1 and fe3 == 0xf5 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ccf0e49; op2val:0xc21e41c0;
op3val:0xfafffff8; valaddr_reg:x3; val_offset:4032*0 + 3*10*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4032*0 + 3*10*FLEN/8, x4, x1, x2)

inst_1345:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x4f0e49 and fs2 == 1 and fe2 == 0x84 and fm2 == 0x1e41c0 and fs3 == 1 and fe3 == 0xf5 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ccf0e49; op2val:0xc21e41c0;
op3val:0xfafffffc; valaddr_reg:x3; val_offset:4035*0 + 3*10*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4035*0 + 3*10*FLEN/8, x4, x1, x2)

inst_1346:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x4f0e49 and fs2 == 1 and fe2 == 0x84 and fm2 == 0x1e41c0 and fs3 == 1 and fe3 == 0xf5 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ccf0e49; op2val:0xc21e41c0;
op3val:0xfafffffe; valaddr_reg:x3; val_offset:4038*0 + 3*10*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4038*0 + 3*10*FLEN/8, x4, x1, x2)

inst_1347:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x4f0e49 and fs2 == 1 and fe2 == 0x84 and fm2 == 0x1e41c0 and fs3 == 1 and fe3 == 0xf5 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ccf0e49; op2val:0xc21e41c0;
op3val:0xfaffffff; valaddr_reg:x3; val_offset:4041*0 + 3*10*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4041*0 + 3*10*FLEN/8, x4, x1, x2)

inst_1348:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x4f0e49 and fs2 == 1 and fe2 == 0x84 and fm2 == 0x1e41c0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ccf0e49; op2val:0xc21e41c0;
op3val:0xff000001; valaddr_reg:x3; val_offset:4044*0 + 3*10*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4044*0 + 3*10*FLEN/8, x4, x1, x2)

inst_1349:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x4f0e49 and fs2 == 1 and fe2 == 0x84 and fm2 == 0x1e41c0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ccf0e49; op2val:0xc21e41c0;
op3val:0xff000003; valaddr_reg:x3; val_offset:4047*0 + 3*10*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4047*0 + 3*10*FLEN/8, x4, x1, x2)

inst_1350:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x4f0e49 and fs2 == 1 and fe2 == 0x84 and fm2 == 0x1e41c0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ccf0e49; op2val:0xc21e41c0;
op3val:0xff000007; valaddr_reg:x3; val_offset:4050*0 + 3*10*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4050*0 + 3*10*FLEN/8, x4, x1, x2)

inst_1351:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x4f0e49 and fs2 == 1 and fe2 == 0x84 and fm2 == 0x1e41c0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ccf0e49; op2val:0xc21e41c0;
op3val:0xff199999; valaddr_reg:x3; val_offset:4053*0 + 3*10*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4053*0 + 3*10*FLEN/8, x4, x1, x2)

inst_1352:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x4f0e49 and fs2 == 1 and fe2 == 0x84 and fm2 == 0x1e41c0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ccf0e49; op2val:0xc21e41c0;
op3val:0xff249249; valaddr_reg:x3; val_offset:4056*0 + 3*10*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4056*0 + 3*10*FLEN/8, x4, x1, x2)

inst_1353:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x4f0e49 and fs2 == 1 and fe2 == 0x84 and fm2 == 0x1e41c0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ccf0e49; op2val:0xc21e41c0;
op3val:0xff333333; valaddr_reg:x3; val_offset:4059*0 + 3*10*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4059*0 + 3*10*FLEN/8, x4, x1, x2)

inst_1354:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x4f0e49 and fs2 == 1 and fe2 == 0x84 and fm2 == 0x1e41c0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ccf0e49; op2val:0xc21e41c0;
op3val:0xff36db6d; valaddr_reg:x3; val_offset:4062*0 + 3*10*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4062*0 + 3*10*FLEN/8, x4, x1, x2)

inst_1355:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x4f0e49 and fs2 == 1 and fe2 == 0x84 and fm2 == 0x1e41c0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ccf0e49; op2val:0xc21e41c0;
op3val:0xff3bbbbb; valaddr_reg:x3; val_offset:4065*0 + 3*10*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4065*0 + 3*10*FLEN/8, x4, x1, x2)

inst_1356:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x4f0e49 and fs2 == 1 and fe2 == 0x84 and fm2 == 0x1e41c0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ccf0e49; op2val:0xc21e41c0;
op3val:0xff444444; valaddr_reg:x3; val_offset:4068*0 + 3*10*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4068*0 + 3*10*FLEN/8, x4, x1, x2)

inst_1357:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x4f0e49 and fs2 == 1 and fe2 == 0x84 and fm2 == 0x1e41c0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ccf0e49; op2val:0xc21e41c0;
op3val:0xff4ccccc; valaddr_reg:x3; val_offset:4071*0 + 3*10*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4071*0 + 3*10*FLEN/8, x4, x1, x2)

inst_1358:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x4f0e49 and fs2 == 1 and fe2 == 0x84 and fm2 == 0x1e41c0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ccf0e49; op2val:0xc21e41c0;
op3val:0xff5b6db6; valaddr_reg:x3; val_offset:4074*0 + 3*10*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4074*0 + 3*10*FLEN/8, x4, x1, x2)

inst_1359:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x4f0e49 and fs2 == 1 and fe2 == 0x84 and fm2 == 0x1e41c0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ccf0e49; op2val:0xc21e41c0;
op3val:0xff666666; valaddr_reg:x3; val_offset:4077*0 + 3*10*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4077*0 + 3*10*FLEN/8, x4, x1, x2)

inst_1360:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x4f0e49 and fs2 == 1 and fe2 == 0x84 and fm2 == 0x1e41c0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ccf0e49; op2val:0xc21e41c0;
op3val:0xff6db6db; valaddr_reg:x3; val_offset:4080*0 + 3*10*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4080*0 + 3*10*FLEN/8, x4, x1, x2)

inst_1361:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x4f0e49 and fs2 == 1 and fe2 == 0x84 and fm2 == 0x1e41c0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ccf0e49; op2val:0xc21e41c0;
op3val:0xff7ffff8; valaddr_reg:x3; val_offset:4083*0 + 3*10*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4083*0 + 3*10*FLEN/8, x4, x1, x2)

inst_1362:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x4f0e49 and fs2 == 1 and fe2 == 0x84 and fm2 == 0x1e41c0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ccf0e49; op2val:0xc21e41c0;
op3val:0xff7ffffc; valaddr_reg:x3; val_offset:4086*0 + 3*10*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4086*0 + 3*10*FLEN/8, x4, x1, x2)

inst_1363:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x4f0e49 and fs2 == 1 and fe2 == 0x84 and fm2 == 0x1e41c0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ccf0e49; op2val:0xc21e41c0;
op3val:0xff7ffffe; valaddr_reg:x3; val_offset:4089*0 + 3*10*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4089*0 + 3*10*FLEN/8, x4, x1, x2)

inst_1364:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x510080 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cd10080; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:4092*0 + 3*10*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4092*0 + 3*10*FLEN/8, x4, x1, x2)

inst_1365:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x510080 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cd10080; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:4095*0 + 3*10*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4095*0 + 3*10*FLEN/8, x4, x1, x2)

inst_1366:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x510080 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cd10080; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:4098*0 + 3*10*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4098*0 + 3*10*FLEN/8, x4, x1, x2)

inst_1367:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x510080 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cd10080; op2val:0x0;
op3val:0x199999; valaddr_reg:x3; val_offset:4101*0 + 3*10*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4101*0 + 3*10*FLEN/8, x4, x1, x2)

inst_1368:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x510080 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cd10080; op2val:0x0;
op3val:0x249249; valaddr_reg:x3; val_offset:4104*0 + 3*10*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4104*0 + 3*10*FLEN/8, x4, x1, x2)

inst_1369:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x510080 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cd10080; op2val:0x0;
op3val:0x333333; valaddr_reg:x3; val_offset:4107*0 + 3*10*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4107*0 + 3*10*FLEN/8, x4, x1, x2)

inst_1370:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x510080 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cd10080; op2val:0x0;
op3val:0x36db6d; valaddr_reg:x3; val_offset:4110*0 + 3*10*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4110*0 + 3*10*FLEN/8, x4, x1, x2)

inst_1371:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x510080 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cd10080; op2val:0x0;
op3val:0x3bbbbb; valaddr_reg:x3; val_offset:4113*0 + 3*10*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4113*0 + 3*10*FLEN/8, x4, x1, x2)

inst_1372:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x510080 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cd10080; op2val:0x0;
op3val:0x444444; valaddr_reg:x3; val_offset:4116*0 + 3*10*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4116*0 + 3*10*FLEN/8, x4, x1, x2)

inst_1373:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x510080 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cd10080; op2val:0x0;
op3val:0x4ccccc; valaddr_reg:x3; val_offset:4119*0 + 3*10*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4119*0 + 3*10*FLEN/8, x4, x1, x2)

inst_1374:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x510080 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cd10080; op2val:0x0;
op3val:0x5b6db6; valaddr_reg:x3; val_offset:4122*0 + 3*10*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4122*0 + 3*10*FLEN/8, x4, x1, x2)

inst_1375:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x510080 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cd10080; op2val:0x0;
op3val:0x666666; valaddr_reg:x3; val_offset:4125*0 + 3*10*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4125*0 + 3*10*FLEN/8, x4, x1, x2)

inst_1376:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x510080 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cd10080; op2val:0x0;
op3val:0x6db6db; valaddr_reg:x3; val_offset:4128*0 + 3*10*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4128*0 + 3*10*FLEN/8, x4, x1, x2)

inst_1377:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x510080 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cd10080; op2val:0x0;
op3val:0x7ffff8; valaddr_reg:x3; val_offset:4131*0 + 3*10*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4131*0 + 3*10*FLEN/8, x4, x1, x2)

inst_1378:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x510080 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cd10080; op2val:0x0;
op3val:0x7ffffc; valaddr_reg:x3; val_offset:4134*0 + 3*10*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4134*0 + 3*10*FLEN/8, x4, x1, x2)

inst_1379:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x510080 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cd10080; op2val:0x0;
op3val:0x7ffffe; valaddr_reg:x3; val_offset:4137*0 + 3*10*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4137*0 + 3*10*FLEN/8, x4, x1, x2)

inst_1380:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x510080 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cd10080; op2val:0x0;
op3val:0xd000000; valaddr_reg:x3; val_offset:4140*0 + 3*10*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4140*0 + 3*10*FLEN/8, x4, x1, x2)

inst_1381:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x510080 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cd10080; op2val:0x0;
op3val:0xd000001; valaddr_reg:x3; val_offset:4143*0 + 3*10*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4143*0 + 3*10*FLEN/8, x4, x1, x2)

inst_1382:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x510080 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cd10080; op2val:0x0;
op3val:0xd000003; valaddr_reg:x3; val_offset:4146*0 + 3*10*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4146*0 + 3*10*FLEN/8, x4, x1, x2)

inst_1383:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x510080 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cd10080; op2val:0x0;
op3val:0xd000007; valaddr_reg:x3; val_offset:4149*0 + 3*10*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4149*0 + 3*10*FLEN/8, x4, x1, x2)

inst_1384:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x510080 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cd10080; op2val:0x0;
op3val:0xd00000f; valaddr_reg:x3; val_offset:4152*0 + 3*10*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4152*0 + 3*10*FLEN/8, x4, x1, x2)

inst_1385:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x510080 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cd10080; op2val:0x0;
op3val:0xd00001f; valaddr_reg:x3; val_offset:4155*0 + 3*10*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4155*0 + 3*10*FLEN/8, x4, x1, x2)

inst_1386:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x510080 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cd10080; op2val:0x0;
op3val:0xd00003f; valaddr_reg:x3; val_offset:4158*0 + 3*10*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4158*0 + 3*10*FLEN/8, x4, x1, x2)

inst_1387:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x510080 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cd10080; op2val:0x0;
op3val:0xd00007f; valaddr_reg:x3; val_offset:4161*0 + 3*10*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4161*0 + 3*10*FLEN/8, x4, x1, x2)

inst_1388:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x510080 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cd10080; op2val:0x0;
op3val:0xd0000ff; valaddr_reg:x3; val_offset:4164*0 + 3*10*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4164*0 + 3*10*FLEN/8, x4, x1, x2)

inst_1389:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x510080 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cd10080; op2val:0x0;
op3val:0xd0001ff; valaddr_reg:x3; val_offset:4167*0 + 3*10*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4167*0 + 3*10*FLEN/8, x4, x1, x2)

inst_1390:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x510080 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cd10080; op2val:0x0;
op3val:0xd0003ff; valaddr_reg:x3; val_offset:4170*0 + 3*10*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4170*0 + 3*10*FLEN/8, x4, x1, x2)

inst_1391:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x510080 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cd10080; op2val:0x0;
op3val:0xd0007ff; valaddr_reg:x3; val_offset:4173*0 + 3*10*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4173*0 + 3*10*FLEN/8, x4, x1, x2)

inst_1392:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x510080 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cd10080; op2val:0x0;
op3val:0xd000fff; valaddr_reg:x3; val_offset:4176*0 + 3*10*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4176*0 + 3*10*FLEN/8, x4, x1, x2)

inst_1393:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x510080 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cd10080; op2val:0x0;
op3val:0xd001fff; valaddr_reg:x3; val_offset:4179*0 + 3*10*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4179*0 + 3*10*FLEN/8, x4, x1, x2)

inst_1394:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x510080 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cd10080; op2val:0x0;
op3val:0xd003fff; valaddr_reg:x3; val_offset:4182*0 + 3*10*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4182*0 + 3*10*FLEN/8, x4, x1, x2)

inst_1395:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x510080 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cd10080; op2val:0x0;
op3val:0xd007fff; valaddr_reg:x3; val_offset:4185*0 + 3*10*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4185*0 + 3*10*FLEN/8, x4, x1, x2)

inst_1396:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x510080 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cd10080; op2val:0x0;
op3val:0xd00ffff; valaddr_reg:x3; val_offset:4188*0 + 3*10*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4188*0 + 3*10*FLEN/8, x4, x1, x2)

inst_1397:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x510080 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cd10080; op2val:0x0;
op3val:0xd01ffff; valaddr_reg:x3; val_offset:4191*0 + 3*10*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4191*0 + 3*10*FLEN/8, x4, x1, x2)

inst_1398:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x510080 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cd10080; op2val:0x0;
op3val:0xd03ffff; valaddr_reg:x3; val_offset:4194*0 + 3*10*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4194*0 + 3*10*FLEN/8, x4, x1, x2)

inst_1399:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x510080 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cd10080; op2val:0x0;
op3val:0xd07ffff; valaddr_reg:x3; val_offset:4197*0 + 3*10*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4197*0 + 3*10*FLEN/8, x4, x1, x2)

inst_1400:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x510080 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cd10080; op2val:0x0;
op3val:0xd0fffff; valaddr_reg:x3; val_offset:4200*0 + 3*10*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4200*0 + 3*10*FLEN/8, x4, x1, x2)

inst_1401:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x510080 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cd10080; op2val:0x0;
op3val:0xd1fffff; valaddr_reg:x3; val_offset:4203*0 + 3*10*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4203*0 + 3*10*FLEN/8, x4, x1, x2)

inst_1402:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x510080 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cd10080; op2val:0x0;
op3val:0xd3fffff; valaddr_reg:x3; val_offset:4206*0 + 3*10*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4206*0 + 3*10*FLEN/8, x4, x1, x2)

inst_1403:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x510080 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cd10080; op2val:0x0;
op3val:0xd400000; valaddr_reg:x3; val_offset:4209*0 + 3*10*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4209*0 + 3*10*FLEN/8, x4, x1, x2)

inst_1404:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x510080 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cd10080; op2val:0x0;
op3val:0xd600000; valaddr_reg:x3; val_offset:4212*0 + 3*10*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4212*0 + 3*10*FLEN/8, x4, x1, x2)

inst_1405:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x510080 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cd10080; op2val:0x0;
op3val:0xd700000; valaddr_reg:x3; val_offset:4215*0 + 3*10*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4215*0 + 3*10*FLEN/8, x4, x1, x2)

inst_1406:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x510080 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cd10080; op2val:0x0;
op3val:0xd780000; valaddr_reg:x3; val_offset:4218*0 + 3*10*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4218*0 + 3*10*FLEN/8, x4, x1, x2)

inst_1407:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x510080 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cd10080; op2val:0x0;
op3val:0xd7c0000; valaddr_reg:x3; val_offset:4221*0 + 3*10*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4221*0 + 3*10*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2093018631,32,FLEN)
NAN_BOXED(36296730,32,FLEN)
NAN_BOXED(1231028224,32,FLEN)
NAN_BOXED(2093018631,32,FLEN)
NAN_BOXED(36296730,32,FLEN)
NAN_BOXED(1232076800,32,FLEN)
NAN_BOXED(2093018631,32,FLEN)
NAN_BOXED(36296730,32,FLEN)
NAN_BOXED(1232601088,32,FLEN)
NAN_BOXED(2093018631,32,FLEN)
NAN_BOXED(36296730,32,FLEN)
NAN_BOXED(1232863232,32,FLEN)
NAN_BOXED(2093018631,32,FLEN)
NAN_BOXED(36296730,32,FLEN)
NAN_BOXED(1232994304,32,FLEN)
NAN_BOXED(2093018631,32,FLEN)
NAN_BOXED(36296730,32,FLEN)
NAN_BOXED(1233059840,32,FLEN)
NAN_BOXED(2093018631,32,FLEN)
NAN_BOXED(36296730,32,FLEN)
NAN_BOXED(1233092608,32,FLEN)
NAN_BOXED(2093018631,32,FLEN)
NAN_BOXED(36296730,32,FLEN)
NAN_BOXED(1233108992,32,FLEN)
NAN_BOXED(2093018631,32,FLEN)
NAN_BOXED(36296730,32,FLEN)
NAN_BOXED(1233117184,32,FLEN)
NAN_BOXED(2093018631,32,FLEN)
NAN_BOXED(36296730,32,FLEN)
NAN_BOXED(1233121280,32,FLEN)
NAN_BOXED(2093018631,32,FLEN)
NAN_BOXED(36296730,32,FLEN)
NAN_BOXED(1233123328,32,FLEN)
NAN_BOXED(2093018631,32,FLEN)
NAN_BOXED(36296730,32,FLEN)
NAN_BOXED(1233124352,32,FLEN)
NAN_BOXED(2093018631,32,FLEN)
NAN_BOXED(36296730,32,FLEN)
NAN_BOXED(1233124864,32,FLEN)
NAN_BOXED(2093018631,32,FLEN)
NAN_BOXED(36296730,32,FLEN)
NAN_BOXED(1233125120,32,FLEN)
NAN_BOXED(2093018631,32,FLEN)
NAN_BOXED(36296730,32,FLEN)
NAN_BOXED(1233125248,32,FLEN)
NAN_BOXED(2093018631,32,FLEN)
NAN_BOXED(36296730,32,FLEN)
NAN_BOXED(1233125312,32,FLEN)
NAN_BOXED(2093018631,32,FLEN)
NAN_BOXED(36296730,32,FLEN)
NAN_BOXED(1233125344,32,FLEN)
NAN_BOXED(2093018631,32,FLEN)
NAN_BOXED(36296730,32,FLEN)
NAN_BOXED(1233125360,32,FLEN)
NAN_BOXED(2093018631,32,FLEN)
NAN_BOXED(36296730,32,FLEN)
NAN_BOXED(1233125368,32,FLEN)
NAN_BOXED(2093018631,32,FLEN)
NAN_BOXED(36296730,32,FLEN)
NAN_BOXED(1233125372,32,FLEN)
NAN_BOXED(2093018631,32,FLEN)
NAN_BOXED(36296730,32,FLEN)
NAN_BOXED(1233125374,32,FLEN)
NAN_BOXED(2093018631,32,FLEN)
NAN_BOXED(36296730,32,FLEN)
NAN_BOXED(1233125375,32,FLEN)
NAN_BOXED(2093944393,32,FLEN)
NAN_BOXED(3256762816,32,FLEN)
NAN_BOXED(4202692608,32,FLEN)
NAN_BOXED(2093944393,32,FLEN)
NAN_BOXED(3256762816,32,FLEN)
NAN_BOXED(4202692609,32,FLEN)
NAN_BOXED(2093944393,32,FLEN)
NAN_BOXED(3256762816,32,FLEN)
NAN_BOXED(4202692611,32,FLEN)
NAN_BOXED(2093944393,32,FLEN)
NAN_BOXED(3256762816,32,FLEN)
NAN_BOXED(4202692615,32,FLEN)
NAN_BOXED(2093944393,32,FLEN)
NAN_BOXED(3256762816,32,FLEN)
NAN_BOXED(4202692623,32,FLEN)
NAN_BOXED(2093944393,32,FLEN)
NAN_BOXED(3256762816,32,FLEN)
NAN_BOXED(4202692639,32,FLEN)
NAN_BOXED(2093944393,32,FLEN)
NAN_BOXED(3256762816,32,FLEN)
NAN_BOXED(4202692671,32,FLEN)
NAN_BOXED(2093944393,32,FLEN)
NAN_BOXED(3256762816,32,FLEN)
NAN_BOXED(4202692735,32,FLEN)
NAN_BOXED(2093944393,32,FLEN)
NAN_BOXED(3256762816,32,FLEN)
NAN_BOXED(4202692863,32,FLEN)
NAN_BOXED(2093944393,32,FLEN)
NAN_BOXED(3256762816,32,FLEN)
NAN_BOXED(4202693119,32,FLEN)
NAN_BOXED(2093944393,32,FLEN)
NAN_BOXED(3256762816,32,FLEN)
NAN_BOXED(4202693631,32,FLEN)
NAN_BOXED(2093944393,32,FLEN)
NAN_BOXED(3256762816,32,FLEN)
NAN_BOXED(4202694655,32,FLEN)
NAN_BOXED(2093944393,32,FLEN)
NAN_BOXED(3256762816,32,FLEN)
NAN_BOXED(4202696703,32,FLEN)
NAN_BOXED(2093944393,32,FLEN)
NAN_BOXED(3256762816,32,FLEN)
NAN_BOXED(4202700799,32,FLEN)
NAN_BOXED(2093944393,32,FLEN)
NAN_BOXED(3256762816,32,FLEN)
NAN_BOXED(4202708991,32,FLEN)
NAN_BOXED(2093944393,32,FLEN)
NAN_BOXED(3256762816,32,FLEN)
NAN_BOXED(4202725375,32,FLEN)
NAN_BOXED(2093944393,32,FLEN)
NAN_BOXED(3256762816,32,FLEN)
NAN_BOXED(4202758143,32,FLEN)
NAN_BOXED(2093944393,32,FLEN)
NAN_BOXED(3256762816,32,FLEN)
NAN_BOXED(4202823679,32,FLEN)
NAN_BOXED(2093944393,32,FLEN)
NAN_BOXED(3256762816,32,FLEN)
NAN_BOXED(4202954751,32,FLEN)
NAN_BOXED(2093944393,32,FLEN)
NAN_BOXED(3256762816,32,FLEN)
NAN_BOXED(4203216895,32,FLEN)
NAN_BOXED(2093944393,32,FLEN)
NAN_BOXED(3256762816,32,FLEN)
NAN_BOXED(4203741183,32,FLEN)
NAN_BOXED(2093944393,32,FLEN)
NAN_BOXED(3256762816,32,FLEN)
NAN_BOXED(4204789759,32,FLEN)
NAN_BOXED(2093944393,32,FLEN)
NAN_BOXED(3256762816,32,FLEN)
NAN_BOXED(4206886911,32,FLEN)
NAN_BOXED(2093944393,32,FLEN)
NAN_BOXED(3256762816,32,FLEN)
NAN_BOXED(4206886912,32,FLEN)
NAN_BOXED(2093944393,32,FLEN)
NAN_BOXED(3256762816,32,FLEN)
NAN_BOXED(4208984064,32,FLEN)
NAN_BOXED(2093944393,32,FLEN)
NAN_BOXED(3256762816,32,FLEN)
NAN_BOXED(4210032640,32,FLEN)
NAN_BOXED(2093944393,32,FLEN)
NAN_BOXED(3256762816,32,FLEN)
NAN_BOXED(4210556928,32,FLEN)
NAN_BOXED(2093944393,32,FLEN)
NAN_BOXED(3256762816,32,FLEN)
NAN_BOXED(4210819072,32,FLEN)
NAN_BOXED(2093944393,32,FLEN)
NAN_BOXED(3256762816,32,FLEN)
NAN_BOXED(4210950144,32,FLEN)
NAN_BOXED(2093944393,32,FLEN)
NAN_BOXED(3256762816,32,FLEN)
NAN_BOXED(4211015680,32,FLEN)
NAN_BOXED(2093944393,32,FLEN)
NAN_BOXED(3256762816,32,FLEN)
NAN_BOXED(4211048448,32,FLEN)
NAN_BOXED(2093944393,32,FLEN)
NAN_BOXED(3256762816,32,FLEN)
NAN_BOXED(4211064832,32,FLEN)
NAN_BOXED(2093944393,32,FLEN)
NAN_BOXED(3256762816,32,FLEN)
NAN_BOXED(4211073024,32,FLEN)
NAN_BOXED(2093944393,32,FLEN)
NAN_BOXED(3256762816,32,FLEN)
NAN_BOXED(4211077120,32,FLEN)
NAN_BOXED(2093944393,32,FLEN)
NAN_BOXED(3256762816,32,FLEN)
NAN_BOXED(4211079168,32,FLEN)
NAN_BOXED(2093944393,32,FLEN)
NAN_BOXED(3256762816,32,FLEN)
NAN_BOXED(4211080192,32,FLEN)
NAN_BOXED(2093944393,32,FLEN)
NAN_BOXED(3256762816,32,FLEN)
NAN_BOXED(4211080704,32,FLEN)
NAN_BOXED(2093944393,32,FLEN)
NAN_BOXED(3256762816,32,FLEN)
NAN_BOXED(4211080960,32,FLEN)
NAN_BOXED(2093944393,32,FLEN)
NAN_BOXED(3256762816,32,FLEN)
NAN_BOXED(4211081088,32,FLEN)
NAN_BOXED(2093944393,32,FLEN)
NAN_BOXED(3256762816,32,FLEN)
NAN_BOXED(4211081152,32,FLEN)
NAN_BOXED(2093944393,32,FLEN)
NAN_BOXED(3256762816,32,FLEN)
NAN_BOXED(4211081184,32,FLEN)
NAN_BOXED(2093944393,32,FLEN)
NAN_BOXED(3256762816,32,FLEN)
NAN_BOXED(4211081200,32,FLEN)
NAN_BOXED(2093944393,32,FLEN)
NAN_BOXED(3256762816,32,FLEN)
NAN_BOXED(4211081208,32,FLEN)
NAN_BOXED(2093944393,32,FLEN)
NAN_BOXED(3256762816,32,FLEN)
NAN_BOXED(4211081212,32,FLEN)
NAN_BOXED(2093944393,32,FLEN)
NAN_BOXED(3256762816,32,FLEN)
NAN_BOXED(4211081214,32,FLEN)
NAN_BOXED(2093944393,32,FLEN)
NAN_BOXED(3256762816,32,FLEN)
NAN_BOXED(4211081215,32,FLEN)
NAN_BOXED(2093944393,32,FLEN)
NAN_BOXED(3256762816,32,FLEN)
NAN_BOXED(4278190081,32,FLEN)
NAN_BOXED(2093944393,32,FLEN)
NAN_BOXED(3256762816,32,FLEN)
NAN_BOXED(4278190083,32,FLEN)
NAN_BOXED(2093944393,32,FLEN)
NAN_BOXED(3256762816,32,FLEN)
NAN_BOXED(4278190087,32,FLEN)
NAN_BOXED(2093944393,32,FLEN)
NAN_BOXED(3256762816,32,FLEN)
NAN_BOXED(4279867801,32,FLEN)
NAN_BOXED(2093944393,32,FLEN)
NAN_BOXED(3256762816,32,FLEN)
NAN_BOXED(4280586825,32,FLEN)
NAN_BOXED(2093944393,32,FLEN)
NAN_BOXED(3256762816,32,FLEN)
NAN_BOXED(4281545523,32,FLEN)
NAN_BOXED(2093944393,32,FLEN)
NAN_BOXED(3256762816,32,FLEN)
NAN_BOXED(4281785197,32,FLEN)
NAN_BOXED(2093944393,32,FLEN)
NAN_BOXED(3256762816,32,FLEN)
NAN_BOXED(4282104763,32,FLEN)
NAN_BOXED(2093944393,32,FLEN)
NAN_BOXED(3256762816,32,FLEN)
NAN_BOXED(4282664004,32,FLEN)
NAN_BOXED(2093944393,32,FLEN)
NAN_BOXED(3256762816,32,FLEN)
NAN_BOXED(4283223244,32,FLEN)
NAN_BOXED(2093944393,32,FLEN)
NAN_BOXED(3256762816,32,FLEN)
NAN_BOXED(4284181942,32,FLEN)
NAN_BOXED(2093944393,32,FLEN)
NAN_BOXED(3256762816,32,FLEN)
NAN_BOXED(4284900966,32,FLEN)
NAN_BOXED(2093944393,32,FLEN)
NAN_BOXED(3256762816,32,FLEN)
NAN_BOXED(4285380315,32,FLEN)
NAN_BOXED(2093944393,32,FLEN)
NAN_BOXED(3256762816,32,FLEN)
NAN_BOXED(4286578680,32,FLEN)
NAN_BOXED(2093944393,32,FLEN)
NAN_BOXED(3256762816,32,FLEN)
NAN_BOXED(4286578684,32,FLEN)
NAN_BOXED(2093944393,32,FLEN)
NAN_BOXED(3256762816,32,FLEN)
NAN_BOXED(4286578686,32,FLEN)
NAN_BOXED(2094071936,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2094071936,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3,32,FLEN)
NAN_BOXED(2094071936,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7,32,FLEN)
NAN_BOXED(2094071936,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1677721,32,FLEN)
NAN_BOXED(2094071936,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2396745,32,FLEN)
NAN_BOXED(2094071936,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3355443,32,FLEN)
NAN_BOXED(2094071936,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3595117,32,FLEN)
NAN_BOXED(2094071936,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3914683,32,FLEN)
NAN_BOXED(2094071936,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4473924,32,FLEN)
NAN_BOXED(2094071936,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5033164,32,FLEN)
NAN_BOXED(2094071936,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5991862,32,FLEN)
NAN_BOXED(2094071936,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(6710886,32,FLEN)
NAN_BOXED(2094071936,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7190235,32,FLEN)
NAN_BOXED(2094071936,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388600,32,FLEN)
NAN_BOXED(2094071936,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388604,32,FLEN)
NAN_BOXED(2094071936,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388606,32,FLEN)
NAN_BOXED(2094071936,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218103808,32,FLEN)
NAN_BOXED(2094071936,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218103809,32,FLEN)
NAN_BOXED(2094071936,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218103811,32,FLEN)
NAN_BOXED(2094071936,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218103815,32,FLEN)
NAN_BOXED(2094071936,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218103823,32,FLEN)
NAN_BOXED(2094071936,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218103839,32,FLEN)
NAN_BOXED(2094071936,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218103871,32,FLEN)
NAN_BOXED(2094071936,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218103935,32,FLEN)
NAN_BOXED(2094071936,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218104063,32,FLEN)
NAN_BOXED(2094071936,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218104319,32,FLEN)
NAN_BOXED(2094071936,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218104831,32,FLEN)
NAN_BOXED(2094071936,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218105855,32,FLEN)
NAN_BOXED(2094071936,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218107903,32,FLEN)
NAN_BOXED(2094071936,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218111999,32,FLEN)
NAN_BOXED(2094071936,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218120191,32,FLEN)
NAN_BOXED(2094071936,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218136575,32,FLEN)
NAN_BOXED(2094071936,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218169343,32,FLEN)
NAN_BOXED(2094071936,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218234879,32,FLEN)
NAN_BOXED(2094071936,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218365951,32,FLEN)
NAN_BOXED(2094071936,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218628095,32,FLEN)
NAN_BOXED(2094071936,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(219152383,32,FLEN)
NAN_BOXED(2094071936,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(220200959,32,FLEN)
NAN_BOXED(2094071936,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(222298111,32,FLEN)
NAN_BOXED(2094071936,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(222298112,32,FLEN)
NAN_BOXED(2094071936,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(224395264,32,FLEN)
NAN_BOXED(2094071936,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(225443840,32,FLEN)
NAN_BOXED(2094071936,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(225968128,32,FLEN)
NAN_BOXED(2094071936,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226230272,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
