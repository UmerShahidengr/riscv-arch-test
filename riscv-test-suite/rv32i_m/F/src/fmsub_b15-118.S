
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:07 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_14976:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x178429 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x584467 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e978429; op2val:0x40584467;
op3val:0x7f7ffff8; valaddr_reg:x3; val_offset:44928*0 + 3*117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44928*0 + 3*117*FLEN/8, x4, x1, x2)

inst_14977:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x178429 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x584467 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e978429; op2val:0x40584467;
op3val:0x7f7ffffc; valaddr_reg:x3; val_offset:44931*0 + 3*117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44931*0 + 3*117*FLEN/8, x4, x1, x2)

inst_14978:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x178429 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x584467 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e978429; op2val:0x40584467;
op3val:0x7f7ffffe; valaddr_reg:x3; val_offset:44934*0 + 3*117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44934*0 + 3*117*FLEN/8, x4, x1, x2)

inst_14979:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x178dd1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x6c1b50 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e978dd1; op2val:0x806c1b50;
op3val:0xbf800001; valaddr_reg:x3; val_offset:44937*0 + 3*117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44937*0 + 3*117*FLEN/8, x4, x1, x2)

inst_14980:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x178dd1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x6c1b50 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e978dd1; op2val:0x806c1b50;
op3val:0xbf800003; valaddr_reg:x3; val_offset:44940*0 + 3*117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44940*0 + 3*117*FLEN/8, x4, x1, x2)

inst_14981:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x178dd1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x6c1b50 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e978dd1; op2val:0x806c1b50;
op3val:0xbf800007; valaddr_reg:x3; val_offset:44943*0 + 3*117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44943*0 + 3*117*FLEN/8, x4, x1, x2)

inst_14982:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x178dd1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x6c1b50 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e978dd1; op2val:0x806c1b50;
op3val:0xbf999999; valaddr_reg:x3; val_offset:44946*0 + 3*117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44946*0 + 3*117*FLEN/8, x4, x1, x2)

inst_14983:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x178dd1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x6c1b50 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e978dd1; op2val:0x806c1b50;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:44949*0 + 3*117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44949*0 + 3*117*FLEN/8, x4, x1, x2)

inst_14984:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x178dd1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x6c1b50 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e978dd1; op2val:0x806c1b50;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:44952*0 + 3*117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44952*0 + 3*117*FLEN/8, x4, x1, x2)

inst_14985:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x178dd1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x6c1b50 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e978dd1; op2val:0x806c1b50;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:44955*0 + 3*117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44955*0 + 3*117*FLEN/8, x4, x1, x2)

inst_14986:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x178dd1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x6c1b50 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e978dd1; op2val:0x806c1b50;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:44958*0 + 3*117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44958*0 + 3*117*FLEN/8, x4, x1, x2)

inst_14987:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x178dd1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x6c1b50 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e978dd1; op2val:0x806c1b50;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:44961*0 + 3*117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44961*0 + 3*117*FLEN/8, x4, x1, x2)

inst_14988:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x178dd1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x6c1b50 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e978dd1; op2val:0x806c1b50;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:44964*0 + 3*117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44964*0 + 3*117*FLEN/8, x4, x1, x2)

inst_14989:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x178dd1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x6c1b50 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e978dd1; op2val:0x806c1b50;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:44967*0 + 3*117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44967*0 + 3*117*FLEN/8, x4, x1, x2)

inst_14990:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x178dd1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x6c1b50 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e978dd1; op2val:0x806c1b50;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:44970*0 + 3*117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44970*0 + 3*117*FLEN/8, x4, x1, x2)

inst_14991:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x178dd1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x6c1b50 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e978dd1; op2val:0x806c1b50;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:44973*0 + 3*117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44973*0 + 3*117*FLEN/8, x4, x1, x2)

inst_14992:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x178dd1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x6c1b50 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e978dd1; op2val:0x806c1b50;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:44976*0 + 3*117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44976*0 + 3*117*FLEN/8, x4, x1, x2)

inst_14993:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x178dd1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x6c1b50 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e978dd1; op2val:0x806c1b50;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:44979*0 + 3*117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44979*0 + 3*117*FLEN/8, x4, x1, x2)

inst_14994:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x178dd1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x6c1b50 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e978dd1; op2val:0x806c1b50;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:44982*0 + 3*117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44982*0 + 3*117*FLEN/8, x4, x1, x2)

inst_14995:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x178dd1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x6c1b50 and fs3 == 1 and fe3 == 0x89 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e978dd1; op2val:0x806c1b50;
op3val:0xc4800000; valaddr_reg:x3; val_offset:44985*0 + 3*117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44985*0 + 3*117*FLEN/8, x4, x1, x2)

inst_14996:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x178dd1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x6c1b50 and fs3 == 1 and fe3 == 0x89 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e978dd1; op2val:0x806c1b50;
op3val:0xc4800001; valaddr_reg:x3; val_offset:44988*0 + 3*117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44988*0 + 3*117*FLEN/8, x4, x1, x2)

inst_14997:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x178dd1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x6c1b50 and fs3 == 1 and fe3 == 0x89 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e978dd1; op2val:0x806c1b50;
op3val:0xc4800003; valaddr_reg:x3; val_offset:44991*0 + 3*117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44991*0 + 3*117*FLEN/8, x4, x1, x2)

inst_14998:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x178dd1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x6c1b50 and fs3 == 1 and fe3 == 0x89 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e978dd1; op2val:0x806c1b50;
op3val:0xc4800007; valaddr_reg:x3; val_offset:44994*0 + 3*117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44994*0 + 3*117*FLEN/8, x4, x1, x2)

inst_14999:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x178dd1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x6c1b50 and fs3 == 1 and fe3 == 0x89 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e978dd1; op2val:0x806c1b50;
op3val:0xc480000f; valaddr_reg:x3; val_offset:44997*0 + 3*117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44997*0 + 3*117*FLEN/8, x4, x1, x2)

inst_15000:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x178dd1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x6c1b50 and fs3 == 1 and fe3 == 0x89 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e978dd1; op2val:0x806c1b50;
op3val:0xc480001f; valaddr_reg:x3; val_offset:45000*0 + 3*117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45000*0 + 3*117*FLEN/8, x4, x1, x2)

inst_15001:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x178dd1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x6c1b50 and fs3 == 1 and fe3 == 0x89 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e978dd1; op2val:0x806c1b50;
op3val:0xc480003f; valaddr_reg:x3; val_offset:45003*0 + 3*117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45003*0 + 3*117*FLEN/8, x4, x1, x2)

inst_15002:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x178dd1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x6c1b50 and fs3 == 1 and fe3 == 0x89 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e978dd1; op2val:0x806c1b50;
op3val:0xc480007f; valaddr_reg:x3; val_offset:45006*0 + 3*117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45006*0 + 3*117*FLEN/8, x4, x1, x2)

inst_15003:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x178dd1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x6c1b50 and fs3 == 1 and fe3 == 0x89 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e978dd1; op2val:0x806c1b50;
op3val:0xc48000ff; valaddr_reg:x3; val_offset:45009*0 + 3*117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45009*0 + 3*117*FLEN/8, x4, x1, x2)

inst_15004:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x178dd1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x6c1b50 and fs3 == 1 and fe3 == 0x89 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e978dd1; op2val:0x806c1b50;
op3val:0xc48001ff; valaddr_reg:x3; val_offset:45012*0 + 3*117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45012*0 + 3*117*FLEN/8, x4, x1, x2)

inst_15005:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x178dd1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x6c1b50 and fs3 == 1 and fe3 == 0x89 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e978dd1; op2val:0x806c1b50;
op3val:0xc48003ff; valaddr_reg:x3; val_offset:45015*0 + 3*117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45015*0 + 3*117*FLEN/8, x4, x1, x2)

inst_15006:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x178dd1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x6c1b50 and fs3 == 1 and fe3 == 0x89 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e978dd1; op2val:0x806c1b50;
op3val:0xc48007ff; valaddr_reg:x3; val_offset:45018*0 + 3*117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45018*0 + 3*117*FLEN/8, x4, x1, x2)

inst_15007:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x178dd1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x6c1b50 and fs3 == 1 and fe3 == 0x89 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e978dd1; op2val:0x806c1b50;
op3val:0xc4800fff; valaddr_reg:x3; val_offset:45021*0 + 3*117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45021*0 + 3*117*FLEN/8, x4, x1, x2)

inst_15008:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x178dd1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x6c1b50 and fs3 == 1 and fe3 == 0x89 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e978dd1; op2val:0x806c1b50;
op3val:0xc4801fff; valaddr_reg:x3; val_offset:45024*0 + 3*117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45024*0 + 3*117*FLEN/8, x4, x1, x2)

inst_15009:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x178dd1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x6c1b50 and fs3 == 1 and fe3 == 0x89 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e978dd1; op2val:0x806c1b50;
op3val:0xc4803fff; valaddr_reg:x3; val_offset:45027*0 + 3*117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45027*0 + 3*117*FLEN/8, x4, x1, x2)

inst_15010:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x178dd1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x6c1b50 and fs3 == 1 and fe3 == 0x89 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e978dd1; op2val:0x806c1b50;
op3val:0xc4807fff; valaddr_reg:x3; val_offset:45030*0 + 3*117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45030*0 + 3*117*FLEN/8, x4, x1, x2)

inst_15011:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x178dd1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x6c1b50 and fs3 == 1 and fe3 == 0x89 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e978dd1; op2val:0x806c1b50;
op3val:0xc480ffff; valaddr_reg:x3; val_offset:45033*0 + 3*117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45033*0 + 3*117*FLEN/8, x4, x1, x2)

inst_15012:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x178dd1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x6c1b50 and fs3 == 1 and fe3 == 0x89 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e978dd1; op2val:0x806c1b50;
op3val:0xc481ffff; valaddr_reg:x3; val_offset:45036*0 + 3*117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45036*0 + 3*117*FLEN/8, x4, x1, x2)

inst_15013:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x178dd1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x6c1b50 and fs3 == 1 and fe3 == 0x89 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e978dd1; op2val:0x806c1b50;
op3val:0xc483ffff; valaddr_reg:x3; val_offset:45039*0 + 3*117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45039*0 + 3*117*FLEN/8, x4, x1, x2)

inst_15014:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x178dd1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x6c1b50 and fs3 == 1 and fe3 == 0x89 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e978dd1; op2val:0x806c1b50;
op3val:0xc487ffff; valaddr_reg:x3; val_offset:45042*0 + 3*117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45042*0 + 3*117*FLEN/8, x4, x1, x2)

inst_15015:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x178dd1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x6c1b50 and fs3 == 1 and fe3 == 0x89 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e978dd1; op2val:0x806c1b50;
op3val:0xc48fffff; valaddr_reg:x3; val_offset:45045*0 + 3*117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45045*0 + 3*117*FLEN/8, x4, x1, x2)

inst_15016:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x178dd1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x6c1b50 and fs3 == 1 and fe3 == 0x89 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e978dd1; op2val:0x806c1b50;
op3val:0xc49fffff; valaddr_reg:x3; val_offset:45048*0 + 3*117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45048*0 + 3*117*FLEN/8, x4, x1, x2)

inst_15017:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x178dd1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x6c1b50 and fs3 == 1 and fe3 == 0x89 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e978dd1; op2val:0x806c1b50;
op3val:0xc4bfffff; valaddr_reg:x3; val_offset:45051*0 + 3*117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45051*0 + 3*117*FLEN/8, x4, x1, x2)

inst_15018:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x178dd1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x6c1b50 and fs3 == 1 and fe3 == 0x89 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e978dd1; op2val:0x806c1b50;
op3val:0xc4c00000; valaddr_reg:x3; val_offset:45054*0 + 3*117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45054*0 + 3*117*FLEN/8, x4, x1, x2)

inst_15019:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x178dd1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x6c1b50 and fs3 == 1 and fe3 == 0x89 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e978dd1; op2val:0x806c1b50;
op3val:0xc4e00000; valaddr_reg:x3; val_offset:45057*0 + 3*117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45057*0 + 3*117*FLEN/8, x4, x1, x2)

inst_15020:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x178dd1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x6c1b50 and fs3 == 1 and fe3 == 0x89 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e978dd1; op2val:0x806c1b50;
op3val:0xc4f00000; valaddr_reg:x3; val_offset:45060*0 + 3*117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45060*0 + 3*117*FLEN/8, x4, x1, x2)

inst_15021:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x178dd1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x6c1b50 and fs3 == 1 and fe3 == 0x89 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e978dd1; op2val:0x806c1b50;
op3val:0xc4f80000; valaddr_reg:x3; val_offset:45063*0 + 3*117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45063*0 + 3*117*FLEN/8, x4, x1, x2)

inst_15022:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x178dd1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x6c1b50 and fs3 == 1 and fe3 == 0x89 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e978dd1; op2val:0x806c1b50;
op3val:0xc4fc0000; valaddr_reg:x3; val_offset:45066*0 + 3*117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45066*0 + 3*117*FLEN/8, x4, x1, x2)

inst_15023:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x178dd1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x6c1b50 and fs3 == 1 and fe3 == 0x89 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e978dd1; op2val:0x806c1b50;
op3val:0xc4fe0000; valaddr_reg:x3; val_offset:45069*0 + 3*117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45069*0 + 3*117*FLEN/8, x4, x1, x2)

inst_15024:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x178dd1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x6c1b50 and fs3 == 1 and fe3 == 0x89 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e978dd1; op2val:0x806c1b50;
op3val:0xc4ff0000; valaddr_reg:x3; val_offset:45072*0 + 3*117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45072*0 + 3*117*FLEN/8, x4, x1, x2)

inst_15025:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x178dd1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x6c1b50 and fs3 == 1 and fe3 == 0x89 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e978dd1; op2val:0x806c1b50;
op3val:0xc4ff8000; valaddr_reg:x3; val_offset:45075*0 + 3*117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45075*0 + 3*117*FLEN/8, x4, x1, x2)

inst_15026:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x178dd1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x6c1b50 and fs3 == 1 and fe3 == 0x89 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e978dd1; op2val:0x806c1b50;
op3val:0xc4ffc000; valaddr_reg:x3; val_offset:45078*0 + 3*117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45078*0 + 3*117*FLEN/8, x4, x1, x2)

inst_15027:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x178dd1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x6c1b50 and fs3 == 1 and fe3 == 0x89 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e978dd1; op2val:0x806c1b50;
op3val:0xc4ffe000; valaddr_reg:x3; val_offset:45081*0 + 3*117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45081*0 + 3*117*FLEN/8, x4, x1, x2)

inst_15028:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x178dd1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x6c1b50 and fs3 == 1 and fe3 == 0x89 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e978dd1; op2val:0x806c1b50;
op3val:0xc4fff000; valaddr_reg:x3; val_offset:45084*0 + 3*117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45084*0 + 3*117*FLEN/8, x4, x1, x2)

inst_15029:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x178dd1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x6c1b50 and fs3 == 1 and fe3 == 0x89 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e978dd1; op2val:0x806c1b50;
op3val:0xc4fff800; valaddr_reg:x3; val_offset:45087*0 + 3*117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45087*0 + 3*117*FLEN/8, x4, x1, x2)

inst_15030:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x178dd1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x6c1b50 and fs3 == 1 and fe3 == 0x89 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e978dd1; op2val:0x806c1b50;
op3val:0xc4fffc00; valaddr_reg:x3; val_offset:45090*0 + 3*117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45090*0 + 3*117*FLEN/8, x4, x1, x2)

inst_15031:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x178dd1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x6c1b50 and fs3 == 1 and fe3 == 0x89 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e978dd1; op2val:0x806c1b50;
op3val:0xc4fffe00; valaddr_reg:x3; val_offset:45093*0 + 3*117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45093*0 + 3*117*FLEN/8, x4, x1, x2)

inst_15032:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x178dd1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x6c1b50 and fs3 == 1 and fe3 == 0x89 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e978dd1; op2val:0x806c1b50;
op3val:0xc4ffff00; valaddr_reg:x3; val_offset:45096*0 + 3*117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45096*0 + 3*117*FLEN/8, x4, x1, x2)

inst_15033:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x178dd1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x6c1b50 and fs3 == 1 and fe3 == 0x89 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e978dd1; op2val:0x806c1b50;
op3val:0xc4ffff80; valaddr_reg:x3; val_offset:45099*0 + 3*117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45099*0 + 3*117*FLEN/8, x4, x1, x2)

inst_15034:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x178dd1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x6c1b50 and fs3 == 1 and fe3 == 0x89 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e978dd1; op2val:0x806c1b50;
op3val:0xc4ffffc0; valaddr_reg:x3; val_offset:45102*0 + 3*117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45102*0 + 3*117*FLEN/8, x4, x1, x2)

inst_15035:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x178dd1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x6c1b50 and fs3 == 1 and fe3 == 0x89 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e978dd1; op2val:0x806c1b50;
op3val:0xc4ffffe0; valaddr_reg:x3; val_offset:45105*0 + 3*117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45105*0 + 3*117*FLEN/8, x4, x1, x2)

inst_15036:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x178dd1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x6c1b50 and fs3 == 1 and fe3 == 0x89 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e978dd1; op2val:0x806c1b50;
op3val:0xc4fffff0; valaddr_reg:x3; val_offset:45108*0 + 3*117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45108*0 + 3*117*FLEN/8, x4, x1, x2)

inst_15037:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x178dd1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x6c1b50 and fs3 == 1 and fe3 == 0x89 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e978dd1; op2val:0x806c1b50;
op3val:0xc4fffff8; valaddr_reg:x3; val_offset:45111*0 + 3*117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45111*0 + 3*117*FLEN/8, x4, x1, x2)

inst_15038:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x178dd1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x6c1b50 and fs3 == 1 and fe3 == 0x89 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e978dd1; op2val:0x806c1b50;
op3val:0xc4fffffc; valaddr_reg:x3; val_offset:45114*0 + 3*117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45114*0 + 3*117*FLEN/8, x4, x1, x2)

inst_15039:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x178dd1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x6c1b50 and fs3 == 1 and fe3 == 0x89 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e978dd1; op2val:0x806c1b50;
op3val:0xc4fffffe; valaddr_reg:x3; val_offset:45117*0 + 3*117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45117*0 + 3*117*FLEN/8, x4, x1, x2)

inst_15040:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x178dd1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x6c1b50 and fs3 == 1 and fe3 == 0x89 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e978dd1; op2val:0x806c1b50;
op3val:0xc4ffffff; valaddr_reg:x3; val_offset:45120*0 + 3*117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45120*0 + 3*117*FLEN/8, x4, x1, x2)

inst_15041:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x19610b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e99610b; op2val:0x0;
op3val:0x800001; valaddr_reg:x3; val_offset:45123*0 + 3*117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45123*0 + 3*117*FLEN/8, x4, x1, x2)

inst_15042:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x19610b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e99610b; op2val:0x0;
op3val:0x800003; valaddr_reg:x3; val_offset:45126*0 + 3*117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45126*0 + 3*117*FLEN/8, x4, x1, x2)

inst_15043:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x19610b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e99610b; op2val:0x0;
op3val:0x800007; valaddr_reg:x3; val_offset:45129*0 + 3*117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45129*0 + 3*117*FLEN/8, x4, x1, x2)

inst_15044:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x19610b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e99610b; op2val:0x0;
op3val:0x999999; valaddr_reg:x3; val_offset:45132*0 + 3*117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45132*0 + 3*117*FLEN/8, x4, x1, x2)

inst_15045:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x19610b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e99610b; op2val:0x0;
op3val:0xa49249; valaddr_reg:x3; val_offset:45135*0 + 3*117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45135*0 + 3*117*FLEN/8, x4, x1, x2)

inst_15046:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x19610b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e99610b; op2val:0x0;
op3val:0xb33333; valaddr_reg:x3; val_offset:45138*0 + 3*117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45138*0 + 3*117*FLEN/8, x4, x1, x2)

inst_15047:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x19610b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e99610b; op2val:0x0;
op3val:0xb6db6d; valaddr_reg:x3; val_offset:45141*0 + 3*117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45141*0 + 3*117*FLEN/8, x4, x1, x2)

inst_15048:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x19610b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e99610b; op2val:0x0;
op3val:0xbbbbbb; valaddr_reg:x3; val_offset:45144*0 + 3*117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45144*0 + 3*117*FLEN/8, x4, x1, x2)

inst_15049:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x19610b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e99610b; op2val:0x0;
op3val:0xc44444; valaddr_reg:x3; val_offset:45147*0 + 3*117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45147*0 + 3*117*FLEN/8, x4, x1, x2)

inst_15050:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x19610b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e99610b; op2val:0x0;
op3val:0xcccccc; valaddr_reg:x3; val_offset:45150*0 + 3*117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45150*0 + 3*117*FLEN/8, x4, x1, x2)

inst_15051:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x19610b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e99610b; op2val:0x0;
op3val:0xdb6db6; valaddr_reg:x3; val_offset:45153*0 + 3*117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45153*0 + 3*117*FLEN/8, x4, x1, x2)

inst_15052:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x19610b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e99610b; op2val:0x0;
op3val:0xe66666; valaddr_reg:x3; val_offset:45156*0 + 3*117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45156*0 + 3*117*FLEN/8, x4, x1, x2)

inst_15053:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x19610b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e99610b; op2val:0x0;
op3val:0xedb6db; valaddr_reg:x3; val_offset:45159*0 + 3*117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45159*0 + 3*117*FLEN/8, x4, x1, x2)

inst_15054:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x19610b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e99610b; op2val:0x0;
op3val:0xfffff8; valaddr_reg:x3; val_offset:45162*0 + 3*117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45162*0 + 3*117*FLEN/8, x4, x1, x2)

inst_15055:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x19610b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e99610b; op2val:0x0;
op3val:0xfffffc; valaddr_reg:x3; val_offset:45165*0 + 3*117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45165*0 + 3*117*FLEN/8, x4, x1, x2)

inst_15056:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x19610b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e99610b; op2val:0x0;
op3val:0xfffffe; valaddr_reg:x3; val_offset:45168*0 + 3*117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45168*0 + 3*117*FLEN/8, x4, x1, x2)

inst_15057:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x19610b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e99610b; op2val:0x0;
op3val:0xa000000; valaddr_reg:x3; val_offset:45171*0 + 3*117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45171*0 + 3*117*FLEN/8, x4, x1, x2)

inst_15058:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x19610b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e99610b; op2val:0x0;
op3val:0xa000001; valaddr_reg:x3; val_offset:45174*0 + 3*117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45174*0 + 3*117*FLEN/8, x4, x1, x2)

inst_15059:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x19610b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e99610b; op2val:0x0;
op3val:0xa000003; valaddr_reg:x3; val_offset:45177*0 + 3*117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45177*0 + 3*117*FLEN/8, x4, x1, x2)

inst_15060:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x19610b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e99610b; op2val:0x0;
op3val:0xa000007; valaddr_reg:x3; val_offset:45180*0 + 3*117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45180*0 + 3*117*FLEN/8, x4, x1, x2)

inst_15061:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x19610b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e99610b; op2val:0x0;
op3val:0xa00000f; valaddr_reg:x3; val_offset:45183*0 + 3*117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45183*0 + 3*117*FLEN/8, x4, x1, x2)

inst_15062:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x19610b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e99610b; op2val:0x0;
op3val:0xa00001f; valaddr_reg:x3; val_offset:45186*0 + 3*117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45186*0 + 3*117*FLEN/8, x4, x1, x2)

inst_15063:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x19610b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e99610b; op2val:0x0;
op3val:0xa00003f; valaddr_reg:x3; val_offset:45189*0 + 3*117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45189*0 + 3*117*FLEN/8, x4, x1, x2)

inst_15064:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x19610b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e99610b; op2val:0x0;
op3val:0xa00007f; valaddr_reg:x3; val_offset:45192*0 + 3*117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45192*0 + 3*117*FLEN/8, x4, x1, x2)

inst_15065:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x19610b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e99610b; op2val:0x0;
op3val:0xa0000ff; valaddr_reg:x3; val_offset:45195*0 + 3*117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45195*0 + 3*117*FLEN/8, x4, x1, x2)

inst_15066:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x19610b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e99610b; op2val:0x0;
op3val:0xa0001ff; valaddr_reg:x3; val_offset:45198*0 + 3*117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45198*0 + 3*117*FLEN/8, x4, x1, x2)

inst_15067:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x19610b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e99610b; op2val:0x0;
op3val:0xa0003ff; valaddr_reg:x3; val_offset:45201*0 + 3*117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45201*0 + 3*117*FLEN/8, x4, x1, x2)

inst_15068:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x19610b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e99610b; op2val:0x0;
op3val:0xa0007ff; valaddr_reg:x3; val_offset:45204*0 + 3*117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45204*0 + 3*117*FLEN/8, x4, x1, x2)

inst_15069:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x19610b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e99610b; op2val:0x0;
op3val:0xa000fff; valaddr_reg:x3; val_offset:45207*0 + 3*117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45207*0 + 3*117*FLEN/8, x4, x1, x2)

inst_15070:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x19610b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e99610b; op2val:0x0;
op3val:0xa001fff; valaddr_reg:x3; val_offset:45210*0 + 3*117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45210*0 + 3*117*FLEN/8, x4, x1, x2)

inst_15071:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x19610b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e99610b; op2val:0x0;
op3val:0xa003fff; valaddr_reg:x3; val_offset:45213*0 + 3*117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45213*0 + 3*117*FLEN/8, x4, x1, x2)

inst_15072:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x19610b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e99610b; op2val:0x0;
op3val:0xa007fff; valaddr_reg:x3; val_offset:45216*0 + 3*117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45216*0 + 3*117*FLEN/8, x4, x1, x2)

inst_15073:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x19610b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e99610b; op2val:0x0;
op3val:0xa00ffff; valaddr_reg:x3; val_offset:45219*0 + 3*117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45219*0 + 3*117*FLEN/8, x4, x1, x2)

inst_15074:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x19610b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e99610b; op2val:0x0;
op3val:0xa01ffff; valaddr_reg:x3; val_offset:45222*0 + 3*117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45222*0 + 3*117*FLEN/8, x4, x1, x2)

inst_15075:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x19610b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e99610b; op2val:0x0;
op3val:0xa03ffff; valaddr_reg:x3; val_offset:45225*0 + 3*117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45225*0 + 3*117*FLEN/8, x4, x1, x2)

inst_15076:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x19610b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e99610b; op2val:0x0;
op3val:0xa07ffff; valaddr_reg:x3; val_offset:45228*0 + 3*117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45228*0 + 3*117*FLEN/8, x4, x1, x2)

inst_15077:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x19610b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e99610b; op2val:0x0;
op3val:0xa0fffff; valaddr_reg:x3; val_offset:45231*0 + 3*117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45231*0 + 3*117*FLEN/8, x4, x1, x2)

inst_15078:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x19610b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e99610b; op2val:0x0;
op3val:0xa1fffff; valaddr_reg:x3; val_offset:45234*0 + 3*117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45234*0 + 3*117*FLEN/8, x4, x1, x2)

inst_15079:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x19610b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e99610b; op2val:0x0;
op3val:0xa3fffff; valaddr_reg:x3; val_offset:45237*0 + 3*117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45237*0 + 3*117*FLEN/8, x4, x1, x2)

inst_15080:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x19610b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e99610b; op2val:0x0;
op3val:0xa400000; valaddr_reg:x3; val_offset:45240*0 + 3*117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45240*0 + 3*117*FLEN/8, x4, x1, x2)

inst_15081:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x19610b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e99610b; op2val:0x0;
op3val:0xa600000; valaddr_reg:x3; val_offset:45243*0 + 3*117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45243*0 + 3*117*FLEN/8, x4, x1, x2)

inst_15082:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x19610b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e99610b; op2val:0x0;
op3val:0xa700000; valaddr_reg:x3; val_offset:45246*0 + 3*117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45246*0 + 3*117*FLEN/8, x4, x1, x2)

inst_15083:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x19610b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e99610b; op2val:0x0;
op3val:0xa780000; valaddr_reg:x3; val_offset:45249*0 + 3*117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45249*0 + 3*117*FLEN/8, x4, x1, x2)

inst_15084:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x19610b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e99610b; op2val:0x0;
op3val:0xa7c0000; valaddr_reg:x3; val_offset:45252*0 + 3*117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45252*0 + 3*117*FLEN/8, x4, x1, x2)

inst_15085:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x19610b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e99610b; op2val:0x0;
op3val:0xa7e0000; valaddr_reg:x3; val_offset:45255*0 + 3*117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45255*0 + 3*117*FLEN/8, x4, x1, x2)

inst_15086:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x19610b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e99610b; op2val:0x0;
op3val:0xa7f0000; valaddr_reg:x3; val_offset:45258*0 + 3*117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45258*0 + 3*117*FLEN/8, x4, x1, x2)

inst_15087:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x19610b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e99610b; op2val:0x0;
op3val:0xa7f8000; valaddr_reg:x3; val_offset:45261*0 + 3*117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45261*0 + 3*117*FLEN/8, x4, x1, x2)

inst_15088:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x19610b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e99610b; op2val:0x0;
op3val:0xa7fc000; valaddr_reg:x3; val_offset:45264*0 + 3*117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45264*0 + 3*117*FLEN/8, x4, x1, x2)

inst_15089:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x19610b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e99610b; op2val:0x0;
op3val:0xa7fe000; valaddr_reg:x3; val_offset:45267*0 + 3*117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45267*0 + 3*117*FLEN/8, x4, x1, x2)

inst_15090:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x19610b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e99610b; op2val:0x0;
op3val:0xa7ff000; valaddr_reg:x3; val_offset:45270*0 + 3*117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45270*0 + 3*117*FLEN/8, x4, x1, x2)

inst_15091:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x19610b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e99610b; op2val:0x0;
op3val:0xa7ff800; valaddr_reg:x3; val_offset:45273*0 + 3*117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45273*0 + 3*117*FLEN/8, x4, x1, x2)

inst_15092:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x19610b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e99610b; op2val:0x0;
op3val:0xa7ffc00; valaddr_reg:x3; val_offset:45276*0 + 3*117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45276*0 + 3*117*FLEN/8, x4, x1, x2)

inst_15093:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x19610b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e99610b; op2val:0x0;
op3val:0xa7ffe00; valaddr_reg:x3; val_offset:45279*0 + 3*117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45279*0 + 3*117*FLEN/8, x4, x1, x2)

inst_15094:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x19610b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e99610b; op2val:0x0;
op3val:0xa7fff00; valaddr_reg:x3; val_offset:45282*0 + 3*117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45282*0 + 3*117*FLEN/8, x4, x1, x2)

inst_15095:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x19610b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e99610b; op2val:0x0;
op3val:0xa7fff80; valaddr_reg:x3; val_offset:45285*0 + 3*117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45285*0 + 3*117*FLEN/8, x4, x1, x2)

inst_15096:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x19610b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e99610b; op2val:0x0;
op3val:0xa7fffc0; valaddr_reg:x3; val_offset:45288*0 + 3*117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45288*0 + 3*117*FLEN/8, x4, x1, x2)

inst_15097:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x19610b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e99610b; op2val:0x0;
op3val:0xa7fffe0; valaddr_reg:x3; val_offset:45291*0 + 3*117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45291*0 + 3*117*FLEN/8, x4, x1, x2)

inst_15098:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x19610b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e99610b; op2val:0x0;
op3val:0xa7ffff0; valaddr_reg:x3; val_offset:45294*0 + 3*117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45294*0 + 3*117*FLEN/8, x4, x1, x2)

inst_15099:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x19610b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e99610b; op2val:0x0;
op3val:0xa7ffff8; valaddr_reg:x3; val_offset:45297*0 + 3*117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45297*0 + 3*117*FLEN/8, x4, x1, x2)

inst_15100:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x19610b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e99610b; op2val:0x0;
op3val:0xa7ffffc; valaddr_reg:x3; val_offset:45300*0 + 3*117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45300*0 + 3*117*FLEN/8, x4, x1, x2)

inst_15101:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x19610b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e99610b; op2val:0x0;
op3val:0xa7ffffe; valaddr_reg:x3; val_offset:45303*0 + 3*117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45303*0 + 3*117*FLEN/8, x4, x1, x2)

inst_15102:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x19610b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e99610b; op2val:0x0;
op3val:0xa7fffff; valaddr_reg:x3; val_offset:45306*0 + 3*117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45306*0 + 3*117*FLEN/8, x4, x1, x2)

inst_15103:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x198c2d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e998c2d; op2val:0x80000000;
op3val:0x80000001; valaddr_reg:x3; val_offset:45309*0 + 3*117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45309*0 + 3*117*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2123858985,32,FLEN)
NAN_BOXED(1079526503,32,FLEN)
NAN_BOXED(2139095032,32,FLEN)
NAN_BOXED(2123858985,32,FLEN)
NAN_BOXED(1079526503,32,FLEN)
NAN_BOXED(2139095036,32,FLEN)
NAN_BOXED(2123858985,32,FLEN)
NAN_BOXED(1079526503,32,FLEN)
NAN_BOXED(2139095038,32,FLEN)
NAN_BOXED(2123861457,32,FLEN)
NAN_BOXED(2154568528,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2123861457,32,FLEN)
NAN_BOXED(2154568528,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2123861457,32,FLEN)
NAN_BOXED(2154568528,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
NAN_BOXED(2123861457,32,FLEN)
NAN_BOXED(2154568528,32,FLEN)
NAN_BOXED(3214514585,32,FLEN)
NAN_BOXED(2123861457,32,FLEN)
NAN_BOXED(2154568528,32,FLEN)
NAN_BOXED(3215233609,32,FLEN)
NAN_BOXED(2123861457,32,FLEN)
NAN_BOXED(2154568528,32,FLEN)
NAN_BOXED(3216192307,32,FLEN)
NAN_BOXED(2123861457,32,FLEN)
NAN_BOXED(2154568528,32,FLEN)
NAN_BOXED(3216431981,32,FLEN)
NAN_BOXED(2123861457,32,FLEN)
NAN_BOXED(2154568528,32,FLEN)
NAN_BOXED(3216751547,32,FLEN)
NAN_BOXED(2123861457,32,FLEN)
NAN_BOXED(2154568528,32,FLEN)
NAN_BOXED(3217310788,32,FLEN)
NAN_BOXED(2123861457,32,FLEN)
NAN_BOXED(2154568528,32,FLEN)
NAN_BOXED(3217870028,32,FLEN)
NAN_BOXED(2123861457,32,FLEN)
NAN_BOXED(2154568528,32,FLEN)
NAN_BOXED(3218828726,32,FLEN)
NAN_BOXED(2123861457,32,FLEN)
NAN_BOXED(2154568528,32,FLEN)
NAN_BOXED(3219547750,32,FLEN)
NAN_BOXED(2123861457,32,FLEN)
NAN_BOXED(2154568528,32,FLEN)
NAN_BOXED(3220027099,32,FLEN)
NAN_BOXED(2123861457,32,FLEN)
NAN_BOXED(2154568528,32,FLEN)
NAN_BOXED(3221225464,32,FLEN)
NAN_BOXED(2123861457,32,FLEN)
NAN_BOXED(2154568528,32,FLEN)
NAN_BOXED(3221225468,32,FLEN)
NAN_BOXED(2123861457,32,FLEN)
NAN_BOXED(2154568528,32,FLEN)
NAN_BOXED(3221225470,32,FLEN)
NAN_BOXED(2123861457,32,FLEN)
NAN_BOXED(2154568528,32,FLEN)
NAN_BOXED(3296722944,32,FLEN)
NAN_BOXED(2123861457,32,FLEN)
NAN_BOXED(2154568528,32,FLEN)
NAN_BOXED(3296722945,32,FLEN)
NAN_BOXED(2123861457,32,FLEN)
NAN_BOXED(2154568528,32,FLEN)
NAN_BOXED(3296722947,32,FLEN)
NAN_BOXED(2123861457,32,FLEN)
NAN_BOXED(2154568528,32,FLEN)
NAN_BOXED(3296722951,32,FLEN)
NAN_BOXED(2123861457,32,FLEN)
NAN_BOXED(2154568528,32,FLEN)
NAN_BOXED(3296722959,32,FLEN)
NAN_BOXED(2123861457,32,FLEN)
NAN_BOXED(2154568528,32,FLEN)
NAN_BOXED(3296722975,32,FLEN)
NAN_BOXED(2123861457,32,FLEN)
NAN_BOXED(2154568528,32,FLEN)
NAN_BOXED(3296723007,32,FLEN)
NAN_BOXED(2123861457,32,FLEN)
NAN_BOXED(2154568528,32,FLEN)
NAN_BOXED(3296723071,32,FLEN)
NAN_BOXED(2123861457,32,FLEN)
NAN_BOXED(2154568528,32,FLEN)
NAN_BOXED(3296723199,32,FLEN)
NAN_BOXED(2123861457,32,FLEN)
NAN_BOXED(2154568528,32,FLEN)
NAN_BOXED(3296723455,32,FLEN)
NAN_BOXED(2123861457,32,FLEN)
NAN_BOXED(2154568528,32,FLEN)
NAN_BOXED(3296723967,32,FLEN)
NAN_BOXED(2123861457,32,FLEN)
NAN_BOXED(2154568528,32,FLEN)
NAN_BOXED(3296724991,32,FLEN)
NAN_BOXED(2123861457,32,FLEN)
NAN_BOXED(2154568528,32,FLEN)
NAN_BOXED(3296727039,32,FLEN)
NAN_BOXED(2123861457,32,FLEN)
NAN_BOXED(2154568528,32,FLEN)
NAN_BOXED(3296731135,32,FLEN)
NAN_BOXED(2123861457,32,FLEN)
NAN_BOXED(2154568528,32,FLEN)
NAN_BOXED(3296739327,32,FLEN)
NAN_BOXED(2123861457,32,FLEN)
NAN_BOXED(2154568528,32,FLEN)
NAN_BOXED(3296755711,32,FLEN)
NAN_BOXED(2123861457,32,FLEN)
NAN_BOXED(2154568528,32,FLEN)
NAN_BOXED(3296788479,32,FLEN)
NAN_BOXED(2123861457,32,FLEN)
NAN_BOXED(2154568528,32,FLEN)
NAN_BOXED(3296854015,32,FLEN)
NAN_BOXED(2123861457,32,FLEN)
NAN_BOXED(2154568528,32,FLEN)
NAN_BOXED(3296985087,32,FLEN)
NAN_BOXED(2123861457,32,FLEN)
NAN_BOXED(2154568528,32,FLEN)
NAN_BOXED(3297247231,32,FLEN)
NAN_BOXED(2123861457,32,FLEN)
NAN_BOXED(2154568528,32,FLEN)
NAN_BOXED(3297771519,32,FLEN)
NAN_BOXED(2123861457,32,FLEN)
NAN_BOXED(2154568528,32,FLEN)
NAN_BOXED(3298820095,32,FLEN)
NAN_BOXED(2123861457,32,FLEN)
NAN_BOXED(2154568528,32,FLEN)
NAN_BOXED(3300917247,32,FLEN)
NAN_BOXED(2123861457,32,FLEN)
NAN_BOXED(2154568528,32,FLEN)
NAN_BOXED(3300917248,32,FLEN)
NAN_BOXED(2123861457,32,FLEN)
NAN_BOXED(2154568528,32,FLEN)
NAN_BOXED(3303014400,32,FLEN)
NAN_BOXED(2123861457,32,FLEN)
NAN_BOXED(2154568528,32,FLEN)
NAN_BOXED(3304062976,32,FLEN)
NAN_BOXED(2123861457,32,FLEN)
NAN_BOXED(2154568528,32,FLEN)
NAN_BOXED(3304587264,32,FLEN)
NAN_BOXED(2123861457,32,FLEN)
NAN_BOXED(2154568528,32,FLEN)
NAN_BOXED(3304849408,32,FLEN)
NAN_BOXED(2123861457,32,FLEN)
NAN_BOXED(2154568528,32,FLEN)
NAN_BOXED(3304980480,32,FLEN)
NAN_BOXED(2123861457,32,FLEN)
NAN_BOXED(2154568528,32,FLEN)
NAN_BOXED(3305046016,32,FLEN)
NAN_BOXED(2123861457,32,FLEN)
NAN_BOXED(2154568528,32,FLEN)
NAN_BOXED(3305078784,32,FLEN)
NAN_BOXED(2123861457,32,FLEN)
NAN_BOXED(2154568528,32,FLEN)
NAN_BOXED(3305095168,32,FLEN)
NAN_BOXED(2123861457,32,FLEN)
NAN_BOXED(2154568528,32,FLEN)
NAN_BOXED(3305103360,32,FLEN)
NAN_BOXED(2123861457,32,FLEN)
NAN_BOXED(2154568528,32,FLEN)
NAN_BOXED(3305107456,32,FLEN)
NAN_BOXED(2123861457,32,FLEN)
NAN_BOXED(2154568528,32,FLEN)
NAN_BOXED(3305109504,32,FLEN)
NAN_BOXED(2123861457,32,FLEN)
NAN_BOXED(2154568528,32,FLEN)
NAN_BOXED(3305110528,32,FLEN)
NAN_BOXED(2123861457,32,FLEN)
NAN_BOXED(2154568528,32,FLEN)
NAN_BOXED(3305111040,32,FLEN)
NAN_BOXED(2123861457,32,FLEN)
NAN_BOXED(2154568528,32,FLEN)
NAN_BOXED(3305111296,32,FLEN)
NAN_BOXED(2123861457,32,FLEN)
NAN_BOXED(2154568528,32,FLEN)
NAN_BOXED(3305111424,32,FLEN)
NAN_BOXED(2123861457,32,FLEN)
NAN_BOXED(2154568528,32,FLEN)
NAN_BOXED(3305111488,32,FLEN)
NAN_BOXED(2123861457,32,FLEN)
NAN_BOXED(2154568528,32,FLEN)
NAN_BOXED(3305111520,32,FLEN)
NAN_BOXED(2123861457,32,FLEN)
NAN_BOXED(2154568528,32,FLEN)
NAN_BOXED(3305111536,32,FLEN)
NAN_BOXED(2123861457,32,FLEN)
NAN_BOXED(2154568528,32,FLEN)
NAN_BOXED(3305111544,32,FLEN)
NAN_BOXED(2123861457,32,FLEN)
NAN_BOXED(2154568528,32,FLEN)
NAN_BOXED(3305111548,32,FLEN)
NAN_BOXED(2123861457,32,FLEN)
NAN_BOXED(2154568528,32,FLEN)
NAN_BOXED(3305111550,32,FLEN)
NAN_BOXED(2123861457,32,FLEN)
NAN_BOXED(2154568528,32,FLEN)
NAN_BOXED(3305111551,32,FLEN)
NAN_BOXED(2123981067,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(2123981067,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388611,32,FLEN)
NAN_BOXED(2123981067,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388615,32,FLEN)
NAN_BOXED(2123981067,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(10066329,32,FLEN)
NAN_BOXED(2123981067,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(10785353,32,FLEN)
NAN_BOXED(2123981067,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(11744051,32,FLEN)
NAN_BOXED(2123981067,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(11983725,32,FLEN)
NAN_BOXED(2123981067,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(12303291,32,FLEN)
NAN_BOXED(2123981067,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(12862532,32,FLEN)
NAN_BOXED(2123981067,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(13421772,32,FLEN)
NAN_BOXED(2123981067,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(14380470,32,FLEN)
NAN_BOXED(2123981067,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(15099494,32,FLEN)
NAN_BOXED(2123981067,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(15578843,32,FLEN)
NAN_BOXED(2123981067,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777208,32,FLEN)
NAN_BOXED(2123981067,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777212,32,FLEN)
NAN_BOXED(2123981067,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777214,32,FLEN)
NAN_BOXED(2123981067,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167772160,32,FLEN)
NAN_BOXED(2123981067,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167772161,32,FLEN)
NAN_BOXED(2123981067,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167772163,32,FLEN)
NAN_BOXED(2123981067,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167772167,32,FLEN)
NAN_BOXED(2123981067,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167772175,32,FLEN)
NAN_BOXED(2123981067,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167772191,32,FLEN)
NAN_BOXED(2123981067,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167772223,32,FLEN)
NAN_BOXED(2123981067,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167772287,32,FLEN)
NAN_BOXED(2123981067,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167772415,32,FLEN)
NAN_BOXED(2123981067,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167772671,32,FLEN)
NAN_BOXED(2123981067,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167773183,32,FLEN)
NAN_BOXED(2123981067,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167774207,32,FLEN)
NAN_BOXED(2123981067,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167776255,32,FLEN)
NAN_BOXED(2123981067,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167780351,32,FLEN)
NAN_BOXED(2123981067,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167788543,32,FLEN)
NAN_BOXED(2123981067,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167804927,32,FLEN)
NAN_BOXED(2123981067,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167837695,32,FLEN)
NAN_BOXED(2123981067,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167903231,32,FLEN)
NAN_BOXED(2123981067,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(168034303,32,FLEN)
NAN_BOXED(2123981067,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(168296447,32,FLEN)
NAN_BOXED(2123981067,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(168820735,32,FLEN)
NAN_BOXED(2123981067,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(169869311,32,FLEN)
NAN_BOXED(2123981067,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(171966463,32,FLEN)
NAN_BOXED(2123981067,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(171966464,32,FLEN)
NAN_BOXED(2123981067,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(174063616,32,FLEN)
NAN_BOXED(2123981067,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(175112192,32,FLEN)
NAN_BOXED(2123981067,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(175636480,32,FLEN)
NAN_BOXED(2123981067,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(175898624,32,FLEN)
NAN_BOXED(2123981067,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(176029696,32,FLEN)
NAN_BOXED(2123981067,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(176095232,32,FLEN)
NAN_BOXED(2123981067,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(176128000,32,FLEN)
NAN_BOXED(2123981067,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(176144384,32,FLEN)
NAN_BOXED(2123981067,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(176152576,32,FLEN)
NAN_BOXED(2123981067,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(176156672,32,FLEN)
NAN_BOXED(2123981067,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(176158720,32,FLEN)
NAN_BOXED(2123981067,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(176159744,32,FLEN)
NAN_BOXED(2123981067,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(176160256,32,FLEN)
NAN_BOXED(2123981067,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(176160512,32,FLEN)
NAN_BOXED(2123981067,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(176160640,32,FLEN)
NAN_BOXED(2123981067,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(176160704,32,FLEN)
NAN_BOXED(2123981067,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(176160736,32,FLEN)
NAN_BOXED(2123981067,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(176160752,32,FLEN)
NAN_BOXED(2123981067,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(176160760,32,FLEN)
NAN_BOXED(2123981067,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(176160764,32,FLEN)
NAN_BOXED(2123981067,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(176160766,32,FLEN)
NAN_BOXED(2123981067,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(176160767,32,FLEN)
NAN_BOXED(2123992109,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
