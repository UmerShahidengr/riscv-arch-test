
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:07 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_15744:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x20e207 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x65d689 and fs3 == 1 and fe3 == 0x86 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea0e207; op2val:0x8065d689;
op3val:0xc300001f; valaddr_reg:x3; val_offset:47232*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47232*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15745:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x20e207 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x65d689 and fs3 == 1 and fe3 == 0x86 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea0e207; op2val:0x8065d689;
op3val:0xc300003f; valaddr_reg:x3; val_offset:47235*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47235*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15746:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x20e207 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x65d689 and fs3 == 1 and fe3 == 0x86 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea0e207; op2val:0x8065d689;
op3val:0xc300007f; valaddr_reg:x3; val_offset:47238*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47238*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15747:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x20e207 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x65d689 and fs3 == 1 and fe3 == 0x86 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea0e207; op2val:0x8065d689;
op3val:0xc30000ff; valaddr_reg:x3; val_offset:47241*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47241*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15748:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x20e207 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x65d689 and fs3 == 1 and fe3 == 0x86 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea0e207; op2val:0x8065d689;
op3val:0xc30001ff; valaddr_reg:x3; val_offset:47244*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47244*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15749:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x20e207 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x65d689 and fs3 == 1 and fe3 == 0x86 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea0e207; op2val:0x8065d689;
op3val:0xc30003ff; valaddr_reg:x3; val_offset:47247*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47247*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15750:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x20e207 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x65d689 and fs3 == 1 and fe3 == 0x86 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea0e207; op2val:0x8065d689;
op3val:0xc30007ff; valaddr_reg:x3; val_offset:47250*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47250*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15751:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x20e207 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x65d689 and fs3 == 1 and fe3 == 0x86 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea0e207; op2val:0x8065d689;
op3val:0xc3000fff; valaddr_reg:x3; val_offset:47253*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47253*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15752:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x20e207 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x65d689 and fs3 == 1 and fe3 == 0x86 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea0e207; op2val:0x8065d689;
op3val:0xc3001fff; valaddr_reg:x3; val_offset:47256*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47256*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15753:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x20e207 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x65d689 and fs3 == 1 and fe3 == 0x86 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea0e207; op2val:0x8065d689;
op3val:0xc3003fff; valaddr_reg:x3; val_offset:47259*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47259*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15754:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x20e207 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x65d689 and fs3 == 1 and fe3 == 0x86 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea0e207; op2val:0x8065d689;
op3val:0xc3007fff; valaddr_reg:x3; val_offset:47262*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47262*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15755:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x20e207 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x65d689 and fs3 == 1 and fe3 == 0x86 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea0e207; op2val:0x8065d689;
op3val:0xc300ffff; valaddr_reg:x3; val_offset:47265*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47265*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15756:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x20e207 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x65d689 and fs3 == 1 and fe3 == 0x86 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea0e207; op2val:0x8065d689;
op3val:0xc301ffff; valaddr_reg:x3; val_offset:47268*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47268*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15757:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x20e207 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x65d689 and fs3 == 1 and fe3 == 0x86 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea0e207; op2val:0x8065d689;
op3val:0xc303ffff; valaddr_reg:x3; val_offset:47271*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47271*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15758:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x20e207 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x65d689 and fs3 == 1 and fe3 == 0x86 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea0e207; op2val:0x8065d689;
op3val:0xc307ffff; valaddr_reg:x3; val_offset:47274*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47274*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15759:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x20e207 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x65d689 and fs3 == 1 and fe3 == 0x86 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea0e207; op2val:0x8065d689;
op3val:0xc30fffff; valaddr_reg:x3; val_offset:47277*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47277*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15760:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x20e207 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x65d689 and fs3 == 1 and fe3 == 0x86 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea0e207; op2val:0x8065d689;
op3val:0xc31fffff; valaddr_reg:x3; val_offset:47280*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47280*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15761:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x20e207 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x65d689 and fs3 == 1 and fe3 == 0x86 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea0e207; op2val:0x8065d689;
op3val:0xc33fffff; valaddr_reg:x3; val_offset:47283*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47283*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15762:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x20e207 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x65d689 and fs3 == 1 and fe3 == 0x86 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea0e207; op2val:0x8065d689;
op3val:0xc3400000; valaddr_reg:x3; val_offset:47286*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47286*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15763:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x20e207 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x65d689 and fs3 == 1 and fe3 == 0x86 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea0e207; op2val:0x8065d689;
op3val:0xc3600000; valaddr_reg:x3; val_offset:47289*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47289*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15764:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x20e207 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x65d689 and fs3 == 1 and fe3 == 0x86 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea0e207; op2val:0x8065d689;
op3val:0xc3700000; valaddr_reg:x3; val_offset:47292*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47292*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15765:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x20e207 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x65d689 and fs3 == 1 and fe3 == 0x86 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea0e207; op2val:0x8065d689;
op3val:0xc3780000; valaddr_reg:x3; val_offset:47295*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47295*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15766:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x20e207 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x65d689 and fs3 == 1 and fe3 == 0x86 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea0e207; op2val:0x8065d689;
op3val:0xc37c0000; valaddr_reg:x3; val_offset:47298*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47298*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15767:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x20e207 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x65d689 and fs3 == 1 and fe3 == 0x86 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea0e207; op2val:0x8065d689;
op3val:0xc37e0000; valaddr_reg:x3; val_offset:47301*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47301*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15768:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x20e207 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x65d689 and fs3 == 1 and fe3 == 0x86 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea0e207; op2val:0x8065d689;
op3val:0xc37f0000; valaddr_reg:x3; val_offset:47304*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47304*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15769:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x20e207 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x65d689 and fs3 == 1 and fe3 == 0x86 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea0e207; op2val:0x8065d689;
op3val:0xc37f8000; valaddr_reg:x3; val_offset:47307*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47307*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15770:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x20e207 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x65d689 and fs3 == 1 and fe3 == 0x86 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea0e207; op2val:0x8065d689;
op3val:0xc37fc000; valaddr_reg:x3; val_offset:47310*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47310*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15771:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x20e207 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x65d689 and fs3 == 1 and fe3 == 0x86 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea0e207; op2val:0x8065d689;
op3val:0xc37fe000; valaddr_reg:x3; val_offset:47313*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47313*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15772:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x20e207 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x65d689 and fs3 == 1 and fe3 == 0x86 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea0e207; op2val:0x8065d689;
op3val:0xc37ff000; valaddr_reg:x3; val_offset:47316*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47316*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15773:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x20e207 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x65d689 and fs3 == 1 and fe3 == 0x86 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea0e207; op2val:0x8065d689;
op3val:0xc37ff800; valaddr_reg:x3; val_offset:47319*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47319*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15774:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x20e207 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x65d689 and fs3 == 1 and fe3 == 0x86 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea0e207; op2val:0x8065d689;
op3val:0xc37ffc00; valaddr_reg:x3; val_offset:47322*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47322*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15775:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x20e207 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x65d689 and fs3 == 1 and fe3 == 0x86 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea0e207; op2val:0x8065d689;
op3val:0xc37ffe00; valaddr_reg:x3; val_offset:47325*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47325*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15776:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x20e207 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x65d689 and fs3 == 1 and fe3 == 0x86 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea0e207; op2val:0x8065d689;
op3val:0xc37fff00; valaddr_reg:x3; val_offset:47328*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47328*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15777:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x20e207 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x65d689 and fs3 == 1 and fe3 == 0x86 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea0e207; op2val:0x8065d689;
op3val:0xc37fff80; valaddr_reg:x3; val_offset:47331*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47331*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15778:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x20e207 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x65d689 and fs3 == 1 and fe3 == 0x86 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea0e207; op2val:0x8065d689;
op3val:0xc37fffc0; valaddr_reg:x3; val_offset:47334*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47334*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15779:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x20e207 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x65d689 and fs3 == 1 and fe3 == 0x86 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea0e207; op2val:0x8065d689;
op3val:0xc37fffe0; valaddr_reg:x3; val_offset:47337*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47337*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15780:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x20e207 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x65d689 and fs3 == 1 and fe3 == 0x86 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea0e207; op2val:0x8065d689;
op3val:0xc37ffff0; valaddr_reg:x3; val_offset:47340*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47340*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15781:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x20e207 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x65d689 and fs3 == 1 and fe3 == 0x86 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea0e207; op2val:0x8065d689;
op3val:0xc37ffff8; valaddr_reg:x3; val_offset:47343*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47343*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15782:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x20e207 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x65d689 and fs3 == 1 and fe3 == 0x86 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea0e207; op2val:0x8065d689;
op3val:0xc37ffffc; valaddr_reg:x3; val_offset:47346*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47346*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15783:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x20e207 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x65d689 and fs3 == 1 and fe3 == 0x86 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea0e207; op2val:0x8065d689;
op3val:0xc37ffffe; valaddr_reg:x3; val_offset:47349*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47349*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15784:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x20e207 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x65d689 and fs3 == 1 and fe3 == 0x86 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea0e207; op2val:0x8065d689;
op3val:0xc37fffff; valaddr_reg:x3; val_offset:47352*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47352*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15785:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2189de and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4ad972 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea189de; op2val:0xc04ad972;
op3val:0xe7800000; valaddr_reg:x3; val_offset:47355*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47355*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15786:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2189de and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4ad972 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea189de; op2val:0xc04ad972;
op3val:0xe7800001; valaddr_reg:x3; val_offset:47358*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47358*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15787:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2189de and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4ad972 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea189de; op2val:0xc04ad972;
op3val:0xe7800003; valaddr_reg:x3; val_offset:47361*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47361*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15788:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2189de and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4ad972 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea189de; op2val:0xc04ad972;
op3val:0xe7800007; valaddr_reg:x3; val_offset:47364*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47364*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15789:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2189de and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4ad972 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea189de; op2val:0xc04ad972;
op3val:0xe780000f; valaddr_reg:x3; val_offset:47367*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47367*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15790:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2189de and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4ad972 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea189de; op2val:0xc04ad972;
op3val:0xe780001f; valaddr_reg:x3; val_offset:47370*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47370*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15791:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2189de and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4ad972 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea189de; op2val:0xc04ad972;
op3val:0xe780003f; valaddr_reg:x3; val_offset:47373*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47373*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15792:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2189de and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4ad972 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea189de; op2val:0xc04ad972;
op3val:0xe780007f; valaddr_reg:x3; val_offset:47376*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47376*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15793:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2189de and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4ad972 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea189de; op2val:0xc04ad972;
op3val:0xe78000ff; valaddr_reg:x3; val_offset:47379*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47379*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15794:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2189de and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4ad972 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea189de; op2val:0xc04ad972;
op3val:0xe78001ff; valaddr_reg:x3; val_offset:47382*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47382*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15795:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2189de and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4ad972 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea189de; op2val:0xc04ad972;
op3val:0xe78003ff; valaddr_reg:x3; val_offset:47385*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47385*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15796:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2189de and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4ad972 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea189de; op2val:0xc04ad972;
op3val:0xe78007ff; valaddr_reg:x3; val_offset:47388*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47388*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15797:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2189de and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4ad972 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea189de; op2val:0xc04ad972;
op3val:0xe7800fff; valaddr_reg:x3; val_offset:47391*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47391*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15798:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2189de and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4ad972 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea189de; op2val:0xc04ad972;
op3val:0xe7801fff; valaddr_reg:x3; val_offset:47394*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47394*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15799:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2189de and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4ad972 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea189de; op2val:0xc04ad972;
op3val:0xe7803fff; valaddr_reg:x3; val_offset:47397*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47397*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15800:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2189de and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4ad972 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea189de; op2val:0xc04ad972;
op3val:0xe7807fff; valaddr_reg:x3; val_offset:47400*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47400*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15801:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2189de and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4ad972 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea189de; op2val:0xc04ad972;
op3val:0xe780ffff; valaddr_reg:x3; val_offset:47403*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47403*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15802:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2189de and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4ad972 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea189de; op2val:0xc04ad972;
op3val:0xe781ffff; valaddr_reg:x3; val_offset:47406*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47406*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15803:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2189de and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4ad972 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea189de; op2val:0xc04ad972;
op3val:0xe783ffff; valaddr_reg:x3; val_offset:47409*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47409*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15804:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2189de and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4ad972 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea189de; op2val:0xc04ad972;
op3val:0xe787ffff; valaddr_reg:x3; val_offset:47412*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47412*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15805:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2189de and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4ad972 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea189de; op2val:0xc04ad972;
op3val:0xe78fffff; valaddr_reg:x3; val_offset:47415*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47415*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15806:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2189de and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4ad972 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea189de; op2val:0xc04ad972;
op3val:0xe79fffff; valaddr_reg:x3; val_offset:47418*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47418*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15807:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2189de and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4ad972 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea189de; op2val:0xc04ad972;
op3val:0xe7bfffff; valaddr_reg:x3; val_offset:47421*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47421*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15808:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2189de and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4ad972 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea189de; op2val:0xc04ad972;
op3val:0xe7c00000; valaddr_reg:x3; val_offset:47424*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47424*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15809:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2189de and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4ad972 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea189de; op2val:0xc04ad972;
op3val:0xe7e00000; valaddr_reg:x3; val_offset:47427*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47427*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15810:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2189de and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4ad972 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea189de; op2val:0xc04ad972;
op3val:0xe7f00000; valaddr_reg:x3; val_offset:47430*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47430*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15811:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2189de and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4ad972 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea189de; op2val:0xc04ad972;
op3val:0xe7f80000; valaddr_reg:x3; val_offset:47433*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47433*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15812:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2189de and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4ad972 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea189de; op2val:0xc04ad972;
op3val:0xe7fc0000; valaddr_reg:x3; val_offset:47436*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47436*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15813:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2189de and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4ad972 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea189de; op2val:0xc04ad972;
op3val:0xe7fe0000; valaddr_reg:x3; val_offset:47439*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47439*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15814:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2189de and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4ad972 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea189de; op2val:0xc04ad972;
op3val:0xe7ff0000; valaddr_reg:x3; val_offset:47442*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47442*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15815:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2189de and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4ad972 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea189de; op2val:0xc04ad972;
op3val:0xe7ff8000; valaddr_reg:x3; val_offset:47445*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47445*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15816:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2189de and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4ad972 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea189de; op2val:0xc04ad972;
op3val:0xe7ffc000; valaddr_reg:x3; val_offset:47448*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47448*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15817:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2189de and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4ad972 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea189de; op2val:0xc04ad972;
op3val:0xe7ffe000; valaddr_reg:x3; val_offset:47451*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47451*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15818:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2189de and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4ad972 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea189de; op2val:0xc04ad972;
op3val:0xe7fff000; valaddr_reg:x3; val_offset:47454*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47454*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15819:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2189de and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4ad972 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea189de; op2val:0xc04ad972;
op3val:0xe7fff800; valaddr_reg:x3; val_offset:47457*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47457*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15820:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2189de and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4ad972 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea189de; op2val:0xc04ad972;
op3val:0xe7fffc00; valaddr_reg:x3; val_offset:47460*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47460*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15821:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2189de and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4ad972 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea189de; op2val:0xc04ad972;
op3val:0xe7fffe00; valaddr_reg:x3; val_offset:47463*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47463*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15822:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2189de and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4ad972 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea189de; op2val:0xc04ad972;
op3val:0xe7ffff00; valaddr_reg:x3; val_offset:47466*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47466*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15823:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2189de and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4ad972 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea189de; op2val:0xc04ad972;
op3val:0xe7ffff80; valaddr_reg:x3; val_offset:47469*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47469*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15824:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2189de and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4ad972 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea189de; op2val:0xc04ad972;
op3val:0xe7ffffc0; valaddr_reg:x3; val_offset:47472*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47472*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15825:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2189de and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4ad972 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea189de; op2val:0xc04ad972;
op3val:0xe7ffffe0; valaddr_reg:x3; val_offset:47475*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47475*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15826:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2189de and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4ad972 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea189de; op2val:0xc04ad972;
op3val:0xe7fffff0; valaddr_reg:x3; val_offset:47478*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47478*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15827:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2189de and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4ad972 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea189de; op2val:0xc04ad972;
op3val:0xe7fffff8; valaddr_reg:x3; val_offset:47481*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47481*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15828:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2189de and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4ad972 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea189de; op2val:0xc04ad972;
op3val:0xe7fffffc; valaddr_reg:x3; val_offset:47484*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47484*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15829:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2189de and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4ad972 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea189de; op2val:0xc04ad972;
op3val:0xe7fffffe; valaddr_reg:x3; val_offset:47487*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47487*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15830:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2189de and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4ad972 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea189de; op2val:0xc04ad972;
op3val:0xe7ffffff; valaddr_reg:x3; val_offset:47490*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47490*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15831:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2189de and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4ad972 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea189de; op2val:0xc04ad972;
op3val:0xff000001; valaddr_reg:x3; val_offset:47493*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47493*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15832:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2189de and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4ad972 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea189de; op2val:0xc04ad972;
op3val:0xff000003; valaddr_reg:x3; val_offset:47496*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47496*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15833:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2189de and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4ad972 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea189de; op2val:0xc04ad972;
op3val:0xff000007; valaddr_reg:x3; val_offset:47499*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47499*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15834:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2189de and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4ad972 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea189de; op2val:0xc04ad972;
op3val:0xff199999; valaddr_reg:x3; val_offset:47502*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47502*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15835:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2189de and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4ad972 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea189de; op2val:0xc04ad972;
op3val:0xff249249; valaddr_reg:x3; val_offset:47505*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47505*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15836:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2189de and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4ad972 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea189de; op2val:0xc04ad972;
op3val:0xff333333; valaddr_reg:x3; val_offset:47508*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47508*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15837:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2189de and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4ad972 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea189de; op2val:0xc04ad972;
op3val:0xff36db6d; valaddr_reg:x3; val_offset:47511*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47511*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15838:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2189de and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4ad972 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea189de; op2val:0xc04ad972;
op3val:0xff3bbbbb; valaddr_reg:x3; val_offset:47514*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47514*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15839:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2189de and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4ad972 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea189de; op2val:0xc04ad972;
op3val:0xff444444; valaddr_reg:x3; val_offset:47517*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47517*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15840:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2189de and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4ad972 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea189de; op2val:0xc04ad972;
op3val:0xff4ccccc; valaddr_reg:x3; val_offset:47520*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47520*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15841:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2189de and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4ad972 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea189de; op2val:0xc04ad972;
op3val:0xff5b6db6; valaddr_reg:x3; val_offset:47523*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47523*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15842:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2189de and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4ad972 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea189de; op2val:0xc04ad972;
op3val:0xff666666; valaddr_reg:x3; val_offset:47526*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47526*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15843:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2189de and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4ad972 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea189de; op2val:0xc04ad972;
op3val:0xff6db6db; valaddr_reg:x3; val_offset:47529*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47529*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15844:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2189de and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4ad972 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea189de; op2val:0xc04ad972;
op3val:0xff7ffff8; valaddr_reg:x3; val_offset:47532*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47532*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15845:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2189de and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4ad972 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea189de; op2val:0xc04ad972;
op3val:0xff7ffffc; valaddr_reg:x3; val_offset:47535*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47535*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15846:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2189de and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4ad972 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea189de; op2val:0xc04ad972;
op3val:0xff7ffffe; valaddr_reg:x3; val_offset:47538*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47538*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15847:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x236e13 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x644039 and fs3 == 1 and fe3 == 0x4b and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea36e13; op2val:0x80644039;
op3val:0xa5800000; valaddr_reg:x3; val_offset:47541*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47541*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15848:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x236e13 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x644039 and fs3 == 1 and fe3 == 0x4b and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea36e13; op2val:0x80644039;
op3val:0xa5800001; valaddr_reg:x3; val_offset:47544*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47544*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15849:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x236e13 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x644039 and fs3 == 1 and fe3 == 0x4b and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea36e13; op2val:0x80644039;
op3val:0xa5800003; valaddr_reg:x3; val_offset:47547*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47547*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15850:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x236e13 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x644039 and fs3 == 1 and fe3 == 0x4b and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea36e13; op2val:0x80644039;
op3val:0xa5800007; valaddr_reg:x3; val_offset:47550*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47550*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15851:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x236e13 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x644039 and fs3 == 1 and fe3 == 0x4b and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea36e13; op2val:0x80644039;
op3val:0xa580000f; valaddr_reg:x3; val_offset:47553*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47553*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15852:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x236e13 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x644039 and fs3 == 1 and fe3 == 0x4b and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea36e13; op2val:0x80644039;
op3val:0xa580001f; valaddr_reg:x3; val_offset:47556*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47556*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15853:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x236e13 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x644039 and fs3 == 1 and fe3 == 0x4b and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea36e13; op2val:0x80644039;
op3val:0xa580003f; valaddr_reg:x3; val_offset:47559*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47559*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15854:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x236e13 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x644039 and fs3 == 1 and fe3 == 0x4b and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea36e13; op2val:0x80644039;
op3val:0xa580007f; valaddr_reg:x3; val_offset:47562*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47562*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15855:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x236e13 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x644039 and fs3 == 1 and fe3 == 0x4b and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea36e13; op2val:0x80644039;
op3val:0xa58000ff; valaddr_reg:x3; val_offset:47565*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47565*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15856:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x236e13 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x644039 and fs3 == 1 and fe3 == 0x4b and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea36e13; op2val:0x80644039;
op3val:0xa58001ff; valaddr_reg:x3; val_offset:47568*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47568*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15857:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x236e13 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x644039 and fs3 == 1 and fe3 == 0x4b and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea36e13; op2val:0x80644039;
op3val:0xa58003ff; valaddr_reg:x3; val_offset:47571*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47571*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15858:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x236e13 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x644039 and fs3 == 1 and fe3 == 0x4b and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea36e13; op2val:0x80644039;
op3val:0xa58007ff; valaddr_reg:x3; val_offset:47574*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47574*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15859:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x236e13 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x644039 and fs3 == 1 and fe3 == 0x4b and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea36e13; op2val:0x80644039;
op3val:0xa5800fff; valaddr_reg:x3; val_offset:47577*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47577*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15860:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x236e13 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x644039 and fs3 == 1 and fe3 == 0x4b and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea36e13; op2val:0x80644039;
op3val:0xa5801fff; valaddr_reg:x3; val_offset:47580*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47580*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15861:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x236e13 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x644039 and fs3 == 1 and fe3 == 0x4b and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea36e13; op2val:0x80644039;
op3val:0xa5803fff; valaddr_reg:x3; val_offset:47583*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47583*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15862:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x236e13 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x644039 and fs3 == 1 and fe3 == 0x4b and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea36e13; op2val:0x80644039;
op3val:0xa5807fff; valaddr_reg:x3; val_offset:47586*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47586*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15863:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x236e13 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x644039 and fs3 == 1 and fe3 == 0x4b and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea36e13; op2val:0x80644039;
op3val:0xa580ffff; valaddr_reg:x3; val_offset:47589*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47589*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15864:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x236e13 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x644039 and fs3 == 1 and fe3 == 0x4b and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea36e13; op2val:0x80644039;
op3val:0xa581ffff; valaddr_reg:x3; val_offset:47592*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47592*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15865:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x236e13 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x644039 and fs3 == 1 and fe3 == 0x4b and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea36e13; op2val:0x80644039;
op3val:0xa583ffff; valaddr_reg:x3; val_offset:47595*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47595*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15866:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x236e13 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x644039 and fs3 == 1 and fe3 == 0x4b and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea36e13; op2val:0x80644039;
op3val:0xa587ffff; valaddr_reg:x3; val_offset:47598*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47598*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15867:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x236e13 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x644039 and fs3 == 1 and fe3 == 0x4b and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea36e13; op2val:0x80644039;
op3val:0xa58fffff; valaddr_reg:x3; val_offset:47601*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47601*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15868:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x236e13 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x644039 and fs3 == 1 and fe3 == 0x4b and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea36e13; op2val:0x80644039;
op3val:0xa59fffff; valaddr_reg:x3; val_offset:47604*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47604*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15869:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x236e13 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x644039 and fs3 == 1 and fe3 == 0x4b and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea36e13; op2val:0x80644039;
op3val:0xa5bfffff; valaddr_reg:x3; val_offset:47607*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47607*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15870:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x236e13 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x644039 and fs3 == 1 and fe3 == 0x4b and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea36e13; op2val:0x80644039;
op3val:0xa5c00000; valaddr_reg:x3; val_offset:47610*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47610*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15871:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x236e13 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x644039 and fs3 == 1 and fe3 == 0x4b and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea36e13; op2val:0x80644039;
op3val:0xa5e00000; valaddr_reg:x3; val_offset:47613*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47613*0 + 3*123*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2124472839,32,FLEN)
NAN_BOXED(2154157705,32,FLEN)
NAN_BOXED(3271557151,32,FLEN)
NAN_BOXED(2124472839,32,FLEN)
NAN_BOXED(2154157705,32,FLEN)
NAN_BOXED(3271557183,32,FLEN)
NAN_BOXED(2124472839,32,FLEN)
NAN_BOXED(2154157705,32,FLEN)
NAN_BOXED(3271557247,32,FLEN)
NAN_BOXED(2124472839,32,FLEN)
NAN_BOXED(2154157705,32,FLEN)
NAN_BOXED(3271557375,32,FLEN)
NAN_BOXED(2124472839,32,FLEN)
NAN_BOXED(2154157705,32,FLEN)
NAN_BOXED(3271557631,32,FLEN)
NAN_BOXED(2124472839,32,FLEN)
NAN_BOXED(2154157705,32,FLEN)
NAN_BOXED(3271558143,32,FLEN)
NAN_BOXED(2124472839,32,FLEN)
NAN_BOXED(2154157705,32,FLEN)
NAN_BOXED(3271559167,32,FLEN)
NAN_BOXED(2124472839,32,FLEN)
NAN_BOXED(2154157705,32,FLEN)
NAN_BOXED(3271561215,32,FLEN)
NAN_BOXED(2124472839,32,FLEN)
NAN_BOXED(2154157705,32,FLEN)
NAN_BOXED(3271565311,32,FLEN)
NAN_BOXED(2124472839,32,FLEN)
NAN_BOXED(2154157705,32,FLEN)
NAN_BOXED(3271573503,32,FLEN)
NAN_BOXED(2124472839,32,FLEN)
NAN_BOXED(2154157705,32,FLEN)
NAN_BOXED(3271589887,32,FLEN)
NAN_BOXED(2124472839,32,FLEN)
NAN_BOXED(2154157705,32,FLEN)
NAN_BOXED(3271622655,32,FLEN)
NAN_BOXED(2124472839,32,FLEN)
NAN_BOXED(2154157705,32,FLEN)
NAN_BOXED(3271688191,32,FLEN)
NAN_BOXED(2124472839,32,FLEN)
NAN_BOXED(2154157705,32,FLEN)
NAN_BOXED(3271819263,32,FLEN)
NAN_BOXED(2124472839,32,FLEN)
NAN_BOXED(2154157705,32,FLEN)
NAN_BOXED(3272081407,32,FLEN)
NAN_BOXED(2124472839,32,FLEN)
NAN_BOXED(2154157705,32,FLEN)
NAN_BOXED(3272605695,32,FLEN)
NAN_BOXED(2124472839,32,FLEN)
NAN_BOXED(2154157705,32,FLEN)
NAN_BOXED(3273654271,32,FLEN)
NAN_BOXED(2124472839,32,FLEN)
NAN_BOXED(2154157705,32,FLEN)
NAN_BOXED(3275751423,32,FLEN)
NAN_BOXED(2124472839,32,FLEN)
NAN_BOXED(2154157705,32,FLEN)
NAN_BOXED(3275751424,32,FLEN)
NAN_BOXED(2124472839,32,FLEN)
NAN_BOXED(2154157705,32,FLEN)
NAN_BOXED(3277848576,32,FLEN)
NAN_BOXED(2124472839,32,FLEN)
NAN_BOXED(2154157705,32,FLEN)
NAN_BOXED(3278897152,32,FLEN)
NAN_BOXED(2124472839,32,FLEN)
NAN_BOXED(2154157705,32,FLEN)
NAN_BOXED(3279421440,32,FLEN)
NAN_BOXED(2124472839,32,FLEN)
NAN_BOXED(2154157705,32,FLEN)
NAN_BOXED(3279683584,32,FLEN)
NAN_BOXED(2124472839,32,FLEN)
NAN_BOXED(2154157705,32,FLEN)
NAN_BOXED(3279814656,32,FLEN)
NAN_BOXED(2124472839,32,FLEN)
NAN_BOXED(2154157705,32,FLEN)
NAN_BOXED(3279880192,32,FLEN)
NAN_BOXED(2124472839,32,FLEN)
NAN_BOXED(2154157705,32,FLEN)
NAN_BOXED(3279912960,32,FLEN)
NAN_BOXED(2124472839,32,FLEN)
NAN_BOXED(2154157705,32,FLEN)
NAN_BOXED(3279929344,32,FLEN)
NAN_BOXED(2124472839,32,FLEN)
NAN_BOXED(2154157705,32,FLEN)
NAN_BOXED(3279937536,32,FLEN)
NAN_BOXED(2124472839,32,FLEN)
NAN_BOXED(2154157705,32,FLEN)
NAN_BOXED(3279941632,32,FLEN)
NAN_BOXED(2124472839,32,FLEN)
NAN_BOXED(2154157705,32,FLEN)
NAN_BOXED(3279943680,32,FLEN)
NAN_BOXED(2124472839,32,FLEN)
NAN_BOXED(2154157705,32,FLEN)
NAN_BOXED(3279944704,32,FLEN)
NAN_BOXED(2124472839,32,FLEN)
NAN_BOXED(2154157705,32,FLEN)
NAN_BOXED(3279945216,32,FLEN)
NAN_BOXED(2124472839,32,FLEN)
NAN_BOXED(2154157705,32,FLEN)
NAN_BOXED(3279945472,32,FLEN)
NAN_BOXED(2124472839,32,FLEN)
NAN_BOXED(2154157705,32,FLEN)
NAN_BOXED(3279945600,32,FLEN)
NAN_BOXED(2124472839,32,FLEN)
NAN_BOXED(2154157705,32,FLEN)
NAN_BOXED(3279945664,32,FLEN)
NAN_BOXED(2124472839,32,FLEN)
NAN_BOXED(2154157705,32,FLEN)
NAN_BOXED(3279945696,32,FLEN)
NAN_BOXED(2124472839,32,FLEN)
NAN_BOXED(2154157705,32,FLEN)
NAN_BOXED(3279945712,32,FLEN)
NAN_BOXED(2124472839,32,FLEN)
NAN_BOXED(2154157705,32,FLEN)
NAN_BOXED(3279945720,32,FLEN)
NAN_BOXED(2124472839,32,FLEN)
NAN_BOXED(2154157705,32,FLEN)
NAN_BOXED(3279945724,32,FLEN)
NAN_BOXED(2124472839,32,FLEN)
NAN_BOXED(2154157705,32,FLEN)
NAN_BOXED(3279945726,32,FLEN)
NAN_BOXED(2124472839,32,FLEN)
NAN_BOXED(2154157705,32,FLEN)
NAN_BOXED(3279945727,32,FLEN)
NAN_BOXED(2124515806,32,FLEN)
NAN_BOXED(3226130802,32,FLEN)
NAN_BOXED(3883925504,32,FLEN)
NAN_BOXED(2124515806,32,FLEN)
NAN_BOXED(3226130802,32,FLEN)
NAN_BOXED(3883925505,32,FLEN)
NAN_BOXED(2124515806,32,FLEN)
NAN_BOXED(3226130802,32,FLEN)
NAN_BOXED(3883925507,32,FLEN)
NAN_BOXED(2124515806,32,FLEN)
NAN_BOXED(3226130802,32,FLEN)
NAN_BOXED(3883925511,32,FLEN)
NAN_BOXED(2124515806,32,FLEN)
NAN_BOXED(3226130802,32,FLEN)
NAN_BOXED(3883925519,32,FLEN)
NAN_BOXED(2124515806,32,FLEN)
NAN_BOXED(3226130802,32,FLEN)
NAN_BOXED(3883925535,32,FLEN)
NAN_BOXED(2124515806,32,FLEN)
NAN_BOXED(3226130802,32,FLEN)
NAN_BOXED(3883925567,32,FLEN)
NAN_BOXED(2124515806,32,FLEN)
NAN_BOXED(3226130802,32,FLEN)
NAN_BOXED(3883925631,32,FLEN)
NAN_BOXED(2124515806,32,FLEN)
NAN_BOXED(3226130802,32,FLEN)
NAN_BOXED(3883925759,32,FLEN)
NAN_BOXED(2124515806,32,FLEN)
NAN_BOXED(3226130802,32,FLEN)
NAN_BOXED(3883926015,32,FLEN)
NAN_BOXED(2124515806,32,FLEN)
NAN_BOXED(3226130802,32,FLEN)
NAN_BOXED(3883926527,32,FLEN)
NAN_BOXED(2124515806,32,FLEN)
NAN_BOXED(3226130802,32,FLEN)
NAN_BOXED(3883927551,32,FLEN)
NAN_BOXED(2124515806,32,FLEN)
NAN_BOXED(3226130802,32,FLEN)
NAN_BOXED(3883929599,32,FLEN)
NAN_BOXED(2124515806,32,FLEN)
NAN_BOXED(3226130802,32,FLEN)
NAN_BOXED(3883933695,32,FLEN)
NAN_BOXED(2124515806,32,FLEN)
NAN_BOXED(3226130802,32,FLEN)
NAN_BOXED(3883941887,32,FLEN)
NAN_BOXED(2124515806,32,FLEN)
NAN_BOXED(3226130802,32,FLEN)
NAN_BOXED(3883958271,32,FLEN)
NAN_BOXED(2124515806,32,FLEN)
NAN_BOXED(3226130802,32,FLEN)
NAN_BOXED(3883991039,32,FLEN)
NAN_BOXED(2124515806,32,FLEN)
NAN_BOXED(3226130802,32,FLEN)
NAN_BOXED(3884056575,32,FLEN)
NAN_BOXED(2124515806,32,FLEN)
NAN_BOXED(3226130802,32,FLEN)
NAN_BOXED(3884187647,32,FLEN)
NAN_BOXED(2124515806,32,FLEN)
NAN_BOXED(3226130802,32,FLEN)
NAN_BOXED(3884449791,32,FLEN)
NAN_BOXED(2124515806,32,FLEN)
NAN_BOXED(3226130802,32,FLEN)
NAN_BOXED(3884974079,32,FLEN)
NAN_BOXED(2124515806,32,FLEN)
NAN_BOXED(3226130802,32,FLEN)
NAN_BOXED(3886022655,32,FLEN)
NAN_BOXED(2124515806,32,FLEN)
NAN_BOXED(3226130802,32,FLEN)
NAN_BOXED(3888119807,32,FLEN)
NAN_BOXED(2124515806,32,FLEN)
NAN_BOXED(3226130802,32,FLEN)
NAN_BOXED(3888119808,32,FLEN)
NAN_BOXED(2124515806,32,FLEN)
NAN_BOXED(3226130802,32,FLEN)
NAN_BOXED(3890216960,32,FLEN)
NAN_BOXED(2124515806,32,FLEN)
NAN_BOXED(3226130802,32,FLEN)
NAN_BOXED(3891265536,32,FLEN)
NAN_BOXED(2124515806,32,FLEN)
NAN_BOXED(3226130802,32,FLEN)
NAN_BOXED(3891789824,32,FLEN)
NAN_BOXED(2124515806,32,FLEN)
NAN_BOXED(3226130802,32,FLEN)
NAN_BOXED(3892051968,32,FLEN)
NAN_BOXED(2124515806,32,FLEN)
NAN_BOXED(3226130802,32,FLEN)
NAN_BOXED(3892183040,32,FLEN)
NAN_BOXED(2124515806,32,FLEN)
NAN_BOXED(3226130802,32,FLEN)
NAN_BOXED(3892248576,32,FLEN)
NAN_BOXED(2124515806,32,FLEN)
NAN_BOXED(3226130802,32,FLEN)
NAN_BOXED(3892281344,32,FLEN)
NAN_BOXED(2124515806,32,FLEN)
NAN_BOXED(3226130802,32,FLEN)
NAN_BOXED(3892297728,32,FLEN)
NAN_BOXED(2124515806,32,FLEN)
NAN_BOXED(3226130802,32,FLEN)
NAN_BOXED(3892305920,32,FLEN)
NAN_BOXED(2124515806,32,FLEN)
NAN_BOXED(3226130802,32,FLEN)
NAN_BOXED(3892310016,32,FLEN)
NAN_BOXED(2124515806,32,FLEN)
NAN_BOXED(3226130802,32,FLEN)
NAN_BOXED(3892312064,32,FLEN)
NAN_BOXED(2124515806,32,FLEN)
NAN_BOXED(3226130802,32,FLEN)
NAN_BOXED(3892313088,32,FLEN)
NAN_BOXED(2124515806,32,FLEN)
NAN_BOXED(3226130802,32,FLEN)
NAN_BOXED(3892313600,32,FLEN)
NAN_BOXED(2124515806,32,FLEN)
NAN_BOXED(3226130802,32,FLEN)
NAN_BOXED(3892313856,32,FLEN)
NAN_BOXED(2124515806,32,FLEN)
NAN_BOXED(3226130802,32,FLEN)
NAN_BOXED(3892313984,32,FLEN)
NAN_BOXED(2124515806,32,FLEN)
NAN_BOXED(3226130802,32,FLEN)
NAN_BOXED(3892314048,32,FLEN)
NAN_BOXED(2124515806,32,FLEN)
NAN_BOXED(3226130802,32,FLEN)
NAN_BOXED(3892314080,32,FLEN)
NAN_BOXED(2124515806,32,FLEN)
NAN_BOXED(3226130802,32,FLEN)
NAN_BOXED(3892314096,32,FLEN)
NAN_BOXED(2124515806,32,FLEN)
NAN_BOXED(3226130802,32,FLEN)
NAN_BOXED(3892314104,32,FLEN)
NAN_BOXED(2124515806,32,FLEN)
NAN_BOXED(3226130802,32,FLEN)
NAN_BOXED(3892314108,32,FLEN)
NAN_BOXED(2124515806,32,FLEN)
NAN_BOXED(3226130802,32,FLEN)
NAN_BOXED(3892314110,32,FLEN)
NAN_BOXED(2124515806,32,FLEN)
NAN_BOXED(3226130802,32,FLEN)
NAN_BOXED(3892314111,32,FLEN)
NAN_BOXED(2124515806,32,FLEN)
NAN_BOXED(3226130802,32,FLEN)
NAN_BOXED(4278190081,32,FLEN)
NAN_BOXED(2124515806,32,FLEN)
NAN_BOXED(3226130802,32,FLEN)
NAN_BOXED(4278190083,32,FLEN)
NAN_BOXED(2124515806,32,FLEN)
NAN_BOXED(3226130802,32,FLEN)
NAN_BOXED(4278190087,32,FLEN)
NAN_BOXED(2124515806,32,FLEN)
NAN_BOXED(3226130802,32,FLEN)
NAN_BOXED(4279867801,32,FLEN)
NAN_BOXED(2124515806,32,FLEN)
NAN_BOXED(3226130802,32,FLEN)
NAN_BOXED(4280586825,32,FLEN)
NAN_BOXED(2124515806,32,FLEN)
NAN_BOXED(3226130802,32,FLEN)
NAN_BOXED(4281545523,32,FLEN)
NAN_BOXED(2124515806,32,FLEN)
NAN_BOXED(3226130802,32,FLEN)
NAN_BOXED(4281785197,32,FLEN)
NAN_BOXED(2124515806,32,FLEN)
NAN_BOXED(3226130802,32,FLEN)
NAN_BOXED(4282104763,32,FLEN)
NAN_BOXED(2124515806,32,FLEN)
NAN_BOXED(3226130802,32,FLEN)
NAN_BOXED(4282664004,32,FLEN)
NAN_BOXED(2124515806,32,FLEN)
NAN_BOXED(3226130802,32,FLEN)
NAN_BOXED(4283223244,32,FLEN)
NAN_BOXED(2124515806,32,FLEN)
NAN_BOXED(3226130802,32,FLEN)
NAN_BOXED(4284181942,32,FLEN)
NAN_BOXED(2124515806,32,FLEN)
NAN_BOXED(3226130802,32,FLEN)
NAN_BOXED(4284900966,32,FLEN)
NAN_BOXED(2124515806,32,FLEN)
NAN_BOXED(3226130802,32,FLEN)
NAN_BOXED(4285380315,32,FLEN)
NAN_BOXED(2124515806,32,FLEN)
NAN_BOXED(3226130802,32,FLEN)
NAN_BOXED(4286578680,32,FLEN)
NAN_BOXED(2124515806,32,FLEN)
NAN_BOXED(3226130802,32,FLEN)
NAN_BOXED(4286578684,32,FLEN)
NAN_BOXED(2124515806,32,FLEN)
NAN_BOXED(3226130802,32,FLEN)
NAN_BOXED(4286578686,32,FLEN)
NAN_BOXED(2124639763,32,FLEN)
NAN_BOXED(2154053689,32,FLEN)
NAN_BOXED(2776629248,32,FLEN)
NAN_BOXED(2124639763,32,FLEN)
NAN_BOXED(2154053689,32,FLEN)
NAN_BOXED(2776629249,32,FLEN)
NAN_BOXED(2124639763,32,FLEN)
NAN_BOXED(2154053689,32,FLEN)
NAN_BOXED(2776629251,32,FLEN)
NAN_BOXED(2124639763,32,FLEN)
NAN_BOXED(2154053689,32,FLEN)
NAN_BOXED(2776629255,32,FLEN)
NAN_BOXED(2124639763,32,FLEN)
NAN_BOXED(2154053689,32,FLEN)
NAN_BOXED(2776629263,32,FLEN)
NAN_BOXED(2124639763,32,FLEN)
NAN_BOXED(2154053689,32,FLEN)
NAN_BOXED(2776629279,32,FLEN)
NAN_BOXED(2124639763,32,FLEN)
NAN_BOXED(2154053689,32,FLEN)
NAN_BOXED(2776629311,32,FLEN)
NAN_BOXED(2124639763,32,FLEN)
NAN_BOXED(2154053689,32,FLEN)
NAN_BOXED(2776629375,32,FLEN)
NAN_BOXED(2124639763,32,FLEN)
NAN_BOXED(2154053689,32,FLEN)
NAN_BOXED(2776629503,32,FLEN)
NAN_BOXED(2124639763,32,FLEN)
NAN_BOXED(2154053689,32,FLEN)
NAN_BOXED(2776629759,32,FLEN)
NAN_BOXED(2124639763,32,FLEN)
NAN_BOXED(2154053689,32,FLEN)
NAN_BOXED(2776630271,32,FLEN)
NAN_BOXED(2124639763,32,FLEN)
NAN_BOXED(2154053689,32,FLEN)
NAN_BOXED(2776631295,32,FLEN)
NAN_BOXED(2124639763,32,FLEN)
NAN_BOXED(2154053689,32,FLEN)
NAN_BOXED(2776633343,32,FLEN)
NAN_BOXED(2124639763,32,FLEN)
NAN_BOXED(2154053689,32,FLEN)
NAN_BOXED(2776637439,32,FLEN)
NAN_BOXED(2124639763,32,FLEN)
NAN_BOXED(2154053689,32,FLEN)
NAN_BOXED(2776645631,32,FLEN)
NAN_BOXED(2124639763,32,FLEN)
NAN_BOXED(2154053689,32,FLEN)
NAN_BOXED(2776662015,32,FLEN)
NAN_BOXED(2124639763,32,FLEN)
NAN_BOXED(2154053689,32,FLEN)
NAN_BOXED(2776694783,32,FLEN)
NAN_BOXED(2124639763,32,FLEN)
NAN_BOXED(2154053689,32,FLEN)
NAN_BOXED(2776760319,32,FLEN)
NAN_BOXED(2124639763,32,FLEN)
NAN_BOXED(2154053689,32,FLEN)
NAN_BOXED(2776891391,32,FLEN)
NAN_BOXED(2124639763,32,FLEN)
NAN_BOXED(2154053689,32,FLEN)
NAN_BOXED(2777153535,32,FLEN)
NAN_BOXED(2124639763,32,FLEN)
NAN_BOXED(2154053689,32,FLEN)
NAN_BOXED(2777677823,32,FLEN)
NAN_BOXED(2124639763,32,FLEN)
NAN_BOXED(2154053689,32,FLEN)
NAN_BOXED(2778726399,32,FLEN)
NAN_BOXED(2124639763,32,FLEN)
NAN_BOXED(2154053689,32,FLEN)
NAN_BOXED(2780823551,32,FLEN)
NAN_BOXED(2124639763,32,FLEN)
NAN_BOXED(2154053689,32,FLEN)
NAN_BOXED(2780823552,32,FLEN)
NAN_BOXED(2124639763,32,FLEN)
NAN_BOXED(2154053689,32,FLEN)
NAN_BOXED(2782920704,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
