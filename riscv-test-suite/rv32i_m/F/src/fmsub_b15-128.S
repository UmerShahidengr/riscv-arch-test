
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:07 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_16256:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ad2f1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaad2f1; op2val:0x0;
op3val:0x79fffff; valaddr_reg:x3; val_offset:48768*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48768*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16257:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ad2f1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaad2f1; op2val:0x0;
op3val:0x7bfffff; valaddr_reg:x3; val_offset:48771*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48771*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16258:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ad2f1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaad2f1; op2val:0x0;
op3val:0x7c00000; valaddr_reg:x3; val_offset:48774*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48774*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16259:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ad2f1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaad2f1; op2val:0x0;
op3val:0x7e00000; valaddr_reg:x3; val_offset:48777*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48777*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16260:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ad2f1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaad2f1; op2val:0x0;
op3val:0x7f00000; valaddr_reg:x3; val_offset:48780*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48780*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16261:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ad2f1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaad2f1; op2val:0x0;
op3val:0x7f80000; valaddr_reg:x3; val_offset:48783*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48783*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16262:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ad2f1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaad2f1; op2val:0x0;
op3val:0x7fc0000; valaddr_reg:x3; val_offset:48786*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48786*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16263:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ad2f1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaad2f1; op2val:0x0;
op3val:0x7fe0000; valaddr_reg:x3; val_offset:48789*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48789*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16264:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ad2f1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaad2f1; op2val:0x0;
op3val:0x7ff0000; valaddr_reg:x3; val_offset:48792*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48792*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16265:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ad2f1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaad2f1; op2val:0x0;
op3val:0x7ff8000; valaddr_reg:x3; val_offset:48795*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48795*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16266:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ad2f1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaad2f1; op2val:0x0;
op3val:0x7ffc000; valaddr_reg:x3; val_offset:48798*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48798*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16267:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ad2f1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaad2f1; op2val:0x0;
op3val:0x7ffe000; valaddr_reg:x3; val_offset:48801*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48801*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16268:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ad2f1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaad2f1; op2val:0x0;
op3val:0x7fff000; valaddr_reg:x3; val_offset:48804*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48804*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16269:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ad2f1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaad2f1; op2val:0x0;
op3val:0x7fff800; valaddr_reg:x3; val_offset:48807*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48807*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16270:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ad2f1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaad2f1; op2val:0x0;
op3val:0x7fffc00; valaddr_reg:x3; val_offset:48810*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48810*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16271:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ad2f1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaad2f1; op2val:0x0;
op3val:0x7fffe00; valaddr_reg:x3; val_offset:48813*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48813*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16272:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ad2f1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaad2f1; op2val:0x0;
op3val:0x7ffff00; valaddr_reg:x3; val_offset:48816*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48816*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16273:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ad2f1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaad2f1; op2val:0x0;
op3val:0x7ffff80; valaddr_reg:x3; val_offset:48819*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48819*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16274:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ad2f1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaad2f1; op2val:0x0;
op3val:0x7ffffc0; valaddr_reg:x3; val_offset:48822*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48822*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16275:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ad2f1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaad2f1; op2val:0x0;
op3val:0x7ffffe0; valaddr_reg:x3; val_offset:48825*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48825*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16276:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ad2f1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaad2f1; op2val:0x0;
op3val:0x7fffff0; valaddr_reg:x3; val_offset:48828*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48828*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16277:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ad2f1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaad2f1; op2val:0x0;
op3val:0x7fffff8; valaddr_reg:x3; val_offset:48831*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48831*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16278:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ad2f1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaad2f1; op2val:0x0;
op3val:0x7fffffc; valaddr_reg:x3; val_offset:48834*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48834*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16279:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ad2f1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaad2f1; op2val:0x0;
op3val:0x7fffffe; valaddr_reg:x3; val_offset:48837*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48837*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16280:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ad2f1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaad2f1; op2val:0x0;
op3val:0x7ffffff; valaddr_reg:x3; val_offset:48840*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48840*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16281:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2b2cde and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eab2cde; op2val:0x80000000;
op3val:0x80000001; valaddr_reg:x3; val_offset:48843*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48843*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16282:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2b2cde and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eab2cde; op2val:0x80000000;
op3val:0x80000003; valaddr_reg:x3; val_offset:48846*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48846*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16283:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2b2cde and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eab2cde; op2val:0x80000000;
op3val:0x80000007; valaddr_reg:x3; val_offset:48849*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48849*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16284:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2b2cde and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eab2cde; op2val:0x80000000;
op3val:0x80199999; valaddr_reg:x3; val_offset:48852*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48852*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16285:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2b2cde and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eab2cde; op2val:0x80000000;
op3val:0x80249249; valaddr_reg:x3; val_offset:48855*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48855*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16286:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2b2cde and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eab2cde; op2val:0x80000000;
op3val:0x80333333; valaddr_reg:x3; val_offset:48858*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48858*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16287:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2b2cde and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eab2cde; op2val:0x80000000;
op3val:0x8036db6d; valaddr_reg:x3; val_offset:48861*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48861*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16288:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2b2cde and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eab2cde; op2val:0x80000000;
op3val:0x803bbbbb; valaddr_reg:x3; val_offset:48864*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48864*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16289:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2b2cde and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eab2cde; op2val:0x80000000;
op3val:0x80444444; valaddr_reg:x3; val_offset:48867*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48867*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16290:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2b2cde and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eab2cde; op2val:0x80000000;
op3val:0x804ccccc; valaddr_reg:x3; val_offset:48870*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48870*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16291:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2b2cde and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eab2cde; op2val:0x80000000;
op3val:0x805b6db6; valaddr_reg:x3; val_offset:48873*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48873*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16292:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2b2cde and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eab2cde; op2val:0x80000000;
op3val:0x80666666; valaddr_reg:x3; val_offset:48876*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48876*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16293:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2b2cde and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eab2cde; op2val:0x80000000;
op3val:0x806db6db; valaddr_reg:x3; val_offset:48879*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48879*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16294:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2b2cde and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eab2cde; op2val:0x80000000;
op3val:0x807ffff8; valaddr_reg:x3; val_offset:48882*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48882*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16295:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2b2cde and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eab2cde; op2val:0x80000000;
op3val:0x807ffffc; valaddr_reg:x3; val_offset:48885*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48885*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16296:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2b2cde and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eab2cde; op2val:0x80000000;
op3val:0x807ffffe; valaddr_reg:x3; val_offset:48888*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48888*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16297:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2b2cde and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eab2cde; op2val:0x80000000;
op3val:0x83000000; valaddr_reg:x3; val_offset:48891*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48891*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16298:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2b2cde and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eab2cde; op2val:0x80000000;
op3val:0x83000001; valaddr_reg:x3; val_offset:48894*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48894*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16299:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2b2cde and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eab2cde; op2val:0x80000000;
op3val:0x83000003; valaddr_reg:x3; val_offset:48897*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48897*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16300:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2b2cde and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eab2cde; op2val:0x80000000;
op3val:0x83000007; valaddr_reg:x3; val_offset:48900*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48900*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16301:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2b2cde and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eab2cde; op2val:0x80000000;
op3val:0x8300000f; valaddr_reg:x3; val_offset:48903*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48903*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16302:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2b2cde and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eab2cde; op2val:0x80000000;
op3val:0x8300001f; valaddr_reg:x3; val_offset:48906*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48906*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16303:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2b2cde and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eab2cde; op2val:0x80000000;
op3val:0x8300003f; valaddr_reg:x3; val_offset:48909*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48909*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16304:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2b2cde and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eab2cde; op2val:0x80000000;
op3val:0x8300007f; valaddr_reg:x3; val_offset:48912*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48912*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16305:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2b2cde and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eab2cde; op2val:0x80000000;
op3val:0x830000ff; valaddr_reg:x3; val_offset:48915*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48915*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16306:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2b2cde and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eab2cde; op2val:0x80000000;
op3val:0x830001ff; valaddr_reg:x3; val_offset:48918*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48918*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16307:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2b2cde and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eab2cde; op2val:0x80000000;
op3val:0x830003ff; valaddr_reg:x3; val_offset:48921*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48921*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16308:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2b2cde and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eab2cde; op2val:0x80000000;
op3val:0x830007ff; valaddr_reg:x3; val_offset:48924*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48924*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16309:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2b2cde and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eab2cde; op2val:0x80000000;
op3val:0x83000fff; valaddr_reg:x3; val_offset:48927*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48927*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16310:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2b2cde and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eab2cde; op2val:0x80000000;
op3val:0x83001fff; valaddr_reg:x3; val_offset:48930*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48930*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16311:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2b2cde and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eab2cde; op2val:0x80000000;
op3val:0x83003fff; valaddr_reg:x3; val_offset:48933*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48933*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16312:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2b2cde and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eab2cde; op2val:0x80000000;
op3val:0x83007fff; valaddr_reg:x3; val_offset:48936*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48936*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16313:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2b2cde and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eab2cde; op2val:0x80000000;
op3val:0x8300ffff; valaddr_reg:x3; val_offset:48939*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48939*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16314:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2b2cde and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eab2cde; op2val:0x80000000;
op3val:0x8301ffff; valaddr_reg:x3; val_offset:48942*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48942*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16315:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2b2cde and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eab2cde; op2val:0x80000000;
op3val:0x8303ffff; valaddr_reg:x3; val_offset:48945*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48945*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16316:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2b2cde and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eab2cde; op2val:0x80000000;
op3val:0x8307ffff; valaddr_reg:x3; val_offset:48948*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48948*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16317:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2b2cde and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eab2cde; op2val:0x80000000;
op3val:0x830fffff; valaddr_reg:x3; val_offset:48951*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48951*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16318:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2b2cde and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eab2cde; op2val:0x80000000;
op3val:0x831fffff; valaddr_reg:x3; val_offset:48954*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48954*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16319:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2b2cde and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eab2cde; op2val:0x80000000;
op3val:0x833fffff; valaddr_reg:x3; val_offset:48957*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48957*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16320:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2b2cde and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eab2cde; op2val:0x80000000;
op3val:0x83400000; valaddr_reg:x3; val_offset:48960*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48960*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16321:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2b2cde and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eab2cde; op2val:0x80000000;
op3val:0x83600000; valaddr_reg:x3; val_offset:48963*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48963*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16322:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2b2cde and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eab2cde; op2val:0x80000000;
op3val:0x83700000; valaddr_reg:x3; val_offset:48966*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48966*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16323:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2b2cde and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eab2cde; op2val:0x80000000;
op3val:0x83780000; valaddr_reg:x3; val_offset:48969*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48969*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16324:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2b2cde and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eab2cde; op2val:0x80000000;
op3val:0x837c0000; valaddr_reg:x3; val_offset:48972*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48972*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16325:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2b2cde and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eab2cde; op2val:0x80000000;
op3val:0x837e0000; valaddr_reg:x3; val_offset:48975*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48975*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16326:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2b2cde and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eab2cde; op2val:0x80000000;
op3val:0x837f0000; valaddr_reg:x3; val_offset:48978*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48978*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16327:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2b2cde and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eab2cde; op2val:0x80000000;
op3val:0x837f8000; valaddr_reg:x3; val_offset:48981*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48981*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16328:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2b2cde and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eab2cde; op2val:0x80000000;
op3val:0x837fc000; valaddr_reg:x3; val_offset:48984*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48984*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16329:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2b2cde and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eab2cde; op2val:0x80000000;
op3val:0x837fe000; valaddr_reg:x3; val_offset:48987*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48987*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16330:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2b2cde and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eab2cde; op2val:0x80000000;
op3val:0x837ff000; valaddr_reg:x3; val_offset:48990*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48990*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16331:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2b2cde and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eab2cde; op2val:0x80000000;
op3val:0x837ff800; valaddr_reg:x3; val_offset:48993*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48993*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16332:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2b2cde and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eab2cde; op2val:0x80000000;
op3val:0x837ffc00; valaddr_reg:x3; val_offset:48996*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48996*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16333:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2b2cde and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eab2cde; op2val:0x80000000;
op3val:0x837ffe00; valaddr_reg:x3; val_offset:48999*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48999*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16334:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2b2cde and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eab2cde; op2val:0x80000000;
op3val:0x837fff00; valaddr_reg:x3; val_offset:49002*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49002*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16335:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2b2cde and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eab2cde; op2val:0x80000000;
op3val:0x837fff80; valaddr_reg:x3; val_offset:49005*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49005*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16336:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2b2cde and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eab2cde; op2val:0x80000000;
op3val:0x837fffc0; valaddr_reg:x3; val_offset:49008*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49008*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16337:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2b2cde and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eab2cde; op2val:0x80000000;
op3val:0x837fffe0; valaddr_reg:x3; val_offset:49011*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49011*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16338:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2b2cde and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eab2cde; op2val:0x80000000;
op3val:0x837ffff0; valaddr_reg:x3; val_offset:49014*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49014*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16339:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2b2cde and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eab2cde; op2val:0x80000000;
op3val:0x837ffff8; valaddr_reg:x3; val_offset:49017*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49017*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16340:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2b2cde and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eab2cde; op2val:0x80000000;
op3val:0x837ffffc; valaddr_reg:x3; val_offset:49020*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49020*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16341:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2b2cde and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eab2cde; op2val:0x80000000;
op3val:0x837ffffe; valaddr_reg:x3; val_offset:49023*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49023*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16342:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2b2cde and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eab2cde; op2val:0x80000000;
op3val:0x837fffff; valaddr_reg:x3; val_offset:49026*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49026*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16343:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e1a0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e1b1c and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae1a0a; op2val:0x5e1b1c;
op3val:0x3f800001; valaddr_reg:x3; val_offset:49029*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49029*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16344:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e1a0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e1b1c and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae1a0a; op2val:0x5e1b1c;
op3val:0x3f800003; valaddr_reg:x3; val_offset:49032*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49032*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16345:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e1a0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e1b1c and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae1a0a; op2val:0x5e1b1c;
op3val:0x3f800007; valaddr_reg:x3; val_offset:49035*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49035*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16346:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e1a0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e1b1c and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae1a0a; op2val:0x5e1b1c;
op3val:0x3f999999; valaddr_reg:x3; val_offset:49038*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49038*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16347:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e1a0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e1b1c and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae1a0a; op2val:0x5e1b1c;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:49041*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49041*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16348:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e1a0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e1b1c and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae1a0a; op2val:0x5e1b1c;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:49044*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49044*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16349:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e1a0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e1b1c and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae1a0a; op2val:0x5e1b1c;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:49047*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49047*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16350:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e1a0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e1b1c and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae1a0a; op2val:0x5e1b1c;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:49050*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49050*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16351:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e1a0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e1b1c and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae1a0a; op2val:0x5e1b1c;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:49053*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49053*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16352:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e1a0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e1b1c and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae1a0a; op2val:0x5e1b1c;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:49056*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49056*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16353:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e1a0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e1b1c and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae1a0a; op2val:0x5e1b1c;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:49059*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49059*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16354:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e1a0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e1b1c and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae1a0a; op2val:0x5e1b1c;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:49062*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49062*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16355:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e1a0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e1b1c and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae1a0a; op2val:0x5e1b1c;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:49065*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49065*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16356:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e1a0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e1b1c and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae1a0a; op2val:0x5e1b1c;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:49068*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49068*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16357:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e1a0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e1b1c and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae1a0a; op2val:0x5e1b1c;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:49071*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49071*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16358:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e1a0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e1b1c and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae1a0a; op2val:0x5e1b1c;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:49074*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49074*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16359:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e1a0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e1b1c and fs3 == 0 and fe3 == 0x8e and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae1a0a; op2val:0x5e1b1c;
op3val:0x47000000; valaddr_reg:x3; val_offset:49077*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49077*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16360:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e1a0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e1b1c and fs3 == 0 and fe3 == 0x8e and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae1a0a; op2val:0x5e1b1c;
op3val:0x47000001; valaddr_reg:x3; val_offset:49080*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49080*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16361:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e1a0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e1b1c and fs3 == 0 and fe3 == 0x8e and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae1a0a; op2val:0x5e1b1c;
op3val:0x47000003; valaddr_reg:x3; val_offset:49083*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49083*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16362:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e1a0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e1b1c and fs3 == 0 and fe3 == 0x8e and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae1a0a; op2val:0x5e1b1c;
op3val:0x47000007; valaddr_reg:x3; val_offset:49086*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49086*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16363:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e1a0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e1b1c and fs3 == 0 and fe3 == 0x8e and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae1a0a; op2val:0x5e1b1c;
op3val:0x4700000f; valaddr_reg:x3; val_offset:49089*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49089*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16364:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e1a0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e1b1c and fs3 == 0 and fe3 == 0x8e and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae1a0a; op2val:0x5e1b1c;
op3val:0x4700001f; valaddr_reg:x3; val_offset:49092*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49092*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16365:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e1a0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e1b1c and fs3 == 0 and fe3 == 0x8e and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae1a0a; op2val:0x5e1b1c;
op3val:0x4700003f; valaddr_reg:x3; val_offset:49095*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49095*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16366:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e1a0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e1b1c and fs3 == 0 and fe3 == 0x8e and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae1a0a; op2val:0x5e1b1c;
op3val:0x4700007f; valaddr_reg:x3; val_offset:49098*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49098*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16367:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e1a0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e1b1c and fs3 == 0 and fe3 == 0x8e and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae1a0a; op2val:0x5e1b1c;
op3val:0x470000ff; valaddr_reg:x3; val_offset:49101*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49101*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16368:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e1a0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e1b1c and fs3 == 0 and fe3 == 0x8e and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae1a0a; op2val:0x5e1b1c;
op3val:0x470001ff; valaddr_reg:x3; val_offset:49104*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49104*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16369:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e1a0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e1b1c and fs3 == 0 and fe3 == 0x8e and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae1a0a; op2val:0x5e1b1c;
op3val:0x470003ff; valaddr_reg:x3; val_offset:49107*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49107*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16370:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e1a0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e1b1c and fs3 == 0 and fe3 == 0x8e and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae1a0a; op2val:0x5e1b1c;
op3val:0x470007ff; valaddr_reg:x3; val_offset:49110*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49110*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16371:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e1a0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e1b1c and fs3 == 0 and fe3 == 0x8e and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae1a0a; op2val:0x5e1b1c;
op3val:0x47000fff; valaddr_reg:x3; val_offset:49113*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49113*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16372:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e1a0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e1b1c and fs3 == 0 and fe3 == 0x8e and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae1a0a; op2val:0x5e1b1c;
op3val:0x47001fff; valaddr_reg:x3; val_offset:49116*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49116*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16373:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e1a0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e1b1c and fs3 == 0 and fe3 == 0x8e and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae1a0a; op2val:0x5e1b1c;
op3val:0x47003fff; valaddr_reg:x3; val_offset:49119*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49119*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16374:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e1a0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e1b1c and fs3 == 0 and fe3 == 0x8e and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae1a0a; op2val:0x5e1b1c;
op3val:0x47007fff; valaddr_reg:x3; val_offset:49122*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49122*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16375:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e1a0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e1b1c and fs3 == 0 and fe3 == 0x8e and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae1a0a; op2val:0x5e1b1c;
op3val:0x4700ffff; valaddr_reg:x3; val_offset:49125*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49125*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16376:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e1a0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e1b1c and fs3 == 0 and fe3 == 0x8e and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae1a0a; op2val:0x5e1b1c;
op3val:0x4701ffff; valaddr_reg:x3; val_offset:49128*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49128*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16377:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e1a0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e1b1c and fs3 == 0 and fe3 == 0x8e and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae1a0a; op2val:0x5e1b1c;
op3val:0x4703ffff; valaddr_reg:x3; val_offset:49131*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49131*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16378:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e1a0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e1b1c and fs3 == 0 and fe3 == 0x8e and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae1a0a; op2val:0x5e1b1c;
op3val:0x4707ffff; valaddr_reg:x3; val_offset:49134*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49134*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16379:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e1a0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e1b1c and fs3 == 0 and fe3 == 0x8e and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae1a0a; op2val:0x5e1b1c;
op3val:0x470fffff; valaddr_reg:x3; val_offset:49137*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49137*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16380:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e1a0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e1b1c and fs3 == 0 and fe3 == 0x8e and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae1a0a; op2val:0x5e1b1c;
op3val:0x471fffff; valaddr_reg:x3; val_offset:49140*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49140*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16381:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e1a0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e1b1c and fs3 == 0 and fe3 == 0x8e and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae1a0a; op2val:0x5e1b1c;
op3val:0x473fffff; valaddr_reg:x3; val_offset:49143*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49143*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16382:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e1a0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e1b1c and fs3 == 0 and fe3 == 0x8e and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae1a0a; op2val:0x5e1b1c;
op3val:0x47400000; valaddr_reg:x3; val_offset:49146*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49146*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16383:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e1a0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e1b1c and fs3 == 0 and fe3 == 0x8e and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae1a0a; op2val:0x5e1b1c;
op3val:0x47600000; valaddr_reg:x3; val_offset:49149*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49149*0 + 3*127*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2125124337,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(127926271,32,FLEN)
NAN_BOXED(2125124337,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(130023423,32,FLEN)
NAN_BOXED(2125124337,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(130023424,32,FLEN)
NAN_BOXED(2125124337,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(132120576,32,FLEN)
NAN_BOXED(2125124337,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(133169152,32,FLEN)
NAN_BOXED(2125124337,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(133693440,32,FLEN)
NAN_BOXED(2125124337,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(133955584,32,FLEN)
NAN_BOXED(2125124337,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134086656,32,FLEN)
NAN_BOXED(2125124337,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134152192,32,FLEN)
NAN_BOXED(2125124337,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134184960,32,FLEN)
NAN_BOXED(2125124337,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134201344,32,FLEN)
NAN_BOXED(2125124337,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134209536,32,FLEN)
NAN_BOXED(2125124337,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134213632,32,FLEN)
NAN_BOXED(2125124337,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134215680,32,FLEN)
NAN_BOXED(2125124337,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134216704,32,FLEN)
NAN_BOXED(2125124337,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134217216,32,FLEN)
NAN_BOXED(2125124337,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134217472,32,FLEN)
NAN_BOXED(2125124337,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134217600,32,FLEN)
NAN_BOXED(2125124337,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134217664,32,FLEN)
NAN_BOXED(2125124337,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134217696,32,FLEN)
NAN_BOXED(2125124337,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134217712,32,FLEN)
NAN_BOXED(2125124337,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134217720,32,FLEN)
NAN_BOXED(2125124337,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134217724,32,FLEN)
NAN_BOXED(2125124337,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134217726,32,FLEN)
NAN_BOXED(2125124337,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134217727,32,FLEN)
NAN_BOXED(2125147358,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2125147358,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483651,32,FLEN)
NAN_BOXED(2125147358,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483655,32,FLEN)
NAN_BOXED(2125147358,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149161369,32,FLEN)
NAN_BOXED(2125147358,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149880393,32,FLEN)
NAN_BOXED(2125147358,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2150839091,32,FLEN)
NAN_BOXED(2125147358,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151078765,32,FLEN)
NAN_BOXED(2125147358,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151398331,32,FLEN)
NAN_BOXED(2125147358,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151957572,32,FLEN)
NAN_BOXED(2125147358,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2152516812,32,FLEN)
NAN_BOXED(2125147358,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2153475510,32,FLEN)
NAN_BOXED(2125147358,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154194534,32,FLEN)
NAN_BOXED(2125147358,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154673883,32,FLEN)
NAN_BOXED(2125147358,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872248,32,FLEN)
NAN_BOXED(2125147358,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872252,32,FLEN)
NAN_BOXED(2125147358,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2125147358,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197815296,32,FLEN)
NAN_BOXED(2125147358,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197815297,32,FLEN)
NAN_BOXED(2125147358,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197815299,32,FLEN)
NAN_BOXED(2125147358,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197815303,32,FLEN)
NAN_BOXED(2125147358,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197815311,32,FLEN)
NAN_BOXED(2125147358,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197815327,32,FLEN)
NAN_BOXED(2125147358,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197815359,32,FLEN)
NAN_BOXED(2125147358,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197815423,32,FLEN)
NAN_BOXED(2125147358,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197815551,32,FLEN)
NAN_BOXED(2125147358,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197815807,32,FLEN)
NAN_BOXED(2125147358,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197816319,32,FLEN)
NAN_BOXED(2125147358,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197817343,32,FLEN)
NAN_BOXED(2125147358,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197819391,32,FLEN)
NAN_BOXED(2125147358,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197823487,32,FLEN)
NAN_BOXED(2125147358,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197831679,32,FLEN)
NAN_BOXED(2125147358,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197848063,32,FLEN)
NAN_BOXED(2125147358,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197880831,32,FLEN)
NAN_BOXED(2125147358,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197946367,32,FLEN)
NAN_BOXED(2125147358,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2198077439,32,FLEN)
NAN_BOXED(2125147358,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2198339583,32,FLEN)
NAN_BOXED(2125147358,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2198863871,32,FLEN)
NAN_BOXED(2125147358,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2199912447,32,FLEN)
NAN_BOXED(2125147358,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2202009599,32,FLEN)
NAN_BOXED(2125147358,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2202009600,32,FLEN)
NAN_BOXED(2125147358,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2204106752,32,FLEN)
NAN_BOXED(2125147358,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2205155328,32,FLEN)
NAN_BOXED(2125147358,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2205679616,32,FLEN)
NAN_BOXED(2125147358,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2205941760,32,FLEN)
NAN_BOXED(2125147358,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206072832,32,FLEN)
NAN_BOXED(2125147358,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206138368,32,FLEN)
NAN_BOXED(2125147358,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206171136,32,FLEN)
NAN_BOXED(2125147358,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206187520,32,FLEN)
NAN_BOXED(2125147358,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206195712,32,FLEN)
NAN_BOXED(2125147358,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206199808,32,FLEN)
NAN_BOXED(2125147358,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206201856,32,FLEN)
NAN_BOXED(2125147358,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206202880,32,FLEN)
NAN_BOXED(2125147358,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206203392,32,FLEN)
NAN_BOXED(2125147358,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206203648,32,FLEN)
NAN_BOXED(2125147358,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206203776,32,FLEN)
NAN_BOXED(2125147358,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206203840,32,FLEN)
NAN_BOXED(2125147358,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206203872,32,FLEN)
NAN_BOXED(2125147358,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206203888,32,FLEN)
NAN_BOXED(2125147358,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206203896,32,FLEN)
NAN_BOXED(2125147358,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206203900,32,FLEN)
NAN_BOXED(2125147358,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206203902,32,FLEN)
NAN_BOXED(2125147358,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206203903,32,FLEN)
NAN_BOXED(2125339146,32,FLEN)
NAN_BOXED(6167324,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2125339146,32,FLEN)
NAN_BOXED(6167324,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2125339146,32,FLEN)
NAN_BOXED(6167324,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2125339146,32,FLEN)
NAN_BOXED(6167324,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2125339146,32,FLEN)
NAN_BOXED(6167324,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2125339146,32,FLEN)
NAN_BOXED(6167324,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2125339146,32,FLEN)
NAN_BOXED(6167324,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2125339146,32,FLEN)
NAN_BOXED(6167324,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2125339146,32,FLEN)
NAN_BOXED(6167324,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2125339146,32,FLEN)
NAN_BOXED(6167324,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2125339146,32,FLEN)
NAN_BOXED(6167324,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2125339146,32,FLEN)
NAN_BOXED(6167324,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2125339146,32,FLEN)
NAN_BOXED(6167324,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2125339146,32,FLEN)
NAN_BOXED(6167324,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2125339146,32,FLEN)
NAN_BOXED(6167324,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2125339146,32,FLEN)
NAN_BOXED(6167324,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2125339146,32,FLEN)
NAN_BOXED(6167324,32,FLEN)
NAN_BOXED(1191182336,32,FLEN)
NAN_BOXED(2125339146,32,FLEN)
NAN_BOXED(6167324,32,FLEN)
NAN_BOXED(1191182337,32,FLEN)
NAN_BOXED(2125339146,32,FLEN)
NAN_BOXED(6167324,32,FLEN)
NAN_BOXED(1191182339,32,FLEN)
NAN_BOXED(2125339146,32,FLEN)
NAN_BOXED(6167324,32,FLEN)
NAN_BOXED(1191182343,32,FLEN)
NAN_BOXED(2125339146,32,FLEN)
NAN_BOXED(6167324,32,FLEN)
NAN_BOXED(1191182351,32,FLEN)
NAN_BOXED(2125339146,32,FLEN)
NAN_BOXED(6167324,32,FLEN)
NAN_BOXED(1191182367,32,FLEN)
NAN_BOXED(2125339146,32,FLEN)
NAN_BOXED(6167324,32,FLEN)
NAN_BOXED(1191182399,32,FLEN)
NAN_BOXED(2125339146,32,FLEN)
NAN_BOXED(6167324,32,FLEN)
NAN_BOXED(1191182463,32,FLEN)
NAN_BOXED(2125339146,32,FLEN)
NAN_BOXED(6167324,32,FLEN)
NAN_BOXED(1191182591,32,FLEN)
NAN_BOXED(2125339146,32,FLEN)
NAN_BOXED(6167324,32,FLEN)
NAN_BOXED(1191182847,32,FLEN)
NAN_BOXED(2125339146,32,FLEN)
NAN_BOXED(6167324,32,FLEN)
NAN_BOXED(1191183359,32,FLEN)
NAN_BOXED(2125339146,32,FLEN)
NAN_BOXED(6167324,32,FLEN)
NAN_BOXED(1191184383,32,FLEN)
NAN_BOXED(2125339146,32,FLEN)
NAN_BOXED(6167324,32,FLEN)
NAN_BOXED(1191186431,32,FLEN)
NAN_BOXED(2125339146,32,FLEN)
NAN_BOXED(6167324,32,FLEN)
NAN_BOXED(1191190527,32,FLEN)
NAN_BOXED(2125339146,32,FLEN)
NAN_BOXED(6167324,32,FLEN)
NAN_BOXED(1191198719,32,FLEN)
NAN_BOXED(2125339146,32,FLEN)
NAN_BOXED(6167324,32,FLEN)
NAN_BOXED(1191215103,32,FLEN)
NAN_BOXED(2125339146,32,FLEN)
NAN_BOXED(6167324,32,FLEN)
NAN_BOXED(1191247871,32,FLEN)
NAN_BOXED(2125339146,32,FLEN)
NAN_BOXED(6167324,32,FLEN)
NAN_BOXED(1191313407,32,FLEN)
NAN_BOXED(2125339146,32,FLEN)
NAN_BOXED(6167324,32,FLEN)
NAN_BOXED(1191444479,32,FLEN)
NAN_BOXED(2125339146,32,FLEN)
NAN_BOXED(6167324,32,FLEN)
NAN_BOXED(1191706623,32,FLEN)
NAN_BOXED(2125339146,32,FLEN)
NAN_BOXED(6167324,32,FLEN)
NAN_BOXED(1192230911,32,FLEN)
NAN_BOXED(2125339146,32,FLEN)
NAN_BOXED(6167324,32,FLEN)
NAN_BOXED(1193279487,32,FLEN)
NAN_BOXED(2125339146,32,FLEN)
NAN_BOXED(6167324,32,FLEN)
NAN_BOXED(1195376639,32,FLEN)
NAN_BOXED(2125339146,32,FLEN)
NAN_BOXED(6167324,32,FLEN)
NAN_BOXED(1195376640,32,FLEN)
NAN_BOXED(2125339146,32,FLEN)
NAN_BOXED(6167324,32,FLEN)
NAN_BOXED(1197473792,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
