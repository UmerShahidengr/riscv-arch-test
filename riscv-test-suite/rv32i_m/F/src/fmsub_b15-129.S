
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:07 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_16384:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e1a0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e1b1c and fs3 == 0 and fe3 == 0x8e and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae1a0a; op2val:0x5e1b1c;
op3val:0x47700000; valaddr_reg:x3; val_offset:49152*0 + 3*128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49152*0 + 3*128*FLEN/8, x4, x1, x2)

inst_16385:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e1a0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e1b1c and fs3 == 0 and fe3 == 0x8e and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae1a0a; op2val:0x5e1b1c;
op3val:0x47780000; valaddr_reg:x3; val_offset:49155*0 + 3*128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49155*0 + 3*128*FLEN/8, x4, x1, x2)

inst_16386:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e1a0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e1b1c and fs3 == 0 and fe3 == 0x8e and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae1a0a; op2val:0x5e1b1c;
op3val:0x477c0000; valaddr_reg:x3; val_offset:49158*0 + 3*128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49158*0 + 3*128*FLEN/8, x4, x1, x2)

inst_16387:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e1a0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e1b1c and fs3 == 0 and fe3 == 0x8e and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae1a0a; op2val:0x5e1b1c;
op3val:0x477e0000; valaddr_reg:x3; val_offset:49161*0 + 3*128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49161*0 + 3*128*FLEN/8, x4, x1, x2)

inst_16388:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e1a0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e1b1c and fs3 == 0 and fe3 == 0x8e and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae1a0a; op2val:0x5e1b1c;
op3val:0x477f0000; valaddr_reg:x3; val_offset:49164*0 + 3*128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49164*0 + 3*128*FLEN/8, x4, x1, x2)

inst_16389:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e1a0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e1b1c and fs3 == 0 and fe3 == 0x8e and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae1a0a; op2val:0x5e1b1c;
op3val:0x477f8000; valaddr_reg:x3; val_offset:49167*0 + 3*128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49167*0 + 3*128*FLEN/8, x4, x1, x2)

inst_16390:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e1a0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e1b1c and fs3 == 0 and fe3 == 0x8e and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae1a0a; op2val:0x5e1b1c;
op3val:0x477fc000; valaddr_reg:x3; val_offset:49170*0 + 3*128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49170*0 + 3*128*FLEN/8, x4, x1, x2)

inst_16391:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e1a0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e1b1c and fs3 == 0 and fe3 == 0x8e and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae1a0a; op2val:0x5e1b1c;
op3val:0x477fe000; valaddr_reg:x3; val_offset:49173*0 + 3*128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49173*0 + 3*128*FLEN/8, x4, x1, x2)

inst_16392:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e1a0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e1b1c and fs3 == 0 and fe3 == 0x8e and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae1a0a; op2val:0x5e1b1c;
op3val:0x477ff000; valaddr_reg:x3; val_offset:49176*0 + 3*128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49176*0 + 3*128*FLEN/8, x4, x1, x2)

inst_16393:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e1a0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e1b1c and fs3 == 0 and fe3 == 0x8e and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae1a0a; op2val:0x5e1b1c;
op3val:0x477ff800; valaddr_reg:x3; val_offset:49179*0 + 3*128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49179*0 + 3*128*FLEN/8, x4, x1, x2)

inst_16394:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e1a0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e1b1c and fs3 == 0 and fe3 == 0x8e and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae1a0a; op2val:0x5e1b1c;
op3val:0x477ffc00; valaddr_reg:x3; val_offset:49182*0 + 3*128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49182*0 + 3*128*FLEN/8, x4, x1, x2)

inst_16395:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e1a0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e1b1c and fs3 == 0 and fe3 == 0x8e and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae1a0a; op2val:0x5e1b1c;
op3val:0x477ffe00; valaddr_reg:x3; val_offset:49185*0 + 3*128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49185*0 + 3*128*FLEN/8, x4, x1, x2)

inst_16396:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e1a0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e1b1c and fs3 == 0 and fe3 == 0x8e and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae1a0a; op2val:0x5e1b1c;
op3val:0x477fff00; valaddr_reg:x3; val_offset:49188*0 + 3*128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49188*0 + 3*128*FLEN/8, x4, x1, x2)

inst_16397:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e1a0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e1b1c and fs3 == 0 and fe3 == 0x8e and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae1a0a; op2val:0x5e1b1c;
op3val:0x477fff80; valaddr_reg:x3; val_offset:49191*0 + 3*128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49191*0 + 3*128*FLEN/8, x4, x1, x2)

inst_16398:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e1a0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e1b1c and fs3 == 0 and fe3 == 0x8e and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae1a0a; op2val:0x5e1b1c;
op3val:0x477fffc0; valaddr_reg:x3; val_offset:49194*0 + 3*128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49194*0 + 3*128*FLEN/8, x4, x1, x2)

inst_16399:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e1a0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e1b1c and fs3 == 0 and fe3 == 0x8e and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae1a0a; op2val:0x5e1b1c;
op3val:0x477fffe0; valaddr_reg:x3; val_offset:49197*0 + 3*128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49197*0 + 3*128*FLEN/8, x4, x1, x2)

inst_16400:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e1a0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e1b1c and fs3 == 0 and fe3 == 0x8e and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae1a0a; op2val:0x5e1b1c;
op3val:0x477ffff0; valaddr_reg:x3; val_offset:49200*0 + 3*128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49200*0 + 3*128*FLEN/8, x4, x1, x2)

inst_16401:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e1a0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e1b1c and fs3 == 0 and fe3 == 0x8e and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae1a0a; op2val:0x5e1b1c;
op3val:0x477ffff8; valaddr_reg:x3; val_offset:49203*0 + 3*128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49203*0 + 3*128*FLEN/8, x4, x1, x2)

inst_16402:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e1a0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e1b1c and fs3 == 0 and fe3 == 0x8e and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae1a0a; op2val:0x5e1b1c;
op3val:0x477ffffc; valaddr_reg:x3; val_offset:49206*0 + 3*128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49206*0 + 3*128*FLEN/8, x4, x1, x2)

inst_16403:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e1a0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e1b1c and fs3 == 0 and fe3 == 0x8e and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae1a0a; op2val:0x5e1b1c;
op3val:0x477ffffe; valaddr_reg:x3; val_offset:49209*0 + 3*128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49209*0 + 3*128*FLEN/8, x4, x1, x2)

inst_16404:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e1a0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e1b1c and fs3 == 0 and fe3 == 0x8e and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae1a0a; op2val:0x5e1b1c;
op3val:0x477fffff; valaddr_reg:x3; val_offset:49212*0 + 3*128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49212*0 + 3*128*FLEN/8, x4, x1, x2)

inst_16405:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e4807 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5e0247 and fs3 == 1 and fe3 == 0x44 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae4807; op2val:0x805e0247;
op3val:0xa2000000; valaddr_reg:x3; val_offset:49215*0 + 3*128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49215*0 + 3*128*FLEN/8, x4, x1, x2)

inst_16406:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e4807 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5e0247 and fs3 == 1 and fe3 == 0x44 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae4807; op2val:0x805e0247;
op3val:0xa2000001; valaddr_reg:x3; val_offset:49218*0 + 3*128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49218*0 + 3*128*FLEN/8, x4, x1, x2)

inst_16407:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e4807 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5e0247 and fs3 == 1 and fe3 == 0x44 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae4807; op2val:0x805e0247;
op3val:0xa2000003; valaddr_reg:x3; val_offset:49221*0 + 3*128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49221*0 + 3*128*FLEN/8, x4, x1, x2)

inst_16408:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e4807 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5e0247 and fs3 == 1 and fe3 == 0x44 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae4807; op2val:0x805e0247;
op3val:0xa2000007; valaddr_reg:x3; val_offset:49224*0 + 3*128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49224*0 + 3*128*FLEN/8, x4, x1, x2)

inst_16409:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e4807 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5e0247 and fs3 == 1 and fe3 == 0x44 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae4807; op2val:0x805e0247;
op3val:0xa200000f; valaddr_reg:x3; val_offset:49227*0 + 3*128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49227*0 + 3*128*FLEN/8, x4, x1, x2)

inst_16410:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e4807 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5e0247 and fs3 == 1 and fe3 == 0x44 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae4807; op2val:0x805e0247;
op3val:0xa200001f; valaddr_reg:x3; val_offset:49230*0 + 3*128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49230*0 + 3*128*FLEN/8, x4, x1, x2)

inst_16411:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e4807 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5e0247 and fs3 == 1 and fe3 == 0x44 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae4807; op2val:0x805e0247;
op3val:0xa200003f; valaddr_reg:x3; val_offset:49233*0 + 3*128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49233*0 + 3*128*FLEN/8, x4, x1, x2)

inst_16412:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e4807 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5e0247 and fs3 == 1 and fe3 == 0x44 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae4807; op2val:0x805e0247;
op3val:0xa200007f; valaddr_reg:x3; val_offset:49236*0 + 3*128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49236*0 + 3*128*FLEN/8, x4, x1, x2)

inst_16413:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e4807 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5e0247 and fs3 == 1 and fe3 == 0x44 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae4807; op2val:0x805e0247;
op3val:0xa20000ff; valaddr_reg:x3; val_offset:49239*0 + 3*128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49239*0 + 3*128*FLEN/8, x4, x1, x2)

inst_16414:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e4807 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5e0247 and fs3 == 1 and fe3 == 0x44 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae4807; op2val:0x805e0247;
op3val:0xa20001ff; valaddr_reg:x3; val_offset:49242*0 + 3*128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49242*0 + 3*128*FLEN/8, x4, x1, x2)

inst_16415:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e4807 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5e0247 and fs3 == 1 and fe3 == 0x44 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae4807; op2val:0x805e0247;
op3val:0xa20003ff; valaddr_reg:x3; val_offset:49245*0 + 3*128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49245*0 + 3*128*FLEN/8, x4, x1, x2)

inst_16416:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e4807 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5e0247 and fs3 == 1 and fe3 == 0x44 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae4807; op2val:0x805e0247;
op3val:0xa20007ff; valaddr_reg:x3; val_offset:49248*0 + 3*128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49248*0 + 3*128*FLEN/8, x4, x1, x2)

inst_16417:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e4807 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5e0247 and fs3 == 1 and fe3 == 0x44 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae4807; op2val:0x805e0247;
op3val:0xa2000fff; valaddr_reg:x3; val_offset:49251*0 + 3*128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49251*0 + 3*128*FLEN/8, x4, x1, x2)

inst_16418:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e4807 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5e0247 and fs3 == 1 and fe3 == 0x44 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae4807; op2val:0x805e0247;
op3val:0xa2001fff; valaddr_reg:x3; val_offset:49254*0 + 3*128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49254*0 + 3*128*FLEN/8, x4, x1, x2)

inst_16419:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e4807 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5e0247 and fs3 == 1 and fe3 == 0x44 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae4807; op2val:0x805e0247;
op3val:0xa2003fff; valaddr_reg:x3; val_offset:49257*0 + 3*128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49257*0 + 3*128*FLEN/8, x4, x1, x2)

inst_16420:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e4807 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5e0247 and fs3 == 1 and fe3 == 0x44 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae4807; op2val:0x805e0247;
op3val:0xa2007fff; valaddr_reg:x3; val_offset:49260*0 + 3*128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49260*0 + 3*128*FLEN/8, x4, x1, x2)

inst_16421:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e4807 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5e0247 and fs3 == 1 and fe3 == 0x44 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae4807; op2val:0x805e0247;
op3val:0xa200ffff; valaddr_reg:x3; val_offset:49263*0 + 3*128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49263*0 + 3*128*FLEN/8, x4, x1, x2)

inst_16422:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e4807 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5e0247 and fs3 == 1 and fe3 == 0x44 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae4807; op2val:0x805e0247;
op3val:0xa201ffff; valaddr_reg:x3; val_offset:49266*0 + 3*128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49266*0 + 3*128*FLEN/8, x4, x1, x2)

inst_16423:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e4807 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5e0247 and fs3 == 1 and fe3 == 0x44 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae4807; op2val:0x805e0247;
op3val:0xa203ffff; valaddr_reg:x3; val_offset:49269*0 + 3*128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49269*0 + 3*128*FLEN/8, x4, x1, x2)

inst_16424:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e4807 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5e0247 and fs3 == 1 and fe3 == 0x44 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae4807; op2val:0x805e0247;
op3val:0xa207ffff; valaddr_reg:x3; val_offset:49272*0 + 3*128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49272*0 + 3*128*FLEN/8, x4, x1, x2)

inst_16425:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e4807 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5e0247 and fs3 == 1 and fe3 == 0x44 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae4807; op2val:0x805e0247;
op3val:0xa20fffff; valaddr_reg:x3; val_offset:49275*0 + 3*128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49275*0 + 3*128*FLEN/8, x4, x1, x2)

inst_16426:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e4807 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5e0247 and fs3 == 1 and fe3 == 0x44 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae4807; op2val:0x805e0247;
op3val:0xa21fffff; valaddr_reg:x3; val_offset:49278*0 + 3*128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49278*0 + 3*128*FLEN/8, x4, x1, x2)

inst_16427:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e4807 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5e0247 and fs3 == 1 and fe3 == 0x44 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae4807; op2val:0x805e0247;
op3val:0xa23fffff; valaddr_reg:x3; val_offset:49281*0 + 3*128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49281*0 + 3*128*FLEN/8, x4, x1, x2)

inst_16428:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e4807 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5e0247 and fs3 == 1 and fe3 == 0x44 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae4807; op2val:0x805e0247;
op3val:0xa2400000; valaddr_reg:x3; val_offset:49284*0 + 3*128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49284*0 + 3*128*FLEN/8, x4, x1, x2)

inst_16429:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e4807 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5e0247 and fs3 == 1 and fe3 == 0x44 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae4807; op2val:0x805e0247;
op3val:0xa2600000; valaddr_reg:x3; val_offset:49287*0 + 3*128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49287*0 + 3*128*FLEN/8, x4, x1, x2)

inst_16430:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e4807 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5e0247 and fs3 == 1 and fe3 == 0x44 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae4807; op2val:0x805e0247;
op3val:0xa2700000; valaddr_reg:x3; val_offset:49290*0 + 3*128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49290*0 + 3*128*FLEN/8, x4, x1, x2)

inst_16431:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e4807 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5e0247 and fs3 == 1 and fe3 == 0x44 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae4807; op2val:0x805e0247;
op3val:0xa2780000; valaddr_reg:x3; val_offset:49293*0 + 3*128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49293*0 + 3*128*FLEN/8, x4, x1, x2)

inst_16432:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e4807 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5e0247 and fs3 == 1 and fe3 == 0x44 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae4807; op2val:0x805e0247;
op3val:0xa27c0000; valaddr_reg:x3; val_offset:49296*0 + 3*128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49296*0 + 3*128*FLEN/8, x4, x1, x2)

inst_16433:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e4807 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5e0247 and fs3 == 1 and fe3 == 0x44 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae4807; op2val:0x805e0247;
op3val:0xa27e0000; valaddr_reg:x3; val_offset:49299*0 + 3*128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49299*0 + 3*128*FLEN/8, x4, x1, x2)

inst_16434:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e4807 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5e0247 and fs3 == 1 and fe3 == 0x44 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae4807; op2val:0x805e0247;
op3val:0xa27f0000; valaddr_reg:x3; val_offset:49302*0 + 3*128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49302*0 + 3*128*FLEN/8, x4, x1, x2)

inst_16435:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e4807 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5e0247 and fs3 == 1 and fe3 == 0x44 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae4807; op2val:0x805e0247;
op3val:0xa27f8000; valaddr_reg:x3; val_offset:49305*0 + 3*128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49305*0 + 3*128*FLEN/8, x4, x1, x2)

inst_16436:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e4807 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5e0247 and fs3 == 1 and fe3 == 0x44 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae4807; op2val:0x805e0247;
op3val:0xa27fc000; valaddr_reg:x3; val_offset:49308*0 + 3*128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49308*0 + 3*128*FLEN/8, x4, x1, x2)

inst_16437:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e4807 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5e0247 and fs3 == 1 and fe3 == 0x44 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae4807; op2val:0x805e0247;
op3val:0xa27fe000; valaddr_reg:x3; val_offset:49311*0 + 3*128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49311*0 + 3*128*FLEN/8, x4, x1, x2)

inst_16438:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e4807 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5e0247 and fs3 == 1 and fe3 == 0x44 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae4807; op2val:0x805e0247;
op3val:0xa27ff000; valaddr_reg:x3; val_offset:49314*0 + 3*128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49314*0 + 3*128*FLEN/8, x4, x1, x2)

inst_16439:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e4807 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5e0247 and fs3 == 1 and fe3 == 0x44 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae4807; op2val:0x805e0247;
op3val:0xa27ff800; valaddr_reg:x3; val_offset:49317*0 + 3*128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49317*0 + 3*128*FLEN/8, x4, x1, x2)

inst_16440:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e4807 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5e0247 and fs3 == 1 and fe3 == 0x44 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae4807; op2val:0x805e0247;
op3val:0xa27ffc00; valaddr_reg:x3; val_offset:49320*0 + 3*128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49320*0 + 3*128*FLEN/8, x4, x1, x2)

inst_16441:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e4807 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5e0247 and fs3 == 1 and fe3 == 0x44 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae4807; op2val:0x805e0247;
op3val:0xa27ffe00; valaddr_reg:x3; val_offset:49323*0 + 3*128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49323*0 + 3*128*FLEN/8, x4, x1, x2)

inst_16442:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e4807 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5e0247 and fs3 == 1 and fe3 == 0x44 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae4807; op2val:0x805e0247;
op3val:0xa27fff00; valaddr_reg:x3; val_offset:49326*0 + 3*128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49326*0 + 3*128*FLEN/8, x4, x1, x2)

inst_16443:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e4807 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5e0247 and fs3 == 1 and fe3 == 0x44 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae4807; op2val:0x805e0247;
op3val:0xa27fff80; valaddr_reg:x3; val_offset:49329*0 + 3*128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49329*0 + 3*128*FLEN/8, x4, x1, x2)

inst_16444:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e4807 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5e0247 and fs3 == 1 and fe3 == 0x44 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae4807; op2val:0x805e0247;
op3val:0xa27fffc0; valaddr_reg:x3; val_offset:49332*0 + 3*128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49332*0 + 3*128*FLEN/8, x4, x1, x2)

inst_16445:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e4807 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5e0247 and fs3 == 1 and fe3 == 0x44 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae4807; op2val:0x805e0247;
op3val:0xa27fffe0; valaddr_reg:x3; val_offset:49335*0 + 3*128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49335*0 + 3*128*FLEN/8, x4, x1, x2)

inst_16446:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e4807 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5e0247 and fs3 == 1 and fe3 == 0x44 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae4807; op2val:0x805e0247;
op3val:0xa27ffff0; valaddr_reg:x3; val_offset:49338*0 + 3*128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49338*0 + 3*128*FLEN/8, x4, x1, x2)

inst_16447:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e4807 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5e0247 and fs3 == 1 and fe3 == 0x44 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae4807; op2val:0x805e0247;
op3val:0xa27ffff8; valaddr_reg:x3; val_offset:49341*0 + 3*128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49341*0 + 3*128*FLEN/8, x4, x1, x2)

inst_16448:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e4807 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5e0247 and fs3 == 1 and fe3 == 0x44 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae4807; op2val:0x805e0247;
op3val:0xa27ffffc; valaddr_reg:x3; val_offset:49344*0 + 3*128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49344*0 + 3*128*FLEN/8, x4, x1, x2)

inst_16449:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e4807 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5e0247 and fs3 == 1 and fe3 == 0x44 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae4807; op2val:0x805e0247;
op3val:0xa27ffffe; valaddr_reg:x3; val_offset:49347*0 + 3*128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49347*0 + 3*128*FLEN/8, x4, x1, x2)

inst_16450:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e4807 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5e0247 and fs3 == 1 and fe3 == 0x44 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae4807; op2val:0x805e0247;
op3val:0xa27fffff; valaddr_reg:x3; val_offset:49350*0 + 3*128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49350*0 + 3*128*FLEN/8, x4, x1, x2)

inst_16451:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e4807 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5e0247 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae4807; op2val:0x805e0247;
op3val:0xbf800001; valaddr_reg:x3; val_offset:49353*0 + 3*128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49353*0 + 3*128*FLEN/8, x4, x1, x2)

inst_16452:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e4807 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5e0247 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae4807; op2val:0x805e0247;
op3val:0xbf800003; valaddr_reg:x3; val_offset:49356*0 + 3*128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49356*0 + 3*128*FLEN/8, x4, x1, x2)

inst_16453:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e4807 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5e0247 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae4807; op2val:0x805e0247;
op3val:0xbf800007; valaddr_reg:x3; val_offset:49359*0 + 3*128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49359*0 + 3*128*FLEN/8, x4, x1, x2)

inst_16454:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e4807 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5e0247 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae4807; op2val:0x805e0247;
op3val:0xbf999999; valaddr_reg:x3; val_offset:49362*0 + 3*128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49362*0 + 3*128*FLEN/8, x4, x1, x2)

inst_16455:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e4807 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5e0247 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae4807; op2val:0x805e0247;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:49365*0 + 3*128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49365*0 + 3*128*FLEN/8, x4, x1, x2)

inst_16456:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e4807 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5e0247 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae4807; op2val:0x805e0247;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:49368*0 + 3*128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49368*0 + 3*128*FLEN/8, x4, x1, x2)

inst_16457:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e4807 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5e0247 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae4807; op2val:0x805e0247;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:49371*0 + 3*128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49371*0 + 3*128*FLEN/8, x4, x1, x2)

inst_16458:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e4807 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5e0247 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae4807; op2val:0x805e0247;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:49374*0 + 3*128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49374*0 + 3*128*FLEN/8, x4, x1, x2)

inst_16459:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e4807 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5e0247 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae4807; op2val:0x805e0247;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:49377*0 + 3*128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49377*0 + 3*128*FLEN/8, x4, x1, x2)

inst_16460:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e4807 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5e0247 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae4807; op2val:0x805e0247;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:49380*0 + 3*128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49380*0 + 3*128*FLEN/8, x4, x1, x2)

inst_16461:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e4807 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5e0247 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae4807; op2val:0x805e0247;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:49383*0 + 3*128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49383*0 + 3*128*FLEN/8, x4, x1, x2)

inst_16462:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e4807 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5e0247 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae4807; op2val:0x805e0247;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:49386*0 + 3*128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49386*0 + 3*128*FLEN/8, x4, x1, x2)

inst_16463:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e4807 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5e0247 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae4807; op2val:0x805e0247;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:49389*0 + 3*128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49389*0 + 3*128*FLEN/8, x4, x1, x2)

inst_16464:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e4807 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5e0247 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae4807; op2val:0x805e0247;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:49392*0 + 3*128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49392*0 + 3*128*FLEN/8, x4, x1, x2)

inst_16465:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e4807 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5e0247 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae4807; op2val:0x805e0247;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:49395*0 + 3*128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49395*0 + 3*128*FLEN/8, x4, x1, x2)

inst_16466:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e4807 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5e0247 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae4807; op2val:0x805e0247;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:49398*0 + 3*128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49398*0 + 3*128*FLEN/8, x4, x1, x2)

inst_16467:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e8ea8 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3bb87b and fs3 == 0 and fe3 == 0xcf and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae8ea8; op2val:0x403bb87b;
op3val:0x67800000; valaddr_reg:x3; val_offset:49401*0 + 3*128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49401*0 + 3*128*FLEN/8, x4, x1, x2)

inst_16468:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e8ea8 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3bb87b and fs3 == 0 and fe3 == 0xcf and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae8ea8; op2val:0x403bb87b;
op3val:0x67800001; valaddr_reg:x3; val_offset:49404*0 + 3*128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49404*0 + 3*128*FLEN/8, x4, x1, x2)

inst_16469:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e8ea8 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3bb87b and fs3 == 0 and fe3 == 0xcf and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae8ea8; op2val:0x403bb87b;
op3val:0x67800003; valaddr_reg:x3; val_offset:49407*0 + 3*128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49407*0 + 3*128*FLEN/8, x4, x1, x2)

inst_16470:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e8ea8 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3bb87b and fs3 == 0 and fe3 == 0xcf and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae8ea8; op2val:0x403bb87b;
op3val:0x67800007; valaddr_reg:x3; val_offset:49410*0 + 3*128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49410*0 + 3*128*FLEN/8, x4, x1, x2)

inst_16471:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e8ea8 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3bb87b and fs3 == 0 and fe3 == 0xcf and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae8ea8; op2val:0x403bb87b;
op3val:0x6780000f; valaddr_reg:x3; val_offset:49413*0 + 3*128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49413*0 + 3*128*FLEN/8, x4, x1, x2)

inst_16472:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e8ea8 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3bb87b and fs3 == 0 and fe3 == 0xcf and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae8ea8; op2val:0x403bb87b;
op3val:0x6780001f; valaddr_reg:x3; val_offset:49416*0 + 3*128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49416*0 + 3*128*FLEN/8, x4, x1, x2)

inst_16473:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e8ea8 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3bb87b and fs3 == 0 and fe3 == 0xcf and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae8ea8; op2val:0x403bb87b;
op3val:0x6780003f; valaddr_reg:x3; val_offset:49419*0 + 3*128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49419*0 + 3*128*FLEN/8, x4, x1, x2)

inst_16474:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e8ea8 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3bb87b and fs3 == 0 and fe3 == 0xcf and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae8ea8; op2val:0x403bb87b;
op3val:0x6780007f; valaddr_reg:x3; val_offset:49422*0 + 3*128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49422*0 + 3*128*FLEN/8, x4, x1, x2)

inst_16475:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e8ea8 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3bb87b and fs3 == 0 and fe3 == 0xcf and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae8ea8; op2val:0x403bb87b;
op3val:0x678000ff; valaddr_reg:x3; val_offset:49425*0 + 3*128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49425*0 + 3*128*FLEN/8, x4, x1, x2)

inst_16476:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e8ea8 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3bb87b and fs3 == 0 and fe3 == 0xcf and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae8ea8; op2val:0x403bb87b;
op3val:0x678001ff; valaddr_reg:x3; val_offset:49428*0 + 3*128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49428*0 + 3*128*FLEN/8, x4, x1, x2)

inst_16477:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e8ea8 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3bb87b and fs3 == 0 and fe3 == 0xcf and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae8ea8; op2val:0x403bb87b;
op3val:0x678003ff; valaddr_reg:x3; val_offset:49431*0 + 3*128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49431*0 + 3*128*FLEN/8, x4, x1, x2)

inst_16478:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e8ea8 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3bb87b and fs3 == 0 and fe3 == 0xcf and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae8ea8; op2val:0x403bb87b;
op3val:0x678007ff; valaddr_reg:x3; val_offset:49434*0 + 3*128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49434*0 + 3*128*FLEN/8, x4, x1, x2)

inst_16479:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e8ea8 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3bb87b and fs3 == 0 and fe3 == 0xcf and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae8ea8; op2val:0x403bb87b;
op3val:0x67800fff; valaddr_reg:x3; val_offset:49437*0 + 3*128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49437*0 + 3*128*FLEN/8, x4, x1, x2)

inst_16480:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e8ea8 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3bb87b and fs3 == 0 and fe3 == 0xcf and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae8ea8; op2val:0x403bb87b;
op3val:0x67801fff; valaddr_reg:x3; val_offset:49440*0 + 3*128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49440*0 + 3*128*FLEN/8, x4, x1, x2)

inst_16481:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e8ea8 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3bb87b and fs3 == 0 and fe3 == 0xcf and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae8ea8; op2val:0x403bb87b;
op3val:0x67803fff; valaddr_reg:x3; val_offset:49443*0 + 3*128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49443*0 + 3*128*FLEN/8, x4, x1, x2)

inst_16482:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e8ea8 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3bb87b and fs3 == 0 and fe3 == 0xcf and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae8ea8; op2val:0x403bb87b;
op3val:0x67807fff; valaddr_reg:x3; val_offset:49446*0 + 3*128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49446*0 + 3*128*FLEN/8, x4, x1, x2)

inst_16483:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e8ea8 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3bb87b and fs3 == 0 and fe3 == 0xcf and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae8ea8; op2val:0x403bb87b;
op3val:0x6780ffff; valaddr_reg:x3; val_offset:49449*0 + 3*128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49449*0 + 3*128*FLEN/8, x4, x1, x2)

inst_16484:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e8ea8 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3bb87b and fs3 == 0 and fe3 == 0xcf and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae8ea8; op2val:0x403bb87b;
op3val:0x6781ffff; valaddr_reg:x3; val_offset:49452*0 + 3*128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49452*0 + 3*128*FLEN/8, x4, x1, x2)

inst_16485:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e8ea8 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3bb87b and fs3 == 0 and fe3 == 0xcf and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae8ea8; op2val:0x403bb87b;
op3val:0x6783ffff; valaddr_reg:x3; val_offset:49455*0 + 3*128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49455*0 + 3*128*FLEN/8, x4, x1, x2)

inst_16486:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e8ea8 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3bb87b and fs3 == 0 and fe3 == 0xcf and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae8ea8; op2val:0x403bb87b;
op3val:0x6787ffff; valaddr_reg:x3; val_offset:49458*0 + 3*128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49458*0 + 3*128*FLEN/8, x4, x1, x2)

inst_16487:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e8ea8 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3bb87b and fs3 == 0 and fe3 == 0xcf and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae8ea8; op2val:0x403bb87b;
op3val:0x678fffff; valaddr_reg:x3; val_offset:49461*0 + 3*128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49461*0 + 3*128*FLEN/8, x4, x1, x2)

inst_16488:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e8ea8 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3bb87b and fs3 == 0 and fe3 == 0xcf and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae8ea8; op2val:0x403bb87b;
op3val:0x679fffff; valaddr_reg:x3; val_offset:49464*0 + 3*128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49464*0 + 3*128*FLEN/8, x4, x1, x2)

inst_16489:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e8ea8 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3bb87b and fs3 == 0 and fe3 == 0xcf and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae8ea8; op2val:0x403bb87b;
op3val:0x67bfffff; valaddr_reg:x3; val_offset:49467*0 + 3*128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49467*0 + 3*128*FLEN/8, x4, x1, x2)

inst_16490:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e8ea8 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3bb87b and fs3 == 0 and fe3 == 0xcf and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae8ea8; op2val:0x403bb87b;
op3val:0x67c00000; valaddr_reg:x3; val_offset:49470*0 + 3*128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49470*0 + 3*128*FLEN/8, x4, x1, x2)

inst_16491:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e8ea8 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3bb87b and fs3 == 0 and fe3 == 0xcf and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae8ea8; op2val:0x403bb87b;
op3val:0x67e00000; valaddr_reg:x3; val_offset:49473*0 + 3*128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49473*0 + 3*128*FLEN/8, x4, x1, x2)

inst_16492:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e8ea8 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3bb87b and fs3 == 0 and fe3 == 0xcf and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae8ea8; op2val:0x403bb87b;
op3val:0x67f00000; valaddr_reg:x3; val_offset:49476*0 + 3*128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49476*0 + 3*128*FLEN/8, x4, x1, x2)

inst_16493:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e8ea8 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3bb87b and fs3 == 0 and fe3 == 0xcf and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae8ea8; op2val:0x403bb87b;
op3val:0x67f80000; valaddr_reg:x3; val_offset:49479*0 + 3*128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49479*0 + 3*128*FLEN/8, x4, x1, x2)

inst_16494:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e8ea8 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3bb87b and fs3 == 0 and fe3 == 0xcf and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae8ea8; op2val:0x403bb87b;
op3val:0x67fc0000; valaddr_reg:x3; val_offset:49482*0 + 3*128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49482*0 + 3*128*FLEN/8, x4, x1, x2)

inst_16495:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e8ea8 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3bb87b and fs3 == 0 and fe3 == 0xcf and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae8ea8; op2val:0x403bb87b;
op3val:0x67fe0000; valaddr_reg:x3; val_offset:49485*0 + 3*128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49485*0 + 3*128*FLEN/8, x4, x1, x2)

inst_16496:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e8ea8 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3bb87b and fs3 == 0 and fe3 == 0xcf and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae8ea8; op2val:0x403bb87b;
op3val:0x67ff0000; valaddr_reg:x3; val_offset:49488*0 + 3*128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49488*0 + 3*128*FLEN/8, x4, x1, x2)

inst_16497:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e8ea8 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3bb87b and fs3 == 0 and fe3 == 0xcf and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae8ea8; op2val:0x403bb87b;
op3val:0x67ff8000; valaddr_reg:x3; val_offset:49491*0 + 3*128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49491*0 + 3*128*FLEN/8, x4, x1, x2)

inst_16498:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e8ea8 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3bb87b and fs3 == 0 and fe3 == 0xcf and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae8ea8; op2val:0x403bb87b;
op3val:0x67ffc000; valaddr_reg:x3; val_offset:49494*0 + 3*128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49494*0 + 3*128*FLEN/8, x4, x1, x2)

inst_16499:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e8ea8 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3bb87b and fs3 == 0 and fe3 == 0xcf and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae8ea8; op2val:0x403bb87b;
op3val:0x67ffe000; valaddr_reg:x3; val_offset:49497*0 + 3*128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49497*0 + 3*128*FLEN/8, x4, x1, x2)

inst_16500:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e8ea8 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3bb87b and fs3 == 0 and fe3 == 0xcf and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae8ea8; op2val:0x403bb87b;
op3val:0x67fff000; valaddr_reg:x3; val_offset:49500*0 + 3*128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49500*0 + 3*128*FLEN/8, x4, x1, x2)

inst_16501:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e8ea8 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3bb87b and fs3 == 0 and fe3 == 0xcf and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae8ea8; op2val:0x403bb87b;
op3val:0x67fff800; valaddr_reg:x3; val_offset:49503*0 + 3*128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49503*0 + 3*128*FLEN/8, x4, x1, x2)

inst_16502:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e8ea8 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3bb87b and fs3 == 0 and fe3 == 0xcf and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae8ea8; op2val:0x403bb87b;
op3val:0x67fffc00; valaddr_reg:x3; val_offset:49506*0 + 3*128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49506*0 + 3*128*FLEN/8, x4, x1, x2)

inst_16503:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e8ea8 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3bb87b and fs3 == 0 and fe3 == 0xcf and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae8ea8; op2val:0x403bb87b;
op3val:0x67fffe00; valaddr_reg:x3; val_offset:49509*0 + 3*128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49509*0 + 3*128*FLEN/8, x4, x1, x2)

inst_16504:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e8ea8 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3bb87b and fs3 == 0 and fe3 == 0xcf and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae8ea8; op2val:0x403bb87b;
op3val:0x67ffff00; valaddr_reg:x3; val_offset:49512*0 + 3*128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49512*0 + 3*128*FLEN/8, x4, x1, x2)

inst_16505:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e8ea8 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3bb87b and fs3 == 0 and fe3 == 0xcf and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae8ea8; op2val:0x403bb87b;
op3val:0x67ffff80; valaddr_reg:x3; val_offset:49515*0 + 3*128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49515*0 + 3*128*FLEN/8, x4, x1, x2)

inst_16506:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e8ea8 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3bb87b and fs3 == 0 and fe3 == 0xcf and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae8ea8; op2val:0x403bb87b;
op3val:0x67ffffc0; valaddr_reg:x3; val_offset:49518*0 + 3*128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49518*0 + 3*128*FLEN/8, x4, x1, x2)

inst_16507:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e8ea8 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3bb87b and fs3 == 0 and fe3 == 0xcf and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae8ea8; op2val:0x403bb87b;
op3val:0x67ffffe0; valaddr_reg:x3; val_offset:49521*0 + 3*128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49521*0 + 3*128*FLEN/8, x4, x1, x2)

inst_16508:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e8ea8 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3bb87b and fs3 == 0 and fe3 == 0xcf and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae8ea8; op2val:0x403bb87b;
op3val:0x67fffff0; valaddr_reg:x3; val_offset:49524*0 + 3*128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49524*0 + 3*128*FLEN/8, x4, x1, x2)

inst_16509:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e8ea8 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3bb87b and fs3 == 0 and fe3 == 0xcf and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae8ea8; op2val:0x403bb87b;
op3val:0x67fffff8; valaddr_reg:x3; val_offset:49527*0 + 3*128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49527*0 + 3*128*FLEN/8, x4, x1, x2)

inst_16510:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e8ea8 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3bb87b and fs3 == 0 and fe3 == 0xcf and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae8ea8; op2val:0x403bb87b;
op3val:0x67fffffc; valaddr_reg:x3; val_offset:49530*0 + 3*128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49530*0 + 3*128*FLEN/8, x4, x1, x2)

inst_16511:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e8ea8 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3bb87b and fs3 == 0 and fe3 == 0xcf and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae8ea8; op2val:0x403bb87b;
op3val:0x67fffffe; valaddr_reg:x3; val_offset:49533*0 + 3*128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49533*0 + 3*128*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2125339146,32,FLEN)
NAN_BOXED(6167324,32,FLEN)
NAN_BOXED(1198522368,32,FLEN)
NAN_BOXED(2125339146,32,FLEN)
NAN_BOXED(6167324,32,FLEN)
NAN_BOXED(1199046656,32,FLEN)
NAN_BOXED(2125339146,32,FLEN)
NAN_BOXED(6167324,32,FLEN)
NAN_BOXED(1199308800,32,FLEN)
NAN_BOXED(2125339146,32,FLEN)
NAN_BOXED(6167324,32,FLEN)
NAN_BOXED(1199439872,32,FLEN)
NAN_BOXED(2125339146,32,FLEN)
NAN_BOXED(6167324,32,FLEN)
NAN_BOXED(1199505408,32,FLEN)
NAN_BOXED(2125339146,32,FLEN)
NAN_BOXED(6167324,32,FLEN)
NAN_BOXED(1199538176,32,FLEN)
NAN_BOXED(2125339146,32,FLEN)
NAN_BOXED(6167324,32,FLEN)
NAN_BOXED(1199554560,32,FLEN)
NAN_BOXED(2125339146,32,FLEN)
NAN_BOXED(6167324,32,FLEN)
NAN_BOXED(1199562752,32,FLEN)
NAN_BOXED(2125339146,32,FLEN)
NAN_BOXED(6167324,32,FLEN)
NAN_BOXED(1199566848,32,FLEN)
NAN_BOXED(2125339146,32,FLEN)
NAN_BOXED(6167324,32,FLEN)
NAN_BOXED(1199568896,32,FLEN)
NAN_BOXED(2125339146,32,FLEN)
NAN_BOXED(6167324,32,FLEN)
NAN_BOXED(1199569920,32,FLEN)
NAN_BOXED(2125339146,32,FLEN)
NAN_BOXED(6167324,32,FLEN)
NAN_BOXED(1199570432,32,FLEN)
NAN_BOXED(2125339146,32,FLEN)
NAN_BOXED(6167324,32,FLEN)
NAN_BOXED(1199570688,32,FLEN)
NAN_BOXED(2125339146,32,FLEN)
NAN_BOXED(6167324,32,FLEN)
NAN_BOXED(1199570816,32,FLEN)
NAN_BOXED(2125339146,32,FLEN)
NAN_BOXED(6167324,32,FLEN)
NAN_BOXED(1199570880,32,FLEN)
NAN_BOXED(2125339146,32,FLEN)
NAN_BOXED(6167324,32,FLEN)
NAN_BOXED(1199570912,32,FLEN)
NAN_BOXED(2125339146,32,FLEN)
NAN_BOXED(6167324,32,FLEN)
NAN_BOXED(1199570928,32,FLEN)
NAN_BOXED(2125339146,32,FLEN)
NAN_BOXED(6167324,32,FLEN)
NAN_BOXED(1199570936,32,FLEN)
NAN_BOXED(2125339146,32,FLEN)
NAN_BOXED(6167324,32,FLEN)
NAN_BOXED(1199570940,32,FLEN)
NAN_BOXED(2125339146,32,FLEN)
NAN_BOXED(6167324,32,FLEN)
NAN_BOXED(1199570942,32,FLEN)
NAN_BOXED(2125339146,32,FLEN)
NAN_BOXED(6167324,32,FLEN)
NAN_BOXED(1199570943,32,FLEN)
NAN_BOXED(2125350919,32,FLEN)
NAN_BOXED(2153644615,32,FLEN)
NAN_BOXED(2717908992,32,FLEN)
NAN_BOXED(2125350919,32,FLEN)
NAN_BOXED(2153644615,32,FLEN)
NAN_BOXED(2717908993,32,FLEN)
NAN_BOXED(2125350919,32,FLEN)
NAN_BOXED(2153644615,32,FLEN)
NAN_BOXED(2717908995,32,FLEN)
NAN_BOXED(2125350919,32,FLEN)
NAN_BOXED(2153644615,32,FLEN)
NAN_BOXED(2717908999,32,FLEN)
NAN_BOXED(2125350919,32,FLEN)
NAN_BOXED(2153644615,32,FLEN)
NAN_BOXED(2717909007,32,FLEN)
NAN_BOXED(2125350919,32,FLEN)
NAN_BOXED(2153644615,32,FLEN)
NAN_BOXED(2717909023,32,FLEN)
NAN_BOXED(2125350919,32,FLEN)
NAN_BOXED(2153644615,32,FLEN)
NAN_BOXED(2717909055,32,FLEN)
NAN_BOXED(2125350919,32,FLEN)
NAN_BOXED(2153644615,32,FLEN)
NAN_BOXED(2717909119,32,FLEN)
NAN_BOXED(2125350919,32,FLEN)
NAN_BOXED(2153644615,32,FLEN)
NAN_BOXED(2717909247,32,FLEN)
NAN_BOXED(2125350919,32,FLEN)
NAN_BOXED(2153644615,32,FLEN)
NAN_BOXED(2717909503,32,FLEN)
NAN_BOXED(2125350919,32,FLEN)
NAN_BOXED(2153644615,32,FLEN)
NAN_BOXED(2717910015,32,FLEN)
NAN_BOXED(2125350919,32,FLEN)
NAN_BOXED(2153644615,32,FLEN)
NAN_BOXED(2717911039,32,FLEN)
NAN_BOXED(2125350919,32,FLEN)
NAN_BOXED(2153644615,32,FLEN)
NAN_BOXED(2717913087,32,FLEN)
NAN_BOXED(2125350919,32,FLEN)
NAN_BOXED(2153644615,32,FLEN)
NAN_BOXED(2717917183,32,FLEN)
NAN_BOXED(2125350919,32,FLEN)
NAN_BOXED(2153644615,32,FLEN)
NAN_BOXED(2717925375,32,FLEN)
NAN_BOXED(2125350919,32,FLEN)
NAN_BOXED(2153644615,32,FLEN)
NAN_BOXED(2717941759,32,FLEN)
NAN_BOXED(2125350919,32,FLEN)
NAN_BOXED(2153644615,32,FLEN)
NAN_BOXED(2717974527,32,FLEN)
NAN_BOXED(2125350919,32,FLEN)
NAN_BOXED(2153644615,32,FLEN)
NAN_BOXED(2718040063,32,FLEN)
NAN_BOXED(2125350919,32,FLEN)
NAN_BOXED(2153644615,32,FLEN)
NAN_BOXED(2718171135,32,FLEN)
NAN_BOXED(2125350919,32,FLEN)
NAN_BOXED(2153644615,32,FLEN)
NAN_BOXED(2718433279,32,FLEN)
NAN_BOXED(2125350919,32,FLEN)
NAN_BOXED(2153644615,32,FLEN)
NAN_BOXED(2718957567,32,FLEN)
NAN_BOXED(2125350919,32,FLEN)
NAN_BOXED(2153644615,32,FLEN)
NAN_BOXED(2720006143,32,FLEN)
NAN_BOXED(2125350919,32,FLEN)
NAN_BOXED(2153644615,32,FLEN)
NAN_BOXED(2722103295,32,FLEN)
NAN_BOXED(2125350919,32,FLEN)
NAN_BOXED(2153644615,32,FLEN)
NAN_BOXED(2722103296,32,FLEN)
NAN_BOXED(2125350919,32,FLEN)
NAN_BOXED(2153644615,32,FLEN)
NAN_BOXED(2724200448,32,FLEN)
NAN_BOXED(2125350919,32,FLEN)
NAN_BOXED(2153644615,32,FLEN)
NAN_BOXED(2725249024,32,FLEN)
NAN_BOXED(2125350919,32,FLEN)
NAN_BOXED(2153644615,32,FLEN)
NAN_BOXED(2725773312,32,FLEN)
NAN_BOXED(2125350919,32,FLEN)
NAN_BOXED(2153644615,32,FLEN)
NAN_BOXED(2726035456,32,FLEN)
NAN_BOXED(2125350919,32,FLEN)
NAN_BOXED(2153644615,32,FLEN)
NAN_BOXED(2726166528,32,FLEN)
NAN_BOXED(2125350919,32,FLEN)
NAN_BOXED(2153644615,32,FLEN)
NAN_BOXED(2726232064,32,FLEN)
NAN_BOXED(2125350919,32,FLEN)
NAN_BOXED(2153644615,32,FLEN)
NAN_BOXED(2726264832,32,FLEN)
NAN_BOXED(2125350919,32,FLEN)
NAN_BOXED(2153644615,32,FLEN)
NAN_BOXED(2726281216,32,FLEN)
NAN_BOXED(2125350919,32,FLEN)
NAN_BOXED(2153644615,32,FLEN)
NAN_BOXED(2726289408,32,FLEN)
NAN_BOXED(2125350919,32,FLEN)
NAN_BOXED(2153644615,32,FLEN)
NAN_BOXED(2726293504,32,FLEN)
NAN_BOXED(2125350919,32,FLEN)
NAN_BOXED(2153644615,32,FLEN)
NAN_BOXED(2726295552,32,FLEN)
NAN_BOXED(2125350919,32,FLEN)
NAN_BOXED(2153644615,32,FLEN)
NAN_BOXED(2726296576,32,FLEN)
NAN_BOXED(2125350919,32,FLEN)
NAN_BOXED(2153644615,32,FLEN)
NAN_BOXED(2726297088,32,FLEN)
NAN_BOXED(2125350919,32,FLEN)
NAN_BOXED(2153644615,32,FLEN)
NAN_BOXED(2726297344,32,FLEN)
NAN_BOXED(2125350919,32,FLEN)
NAN_BOXED(2153644615,32,FLEN)
NAN_BOXED(2726297472,32,FLEN)
NAN_BOXED(2125350919,32,FLEN)
NAN_BOXED(2153644615,32,FLEN)
NAN_BOXED(2726297536,32,FLEN)
NAN_BOXED(2125350919,32,FLEN)
NAN_BOXED(2153644615,32,FLEN)
NAN_BOXED(2726297568,32,FLEN)
NAN_BOXED(2125350919,32,FLEN)
NAN_BOXED(2153644615,32,FLEN)
NAN_BOXED(2726297584,32,FLEN)
NAN_BOXED(2125350919,32,FLEN)
NAN_BOXED(2153644615,32,FLEN)
NAN_BOXED(2726297592,32,FLEN)
NAN_BOXED(2125350919,32,FLEN)
NAN_BOXED(2153644615,32,FLEN)
NAN_BOXED(2726297596,32,FLEN)
NAN_BOXED(2125350919,32,FLEN)
NAN_BOXED(2153644615,32,FLEN)
NAN_BOXED(2726297598,32,FLEN)
NAN_BOXED(2125350919,32,FLEN)
NAN_BOXED(2153644615,32,FLEN)
NAN_BOXED(2726297599,32,FLEN)
NAN_BOXED(2125350919,32,FLEN)
NAN_BOXED(2153644615,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2125350919,32,FLEN)
NAN_BOXED(2153644615,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2125350919,32,FLEN)
NAN_BOXED(2153644615,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
NAN_BOXED(2125350919,32,FLEN)
NAN_BOXED(2153644615,32,FLEN)
NAN_BOXED(3214514585,32,FLEN)
NAN_BOXED(2125350919,32,FLEN)
NAN_BOXED(2153644615,32,FLEN)
NAN_BOXED(3215233609,32,FLEN)
NAN_BOXED(2125350919,32,FLEN)
NAN_BOXED(2153644615,32,FLEN)
NAN_BOXED(3216192307,32,FLEN)
NAN_BOXED(2125350919,32,FLEN)
NAN_BOXED(2153644615,32,FLEN)
NAN_BOXED(3216431981,32,FLEN)
NAN_BOXED(2125350919,32,FLEN)
NAN_BOXED(2153644615,32,FLEN)
NAN_BOXED(3216751547,32,FLEN)
NAN_BOXED(2125350919,32,FLEN)
NAN_BOXED(2153644615,32,FLEN)
NAN_BOXED(3217310788,32,FLEN)
NAN_BOXED(2125350919,32,FLEN)
NAN_BOXED(2153644615,32,FLEN)
NAN_BOXED(3217870028,32,FLEN)
NAN_BOXED(2125350919,32,FLEN)
NAN_BOXED(2153644615,32,FLEN)
NAN_BOXED(3218828726,32,FLEN)
NAN_BOXED(2125350919,32,FLEN)
NAN_BOXED(2153644615,32,FLEN)
NAN_BOXED(3219547750,32,FLEN)
NAN_BOXED(2125350919,32,FLEN)
NAN_BOXED(2153644615,32,FLEN)
NAN_BOXED(3220027099,32,FLEN)
NAN_BOXED(2125350919,32,FLEN)
NAN_BOXED(2153644615,32,FLEN)
NAN_BOXED(3221225464,32,FLEN)
NAN_BOXED(2125350919,32,FLEN)
NAN_BOXED(2153644615,32,FLEN)
NAN_BOXED(3221225468,32,FLEN)
NAN_BOXED(2125350919,32,FLEN)
NAN_BOXED(2153644615,32,FLEN)
NAN_BOXED(3221225470,32,FLEN)
NAN_BOXED(2125369000,32,FLEN)
NAN_BOXED(1077655675,32,FLEN)
NAN_BOXED(1736441856,32,FLEN)
NAN_BOXED(2125369000,32,FLEN)
NAN_BOXED(1077655675,32,FLEN)
NAN_BOXED(1736441857,32,FLEN)
NAN_BOXED(2125369000,32,FLEN)
NAN_BOXED(1077655675,32,FLEN)
NAN_BOXED(1736441859,32,FLEN)
NAN_BOXED(2125369000,32,FLEN)
NAN_BOXED(1077655675,32,FLEN)
NAN_BOXED(1736441863,32,FLEN)
NAN_BOXED(2125369000,32,FLEN)
NAN_BOXED(1077655675,32,FLEN)
NAN_BOXED(1736441871,32,FLEN)
NAN_BOXED(2125369000,32,FLEN)
NAN_BOXED(1077655675,32,FLEN)
NAN_BOXED(1736441887,32,FLEN)
NAN_BOXED(2125369000,32,FLEN)
NAN_BOXED(1077655675,32,FLEN)
NAN_BOXED(1736441919,32,FLEN)
NAN_BOXED(2125369000,32,FLEN)
NAN_BOXED(1077655675,32,FLEN)
NAN_BOXED(1736441983,32,FLEN)
NAN_BOXED(2125369000,32,FLEN)
NAN_BOXED(1077655675,32,FLEN)
NAN_BOXED(1736442111,32,FLEN)
NAN_BOXED(2125369000,32,FLEN)
NAN_BOXED(1077655675,32,FLEN)
NAN_BOXED(1736442367,32,FLEN)
NAN_BOXED(2125369000,32,FLEN)
NAN_BOXED(1077655675,32,FLEN)
NAN_BOXED(1736442879,32,FLEN)
NAN_BOXED(2125369000,32,FLEN)
NAN_BOXED(1077655675,32,FLEN)
NAN_BOXED(1736443903,32,FLEN)
NAN_BOXED(2125369000,32,FLEN)
NAN_BOXED(1077655675,32,FLEN)
NAN_BOXED(1736445951,32,FLEN)
NAN_BOXED(2125369000,32,FLEN)
NAN_BOXED(1077655675,32,FLEN)
NAN_BOXED(1736450047,32,FLEN)
NAN_BOXED(2125369000,32,FLEN)
NAN_BOXED(1077655675,32,FLEN)
NAN_BOXED(1736458239,32,FLEN)
NAN_BOXED(2125369000,32,FLEN)
NAN_BOXED(1077655675,32,FLEN)
NAN_BOXED(1736474623,32,FLEN)
NAN_BOXED(2125369000,32,FLEN)
NAN_BOXED(1077655675,32,FLEN)
NAN_BOXED(1736507391,32,FLEN)
NAN_BOXED(2125369000,32,FLEN)
NAN_BOXED(1077655675,32,FLEN)
NAN_BOXED(1736572927,32,FLEN)
NAN_BOXED(2125369000,32,FLEN)
NAN_BOXED(1077655675,32,FLEN)
NAN_BOXED(1736703999,32,FLEN)
NAN_BOXED(2125369000,32,FLEN)
NAN_BOXED(1077655675,32,FLEN)
NAN_BOXED(1736966143,32,FLEN)
NAN_BOXED(2125369000,32,FLEN)
NAN_BOXED(1077655675,32,FLEN)
NAN_BOXED(1737490431,32,FLEN)
NAN_BOXED(2125369000,32,FLEN)
NAN_BOXED(1077655675,32,FLEN)
NAN_BOXED(1738539007,32,FLEN)
NAN_BOXED(2125369000,32,FLEN)
NAN_BOXED(1077655675,32,FLEN)
NAN_BOXED(1740636159,32,FLEN)
NAN_BOXED(2125369000,32,FLEN)
NAN_BOXED(1077655675,32,FLEN)
NAN_BOXED(1740636160,32,FLEN)
NAN_BOXED(2125369000,32,FLEN)
NAN_BOXED(1077655675,32,FLEN)
NAN_BOXED(1742733312,32,FLEN)
NAN_BOXED(2125369000,32,FLEN)
NAN_BOXED(1077655675,32,FLEN)
NAN_BOXED(1743781888,32,FLEN)
NAN_BOXED(2125369000,32,FLEN)
NAN_BOXED(1077655675,32,FLEN)
NAN_BOXED(1744306176,32,FLEN)
NAN_BOXED(2125369000,32,FLEN)
NAN_BOXED(1077655675,32,FLEN)
NAN_BOXED(1744568320,32,FLEN)
NAN_BOXED(2125369000,32,FLEN)
NAN_BOXED(1077655675,32,FLEN)
NAN_BOXED(1744699392,32,FLEN)
NAN_BOXED(2125369000,32,FLEN)
NAN_BOXED(1077655675,32,FLEN)
NAN_BOXED(1744764928,32,FLEN)
NAN_BOXED(2125369000,32,FLEN)
NAN_BOXED(1077655675,32,FLEN)
NAN_BOXED(1744797696,32,FLEN)
NAN_BOXED(2125369000,32,FLEN)
NAN_BOXED(1077655675,32,FLEN)
NAN_BOXED(1744814080,32,FLEN)
NAN_BOXED(2125369000,32,FLEN)
NAN_BOXED(1077655675,32,FLEN)
NAN_BOXED(1744822272,32,FLEN)
NAN_BOXED(2125369000,32,FLEN)
NAN_BOXED(1077655675,32,FLEN)
NAN_BOXED(1744826368,32,FLEN)
NAN_BOXED(2125369000,32,FLEN)
NAN_BOXED(1077655675,32,FLEN)
NAN_BOXED(1744828416,32,FLEN)
NAN_BOXED(2125369000,32,FLEN)
NAN_BOXED(1077655675,32,FLEN)
NAN_BOXED(1744829440,32,FLEN)
NAN_BOXED(2125369000,32,FLEN)
NAN_BOXED(1077655675,32,FLEN)
NAN_BOXED(1744829952,32,FLEN)
NAN_BOXED(2125369000,32,FLEN)
NAN_BOXED(1077655675,32,FLEN)
NAN_BOXED(1744830208,32,FLEN)
NAN_BOXED(2125369000,32,FLEN)
NAN_BOXED(1077655675,32,FLEN)
NAN_BOXED(1744830336,32,FLEN)
NAN_BOXED(2125369000,32,FLEN)
NAN_BOXED(1077655675,32,FLEN)
NAN_BOXED(1744830400,32,FLEN)
NAN_BOXED(2125369000,32,FLEN)
NAN_BOXED(1077655675,32,FLEN)
NAN_BOXED(1744830432,32,FLEN)
NAN_BOXED(2125369000,32,FLEN)
NAN_BOXED(1077655675,32,FLEN)
NAN_BOXED(1744830448,32,FLEN)
NAN_BOXED(2125369000,32,FLEN)
NAN_BOXED(1077655675,32,FLEN)
NAN_BOXED(1744830456,32,FLEN)
NAN_BOXED(2125369000,32,FLEN)
NAN_BOXED(1077655675,32,FLEN)
NAN_BOXED(1744830460,32,FLEN)
NAN_BOXED(2125369000,32,FLEN)
NAN_BOXED(1077655675,32,FLEN)
NAN_BOXED(1744830462,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
