
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:07 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_1536:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x66d758 and fs2 == 1 and fe2 == 0x04 and fm2 == 0x0df34d and fs3 == 1 and fe3 == 0x9b and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ce6d758; op2val:0x820df34d;
op3val:0xcdffe000; valaddr_reg:x3; val_offset:4608*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4608*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1537:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x66d758 and fs2 == 1 and fe2 == 0x04 and fm2 == 0x0df34d and fs3 == 1 and fe3 == 0x9b and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ce6d758; op2val:0x820df34d;
op3val:0xcdfff000; valaddr_reg:x3; val_offset:4611*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4611*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1538:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x66d758 and fs2 == 1 and fe2 == 0x04 and fm2 == 0x0df34d and fs3 == 1 and fe3 == 0x9b and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ce6d758; op2val:0x820df34d;
op3val:0xcdfff800; valaddr_reg:x3; val_offset:4614*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4614*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1539:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x66d758 and fs2 == 1 and fe2 == 0x04 and fm2 == 0x0df34d and fs3 == 1 and fe3 == 0x9b and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ce6d758; op2val:0x820df34d;
op3val:0xcdfffc00; valaddr_reg:x3; val_offset:4617*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4617*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1540:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x66d758 and fs2 == 1 and fe2 == 0x04 and fm2 == 0x0df34d and fs3 == 1 and fe3 == 0x9b and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ce6d758; op2val:0x820df34d;
op3val:0xcdfffe00; valaddr_reg:x3; val_offset:4620*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4620*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1541:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x66d758 and fs2 == 1 and fe2 == 0x04 and fm2 == 0x0df34d and fs3 == 1 and fe3 == 0x9b and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ce6d758; op2val:0x820df34d;
op3val:0xcdffff00; valaddr_reg:x3; val_offset:4623*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4623*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1542:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x66d758 and fs2 == 1 and fe2 == 0x04 and fm2 == 0x0df34d and fs3 == 1 and fe3 == 0x9b and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ce6d758; op2val:0x820df34d;
op3val:0xcdffff80; valaddr_reg:x3; val_offset:4626*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4626*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1543:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x66d758 and fs2 == 1 and fe2 == 0x04 and fm2 == 0x0df34d and fs3 == 1 and fe3 == 0x9b and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ce6d758; op2val:0x820df34d;
op3val:0xcdffffc0; valaddr_reg:x3; val_offset:4629*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4629*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1544:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x66d758 and fs2 == 1 and fe2 == 0x04 and fm2 == 0x0df34d and fs3 == 1 and fe3 == 0x9b and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ce6d758; op2val:0x820df34d;
op3val:0xcdffffe0; valaddr_reg:x3; val_offset:4632*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4632*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1545:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x66d758 and fs2 == 1 and fe2 == 0x04 and fm2 == 0x0df34d and fs3 == 1 and fe3 == 0x9b and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ce6d758; op2val:0x820df34d;
op3val:0xcdfffff0; valaddr_reg:x3; val_offset:4635*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4635*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1546:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x66d758 and fs2 == 1 and fe2 == 0x04 and fm2 == 0x0df34d and fs3 == 1 and fe3 == 0x9b and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ce6d758; op2val:0x820df34d;
op3val:0xcdfffff8; valaddr_reg:x3; val_offset:4638*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4638*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1547:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x66d758 and fs2 == 1 and fe2 == 0x04 and fm2 == 0x0df34d and fs3 == 1 and fe3 == 0x9b and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ce6d758; op2val:0x820df34d;
op3val:0xcdfffffc; valaddr_reg:x3; val_offset:4641*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4641*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1548:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x66d758 and fs2 == 1 and fe2 == 0x04 and fm2 == 0x0df34d and fs3 == 1 and fe3 == 0x9b and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ce6d758; op2val:0x820df34d;
op3val:0xcdfffffe; valaddr_reg:x3; val_offset:4644*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4644*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1549:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x66d758 and fs2 == 1 and fe2 == 0x04 and fm2 == 0x0df34d and fs3 == 1 and fe3 == 0x9b and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ce6d758; op2val:0x820df34d;
op3val:0xcdffffff; valaddr_reg:x3; val_offset:4647*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4647*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1550:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x704072 and fs2 == 1 and fe2 == 0x84 and fm2 == 0x0863e8 and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf04072; op2val:0xc20863e8;
op3val:0xeb800000; valaddr_reg:x3; val_offset:4650*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4650*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1551:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x704072 and fs2 == 1 and fe2 == 0x84 and fm2 == 0x0863e8 and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf04072; op2val:0xc20863e8;
op3val:0xeb800001; valaddr_reg:x3; val_offset:4653*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4653*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1552:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x704072 and fs2 == 1 and fe2 == 0x84 and fm2 == 0x0863e8 and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf04072; op2val:0xc20863e8;
op3val:0xeb800003; valaddr_reg:x3; val_offset:4656*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4656*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1553:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x704072 and fs2 == 1 and fe2 == 0x84 and fm2 == 0x0863e8 and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf04072; op2val:0xc20863e8;
op3val:0xeb800007; valaddr_reg:x3; val_offset:4659*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4659*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1554:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x704072 and fs2 == 1 and fe2 == 0x84 and fm2 == 0x0863e8 and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf04072; op2val:0xc20863e8;
op3val:0xeb80000f; valaddr_reg:x3; val_offset:4662*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4662*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1555:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x704072 and fs2 == 1 and fe2 == 0x84 and fm2 == 0x0863e8 and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf04072; op2val:0xc20863e8;
op3val:0xeb80001f; valaddr_reg:x3; val_offset:4665*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4665*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1556:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x704072 and fs2 == 1 and fe2 == 0x84 and fm2 == 0x0863e8 and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf04072; op2val:0xc20863e8;
op3val:0xeb80003f; valaddr_reg:x3; val_offset:4668*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4668*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1557:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x704072 and fs2 == 1 and fe2 == 0x84 and fm2 == 0x0863e8 and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf04072; op2val:0xc20863e8;
op3val:0xeb80007f; valaddr_reg:x3; val_offset:4671*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4671*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1558:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x704072 and fs2 == 1 and fe2 == 0x84 and fm2 == 0x0863e8 and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf04072; op2val:0xc20863e8;
op3val:0xeb8000ff; valaddr_reg:x3; val_offset:4674*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4674*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1559:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x704072 and fs2 == 1 and fe2 == 0x84 and fm2 == 0x0863e8 and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf04072; op2val:0xc20863e8;
op3val:0xeb8001ff; valaddr_reg:x3; val_offset:4677*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4677*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1560:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x704072 and fs2 == 1 and fe2 == 0x84 and fm2 == 0x0863e8 and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf04072; op2val:0xc20863e8;
op3val:0xeb8003ff; valaddr_reg:x3; val_offset:4680*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4680*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1561:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x704072 and fs2 == 1 and fe2 == 0x84 and fm2 == 0x0863e8 and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf04072; op2val:0xc20863e8;
op3val:0xeb8007ff; valaddr_reg:x3; val_offset:4683*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4683*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1562:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x704072 and fs2 == 1 and fe2 == 0x84 and fm2 == 0x0863e8 and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf04072; op2val:0xc20863e8;
op3val:0xeb800fff; valaddr_reg:x3; val_offset:4686*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4686*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1563:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x704072 and fs2 == 1 and fe2 == 0x84 and fm2 == 0x0863e8 and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf04072; op2val:0xc20863e8;
op3val:0xeb801fff; valaddr_reg:x3; val_offset:4689*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4689*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1564:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x704072 and fs2 == 1 and fe2 == 0x84 and fm2 == 0x0863e8 and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf04072; op2val:0xc20863e8;
op3val:0xeb803fff; valaddr_reg:x3; val_offset:4692*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4692*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1565:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x704072 and fs2 == 1 and fe2 == 0x84 and fm2 == 0x0863e8 and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf04072; op2val:0xc20863e8;
op3val:0xeb807fff; valaddr_reg:x3; val_offset:4695*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4695*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1566:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x704072 and fs2 == 1 and fe2 == 0x84 and fm2 == 0x0863e8 and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf04072; op2val:0xc20863e8;
op3val:0xeb80ffff; valaddr_reg:x3; val_offset:4698*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4698*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1567:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x704072 and fs2 == 1 and fe2 == 0x84 and fm2 == 0x0863e8 and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf04072; op2val:0xc20863e8;
op3val:0xeb81ffff; valaddr_reg:x3; val_offset:4701*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4701*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1568:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x704072 and fs2 == 1 and fe2 == 0x84 and fm2 == 0x0863e8 and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf04072; op2val:0xc20863e8;
op3val:0xeb83ffff; valaddr_reg:x3; val_offset:4704*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4704*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1569:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x704072 and fs2 == 1 and fe2 == 0x84 and fm2 == 0x0863e8 and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf04072; op2val:0xc20863e8;
op3val:0xeb87ffff; valaddr_reg:x3; val_offset:4707*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4707*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1570:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x704072 and fs2 == 1 and fe2 == 0x84 and fm2 == 0x0863e8 and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf04072; op2val:0xc20863e8;
op3val:0xeb8fffff; valaddr_reg:x3; val_offset:4710*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4710*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1571:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x704072 and fs2 == 1 and fe2 == 0x84 and fm2 == 0x0863e8 and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf04072; op2val:0xc20863e8;
op3val:0xeb9fffff; valaddr_reg:x3; val_offset:4713*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4713*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1572:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x704072 and fs2 == 1 and fe2 == 0x84 and fm2 == 0x0863e8 and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf04072; op2val:0xc20863e8;
op3val:0xebbfffff; valaddr_reg:x3; val_offset:4716*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4716*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1573:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x704072 and fs2 == 1 and fe2 == 0x84 and fm2 == 0x0863e8 and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf04072; op2val:0xc20863e8;
op3val:0xebc00000; valaddr_reg:x3; val_offset:4719*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4719*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1574:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x704072 and fs2 == 1 and fe2 == 0x84 and fm2 == 0x0863e8 and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf04072; op2val:0xc20863e8;
op3val:0xebe00000; valaddr_reg:x3; val_offset:4722*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4722*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1575:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x704072 and fs2 == 1 and fe2 == 0x84 and fm2 == 0x0863e8 and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf04072; op2val:0xc20863e8;
op3val:0xebf00000; valaddr_reg:x3; val_offset:4725*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4725*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1576:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x704072 and fs2 == 1 and fe2 == 0x84 and fm2 == 0x0863e8 and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf04072; op2val:0xc20863e8;
op3val:0xebf80000; valaddr_reg:x3; val_offset:4728*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4728*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1577:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x704072 and fs2 == 1 and fe2 == 0x84 and fm2 == 0x0863e8 and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf04072; op2val:0xc20863e8;
op3val:0xebfc0000; valaddr_reg:x3; val_offset:4731*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4731*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1578:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x704072 and fs2 == 1 and fe2 == 0x84 and fm2 == 0x0863e8 and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf04072; op2val:0xc20863e8;
op3val:0xebfe0000; valaddr_reg:x3; val_offset:4734*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4734*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1579:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x704072 and fs2 == 1 and fe2 == 0x84 and fm2 == 0x0863e8 and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf04072; op2val:0xc20863e8;
op3val:0xebff0000; valaddr_reg:x3; val_offset:4737*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4737*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1580:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x704072 and fs2 == 1 and fe2 == 0x84 and fm2 == 0x0863e8 and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf04072; op2val:0xc20863e8;
op3val:0xebff8000; valaddr_reg:x3; val_offset:4740*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4740*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1581:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x704072 and fs2 == 1 and fe2 == 0x84 and fm2 == 0x0863e8 and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf04072; op2val:0xc20863e8;
op3val:0xebffc000; valaddr_reg:x3; val_offset:4743*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4743*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1582:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x704072 and fs2 == 1 and fe2 == 0x84 and fm2 == 0x0863e8 and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf04072; op2val:0xc20863e8;
op3val:0xebffe000; valaddr_reg:x3; val_offset:4746*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4746*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1583:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x704072 and fs2 == 1 and fe2 == 0x84 and fm2 == 0x0863e8 and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf04072; op2val:0xc20863e8;
op3val:0xebfff000; valaddr_reg:x3; val_offset:4749*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4749*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1584:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x704072 and fs2 == 1 and fe2 == 0x84 and fm2 == 0x0863e8 and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf04072; op2val:0xc20863e8;
op3val:0xebfff800; valaddr_reg:x3; val_offset:4752*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4752*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1585:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x704072 and fs2 == 1 and fe2 == 0x84 and fm2 == 0x0863e8 and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf04072; op2val:0xc20863e8;
op3val:0xebfffc00; valaddr_reg:x3; val_offset:4755*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4755*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1586:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x704072 and fs2 == 1 and fe2 == 0x84 and fm2 == 0x0863e8 and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf04072; op2val:0xc20863e8;
op3val:0xebfffe00; valaddr_reg:x3; val_offset:4758*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4758*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1587:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x704072 and fs2 == 1 and fe2 == 0x84 and fm2 == 0x0863e8 and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf04072; op2val:0xc20863e8;
op3val:0xebffff00; valaddr_reg:x3; val_offset:4761*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4761*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1588:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x704072 and fs2 == 1 and fe2 == 0x84 and fm2 == 0x0863e8 and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf04072; op2val:0xc20863e8;
op3val:0xebffff80; valaddr_reg:x3; val_offset:4764*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4764*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1589:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x704072 and fs2 == 1 and fe2 == 0x84 and fm2 == 0x0863e8 and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf04072; op2val:0xc20863e8;
op3val:0xebffffc0; valaddr_reg:x3; val_offset:4767*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4767*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1590:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x704072 and fs2 == 1 and fe2 == 0x84 and fm2 == 0x0863e8 and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf04072; op2val:0xc20863e8;
op3val:0xebffffe0; valaddr_reg:x3; val_offset:4770*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4770*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1591:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x704072 and fs2 == 1 and fe2 == 0x84 and fm2 == 0x0863e8 and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf04072; op2val:0xc20863e8;
op3val:0xebfffff0; valaddr_reg:x3; val_offset:4773*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4773*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1592:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x704072 and fs2 == 1 and fe2 == 0x84 and fm2 == 0x0863e8 and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf04072; op2val:0xc20863e8;
op3val:0xebfffff8; valaddr_reg:x3; val_offset:4776*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4776*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1593:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x704072 and fs2 == 1 and fe2 == 0x84 and fm2 == 0x0863e8 and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf04072; op2val:0xc20863e8;
op3val:0xebfffffc; valaddr_reg:x3; val_offset:4779*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4779*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1594:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x704072 and fs2 == 1 and fe2 == 0x84 and fm2 == 0x0863e8 and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf04072; op2val:0xc20863e8;
op3val:0xebfffffe; valaddr_reg:x3; val_offset:4782*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4782*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1595:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x704072 and fs2 == 1 and fe2 == 0x84 and fm2 == 0x0863e8 and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf04072; op2val:0xc20863e8;
op3val:0xebffffff; valaddr_reg:x3; val_offset:4785*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4785*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1596:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x704072 and fs2 == 1 and fe2 == 0x84 and fm2 == 0x0863e8 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf04072; op2val:0xc20863e8;
op3val:0xff000001; valaddr_reg:x3; val_offset:4788*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4788*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1597:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x704072 and fs2 == 1 and fe2 == 0x84 and fm2 == 0x0863e8 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf04072; op2val:0xc20863e8;
op3val:0xff000003; valaddr_reg:x3; val_offset:4791*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4791*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1598:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x704072 and fs2 == 1 and fe2 == 0x84 and fm2 == 0x0863e8 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf04072; op2val:0xc20863e8;
op3val:0xff000007; valaddr_reg:x3; val_offset:4794*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4794*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1599:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x704072 and fs2 == 1 and fe2 == 0x84 and fm2 == 0x0863e8 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf04072; op2val:0xc20863e8;
op3val:0xff199999; valaddr_reg:x3; val_offset:4797*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4797*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1600:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x704072 and fs2 == 1 and fe2 == 0x84 and fm2 == 0x0863e8 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf04072; op2val:0xc20863e8;
op3val:0xff249249; valaddr_reg:x3; val_offset:4800*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4800*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1601:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x704072 and fs2 == 1 and fe2 == 0x84 and fm2 == 0x0863e8 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf04072; op2val:0xc20863e8;
op3val:0xff333333; valaddr_reg:x3; val_offset:4803*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4803*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1602:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x704072 and fs2 == 1 and fe2 == 0x84 and fm2 == 0x0863e8 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf04072; op2val:0xc20863e8;
op3val:0xff36db6d; valaddr_reg:x3; val_offset:4806*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4806*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1603:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x704072 and fs2 == 1 and fe2 == 0x84 and fm2 == 0x0863e8 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf04072; op2val:0xc20863e8;
op3val:0xff3bbbbb; valaddr_reg:x3; val_offset:4809*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4809*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1604:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x704072 and fs2 == 1 and fe2 == 0x84 and fm2 == 0x0863e8 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf04072; op2val:0xc20863e8;
op3val:0xff444444; valaddr_reg:x3; val_offset:4812*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4812*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1605:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x704072 and fs2 == 1 and fe2 == 0x84 and fm2 == 0x0863e8 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf04072; op2val:0xc20863e8;
op3val:0xff4ccccc; valaddr_reg:x3; val_offset:4815*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4815*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1606:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x704072 and fs2 == 1 and fe2 == 0x84 and fm2 == 0x0863e8 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf04072; op2val:0xc20863e8;
op3val:0xff5b6db6; valaddr_reg:x3; val_offset:4818*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4818*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1607:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x704072 and fs2 == 1 and fe2 == 0x84 and fm2 == 0x0863e8 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf04072; op2val:0xc20863e8;
op3val:0xff666666; valaddr_reg:x3; val_offset:4821*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4821*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1608:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x704072 and fs2 == 1 and fe2 == 0x84 and fm2 == 0x0863e8 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf04072; op2val:0xc20863e8;
op3val:0xff6db6db; valaddr_reg:x3; val_offset:4824*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4824*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1609:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x704072 and fs2 == 1 and fe2 == 0x84 and fm2 == 0x0863e8 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf04072; op2val:0xc20863e8;
op3val:0xff7ffff8; valaddr_reg:x3; val_offset:4827*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4827*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1610:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x704072 and fs2 == 1 and fe2 == 0x84 and fm2 == 0x0863e8 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf04072; op2val:0xc20863e8;
op3val:0xff7ffffc; valaddr_reg:x3; val_offset:4830*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4830*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1611:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x704072 and fs2 == 1 and fe2 == 0x84 and fm2 == 0x0863e8 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf04072; op2val:0xc20863e8;
op3val:0xff7ffffe; valaddr_reg:x3; val_offset:4833*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4833*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1612:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x7b2225 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x027aff and fs3 == 0 and fe3 == 0x5e and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cfb2225; op2val:0x2027aff;
op3val:0x2f000000; valaddr_reg:x3; val_offset:4836*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4836*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1613:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x7b2225 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x027aff and fs3 == 0 and fe3 == 0x5e and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cfb2225; op2val:0x2027aff;
op3val:0x2f000001; valaddr_reg:x3; val_offset:4839*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4839*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1614:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x7b2225 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x027aff and fs3 == 0 and fe3 == 0x5e and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cfb2225; op2val:0x2027aff;
op3val:0x2f000003; valaddr_reg:x3; val_offset:4842*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4842*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1615:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x7b2225 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x027aff and fs3 == 0 and fe3 == 0x5e and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cfb2225; op2val:0x2027aff;
op3val:0x2f000007; valaddr_reg:x3; val_offset:4845*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4845*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1616:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x7b2225 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x027aff and fs3 == 0 and fe3 == 0x5e and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cfb2225; op2val:0x2027aff;
op3val:0x2f00000f; valaddr_reg:x3; val_offset:4848*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4848*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1617:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x7b2225 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x027aff and fs3 == 0 and fe3 == 0x5e and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cfb2225; op2val:0x2027aff;
op3val:0x2f00001f; valaddr_reg:x3; val_offset:4851*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4851*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1618:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x7b2225 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x027aff and fs3 == 0 and fe3 == 0x5e and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cfb2225; op2val:0x2027aff;
op3val:0x2f00003f; valaddr_reg:x3; val_offset:4854*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4854*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1619:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x7b2225 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x027aff and fs3 == 0 and fe3 == 0x5e and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cfb2225; op2val:0x2027aff;
op3val:0x2f00007f; valaddr_reg:x3; val_offset:4857*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4857*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1620:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x7b2225 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x027aff and fs3 == 0 and fe3 == 0x5e and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cfb2225; op2val:0x2027aff;
op3val:0x2f0000ff; valaddr_reg:x3; val_offset:4860*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4860*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1621:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x7b2225 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x027aff and fs3 == 0 and fe3 == 0x5e and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cfb2225; op2val:0x2027aff;
op3val:0x2f0001ff; valaddr_reg:x3; val_offset:4863*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4863*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1622:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x7b2225 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x027aff and fs3 == 0 and fe3 == 0x5e and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cfb2225; op2val:0x2027aff;
op3val:0x2f0003ff; valaddr_reg:x3; val_offset:4866*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4866*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1623:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x7b2225 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x027aff and fs3 == 0 and fe3 == 0x5e and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cfb2225; op2val:0x2027aff;
op3val:0x2f0007ff; valaddr_reg:x3; val_offset:4869*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4869*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1624:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x7b2225 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x027aff and fs3 == 0 and fe3 == 0x5e and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cfb2225; op2val:0x2027aff;
op3val:0x2f000fff; valaddr_reg:x3; val_offset:4872*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4872*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1625:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x7b2225 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x027aff and fs3 == 0 and fe3 == 0x5e and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cfb2225; op2val:0x2027aff;
op3val:0x2f001fff; valaddr_reg:x3; val_offset:4875*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4875*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1626:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x7b2225 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x027aff and fs3 == 0 and fe3 == 0x5e and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cfb2225; op2val:0x2027aff;
op3val:0x2f003fff; valaddr_reg:x3; val_offset:4878*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4878*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1627:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x7b2225 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x027aff and fs3 == 0 and fe3 == 0x5e and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cfb2225; op2val:0x2027aff;
op3val:0x2f007fff; valaddr_reg:x3; val_offset:4881*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4881*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1628:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x7b2225 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x027aff and fs3 == 0 and fe3 == 0x5e and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cfb2225; op2val:0x2027aff;
op3val:0x2f00ffff; valaddr_reg:x3; val_offset:4884*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4884*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1629:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x7b2225 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x027aff and fs3 == 0 and fe3 == 0x5e and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cfb2225; op2val:0x2027aff;
op3val:0x2f01ffff; valaddr_reg:x3; val_offset:4887*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4887*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1630:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x7b2225 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x027aff and fs3 == 0 and fe3 == 0x5e and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cfb2225; op2val:0x2027aff;
op3val:0x2f03ffff; valaddr_reg:x3; val_offset:4890*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4890*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1631:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x7b2225 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x027aff and fs3 == 0 and fe3 == 0x5e and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cfb2225; op2val:0x2027aff;
op3val:0x2f07ffff; valaddr_reg:x3; val_offset:4893*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4893*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1632:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x7b2225 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x027aff and fs3 == 0 and fe3 == 0x5e and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cfb2225; op2val:0x2027aff;
op3val:0x2f0fffff; valaddr_reg:x3; val_offset:4896*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4896*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1633:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x7b2225 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x027aff and fs3 == 0 and fe3 == 0x5e and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cfb2225; op2val:0x2027aff;
op3val:0x2f1fffff; valaddr_reg:x3; val_offset:4899*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4899*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1634:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x7b2225 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x027aff and fs3 == 0 and fe3 == 0x5e and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cfb2225; op2val:0x2027aff;
op3val:0x2f3fffff; valaddr_reg:x3; val_offset:4902*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4902*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1635:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x7b2225 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x027aff and fs3 == 0 and fe3 == 0x5e and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cfb2225; op2val:0x2027aff;
op3val:0x2f400000; valaddr_reg:x3; val_offset:4905*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4905*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1636:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x7b2225 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x027aff and fs3 == 0 and fe3 == 0x5e and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cfb2225; op2val:0x2027aff;
op3val:0x2f600000; valaddr_reg:x3; val_offset:4908*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4908*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1637:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x7b2225 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x027aff and fs3 == 0 and fe3 == 0x5e and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cfb2225; op2val:0x2027aff;
op3val:0x2f700000; valaddr_reg:x3; val_offset:4911*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4911*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1638:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x7b2225 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x027aff and fs3 == 0 and fe3 == 0x5e and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cfb2225; op2val:0x2027aff;
op3val:0x2f780000; valaddr_reg:x3; val_offset:4914*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4914*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1639:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x7b2225 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x027aff and fs3 == 0 and fe3 == 0x5e and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cfb2225; op2val:0x2027aff;
op3val:0x2f7c0000; valaddr_reg:x3; val_offset:4917*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4917*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1640:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x7b2225 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x027aff and fs3 == 0 and fe3 == 0x5e and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cfb2225; op2val:0x2027aff;
op3val:0x2f7e0000; valaddr_reg:x3; val_offset:4920*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4920*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1641:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x7b2225 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x027aff and fs3 == 0 and fe3 == 0x5e and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cfb2225; op2val:0x2027aff;
op3val:0x2f7f0000; valaddr_reg:x3; val_offset:4923*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4923*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1642:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x7b2225 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x027aff and fs3 == 0 and fe3 == 0x5e and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cfb2225; op2val:0x2027aff;
op3val:0x2f7f8000; valaddr_reg:x3; val_offset:4926*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4926*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1643:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x7b2225 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x027aff and fs3 == 0 and fe3 == 0x5e and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cfb2225; op2val:0x2027aff;
op3val:0x2f7fc000; valaddr_reg:x3; val_offset:4929*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4929*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1644:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x7b2225 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x027aff and fs3 == 0 and fe3 == 0x5e and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cfb2225; op2val:0x2027aff;
op3val:0x2f7fe000; valaddr_reg:x3; val_offset:4932*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4932*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1645:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x7b2225 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x027aff and fs3 == 0 and fe3 == 0x5e and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cfb2225; op2val:0x2027aff;
op3val:0x2f7ff000; valaddr_reg:x3; val_offset:4935*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4935*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1646:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x7b2225 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x027aff and fs3 == 0 and fe3 == 0x5e and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cfb2225; op2val:0x2027aff;
op3val:0x2f7ff800; valaddr_reg:x3; val_offset:4938*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4938*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1647:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x7b2225 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x027aff and fs3 == 0 and fe3 == 0x5e and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cfb2225; op2val:0x2027aff;
op3val:0x2f7ffc00; valaddr_reg:x3; val_offset:4941*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4941*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1648:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x7b2225 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x027aff and fs3 == 0 and fe3 == 0x5e and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cfb2225; op2val:0x2027aff;
op3val:0x2f7ffe00; valaddr_reg:x3; val_offset:4944*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4944*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1649:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x7b2225 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x027aff and fs3 == 0 and fe3 == 0x5e and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cfb2225; op2val:0x2027aff;
op3val:0x2f7fff00; valaddr_reg:x3; val_offset:4947*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4947*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1650:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x7b2225 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x027aff and fs3 == 0 and fe3 == 0x5e and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cfb2225; op2val:0x2027aff;
op3val:0x2f7fff80; valaddr_reg:x3; val_offset:4950*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4950*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1651:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x7b2225 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x027aff and fs3 == 0 and fe3 == 0x5e and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cfb2225; op2val:0x2027aff;
op3val:0x2f7fffc0; valaddr_reg:x3; val_offset:4953*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4953*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1652:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x7b2225 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x027aff and fs3 == 0 and fe3 == 0x5e and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cfb2225; op2val:0x2027aff;
op3val:0x2f7fffe0; valaddr_reg:x3; val_offset:4956*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4956*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1653:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x7b2225 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x027aff and fs3 == 0 and fe3 == 0x5e and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cfb2225; op2val:0x2027aff;
op3val:0x2f7ffff0; valaddr_reg:x3; val_offset:4959*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4959*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1654:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x7b2225 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x027aff and fs3 == 0 and fe3 == 0x5e and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cfb2225; op2val:0x2027aff;
op3val:0x2f7ffff8; valaddr_reg:x3; val_offset:4962*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4962*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1655:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x7b2225 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x027aff and fs3 == 0 and fe3 == 0x5e and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cfb2225; op2val:0x2027aff;
op3val:0x2f7ffffc; valaddr_reg:x3; val_offset:4965*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4965*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1656:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x7b2225 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x027aff and fs3 == 0 and fe3 == 0x5e and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cfb2225; op2val:0x2027aff;
op3val:0x2f7ffffe; valaddr_reg:x3; val_offset:4968*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4968*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1657:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x7b2225 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x027aff and fs3 == 0 and fe3 == 0x5e and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cfb2225; op2val:0x2027aff;
op3val:0x2f7fffff; valaddr_reg:x3; val_offset:4971*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4971*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1658:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x7b2225 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x027aff and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cfb2225; op2val:0x2027aff;
op3val:0x3f800001; valaddr_reg:x3; val_offset:4974*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4974*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1659:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x7b2225 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x027aff and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cfb2225; op2val:0x2027aff;
op3val:0x3f800003; valaddr_reg:x3; val_offset:4977*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4977*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1660:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x7b2225 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x027aff and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cfb2225; op2val:0x2027aff;
op3val:0x3f800007; valaddr_reg:x3; val_offset:4980*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4980*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1661:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x7b2225 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x027aff and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cfb2225; op2val:0x2027aff;
op3val:0x3f999999; valaddr_reg:x3; val_offset:4983*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4983*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1662:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x7b2225 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x027aff and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cfb2225; op2val:0x2027aff;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:4986*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4986*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1663:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x7b2225 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x027aff and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cfb2225; op2val:0x2027aff;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:4989*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4989*0 + 3*12*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2095503192,32,FLEN)
NAN_BOXED(2181952333,32,FLEN)
NAN_BOXED(3456098304,32,FLEN)
NAN_BOXED(2095503192,32,FLEN)
NAN_BOXED(2181952333,32,FLEN)
NAN_BOXED(3456102400,32,FLEN)
NAN_BOXED(2095503192,32,FLEN)
NAN_BOXED(2181952333,32,FLEN)
NAN_BOXED(3456104448,32,FLEN)
NAN_BOXED(2095503192,32,FLEN)
NAN_BOXED(2181952333,32,FLEN)
NAN_BOXED(3456105472,32,FLEN)
NAN_BOXED(2095503192,32,FLEN)
NAN_BOXED(2181952333,32,FLEN)
NAN_BOXED(3456105984,32,FLEN)
NAN_BOXED(2095503192,32,FLEN)
NAN_BOXED(2181952333,32,FLEN)
NAN_BOXED(3456106240,32,FLEN)
NAN_BOXED(2095503192,32,FLEN)
NAN_BOXED(2181952333,32,FLEN)
NAN_BOXED(3456106368,32,FLEN)
NAN_BOXED(2095503192,32,FLEN)
NAN_BOXED(2181952333,32,FLEN)
NAN_BOXED(3456106432,32,FLEN)
NAN_BOXED(2095503192,32,FLEN)
NAN_BOXED(2181952333,32,FLEN)
NAN_BOXED(3456106464,32,FLEN)
NAN_BOXED(2095503192,32,FLEN)
NAN_BOXED(2181952333,32,FLEN)
NAN_BOXED(3456106480,32,FLEN)
NAN_BOXED(2095503192,32,FLEN)
NAN_BOXED(2181952333,32,FLEN)
NAN_BOXED(3456106488,32,FLEN)
NAN_BOXED(2095503192,32,FLEN)
NAN_BOXED(2181952333,32,FLEN)
NAN_BOXED(3456106492,32,FLEN)
NAN_BOXED(2095503192,32,FLEN)
NAN_BOXED(2181952333,32,FLEN)
NAN_BOXED(3456106494,32,FLEN)
NAN_BOXED(2095503192,32,FLEN)
NAN_BOXED(2181952333,32,FLEN)
NAN_BOXED(3456106495,32,FLEN)
NAN_BOXED(2096119922,32,FLEN)
NAN_BOXED(3255329768,32,FLEN)
NAN_BOXED(3951034368,32,FLEN)
NAN_BOXED(2096119922,32,FLEN)
NAN_BOXED(3255329768,32,FLEN)
NAN_BOXED(3951034369,32,FLEN)
NAN_BOXED(2096119922,32,FLEN)
NAN_BOXED(3255329768,32,FLEN)
NAN_BOXED(3951034371,32,FLEN)
NAN_BOXED(2096119922,32,FLEN)
NAN_BOXED(3255329768,32,FLEN)
NAN_BOXED(3951034375,32,FLEN)
NAN_BOXED(2096119922,32,FLEN)
NAN_BOXED(3255329768,32,FLEN)
NAN_BOXED(3951034383,32,FLEN)
NAN_BOXED(2096119922,32,FLEN)
NAN_BOXED(3255329768,32,FLEN)
NAN_BOXED(3951034399,32,FLEN)
NAN_BOXED(2096119922,32,FLEN)
NAN_BOXED(3255329768,32,FLEN)
NAN_BOXED(3951034431,32,FLEN)
NAN_BOXED(2096119922,32,FLEN)
NAN_BOXED(3255329768,32,FLEN)
NAN_BOXED(3951034495,32,FLEN)
NAN_BOXED(2096119922,32,FLEN)
NAN_BOXED(3255329768,32,FLEN)
NAN_BOXED(3951034623,32,FLEN)
NAN_BOXED(2096119922,32,FLEN)
NAN_BOXED(3255329768,32,FLEN)
NAN_BOXED(3951034879,32,FLEN)
NAN_BOXED(2096119922,32,FLEN)
NAN_BOXED(3255329768,32,FLEN)
NAN_BOXED(3951035391,32,FLEN)
NAN_BOXED(2096119922,32,FLEN)
NAN_BOXED(3255329768,32,FLEN)
NAN_BOXED(3951036415,32,FLEN)
NAN_BOXED(2096119922,32,FLEN)
NAN_BOXED(3255329768,32,FLEN)
NAN_BOXED(3951038463,32,FLEN)
NAN_BOXED(2096119922,32,FLEN)
NAN_BOXED(3255329768,32,FLEN)
NAN_BOXED(3951042559,32,FLEN)
NAN_BOXED(2096119922,32,FLEN)
NAN_BOXED(3255329768,32,FLEN)
NAN_BOXED(3951050751,32,FLEN)
NAN_BOXED(2096119922,32,FLEN)
NAN_BOXED(3255329768,32,FLEN)
NAN_BOXED(3951067135,32,FLEN)
NAN_BOXED(2096119922,32,FLEN)
NAN_BOXED(3255329768,32,FLEN)
NAN_BOXED(3951099903,32,FLEN)
NAN_BOXED(2096119922,32,FLEN)
NAN_BOXED(3255329768,32,FLEN)
NAN_BOXED(3951165439,32,FLEN)
NAN_BOXED(2096119922,32,FLEN)
NAN_BOXED(3255329768,32,FLEN)
NAN_BOXED(3951296511,32,FLEN)
NAN_BOXED(2096119922,32,FLEN)
NAN_BOXED(3255329768,32,FLEN)
NAN_BOXED(3951558655,32,FLEN)
NAN_BOXED(2096119922,32,FLEN)
NAN_BOXED(3255329768,32,FLEN)
NAN_BOXED(3952082943,32,FLEN)
NAN_BOXED(2096119922,32,FLEN)
NAN_BOXED(3255329768,32,FLEN)
NAN_BOXED(3953131519,32,FLEN)
NAN_BOXED(2096119922,32,FLEN)
NAN_BOXED(3255329768,32,FLEN)
NAN_BOXED(3955228671,32,FLEN)
NAN_BOXED(2096119922,32,FLEN)
NAN_BOXED(3255329768,32,FLEN)
NAN_BOXED(3955228672,32,FLEN)
NAN_BOXED(2096119922,32,FLEN)
NAN_BOXED(3255329768,32,FLEN)
NAN_BOXED(3957325824,32,FLEN)
NAN_BOXED(2096119922,32,FLEN)
NAN_BOXED(3255329768,32,FLEN)
NAN_BOXED(3958374400,32,FLEN)
NAN_BOXED(2096119922,32,FLEN)
NAN_BOXED(3255329768,32,FLEN)
NAN_BOXED(3958898688,32,FLEN)
NAN_BOXED(2096119922,32,FLEN)
NAN_BOXED(3255329768,32,FLEN)
NAN_BOXED(3959160832,32,FLEN)
NAN_BOXED(2096119922,32,FLEN)
NAN_BOXED(3255329768,32,FLEN)
NAN_BOXED(3959291904,32,FLEN)
NAN_BOXED(2096119922,32,FLEN)
NAN_BOXED(3255329768,32,FLEN)
NAN_BOXED(3959357440,32,FLEN)
NAN_BOXED(2096119922,32,FLEN)
NAN_BOXED(3255329768,32,FLEN)
NAN_BOXED(3959390208,32,FLEN)
NAN_BOXED(2096119922,32,FLEN)
NAN_BOXED(3255329768,32,FLEN)
NAN_BOXED(3959406592,32,FLEN)
NAN_BOXED(2096119922,32,FLEN)
NAN_BOXED(3255329768,32,FLEN)
NAN_BOXED(3959414784,32,FLEN)
NAN_BOXED(2096119922,32,FLEN)
NAN_BOXED(3255329768,32,FLEN)
NAN_BOXED(3959418880,32,FLEN)
NAN_BOXED(2096119922,32,FLEN)
NAN_BOXED(3255329768,32,FLEN)
NAN_BOXED(3959420928,32,FLEN)
NAN_BOXED(2096119922,32,FLEN)
NAN_BOXED(3255329768,32,FLEN)
NAN_BOXED(3959421952,32,FLEN)
NAN_BOXED(2096119922,32,FLEN)
NAN_BOXED(3255329768,32,FLEN)
NAN_BOXED(3959422464,32,FLEN)
NAN_BOXED(2096119922,32,FLEN)
NAN_BOXED(3255329768,32,FLEN)
NAN_BOXED(3959422720,32,FLEN)
NAN_BOXED(2096119922,32,FLEN)
NAN_BOXED(3255329768,32,FLEN)
NAN_BOXED(3959422848,32,FLEN)
NAN_BOXED(2096119922,32,FLEN)
NAN_BOXED(3255329768,32,FLEN)
NAN_BOXED(3959422912,32,FLEN)
NAN_BOXED(2096119922,32,FLEN)
NAN_BOXED(3255329768,32,FLEN)
NAN_BOXED(3959422944,32,FLEN)
NAN_BOXED(2096119922,32,FLEN)
NAN_BOXED(3255329768,32,FLEN)
NAN_BOXED(3959422960,32,FLEN)
NAN_BOXED(2096119922,32,FLEN)
NAN_BOXED(3255329768,32,FLEN)
NAN_BOXED(3959422968,32,FLEN)
NAN_BOXED(2096119922,32,FLEN)
NAN_BOXED(3255329768,32,FLEN)
NAN_BOXED(3959422972,32,FLEN)
NAN_BOXED(2096119922,32,FLEN)
NAN_BOXED(3255329768,32,FLEN)
NAN_BOXED(3959422974,32,FLEN)
NAN_BOXED(2096119922,32,FLEN)
NAN_BOXED(3255329768,32,FLEN)
NAN_BOXED(3959422975,32,FLEN)
NAN_BOXED(2096119922,32,FLEN)
NAN_BOXED(3255329768,32,FLEN)
NAN_BOXED(4278190081,32,FLEN)
NAN_BOXED(2096119922,32,FLEN)
NAN_BOXED(3255329768,32,FLEN)
NAN_BOXED(4278190083,32,FLEN)
NAN_BOXED(2096119922,32,FLEN)
NAN_BOXED(3255329768,32,FLEN)
NAN_BOXED(4278190087,32,FLEN)
NAN_BOXED(2096119922,32,FLEN)
NAN_BOXED(3255329768,32,FLEN)
NAN_BOXED(4279867801,32,FLEN)
NAN_BOXED(2096119922,32,FLEN)
NAN_BOXED(3255329768,32,FLEN)
NAN_BOXED(4280586825,32,FLEN)
NAN_BOXED(2096119922,32,FLEN)
NAN_BOXED(3255329768,32,FLEN)
NAN_BOXED(4281545523,32,FLEN)
NAN_BOXED(2096119922,32,FLEN)
NAN_BOXED(3255329768,32,FLEN)
NAN_BOXED(4281785197,32,FLEN)
NAN_BOXED(2096119922,32,FLEN)
NAN_BOXED(3255329768,32,FLEN)
NAN_BOXED(4282104763,32,FLEN)
NAN_BOXED(2096119922,32,FLEN)
NAN_BOXED(3255329768,32,FLEN)
NAN_BOXED(4282664004,32,FLEN)
NAN_BOXED(2096119922,32,FLEN)
NAN_BOXED(3255329768,32,FLEN)
NAN_BOXED(4283223244,32,FLEN)
NAN_BOXED(2096119922,32,FLEN)
NAN_BOXED(3255329768,32,FLEN)
NAN_BOXED(4284181942,32,FLEN)
NAN_BOXED(2096119922,32,FLEN)
NAN_BOXED(3255329768,32,FLEN)
NAN_BOXED(4284900966,32,FLEN)
NAN_BOXED(2096119922,32,FLEN)
NAN_BOXED(3255329768,32,FLEN)
NAN_BOXED(4285380315,32,FLEN)
NAN_BOXED(2096119922,32,FLEN)
NAN_BOXED(3255329768,32,FLEN)
NAN_BOXED(4286578680,32,FLEN)
NAN_BOXED(2096119922,32,FLEN)
NAN_BOXED(3255329768,32,FLEN)
NAN_BOXED(4286578684,32,FLEN)
NAN_BOXED(2096119922,32,FLEN)
NAN_BOXED(3255329768,32,FLEN)
NAN_BOXED(4286578686,32,FLEN)
NAN_BOXED(2096833061,32,FLEN)
NAN_BOXED(33716991,32,FLEN)
NAN_BOXED(788529152,32,FLEN)
NAN_BOXED(2096833061,32,FLEN)
NAN_BOXED(33716991,32,FLEN)
NAN_BOXED(788529153,32,FLEN)
NAN_BOXED(2096833061,32,FLEN)
NAN_BOXED(33716991,32,FLEN)
NAN_BOXED(788529155,32,FLEN)
NAN_BOXED(2096833061,32,FLEN)
NAN_BOXED(33716991,32,FLEN)
NAN_BOXED(788529159,32,FLEN)
NAN_BOXED(2096833061,32,FLEN)
NAN_BOXED(33716991,32,FLEN)
NAN_BOXED(788529167,32,FLEN)
NAN_BOXED(2096833061,32,FLEN)
NAN_BOXED(33716991,32,FLEN)
NAN_BOXED(788529183,32,FLEN)
NAN_BOXED(2096833061,32,FLEN)
NAN_BOXED(33716991,32,FLEN)
NAN_BOXED(788529215,32,FLEN)
NAN_BOXED(2096833061,32,FLEN)
NAN_BOXED(33716991,32,FLEN)
NAN_BOXED(788529279,32,FLEN)
NAN_BOXED(2096833061,32,FLEN)
NAN_BOXED(33716991,32,FLEN)
NAN_BOXED(788529407,32,FLEN)
NAN_BOXED(2096833061,32,FLEN)
NAN_BOXED(33716991,32,FLEN)
NAN_BOXED(788529663,32,FLEN)
NAN_BOXED(2096833061,32,FLEN)
NAN_BOXED(33716991,32,FLEN)
NAN_BOXED(788530175,32,FLEN)
NAN_BOXED(2096833061,32,FLEN)
NAN_BOXED(33716991,32,FLEN)
NAN_BOXED(788531199,32,FLEN)
NAN_BOXED(2096833061,32,FLEN)
NAN_BOXED(33716991,32,FLEN)
NAN_BOXED(788533247,32,FLEN)
NAN_BOXED(2096833061,32,FLEN)
NAN_BOXED(33716991,32,FLEN)
NAN_BOXED(788537343,32,FLEN)
NAN_BOXED(2096833061,32,FLEN)
NAN_BOXED(33716991,32,FLEN)
NAN_BOXED(788545535,32,FLEN)
NAN_BOXED(2096833061,32,FLEN)
NAN_BOXED(33716991,32,FLEN)
NAN_BOXED(788561919,32,FLEN)
NAN_BOXED(2096833061,32,FLEN)
NAN_BOXED(33716991,32,FLEN)
NAN_BOXED(788594687,32,FLEN)
NAN_BOXED(2096833061,32,FLEN)
NAN_BOXED(33716991,32,FLEN)
NAN_BOXED(788660223,32,FLEN)
NAN_BOXED(2096833061,32,FLEN)
NAN_BOXED(33716991,32,FLEN)
NAN_BOXED(788791295,32,FLEN)
NAN_BOXED(2096833061,32,FLEN)
NAN_BOXED(33716991,32,FLEN)
NAN_BOXED(789053439,32,FLEN)
NAN_BOXED(2096833061,32,FLEN)
NAN_BOXED(33716991,32,FLEN)
NAN_BOXED(789577727,32,FLEN)
NAN_BOXED(2096833061,32,FLEN)
NAN_BOXED(33716991,32,FLEN)
NAN_BOXED(790626303,32,FLEN)
NAN_BOXED(2096833061,32,FLEN)
NAN_BOXED(33716991,32,FLEN)
NAN_BOXED(792723455,32,FLEN)
NAN_BOXED(2096833061,32,FLEN)
NAN_BOXED(33716991,32,FLEN)
NAN_BOXED(792723456,32,FLEN)
NAN_BOXED(2096833061,32,FLEN)
NAN_BOXED(33716991,32,FLEN)
NAN_BOXED(794820608,32,FLEN)
NAN_BOXED(2096833061,32,FLEN)
NAN_BOXED(33716991,32,FLEN)
NAN_BOXED(795869184,32,FLEN)
NAN_BOXED(2096833061,32,FLEN)
NAN_BOXED(33716991,32,FLEN)
NAN_BOXED(796393472,32,FLEN)
NAN_BOXED(2096833061,32,FLEN)
NAN_BOXED(33716991,32,FLEN)
NAN_BOXED(796655616,32,FLEN)
NAN_BOXED(2096833061,32,FLEN)
NAN_BOXED(33716991,32,FLEN)
NAN_BOXED(796786688,32,FLEN)
NAN_BOXED(2096833061,32,FLEN)
NAN_BOXED(33716991,32,FLEN)
NAN_BOXED(796852224,32,FLEN)
NAN_BOXED(2096833061,32,FLEN)
NAN_BOXED(33716991,32,FLEN)
NAN_BOXED(796884992,32,FLEN)
NAN_BOXED(2096833061,32,FLEN)
NAN_BOXED(33716991,32,FLEN)
NAN_BOXED(796901376,32,FLEN)
NAN_BOXED(2096833061,32,FLEN)
NAN_BOXED(33716991,32,FLEN)
NAN_BOXED(796909568,32,FLEN)
NAN_BOXED(2096833061,32,FLEN)
NAN_BOXED(33716991,32,FLEN)
NAN_BOXED(796913664,32,FLEN)
NAN_BOXED(2096833061,32,FLEN)
NAN_BOXED(33716991,32,FLEN)
NAN_BOXED(796915712,32,FLEN)
NAN_BOXED(2096833061,32,FLEN)
NAN_BOXED(33716991,32,FLEN)
NAN_BOXED(796916736,32,FLEN)
NAN_BOXED(2096833061,32,FLEN)
NAN_BOXED(33716991,32,FLEN)
NAN_BOXED(796917248,32,FLEN)
NAN_BOXED(2096833061,32,FLEN)
NAN_BOXED(33716991,32,FLEN)
NAN_BOXED(796917504,32,FLEN)
NAN_BOXED(2096833061,32,FLEN)
NAN_BOXED(33716991,32,FLEN)
NAN_BOXED(796917632,32,FLEN)
NAN_BOXED(2096833061,32,FLEN)
NAN_BOXED(33716991,32,FLEN)
NAN_BOXED(796917696,32,FLEN)
NAN_BOXED(2096833061,32,FLEN)
NAN_BOXED(33716991,32,FLEN)
NAN_BOXED(796917728,32,FLEN)
NAN_BOXED(2096833061,32,FLEN)
NAN_BOXED(33716991,32,FLEN)
NAN_BOXED(796917744,32,FLEN)
NAN_BOXED(2096833061,32,FLEN)
NAN_BOXED(33716991,32,FLEN)
NAN_BOXED(796917752,32,FLEN)
NAN_BOXED(2096833061,32,FLEN)
NAN_BOXED(33716991,32,FLEN)
NAN_BOXED(796917756,32,FLEN)
NAN_BOXED(2096833061,32,FLEN)
NAN_BOXED(33716991,32,FLEN)
NAN_BOXED(796917758,32,FLEN)
NAN_BOXED(2096833061,32,FLEN)
NAN_BOXED(33716991,32,FLEN)
NAN_BOXED(796917759,32,FLEN)
NAN_BOXED(2096833061,32,FLEN)
NAN_BOXED(33716991,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2096833061,32,FLEN)
NAN_BOXED(33716991,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2096833061,32,FLEN)
NAN_BOXED(33716991,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2096833061,32,FLEN)
NAN_BOXED(33716991,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2096833061,32,FLEN)
NAN_BOXED(33716991,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2096833061,32,FLEN)
NAN_BOXED(33716991,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
