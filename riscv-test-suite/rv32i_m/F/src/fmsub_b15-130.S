
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:07 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_16512:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e8ea8 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3bb87b and fs3 == 0 and fe3 == 0xcf and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae8ea8; op2val:0x403bb87b;
op3val:0x67ffffff; valaddr_reg:x3; val_offset:49536*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49536*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16513:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e8ea8 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3bb87b and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae8ea8; op2val:0x403bb87b;
op3val:0x7f000001; valaddr_reg:x3; val_offset:49539*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49539*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16514:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e8ea8 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3bb87b and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae8ea8; op2val:0x403bb87b;
op3val:0x7f000003; valaddr_reg:x3; val_offset:49542*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49542*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16515:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e8ea8 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3bb87b and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae8ea8; op2val:0x403bb87b;
op3val:0x7f000007; valaddr_reg:x3; val_offset:49545*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49545*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16516:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e8ea8 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3bb87b and fs3 == 0 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae8ea8; op2val:0x403bb87b;
op3val:0x7f199999; valaddr_reg:x3; val_offset:49548*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49548*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16517:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e8ea8 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3bb87b and fs3 == 0 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae8ea8; op2val:0x403bb87b;
op3val:0x7f249249; valaddr_reg:x3; val_offset:49551*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49551*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16518:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e8ea8 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3bb87b and fs3 == 0 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae8ea8; op2val:0x403bb87b;
op3val:0x7f333333; valaddr_reg:x3; val_offset:49554*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49554*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16519:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e8ea8 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3bb87b and fs3 == 0 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae8ea8; op2val:0x403bb87b;
op3val:0x7f36db6d; valaddr_reg:x3; val_offset:49557*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49557*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16520:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e8ea8 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3bb87b and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae8ea8; op2val:0x403bb87b;
op3val:0x7f3bbbbb; valaddr_reg:x3; val_offset:49560*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49560*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16521:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e8ea8 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3bb87b and fs3 == 0 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae8ea8; op2val:0x403bb87b;
op3val:0x7f444444; valaddr_reg:x3; val_offset:49563*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49563*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16522:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e8ea8 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3bb87b and fs3 == 0 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae8ea8; op2val:0x403bb87b;
op3val:0x7f4ccccc; valaddr_reg:x3; val_offset:49566*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49566*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16523:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e8ea8 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3bb87b and fs3 == 0 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae8ea8; op2val:0x403bb87b;
op3val:0x7f5b6db6; valaddr_reg:x3; val_offset:49569*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49569*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16524:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e8ea8 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3bb87b and fs3 == 0 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae8ea8; op2val:0x403bb87b;
op3val:0x7f666666; valaddr_reg:x3; val_offset:49572*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49572*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16525:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e8ea8 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3bb87b and fs3 == 0 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae8ea8; op2val:0x403bb87b;
op3val:0x7f6db6db; valaddr_reg:x3; val_offset:49575*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49575*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16526:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e8ea8 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3bb87b and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae8ea8; op2val:0x403bb87b;
op3val:0x7f7ffff8; valaddr_reg:x3; val_offset:49578*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49578*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16527:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e8ea8 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3bb87b and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae8ea8; op2val:0x403bb87b;
op3val:0x7f7ffffc; valaddr_reg:x3; val_offset:49581*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49581*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16528:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e8ea8 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3bb87b and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae8ea8; op2val:0x403bb87b;
op3val:0x7f7ffffe; valaddr_reg:x3; val_offset:49584*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49584*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16529:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e99b9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae99b9; op2val:0x80000000;
op3val:0x80000001; valaddr_reg:x3; val_offset:49587*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49587*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16530:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e99b9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae99b9; op2val:0x80000000;
op3val:0x80000003; valaddr_reg:x3; val_offset:49590*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49590*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16531:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e99b9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae99b9; op2val:0x80000000;
op3val:0x80000007; valaddr_reg:x3; val_offset:49593*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49593*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16532:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e99b9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae99b9; op2val:0x80000000;
op3val:0x80199999; valaddr_reg:x3; val_offset:49596*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49596*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16533:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e99b9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae99b9; op2val:0x80000000;
op3val:0x80249249; valaddr_reg:x3; val_offset:49599*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49599*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16534:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e99b9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae99b9; op2val:0x80000000;
op3val:0x80333333; valaddr_reg:x3; val_offset:49602*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49602*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16535:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e99b9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae99b9; op2val:0x80000000;
op3val:0x8036db6d; valaddr_reg:x3; val_offset:49605*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49605*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16536:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e99b9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae99b9; op2val:0x80000000;
op3val:0x803bbbbb; valaddr_reg:x3; val_offset:49608*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49608*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16537:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e99b9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae99b9; op2val:0x80000000;
op3val:0x80444444; valaddr_reg:x3; val_offset:49611*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49611*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16538:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e99b9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae99b9; op2val:0x80000000;
op3val:0x804ccccc; valaddr_reg:x3; val_offset:49614*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49614*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16539:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e99b9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae99b9; op2val:0x80000000;
op3val:0x805b6db6; valaddr_reg:x3; val_offset:49617*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49617*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16540:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e99b9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae99b9; op2val:0x80000000;
op3val:0x80666666; valaddr_reg:x3; val_offset:49620*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49620*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16541:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e99b9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae99b9; op2val:0x80000000;
op3val:0x806db6db; valaddr_reg:x3; val_offset:49623*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49623*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16542:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e99b9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae99b9; op2val:0x80000000;
op3val:0x807ffff8; valaddr_reg:x3; val_offset:49626*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49626*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16543:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e99b9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae99b9; op2val:0x80000000;
op3val:0x807ffffc; valaddr_reg:x3; val_offset:49629*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49629*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16544:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e99b9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae99b9; op2val:0x80000000;
op3val:0x807ffffe; valaddr_reg:x3; val_offset:49632*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49632*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16545:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e99b9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae99b9; op2val:0x80000000;
op3val:0x88800000; valaddr_reg:x3; val_offset:49635*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49635*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16546:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e99b9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae99b9; op2val:0x80000000;
op3val:0x88800001; valaddr_reg:x3; val_offset:49638*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49638*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16547:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e99b9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae99b9; op2val:0x80000000;
op3val:0x88800003; valaddr_reg:x3; val_offset:49641*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49641*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16548:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e99b9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae99b9; op2val:0x80000000;
op3val:0x88800007; valaddr_reg:x3; val_offset:49644*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49644*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16549:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e99b9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae99b9; op2val:0x80000000;
op3val:0x8880000f; valaddr_reg:x3; val_offset:49647*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49647*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16550:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e99b9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae99b9; op2val:0x80000000;
op3val:0x8880001f; valaddr_reg:x3; val_offset:49650*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49650*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16551:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e99b9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae99b9; op2val:0x80000000;
op3val:0x8880003f; valaddr_reg:x3; val_offset:49653*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49653*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16552:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e99b9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae99b9; op2val:0x80000000;
op3val:0x8880007f; valaddr_reg:x3; val_offset:49656*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49656*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16553:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e99b9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae99b9; op2val:0x80000000;
op3val:0x888000ff; valaddr_reg:x3; val_offset:49659*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49659*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16554:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e99b9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae99b9; op2val:0x80000000;
op3val:0x888001ff; valaddr_reg:x3; val_offset:49662*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49662*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16555:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e99b9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae99b9; op2val:0x80000000;
op3val:0x888003ff; valaddr_reg:x3; val_offset:49665*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49665*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16556:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e99b9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae99b9; op2val:0x80000000;
op3val:0x888007ff; valaddr_reg:x3; val_offset:49668*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49668*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16557:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e99b9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae99b9; op2val:0x80000000;
op3val:0x88800fff; valaddr_reg:x3; val_offset:49671*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49671*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16558:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e99b9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae99b9; op2val:0x80000000;
op3val:0x88801fff; valaddr_reg:x3; val_offset:49674*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49674*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16559:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e99b9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae99b9; op2val:0x80000000;
op3val:0x88803fff; valaddr_reg:x3; val_offset:49677*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49677*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16560:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e99b9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae99b9; op2val:0x80000000;
op3val:0x88807fff; valaddr_reg:x3; val_offset:49680*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49680*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16561:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e99b9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae99b9; op2val:0x80000000;
op3val:0x8880ffff; valaddr_reg:x3; val_offset:49683*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49683*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16562:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e99b9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae99b9; op2val:0x80000000;
op3val:0x8881ffff; valaddr_reg:x3; val_offset:49686*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49686*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16563:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e99b9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae99b9; op2val:0x80000000;
op3val:0x8883ffff; valaddr_reg:x3; val_offset:49689*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49689*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16564:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e99b9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae99b9; op2val:0x80000000;
op3val:0x8887ffff; valaddr_reg:x3; val_offset:49692*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49692*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16565:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e99b9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae99b9; op2val:0x80000000;
op3val:0x888fffff; valaddr_reg:x3; val_offset:49695*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49695*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16566:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e99b9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae99b9; op2val:0x80000000;
op3val:0x889fffff; valaddr_reg:x3; val_offset:49698*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49698*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16567:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e99b9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae99b9; op2val:0x80000000;
op3val:0x88bfffff; valaddr_reg:x3; val_offset:49701*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49701*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16568:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e99b9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae99b9; op2val:0x80000000;
op3val:0x88c00000; valaddr_reg:x3; val_offset:49704*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49704*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16569:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e99b9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae99b9; op2val:0x80000000;
op3val:0x88e00000; valaddr_reg:x3; val_offset:49707*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49707*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16570:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e99b9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae99b9; op2val:0x80000000;
op3val:0x88f00000; valaddr_reg:x3; val_offset:49710*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49710*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16571:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e99b9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae99b9; op2val:0x80000000;
op3val:0x88f80000; valaddr_reg:x3; val_offset:49713*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49713*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16572:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e99b9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae99b9; op2val:0x80000000;
op3val:0x88fc0000; valaddr_reg:x3; val_offset:49716*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49716*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16573:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e99b9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae99b9; op2val:0x80000000;
op3val:0x88fe0000; valaddr_reg:x3; val_offset:49719*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49719*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16574:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e99b9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae99b9; op2val:0x80000000;
op3val:0x88ff0000; valaddr_reg:x3; val_offset:49722*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49722*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16575:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e99b9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae99b9; op2val:0x80000000;
op3val:0x88ff8000; valaddr_reg:x3; val_offset:49725*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49725*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16576:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e99b9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae99b9; op2val:0x80000000;
op3val:0x88ffc000; valaddr_reg:x3; val_offset:49728*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49728*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16577:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e99b9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae99b9; op2val:0x80000000;
op3val:0x88ffe000; valaddr_reg:x3; val_offset:49731*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49731*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16578:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e99b9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae99b9; op2val:0x80000000;
op3val:0x88fff000; valaddr_reg:x3; val_offset:49734*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49734*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16579:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e99b9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae99b9; op2val:0x80000000;
op3val:0x88fff800; valaddr_reg:x3; val_offset:49737*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49737*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16580:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e99b9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae99b9; op2val:0x80000000;
op3val:0x88fffc00; valaddr_reg:x3; val_offset:49740*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49740*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16581:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e99b9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae99b9; op2val:0x80000000;
op3val:0x88fffe00; valaddr_reg:x3; val_offset:49743*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49743*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16582:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e99b9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae99b9; op2val:0x80000000;
op3val:0x88ffff00; valaddr_reg:x3; val_offset:49746*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49746*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16583:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e99b9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae99b9; op2val:0x80000000;
op3val:0x88ffff80; valaddr_reg:x3; val_offset:49749*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49749*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16584:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e99b9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae99b9; op2val:0x80000000;
op3val:0x88ffffc0; valaddr_reg:x3; val_offset:49752*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49752*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16585:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e99b9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae99b9; op2val:0x80000000;
op3val:0x88ffffe0; valaddr_reg:x3; val_offset:49755*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49755*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16586:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e99b9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae99b9; op2val:0x80000000;
op3val:0x88fffff0; valaddr_reg:x3; val_offset:49758*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49758*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16587:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e99b9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae99b9; op2val:0x80000000;
op3val:0x88fffff8; valaddr_reg:x3; val_offset:49761*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49761*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16588:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e99b9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae99b9; op2val:0x80000000;
op3val:0x88fffffc; valaddr_reg:x3; val_offset:49764*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49764*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16589:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e99b9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae99b9; op2val:0x80000000;
op3val:0x88fffffe; valaddr_reg:x3; val_offset:49767*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49767*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16590:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e99b9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae99b9; op2val:0x80000000;
op3val:0x88ffffff; valaddr_reg:x3; val_offset:49770*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49770*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16591:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2f50cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaf50cc; op2val:0x80000000;
op3val:0x80000001; valaddr_reg:x3; val_offset:49773*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49773*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16592:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2f50cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaf50cc; op2val:0x80000000;
op3val:0x80000003; valaddr_reg:x3; val_offset:49776*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49776*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16593:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2f50cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaf50cc; op2val:0x80000000;
op3val:0x80000007; valaddr_reg:x3; val_offset:49779*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49779*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16594:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2f50cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaf50cc; op2val:0x80000000;
op3val:0x80199999; valaddr_reg:x3; val_offset:49782*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49782*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16595:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2f50cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaf50cc; op2val:0x80000000;
op3val:0x80249249; valaddr_reg:x3; val_offset:49785*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49785*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16596:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2f50cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaf50cc; op2val:0x80000000;
op3val:0x80333333; valaddr_reg:x3; val_offset:49788*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49788*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16597:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2f50cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaf50cc; op2val:0x80000000;
op3val:0x8036db6d; valaddr_reg:x3; val_offset:49791*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49791*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16598:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2f50cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaf50cc; op2val:0x80000000;
op3val:0x803bbbbb; valaddr_reg:x3; val_offset:49794*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49794*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16599:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2f50cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaf50cc; op2val:0x80000000;
op3val:0x80444444; valaddr_reg:x3; val_offset:49797*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49797*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16600:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2f50cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaf50cc; op2val:0x80000000;
op3val:0x804ccccc; valaddr_reg:x3; val_offset:49800*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49800*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16601:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2f50cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaf50cc; op2val:0x80000000;
op3val:0x805b6db6; valaddr_reg:x3; val_offset:49803*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49803*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16602:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2f50cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaf50cc; op2val:0x80000000;
op3val:0x80666666; valaddr_reg:x3; val_offset:49806*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49806*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16603:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2f50cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaf50cc; op2val:0x80000000;
op3val:0x806db6db; valaddr_reg:x3; val_offset:49809*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49809*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16604:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2f50cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaf50cc; op2val:0x80000000;
op3val:0x807ffff8; valaddr_reg:x3; val_offset:49812*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49812*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16605:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2f50cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaf50cc; op2val:0x80000000;
op3val:0x807ffffc; valaddr_reg:x3; val_offset:49815*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49815*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16606:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2f50cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaf50cc; op2val:0x80000000;
op3val:0x807ffffe; valaddr_reg:x3; val_offset:49818*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49818*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16607:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2f50cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaf50cc; op2val:0x80000000;
op3val:0x8b000000; valaddr_reg:x3; val_offset:49821*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49821*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16608:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2f50cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaf50cc; op2val:0x80000000;
op3val:0x8b000001; valaddr_reg:x3; val_offset:49824*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49824*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16609:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2f50cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaf50cc; op2val:0x80000000;
op3val:0x8b000003; valaddr_reg:x3; val_offset:49827*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49827*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16610:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2f50cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaf50cc; op2val:0x80000000;
op3val:0x8b000007; valaddr_reg:x3; val_offset:49830*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49830*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16611:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2f50cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaf50cc; op2val:0x80000000;
op3val:0x8b00000f; valaddr_reg:x3; val_offset:49833*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49833*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16612:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2f50cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaf50cc; op2val:0x80000000;
op3val:0x8b00001f; valaddr_reg:x3; val_offset:49836*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49836*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16613:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2f50cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaf50cc; op2val:0x80000000;
op3val:0x8b00003f; valaddr_reg:x3; val_offset:49839*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49839*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16614:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2f50cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaf50cc; op2val:0x80000000;
op3val:0x8b00007f; valaddr_reg:x3; val_offset:49842*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49842*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16615:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2f50cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaf50cc; op2val:0x80000000;
op3val:0x8b0000ff; valaddr_reg:x3; val_offset:49845*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49845*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16616:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2f50cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaf50cc; op2val:0x80000000;
op3val:0x8b0001ff; valaddr_reg:x3; val_offset:49848*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49848*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16617:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2f50cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaf50cc; op2val:0x80000000;
op3val:0x8b0003ff; valaddr_reg:x3; val_offset:49851*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49851*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16618:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2f50cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaf50cc; op2val:0x80000000;
op3val:0x8b0007ff; valaddr_reg:x3; val_offset:49854*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49854*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16619:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2f50cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaf50cc; op2val:0x80000000;
op3val:0x8b000fff; valaddr_reg:x3; val_offset:49857*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49857*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16620:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2f50cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaf50cc; op2val:0x80000000;
op3val:0x8b001fff; valaddr_reg:x3; val_offset:49860*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49860*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16621:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2f50cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaf50cc; op2val:0x80000000;
op3val:0x8b003fff; valaddr_reg:x3; val_offset:49863*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49863*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16622:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2f50cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaf50cc; op2val:0x80000000;
op3val:0x8b007fff; valaddr_reg:x3; val_offset:49866*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49866*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16623:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2f50cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaf50cc; op2val:0x80000000;
op3val:0x8b00ffff; valaddr_reg:x3; val_offset:49869*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49869*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16624:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2f50cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaf50cc; op2val:0x80000000;
op3val:0x8b01ffff; valaddr_reg:x3; val_offset:49872*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49872*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16625:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2f50cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaf50cc; op2val:0x80000000;
op3val:0x8b03ffff; valaddr_reg:x3; val_offset:49875*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49875*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16626:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2f50cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaf50cc; op2val:0x80000000;
op3val:0x8b07ffff; valaddr_reg:x3; val_offset:49878*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49878*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16627:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2f50cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaf50cc; op2val:0x80000000;
op3val:0x8b0fffff; valaddr_reg:x3; val_offset:49881*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49881*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16628:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2f50cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaf50cc; op2val:0x80000000;
op3val:0x8b1fffff; valaddr_reg:x3; val_offset:49884*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49884*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16629:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2f50cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaf50cc; op2val:0x80000000;
op3val:0x8b3fffff; valaddr_reg:x3; val_offset:49887*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49887*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16630:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2f50cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaf50cc; op2val:0x80000000;
op3val:0x8b400000; valaddr_reg:x3; val_offset:49890*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49890*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16631:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2f50cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaf50cc; op2val:0x80000000;
op3val:0x8b600000; valaddr_reg:x3; val_offset:49893*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49893*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16632:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2f50cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaf50cc; op2val:0x80000000;
op3val:0x8b700000; valaddr_reg:x3; val_offset:49896*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49896*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16633:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2f50cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaf50cc; op2val:0x80000000;
op3val:0x8b780000; valaddr_reg:x3; val_offset:49899*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49899*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16634:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2f50cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaf50cc; op2val:0x80000000;
op3val:0x8b7c0000; valaddr_reg:x3; val_offset:49902*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49902*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16635:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2f50cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaf50cc; op2val:0x80000000;
op3val:0x8b7e0000; valaddr_reg:x3; val_offset:49905*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49905*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16636:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2f50cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaf50cc; op2val:0x80000000;
op3val:0x8b7f0000; valaddr_reg:x3; val_offset:49908*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49908*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16637:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2f50cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaf50cc; op2val:0x80000000;
op3val:0x8b7f8000; valaddr_reg:x3; val_offset:49911*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49911*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16638:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2f50cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaf50cc; op2val:0x80000000;
op3val:0x8b7fc000; valaddr_reg:x3; val_offset:49914*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49914*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16639:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2f50cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaf50cc; op2val:0x80000000;
op3val:0x8b7fe000; valaddr_reg:x3; val_offset:49917*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49917*0 + 3*129*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2125369000,32,FLEN)
NAN_BOXED(1077655675,32,FLEN)
NAN_BOXED(1744830463,32,FLEN)
NAN_BOXED(2125369000,32,FLEN)
NAN_BOXED(1077655675,32,FLEN)
NAN_BOXED(2130706433,32,FLEN)
NAN_BOXED(2125369000,32,FLEN)
NAN_BOXED(1077655675,32,FLEN)
NAN_BOXED(2130706435,32,FLEN)
NAN_BOXED(2125369000,32,FLEN)
NAN_BOXED(1077655675,32,FLEN)
NAN_BOXED(2130706439,32,FLEN)
NAN_BOXED(2125369000,32,FLEN)
NAN_BOXED(1077655675,32,FLEN)
NAN_BOXED(2132384153,32,FLEN)
NAN_BOXED(2125369000,32,FLEN)
NAN_BOXED(1077655675,32,FLEN)
NAN_BOXED(2133103177,32,FLEN)
NAN_BOXED(2125369000,32,FLEN)
NAN_BOXED(1077655675,32,FLEN)
NAN_BOXED(2134061875,32,FLEN)
NAN_BOXED(2125369000,32,FLEN)
NAN_BOXED(1077655675,32,FLEN)
NAN_BOXED(2134301549,32,FLEN)
NAN_BOXED(2125369000,32,FLEN)
NAN_BOXED(1077655675,32,FLEN)
NAN_BOXED(2134621115,32,FLEN)
NAN_BOXED(2125369000,32,FLEN)
NAN_BOXED(1077655675,32,FLEN)
NAN_BOXED(2135180356,32,FLEN)
NAN_BOXED(2125369000,32,FLEN)
NAN_BOXED(1077655675,32,FLEN)
NAN_BOXED(2135739596,32,FLEN)
NAN_BOXED(2125369000,32,FLEN)
NAN_BOXED(1077655675,32,FLEN)
NAN_BOXED(2136698294,32,FLEN)
NAN_BOXED(2125369000,32,FLEN)
NAN_BOXED(1077655675,32,FLEN)
NAN_BOXED(2137417318,32,FLEN)
NAN_BOXED(2125369000,32,FLEN)
NAN_BOXED(1077655675,32,FLEN)
NAN_BOXED(2137896667,32,FLEN)
NAN_BOXED(2125369000,32,FLEN)
NAN_BOXED(1077655675,32,FLEN)
NAN_BOXED(2139095032,32,FLEN)
NAN_BOXED(2125369000,32,FLEN)
NAN_BOXED(1077655675,32,FLEN)
NAN_BOXED(2139095036,32,FLEN)
NAN_BOXED(2125369000,32,FLEN)
NAN_BOXED(1077655675,32,FLEN)
NAN_BOXED(2139095038,32,FLEN)
NAN_BOXED(2125371833,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2125371833,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483651,32,FLEN)
NAN_BOXED(2125371833,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483655,32,FLEN)
NAN_BOXED(2125371833,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149161369,32,FLEN)
NAN_BOXED(2125371833,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149880393,32,FLEN)
NAN_BOXED(2125371833,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2150839091,32,FLEN)
NAN_BOXED(2125371833,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151078765,32,FLEN)
NAN_BOXED(2125371833,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151398331,32,FLEN)
NAN_BOXED(2125371833,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151957572,32,FLEN)
NAN_BOXED(2125371833,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2152516812,32,FLEN)
NAN_BOXED(2125371833,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2153475510,32,FLEN)
NAN_BOXED(2125371833,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154194534,32,FLEN)
NAN_BOXED(2125371833,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154673883,32,FLEN)
NAN_BOXED(2125371833,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872248,32,FLEN)
NAN_BOXED(2125371833,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872252,32,FLEN)
NAN_BOXED(2125371833,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2125371833,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290089984,32,FLEN)
NAN_BOXED(2125371833,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290089985,32,FLEN)
NAN_BOXED(2125371833,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290089987,32,FLEN)
NAN_BOXED(2125371833,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290089991,32,FLEN)
NAN_BOXED(2125371833,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290089999,32,FLEN)
NAN_BOXED(2125371833,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290090015,32,FLEN)
NAN_BOXED(2125371833,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290090047,32,FLEN)
NAN_BOXED(2125371833,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290090111,32,FLEN)
NAN_BOXED(2125371833,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290090239,32,FLEN)
NAN_BOXED(2125371833,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290090495,32,FLEN)
NAN_BOXED(2125371833,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290091007,32,FLEN)
NAN_BOXED(2125371833,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290092031,32,FLEN)
NAN_BOXED(2125371833,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290094079,32,FLEN)
NAN_BOXED(2125371833,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290098175,32,FLEN)
NAN_BOXED(2125371833,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290106367,32,FLEN)
NAN_BOXED(2125371833,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290122751,32,FLEN)
NAN_BOXED(2125371833,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290155519,32,FLEN)
NAN_BOXED(2125371833,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290221055,32,FLEN)
NAN_BOXED(2125371833,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290352127,32,FLEN)
NAN_BOXED(2125371833,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290614271,32,FLEN)
NAN_BOXED(2125371833,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2291138559,32,FLEN)
NAN_BOXED(2125371833,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2292187135,32,FLEN)
NAN_BOXED(2125371833,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2294284287,32,FLEN)
NAN_BOXED(2125371833,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2294284288,32,FLEN)
NAN_BOXED(2125371833,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2296381440,32,FLEN)
NAN_BOXED(2125371833,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2297430016,32,FLEN)
NAN_BOXED(2125371833,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2297954304,32,FLEN)
NAN_BOXED(2125371833,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298216448,32,FLEN)
NAN_BOXED(2125371833,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298347520,32,FLEN)
NAN_BOXED(2125371833,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298413056,32,FLEN)
NAN_BOXED(2125371833,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298445824,32,FLEN)
NAN_BOXED(2125371833,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298462208,32,FLEN)
NAN_BOXED(2125371833,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298470400,32,FLEN)
NAN_BOXED(2125371833,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298474496,32,FLEN)
NAN_BOXED(2125371833,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298476544,32,FLEN)
NAN_BOXED(2125371833,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298477568,32,FLEN)
NAN_BOXED(2125371833,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298478080,32,FLEN)
NAN_BOXED(2125371833,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298478336,32,FLEN)
NAN_BOXED(2125371833,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298478464,32,FLEN)
NAN_BOXED(2125371833,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298478528,32,FLEN)
NAN_BOXED(2125371833,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298478560,32,FLEN)
NAN_BOXED(2125371833,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298478576,32,FLEN)
NAN_BOXED(2125371833,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298478584,32,FLEN)
NAN_BOXED(2125371833,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298478588,32,FLEN)
NAN_BOXED(2125371833,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298478590,32,FLEN)
NAN_BOXED(2125371833,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298478591,32,FLEN)
NAN_BOXED(2125418700,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2125418700,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483651,32,FLEN)
NAN_BOXED(2125418700,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483655,32,FLEN)
NAN_BOXED(2125418700,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149161369,32,FLEN)
NAN_BOXED(2125418700,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149880393,32,FLEN)
NAN_BOXED(2125418700,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2150839091,32,FLEN)
NAN_BOXED(2125418700,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151078765,32,FLEN)
NAN_BOXED(2125418700,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151398331,32,FLEN)
NAN_BOXED(2125418700,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151957572,32,FLEN)
NAN_BOXED(2125418700,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2152516812,32,FLEN)
NAN_BOXED(2125418700,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2153475510,32,FLEN)
NAN_BOXED(2125418700,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154194534,32,FLEN)
NAN_BOXED(2125418700,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154673883,32,FLEN)
NAN_BOXED(2125418700,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872248,32,FLEN)
NAN_BOXED(2125418700,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872252,32,FLEN)
NAN_BOXED(2125418700,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2125418700,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332033024,32,FLEN)
NAN_BOXED(2125418700,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332033025,32,FLEN)
NAN_BOXED(2125418700,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332033027,32,FLEN)
NAN_BOXED(2125418700,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332033031,32,FLEN)
NAN_BOXED(2125418700,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332033039,32,FLEN)
NAN_BOXED(2125418700,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332033055,32,FLEN)
NAN_BOXED(2125418700,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332033087,32,FLEN)
NAN_BOXED(2125418700,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332033151,32,FLEN)
NAN_BOXED(2125418700,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332033279,32,FLEN)
NAN_BOXED(2125418700,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332033535,32,FLEN)
NAN_BOXED(2125418700,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332034047,32,FLEN)
NAN_BOXED(2125418700,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332035071,32,FLEN)
NAN_BOXED(2125418700,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332037119,32,FLEN)
NAN_BOXED(2125418700,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332041215,32,FLEN)
NAN_BOXED(2125418700,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332049407,32,FLEN)
NAN_BOXED(2125418700,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332065791,32,FLEN)
NAN_BOXED(2125418700,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332098559,32,FLEN)
NAN_BOXED(2125418700,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332164095,32,FLEN)
NAN_BOXED(2125418700,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332295167,32,FLEN)
NAN_BOXED(2125418700,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332557311,32,FLEN)
NAN_BOXED(2125418700,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2333081599,32,FLEN)
NAN_BOXED(2125418700,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2334130175,32,FLEN)
NAN_BOXED(2125418700,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2336227327,32,FLEN)
NAN_BOXED(2125418700,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2336227328,32,FLEN)
NAN_BOXED(2125418700,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2338324480,32,FLEN)
NAN_BOXED(2125418700,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2339373056,32,FLEN)
NAN_BOXED(2125418700,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2339897344,32,FLEN)
NAN_BOXED(2125418700,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340159488,32,FLEN)
NAN_BOXED(2125418700,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340290560,32,FLEN)
NAN_BOXED(2125418700,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340356096,32,FLEN)
NAN_BOXED(2125418700,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340388864,32,FLEN)
NAN_BOXED(2125418700,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340405248,32,FLEN)
NAN_BOXED(2125418700,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340413440,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
