
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:07 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_16896:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x30c35c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb0c35c; op2val:0x0;
op3val:0x3fffff0; valaddr_reg:x3; val_offset:50688*0 + 3*132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50688*0 + 3*132*FLEN/8, x4, x1, x2)

inst_16897:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x30c35c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb0c35c; op2val:0x0;
op3val:0x3fffff8; valaddr_reg:x3; val_offset:50691*0 + 3*132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50691*0 + 3*132*FLEN/8, x4, x1, x2)

inst_16898:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x30c35c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb0c35c; op2val:0x0;
op3val:0x3fffffc; valaddr_reg:x3; val_offset:50694*0 + 3*132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50694*0 + 3*132*FLEN/8, x4, x1, x2)

inst_16899:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x30c35c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb0c35c; op2val:0x0;
op3val:0x3fffffe; valaddr_reg:x3; val_offset:50697*0 + 3*132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50697*0 + 3*132*FLEN/8, x4, x1, x2)

inst_16900:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x30c35c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb0c35c; op2val:0x0;
op3val:0x3ffffff; valaddr_reg:x3; val_offset:50700*0 + 3*132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50700*0 + 3*132*FLEN/8, x4, x1, x2)

inst_16901:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x310056 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb10056; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:50703*0 + 3*132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50703*0 + 3*132*FLEN/8, x4, x1, x2)

inst_16902:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x310056 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb10056; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:50706*0 + 3*132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50706*0 + 3*132*FLEN/8, x4, x1, x2)

inst_16903:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x310056 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb10056; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:50709*0 + 3*132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50709*0 + 3*132*FLEN/8, x4, x1, x2)

inst_16904:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x310056 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb10056; op2val:0x0;
op3val:0x199999; valaddr_reg:x3; val_offset:50712*0 + 3*132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50712*0 + 3*132*FLEN/8, x4, x1, x2)

inst_16905:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x310056 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb10056; op2val:0x0;
op3val:0x249249; valaddr_reg:x3; val_offset:50715*0 + 3*132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50715*0 + 3*132*FLEN/8, x4, x1, x2)

inst_16906:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x310056 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb10056; op2val:0x0;
op3val:0x333333; valaddr_reg:x3; val_offset:50718*0 + 3*132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50718*0 + 3*132*FLEN/8, x4, x1, x2)

inst_16907:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x310056 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb10056; op2val:0x0;
op3val:0x36db6d; valaddr_reg:x3; val_offset:50721*0 + 3*132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50721*0 + 3*132*FLEN/8, x4, x1, x2)

inst_16908:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x310056 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb10056; op2val:0x0;
op3val:0x3bbbbb; valaddr_reg:x3; val_offset:50724*0 + 3*132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50724*0 + 3*132*FLEN/8, x4, x1, x2)

inst_16909:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x310056 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb10056; op2val:0x0;
op3val:0x444444; valaddr_reg:x3; val_offset:50727*0 + 3*132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50727*0 + 3*132*FLEN/8, x4, x1, x2)

inst_16910:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x310056 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb10056; op2val:0x0;
op3val:0x4ccccc; valaddr_reg:x3; val_offset:50730*0 + 3*132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50730*0 + 3*132*FLEN/8, x4, x1, x2)

inst_16911:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x310056 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb10056; op2val:0x0;
op3val:0x5b6db6; valaddr_reg:x3; val_offset:50733*0 + 3*132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50733*0 + 3*132*FLEN/8, x4, x1, x2)

inst_16912:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x310056 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb10056; op2val:0x0;
op3val:0x666666; valaddr_reg:x3; val_offset:50736*0 + 3*132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50736*0 + 3*132*FLEN/8, x4, x1, x2)

inst_16913:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x310056 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb10056; op2val:0x0;
op3val:0x6db6db; valaddr_reg:x3; val_offset:50739*0 + 3*132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50739*0 + 3*132*FLEN/8, x4, x1, x2)

inst_16914:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x310056 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb10056; op2val:0x0;
op3val:0x7ffff8; valaddr_reg:x3; val_offset:50742*0 + 3*132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50742*0 + 3*132*FLEN/8, x4, x1, x2)

inst_16915:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x310056 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb10056; op2val:0x0;
op3val:0x7ffffc; valaddr_reg:x3; val_offset:50745*0 + 3*132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50745*0 + 3*132*FLEN/8, x4, x1, x2)

inst_16916:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x310056 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb10056; op2val:0x0;
op3val:0x7ffffe; valaddr_reg:x3; val_offset:50748*0 + 3*132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50748*0 + 3*132*FLEN/8, x4, x1, x2)

inst_16917:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x310056 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb10056; op2val:0x0;
op3val:0x4800000; valaddr_reg:x3; val_offset:50751*0 + 3*132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50751*0 + 3*132*FLEN/8, x4, x1, x2)

inst_16918:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x310056 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb10056; op2val:0x0;
op3val:0x4800001; valaddr_reg:x3; val_offset:50754*0 + 3*132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50754*0 + 3*132*FLEN/8, x4, x1, x2)

inst_16919:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x310056 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb10056; op2val:0x0;
op3val:0x4800003; valaddr_reg:x3; val_offset:50757*0 + 3*132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50757*0 + 3*132*FLEN/8, x4, x1, x2)

inst_16920:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x310056 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb10056; op2val:0x0;
op3val:0x4800007; valaddr_reg:x3; val_offset:50760*0 + 3*132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50760*0 + 3*132*FLEN/8, x4, x1, x2)

inst_16921:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x310056 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb10056; op2val:0x0;
op3val:0x480000f; valaddr_reg:x3; val_offset:50763*0 + 3*132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50763*0 + 3*132*FLEN/8, x4, x1, x2)

inst_16922:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x310056 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb10056; op2val:0x0;
op3val:0x480001f; valaddr_reg:x3; val_offset:50766*0 + 3*132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50766*0 + 3*132*FLEN/8, x4, x1, x2)

inst_16923:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x310056 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb10056; op2val:0x0;
op3val:0x480003f; valaddr_reg:x3; val_offset:50769*0 + 3*132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50769*0 + 3*132*FLEN/8, x4, x1, x2)

inst_16924:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x310056 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb10056; op2val:0x0;
op3val:0x480007f; valaddr_reg:x3; val_offset:50772*0 + 3*132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50772*0 + 3*132*FLEN/8, x4, x1, x2)

inst_16925:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x310056 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb10056; op2val:0x0;
op3val:0x48000ff; valaddr_reg:x3; val_offset:50775*0 + 3*132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50775*0 + 3*132*FLEN/8, x4, x1, x2)

inst_16926:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x310056 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb10056; op2val:0x0;
op3val:0x48001ff; valaddr_reg:x3; val_offset:50778*0 + 3*132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50778*0 + 3*132*FLEN/8, x4, x1, x2)

inst_16927:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x310056 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb10056; op2val:0x0;
op3val:0x48003ff; valaddr_reg:x3; val_offset:50781*0 + 3*132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50781*0 + 3*132*FLEN/8, x4, x1, x2)

inst_16928:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x310056 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb10056; op2val:0x0;
op3val:0x48007ff; valaddr_reg:x3; val_offset:50784*0 + 3*132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50784*0 + 3*132*FLEN/8, x4, x1, x2)

inst_16929:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x310056 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb10056; op2val:0x0;
op3val:0x4800fff; valaddr_reg:x3; val_offset:50787*0 + 3*132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50787*0 + 3*132*FLEN/8, x4, x1, x2)

inst_16930:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x310056 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb10056; op2val:0x0;
op3val:0x4801fff; valaddr_reg:x3; val_offset:50790*0 + 3*132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50790*0 + 3*132*FLEN/8, x4, x1, x2)

inst_16931:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x310056 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb10056; op2val:0x0;
op3val:0x4803fff; valaddr_reg:x3; val_offset:50793*0 + 3*132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50793*0 + 3*132*FLEN/8, x4, x1, x2)

inst_16932:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x310056 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb10056; op2val:0x0;
op3val:0x4807fff; valaddr_reg:x3; val_offset:50796*0 + 3*132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50796*0 + 3*132*FLEN/8, x4, x1, x2)

inst_16933:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x310056 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb10056; op2val:0x0;
op3val:0x480ffff; valaddr_reg:x3; val_offset:50799*0 + 3*132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50799*0 + 3*132*FLEN/8, x4, x1, x2)

inst_16934:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x310056 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb10056; op2val:0x0;
op3val:0x481ffff; valaddr_reg:x3; val_offset:50802*0 + 3*132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50802*0 + 3*132*FLEN/8, x4, x1, x2)

inst_16935:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x310056 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb10056; op2val:0x0;
op3val:0x483ffff; valaddr_reg:x3; val_offset:50805*0 + 3*132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50805*0 + 3*132*FLEN/8, x4, x1, x2)

inst_16936:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x310056 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb10056; op2val:0x0;
op3val:0x487ffff; valaddr_reg:x3; val_offset:50808*0 + 3*132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50808*0 + 3*132*FLEN/8, x4, x1, x2)

inst_16937:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x310056 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb10056; op2val:0x0;
op3val:0x48fffff; valaddr_reg:x3; val_offset:50811*0 + 3*132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50811*0 + 3*132*FLEN/8, x4, x1, x2)

inst_16938:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x310056 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb10056; op2val:0x0;
op3val:0x49fffff; valaddr_reg:x3; val_offset:50814*0 + 3*132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50814*0 + 3*132*FLEN/8, x4, x1, x2)

inst_16939:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x310056 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb10056; op2val:0x0;
op3val:0x4bfffff; valaddr_reg:x3; val_offset:50817*0 + 3*132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50817*0 + 3*132*FLEN/8, x4, x1, x2)

inst_16940:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x310056 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb10056; op2val:0x0;
op3val:0x4c00000; valaddr_reg:x3; val_offset:50820*0 + 3*132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50820*0 + 3*132*FLEN/8, x4, x1, x2)

inst_16941:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x310056 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb10056; op2val:0x0;
op3val:0x4e00000; valaddr_reg:x3; val_offset:50823*0 + 3*132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50823*0 + 3*132*FLEN/8, x4, x1, x2)

inst_16942:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x310056 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb10056; op2val:0x0;
op3val:0x4f00000; valaddr_reg:x3; val_offset:50826*0 + 3*132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50826*0 + 3*132*FLEN/8, x4, x1, x2)

inst_16943:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x310056 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb10056; op2val:0x0;
op3val:0x4f80000; valaddr_reg:x3; val_offset:50829*0 + 3*132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50829*0 + 3*132*FLEN/8, x4, x1, x2)

inst_16944:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x310056 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb10056; op2val:0x0;
op3val:0x4fc0000; valaddr_reg:x3; val_offset:50832*0 + 3*132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50832*0 + 3*132*FLEN/8, x4, x1, x2)

inst_16945:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x310056 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb10056; op2val:0x0;
op3val:0x4fe0000; valaddr_reg:x3; val_offset:50835*0 + 3*132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50835*0 + 3*132*FLEN/8, x4, x1, x2)

inst_16946:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x310056 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb10056; op2val:0x0;
op3val:0x4ff0000; valaddr_reg:x3; val_offset:50838*0 + 3*132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50838*0 + 3*132*FLEN/8, x4, x1, x2)

inst_16947:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x310056 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb10056; op2val:0x0;
op3val:0x4ff8000; valaddr_reg:x3; val_offset:50841*0 + 3*132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50841*0 + 3*132*FLEN/8, x4, x1, x2)

inst_16948:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x310056 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb10056; op2val:0x0;
op3val:0x4ffc000; valaddr_reg:x3; val_offset:50844*0 + 3*132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50844*0 + 3*132*FLEN/8, x4, x1, x2)

inst_16949:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x310056 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb10056; op2val:0x0;
op3val:0x4ffe000; valaddr_reg:x3; val_offset:50847*0 + 3*132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50847*0 + 3*132*FLEN/8, x4, x1, x2)

inst_16950:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x310056 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb10056; op2val:0x0;
op3val:0x4fff000; valaddr_reg:x3; val_offset:50850*0 + 3*132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50850*0 + 3*132*FLEN/8, x4, x1, x2)

inst_16951:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x310056 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb10056; op2val:0x0;
op3val:0x4fff800; valaddr_reg:x3; val_offset:50853*0 + 3*132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50853*0 + 3*132*FLEN/8, x4, x1, x2)

inst_16952:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x310056 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb10056; op2val:0x0;
op3val:0x4fffc00; valaddr_reg:x3; val_offset:50856*0 + 3*132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50856*0 + 3*132*FLEN/8, x4, x1, x2)

inst_16953:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x310056 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb10056; op2val:0x0;
op3val:0x4fffe00; valaddr_reg:x3; val_offset:50859*0 + 3*132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50859*0 + 3*132*FLEN/8, x4, x1, x2)

inst_16954:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x310056 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb10056; op2val:0x0;
op3val:0x4ffff00; valaddr_reg:x3; val_offset:50862*0 + 3*132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50862*0 + 3*132*FLEN/8, x4, x1, x2)

inst_16955:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x310056 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb10056; op2val:0x0;
op3val:0x4ffff80; valaddr_reg:x3; val_offset:50865*0 + 3*132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50865*0 + 3*132*FLEN/8, x4, x1, x2)

inst_16956:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x310056 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb10056; op2val:0x0;
op3val:0x4ffffc0; valaddr_reg:x3; val_offset:50868*0 + 3*132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50868*0 + 3*132*FLEN/8, x4, x1, x2)

inst_16957:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x310056 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb10056; op2val:0x0;
op3val:0x4ffffe0; valaddr_reg:x3; val_offset:50871*0 + 3*132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50871*0 + 3*132*FLEN/8, x4, x1, x2)

inst_16958:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x310056 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb10056; op2val:0x0;
op3val:0x4fffff0; valaddr_reg:x3; val_offset:50874*0 + 3*132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50874*0 + 3*132*FLEN/8, x4, x1, x2)

inst_16959:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x310056 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb10056; op2val:0x0;
op3val:0x4fffff8; valaddr_reg:x3; val_offset:50877*0 + 3*132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50877*0 + 3*132*FLEN/8, x4, x1, x2)

inst_16960:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x310056 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb10056; op2val:0x0;
op3val:0x4fffffc; valaddr_reg:x3; val_offset:50880*0 + 3*132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50880*0 + 3*132*FLEN/8, x4, x1, x2)

inst_16961:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x310056 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb10056; op2val:0x0;
op3val:0x4fffffe; valaddr_reg:x3; val_offset:50883*0 + 3*132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50883*0 + 3*132*FLEN/8, x4, x1, x2)

inst_16962:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x310056 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb10056; op2val:0x0;
op3val:0x4ffffff; valaddr_reg:x3; val_offset:50886*0 + 3*132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50886*0 + 3*132*FLEN/8, x4, x1, x2)

inst_16963:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x31ec28 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5c15c5 and fs3 == 1 and fe3 == 0x64 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb1ec28; op2val:0x805c15c5;
op3val:0xb2000000; valaddr_reg:x3; val_offset:50889*0 + 3*132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50889*0 + 3*132*FLEN/8, x4, x1, x2)

inst_16964:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x31ec28 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5c15c5 and fs3 == 1 and fe3 == 0x64 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb1ec28; op2val:0x805c15c5;
op3val:0xb2000001; valaddr_reg:x3; val_offset:50892*0 + 3*132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50892*0 + 3*132*FLEN/8, x4, x1, x2)

inst_16965:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x31ec28 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5c15c5 and fs3 == 1 and fe3 == 0x64 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb1ec28; op2val:0x805c15c5;
op3val:0xb2000003; valaddr_reg:x3; val_offset:50895*0 + 3*132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50895*0 + 3*132*FLEN/8, x4, x1, x2)

inst_16966:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x31ec28 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5c15c5 and fs3 == 1 and fe3 == 0x64 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb1ec28; op2val:0x805c15c5;
op3val:0xb2000007; valaddr_reg:x3; val_offset:50898*0 + 3*132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50898*0 + 3*132*FLEN/8, x4, x1, x2)

inst_16967:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x31ec28 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5c15c5 and fs3 == 1 and fe3 == 0x64 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb1ec28; op2val:0x805c15c5;
op3val:0xb200000f; valaddr_reg:x3; val_offset:50901*0 + 3*132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50901*0 + 3*132*FLEN/8, x4, x1, x2)

inst_16968:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x31ec28 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5c15c5 and fs3 == 1 and fe3 == 0x64 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb1ec28; op2val:0x805c15c5;
op3val:0xb200001f; valaddr_reg:x3; val_offset:50904*0 + 3*132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50904*0 + 3*132*FLEN/8, x4, x1, x2)

inst_16969:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x31ec28 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5c15c5 and fs3 == 1 and fe3 == 0x64 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb1ec28; op2val:0x805c15c5;
op3val:0xb200003f; valaddr_reg:x3; val_offset:50907*0 + 3*132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50907*0 + 3*132*FLEN/8, x4, x1, x2)

inst_16970:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x31ec28 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5c15c5 and fs3 == 1 and fe3 == 0x64 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb1ec28; op2val:0x805c15c5;
op3val:0xb200007f; valaddr_reg:x3; val_offset:50910*0 + 3*132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50910*0 + 3*132*FLEN/8, x4, x1, x2)

inst_16971:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x31ec28 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5c15c5 and fs3 == 1 and fe3 == 0x64 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb1ec28; op2val:0x805c15c5;
op3val:0xb20000ff; valaddr_reg:x3; val_offset:50913*0 + 3*132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50913*0 + 3*132*FLEN/8, x4, x1, x2)

inst_16972:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x31ec28 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5c15c5 and fs3 == 1 and fe3 == 0x64 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb1ec28; op2val:0x805c15c5;
op3val:0xb20001ff; valaddr_reg:x3; val_offset:50916*0 + 3*132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50916*0 + 3*132*FLEN/8, x4, x1, x2)

inst_16973:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x31ec28 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5c15c5 and fs3 == 1 and fe3 == 0x64 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb1ec28; op2val:0x805c15c5;
op3val:0xb20003ff; valaddr_reg:x3; val_offset:50919*0 + 3*132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50919*0 + 3*132*FLEN/8, x4, x1, x2)

inst_16974:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x31ec28 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5c15c5 and fs3 == 1 and fe3 == 0x64 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb1ec28; op2val:0x805c15c5;
op3val:0xb20007ff; valaddr_reg:x3; val_offset:50922*0 + 3*132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50922*0 + 3*132*FLEN/8, x4, x1, x2)

inst_16975:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x31ec28 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5c15c5 and fs3 == 1 and fe3 == 0x64 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb1ec28; op2val:0x805c15c5;
op3val:0xb2000fff; valaddr_reg:x3; val_offset:50925*0 + 3*132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50925*0 + 3*132*FLEN/8, x4, x1, x2)

inst_16976:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x31ec28 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5c15c5 and fs3 == 1 and fe3 == 0x64 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb1ec28; op2val:0x805c15c5;
op3val:0xb2001fff; valaddr_reg:x3; val_offset:50928*0 + 3*132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50928*0 + 3*132*FLEN/8, x4, x1, x2)

inst_16977:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x31ec28 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5c15c5 and fs3 == 1 and fe3 == 0x64 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb1ec28; op2val:0x805c15c5;
op3val:0xb2003fff; valaddr_reg:x3; val_offset:50931*0 + 3*132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50931*0 + 3*132*FLEN/8, x4, x1, x2)

inst_16978:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x31ec28 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5c15c5 and fs3 == 1 and fe3 == 0x64 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb1ec28; op2val:0x805c15c5;
op3val:0xb2007fff; valaddr_reg:x3; val_offset:50934*0 + 3*132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50934*0 + 3*132*FLEN/8, x4, x1, x2)

inst_16979:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x31ec28 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5c15c5 and fs3 == 1 and fe3 == 0x64 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb1ec28; op2val:0x805c15c5;
op3val:0xb200ffff; valaddr_reg:x3; val_offset:50937*0 + 3*132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50937*0 + 3*132*FLEN/8, x4, x1, x2)

inst_16980:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x31ec28 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5c15c5 and fs3 == 1 and fe3 == 0x64 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb1ec28; op2val:0x805c15c5;
op3val:0xb201ffff; valaddr_reg:x3; val_offset:50940*0 + 3*132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50940*0 + 3*132*FLEN/8, x4, x1, x2)

inst_16981:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x31ec28 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5c15c5 and fs3 == 1 and fe3 == 0x64 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb1ec28; op2val:0x805c15c5;
op3val:0xb203ffff; valaddr_reg:x3; val_offset:50943*0 + 3*132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50943*0 + 3*132*FLEN/8, x4, x1, x2)

inst_16982:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x31ec28 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5c15c5 and fs3 == 1 and fe3 == 0x64 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb1ec28; op2val:0x805c15c5;
op3val:0xb207ffff; valaddr_reg:x3; val_offset:50946*0 + 3*132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50946*0 + 3*132*FLEN/8, x4, x1, x2)

inst_16983:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x31ec28 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5c15c5 and fs3 == 1 and fe3 == 0x64 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb1ec28; op2val:0x805c15c5;
op3val:0xb20fffff; valaddr_reg:x3; val_offset:50949*0 + 3*132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50949*0 + 3*132*FLEN/8, x4, x1, x2)

inst_16984:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x31ec28 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5c15c5 and fs3 == 1 and fe3 == 0x64 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb1ec28; op2val:0x805c15c5;
op3val:0xb21fffff; valaddr_reg:x3; val_offset:50952*0 + 3*132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50952*0 + 3*132*FLEN/8, x4, x1, x2)

inst_16985:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x31ec28 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5c15c5 and fs3 == 1 and fe3 == 0x64 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb1ec28; op2val:0x805c15c5;
op3val:0xb23fffff; valaddr_reg:x3; val_offset:50955*0 + 3*132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50955*0 + 3*132*FLEN/8, x4, x1, x2)

inst_16986:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x31ec28 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5c15c5 and fs3 == 1 and fe3 == 0x64 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb1ec28; op2val:0x805c15c5;
op3val:0xb2400000; valaddr_reg:x3; val_offset:50958*0 + 3*132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50958*0 + 3*132*FLEN/8, x4, x1, x2)

inst_16987:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x31ec28 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5c15c5 and fs3 == 1 and fe3 == 0x64 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb1ec28; op2val:0x805c15c5;
op3val:0xb2600000; valaddr_reg:x3; val_offset:50961*0 + 3*132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50961*0 + 3*132*FLEN/8, x4, x1, x2)

inst_16988:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x31ec28 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5c15c5 and fs3 == 1 and fe3 == 0x64 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb1ec28; op2val:0x805c15c5;
op3val:0xb2700000; valaddr_reg:x3; val_offset:50964*0 + 3*132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50964*0 + 3*132*FLEN/8, x4, x1, x2)

inst_16989:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x31ec28 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5c15c5 and fs3 == 1 and fe3 == 0x64 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb1ec28; op2val:0x805c15c5;
op3val:0xb2780000; valaddr_reg:x3; val_offset:50967*0 + 3*132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50967*0 + 3*132*FLEN/8, x4, x1, x2)

inst_16990:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x31ec28 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5c15c5 and fs3 == 1 and fe3 == 0x64 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb1ec28; op2val:0x805c15c5;
op3val:0xb27c0000; valaddr_reg:x3; val_offset:50970*0 + 3*132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50970*0 + 3*132*FLEN/8, x4, x1, x2)

inst_16991:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x31ec28 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5c15c5 and fs3 == 1 and fe3 == 0x64 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb1ec28; op2val:0x805c15c5;
op3val:0xb27e0000; valaddr_reg:x3; val_offset:50973*0 + 3*132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50973*0 + 3*132*FLEN/8, x4, x1, x2)

inst_16992:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x31ec28 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5c15c5 and fs3 == 1 and fe3 == 0x64 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb1ec28; op2val:0x805c15c5;
op3val:0xb27f0000; valaddr_reg:x3; val_offset:50976*0 + 3*132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50976*0 + 3*132*FLEN/8, x4, x1, x2)

inst_16993:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x31ec28 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5c15c5 and fs3 == 1 and fe3 == 0x64 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb1ec28; op2val:0x805c15c5;
op3val:0xb27f8000; valaddr_reg:x3; val_offset:50979*0 + 3*132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50979*0 + 3*132*FLEN/8, x4, x1, x2)

inst_16994:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x31ec28 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5c15c5 and fs3 == 1 and fe3 == 0x64 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb1ec28; op2val:0x805c15c5;
op3val:0xb27fc000; valaddr_reg:x3; val_offset:50982*0 + 3*132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50982*0 + 3*132*FLEN/8, x4, x1, x2)

inst_16995:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x31ec28 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5c15c5 and fs3 == 1 and fe3 == 0x64 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb1ec28; op2val:0x805c15c5;
op3val:0xb27fe000; valaddr_reg:x3; val_offset:50985*0 + 3*132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50985*0 + 3*132*FLEN/8, x4, x1, x2)

inst_16996:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x31ec28 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5c15c5 and fs3 == 1 and fe3 == 0x64 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb1ec28; op2val:0x805c15c5;
op3val:0xb27ff000; valaddr_reg:x3; val_offset:50988*0 + 3*132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50988*0 + 3*132*FLEN/8, x4, x1, x2)

inst_16997:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x31ec28 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5c15c5 and fs3 == 1 and fe3 == 0x64 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb1ec28; op2val:0x805c15c5;
op3val:0xb27ff800; valaddr_reg:x3; val_offset:50991*0 + 3*132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50991*0 + 3*132*FLEN/8, x4, x1, x2)

inst_16998:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x31ec28 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5c15c5 and fs3 == 1 and fe3 == 0x64 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb1ec28; op2val:0x805c15c5;
op3val:0xb27ffc00; valaddr_reg:x3; val_offset:50994*0 + 3*132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50994*0 + 3*132*FLEN/8, x4, x1, x2)

inst_16999:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x31ec28 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5c15c5 and fs3 == 1 and fe3 == 0x64 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb1ec28; op2val:0x805c15c5;
op3val:0xb27ffe00; valaddr_reg:x3; val_offset:50997*0 + 3*132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50997*0 + 3*132*FLEN/8, x4, x1, x2)

inst_17000:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x31ec28 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5c15c5 and fs3 == 1 and fe3 == 0x64 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb1ec28; op2val:0x805c15c5;
op3val:0xb27fff00; valaddr_reg:x3; val_offset:51000*0 + 3*132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51000*0 + 3*132*FLEN/8, x4, x1, x2)

inst_17001:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x31ec28 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5c15c5 and fs3 == 1 and fe3 == 0x64 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb1ec28; op2val:0x805c15c5;
op3val:0xb27fff80; valaddr_reg:x3; val_offset:51003*0 + 3*132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51003*0 + 3*132*FLEN/8, x4, x1, x2)

inst_17002:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x31ec28 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5c15c5 and fs3 == 1 and fe3 == 0x64 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb1ec28; op2val:0x805c15c5;
op3val:0xb27fffc0; valaddr_reg:x3; val_offset:51006*0 + 3*132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51006*0 + 3*132*FLEN/8, x4, x1, x2)

inst_17003:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x31ec28 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5c15c5 and fs3 == 1 and fe3 == 0x64 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb1ec28; op2val:0x805c15c5;
op3val:0xb27fffe0; valaddr_reg:x3; val_offset:51009*0 + 3*132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51009*0 + 3*132*FLEN/8, x4, x1, x2)

inst_17004:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x31ec28 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5c15c5 and fs3 == 1 and fe3 == 0x64 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb1ec28; op2val:0x805c15c5;
op3val:0xb27ffff0; valaddr_reg:x3; val_offset:51012*0 + 3*132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51012*0 + 3*132*FLEN/8, x4, x1, x2)

inst_17005:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x31ec28 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5c15c5 and fs3 == 1 and fe3 == 0x64 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb1ec28; op2val:0x805c15c5;
op3val:0xb27ffff8; valaddr_reg:x3; val_offset:51015*0 + 3*132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51015*0 + 3*132*FLEN/8, x4, x1, x2)

inst_17006:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x31ec28 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5c15c5 and fs3 == 1 and fe3 == 0x64 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb1ec28; op2val:0x805c15c5;
op3val:0xb27ffffc; valaddr_reg:x3; val_offset:51018*0 + 3*132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51018*0 + 3*132*FLEN/8, x4, x1, x2)

inst_17007:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x31ec28 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5c15c5 and fs3 == 1 and fe3 == 0x64 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb1ec28; op2val:0x805c15c5;
op3val:0xb27ffffe; valaddr_reg:x3; val_offset:51021*0 + 3*132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51021*0 + 3*132*FLEN/8, x4, x1, x2)

inst_17008:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x31ec28 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5c15c5 and fs3 == 1 and fe3 == 0x64 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb1ec28; op2val:0x805c15c5;
op3val:0xb27fffff; valaddr_reg:x3; val_offset:51024*0 + 3*132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51024*0 + 3*132*FLEN/8, x4, x1, x2)

inst_17009:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x31ec28 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5c15c5 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb1ec28; op2val:0x805c15c5;
op3val:0xbf800001; valaddr_reg:x3; val_offset:51027*0 + 3*132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51027*0 + 3*132*FLEN/8, x4, x1, x2)

inst_17010:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x31ec28 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5c15c5 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb1ec28; op2val:0x805c15c5;
op3val:0xbf800003; valaddr_reg:x3; val_offset:51030*0 + 3*132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51030*0 + 3*132*FLEN/8, x4, x1, x2)

inst_17011:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x31ec28 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5c15c5 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb1ec28; op2val:0x805c15c5;
op3val:0xbf800007; valaddr_reg:x3; val_offset:51033*0 + 3*132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51033*0 + 3*132*FLEN/8, x4, x1, x2)

inst_17012:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x31ec28 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5c15c5 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb1ec28; op2val:0x805c15c5;
op3val:0xbf999999; valaddr_reg:x3; val_offset:51036*0 + 3*132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51036*0 + 3*132*FLEN/8, x4, x1, x2)

inst_17013:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x31ec28 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5c15c5 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb1ec28; op2val:0x805c15c5;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:51039*0 + 3*132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51039*0 + 3*132*FLEN/8, x4, x1, x2)

inst_17014:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x31ec28 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5c15c5 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb1ec28; op2val:0x805c15c5;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:51042*0 + 3*132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51042*0 + 3*132*FLEN/8, x4, x1, x2)

inst_17015:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x31ec28 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5c15c5 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb1ec28; op2val:0x805c15c5;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:51045*0 + 3*132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51045*0 + 3*132*FLEN/8, x4, x1, x2)

inst_17016:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x31ec28 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5c15c5 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb1ec28; op2val:0x805c15c5;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:51048*0 + 3*132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51048*0 + 3*132*FLEN/8, x4, x1, x2)

inst_17017:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x31ec28 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5c15c5 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb1ec28; op2val:0x805c15c5;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:51051*0 + 3*132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51051*0 + 3*132*FLEN/8, x4, x1, x2)

inst_17018:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x31ec28 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5c15c5 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb1ec28; op2val:0x805c15c5;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:51054*0 + 3*132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51054*0 + 3*132*FLEN/8, x4, x1, x2)

inst_17019:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x31ec28 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5c15c5 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb1ec28; op2val:0x805c15c5;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:51057*0 + 3*132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51057*0 + 3*132*FLEN/8, x4, x1, x2)

inst_17020:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x31ec28 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5c15c5 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb1ec28; op2val:0x805c15c5;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:51060*0 + 3*132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51060*0 + 3*132*FLEN/8, x4, x1, x2)

inst_17021:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x31ec28 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5c15c5 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb1ec28; op2val:0x805c15c5;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:51063*0 + 3*132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51063*0 + 3*132*FLEN/8, x4, x1, x2)

inst_17022:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x31ec28 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5c15c5 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb1ec28; op2val:0x805c15c5;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:51066*0 + 3*132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51066*0 + 3*132*FLEN/8, x4, x1, x2)

inst_17023:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x31ec28 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5c15c5 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb1ec28; op2val:0x805c15c5;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:51069*0 + 3*132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51069*0 + 3*132*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2125513564,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67108848,32,FLEN)
NAN_BOXED(2125513564,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67108856,32,FLEN)
NAN_BOXED(2125513564,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67108860,32,FLEN)
NAN_BOXED(2125513564,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67108862,32,FLEN)
NAN_BOXED(2125513564,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67108863,32,FLEN)
NAN_BOXED(2125529174,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2125529174,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3,32,FLEN)
NAN_BOXED(2125529174,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7,32,FLEN)
NAN_BOXED(2125529174,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1677721,32,FLEN)
NAN_BOXED(2125529174,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2396745,32,FLEN)
NAN_BOXED(2125529174,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3355443,32,FLEN)
NAN_BOXED(2125529174,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3595117,32,FLEN)
NAN_BOXED(2125529174,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3914683,32,FLEN)
NAN_BOXED(2125529174,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4473924,32,FLEN)
NAN_BOXED(2125529174,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5033164,32,FLEN)
NAN_BOXED(2125529174,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5991862,32,FLEN)
NAN_BOXED(2125529174,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(6710886,32,FLEN)
NAN_BOXED(2125529174,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7190235,32,FLEN)
NAN_BOXED(2125529174,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388600,32,FLEN)
NAN_BOXED(2125529174,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388604,32,FLEN)
NAN_BOXED(2125529174,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388606,32,FLEN)
NAN_BOXED(2125529174,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75497472,32,FLEN)
NAN_BOXED(2125529174,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75497473,32,FLEN)
NAN_BOXED(2125529174,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75497475,32,FLEN)
NAN_BOXED(2125529174,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75497479,32,FLEN)
NAN_BOXED(2125529174,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75497487,32,FLEN)
NAN_BOXED(2125529174,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75497503,32,FLEN)
NAN_BOXED(2125529174,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75497535,32,FLEN)
NAN_BOXED(2125529174,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75497599,32,FLEN)
NAN_BOXED(2125529174,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75497727,32,FLEN)
NAN_BOXED(2125529174,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75497983,32,FLEN)
NAN_BOXED(2125529174,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75498495,32,FLEN)
NAN_BOXED(2125529174,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75499519,32,FLEN)
NAN_BOXED(2125529174,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75501567,32,FLEN)
NAN_BOXED(2125529174,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75505663,32,FLEN)
NAN_BOXED(2125529174,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75513855,32,FLEN)
NAN_BOXED(2125529174,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75530239,32,FLEN)
NAN_BOXED(2125529174,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75563007,32,FLEN)
NAN_BOXED(2125529174,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75628543,32,FLEN)
NAN_BOXED(2125529174,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75759615,32,FLEN)
NAN_BOXED(2125529174,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(76021759,32,FLEN)
NAN_BOXED(2125529174,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(76546047,32,FLEN)
NAN_BOXED(2125529174,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(77594623,32,FLEN)
NAN_BOXED(2125529174,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(79691775,32,FLEN)
NAN_BOXED(2125529174,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(79691776,32,FLEN)
NAN_BOXED(2125529174,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(81788928,32,FLEN)
NAN_BOXED(2125529174,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(82837504,32,FLEN)
NAN_BOXED(2125529174,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83361792,32,FLEN)
NAN_BOXED(2125529174,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83623936,32,FLEN)
NAN_BOXED(2125529174,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83755008,32,FLEN)
NAN_BOXED(2125529174,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83820544,32,FLEN)
NAN_BOXED(2125529174,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83853312,32,FLEN)
NAN_BOXED(2125529174,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83869696,32,FLEN)
NAN_BOXED(2125529174,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83877888,32,FLEN)
NAN_BOXED(2125529174,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83881984,32,FLEN)
NAN_BOXED(2125529174,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83884032,32,FLEN)
NAN_BOXED(2125529174,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83885056,32,FLEN)
NAN_BOXED(2125529174,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83885568,32,FLEN)
NAN_BOXED(2125529174,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83885824,32,FLEN)
NAN_BOXED(2125529174,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83885952,32,FLEN)
NAN_BOXED(2125529174,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83886016,32,FLEN)
NAN_BOXED(2125529174,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83886048,32,FLEN)
NAN_BOXED(2125529174,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83886064,32,FLEN)
NAN_BOXED(2125529174,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83886072,32,FLEN)
NAN_BOXED(2125529174,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83886076,32,FLEN)
NAN_BOXED(2125529174,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83886078,32,FLEN)
NAN_BOXED(2125529174,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83886079,32,FLEN)
NAN_BOXED(2125589544,32,FLEN)
NAN_BOXED(2153518533,32,FLEN)
NAN_BOXED(2986344448,32,FLEN)
NAN_BOXED(2125589544,32,FLEN)
NAN_BOXED(2153518533,32,FLEN)
NAN_BOXED(2986344449,32,FLEN)
NAN_BOXED(2125589544,32,FLEN)
NAN_BOXED(2153518533,32,FLEN)
NAN_BOXED(2986344451,32,FLEN)
NAN_BOXED(2125589544,32,FLEN)
NAN_BOXED(2153518533,32,FLEN)
NAN_BOXED(2986344455,32,FLEN)
NAN_BOXED(2125589544,32,FLEN)
NAN_BOXED(2153518533,32,FLEN)
NAN_BOXED(2986344463,32,FLEN)
NAN_BOXED(2125589544,32,FLEN)
NAN_BOXED(2153518533,32,FLEN)
NAN_BOXED(2986344479,32,FLEN)
NAN_BOXED(2125589544,32,FLEN)
NAN_BOXED(2153518533,32,FLEN)
NAN_BOXED(2986344511,32,FLEN)
NAN_BOXED(2125589544,32,FLEN)
NAN_BOXED(2153518533,32,FLEN)
NAN_BOXED(2986344575,32,FLEN)
NAN_BOXED(2125589544,32,FLEN)
NAN_BOXED(2153518533,32,FLEN)
NAN_BOXED(2986344703,32,FLEN)
NAN_BOXED(2125589544,32,FLEN)
NAN_BOXED(2153518533,32,FLEN)
NAN_BOXED(2986344959,32,FLEN)
NAN_BOXED(2125589544,32,FLEN)
NAN_BOXED(2153518533,32,FLEN)
NAN_BOXED(2986345471,32,FLEN)
NAN_BOXED(2125589544,32,FLEN)
NAN_BOXED(2153518533,32,FLEN)
NAN_BOXED(2986346495,32,FLEN)
NAN_BOXED(2125589544,32,FLEN)
NAN_BOXED(2153518533,32,FLEN)
NAN_BOXED(2986348543,32,FLEN)
NAN_BOXED(2125589544,32,FLEN)
NAN_BOXED(2153518533,32,FLEN)
NAN_BOXED(2986352639,32,FLEN)
NAN_BOXED(2125589544,32,FLEN)
NAN_BOXED(2153518533,32,FLEN)
NAN_BOXED(2986360831,32,FLEN)
NAN_BOXED(2125589544,32,FLEN)
NAN_BOXED(2153518533,32,FLEN)
NAN_BOXED(2986377215,32,FLEN)
NAN_BOXED(2125589544,32,FLEN)
NAN_BOXED(2153518533,32,FLEN)
NAN_BOXED(2986409983,32,FLEN)
NAN_BOXED(2125589544,32,FLEN)
NAN_BOXED(2153518533,32,FLEN)
NAN_BOXED(2986475519,32,FLEN)
NAN_BOXED(2125589544,32,FLEN)
NAN_BOXED(2153518533,32,FLEN)
NAN_BOXED(2986606591,32,FLEN)
NAN_BOXED(2125589544,32,FLEN)
NAN_BOXED(2153518533,32,FLEN)
NAN_BOXED(2986868735,32,FLEN)
NAN_BOXED(2125589544,32,FLEN)
NAN_BOXED(2153518533,32,FLEN)
NAN_BOXED(2987393023,32,FLEN)
NAN_BOXED(2125589544,32,FLEN)
NAN_BOXED(2153518533,32,FLEN)
NAN_BOXED(2988441599,32,FLEN)
NAN_BOXED(2125589544,32,FLEN)
NAN_BOXED(2153518533,32,FLEN)
NAN_BOXED(2990538751,32,FLEN)
NAN_BOXED(2125589544,32,FLEN)
NAN_BOXED(2153518533,32,FLEN)
NAN_BOXED(2990538752,32,FLEN)
NAN_BOXED(2125589544,32,FLEN)
NAN_BOXED(2153518533,32,FLEN)
NAN_BOXED(2992635904,32,FLEN)
NAN_BOXED(2125589544,32,FLEN)
NAN_BOXED(2153518533,32,FLEN)
NAN_BOXED(2993684480,32,FLEN)
NAN_BOXED(2125589544,32,FLEN)
NAN_BOXED(2153518533,32,FLEN)
NAN_BOXED(2994208768,32,FLEN)
NAN_BOXED(2125589544,32,FLEN)
NAN_BOXED(2153518533,32,FLEN)
NAN_BOXED(2994470912,32,FLEN)
NAN_BOXED(2125589544,32,FLEN)
NAN_BOXED(2153518533,32,FLEN)
NAN_BOXED(2994601984,32,FLEN)
NAN_BOXED(2125589544,32,FLEN)
NAN_BOXED(2153518533,32,FLEN)
NAN_BOXED(2994667520,32,FLEN)
NAN_BOXED(2125589544,32,FLEN)
NAN_BOXED(2153518533,32,FLEN)
NAN_BOXED(2994700288,32,FLEN)
NAN_BOXED(2125589544,32,FLEN)
NAN_BOXED(2153518533,32,FLEN)
NAN_BOXED(2994716672,32,FLEN)
NAN_BOXED(2125589544,32,FLEN)
NAN_BOXED(2153518533,32,FLEN)
NAN_BOXED(2994724864,32,FLEN)
NAN_BOXED(2125589544,32,FLEN)
NAN_BOXED(2153518533,32,FLEN)
NAN_BOXED(2994728960,32,FLEN)
NAN_BOXED(2125589544,32,FLEN)
NAN_BOXED(2153518533,32,FLEN)
NAN_BOXED(2994731008,32,FLEN)
NAN_BOXED(2125589544,32,FLEN)
NAN_BOXED(2153518533,32,FLEN)
NAN_BOXED(2994732032,32,FLEN)
NAN_BOXED(2125589544,32,FLEN)
NAN_BOXED(2153518533,32,FLEN)
NAN_BOXED(2994732544,32,FLEN)
NAN_BOXED(2125589544,32,FLEN)
NAN_BOXED(2153518533,32,FLEN)
NAN_BOXED(2994732800,32,FLEN)
NAN_BOXED(2125589544,32,FLEN)
NAN_BOXED(2153518533,32,FLEN)
NAN_BOXED(2994732928,32,FLEN)
NAN_BOXED(2125589544,32,FLEN)
NAN_BOXED(2153518533,32,FLEN)
NAN_BOXED(2994732992,32,FLEN)
NAN_BOXED(2125589544,32,FLEN)
NAN_BOXED(2153518533,32,FLEN)
NAN_BOXED(2994733024,32,FLEN)
NAN_BOXED(2125589544,32,FLEN)
NAN_BOXED(2153518533,32,FLEN)
NAN_BOXED(2994733040,32,FLEN)
NAN_BOXED(2125589544,32,FLEN)
NAN_BOXED(2153518533,32,FLEN)
NAN_BOXED(2994733048,32,FLEN)
NAN_BOXED(2125589544,32,FLEN)
NAN_BOXED(2153518533,32,FLEN)
NAN_BOXED(2994733052,32,FLEN)
NAN_BOXED(2125589544,32,FLEN)
NAN_BOXED(2153518533,32,FLEN)
NAN_BOXED(2994733054,32,FLEN)
NAN_BOXED(2125589544,32,FLEN)
NAN_BOXED(2153518533,32,FLEN)
NAN_BOXED(2994733055,32,FLEN)
NAN_BOXED(2125589544,32,FLEN)
NAN_BOXED(2153518533,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2125589544,32,FLEN)
NAN_BOXED(2153518533,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2125589544,32,FLEN)
NAN_BOXED(2153518533,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
NAN_BOXED(2125589544,32,FLEN)
NAN_BOXED(2153518533,32,FLEN)
NAN_BOXED(3214514585,32,FLEN)
NAN_BOXED(2125589544,32,FLEN)
NAN_BOXED(2153518533,32,FLEN)
NAN_BOXED(3215233609,32,FLEN)
NAN_BOXED(2125589544,32,FLEN)
NAN_BOXED(2153518533,32,FLEN)
NAN_BOXED(3216192307,32,FLEN)
NAN_BOXED(2125589544,32,FLEN)
NAN_BOXED(2153518533,32,FLEN)
NAN_BOXED(3216431981,32,FLEN)
NAN_BOXED(2125589544,32,FLEN)
NAN_BOXED(2153518533,32,FLEN)
NAN_BOXED(3216751547,32,FLEN)
NAN_BOXED(2125589544,32,FLEN)
NAN_BOXED(2153518533,32,FLEN)
NAN_BOXED(3217310788,32,FLEN)
NAN_BOXED(2125589544,32,FLEN)
NAN_BOXED(2153518533,32,FLEN)
NAN_BOXED(3217870028,32,FLEN)
NAN_BOXED(2125589544,32,FLEN)
NAN_BOXED(2153518533,32,FLEN)
NAN_BOXED(3218828726,32,FLEN)
NAN_BOXED(2125589544,32,FLEN)
NAN_BOXED(2153518533,32,FLEN)
NAN_BOXED(3219547750,32,FLEN)
NAN_BOXED(2125589544,32,FLEN)
NAN_BOXED(2153518533,32,FLEN)
NAN_BOXED(3220027099,32,FLEN)
NAN_BOXED(2125589544,32,FLEN)
NAN_BOXED(2153518533,32,FLEN)
NAN_BOXED(3221225464,32,FLEN)
NAN_BOXED(2125589544,32,FLEN)
NAN_BOXED(2153518533,32,FLEN)
NAN_BOXED(3221225468,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
